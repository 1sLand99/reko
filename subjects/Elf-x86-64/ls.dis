void _init()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn0000000000402168_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402168:
	word64 rax_4 = Mem0[0x0000000000619FF8:word64]
	branch rax_4 == 0x0000000000000000 l000000000040217D
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402178:
	word64 rsp_15
	byte SCZO_16
	word64 rax_17
	byte SZO_18
	byte C_19
	byte Z_20
	call __gmon_start__ (retsize: 8; depth: 16)
		uses: C_7,rax_4,rsp_2,SCZO,SZO_5,Z_6
		defs: C_19,rax_17,rsp_15,SCZO_16,SZO_18,Z_20
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l000000000040217D:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

fn0000000000402168_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn00000000004021A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004021A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004021A0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004021B0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004021B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004021B0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004021C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004021C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004021C0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004021D0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004021D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004021D0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004021E0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004021E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004021E0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void free()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004021F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004021F0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402200()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402200_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402200_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402210()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402210_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402210_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402220()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402220_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402220_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402230()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402230_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402230_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402240()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402240_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402240_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402250()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402250_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402250_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402260()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402260_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402260_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402270()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402270_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402270_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402280()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402280_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402280_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402290()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402290_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402290_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004022A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004022A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004022A0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004022B0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004022B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004022B0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004022C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004022C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004022C0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004022D0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004022D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004022D0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004022E0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004022E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004022E0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004022F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004022F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004022F0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402300()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402300_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402300_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402310()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402310_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402310_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402320()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402320_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402320_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402330()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402330_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402330_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402340()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402340_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402340_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402350()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402350_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402350_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402360()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402360_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402360_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402370()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402370_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402370_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402380()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402380_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402380_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402390()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402390_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402390_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004023A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004023A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004023A0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004023B0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004023B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004023B0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004023C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004023C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004023C0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004023D0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004023D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004023D0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004023E0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004023E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004023E0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004023F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004023F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004023F0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402400()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402400_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402400_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402410()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402410_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402410_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402420()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402420_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402420_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402430()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402430_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402430_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402440()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402440_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402440_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402450()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402450_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402450_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402460()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402460_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402460_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402470()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402470_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402470_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402480()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402480_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402480_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402490()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402490_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402490_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004024A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004024A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004024A0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004024B0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004024B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004024B0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004024C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004024C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004024C0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004024D0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004024D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004024D0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004024E0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004024E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004024E0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004024F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004024F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004024F0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402500()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402500_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402500_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402510()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402510_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402510_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402520()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402520_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402520_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402530()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402530_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402530_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402540()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402540_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402540_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402550()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402550_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402550_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402560()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402560_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402560_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402570()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402570_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402570_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402580()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402580_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402580_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402590()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402590_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402590_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004025A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004025A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004025A0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004025B0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004025B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004025B0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004025C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004025C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004025C0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004025D0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004025D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004025D0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004025E0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004025E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004025E0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004025F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004025F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004025F0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402600()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402600_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402600_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402610()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402610_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402610_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402620()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402620_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402620_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402630()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402630_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402630_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void malloc()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402640_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402660()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402660_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402660_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402670()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402670_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402670_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402680()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402680_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402680_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004026A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004026A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004026A0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004026B0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004026B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004026B0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004026C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004026C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004026C0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004026D0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004026D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004026D0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004026E0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004026E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004026E0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004026F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004026F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004026F0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402700()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402700_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402700_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402710()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402710_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402710_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402720()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402720_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402720_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402730()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402730_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402730_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402740()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402740_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402740_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402750()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402750_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402750_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402760()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402760_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402760_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402770()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402770_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402770_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402780()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402780_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402780_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004027A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004027A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004027A0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004027C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004027C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004027C0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004027D0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004027D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004027D0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004027E0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004027E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004027E0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004027F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004027F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004027F0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402800()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402800_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402800_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402810()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402810_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402810_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402820()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402820_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402820_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402830()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402830_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402830_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402840()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402840_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402840_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402850()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402850_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402850_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402860()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402860_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402860_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402870()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402870_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402870_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402880()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402880_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402880_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402890()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402890_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402890_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000404890(word64 rax, word64 rdx, word64 qwArg00, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdx
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0000(64)
// Terminates process
fn0000000000404890_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000404890_entry:
// DataOut: rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404890:
	__align(fp + 0x0000000000000008)
	word64 rax_22 = DPB(rax, __libc_start_main(0x00000000004028C0, qwArg00, fp + 0x0000000000000008, 0x0000000000411E60, 0x0000000000411ED0, rdx, DPB(qwArg00, fp + 0x0000000000000004, 0)), 0)
	__hlt()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004048C0(word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi esp r8 r8b r8d r8w rax rdi rsp sp spl
// Preserved: rbp
fn00000000004048C0_entry:
// DataOut: r8
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048C0:
	branch false l00000000004048D7
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048D7:
	branch 0x0000000000000000 == 0x0000000000000000 l00000000004048D5
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rax:0x000000000061A5FF r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l00000000004048E1:
	word64 rsp_43
	word32 eax_44
	word64 rax_45
	word64 rbp_46
	word64 r8_47
	byte SCZO_48
	byte CZ_49
	byte SZO_50
	byte C_51
	byte Z_52
	word32 edi_53
	word64 rdi_54
	call eax (retsize: 4;)
		uses: C_39,CZ_9,dwLoc04_5,eax,edi,qwLoc04,r8_7,rax_36,rbp_40,rdi_42,rsp_41,SCZO_8,SZO_37,Z_38
		defs: C_51,CZ_49,eax_44,edi_53,r8_47,rax_45,rbp_46,rdi_54,rsp_43,SCZO_48,SZO_50,Z_52
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rax:0x0000000000000000 r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp

l00000000004048D5:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rax:<invalid> r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp

fn00000000004048C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rax:<invalid> r8:<invalid> rbp:rbp rdi:<invalid> -4(fp):rbp



void fn00000000004049E0(word64 rcx, byte dl, word64 r13, word64 r14, word64 r15, word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl r13 r14 r15 rcx
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx eax ebp ecx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0000(64)
fn00000000004049E0_entry:
// DataOut: dl r13 r14 r15 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l00000000004049E0:
	word64 r8_103 = Mem0[r14:word64]
	word64 rax_106 = 0x0000000000000000
	word32 eax_216 = 0x00000000
	word64 r9_105 = Mem0[r15:word64]
	word64 r10_104 = 0x0000000000000000
	word64 r11_117 = 0x0000000000000000
	word32 r11d_118 = 0x00000000
	byte r11b_119 = 0x00
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A06:
	byte al_277
	byte SZO_161
	byte al_100
	word32 eax_145
	branch eax_216 == 0x00000002 l0000000000404A59
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A59:
	rax_106 = DPB(rax_106, (word32) Mem0[rax_106:byte], 0) (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000030, 0) (alias)
	branch (byte) (rax_106 - 0x0000000000000030) <=u 0x07 l0000000000404A50
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A50:
	r11d_118 = rax_106 - 0x0000000000000030 + r11_117 * 0x00000008
	r11_117 = DPB(r11_117, r11d_118, 0) (alias)
	r11b_119 = (byte) r11d_118 (alias)
	r8_103 = r8_103 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A0B:
	branch eax_216 <=u 0x00000002 l0000000000404B20
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B20:
	branch eax_216 != 0x00000001 l0000000000404A70
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A11:
	branch eax_216 == 0x00000003 l0000000000404AE0
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AE0:
	rax_106 = DPB(rax_106, (word32) Mem0[rax_106:byte], 0) (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000030, 0) (alias)
	byte cl_393 = (byte) (rax_106 - 0x0000000000000030)
	branch cl_393 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AF0:
	r14 = 0x0000000000000001 << cl_393
	word32 r14d_410 = (word32) r14
	branch (r14d_410 & 0x007E0000) != 0x00000000 l0000000000404B78
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B78:
	word64 r11_433 = (uint64) (r11d_118 << 0x00000004)
	r11d_118 = rax_106 - 0x0000000000000037 + r11_433
	rax_106 = DPB(rax_106, (word32) Mem0[rax_106:byte], 0) (alias)
	r8_103 = r8_103 + 0x0000000000000001
	r11_117 = DPB(r11_433, r11d_118, 0) (alias)
	r11b_119 = (byte) r11d_118 (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000030, 0) (alias)
	cl_393 = (byte) (rax_106 - 0x0000000000000030) (alias)
	branch cl_393 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B95:
// DataOut: al cl dl eax r10 r11 r11b r11d r13 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AFF:
	branch (r14 & 0x0000000000000000) != 0x0000000000000000 l0000000000404AD0
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AD0:
	word64 r11_426 = (uint64) (r11d_118 << 0x00000004)
	r11d_118 = rax_106 - 0x0000000000000057 + r11_426
	r8_103 = r8_103 + 0x0000000000000001
	r11_117 = DPB(r11_426, r11d_118, 0) (alias)
	r11b_119 = (byte) r11d_118 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B04:
	branch (r14d_410 & 0x000003FF) == 0x00000000 l0000000000404A65
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A65:
	Mem360[r9_105:byte] = r11b_119
	r10_104 = r10_104 + 0x0000000000000001
	r9_105 = r9_105 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B11:
	word64 r11_420 = (uint64) (r11d_118 << 0x00000004)
	r11d_118 = rax_106 - 0x0000000000000030 + r11_420
	r8_103 = r8_103 + 0x0000000000000001
	r11_117 = DPB(r11_420, r11d_118, 0) (alias)
	r11b_119 = (byte) r11d_118 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r14:0x0000000000000001 << cl r11d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A1A:
	branch eax_216 != 0x00000004 l0000000000404A70
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A22:
	eax_145 = (word32) Mem0[rax_106:byte]
	rax_106 = DPB(rax_106, eax_145, 0) (alias)
	al_277 = (byte) eax_145 (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_106 - 0x0000000000000040) <=u 0x3E l0000000000404AA0
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A2E:
	branch al_277 == 0x3F l0000000000404CB0
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404CB0:
	Mem339[rcx:byte] = 0x7F
	r10_104 = r10_104 + 0x0000000000000001
	r9_105 = r9_105 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A70:
	word32 eax_308 = (word32) Mem0[rax_106:byte]
	al_100 = (byte) eax_308 (alias)
	rax_106 = DPB(rax_106, eax_308, 0) (alias)
	SZO_161 = cond(al_100 - 0x3D) (alias)
	branch al_100 == 0x3D l0000000000404ABA
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A78:
	branch SZO_161 l0000000000404B40
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B40:
	branch al_100 == 0x00 l0000000000404B48
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B44:
	branch al_100 != 0x3A l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B48:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A7E:
	branch al_100 == 0x5C l0000000000404CA0
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404CA0:
	r8_103 = r8_103 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B29:
	word32 eax_200 = (word32) Mem0[rax_106:byte]
	word64 rax_201 = DPB(rax_106, eax_200, 0)
	branch (byte) eax_200 >u 0x78 l0000000000404C90
	word32 eax_205 = (word32) Mem0[rax_201:byte]
	byte al_207 = (byte) eax_205
	branch al_207 >u 0x78 l0000000000404C90
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B35:
	switch (DPB(rcx, (word32) al_207, 0)) { l0000000000404BF0 }
	rcx = DPB(rcx, (word32) al_207, 0) (alias)
	switch (rcx) { l0000000000404BF0 l0000000000404BF0 l0000000000404C90 }
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404C90:
	r11_117 = (uint64) eax_205
	r11d_118 = (word32) r11_117 (alias)
	r11b_119 = (byte) r11_117 (alias)
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BD0:
	Mem233[r9_105:byte] = r11b_119
	r10_104 = r10_104 + 0x0000000000000001
	r9_105 = r9_105 + 0x0000000000000001
	rax_106 = 0x0000000000000000
	eax_216 = 0x00000000 (alias)
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BF0:
	rax_106 = 0x0000000000000006
	eax_216 = 0x00000006 (alias)
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:(word32) al r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BB0:
	r8_103 = r8_103 + 0x0000000000000001
	branch eax_216 <=u 0x00000004 l0000000000404A06
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BBD:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B4D:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A86:
	branch al_100 != 0x5E l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A8E:
	eax_145 = (word32) Mem0[rax_106:byte]
	rax_106 = DPB(rax_106, eax_145, 0) (alias)
	r8_103 = r8_103 + 0x0000000000000001
	al_277 = (byte) eax_145 (alias)
	rcx = DPB(rcx, rax_106 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_106 - 0x0000000000000040) >u 0x3E l0000000000404A2E
// DataOut: al dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A9E:
// DataOut: dl eax r10 r11 r11b r11d r13 r14 r15 r8 r9 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AA0:
	word64 rax_149 = (uint64) (eax_145 & 0x0000001F)
	Mem154[rcx:byte] = (byte) rax_149
	word32 eax_155 = (word32) Mem154[rax_149:byte]
	al_100 = (byte) eax_155 (alias)
	r8_103 = r8_103 + 0x0000000000000001
	r10_104 = r10_104 + 0x0000000000000001
	rax_106 = DPB(rax_149, eax_155, 0) (alias)
	r9_105 = r9_105 + 0x0000000000000001
	SZO_161 = cond(al_100 - 0x3D) (alias)
	branch al_100 != 0x3D l0000000000404A78
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404ABA:
	branch dl == 0x00 l0000000000404B60
// DataOut: al dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B60:
	Mem109[rcx:byte] = al_100
	r8_103 = r8_103 + 0x0000000000000001
	r10_104 = r10_104 + 0x0000000000000001
	r9_105 = r9_105 + 0x0000000000000001
// DataOut: dl r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AC2:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A36:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A38:
	Mem76[r15:word64] = r9_105
	Mem77[r14:word64] = r8_103
	Mem78[r13:word64] = r10_104
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:rcx rbx:0x0000000000000001 eax:<invalid> ecx:<invalid> al:Test(NE,Z) r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi

fn00000000004049E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:SLICE(rsi, word64, 32) + 0x0000000000000010 r8:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> r11:<invalid> r12:0x0000000000000000 rbp:fp - 0x0000000000000004 rbx:rbx eax:<invalid> ecx:<invalid> rsi:<invalid> al:Test(NE,Z) r11d:<invalid> r14:0x0000000000000001 << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi



word64 fn0000000000404CD0(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut: al eax rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000404CD0_entry:
// DataOut: ebx edi fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CD0:
	word64 rdi_3 = (uint64) edi
	word64 rax_33 = 0x0000000000000000
	word64 rdx_9 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E0:word64]
	word64 rsi_10 = Mem0[(rdi_3 << 0x0000000000000004) + 0x000000000061A3E8:word64]
	branch rdx_9 == 0x0000000000000000 l0000000000404CFC
// DataOut: al eax ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CEB:
	branch rdx_9 == 0x0000000000000001 l0000000000404D10
// DataOut: ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:0x0000000000000000 rdx:<invalid> rsi:<invalid>

l0000000000404D10:
	return (uint64) (Mem0[rsi_10:byte] != 0x30)
// DataOut: al eax ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:0x0000000000000000 rdx:<invalid> rsi:<invalid>

l0000000000404CF1:
	byte Z_41 = cond(rdx_9 - 0x0000000000000002)
	rax_33 = 0x0000000000000001
	branch rdx_9 == 0x0000000000000002 l0000000000404D00
// DataOut: al eax ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rax rbp rbx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:0x0000000000000000 rdx:<invalid> rsi:<invalid>

l0000000000404D00:
	word64 rdi_45 = 0x0000000000413733
	word64 rcx_47 = 0x0000000000000002
// DataOut: ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:0x0000000000000001 rdx:<invalid> rsi:<invalid>

l0000000000404D0A:
	branch rcx_47 == 0x0000000000000000 l0000000000404D0C
// DataOut: ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0A_1:
	Z_41 = cond(Mem0[rsi_84:byte] - Mem0[rdi_85:byte]) (alias)
	rsi_10 = rsi_84 + 0x0000000000000001
	rdi_45 = rdi_85 + 0x0000000000000001
	rcx_47 = rcx_47 - 0x0000000000000001
	word64 rsi_84 = rsi_10
	word64 rdi_85 = rdi_45
	branch Mem0[rsi_84:byte] != Mem0[rdi_85:byte] l0000000000404D0A
// DataOut: ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404D0C:
	return DPB(0x0000000000000001, Z_41, 0)
// DataOut: al eax ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:0x0000000000000001 rdx:<invalid> rsi:<invalid> rcx:<invalid>

l0000000000404CFC:
	return rax_33
// DataOut: al eax ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) edi << 0x0000000000000004 rax:<invalid> rdx:<invalid> rsi:<invalid>

fn0000000000404CD0_exit:
// DataOut: al eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:Test(NE,Z) rcx:<invalid>



word64 fn0000000000404D20(word32 edx, word64 rsi, word64 rdi, word64 r11, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx r11 rdi rsi
// LiveOut: r12 r13 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000404D20_entry:
// DataOut: dl edx r11 r14d r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D20:
	word64 r13_6 = (uint64) edx
	*r13Out = r13_6
	byte r13b_8 = (byte) r13_6
	word64 r12_13
	*r12Out = rsi
	word64 rbp_17 = rdi
	word64 rsp_24
	word64 rax_25 = fn0000000000410C40(rsi, 0x0000000000000020, out rsp_24)
	word64 rax_27 = 0x0000000000000000
	branch rsi == 0x0000000000000000 l0000000000404D4F
// DataOut: r11 r12 r13 r13b r14d r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404D47:
	word64 rsi_76
	rax_27 = fn0000000000410E30(0x0000000000000000, rsi, out rsp_24, out rbp_17, out rsi_76)
// DataOut: r11 r12 r13 r13b r14d r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:rdi rdi:<invalid> rbx:<invalid> rax:0x0000000000000000 rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D4F:
	Mem37[rax_25 + 0x0000000000000008:word64] = rax_27
	word64 rax_38 = 0x0000000000000000
	branch rbp_17 == 0x0000000000000000 l0000000000404D62
// DataOut: r11 r12 r13 r13b r14d r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D5A:
	word64 rbp_69
	word64 rsi_70
	rax_38 = fn0000000000410E30(0x0000000000000000, rbp_17, out rsp_24, out rbp_69, out rsi_70)
// DataOut: r11 r12 r13 r13b r14d r15 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:0x0000000000000000 rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D62:
	Mem48[rax_25:word64] = rax_38
	word64 rax_49 = Mem48[0x000000000061B190:word64]
	Mem50[r11 + 0x0000000000000010:byte] = r13b_8
	Mem52[0x000000000061B190:word64] = rax_25
	Mem53[rax_25 + 0x0000000000000018:word64] = rax_49
	word64 rsp_60 = Mem53[rsp_24 + 0x0000000000000018:word64]
	word64 rbp_62
	*rbpOut = Mem53[rsp_60 + 0x0000000000000008:word64]
	return rsp_60 + 0x0000000000000010
// DataOut: r11 r12 r13 r14d r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn0000000000404D20_exit:
// DataOut: r12 r13 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:(uint64) edx r12:rsi rbp:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn0000000000404D90(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rsp
// Trashed: SCZO di dil edi esp rdi rsp sp spl
// Preserved: rbx
fn0000000000404D90_entry:
// DataOut: r11 r12 r13 r14d rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D90:
	free(Mem0[rdi:word64])
	free(Mem0[rdi + 0x0000000000000008:word64])
	word64 rdi_10 = Mem0[rdi + 0x00000000000000A8:word64]
	branch rdi_10 == 0x000000000061A56A l0000000000404DC0
// DataOut: r11 r12 r13 r14d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DC0:
	return fp + 0x0000000000000004
// DataOut: r11 r12 r13 r14d rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> -4(fp):rbx

l0000000000404DB5:
// DataOut: r11 r12 r13 r14d rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> -4(fp):rbx

l00000000004027D0:
	word64 rsp_21
	word64 rbx_22
	word64 rdi_23
	byte SCZO_24
	byte Z_25
	call Mem0[0x000000000061A330:word32] (retsize: 4;)
		uses: dwLoc04_4,qwLoc04,rbx_19,rdi_10,rsp_20,SCZO_11,Z_12
		defs: rbx_22,rdi_23,rsp_21,SCZO_24,Z_25
	return rsp_21
// DataOut: r11 r12 r13 r14d rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rdi:<invalid> -4(fp):rbx

fn0000000000404D90_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rdi:<invalid> -4(fp):rbx



void fn0000000000404DD0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx di dil eax ebx edi esp rax rbx rdi rsp sp spl
// Preserved: rbx
fn0000000000404DD0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DD0:
	word64 rbx_33 = 0x0000000000000000
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000404DFD
// DataOut: rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404DDD:
// DataOut: rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:0x0000000000000000 -4(fp):rbx

l0000000000404DE0:
	fn0000000000404D90(Mem0[Mem0[0x000000000061B1A8:word64] + rbx_33 * 0x0000000000000008:word64])
	rbx_33 = rbx_33 + 0x0000000000000001
	branch Mem0[0x000000000061B1B0:word64] >u rbx_33 l0000000000404DE0
// DataOut: rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -4(fp):rbx

l0000000000404DFD:
	Mem19[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem20[0x000000000061B17C:byte] = 0x00
	Mem21[0x000000000061B178:word32] = 0x00000000
	Mem22[0x000000000061B174:word32] = 0x00000000
	Mem23[0x000000000061B170:word32] = 0x00000000
	Mem24[0x000000000061B168:word32] = 0x00000000
	Mem25[0x000000000061B164:word32] = 0x00000000
	Mem26[0x000000000061B160:word32] = 0x00000000
	Mem27[0x000000000061B16C:word32] = 0x00000000
	Mem28[0x000000000061B15C:word32] = 0x00000000
	Mem29[0x000000000061B158:word32] = 0x00000000
	Mem30[0x000000000061B154:word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -4(fp):rbx

fn0000000000404DD0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -4(fp):rbx



void fn0000000000404E80(word64 rsi, word64 r11, word64 r15)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r15 rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000404E80_entry:
// DataOut: r11 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404E80:
	word64 rbx_10 = Mem0[0x000000000061B1B0:word64]
	word64 rbp_12 = rbx_10
	word64 rax_14 = (rbx_10 >>u 0x0000000000000001) + rbx_10
	branch rax_14 >u Mem0[0x000000000061B1A0:word64] l0000000000404F98
// DataOut: al eax r11 r15 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404F98:
	free(Mem0[0x000000000061B1A8:word64])
	branch rbx_10 >u rax_14 l0000000000404FF8
// DataOut: r11 r15 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404FF8:
	fn0000000000410E50()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000405006_thunk_fn0000000000402550:
	fn0000000000402550()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404FB3:
	word64 rsp_246
	word64 rax_247 = fn0000000000410C40(rsi, rbx_10 * 0x0000000000000018, out rsp_246)
	rbp_12 = Mem0[0x000000000061B1B0:word64]
	Mem249[0x000000000061B1A8:word64] = rax_247
	Mem254[0x000000000061B1A0:word64] = rbp_12 * 0x0000000000000003
// DataOut: al eax r11 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404EA6:
	branch rbp_12 == 0x0000000000000000 l0000000000404ED3
// DataOut: al eax r11 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA rdx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EAB:
	word64 rax_219 = Mem0[0x000000000061B1A8:word64]
	word64 rdx_223 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_225 = rax_219 + rbp_12 * 0x0000000000000008
// DataOut: r11 r15 rax rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA rdx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EC0:
	Mem229[rax_219:word64] = rdx_223
	rax_219 = rax_219 + 0x0000000000000008
	rdx_223 = rdx_223 + 192
	branch rax_219 != rcx_225 l0000000000404EC0
// DataOut: al eax r11 r15 rax rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404ED3:
	branch Mem0[0x000000000061B148:word32] == 0xFFFFFFFF l0000000000404F8C
// DataOut: al eax r11 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404EE0:
	word32 ecx_142
	word64 rdi_137
	word64 rsi_135
	word64 rsp_108
	word64 rbp_109
	word64 rbx_110
	byte SCZO_111
	word64 rax_112
	byte CZ_113
	byte SZO_114
	byte C_115
	byte Z_116
	word64 rdx_117
	word64 rcx_118
	word32 edi_119
	word64 rdi_120
	word32 eax_121
	word32 r8d_122
	word64 rsi_124
	word32 ecx_125
	word32 edx_126
	word16 ax_127
	byte al_128
	word32 esi_129
	word64 r11_130
	word64 r15_131
	word64 r8_123
	call _setjmp (retsize: 8; depth: 8)
		uses: al_67,ax_68,C_60,CZ_47,dwLoc04_4,dwLoc08_7,eax_70,ecx_66,edi_49,edx_69,esi,r11,r15,r8_52,r8d,rax_71,rbp_56,rbx_10,rcx_65,rdi_107,rdx_72,rsi,rsp_57,SCZO_73,SZO_58,Z_74
		defs: al_128,ax_127,C_115,CZ_113,eax_121,ecx_125,edi_119,edx_126,esi_129,r11_130,r15_131,r8_123,r8d_122,rax_112,rbp_109,rbx_110,rcx_118,rdi_120,rdx_117,rsi_124,rsp_108,SCZO_111,SZO_114,Z_116
	branch eax_121 == 0x00000000 l0000000000404F40
// DataOut: al r11 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404F40:
	ecx_142 = (word32) (uint64) Mem0[0x000000000061B148:word32] (alias)
	rsi_135 = Mem0[0x000000000061B1B0:word64]
	rdi_137 = Mem0[0x000000000061B1A8:word64]
// DataOut: al ecx edi r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EEE:
	r8_123 = (uint64) Mem0[0x000000000061B148:word32]
	word32 r8d_170 = (word32) r8_123
	branch r8d_170 == 0x00000003 l0000000000404FDF
// DataOut: r11 r15 r8d
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404FDF:
	__assert_fail(0x000000000041373F, 0x0000000000413736, 0x0000000000000DDB, 0x0000000000412C95)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:(uint64) Mem0[0x000000000061B148:word32] rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EFF:
	rsi_135 = Mem0[0x000000000061B1B0:word64]
	rdi_137 = Mem0[0x000000000061B1A8:word64]
	branch rsi_135 == 0x0000000000000000 l0000000000404F33
// DataOut: edi r11 r15 r8d rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:(uint64) Mem0[0x000000000061B148:word32] rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F12:
	word64 rdx_190 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_192 = rdi_137 + rsi_135 * 0x0000000000000008
	word64 rax_194 = rdi_137
// DataOut: edi r11 r15 r8d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:(uint64) Mem0[0x000000000061B148:word32] rsi:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F20:
	Mem200[rax_194:word64] = rdx_190
	rax_194 = rax_194 + 0x0000000000000008
	rdx_190 = rdx_190 + 192
	branch rax_194 != rcx_192 l0000000000404F20
// DataOut: edi r11 r15 r8d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:(uint64) Mem0[0x000000000061B148:word32] rsi:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F33:
	ecx_142 = (word32) (uint64) r8d_170 (alias)
// DataOut: al ecx edi r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:(uint64) Mem0[0x000000000061B148:word32] rsi:<invalid> rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F54:
	branch ecx_142 != 0x00000004 l0000000000404F60
// DataOut: al ecx edi edx r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F59_1:
// DataOut: al ecx edi edx r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:0x0000000000000000 r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F60:
	fn000000000040D690(rsi_135, rdi_137, DPB(r8_123, (word32) Mem0[0x000000000061B10C:byte], 0), r11_130, r15_131)
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F8C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> ax:<invalid> r8d:(word32) Mem0[0x000000000061B10C:byte] eax:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000404E80_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> ax:<invalid> r8d:(word32) Mem0[0x000000000061B10C:byte] eax:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -8(fp):rbx -4(fp):rbp



void fn0000000000405020(word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax bp bpl di dil eax ebp edi esi esp rax rbp rdi rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405020_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405020:
	word64 rax_15 = __errno_location()
	Mem16[rax_15:word32] = 0x00000000
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000402690:
	word64 rsp_26
	word64 rbp_27
	word64 rsi_28
	word64 rbx_29
	word64 rdi_30
	byte SCZO_31
	word64 rax_32
	call Mem16[0x000000000061A290:word32] (retsize: 4;)
		uses: dwLoc04_4,dwLoc08_9,qwLoc08_11,rax_15,rbp_24,rbx_20,rdi_19,rsi_22,rsp_25,SCZO_18
		defs: rax_32,rbp_27,rbx_29,rdi_30,rsi_28,rsp_26,SCZO_31
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx rax:<invalid> rdi:rdi rsi:rsi -8(fp):rbx -4(fp):rbp

fn0000000000405020_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx rax:<invalid> rdi:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp



void fn0000000000405090(byte sil, word64 rdi, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 rdi sil
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405090_entry:
// DataOut: r11 rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405090:
	word32 r14d_109 = (word32) sil
	word64 r13_116 = rdi
	branch rdi == 0x0000000000000000 l00000000004050C0
// DataOut: r11 r13 r14d rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004050AA:
	branch Mem0[0x000000000061B1C8:word64] == 0x0000000000000000 l00000000004050C0
// DataOut: r11 r13 r14d rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r14d:(word32) sil r13:rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050B4:
	word64 rbp_271
	word64 r12_272
	fn0000000000404D20(0x00000000, rdi, 0x0000000000000000, r11, out rbp_271, out r12_272, out r13_116)
// DataOut: r11 r13 r14d rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r14d:(word32) sil r13:rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050C0:
	word64 rbx_43 = Mem0[0x000000000061B1B0:word64]
// DataOut: r11 r12 r13 r14d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rbp:<invalid> rax:<invalid> rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405108:
	branch rbx_43 == 0x0000000000000000 l00000000004051A8
// DataOut: r11 r12 r13 r14d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051A8:
	word64 rdx_209
	word64 rdi_194 = Mem0[0x000000000061B1B0:word64]
	branch rdi_194 == 0x0000000000000000 l00000000004051F7
// DataOut: rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051F7:
	rdx_209 = 0x0000000000000000
// DataOut: rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051B4:
	word64 rsi_227 = Mem0[0x000000000061B1A8:word64]
	rdx_209 = 0x0000000000000000
	word64 rax_232 = 0x0000000000000000
// DataOut: rax rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051C0:
	word64 rcx_239 = Mem0[rsi_227 + rax_232 * 0x0000000000000008:word64]
	Mem242[rsi_227 + rdx_209 * 0x0000000000000008:word64] = rcx_239
	rax_232 = rax_232 + 0x0000000000000001
	rdx_209 = rdx_209 + DPB(rcx_239, (word32) (Mem0[rcx_239 + 0x00000000000000A0:word32] != 0x00000009), 0)
	branch rax_232 != rdi_194 l00000000004051C0
// DataOut: rax rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051E1:
	Mem212[0x000000000061B1B0:word64] = rdx_209
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000405090_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> r15:<invalid> edx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405111:
	word64 rbp_71 = Mem0[Mem0[0x000000000061B1A8:word64]:word64]
	word32 eax_73 = (word32) (uint64) Mem0[rbp_71 + 0x00000000000000A0:word32]
	branch eax_73 == 0x00000009 l000000000040512C
// DataOut: eax r11 r12 r13 r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbp:<invalid> rax:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405127:
	branch eax_73 != 0x00000003 l0000000000405100
// DataOut: r11 r12 r13 r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040512C:
	word64 rbp_115
	word64 r15_102 = Mem0[r13_116:word64]
	branch r13_116 == 0x0000000000000000 l00000000004050E2
// DataOut: r11 r12 r13 r14d r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405135:
	word64 rsi_144
	word64 rax_145 = fn000000000040A390(r15_102, out rsi_144)
	branch Mem0[rax_145:byte] != 0x2E l00000000004050D8
// DataOut: r11 r12 r13 r14d r15 rax rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405142:
	byte al_186 = (byte) (word32) Mem0[rax_145 + 0x0000000000000001 + (uint64) (Mem0[rax_145 + 0x0000000000000001:byte] == 0x2E):byte]
	branch al_186 == 0x2F l0000000000405100
// DataOut: al r11 r12 r13 r14d r15 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405154:
	branch al_186 == 0x00 l0000000000405100
// DataOut: r11 r12 r13 r14d r15 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405158:
// DataOut: r11 r13 r14d r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> dl:Test(EQ,Z) eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050D8:
	branch Mem0[r15_102:byte] != 0x2F l0000000000405160
// DataOut: r11 r13 r14d r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405160:
	word64 rbp_164
	word64 rax_166 = fn000000000040A610(0x0000000000000000, r15_102, r13_116, out rbp_164, out r14d_109)
	word64 r12_173
	fn0000000000404D20((word32) (uint64) r14d_109, Mem0[rbp_164 + 0x0000000000000008:word64], rax_166, r11, out rbp_115, out r12_173, out r13_116)
	free(rax_166)
	branch Mem0[rbp_115 + 0x00000000000000A0:word32] != 0x00000009 l0000000000405100
// DataOut: r11 r12 r13 r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050E2:
	word64 r12_137
	fn0000000000404D20((word32) (uint64) r14d_109, Mem0[rbp_71 + 0x0000000000000008:word64], r15_102, r11, out rbp_115, out r12_137, out r13_116)
	branch Mem0[rbp_115 + 0x00000000000000A0:word32] == 0x00000009 l0000000000405194
// DataOut: r11 r12 r13 r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405194:
	fn0000000000404D90(rbp_115)
	fn0000000000404D90(rbp_115)
// DataOut: r11 r12 r13 r14d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050FE:
// DataOut: r11 r12 r13 r14d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> dl:<invalid> eax:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405100:
	rbx_43 = rbx_43 - 0x0000000000000001
// DataOut: r11 r12 r13 r14d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> edx:<invalid> rcx:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> r14:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000405200(word64 rsi, word64 rdi, word64 qwArg00, word64 qwArg10, word64 qwArg18)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000405200_entry:
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405200:
	word64 rbp_114 = rsi
	word64 rbx_11 = rdi
	branch rdi <u rsi l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040526B:
	branch Mem0[0x000000000061B0D8:word64] != 0x0000000000000000 l0000000000405220
	word64 rcx_157 = Mem0[0x000000000061B0D8:word64]
	branch rcx_157 != 0x0000000000000000 l0000000000405220
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405220:
	word64 rsi_134 = rbx_11 + 0x0000000000000001
	branch (uint64) ((uint128) (uint64) rbp_114 /u rcx_157) <=u (uint64) ((uint128) ((uint64) rsi_134) /u rcx_157) l00000000004052A8
// DataOut: rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052A8:
	rbx_11 = rsi_134
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040523C:
	word64 rdi_148 = Mem0[0x000000000061A610:word64]
	word64 rax_149 = Mem0[rdi_148 + 0x0000000000000028:word64]
	branch rax_149 >=u Mem0[rdi_148 + 0x0000000000000030:word64] l00000000004052B9
// DataOut: rax rbp rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052B9:
	word64 rsp_178
	word64 rsi_180
	word64 rdi_182
	byte SCZO_183
	byte C_184
	word64 rcx_185
	byte SZO_186
	byte Z_187
	word64 rdx_188
	word64 rax_189
	byte CZ_190
	word32 esi_191
	word32 edx_192
	call __overflow (retsize: 8; depth: 24)
		uses: C_152,CZ_147,dwLoc04_4,dwLoc08_9,edx_52,esi_135,qwLoc08,rax_149,rbp_61,rbx_60,rcx_67,rdi_148,rdx_144,rsi_177,rsp_62,SCZO_151,SZO_68,Z_69
		defs: C_184,CZ_190,edx_192,esi_191,rax_189,rbp_179,rbx_181,rcx_185,rdi_182,rdx_188,rsi_180,rsp_178,SCZO_183,SZO_186,Z_187
	rcx_157 = Mem0[0x000000000061B0D8:word64]
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040524D:
	Mem175[rdi_148 + 0x0000000000000028:word64] = rax_149 + 0x0000000000000001
	Mem176[rax_149:byte] = 0x09
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405258:
	rbx_11 = rbx_11 + rcx_157 - (uint64) ((uint128) ((uint64) rbx_11) % rcx_157)
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405277:
	rbx_11 = rbx_11 + 0x0000000000000002
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040527B:
	word64 rdi_92 = Mem0[0x000000000061A610:word64]
	branch Mem0[rdi_92 + 0x0000000000000028:word64] >=u Mem0[rdi_92 + 0x0000000000000030:word64] l00000000004052AD
	word64 rdi_96 = Mem0[0x000000000061A610:word64]
	word64 rdx_97 = Mem0[rdi_96 + 0x0000000000000028:word64]
	branch rdx_97 >=u Mem0[rdi_96 + 0x0000000000000030:word64] l00000000004052AD
// DataOut: rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052AD:
	word64 rsp_113
	word64 rsi_115
	word64 rdi_117
	byte SCZO_118
	byte C_119
	word64 rcx_120
	byte SZO_121
	byte Z_122
	word64 rdx_123
	word64 rax_124
	byte CZ_125
	word32 esi_126
	word32 edx_127
	call __overflow (retsize: 8; depth: 24)
		uses: C_101,CZ_90,dwLoc04_4,dwLoc08_9,edx_99,esi_87,qwLoc08,rax_89,rbp_61,rbx_91,rcx_67,rdi_96,rdx_97,rsi_112,rsp_62,SCZO_100,SZO_68,Z_69
		defs: C_119,CZ_125,edx_127,esi_126,rax_124,rbp_114,rbx_116,rcx_120,rdi_117,rdx_123,rsi_115,rsp_113,SCZO_118,SZO_121,Z_122
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405266:
	branch rbp_114 <=u rbx_11 l000000000040529C
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040528C:
	Mem105[rdi_96 + 0x0000000000000028:word64] = rdx_97 + 0x0000000000000001
	Mem106[rdx_97:byte] = 0x20
	branch rbp_114 >u rbx_11 l000000000040526B
	Mem110[rdi_96 + 0x0000000000000028:word64] = rdx_97 + 0x0000000000000001
	Mem111[rdx_97:byte] = 0x20
	branch rbp_114 >u rbx_11 l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405211:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:rdi -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040529C:
	return
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405200_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000020 rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn00000000004052D0(word64 rdx, word32 ebx, word64 rbp, word64 rsi, word64 rdi, word64 r11, selector fs, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & ediOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebx fs r11 rbp rdi rdx rsi
// LiveOut: edi r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004052D0_entry:
// DataOut: ebx fs r11 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004052D0:
	word32 ebp_8 = (word32) (fp - 0x0000000000000004)
	word64 rsp_45
	word64 r9_50
	word64 r11_51
	word64 r13_53
	word64 r14_54
	word64 r15_55
	word64 r12_107
	word64 r8_106
	word64 rdi_116
	word64 rbp_118
	word64 rsi_114
	word64 rax_56 = fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, rsi, ebx, ebp_8, 0x0000000000002000, fp + 0xFFFFFFFFFFFFDFBC, rdx, r11, fs, out rsp_45, out rbp_118, out rsi_114, out rdi_116, out r8_106, out r9_50, out r11_51, out r12_107, out r13_53, out r14_54, out r15_55)
	Mem65[rbp_118 + 0xFFFFFFFFFFFFDF98:word64] = rbp_118 + 0xFFFFFFFFFFFFDFC0
	word64 rbx_112 = rax_56
	word32 ebx_58 = (word32) rax_56
	branch rax_56 >u 0x0000000000001FFF l0000000000405590
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405590:
	Mem845[rbp_118 + 0xFFFFFFFFFFFFDF98:word64] = rsp_45 - (rax_56 + 0x000000000000001F & 0xFFFFFFFFFFFFFFF0) + 0x000000000000000F
	Mem847[rbp_118 + 0xFFFFFFFFFFFFDF98:word64] = Mem845[rbp_118 + 0xFFFFFFFFFFFFDF98:word64] & 0xFFFFFFFFFFFFFFF0
	word64 rsp_852
	word64 r9_857
	word64 r11_858
	word64 r13_860
	word64 r14_861
	word64 r15_862
	fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, r14_54, ebx_58, ebp_8, rax_56 + 0x0000000000000001, Mem847[rbp_118 + 0xFFFFFFFFFFFFDF98:word64], r13_53, r11_51, fs, out rsp_852, out rbp_118, out rsi_114, out rdi_116, out r8_106, out r9_857, out r11_858, out r12_107, out r13_860, out r14_861, out r15_862)
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):fp + 0xFFFFFFFFFFFFDFBC -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405343:
	branch Mem65[0x000000000061B0F0:byte] != 0x00 l0000000000405412
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405412:
	word64 rsp_408
	word64 rdx_411
	word64 r14_414
	word64 r13_415
	word32 esi_416
	byte SCZO_418
	word64 rcx_419
	word32 eax_422
	byte SZO_423
	byte C_424
	byte CZ_425
	byte Z_426
	word32 edx_427
	word64 r12_428
	word32 r12d_429
	word16 dx_430
	word64 r15_431
	byte al_432
	byte SO_433
	byte dl_434
	word32 edi_435
	byte S_436
	word32 ecx_437
	byte cl_438
	word16 ax_439
	word32 ebx_440
	word64 r11_441
	word64 r9_442
	word32 ebp_443
	word64 rax_420
	call __ctype_get_mb_cur_max (retsize: 8; depth: 8)
		uses: al_79,ax_80,C_75,cl,CZ_64,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx,eax_78,ebp_8,ebx_58,ecx,edi_84,edx,esi_82,fs,qwLoc04,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_67,r12_76,r12d,r13_70,r14_71,r15_68,r8_73,r9_66,rax_77,rbp_85,rbx_57,rcx_69,rdi_83,rdx_72,rsi_81,rsp_86,S,SCZO_87,SO,SZO_74,Z_88
		defs: al_432,ax_439,C_424,cl_438,CZ_425,dl_434,dx_430,eax_422,ebp_443,ebx_440,ecx_437,edi_435,edx_427,esi_416,fs_421,r11_441,r12_428,r12d_429,r13_415,r14_414,r15_431,r8_410,r9_442,rax_420,rbp_409,rbx_417,rcx_419,rdi_412,rdx_411,rsi_413,rsp_408,S_436,SCZO_418,SO_433,SZO_423,Z_426
	branch rax_420 <=u 0x0000000000000001 l00000000004055D1
// DataOut: fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004055D1:
	word64 r14_736 = Mem65[r13_415 + 0xFFFFFFFFFFFFDF98:word64]
	*r14Out = r14_736
	word64 r12_737 = r14_736 + rbx_112
	branch r14_736 >=u r12_737 l0000000000405602
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004055E1:
	word64 rsp_777
	word64 rdx_780
	word64 r14_783
	word64 r13_784
	word32 esi_785
	byte SCZO_787
	word64 rcx_788
	word64 rax_789
	word32 eax_791
	byte SZO_792
	byte C_793
	byte CZ_794
	byte Z_795
	word32 edx_796
	word64 r12_797
	word32 r12d_798
	word16 dx_799
	word64 r15_800
	byte al_801
	byte SO_802
	byte dl_803
	word32 edi_804
	byte S_805
	word32 ecx_806
	byte cl_807
	word16 ax_808
	word32 ebx_809
	word64 r11_810
	word64 r9_811
	word32 ebp_812
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_432,ax_439,C_740,cl_438,CZ_445,dl_434,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_430,eax_422,ebp_443,ebx_440,ecx_437,edi_435,edx_427,esi_416,fs_421,qwLoc04,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_441,r12_737,r12d_738,r13_415,r14_736,r15_431,r8_410,r9_442,rax_420,rbp_409,rbx_417,rcx_419,rdi_412,rdx_411,rsi_413,rsp_408,S_436,SCZO_739,SO_433,SZO_423,Z_426
		defs: al_801,ax_808,C_793,cl_807,CZ_794,dl_803,dx_799,eax_791,ebp_812,ebx_809,ecx_806,edi_804,edx_796,esi_785,fs_790,r11_810,r12_797,r12d_798,r13_784,r14_783,r15_800,r8_779,r9_811,rax_789,rbp_778,rbx_786,rcx_788,rdi_781,rdx_780,rsi_782,rsp_777,S_805,SCZO_787,SO_802,SZO_792,Z_795
	word64 rdx_813 = r14_783
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004055E9:
	rsi_114 = DPB(rsi_114, (word32) Mem65[rdx_813:byte], 0) (alias)
	branch (Mem65[Mem65[rax_789:word64] + 0x0000000000000001 + rsi_114 * 0x02:byte] & 0x40) != 0x00 l00000000004055F9
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004055F6:
	Mem835[rdx_813:byte] = 0x3F
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004055F9:
	rdx_813 = rdx_813 + 0x0000000000000001
	branch rdx_813 != r12_797 l00000000004055E9
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405602:
	*r12Out = rbx_112
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> esi:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405421:
	word64 r15_446 = Mem65[r13_415 + 0xFFFFFFFFFFFFDF98:word64]
	*r15Out = r15_446
	word64 r13_447 = r15_446 + rbx_112
	*r13Out = r13_447
	branch r15_446 >=u r13_447 l0000000000405612
// DataOut: fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405612:
	rbx_112 = 0x0000000000000000
	*r12Out = 0x0000000000000000
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405435:
	word64 rbx_450 = r15_446
	r12_107 = 0x0000000000000000
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405440:
	word32 eax_487 = (word32) Mem65[rdi_116:byte]
	rax_420 = DPB(rax_420, eax_487, 0) (alias)
	byte al_489 = (byte) eax_487
	branch al_489 > 0x3F l0000000000405520
// DataOut: al fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405520:
	branch al_489 < 0x41 l0000000000405460
// DataOut: al fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405528:
	branch al_489 <= 0x5F l0000000000405538
// DataOut: al fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040552C:
	branch (byte) (rax_420 - 0x0000000000000061) >u 0x1D l0000000000405460
// DataOut: al fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040544C:
	branch al_489 >= 0x25 l0000000000405538
// DataOut: al fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405454:
	branch (byte) (rax_420 - 0x0000000000000020) <=u 0x03 l0000000000405538
// DataOut: al fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405538:
	Mem703[rbx_450:byte] = al_489
	word64 r15_702 = r15_446 + 0x0000000000000001
	word64 r12_704 = r12_107 + 0x0000000000000001
	word64 rbx_705 = rbx_450 + 0x0000000000000001
	branch r15_702 <u r13_447 l0000000000405440
	Mem709[rbx_705:byte] = al_489
	r15_446 = r15_702 + 0x0000000000000001
	*r15Out = r15_446
	r12_107 = r12_704 + 0x0000000000000001
	*r12Out = r12_107
	rbx_450 = rbx_705 + 0x0000000000000001
	branch r15_702 + 0x0000000000000001 <u r13_447 l0000000000405440
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040554F:
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405460:
	Mem536[rbp_118 + 0xFFFFFFFFFFFFDFB0:word64] = 0x0000000000000000
// DataOut: fs r11 r11d r12 r13 r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405470:
	word64 rsp_548
	word64 rdx_551
	word64 r14_554
	word32 esi_556
	word64 rbx_557
	byte SCZO_558
	word64 rcx_559
	word32 eax_562
	byte SZO_563
	byte C_564
	byte CZ_565
	byte Z_566
	word32 edx_567
	word64 r12_568
	word32 r12d_569
	word16 dx_570
	word64 r15_571
	byte al_572
	byte SO_573
	byte dl_574
	word32 edi_575
	byte S_576
	word32 ecx_577
	byte cl_578
	word16 ax_579
	word32 ebx_580
	word64 r11_581
	word64 r9_582
	word32 ebp_583
	call mbrtowc (retsize: 8; depth: 8)
		uses: al_489,ax_490,C_475,cl_458,CZ_533,dl_530,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_464,eax_487,ebp_485,ebx_479,ecx_459,edi_543,edx_532,esi_547,fs_468,qwLoc04,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_457,r12_476,r12d_465,r13_538,r14_471,r15_537,r8_473,r9_456,rax_488,rbp_539,rbx_478,rcx_541,rdi_542,rdx_544,rsi_546,rsp_486,S_460,SCZO_545,SO_531,SZO_535,Z_474
		defs: al_572,ax_579,C_564,cl_578,CZ_565,dl_574,dx_570,eax_562,ebp_583,ebx_580,ecx_577,edi_575,edx_567,esi_556,fs_561,r11_581,r12_568,r12d_569,r13_555,r14_554,r15_571,r8_550,r9_582,rax_560,rbp_549,rbx_557,rcx_559,rdi_552,rdx_551,rsi_553,rsp_548,S_576,SCZO_558,SO_573,SZO_563,Z_566
	word64 r14_586 = rax_420
	*r14Out = r14_586
	branch rax_420 == 0xFFFFFFFFFFFFFFFF l0000000000405551
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405551:
	Mem690[rbx_557:byte] = 0x3F
	r15_446 = r15_571 + 0x0000000000000001
	*r15Out = r15_446
	r12_107 = r12_568 + 0x0000000000000001
	*r12Out = r12_107
	rbx_450 = rbx_557 + 0x0000000000000001
	branch r15_571 + 0x0000000000000001 <u r13_447 l0000000000405440
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405569:
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405499:
	branch rax_420 == 0xFFFFFFFFFFFFFFFE l000000000040556B
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040556B:
	Mem682[rbx_557:byte] = 0x3F
	r15_446 = r13_447
	*r15Out = r15_446
	r12_107 = r12_568 + 0x0000000000000001
	*r12Out = r12_107
	rbx_450 = rbx_557 + 0x0000000000000001
	branch r13_447 <u r13_447 l0000000000405440
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405582:
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004054A3:
	word64 rdi_589 = (uint64) Mem536[rbp_118 + 0xFFFFFFFFFFFFDFAC:word32]
	branch rax_420 != 0x0000000000000000 l00000000004054B5
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004054B1_1:
	r14_586 = 0x0000000000000001
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> r15:<invalid> r12:<invalid> eax:0x00000001 edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004054B5:
	branch false l0000000000405510
// DataOut: al eax fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:0x0000000000000001 rbx:<invalid> r15:<invalid> r12:<invalid> eax:0x00000001 edx:<invalid> r9:<invalid> ecx:<invalid> ax:0x0001 r11:<invalid> al:0x01 cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405510:
	Mem673[rbx_557:byte] = 0x3F
// DataOut: eax fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004054BE:
	word64 rsi_646 = r15_571 + r14_586
	word64 rdx_648 = rbx_557
	r15_652 = r15_571
// DataOut: al fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004054C8:
	word64 r15_652
	rdx_648 = rdx_648 + 0x0000000000000001
	Mem663[rdx_648 - 0x0000000000000001:byte] = (byte) (word32) Mem536[rdi_589 - 0x0000000000000001:byte]
	r15_652 = r15_652 + 0x0000000000000001
	branch r15_652 != rsi_646 l00000000004054C8
// DataOut: al fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004054DD:
// DataOut: eax fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> r9:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004054E5:
	word64 rsp_605
	word64 rdx_608
	word64 r14_611
	word32 esi_613
	byte SCZO_615
	word64 rcx_616
	word32 eax_619
	byte SZO_620
	byte C_621
	byte CZ_622
	byte Z_623
	word32 edx_624
	word32 r12d_626
	word16 dx_627
	byte al_629
	byte SO_630
	byte dl_631
	word32 edi_632
	byte S_633
	word32 ecx_634
	byte cl_635
	word16 ax_636
	word32 ebx_637
	word64 r11_638
	word64 r9_639
	word32 ebp_640
	call mbsinit (retsize: 8; depth: 8)
		uses: al_598,ax_599,C_602,cl_578,CZ_565,dl_574,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_570,eax_597,ebp_583,ebx_580,ecx_577,edi_604,edx_567,esi_556,fs_561,qwLoc04,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_581,r12_568,r12d_569,r13_555,r14_595,r15_571,r8_550,r9_582,rax_596,rbp_549,rbx_557,rcx_559,rdi_603,rdx_551,rsi_553,rsp_548,S_601,SCZO_587,SO_573,SZO_600,Z_592
		defs: al_629,ax_636,C_621,cl_635,CZ_622,dl_631,dx_627,eax_619,ebp_640,ebx_637,ecx_634,edi_632,edx_624,esi_613,fs_618,r11_638,r12_625,r12d_626,r13_612,r14_611,r15_628,r8_607,r9_639,rax_617,rbp_606,rbx_614,rcx_616,rdi_609,rdx_608,rsi_610,rsp_605,S_633,SCZO_615,SO_630,SZO_620,Z_623
	branch eax_619 == 0x00000000 l0000000000405470
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004054F9:
	branch r15_446 <u r13_447 l0000000000405440
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> ecx:<invalid> ax:<invalid> r9:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405502:
	rbx_112 = rbx_450 - Mem65[rbp_118 + 0xFFFFFFFFFFFFDF98:word64]
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> eax:<invalid> edx:<invalid> r9:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405350:
	branch Mem65[rbp_118 + 0xFFFFFFFFFFFFDF90:word64] == 0x0000000000000000 l0000000000405379
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040535A:
	word64 rsp_276
	word64 rdx_279
	word64 r14_282
	word64 r13_283
	word32 esi_284
	byte SCZO_286
	word64 rcx_287
	word64 rax_288
	word32 eax_290
	byte SZO_291
	byte C_292
	byte CZ_293
	byte Z_294
	word32 edx_295
	word64 r12_296
	word32 r12d_297
	word16 dx_298
	word64 r15_299
	byte al_300
	byte SO_301
	byte dl_302
	word32 edi_303
	byte S_304
	word32 ecx_305
	byte cl_306
	word16 ax_307
	word32 ebx_308
	word64 r11_309
	word64 r9_310
	word32 ebp_311
	call __ctype_get_mb_cur_max (retsize: 8; depth: 8)
		uses: al_79,ax_80,C_75,cl,CZ_64,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx,eax_78,ebp_8,ebx_58,ecx,edi_84,edx,esi_82,fs,qwLoc04,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_67,r12_76,r12d,r13_70,r14_71,r15_68,r8_73,r9_66,rax_77,rbp_85,rbx_57,rcx_69,rdi_83,rdx_72,rsi_81,rsp_86,S,SCZO_266,SO,SZO_74,Z_267
		defs: al_300,ax_307,C_292,cl_306,CZ_293,dl_302,dx_298,eax_290,ebp_311,ebx_308,ecx_305,edi_303,edx_295,esi_284,fs_289,r11_309,r12_296,r12d_297,r13_283,r14_282,r15_299,r8_278,r9_310,rax_288,rbp_277,rbx_285,rcx_287,rdi_280,rdx_279,rsi_281,rsp_276,S_304,SCZO_286,SO_301,SZO_291,Z_294
	branch rax_288 <=u 0x0000000000000001 l00000000004053CD
// DataOut: fs r11 r11d r13 r15 r15b r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004053CD:
	word64 r14_335 = Mem65[r13_283 + 0xFFFFFFFFFFFFDF98:word64]
	*r14Out = r14_335
	word64 r13_336 = r14_335 + rbx_112
	*r13Out = r13_336
	branch r14_335 >=u r13_336 l000000000040560A
// DataOut: fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040560A:
	*r12Out = 0x0000000000000000
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004053E1:
	word64 rsp_339
	word64 r14_345
	word64 r13_346
	word32 esi_347
	byte SCZO_349
	word64 rcx_350
	word64 rax_351
	word32 eax_353
	byte SZO_354
	byte C_355
	byte CZ_356
	byte Z_357
	word32 edx_358
	word64 r12_359
	word32 r12d_360
	word16 dx_361
	word64 r15_362
	byte al_363
	byte SO_364
	byte dl_365
	word32 edi_366
	byte S_367
	word32 ecx_368
	byte cl_369
	word16 ax_370
	word32 ebx_371
	word64 r11_372
	word64 r9_373
	word32 ebp_374
	word64 rdx_342
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_300,ax_307,C_338,cl_306,CZ_313,dl_302,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_298,eax_290,ebp_311,ebx_308,ecx_305,edi_303,edx_295,esi_284,fs_289,qwLoc04,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_309,r12_296,r12d_297,r13_336,r14_335,r15_299,r8_278,r9_310,rax_288,rbp_277,rbx_285,rcx_287,rdi_280,rdx_279,rsi_281,rsp_276,S_304,SCZO_337,SO_301,SZO_291,Z_294
		defs: al_363,ax_370,C_355,cl_369,CZ_356,dl_365,dx_361,eax_353,ebp_374,ebx_371,ecx_368,edi_366,edx_358,esi_347,fs_352,r11_372,r12_359,r12d_360,r13_346,r14_345,r15_362,r8_341,r9_373,rax_351,rbp_340,rbx_348,rcx_350,rdi_343,rdx_342,rsi_344,rsp_339,S_367,SCZO_349,SO_364,SZO_354,Z_357
	r12_107 = 0x0000000000000000
	word64 rcx_379 = Mem65[rax_351:word64]
	word64 rax_382 = r14_345
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004053F0:
	rdx_342 = DPB(rdx_342, (word32) Mem65[rax_382:byte], 0) (alias)
	r12_107 = r12_107 - 0xFF - (((word16) ((word32) Mem65[rcx_379 + rdx_342 * 0x0002:word16]) & 0x4000) <u 0x0001)
	*r12Out = r12_107
	rax_382 = rax_382 + 0x0000000000000001
	branch rax_382 != r13_346 l00000000004053F0
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040540D:
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> r15:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405365:
	word32 ebx_322
	word64 rsp_323
	word64 r12_327
	word64 r13_328
	word64 r14_329
	word64 r15_330
	*r12Out = (int64) (word32) fn000000000040D240(0x00000000, rbx_112, Mem65[rbp_118 + 0xFFFFFFFFFFFFDF98:word64], fs, out ebx_322, out rsp_323, out rbp_118, out rsi_114, out rdi_116, out r12_327, out r13_328, out r14_329, out r15_330)
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> r9:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405379:
	word64 rcx_121 = Mem65[rbp_118 + 0xFFFFFFFFFFFFDF88:word64]
	branch rcx_121 == 0x0000000000000000 l0000000000405399
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405385:
	word64 rsp_230
	word64 rdx_233
	word64 r14_236
	word64 r13_237
	word32 esi_238
	byte SCZO_240
	word64 rcx_241
	word64 rax_242
	word32 eax_244
	byte SZO_245
	byte C_246
	byte CZ_247
	byte Z_248
	word32 edx_249
	word32 r12d_251
	word16 dx_252
	word64 r15_253
	byte al_254
	byte SO_255
	byte dl_256
	word32 edi_257
	byte S_258
	word32 ecx_259
	byte cl_260
	word16 ax_261
	word32 ebx_262
	word64 r11_263
	word64 r9_264
	word32 ebp_265
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: al_110,ax_111,C_124,cl_91,CZ_100,dl_94,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_97,eax_109,ebp_119,ebx_113,ecx_92,edi_226,edx_99,esi_229,fs_101,qwLoc04,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_90,r12_107,r12d_98,r13_103,r14_104,r15_96,r8_106,r9_89,rax_108,rbp_118,rbx_112,rcx_121,rdi_225,rdx_227,rsi_228,rsp_120,S_93,SCZO_102,SO_95,SZO_122,Z_123
		defs: al_254,ax_261,C_246,cl_260,CZ_247,dl_256,dx_252,eax_244,ebp_265,ebx_262,ecx_259,edi_257,edx_249,esi_238,fs_243,r11_263,r12_250,r12d_251,r13_237,r14_236,r15_253,r8_232,r9_264,rax_242,rbp_231,rbx_239,rcx_241,rdi_234,rdx_233,rsi_235,rsp_230,S_258,SCZO_240,SO_255,SZO_245,Z_248
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405399:
	branch Mem65[rbp_118 + 0xFFFFFFFFFFFFDF90:word64] == 0x0000000000000000 l00000000004053A8
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004053A5:
	Mem224[r8_106:word64] = r12_107
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004053A8:
	word64 rbx_166 = Mem65[rbp_118 - 0x0000000000000038:word64] ^ Mem65[fs:0x00000028:word64]
	*rbxOut = rbx_166
	branch rbx_166 != 0x0000000000000000 l000000000040561C
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040561C:
	__stack_chk_fail()
// DataOut: fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405621_thunk_fn0000000000405630:
	word64 rsp_215
	word64 rbp_216
	word64 rsi_217
	word32 edi_218
	word64 r12_219
	return fn0000000000405630(rsi_114, rdi_116, qwLoc04, out rsp_215, out rbp_216, out rsi_217, out edi_218, out r12_219)
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053BE:
	word64 rsp_197 = rbp_118 - 0x0000000000000028
	word64 rsp_201 = Mem65[rsp_197 + 0x0000000000000008:word64]
	word64 rbx_198
	*rbxOut = Mem65[rsp_197:word64]
	word64 rsi_205
	*rsiOut = Mem65[rsp_201 + 0x0000000000000010:word64]
	word32 edi_209
	*ediOut = (word32) Mem65[rsp_201 + 0x0000000000000018:word64]
	word64 rbp_211
	*rbpOut = Mem65[rsp_201 + 0x0000000000000020:word64]
	word64 rsp_213
	*rspOut = rsp_201 + 0x0000000000000028
	return rbx_112
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

fn00000000004052D0_exit:
// DataOut: edi r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp



word64 fn0000000000405630(word64 rsi, word64 rdi, word64 qwArg04, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & ediOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: edi r12 r12b rax rbp rsi rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r12 r12b r12d r12w rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn0000000000405630_entry:
	*rsiOut = rsi
	*ediOut = edi
// DataOut: edi fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l0000000000405630:
	word64 rax_126 = Mem0[rsi + 0x0000000000000018:word64]
	word64 rbp_15 = Mem0[rsi + 0x0000000000000010:word64]
	word64 r12_19 = (uint64) ((word32) (rax_126 - rbp_15) >>u 0x00000003)
	*r12Out = r12_19
	branch r12_19 == 0x0000000000000000 l00000000004056DB
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040564F:
	branch rax_126 == rbp_15 l00000000004056E6
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:(uint64) (r12d >>u 0x00000003) -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l00000000004056E6:
	Mem164[rsi + 0x0000000000000050:byte] = Mem0[rsi + 0x0000000000000050:byte] | 0x02
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:(uint64) (r12d >>u 0x00000003) -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l0000000000405658:
	word64 rcx_87 = (int64) Mem0[rsi + 0x0000000000000030:word32]
	word32 edx_95 = (word32) (uint64) ~(word32) (uint64) (word32) rcx_87
	word64 rcx_92 = Mem0[rsi + 0x0000000000000020:word64]
	word64 rdx_97 = (int64) edx_95 & rax_126 + rcx_87
	word64 rax_98 = Mem0[rsi + 0x0000000000000008:word64]
	Mem100[rsi + 0x0000000000000018:word64] = rdx_97
	branch rdx_97 - rax_98 > rcx_92 - rax_98 l00000000004056E0
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:(uint64) (r12d >>u 0x00000003) -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l00000000004056E0:
	Mem162[rsi + 0x0000000000000018:word64] = rcx_92
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:(uint64) (r12d >>u 0x00000003) rcx:<invalid> rdx:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l0000000000405683:
	word64 rax_105 = Mem100[rsi + 0x0000000000000018:word64]
	Mem110[rsi + 0x0000000000000010:word64] = rax_105
	word64 rbx_106 = 0x0000000000000000
	word64 rax_112 = DPB(rax_105, fputs_unlocked(rdi, Mem110[0x000000000061A610:word64]), 0)
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:(uint64) (r12d >>u 0x00000003) rcx:<invalid> rdx:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l00000000004056A0:
	word64 rsi_116
	*rsiOut = 0x0000000000413759
	rbx_106 = rbx_106 + 0x0000000000000001
	branch r12_19 >u rbx_106 l00000000004056A0
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:(uint64) (r12d >>u 0x00000003) rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:<invalid> rdi:0x0000000000000001 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l00000000004056BF:
	word64 rdi_124 = Mem110[0x000000000061A610:word64]
	word32 edi_125 = (word32) rdi_124
	*ediOut = edi_125
	rax_126 = Mem110[rdi_124 + 0x0000000000000028:word64]
	branch rax_126 >=u Mem110[rdi_124 + 0x0000000000000030:word64] l00000000004056EF
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:0x0000000000000000 rbp:<invalid> r12:(uint64) (r12d >>u 0x00000003) rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:0x0000000000413759 rdi:0x0000000000000001 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l00000000004056EF:
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:(uint64) (r12d >>u 0x00000003) rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:0x0000000000413759 rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000402400:
	word64 rsp_141
	word64 rbp_142
	word64 rbx_143
	word64 rax_144
	word64 rsi_145
	word64 r12_146
	byte SCZO_147
	word32 r12d_148
	byte SZO_149
	byte C_150
	byte Z_151
	word64 rcx_152
	word32 edx_153
	word32 ecx_154
	word64 rdx_155
	word32 ebx_156
	word64 rdi_157
	word32 eax_158
	word32 esi_159
	word32 edi_160
	byte CZ_161
	call Mem110[0x000000000061A148:word32] (retsize: 4; depth: 4)
		uses: C_129,CZ_123,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_127,ebx_120,ecx_93,edi_125,edx_95,esi_140,qwLoc0C,r12_19,r12d_20,rax_126,rbp_135,rbx_133,rcx_92,rdi_124,rdx_114,rsi_139,rsp_138,SCZO_128,SZO_108,Z_85
		defs: C_150,CZ_161,eax_158,ebx_156,ecx_154,edi_160,edx_153,esi_159,r12_146,r12d_148,rax_144,rbp_142,rbx_143,rcx_152,rdi_157,rdx_155,rsi_145,rsp_141,SCZO_147,SZO_149,Z_151
	return rax_144
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbp:fp r12:(uint64) (r12d >>u 0x00000003) rcx:<invalid> rdx:<invalid> rbx:rbx rsi:0x000000000000000A rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004056D0:
	Mem131[rdi_124 + 0x0000000000000028:word64] = rax_126 + 0x0000000000000001
	Mem132[rax_126:byte] = 0x0A
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:(uint64) (r12d >>u 0x00000003) rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:0x0000000000413759 rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l00000000004056DB:
	word64 rbp_79
	*rbpOut = fp
	word64 rsp_83
	*rspOut = qwArg04 + 0x0000000000000008
	return rax_126
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:(uint64) (r12d >>u 0x00000003) rcx:<invalid> rdx:<invalid> rbx:<invalid> rsi:0x0000000000413759 rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000405630_exit:
// DataOut: edi r12 r12b rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbp:fp r12:(uint64) (r12d >>u 0x00000003) rbx:rbx rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn0000000000405700(word64 rax, word32 edx, word64 rdi, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13dOut, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rax rdi
// LiveOut: r12 r13d r14 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405700_entry:
	*r13dOut = r13d
	*r14Out = r14
	*r12Out = r12
// DataOut: edx fs r11 r11d r12 r13d r14 r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405700:
	word64 rbp_104
	word32 ebx_12 = (word32) (uint64) edx
	word64 rsp_105 = fp - 0x0000000000000010
	branch rdi == 0x0000000000000000 l0000000000405780
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405780:
	rbp_104 = (int64) ebx_12
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rdi rbx:(uint64) edx -8(fp):rbx -4(fp):rbp

l0000000000405710:
	word32 ebx_60
	word64 rbp_62
	word64 rsi_63
	word64 r12_64
	word64 r13_65
	word64 r14_66
	word64 r15_67
	word32 eax_69 = (word32) fn000000000040D420(rax, 0x00000000, rdi, fs, qwLoc18, out ebx_60, out rsp_105, out rbp_62, out rsi_63, out r12_64, out r13_65, out r14_66, out r15_67)
	word32 ebx_127 = (word32) (uint64) (ebx_60 - eax_69)
	branch ebx_127 >= 0x00000000 l0000000000405728
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rdi rbx:(uint64) edx -8(fp):rbx -4(fp):rbp

l0000000000405725_1:
	ebx_127 = 0x00000000
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 rdx:<invalid> rdi:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:0x00000000 -8(fp):rbx -4(fp):rbp

l0000000000405728:
	rbp_104 = (int64) ebx_127
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:0x0000000000000000 ebx:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:0x00000000 -8(fp):rbx -4(fp):rbp

l0000000000405740:
	word64 rdi_106 = Mem0[0x000000000061A610:word64]
	word64 rcx_108 = Mem0[rdi_106 + 0x0000000000000028:word64]
	branch rcx_108 >=u Mem0[rdi_106 + 0x0000000000000030:word64] l0000000000405799
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405799:
	word64 rdi_142
	word64 rbx_143
	word32 edx_145
	byte SCZO_146
	byte SZO_147
	byte C_148
	byte Z_149
	word32 esi_150
	word64 rsi_151
	word32 eax_152
	word64 rax_153
	byte S_154
	word64 rcx_155
	word64 rdx_156
	word32 edi_157
	selector fs_158
	word64 r12_159
	word32 r13d_160
	word64 r14_161
	word64 r13_162
	word64 r15_163
	call __overflow (retsize: 8; depth: 8)
		uses: C_110,dwLoc04_4,dwLoc08_9,eax_102,ebx_99,edi_107,edx_97,esi_95,fs_92,qwLoc18,r12_91,r13_88,r13d_90,r14_89,r15_87,rax_101,rbp_104,rbx_103,rcx_108,rdi_106,rdx_98,rsi_139,rsp_105,S_93,SCZO_109,SZO_96,Z_100
		defs: C_148,eax_152,ebx_144,edi_157,edx_145,esi_150,fs_158,r12_159,r13_162,r13d_160,r14_161,r15_163,rax_153,rbp_141,rbx_143,rcx_155,rdi_142,rdx_156,rsi_151,rsp_140,S_154,SCZO_146,SZO_147,Z_149
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405751:
	Mem137[rdi_106 + 0x0000000000000028:word64] = rcx_108 + 0x0000000000000001
	Mem138[rcx_108:byte] = 0x20
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp

l000000000040575C:
	ebx_127 = (word32) (uint64) (ebx_127 - 0x00000001) (alias)
	branch ebx_127 != 0xFFFFFFFF l0000000000405740
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405764:
	word64 rax_39 = rbp_104 + 0x0000000000000001 + Mem0[0x000000000061B018:word64]
	Mem41[0x000000000061B018:word64] = rax_39
	word64 rsp_42 = rsp_105 + 0x0000000000000008
	word64 rbp_46
	*rbpOut = Mem41[rsp_42 + 0x0000000000000008:word64]
	word64 rsp_47
	*rspOut = rsp_42 + 0x0000000000000010
	return rax_39
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405700_exit:
// DataOut: r12 r13d r14 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn00000000004057B0(byte dl, word64 rsi, word32 edi, word64 r8, word64 r12, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13dOut, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edi esi fs r12 r8 rsi
// LiveOut: r12 r13d r14 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn00000000004057B0_entry:
// DataOut: dl edi esi fs r11 r11d r12 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004057B0:
	word64 rax_24 = 0x0000000000413764
	branch dl == 0x00 l00000000004057CB
// DataOut: edi esi fs r11 r11d r12 r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004057C0:
	rax_24 = 0x0000000000000000
	branch Mem0[0x000000000061B145:byte] == 0x00 l00000000004057E0
// DataOut: edi esi fs r11 r11d r12 r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rax:0x0000000000413764 rbx:(uint64) edi -4(fp):rbx

l00000000004057E0:
	word64 rsp_57
	word64 rbp_58
	word64 r12_59
	rax_24 = fn000000000040C9B0(rsi, edi, r8, r12, out rsp_57, out rbp_58, out r12_59)
	esi = (word32) (uint64) Mem0[rsp_57 + 0x000000000000000C:word32] (alias)
// DataOut: esi fs r11 r11d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rax:0x0000000000000000 rbx:(uint64) edi -4(fp):rbx

l00000000004057CB:
	word32 edx_30 = (word32) (uint64) esi
// DataOut: edx fs r11 r11d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbx:<invalid> rsi:<invalid> rbp:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> -8(fp):esi -4(fp):rbx

l00000000004057D8_thunk_fn0000000000405700:
	word64 rsp_38
	word64 rbp_39
	word64 r12_40
	word32 r13d_41
	word64 r14_42
	return fn0000000000405700(rax_24, edx_30, rax_24, fs, out rsp_38, out rbp_39, out r12_40, out r13d_41, out r14_42)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbx:<invalid> rdx:(uint64) esi rsi:<invalid> rdi:<invalid> rbp:<invalid> r12:<invalid> -8(fp):esi -4(fp):rbx

fn00000000004057B0_exit:
// DataOut: r12 r13d r14 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> ebx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> edx:<invalid> r14:<invalid> eax:<invalid> -8(fp):esi -4(fp):rbx



word64 fn0000000000405810(word64 rdx, word32 edi, word64 r11, selector fs, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 rdx
// LiveOut: r12 r14 r15b rax rbp rdi rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405810_entry:
// DataOut: edi fs r11 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405810:
	word64 rsp_21
	word64 rbp_22
	word64 r12_23
	word64 r14_24
	byte r15b_25
	word64 rbx_26 = fn000000000040EAB0(rdx, r11, fs, out rsp_21, out rbp_22, out r12_23, out r14_24, out r15b_25)
	__errno_location()
	word64 rsp_41
	word32 r12d_42
	word32 edi_43
	word64 r12_44
	word64 rdi_45
	word64 rdx_46
	word64 rbp_47
	word64 rbx_48
	word64 rsi_49
	word32 esi_51
	byte SZO_52
	byte C_53
	word32 eax_54
	word64 rcx_55
	byte r12b_56
	byte Z_57
	word64 r11_58
	selector fs_59
	word64 r14_60
	byte r15b_61
	word64 rax_50
	call error (retsize: 8; depth: 8)
		uses: C_38,dwLoc04_4,dwLoc08_13,dwLoc0C_16,eax_36,edi_34,esi_32,fs,r11,r12_23,r12b_8,r12d_7,r14_24,r15b_25,rax_35,rbp_28,rbx_26,rcx_39,rdi_33,rdx_40,rsi_31,rsp_21,SZO_37
		defs: C_53,eax_54,edi_43,esi_51,fs_59,r11_58,r12_44,r12b_56,r12d_42,r14_60,r15b_61,rax_50,rbp_47,rbx_48,rcx_55,rdi_45,rdx_46,rsi_49,rsp_41,SZO_52,Z_57
	branch r12b_56 == 0x00 l0000000000405850
// DataOut: fs r12 r14 r15b rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405850:
	rax_50 = (uint64) Mem0[0x000000000061B030:word32]
	branch (word32) rax_50 != 0x00000000 l000000000040584A
// DataOut: fs r12 r14 r15b rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040585A:
	word64 rbp_98
	*rbpOut = Mem0[rsp_41 + 0x0000000000000008:word64]
	Mem100[0x000000000061B030:word32] = 0x00000001
	return rax_50
// DataOut: fs r12 r14 r15b rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:(uint64) Mem0[0x000000000061B030:word32] rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000405840:
	Mem90[0x000000000061B030:word32] = 0x00000002
// DataOut: fs r12 r14 r15b rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040584A:
	word64 rbp_86
	*rbpOut = Mem0[rsp_41 + 0x0000000000000008:word64]
	return rax_50
// DataOut: fs r12 r14 r15b rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000405810_exit:
// DataOut: r12 r14 r15b rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> r8b:<invalid> r8d:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word32 fn0000000000405C20(word32 edx, word32 esi, byte dil, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al eax rsi
// Trashed: SCZO ah al ax ch cl cx eax ecx esi rax rcx rsi si sil
// Preserved: rsp
fn0000000000405C20_entry:
	*rsiOut = rsi
// DataOut: dil edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C20:
	byte cl_129
	word32 eax_107
	branch dil == 0x00 l0000000000405C40
// DataOut: dil edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C40:
	eax_107 = 0x00000000 (alias)
	branch edx == 0x00000005 l0000000000405C3E
// DataOut: al dil eax edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C47:
	cl_129 = (byte) (uint64) (DPB(ecx, edx == 0x00000009, 0) | (word32) (edx == 0x00000003)) (alias)
// DataOut: cl dil edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000000

l0000000000405C25:
	word32 eax_102 = (word32) (uint64) ((word32) (uint64) esi & 0x0000F000)
	branch eax_102 != 0x00008000 l0000000000405CA0
// DataOut: dil eax edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405CA0:
	cl_129 = eax_102 == 0x00004000
// DataOut: cl dil edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:(uint64) (eax & 0x0000F000)

l0000000000405C55:
	eax_107 = 0x0000002F (alias)
	branch cl_129 != 0x00 l0000000000405C3E
// DataOut: al dil eax edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:(uint64) (ecx | eax)

l0000000000405C5E:
	branch Mem0[0x000000000061B12C:word32] == 0x00000001 l0000000000405CF0
// DataOut: dil edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:(uint64) (ecx | eax)

l0000000000405CF0:
	return 0x00000000
// DataOut: al eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:(uint64) (ecx | eax)

l0000000000405C6B:
	word32 eax_53
	branch dil == 0x00 l0000000000405CC0
// DataOut: edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:(uint64) (ecx | eax)

l0000000000405CC0:
	eax_107 = 0x00000040 (alias)
	branch edx == 0x00000006 l0000000000405C3E
// DataOut: al eax edi edx fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:(uint64) (ecx | eax)

l0000000000405CCE:
	eax_107 = 0x0000007C (alias)
	branch edx == 0x00000001 l0000000000405C3E
// DataOut: al eax edi edx fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:(uint64) (ecx | eax)

l0000000000405CDC:
	eax_53 = DPB(0x0000007C, edx == 0x00000007, 0) (alias)
// DataOut: eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:(uint64) (ecx | eax)

l0000000000405C70:
	word64 rsi_61 = (uint64) (esi & 0x0000F000)
	*rsiOut = rsi_61
	word32 esi_62 = (word32) rsi_61
	eax_107 = 0x00000040 (alias)
	branch esi_62 == 0x0000A000 l0000000000405C3E
// DataOut: al eax edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000002F cl:<invalid> al:0x2F rcx:(uint64) (ecx | eax)

l0000000000405C83:
	eax_107 = 0x0000007C (alias)
	branch esi_62 == 0x00001000 l0000000000405C3E
// DataOut: al eax edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000040 cl:<invalid> al:0x40 rcx:(uint64) (ecx | eax) rsi:(uint64) (esi & 0x0000F000)

l0000000000405C90:
	eax_53 = DPB(0x0000007C, esi_62 == 0x0000C000, 0) (alias)
// DataOut: eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000000007C cl:<invalid> al:0x7C rcx:(uint64) (ecx | eax) rsi:(uint64) (esi & 0x0000F000)

l0000000000405CE2:
	return (word32) (uint64) ((word32) (uint64) -eax_53 & 0x0000003D)
// DataOut: al eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:Test(EQ,Z) rcx:(uint64) (ecx | eax) rsi:(uint64) (esi & 0x0000F000)

l0000000000405C33:
	eax_107 = 0x00000000 (alias)
	branch Mem0[0x000000000061B12C:word32] == 0x00000003 l0000000000405CB0
// DataOut: al eax edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:(uint64) (eax & 0x0000F000)

l0000000000405CB0:
	word64 rsi_114 = (uint64) (esi & 0x00000049)
	*rsiOut = rsi_114
	return (word32) (uint64) ((word32) (uint64) ~(word32) (uint64) (0x00000000 - cond((word32) rsi_114 - 0x00000001)) & 0x0000002A)
// DataOut: al eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x0000000000000000

l0000000000405C3E:
	return eax_107
// DataOut: al eax edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> cl:<invalid> al:<invalid> rcx:(uint64) (ecx | eax) rsi:(uint64) (esi & 0x0000F000)

fn0000000000405C20_exit:
// DataOut: al eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:(uint64) (ecx | eax)



byte fn0000000000405D00(word32 edx, word32 esi, byte dil, ptr64 & rspOut, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al rdi rsi rsp
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405D00_entry:
// DataOut: dil edx esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D00:
	word32 edi_6 = (word32) dil
	word64 rsi_12
	word32 eax_13 = fn0000000000405C20(edx, esi, (byte) edi_6, out rsi_12)
	word64 rbx_18 = (uint64) eax_13
	word64 rdi_8
	*rdiOut = DPB(rdi, edi_6, 0)
	byte bl_20 = (byte) rbx_18
	branch (byte) eax_13 == 0x00 l0000000000405D33
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D10:
	word64 rdi_49 = Mem0[0x000000000061A610:word64]
	*rdiOut = rdi_49
	word64 rax_52 = Mem0[rdi_49 + 0x0000000000000028:word64]
	branch rax_52 >=u Mem0[rdi_49 + 0x0000000000000030:word64] l0000000000405D3A
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:(word32) dil rbx:(uint64) eax rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D3A:
	word64 rsp_82
	word64 rbx_83
	word32 edi_84
	byte dil_85
	byte al_86
	byte SZO_87
	byte C_88
	word32 ebx_89
	word32 eax_90
	byte Z_91
	word64 rdi_92
	word64 rax_93
	byte SCZO_94
	word64 rdx_95
	word32 esi_97
	word32 edx_98
	word64 rsi_99
	call __overflow (retsize: 8; depth: 12)
		uses: al_53,bl_20,C_56,dil_51,dwLoc04_4,eax_54,ebx_19,edi_50,edx,esi_80,qwLoc04,rax_52,rbx_18,rdi_49,rdx,rsi_81,rsp_2,SCZO_55,SZO_15,Z_16
		defs: al_86,bl_96,C_88,dil_85,eax_90,ebx_89,edi_84,edx_98,esi_97,rax_93,rbx_83,rdi_92,rdx_95,rsi_99,rsp_82,SCZO_94,SZO_87,Z_91
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D21:
	Mem78[rdi_49 + 0x0000000000000028:word64] = rax_52 + 0x0000000000000001
	Mem79[rax_52:byte] = bl_20
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D2B:
	Mem75[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D33:
	word64 rsp_44
	*rspOut = fp + 0x0000000000000004
	return bl_20 != 0x00
// DataOut: al fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> rbx:(uint64) eax rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> al:<invalid> rcx:<invalid> -4(fp):rbx

fn0000000000405D00_exit:
// DataOut: al rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 edi:<invalid> rbx:rbx al:Test(NE,Z) rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rsi:<invalid> cl:<invalid> rcx:<invalid> -4(fp):rbx



word64 fn0000000000405D50(word64 rdi, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r12bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: r12b r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405D50_entry:
	*r12bOut = r12b
// DataOut: fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D50:
	word64 rbp_191 = rdi
	word64 rbx_10 = 0x0000000000000000
	word32 ebx_11 = 0x00000000
	word64 rax_17 = 0x0000000000000000
	branch Mem0[0x000000000061B114:byte] == 0x00 l0000000000405D92
// DataOut: ebx fs r11 rax rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D7A:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405EA0
// DataOut: fs r11 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:0x0000000000000000 rax:0x0000000000000000 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405EA0:
	word64 r14_234
	word64 rax_235 = fn000000000040CD70(fp - 0x00000000000002B0, Mem0[rdi + 0x0000000000000018:word64], out r14_234)
	rax_17 = DPB(rax_235, strlen(rax_235), 0)
	rbx_10 = rax_17 + 0x0000000000000001
	ebx_11 = (word32) (rax_17 + 0x0000000000000001) (alias)
// DataOut: ebx fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:0x0000000000000000 rax:0x0000000000000000 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D87:
	word64 rbx_228 = (int64) Mem0[0x000000000061B178:word32]
	rbx_10 = rbx_228 + 0x0000000000000001
	ebx_11 = (word32) (rbx_228 + 0x0000000000000001) (alias)
// DataOut: ebx fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:0x0000000000000000 rax:0x0000000000000000 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D92:
	branch Mem0[0x000000000061B144:byte] == 0x00 l0000000000405DB6
// DataOut: ebx fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D9B:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E58
// DataOut: fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405E58:
	rax_17 = 0x0000000000000002
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000405DB3
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405E6A:
	word64 rsp_212
	word64 r8_214
	word64 r9_215
	word32 r14d_217
	word64 r15_218
	word64 rax_219 = fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], rdi, fp - 0x00000000000002B0, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, out rsp_212, out rbp_191, out r8_214, out r9_215, out r11, out r14d_217, out r15_218)
	rax_17 = DPB(rax_219, strlen(rax_219), 0) + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:0x0000000000000002 rdi:<invalid> rsi:fp - 0x00000000000002B0 rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DA8:
	rax_17 = (int64) Mem0[0x000000000061B174:word32] + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DB3:
	rbx_10 = rbx_10 + rax_17
	ebx_11 = (word32) rbx_10 (alias)
// DataOut: ebx fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DB6:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000405DD6
// DataOut: ebx fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DBF:
	word64 rax_158
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E40
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E40:
	rax_158 = DPB(rax_17, strlen(Mem0[rbp_191 + 0x00000000000000A8:word64]), 0) + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DC8:
	rax_158 = (int64) Mem0[0x000000000061B16C:word32] + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DD3:
	ebx_11 = (word32) (rbx_10 + rax_158) (alias)
// DataOut: ebx fs r11 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DD6:
	word64 rbx_73
	word64 rsp_74
	word64 rbp_75
	word64 r8_78
	word64 r9_79
	word64 r11_80
	word64 r12_81
	word64 r13_82
	word64 r14_83
	word64 r15_84
	word32 edi_137
	word64 rsi_144
	fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_11, rbp_191, Mem0[rbp_191:word64], 0x0000000000000000, r11, fs, out rbx_73, out rsp_74, out rbp_75, out rsi_144, out edi_137, out r8_78, out r9_79, out r11_80, out r12_81, out r13_82, out r14_83, out r15_84)
	word64 rax_86 = (uint64) Mem0[0x000000000061B12C:word32]
	word64 rbx_101 = rbx_73 + Mem0[rsp_74 + 0x0000000000000008:word64]
	branch (word32) rax_86 == 0x00000000 l0000000000405E1C
// DataOut: edi fs r11 r11d r12b r14 r14d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> rdx:<invalid> rcx:<invalid> r14:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DFC:
	edi_137 = (word32) Mem0[rbp_75 + 0x00000000000000B0:byte]
	rbx_101 = rbx_101 + DPB(rax_86, (word32) ((byte) fn0000000000405C20((word32) ((uint64) Mem0[rbp_75 + 0x00000000000000A0:word32]), (word32) ((uint64) Mem0[rbp_75 + 0x0000000000000028:word32]), (byte) edi_137, out rsi_144) != 0x00), 0)
// DataOut: edi fs r11 r11d r12b r14 r14d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:(uint64) Mem0[0x000000000061B12C:word32] rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ecx:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E1C:
	branch (Mem0[rsp_74 + 0x00000000000002A8:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000405EBF
// DataOut: edi fs r11 r11d r12b r14 r14d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405EBF:
	__stack_chk_fail()
// DataOut: edi fs r11 r11d r14 r14d r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405EC4_thunk_fn0000000000405ED0:
	word64 rsp_130
	word64 rbp_131
	word64 r9_132
	byte r12b_133
	return fn0000000000405ED0(rbp_75, rsi_144, edi_137, r8_78, r11_80, r14_83, fs, out rsp_130, out rbp_131, out r9_132, out r12b_133)
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E36:
	word64 rbp_127
	*rbpOut = Mem0[rsp_74 + 0x00000000000002C0:word64]
	word64 rsp_128
	*rspOut = rsp_74 + 0x00000000000002C8
	return rbx_101
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> r11:<invalid> r10:<invalid> ecx:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405D50_exit:
// DataOut: r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r12:<invalid> r8:<invalid> cl:<invalid> edx:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> dl:<invalid> r9:<invalid> sil:<invalid> r15:<invalid> r10:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000405ED0(word64 rbp, word64 rsi, word32 edi, word64 r8, word64 r11, word64 r14, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r12bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 r11d r14 r14d r8 rbp rsi
// LiveOut: r12b r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000405ED0_entry:
	*r9Out = r9
// DataOut: edi fs r11 r11d r14 r14d r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405ED0:
	word64 r12_21 = (uint64) edi
	word64 rdx_6 = Mem0[0x000000000061B1B0:word64]
	word64 rax_8 = Mem0[0x000000000061B020:word64]
	byte r12b_23
	*r12bOut = (byte) r12_21
	word64 rsp_117 = fp - 0x0000000000000014
	word64 rbx_177 = rdx_6
	branch rax_8 >u rdx_6 l0000000000405EF3
// DataOut: fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405EEF_1:
	rbx_177 = rax_8
// DataOut: fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405EF3:
	word64 rsi_358
	word64 rax_110
	word64 r8_348
	branch rbx_177 <=u Mem0[0x000000000061A660:word64] l00000000004060C8
// DataOut: fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060C8:
	rax_110 = 0x0000000000000000
	r8_348 = rdx_6
	rsi_358 = Mem0[0x000000000061B028:word64]
	branch rbx_177 == 0x0000000000000000 l0000000000406004
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060DD:
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:0x0000000000000000 r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F00:
	word64 rdi_387 = Mem0[0x000000000061B028:word64]
	word32 edi_388 = (word32) rdi_387
	branch rbx_177 <u rax_8 >>u 0x0000000000000001 l0000000000406170
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406170:
	r8 = 0x0000000055555555
	branch rbx_177 >u rax_8 l000000000040619D
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040617F:
	rbp = rbx_177 * 0x0000000000000002
	word64 rsp_531
	Mem534[0x000000000061B028:word64] = fn0000000000410C90(rax_8 >>u 0x0000000000000001, rbp + rbx_177 << 0x0000000000000004, rdi_387, out rsp_531, out r8)
// DataOut: fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r8:0x0000000055555555 -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F16:
	branch rax_8 >u rax_8 >>u 0x0000000000000001 l000000000040619D
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F29:
	word64 rsp_516
	word64 rax_518 = fn0000000000410C90(rax_8 >>u 0x0000000000000001, rax_8 * 0x0000000000000018, rdi_387, out rsp_516, out r8)
	rbp = Mem0[0x000000000061B020:word64]
	Mem521[0x000000000061B028:word64] = rax_518
// DataOut: fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:0x00000000AAAAAAAA -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F44:
	word64 rax_430 = Mem0[0x000000000061A660:word64]
	word64 rdi_433 = rbp - rax_430
	rsi = rbp + 0x0000000000000001 + rax_430
	edi_388 = (word32) rdi_433 (alias)
	word64 rcx_436 = rsi *s rdi_433
	branch rbp >u rsi l000000000040619D
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:<invalid> rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F66:
	word64 rax_446 = (uint64) ((uint128) (uint64) rcx_436 /u rdi_433)
	branch rsi != rax_446 l000000000040619D
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:<invalid> rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F77:
	r8 = 0x00000000FFFFFFFF
	branch rcx_436 >>u 0x0000000000000001 >u rax_446 l000000000040619D
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:<invalid> rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040619D:
	fn0000000000410E50()
// DataOut: edi fs r11d r12 r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi
// Terminates process

l00000000004061A2_thunk_fn00000000004061B0:
	word64 rsp_412
	word64 rbp_413
	word64 rsi_414
	word64 r8_415
	word64 r9_416
	word64 r12_417
	word64 r14_418
	word64 r15_419
	return fn00000000004061B0(rbx_177, rbp, rsi, edi_388, r8, r11d, r12_21, r14, fs, out rsp_412, out rbp_413, out rsi_414, out r8_415, out r9_416, out r12_417, out r14_418, out r15_419)
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F8D:
	word64 rax_459 = fn0000000000410C40(rsi, (rcx_436 >>u 0x0000000000000001) * 0x0000000000000008, out rsp_117)
	word64 rcx_463 = Mem0[0x000000000061A660:word64]
	branch rbp <=u rcx_463 l0000000000405FE4
// DataOut: fs r11 r12b r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405FA6:
	word64 rsi_483 = Mem0[0x000000000061B028:word64]
	word64 rcx_486 = rcx_463 * 0x0000000000000008 + 0x00000008
	word64 rdx_488 = rsi_483 + (rcx_463 * 0x0000000000000003) * 0x0000000000000008 + 0x0000000000000010
	word64 rsi_491 = rsi_483 + (rbp * 0x0000000000000003) * 0x0000000000000008
// DataOut: fs r11 r12b r9 rax rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405FD0:
	Mem495[rdx_488 + 0x0000000000000000:word64] = rax_459
	rdx_488 = rdx_488 + 0x0000000000000018
	rax_459 = rax_459 + rcx_486
	rcx_486 = rcx_486 + 0x0000000000000008
	branch rdx_488 != rsi_491 l0000000000405FD0
// DataOut: fs r11 r12b r9 rax rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405FE4:
	Mem480[0x000000000061A660:word64] = rbp
	rax_110 = 0x0000000000000000
	r8_348 = Mem480[0x000000000061B1B0:word64]
	rsi_358 = Mem480[0x000000000061B028:word64]
	branch rbx_177 != 0x0000000000000000 l00000000004060E0
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rcx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060E0:
	word64 rcx_362 = Mem0[rsi_358 + 0x0000000000000010:word64]
	Mem364[rsi_358:byte] = 0x01
	word64 rdi_360 = rax_110 + 0x0000000000000001
	Mem366[rsi_358 + 0x0000000000000008:word64] = rdi_360 * 0x0000000000000003
	word64 rdx_367 = 0x0000000000000000
// DataOut: fs r11 r12b r8 r9 rax rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> r10:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060F8:
	Mem373[rcx_362 + rdx_367 * 0x0000000000000008:word64] = 0x0000000000000003
	rdx_367 = rdx_367 + 0x0000000000000001
	branch rdx_367 <=u rax_110 l00000000004060F8
// DataOut: fs r11 r12b r8 r9 rax rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> r10:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406109:
	rsi_358 = rsi_358 + 0x0000000000000018
	branch rdi_360 == rbx_177 l0000000000406004
// DataOut: fs r11 r12b r8 r9 rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> r10:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406116:
	rax_110 = rdi_360
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> r10:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406004:
	word64 rbp_204 = 0x0000000000000000
	branch r8_348 == 0x0000000000000000 l000000000040612D
// DataOut: fs r11 r12b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> r10:<invalid> rbp:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040600F:
// DataOut: fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:(uint64) edi rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:0x0000000000000000 rdi:<invalid> rcx:<invalid> r10:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406010:
	word64 rbp_211
	byte r12b_213
	word64 r9_212
	rax_110 = fn0000000000405D50(Mem0[Mem0[0x000000000061B1A8:word64] + rbp_204 * 0x0000000000000008:word64], r11, fs, out rsp_117, out rbp_211, out r9_212, out r12b_213)
	r11 = rax_110
	word64 r14_220 = Mem0[0x000000000061B1B0:word64]
	branch rbx_177 == 0x0000000000000000 l0000000000406120
// DataOut: fs r11 r12b r14 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406033:
	word64 r13_243 = Mem0[0x000000000061B0C8:word64]
	word64 rsi_244 = Mem0[0x000000000061B028:word64] + 0x0000000000000010
	word64 rcx_245 = 0x0000000000000001
	rsi_262 = rsi_244
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r13:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060A7:
	word64 rsi_262
	word64 r9_265 = r9_212 - 0x0000000000000001
	branch Mem0[rsi_262:byte] == 0x00 l000000000040609A
	*r9Out = r9_265 - 0x0000000000000001
	branch Mem0[rsi_262:byte] == 0x00 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060B3:
	word64 r10_293
	branch r12b_213 != 0x00 l0000000000406050
	branch r12b_213 != 0x00 l0000000000406050
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406050:
	r10_293 = (uint64) ((uint128) (uint64) rbp_211 /u (uint64) ((uint128) ((uint64) ((rsi_244 - 0x0000000000000001) + rcx_546)) /u rcx_546))
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060B8:
	r10_293 = (uint64) ((uint128) (uint64) rbp_211 % rcx_546)
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040606A:
	word64 rdx_299 = rax_110 + (uint64) (r9_265 - 0x0000000000000001 != r10_293) * 0x0000000000000002
	rax_110 = Mem0[rsi_262 + 0x0000000000000000:word64] + r10_293 * 0x0000000000000008
	r9_212 = Mem0[rcx_546:word64]
	*r9Out = r9_212
	branch rdx_299 <=u r9_212 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406086:
	Mem312[r14_220 + 0x0000000000000008:word64] = Mem0[r14_220 + 0x0000000000000008:word64] + (rdx_299 - r9_212)
	Mem313[rax_110:word64] = rdx_299
	Mem316[rsi_262:byte] = Mem313[r14_220 + 0x0000000000000008:word64] <u r13_243
// DataOut: fs r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> r10:<invalid> al:<invalid> edi:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040609A:
	rsi_262 = rsi_262 + 0x0000000000000018
	rcx_245 = rcx_546 + 0x0000000000000001
	word64 rcx_546 = rcx_245
	branch rbx_177 <=u rcx_546 l0000000000406120
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> r9:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r10:<invalid> cl:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406120:
	rbp_204 = rbp_211 + 0x0000000000000001
	branch rbp_211 + 0x0000000000000001 <u r14_220 l0000000000406010
// DataOut: fs r11 r12b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> edx:<invalid> r10:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040612D:
	branch rbx_177 <=u 0x0000000000000001 l0000000000406164
	branch rbx_177 <=u 0x0000000000000001 l0000000000406164
// DataOut: fs r12b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406133:
	branch Mem0[Mem0[0x000000000061B028:word64] - 0x0000000000000018 + rbx_177 * 0x0000000000000018:byte] != 0x00 l0000000000406164
	word64 rax_160 = rbx_177 * 0x0000000000000003
	word64 rdx_158 = Mem0[0x000000000061B028:word64]
	rax_110 = rax_160 << 0x0000000000000003
	branch Mem0[rdx_158 - 0x0000000000000018 + (rax_160 << 0x0000000000000003):byte] != 0x00 l0000000000406164
// DataOut: fs r12b r9 rax rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406149:
	rax_110 = (rax_160 << 0x0000000000000003) + rdx_158 + rdx_158
// DataOut: fs r12b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040615A:
	word64 rbx_178 = rbx_177 - 0x0000000000000001
	branch rbx_178 != 0x0000000000000001 l0000000000406150
	rbx_177 = rbx_178 - 0x0000000000000001
	branch rbx_178 != 0x0000000000000002 l0000000000406150
// DataOut: fs r12b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406150:
	rax_110 = rax_110 - 0x0000000000000018
	branch Mem0[rax_110 - 0x0000000000000018:byte] != 0x00 l0000000000406164
// DataOut: fs r12b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406164:
	word64 rbx_127 = Mem0[rsp_117:word64]
	word64 rsp_131 = Mem0[rsp_117 + 0x0000000000000010:word64]
	return rax_110
	word64 rsp_145 = Mem0[rsp_131 + 0x0000000000000028:word64]
	word64 rbp_147
	*rbpOut = Mem0[rsp_145 + 0x0000000000000008:word64]
	word64 rsp_151
	*rspOut = rsp_145 + 0x0000000000000018
	return rbx_127
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> edi:<invalid> al:<invalid> eax:<invalid> r13:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> edx:<invalid> dl:<invalid> sil:<invalid> r15:<invalid> ecx:<invalid> dx:<invalid> esi:<invalid> ax:<invalid> ah:<invalid> r9d:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

fn0000000000405ED0_exit:
// DataOut: r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12:<invalid> rbx:<invalid> r8:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> edx:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> edi:<invalid> eax:<invalid> r13:<invalid> r10:<invalid> ecx:<invalid> r15:<invalid> dx:<invalid> esi:<invalid> r9d:<invalid> ax:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> r14d:<invalid> r11d:<invalid> ebp:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi



word64 fn00000000004061B0(word64 rbx, word64 rbp, word64 rsi, word32 edi, word64 r8, word32 r11d, word64 r12, word64 r14, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11d r12 r14 r14d r8 rbp rbx rsi
// LiveOut: eax r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn00000000004061B0_entry:
// DataOut: edi fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004061B0:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	rbp = (uint64) edi
	ebp = (word32) rbp (alias)
	rsp = fp - 0x0000000000000008
	dwLoc08 = rbx
	rsp = fp - 0x0000000000000030
	rax = Mem0[fs:0x00000028:word64]
	qwLoc18 = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000406248
// DataOut: ebp edi esp fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406248:
	rax = fn000000000040C9B0(rsi, edi, r8, r12, out rsp, out rbp, out r12)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	rdi = rax
	edi = (word32) rdi (alias)
	branch Test(EQ,Z) l00000000004061D1
// DataOut: ebp esp fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rbp:(uint64) edi rax:0x0000000000000000 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406259:
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000406267
// DataOut: eax ebp ebx edx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406264_1:
	edx = eax
// DataOut: ebp ebx edx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> eax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406267:
// DataOut: ebp ebx edx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> r14:<invalid> eax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004061D1:
	r8 = (uint64) ebp
	rcx = 0x000000000041375A
	rdx = 0x0000000000000015
	rsi = 0x0000000000000001
	rdi = rsp
	rax = 0x0000000000000000
	SZO = cond(eax)
	C = false
	rax = 0x0000000000000000
	rbx = rsp
	rax = rsp
// DataOut: ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004061F3:
	rcx = (uint64) Mem0[rax:word32]
	rax = rax + 0x0000000000000004
	edx = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rdx = (uint64) (edx & ecx)
	rdx = (uint64) (edx & 0x80808080)
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l00000000004061F3
// DataOut: dl eax ebp ebx edx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040620B:
	rcx = (uint64) edx
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(edx & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000406219
// DataOut: cl dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rdi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:(uint64) ~ecx rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406216_1:
	edx = ecx
// DataOut: dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rdi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:(uint64) (ecx >>u 0x00000010) rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406219:
	rcx = rax + 0x0000000000000002
	branch Test(NE,Z) l0000000000406221
// DataOut: dl eax ebp ebx ecx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:(uint64) (ecx >>u 0x00000010) rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040621D_2:
	rax = rcx
// DataOut: dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406221:
	dl = dl + dl
	SCZO = cond(dl)
	rax = rax - 0x03 - C
	rdx = (uint64) eax
	rdx = (uint64) (edx - ebx)
	SCZO = cond(edx)
// DataOut: ebp ebx edx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r8:(uint64) ebp rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rdi:<invalid> rbx:<invalid> edx:<invalid> r12:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040622B:
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rsi = rsi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rsi)
	C = false
	rax = (uint64) edx
	branch Test(NE,Z) l0000000000406269
// DataOut: eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:<invalid> dl:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> eax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406269:
	__stack_chk_fail()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	r9 = rsi
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	sil = Test(EQ,Z)
	rdx = (uint64) (edx | esi)
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l00000000004062C8
// DataOut: al dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:<invalid> dl:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> eax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062C8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l00000000004062A1
// DataOut: al dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> eax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062CC:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> eax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062A1:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004062B8
// DataOut: dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> eax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062A5:
	SZO = cond(dl & dl)
	C = false
	rax = 0x0000000000000001
	branch Test(EQ,Z) l00000000004062B8
// DataOut: eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> eax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062B8:
	rsi = Mem0[rdi:word64]
	rdi = Mem0[rcx:word64]
// DataOut: eax ebp ebx esi fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> eax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7D0:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	v31 = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = v31
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000010
	rax = DPB(rax, strcmp(rdi, rsi), 0)
	r13 = (uint64) eax
	rax = 0x0000000000000000
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: eax fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> eax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7F1:
	edx = (word32) Mem0[rbx:byte]
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000040AAE7
// DataOut: dl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> eax:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7FC:
	ecx = (word32) Mem0[rbp + 0x0000000000000000:byte]
	al = 0x01
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> eax:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A806:
	eax = (word32) dl
	rsi = 0x000000000000002E
	rsi = (uint64) (esi - eax)
	SCZO = cond(esi)
	branch Test(NE,Z) l000000000040A81D
// DataOut: cl dl esi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> eax:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A812:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x00)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax esi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A81D:
	eax = (word32) cl
	rdi = 0x000000000000002E
	rdi = (uint64) (edi - eax)
	SCZO = cond(edi)
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl edi esi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A829:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x00)
	rax = 0x0000000000000001
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl eax edi esi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A848:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A84C:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A852:
	SCZO = cond(Mem0[rbx + 0x0000000000000002:byte] - 0x00)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax edi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A85D:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000040A9A0
// DataOut: cl dl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9A0:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9AA:
	SCZO = cond(Mem0[rbp + 0x0000000000000002:byte] - 0x00)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A865:
	SCZO = cond(dl - 0x2E)
	branch Test(EQ,Z) l000000000040AAC0
// DataOut: cl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAC0:
	rbx = rbx + 0x0000000000000001
	rbp = rbp + 0x0000000000000001
	SCZO = cond(cl - 0x2E)
	rax = 0x00000000FFFFFFFF
	branch Test(EQ,Z) l000000000040A877
// DataOut: eax fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAD6:
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:0x00000000FFFFFFFF rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:0xFF dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:0xFFFFFFFF rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A86E:
	SCZO = cond(cl - 0x2E)
	branch Test(EQ,Z) l000000000040A9B4
// DataOut: fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A877:
	rdi = rsp
	Mem0[rsp:word64] = rbx
	Mem0[rsp + 0x0000000000000008:word64] = rbp
	rax = fn000000000040A730(rdi, r14d, out r9)
	rdi = rsp + 0x0000000000000008
	r14 = rax
	r12 = r14
	rax = fn000000000040A730(rdi, r14d, out r9)
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000040A8A0
// DataOut: eax fs r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A89B_1:
	r12 = Mem0[rsp:word64]
// DataOut: eax fs r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:0x0000000000000000 esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8A0:
	r10 = rax
	r10 = r10 - rbp
	r12 = r12 - rbx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040AAF1
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:0x0000000000000000 esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAF1:
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r10 = r10 - rbp
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l000000000040A8BB
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB02:
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8B2:
	SCZO = cond(r12 - r10)
	branch Test(EQ,Z) l000000000040AA8B
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA8B:
	rdx = r12
	rsi = rbp
	rdi = rbx
	rax = DPB(rax, strncmp(rdi, rsi, rdx), 0)
	SZO = cond(eax & eax)
	C = false
	r10 = r12
	branch Test(NE,Z) l000000000040A8BB
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAA4:
	r12 = Mem0[rsp:word64]
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r12 = r12 - rbx
	r10 = r10 - rbp
	SCZO = cond(r10)
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8BB:
	rcx = 0x0000000000000000
	r8 = 0x0000000000000000
	SZO = cond(r8d)
	C = false
	rbx = 0x00000000FFFFFFFF
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:0x0000000000000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8C6:
	SCZO = cond(r10 - rcx)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8CF:
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB07:
	SCZO = cond(r12 - r8)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A971:
	SCZO = cond(r12 - r8)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A97A:
	esi = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
	eax = (int32) sil
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: esi fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8D8:
	SCZO = cond(r10 - rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8E7:
	eax = (int32) r9b
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9D4:
	edx = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
	SCZO = cond(dl - 0x30)
	branch Test(EQ,Z) l000000000040A9D0
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9D0:
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9DE:
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9EA:
	SCZO = cond(r9b - 0x30)
	branch Test(EQ,Z) l000000000040A9E0
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9E0:
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9F0:
	eax = (int32) dl
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	eax = (int32) r9b
	branch Test(UGT,CZ) l000000000040AADB
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AADB:
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A8C6
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:(int32) r9b r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA03:
	rax = (uint64) (eax - 0x00000030)
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9d rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:(int32) r9b r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA0B:
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9d rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:(uint64) ((int32) r9b - 0x00000030) rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA22:
	SZO = cond(eax & eax)
	branch Test(NE,Z) l000000000040AA2C
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040AA2C
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9d rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA26:
	eax = (int32) dl
	rax = (uint64) (eax - r9d)
	eax = (int32) dl
	rax = (uint64) (eax - r9d)
	SCZO = cond(eax)
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA2C:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	edx = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
	esi = (int32) dl
	rsi = (uint64) (esi - 0x00000030)
	SCZO = cond(esi - 0x00000009)
	branch Test(ULE,CZ) l000000000040AA10
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA10:
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	esi = (int32) r9b
	rsi = (uint64) (esi - 0x00000030)
	SCZO = cond(esi - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9d rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9B4:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rax = 0x0000000000000001
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA44:
	edx = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	rdx = (uint64) (edx - 0x00000030)
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040AAE7
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAE7:
	rax = 0x00000000FFFFFFFF
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> eax:<invalid> ecx:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA55:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040A8C6
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA5D:
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8F7:
	SCZO = cond(r12 - r8)
	branch Test(EQ,Z) l000000000040AB18
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:(uint64) ((int32) r9b - 0x00000030) rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB18:
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:(uint64) ((int32) r9b - 0x00000030) rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A900:
	edx = (word32) Mem0[0x00000000FFFFFFFF + r8:byte]
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:(uint64) ((int32) r9b - 0x00000030) rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A98F:
	rdx = (uint64) esi
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A905:
	esi = (word32) dl
	rax = 0x0000000000000000
	edi = rsi - 0x0000000000000030
	SCZO = cond(edi - 0x00000009)
	branch Test(ULE,CZ) l000000000040A925
// DataOut: dl eax esi fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A912:
	rax = (uint64) esi
	rax = (uint64) (eax & 0xFFFFFFDF)
	rax = (uint64) (eax - 0x00000041)
	SCZO = cond(eax - 0x00000019)
	branch Test(UGT,CZ) l000000000040AA68
// DataOut: dl esi fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA68:
	rsi = (uint64) (esi + 0x00000100)
	SCZO = cond(dl - 0x7E)
	rax = (uint64) esi
	branch Test(NE,Z) l000000000040AA77
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA73_1:
	eax = r11d
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA77:
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A923:
	rax = (uint64) esi
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A925:
	SCZO = cond(r10 - rcx)
	branch Test(EQ,Z) l000000000040AB1F
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB1F:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax edi fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A92E:
	r9d = (word32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A934:
	esi = (word32) r9b
	rdi = 0x0000000000000000
	edx = rsi - 0x0000000000000030
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A942:
	rdx = (uint64) esi
	rdi = (uint64) esi
	rdx = (uint64) (edx & 0xFFFFFFDF)
	rdx = (uint64) (edx - 0x00000041)
	SCZO = cond(edx - 0x00000019)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:(word32) r9b r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A951:
	rsi = (uint64) (esi + 0x00000100)
	SCZO = cond(r9b - 0x7E)
	rdi = (uint64) esi
	branch Test(NE,Z) l000000000040A961
// DataOut: eax edi fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:(uint64) (word32) r9b rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:(word32) r9b r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A95D_1:
	edi = r11d
// DataOut: eax edi fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:(uint64) ((word32) r9b + 0x00000100) rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A961:
	SCZO = cond(eax - edi)
	branch Test(NE,Z) l000000000040AA80
// DataOut: eax edi fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA80:
	rax = (uint64) (eax - edi)
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000040AA86
// DataOut: eax fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA82_1:
	eax = r13d
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA86:
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A969:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> edi:<invalid> r15:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB10:
	rax = (uint64) r13d
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:0x00000000FFFFFFFF r13:<invalid> ecx:<invalid> eax:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> r15:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A834:
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:0x0000000000000001 rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> ecx:<invalid> eax:0x00000001 rcx:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A838:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbx:<invalid> r13:<invalid> rcx:<invalid> ecx:<invalid> eax:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062AE:
	return rax
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:0x0000000000000001 rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:<invalid> r9:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> sil:Test(EQ,Z) rcx:<invalid> rbx:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> eax:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040623D:
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> r8:(uint64) ebp rcx:<invalid> rbx:<invalid> dl:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r14:<invalid> eax:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn00000000004061B0_exit:
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r12 (=> r12Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> rbx:<invalid> r8:<invalid> rcx:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r13:<invalid> ecx:<invalid> r12:<invalid> r15:<invalid> eax:<invalid> r14:<invalid> r10:<invalid> esi:<invalid> r9d:<invalid> edi:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):(uint64) edi -60(fp):fp - 0x0000000000000038 -56(fp):(uint64) edi -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



void fn0000000000406400()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ch cl cx dh di dil dl dx ecx edi edx esi rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406400_entry:
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406400:
	branch Mem0[0x000000000061A408:word64] == 0x0000000000000000 l0000000000406418
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406418:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A410)
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000406439_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A3F0)
	return
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rsi:<invalid> rcx:<invalid> rdx:<invalid>

l000000000040640A:
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040640F_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A400)
	return
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A400

fn0000000000406400_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid>



void fn0000000000406440(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ch cl cx dh di dil dl dx ecx edi edx esi rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406440_entry:
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406440:
	branch Mem0[0x000000000061B128:byte] == 0x00 l0000000000406470
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406470:
	Mem25[0x000000000061B128:byte] = 0x01
	fn0000000000406400()
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018
// LocalsOut: fp(64)

l000000000040644D:
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdi:rdi rsi:<invalid> rcx:<invalid> rdx:<invalid> -16(fp):rdi

l00000000004026C0:
	word64 rsp_16
	byte SCZO_17
	byte Z_18
	word64 rsi_19
	word64 rdi_20
	word64 rcx_21
	word32 edx_22
	word64 rdx_23
	call Mem0[0x000000000061A2A8:word32] (retsize: 4; depth: 4)
		uses: qwLoc10_8,rcx_11,rdi_13,rdx_12,rsi_10,rsp_14,SCZO_15,Z_5
		defs: edx_22,rcx_21,rdi_20,rdx_23,rsi_19,rsp_16,SCZO_17,Z_18
	return
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rcx:<invalid> rdx:0x0000000000000001 rdi:<invalid> -16(fp):rdi

fn0000000000406440_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> -16(fp):rdi



word64 fn0000000000406490()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: rsp
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000406490_entry:
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406490:
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004064EF:
	branch (word32) (uint64) Mem0[0x000000000061B038:word32] != 0x00000000 l0000000000406503
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064F9:
	branch (word32) (uint64) Mem0[0x000000000061B034:word32] == 0x00000000 l0000000000406538
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:(uint64) Mem0[0x000000000061B038:word32] rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000406538:
	return fp + 0x0000000000000004
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:(uint64) Mem0[0x000000000061B034:word32] rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx

fn0000000000406490_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rax:(uint64) Mem0[0x000000000061B034:word32] rbx:rbx rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> -4(fp):rbx

l0000000000406503:
	branch Mem0[0x000000000061B128:byte] == 0x00 l00000000004064A0
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040650C:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064A0:
	word64 rsp_37
	word64 rbx_38
	byte SCZO_39
	word32 eax_40
	word64 rax_41
	byte SZO_42
	byte C_43
	byte Z_44
	word32 edi_45
	word64 rdi_46
	word64 rdx_47
	word32 esi_48
	word64 rsi_49
	word32 ebx_50
	word32 edx_51
	call fflush_unlocked (retsize: 8; depth: 140)
		uses: C_30,dwLoc04_4,eax_33,ebx_15,edi_20,edx_14,esi_17,rax_32,rbx_22,rdi_36,rdx_18,rsi_16,rsp_23,SCZO_34,SZO_31,Z_35
		defs: C_43,eax_40,ebx_50,edi_45,edx_51,esi_48,rax_41,rbx_38,rdi_46,rdx_47,rsi_49,rsp_37,SCZO_39,SZO_42,Z_44
	word64 rsp_58
	word64 rbx_59
	byte SCZO_60
	word32 eax_61
	word64 rax_62
	byte SZO_63
	byte C_64
	byte Z_65
	word32 edi_66
	word64 rdi_67
	word64 rdx_68
	word32 esi_69
	word64 rsi_70
	word32 ebx_71
	word32 edx_72
	call sigprocmask (retsize: 8; depth: 140)
		uses: C_55,dwLoc04_4,eax_40,ebx_50,edi_53,edx_51,esi_48,rax_41,rbx_38,rdi_52,rdx_56,rsi_57,rsp_37,SCZO_39,SZO_54,Z_44
		defs: C_64,eax_61,ebx_71,edi_66,edx_72,esi_69,rax_62,rbx_59,rdi_67,rdx_68,rsi_70,rsp_58,SCZO_60,SZO_63,Z_65
	word64 rbx_73 = (uint64) Mem0[0x000000000061B038:word32]
	word64 rax_75 = (uint64) Mem0[0x000000000061B034:word32]
	word32 ebx_74 = (word32) rbx_73
	word32 eax_76 = (word32) rax_75
	branch eax_76 == 0x00000000 l0000000000406528
// DataOut: eax ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000406528:
	signal((uint64) ebx_74, 0x0000000000000000)
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:(uint64) Mem0[0x000000000061B034:word32] rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:(uint64) Mem0[0x000000000061B038:word32] -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064CB:
	Mem123[0x000000000061B034:word32] = (word32) (uint64) (eax_76 - 0x00000001)
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:(uint64) Mem0[0x000000000061B034:word32] rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:(uint64) Mem0[0x000000000061B038:word32] -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064D9:
	word64 rsp_82
	word64 rbx_83
	byte SCZO_84
	word32 eax_85
	word64 rax_86
	byte SZO_87
	byte C_88
	byte Z_89
	word32 edi_90
	word64 rdi_91
	word64 rdx_92
	word32 esi_93
	word64 rsi_94
	word32 ebx_95
	word32 edx_96
	call raise (retsize: 8; depth: 140)
		uses: C_79,dwLoc04_4,eax_76,ebx_80,edi_66,edx_72,esi_69,rax_75,rbx_73,rdi_81,rdx_68,rsi_70,rsp_58,SCZO_60,SZO_77,Z_78
		defs: C_88,eax_85,ebx_95,edi_90,edx_96,esi_93,rax_86,rbx_83,rdi_91,rdx_92,rsi_94,rsp_82,SCZO_84,SZO_87,Z_89
	word64 rsp_103
	word64 rbx_104
	byte SCZO_105
	word32 eax_106
	word64 rax_107
	byte SZO_108
	byte C_109
	byte Z_110
	word32 edi_111
	word64 rdi_112
	word64 rdx_113
	word32 esi_114
	word64 rsi_115
	word32 ebx_116
	word32 edx_117
	call sigprocmask (retsize: 8; depth: 140)
		uses: C_100,dwLoc04_4,eax_85,ebx_95,edi_90,edx_98,esi_93,rax_86,rbx_83,rdi_102,rdx_97,rsi_101,rsp_82,SCZO_84,SZO_99,Z_89
		defs: C_109,eax_106,ebx_116,edi_111,edx_117,esi_114,rax_107,rbx_104,rdi_112,rdx_113,rsi_115,rsp_103,SCZO_105,SZO_108,Z_110
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rbx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)



word64 fn0000000000406540(word64 rcx, word64 rdx, byte sil, word64 rdi, word64 r11, word32 r14d, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r14d r15 rcx rdi rdx sil
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rax
fn0000000000406540_entry:
// DataOut: fs r11 r14d r15 rcx rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406540:
	word32 r15d_473
	byte r15b_471
	word32 edx_455
	word32 r14d_475
	word64 rbp_167 = rdi
	word64 rbx_24 = rdx
	word32 ebx_166 = (word32) rdx
	word64 rdx_32 = Mem0[rdi:word64]
	word64 r12_163 = Mem0[r15 + 0x0000000000000008:word64]
	branch sil == 0x00 l00000000004069BD
// DataOut: ebx fs r11 r12 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004069BD:
	branch Mem0[0x000000000061B129:byte] != 0x00 l00000000004069D8
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069D8:
	branch Mem0[0x000000000061B198:byte] == 0x00 l0000000000406A08
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A08:
	r14d = (word32) Mem0[rcx + 0x00000000000000B1:byte]
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069E1:
	branch Mem0[rdi + 0x00000000000000B1:byte] == 0x00 l0000000000406A20
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A20:
	r14d = 0x00000000 (alias)
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A10:
	word64 r15_888 = (uint64) Mem0[rcx + 0x0000000000000028:word32]
	r15d_473 = (word32) r15_888 (alias)
	r15b_471 = (byte) r15_888 (alias)
// DataOut: ebx fs r11 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:(word32) Mem0[rcx + 0x00000000000000B1:byte] r14:0x0000000000000000 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069EA:
	word64 r15_893 = (uint64) Mem0[rcx + 0x00000000000000A4:word32]
	r15d_473 = (word32) r15_893 (alias)
	r15b_471 = (byte) r15_893 (alias)
// DataOut: ebx fs r11 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069F7:
	word64 r14_875 = (uint64) (r14d ^ 0x00000001)
	r14d_475 = (word32) r14_875 (alias)
	r14b = (byte) r14_875 (alias)
	r12_163 = rdx_32
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r15:<invalid> rsi:0x0000000000000001 r14d:(word32) Mem0[rcx + 0x00000000000000B1:byte] r14:0x0000000000000000 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069C6:
	r12_163 = rdx_32
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406567:
	branch Mem0[0x000000000061B129:byte] != 0x00 l0000000000406580
// DataOut: ebx fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406580:
	r14d_475 = (word32) Mem0[rcx + 0x00000000000000B1:byte]
	word64 r15_842 = (uint64) Mem0[rcx + 0x00000000000000A4:word32]
	r14b = (byte) r14d_475 (alias)
	r15d_473 = (word32) r15_842 (alias)
	r15b_471 = (byte) r15_842 (alias)
	branch r14b != 0x00 l00000000004065B0
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406594:
	edx_455 = 0x0000000C (alias)
	branch (byte) fn0000000000404CD0(0x0000000C) != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:(word32) Mem0[rcx + 0x00000000000000B1:byte] r15:(uint64) Mem0[rcx + 0x00000000000000A4:word32] -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065AB:
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000C r12:<invalid> r14d:(word32) Mem0[rcx + 0x00000000000000B1:byte] r15:(uint64) Mem0[rcx + 0x00000000000000A4:word32] rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065B0:
	word64 rax_496
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l0000000000406628
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406628:
	word32 eax_630 = (word32) (uint64) ((word32) (uint64) r15d_473 & 0x0000F000)
	branch eax_630 == 0x00008000 l0000000000406868
// DataOut: eax ebx fs r11 r12 r14b r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406868:
	branch (r15d_473 & 0x00000800) == 0x00000000 l00000000004068B8
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406871:
	branch (byte) fn0000000000404CD0(0x00000010) == 0x00 l00000000004068B8
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068B8:
	branch (r15d_473 & 0x00000400) == 0x00000000 l000000000040693B
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068C1:
	branch (byte) fn0000000000404CD0(0x00000011) == 0x00 l000000000040693B
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040693B:
	rax_496 = fn0000000000404CD0(0x00000015)
	branch (byte) rax_496 == 0x00 l000000000040695C
// DataOut: ebx fs r11 r12 r15d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406949:
	branch Mem0[rdi + 0x00000000000000B8:byte] == 0x00 l000000000040695C
// DataOut: ebx fs r11 r12 r15d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040695C:
	branch (word32) (uint64) (r15d_473 & 0x00000049) == 0x00000000 l000000000040697A
// DataOut: ebx fs r11 r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406962:
	rax_496 = fn0000000000404CD0(0x0000000E)
	branch (byte) rax_496 == 0x00 l000000000040697A
// DataOut: ebx fs r11 r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:(uint64) (r15d & 0x00000049) rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040697A:
	branch Mem0[rdi + 0x0000000000000020:word64] <=u 0x0000000000000001 l00000000004065CF
// DataOut: ebx fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:(uint64) (r15d & 0x00000049) rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406985:
	rax_496 = fn0000000000404CD0(0x00000016)
	branch (byte) rax_496 == 0x00 l00000000004065CF
// DataOut: ebx fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:(uint64) (r15d & 0x00000049) rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406997:
	edx_455 = 0x00000016 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:(uint64) (r15d & 0x00000049) rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406970:
	edx_455 = 0x0000000E (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:(uint64) (r15d & 0x00000049) rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406952:
	edx_455 = 0x00000015 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068CF:
	edx_455 = 0x00000011 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040687F:
	edx_455 = 0x00000010 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040663B:
	branch eax_630 == 0x00004000 l00000000004068E0
// DataOut: eax ebx fs r11 r12 r14b r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068E0:
	branch (word32) (uint64) ((word32) (uint64) r15d_473 & 0x00000202) == 0x00000202 l00000000004069A1
// DataOut: ebx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069A1:
	edx_455 = 0x00000014 (alias)
	branch (byte) fn0000000000404CD0(0x00000014) != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x00000202) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069B8:
// DataOut: ebx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000014 r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068F3:
	branch (r15b_471 & 0x02) == 0x00 l0000000000406910
// DataOut: ebx fs r11 r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068F9:
	edx_455 = 0x00000013 (alias)
	branch (byte) fn0000000000404CD0(0x00000013) != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406910:
	edx_455 = 0x00000006 (alias)
	branch (word32) (uint64) (r15d_473 & 0x00000200) == 0x00000000 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406922:
	edx_455 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((byte) fn0000000000404CD0(0x00000012) - 0x01)) & 0xFFFFFFF4) + 0x00000012) (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000006 r12:<invalid> r14d:<invalid> r15:(uint64) (r15d & 0x00000200) rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406646:
	branch eax_630 == 0x0000A000 l0000000000406859
// DataOut: eax ebx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406859:
	edx_455 = 0x00000007 (alias)
// DataOut: ebx edx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406651:
	edx_455 = 0x00000008 (alias)
	branch eax_630 == 0x00001000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040665D:
	edx_455 = 0x00000009 (alias)
	branch eax_630 == 0x0000C000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x0000000000000008 r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406666:
	edx_455 = 0x0000000A (alias)
	branch eax_630 == 0x00006000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) dl:0x09 rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040666F:
	word64 rdx_660 = (uint64) (eax_630 != 0x00002000)
	edx_455 = rdx_660 + 0x000000000000000B + rdx_660
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) (eax & 0x0000F000) dl:0x0A rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065B9:
	rax_496 = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	word32 eax_608 = (word32) rax_496
	edx_455 = (word32) (uint64) Mem0[rax_496 * 0x00000004 + 0x00412C60:word32] (alias)
	branch edx_455 != 0x00000005 l0000000000406680
// DataOut: ebx edx fs r11 r12 r14d rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406680:
	r14b = (byte) (uint64) (r14d_475 & DPB(eax_608, edx_455 == 0x00000007, 0)) (alias)
// DataOut: ebx edx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:(uint64) Mem0[0x00412C60 + (uint64) Mem0[rdi + 0x00000000000000A0:word32] * 0x00000004:word32] r12:<invalid> r14d:<invalid> r15:<invalid> rax:(uint64) Mem0[rdi + 0x00000000000000A0:word32] rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406689:
	branch r14b == 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040668E:
	edx_455 = 0x0000000D (alias)
	branch Mem0[0x000000000061B198:byte] != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040669C:
	edx_455 = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((byte) fn0000000000404CD0(0x0000000D) - 0x01)) & 0xFFFFFFFA) + 0x0000000D) (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:0x000000000000000D r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> al:<invalid> r14:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065CF:
	word64 rax_499 = DPB(rax_496, strlen(r12_163), 0)
	word64 rbp_503 = Mem0[0x000000000061B120:word64]
	r14b = (byte) strlen(r12_163) (alias)
	word64 r15_508 = r12_163 + rax_499
	branch rbp_503 == 0x0000000000000000 l0000000000406619
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> r14:(uint64) ((word32) Mem0[rcx + 0x00000000000000B1:byte] ^ 0x00000001) rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065EA:
	rax_533 = rax_499
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065F0:
	word64 rax_533
	word64 rdx_538 = Mem0[rbp_503:word64]
	branch rax_499 <u rdx_538 l0000000000406610
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065F9:
	word64 rsi_555 = Mem0[rbp_503 + 0x0000000000000008:word64]
	word64 rdi_557 = r15_508 - rdx_538
	rax_533 = DPB(rax_533, strncmp(rdi_557, rsi_555, rdx_538), 0)
	branch strncmp(rdi_557, rsi_555, rdx_538) == 0x00000000 l00000000004068A0
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068A0:
	branch rbp_503 == 0x0000000000000000 l0000000000406619
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068A9:
	rbp_167 = rbp_503 + 0x0000000000000010
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406610:
	rbp_503 = Mem0[rbp_503 + 0x0000000000000020:word64]
	branch rbp_503 != 0x0000000000000000 l00000000004065F0
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406619:
	edx_455 = 0x00000005 (alias)
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rax:<invalid> rdi:<invalid> r14:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066B0:
	rbp_167 = ((uint64) edx_455 << 0x0000000000000004) + 6398944
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066C0:
	branch Mem0[rbp_167 + 0x0000000000000008:word64] == 0x0000000000000000 l0000000000406890
// DataOut: ebx edi fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406890:
	fn0000000000404CD0(0x00000004)
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066D0:
	branch (byte) fn0000000000404CD0(0x00000004) != 0x00 l0000000000406840
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:0x0000000000000004 rax:<invalid> rsi:<invalid> al:<invalid> r14:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406840:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066DD:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(rbp_167)
	fn0000000000406440(0x000000000061A3F0)
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> r14:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406570:
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066FF:
	word64 rbp_198
	word64 r13_187
	branch rdx == 0x0000000000000000 l00000000004067D8
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067D8:
	word64 rbx_389
	word64 rsp_390
	word64 rbp_391
	word64 rsi_392
	word32 edi_393
	word64 r8_394
	word64 r9_395
	word64 r11_396
	word64 r12_397
	word64 r14_399
	word64 r15_400
	word64 rax_401 = fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_166, rbp_167, r12_163, Mem0[0x000000000061A610:word64], r11, fs, out rbx_389, out rsp_390, out rbp_391, out rsi_392, out edi_393, out r8_394, out r9_395, out r11_396, out r12_397, out r13_187, out r14_399, out r15_400)
	Mem405[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + rax_401
	rbp_198 = rax_401
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406708:
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406732
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406711:
	word64 rax_291 = Mem0[rdx + 0x0000000000000018:word64]
	branch Mem0[rdx + 0x0000000000000020:word64] <u rax_291 + 0x0000000000000008 l0000000000406820
// DataOut: ebx fs r11 r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406820:
	word64 rsp_342
	word64 rdi_343
	word64 rsi_344
	word64 r13_346
	word64 rcx_347
	word64 rdx_349
	byte SCZO_350
	byte sil_351
	byte SZO_352
	byte C_353
	word64 r15_355
	byte Z_356
	word32 r14d_357
	word64 r14_358
	word64 rax_359
	word32 r15d_360
	word32 esi_361
	word32 ecx_362
	word32 eax_363
	word32 edx_364
	word32 ebp_366
	word32 edi_367
	byte al_368
	byte dl_369
	byte r15b_370
	byte CZ_371
	word64 r8_374
	word64 r9_375
	call _obstack_newchunk (retsize: 8; depth: 40)
		uses: al_293,C_297,CZ_39,dl_50,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_15,dwLoc14_17,dwLoc18_22,eax_292,ebp_56,ebx_25,ecx,edi_59,edx_49,esi,fs,r11,r12_46,r13_12,r14_43,r14b_41,r14d_44,r15_45,r15b_40,r15d_42,r8,r9,rax_291,rbp_55,rbx_24,rcx,rdi_341,rdx_294,rsi_340,rsp_26,SCZO_296,sil,SZO_60,Z_152
		defs: al_368,C_353,CZ_371,dl_369,eax_363,ebp_366,ebx_376,ecx_362,edi_367,edx_364,esi_361,fs_373,r11_372,r12_354,r13_346,r14_358,r14b_365,r14d_357,r15_355,r15b_370,r15d_360,r8_374,r9_375,rax_359,rbp_345,rbx_348,rcx_347,rdi_343,rdx_349,rsi_344,rsp_342,SCZO_350,sil_351,SZO_352,Z_356
	rax_291 = Mem0[rbx_24 + 0x0000000000000018:word64]
// DataOut: ebx fs r11 r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406723:
	Mem336[rax_291:word64] = Mem0[0x000000000061B018:word64]
	Mem338[rbx_24 + 0x0000000000000018:word64] = Mem336[rbx_24 + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: ebx fs r11 r12 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406732:
	word64 rsp_179
	word64 rbp_180
	word64 rsi_181
	word32 edi_182
	word64 r8_183
	word64 r9_184
	word64 r11_185
	word64 r12_186
	word64 r14_188
	word64 r15_189
	word64 rbx_178
	word64 rax_190 = fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_166, rbp_167, r12_163, Mem0[0x000000000061A610:word64], r11, fs, out rbx_178, out rsp_179, out rbp_180, out rsi_181, out edi_182, out r8_183, out r9_184, out r11_185, out r12_186, out r13_187, out r14_188, out r15_189)
	word64 rdx_192 = rax_190 + Mem0[0x000000000061B018:word64]
	Mem200[0x000000000061B018:word64] = rdx_192
	rbp_198 = rax_190
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406781
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> rcx:<invalid> dl:<invalid> edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406767:
	word64 rax_201 = Mem200[rbx_178 + 0x0000000000000018:word64]
	branch Mem200[rbx_178 + 0x0000000000000020:word64] <u rax_201 + 0x0000000000000008 l0000000000406800
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r15:<invalid> r14d:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406800:
	word64 rsp_249
	word64 rdi_250
	word64 rsi_251
	word64 rcx_254
	word64 rdx_256
	byte SCZO_257
	byte sil_258
	byte SZO_259
	byte C_260
	word64 r12_261
	word64 r15_262
	byte Z_263
	word32 r14d_264
	word64 r14_265
	word64 rax_266
	word32 r15d_267
	word32 esi_268
	word32 ecx_269
	word32 eax_270
	word32 edx_271
	word32 ebp_273
	word32 edi_274
	byte al_275
	byte dl_276
	byte r15b_277
	byte CZ_278
	word64 r11_279
	selector fs_280
	word64 r8_281
	word64 r9_282
	word32 ebx_283
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_204,C_207,CZ_158,dl_195,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_15,dwLoc14_17,dwLoc18_22,eax_203,ebp_199,ebx_166,ecx_174,edi_182,edx_194,esi_169,fs_156,r11_185,r12_186,r13_187,r14_188,r14b_160,r14d_162,r15_189,r15b_159,r15d_161,r8_183,r9_184,rax_201,rbp_198,rbx_178,rcx_205,rdi_248,rdx_192,rsi_247,rsp_179,SCZO_206,sil_168,SZO_175,Z_197
		defs: al_275,C_260,CZ_278,dl_276,eax_270,ebp_273,ebx_283,ecx_269,edi_274,edx_271,esi_268,fs_280,r11_279,r12_261,r13_253,r14_265,r14b_272,r14d_264,r15_262,r15b_277,r15d_267,r8_281,r9_282,rax_266,rbp_252,rbx_255,rcx_254,rdi_250,rdx_256,rsi_251,rsp_249,SCZO_257,sil_258,SZO_259,Z_263
	rax_201 = Mem200[rbx_178 + 0x0000000000000018:word64]
	rdx_192 = Mem200[0x000000000061B018:word64]
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r15:<invalid> r14d:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406779:
	Mem243[rax_201:word64] = rdx_192
	Mem245[rbx_178 + 0x0000000000000018:word64] = Mem243[rbx_178 + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r15:<invalid> r14d:<invalid> al:<invalid> r9:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> dl:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406781:
	word64 rsp_95 = fn0000000000406490()
	branch r14b != 0x00 l00000000004067A0
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067A0:
	fn0000000000406400()
	word64 rcx_134 = Mem0[0x000000000061B0C8:word64]
	branch (uint64) ((uint128) (uint64) r13_187 /u rcx_134) == (uint64) ((uint128) ((uint64) ((rbp_198 - 0x0000000000000001) + r13_187)) /u rcx_134) l000000000040678B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067C6:
	fn0000000000406440(0x000000000061A550)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040678B:
	word64 rsp_111 = Mem0[rsp_95 + 0x0000000000000018:word64]
	word64 rbp_113
	*rbpOut = Mem0[rsp_111 + 0x0000000000000008:word64]
	word64 rsi_116
	*rsiOut = Mem0[rsp_111 + 0x0000000000000010:word64]
	word64 rdi_120
	*rdiOut = Mem0[rsp_111 + 0x0000000000000018:word64]
	word64 rsp_122
	*rspOut = rsp_111 + 0x0000000000000020
	return Mem0[rsp_95 + 0x0000000000000008:word64]
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000406540_exit:
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14d:<invalid> r15:<invalid> al:<invalid> r9:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> cl:<invalid> r12d:<invalid> edi:<invalid> r11d:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000406A30()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406A30_entry:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A30:
	branch Mem0[0x000000000061B129:byte] == 0x00 l0000000000406A4F
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A39:
	branch (byte) fn0000000000404CD0(0x00000004) != 0x00 l0000000000406A58
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A58:
	fn0000000000406440(0x000000000061A3E0)
	fn0000000000406440(0x000000000061A420)
// DataOut: fs r11 r14d r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A75_thunk_fn0000000000406440:
	fn0000000000406440(0x000000000061A3F0)
	return
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:0x000000000061A3F0 rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A4B:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

l0000000000406A4F:
	return
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid>

fn0000000000406A30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> al:<invalid>



word64 fn0000000000406A80(word32 ecx, word64 rdx, word64 rsi, word64 rdi, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ecx fs r11d r14 r15b rdi rdx rsi
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000406A80_entry:
// DataOut: ecx edx fs r11d r14 r15b rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A80:
	word64 r12_15 = rdi
	word32 ebp_20 = (word32) rdx
	word64 rbx_200 = rsi
	word64 rsp_191 = fp - 0x0000000000000124
	word64 rax_130 = 0x0000000000000000
	branch Mem0[0x000000000061A748:word64] == 0x0000000000000000 l0000000000406ADB
// DataOut: bpl ebp fs r11d r12 r13d r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406AB8:
	rax_130 = strstr(rsi, 0x0000000000413766)
	r14 = rax_130
	branch rax_130 == 0x0000000000000000 l0000000000406ADB
// DataOut: bpl ebp fs r11d r12 r13d r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:0x0000000000000000 -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi
// LocalsOut: fp(64)

l0000000000406ACD:
	rax_130 = DPB(rax_130, strlen(rsi), 0)
	branch rax_130 <=u 0x0000000000000065 l0000000000406B20
// DataOut: bpl ebp fs r11d r12 r13d r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi
// LocalsOut: fp(64)

l0000000000406B20:
	word64 rsp_155
	word64 rsi_156
	word64 rbp_157
	word32 r13d_158
	word32 ecx_159
	word64 r13_160
	word64 r12_161
	word64 rdi_162
	word64 rdx_163
	word64 rbx_164
	byte SCZO_165
	word64 rax_166
	selector fs_167
	word32 eax_168
	byte SZO_169
	byte C_170
	byte Z_171
	word32 esi_172
	word64 r14_173
	byte CZ_174
	word32 r8d_175
	word64 r8_176
	word64 rcx_177
	word32 r9d_178
	word64 r9_179
	word32 r11d_180
	byte r15b_181
	word64 r11_182
	word64 r15_183
	word32 ebp_184
	call __mempcpy_chk (retsize: 8; depth: 300)
		uses: C_134,CZ_140,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_17,dwLoc14_23,eax_138,ebp_20,ecx,esi,fs,qwLoc1C_29,r11,r11d,r12_15,r13_9,r13d_10,r14_135,r15,r15b,r8,r8d,r9,r9d,rax_137,rbp_19,rbx_147,rcx_143,rdi_146,rdx_144,rsi_142,rsp_25,SCZO_145,SZO_132,Z_133
		defs: C_170,CZ_174,eax_168,ebp_184,ecx_159,esi_172,fs_167,r11_182,r11d_180,r12_161,r13_160,r13d_158,r14_173,r15_183,r15b_181,r8_176,r8d_175,r9_179,r9d_178,rax_166,rbp_157,rbx_164,rcx_177,rdi_162,rdx_163,rsi_156,rsp_155,SCZO_165,SZO_169,Z_171
	word64 rsi_192
	word64 rbp_193
	word32 r13d_194
	word32 ecx_195
	word64 r13_196
	word64 rdi_198
	word64 rdx_199
	byte SCZO_201
	word64 rax_202
	word32 eax_204
	byte SZO_205
	byte C_206
	byte Z_207
	word32 esi_208
	byte CZ_210
	word32 r8d_211
	word64 r8_212
	word64 rcx_213
	word32 r9d_214
	word64 r9_215
	word64 r11_218
	word64 r15_219
	call stpcpy (retsize: 8; depth: 300)
		uses: C_170,CZ_174,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_17,dwLoc14_23,eax_168,ebp_184,ecx_159,esi_172,fs_167,qwLoc1C_29,r11_182,r11d_180,r12_161,r13_160,r13d_158,r14_173,r15_183,r15b_181,r8_176,r8d_175,r9_179,r9d_178,rax_166,rbp_157,rbx_164,rcx_185,rdi_186,rdx_188,rsi_190,rsp_155,SCZO_189,SZO_169,Z_171
		defs: C_206,CZ_210,eax_204,ebp_220,ecx_195,esi_208,fs_203,r11_218,r11d_216,r12_197,r13_196,r13d_194,r14_209,r15_219,r15b_217,r8_212,r8d_211,r9_215,r9d_214,rax_202,rbp_193,rbx_200,rcx_213,rdi_198,rdx_199,rsi_192,rsp_191,SCZO_201,SZO_205,Z_207
	rax_130 = strcpy(rax_202, rsi_192 + 0x0000000000000002)
// DataOut: bpl ebp fs r11d r12 r13d r14 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> rsi:0x0000000000413766 rdi:0x0000000000413766 r14:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406ADB:
	word64 rbp_63
	word32 esi_64
	word64 rdi_65
	word64 r8_66
	word64 r9_67
	word64 r11_68
	word64 r12_69
	word64 r13_70
	word64 r14_71
	word64 r15_72
	word64 rax_73 = fn0000000000410600(rax_130, rbx_200, ebp_20, 0x00000000000003E9, r12_15, 0x00000000, r11d, r14, r15b, fs, out rbp_63, out esi_64, out rdi_65, out r8_66, out r9_67, out r11_68, out r12_69, out r13_70, out r14_71, out r15_72)
	branch (Mem0[rsp_191 + 0x0000000000000108:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000406B66
// DataOut: edi esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13:(uint64) ecx r12:rdi rbp:rdx rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rdx:<invalid> rcx:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B66:
	__stack_chk_fail()
// DataOut: edi esi fs r11 r11d r14 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> r10:<invalid> eax:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B6B_thunk_fn0000000000406B70:
	word64 rsp_117
	word64 rbp_118
	word64 r8_119
	word64 r9_120
	word64 r11_121
	word64 r12_122
	word64 r13_123
	word64 r14_124
	word64 r15_125
	return fn0000000000406B70(rbp_63, esi_64, rdi_65, r11_68, r14_71, fs, out rsp_117, out rbp_118, out r8_119, out r9_120, out r11_121, out r12_122, out r13_123, out r14_124, out r15_125)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> r10:<invalid> eax:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B07:
	word64 rsp_110 = Mem0[rsp_191 + 0x0000000000000120:word64]
	word64 rbp_112
	*rbpOut = Mem0[rsp_110 + 0x0000000000000008:word64]
	word64 rsp_116
	*rspOut = rsp_110 + 0x0000000000000018
	return rax_73
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> r10:<invalid> eax:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

fn0000000000406A80_exit:
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> r8:<invalid> rcx:<invalid> r9:<invalid> rdx:<invalid> r10:<invalid> eax:<invalid> r11:<invalid> ax:<invalid> dil:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> ebx:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> sil:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi



word64 fn0000000000406B70(word64 rbp, word32 esi, word64 rdi, word64 r11, word64 r14, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi fs r11 r11d r14 rbp rdi
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000406B70_entry:
// DataOut: edi esi fs r11 r11d r14 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406B70:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v6 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x00000000000012D0
	rax = Mem0[fs:0x00000028:word64]
	qwLoc28 = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[rdi + 0x00000000000000B0:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000406E00
// DataOut: fs r11 r11d r14 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E00:
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	r13 = fp - 0x0000000000001290
	rcx = 0x0000000000003F3F
	eax = (word32) Mem0[rax + 0x0000000000413728:byte]
	bLoc1290 = al
	r8 = 0x000000003F3F3F3F
	qwLoc128F = rax
	Mem0[rbp + 0x0000000000000009:word16] = cx
	bLoc1285 = 0x00
	branch Test(EQ,Z) l0000000000406BC2
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BA4:
	r13 = fp - 0x0000000000001290
	rdi = rdi + 0x0000000000000010
	rsi = fp - 0x0000000000001290
	fn000000000040A600(rsi, rdi)
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	branch Test(NE,Z) l0000000000406E41
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E41:
	rax = (uint64) Mem0[rbx + 0x00000000000000B4:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000407138
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:(word32) Mem0[(uint64) Mem0[rdi + 0x00000000000000A0:word32] + 0x0000000000413728:byte] r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407138:
	bLoc1286 = 0x2E
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[rdi + 0x00000000000000B4:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E50:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406BC7
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[rdi + 0x00000000000000B4:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E59:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	bLoc1286 = 0x2B
	SCZO = cond(eax - 0x00000001)
	branch Test(NE,Z) l0000000000406BD6
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[rdi + 0x00000000000000B4:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E6D:
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[0x000000000061B14C:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):0x2B -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BC2:
	bLoc1286 = 0x00
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:(word32) Mem0[(uint64) Mem0[rdi + 0x00000000000000A0:word32] + 0x0000000000413728:byte] r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BC7:
	rax = (uint64) Mem0[0x000000000061B14C:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000406E70
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E70:
	rax = Mem0[rbx + 0x0000000000000080:word64]
	rdx = Mem0[rbx + 0x0000000000000078:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[0x000000000061B14C:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BD6:
	branch Test(ULT,C) l0000000000407040
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[0x000000000061B14C:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407040:
	rax = Mem0[rbx + 0x0000000000000070:word64]
	rdx = Mem0[rbx + 0x0000000000000068:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[0x000000000061B14C:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BDC:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406E90
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[0x000000000061B14C:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E90:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[0x000000000061B14C:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406BE5:
	rax = Mem0[rbx + 0x0000000000000060:word64]
	rdx = Mem0[rbx + 0x0000000000000058:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:(uint64) Mem0[0x000000000061B14C:word32] r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BF7:
	SCZO = cond(Mem0[0x000000000061B114:byte] - 0x00)
	r12 = fp - 0x0000000000000E70
	rbp = fp - 0x0000000000000E70
	branch Test(NE,Z) l0000000000407060
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407060:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rcx = 0x0000000000413764
	branch Test(EQ,Z) l0000000000407085
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000003F3F eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l000000000040706F:
	rdi = Mem0[rbx + 0x0000000000000018:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000407085
// DataOut: dil fs r11 r11d r13 r13d r14 rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000413764 eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407078:
	rsi = fp - 0x0000000000001260
	rax = fn000000000040CD70(rsi, rdi, out r14)
	r9 = rax
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 rcx:0x0000000000413764 eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407085:
	r12 = fp - 0x0000000000000E70
	r8 = (uint64) Mem0[0x000000000061B178:word32]
	rdx = 0x0000000000000E3B
	rcx = 0x0000000000413779
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = fp - 0x0000000000000E70
	rax = 0x0000000000000000
	rdx = fp - 0x0000000000000E70
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070B0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00000000004070B0
// DataOut: al eax fs r11 r11d r12 r13 r13d r14 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:<invalid> eax:<invalid> r8:(uint64) Mem0[0x000000000061B178:word32] rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070C7:
	rcx = (uint64) eax
	rbp = rdx + 0x0000000000000002
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l00000000004070D8
// DataOut: al cl fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:(uint64) ~ecx eax:<invalid> r8:(uint64) Mem0[0x000000000061B178:word32] rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D5_1:
	eax = ecx
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:(uint64) (ecx >>u 0x00000010) eax:<invalid> r8:(uint64) Mem0[0x000000000061B178:word32] rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D8:
	branch Test(EQ,Z) l00000000004070DC
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:(uint64) (ecx >>u 0x00000010) eax:<invalid> r8:(uint64) Mem0[0x000000000061B178:word32] rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D8_2:
	rbp = rdx
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:(uint64) (ecx >>u 0x00000010) eax:<invalid> r8:(uint64) Mem0[0x000000000061B178:word32] rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070DC:
	al = al + al
	SCZO = cond(al)
	rbp = rbp - 0x03 - C
	SCZO = cond(rbp)
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:0x0000000000000001 rcx:(uint64) (ecx >>u 0x00000010) eax:<invalid> r8:(uint64) Mem0[0x000000000061B178:word32] rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406C0F:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406C8F
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> al:al * 0x02 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406C18:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rsi = 0x0000000000413764
	branch Test(NE,Z) l0000000000407288
// DataOut: fs r11 r11d r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> al:al * 0x02 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407288:
	rdi = Mem0[rbx + 0x0000000000000050:word64]
	r8 = Mem0[0x000000000061B138:word64]
	rsi = fp - 0x0000000000001260
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	rcx = 0x0000000000000200
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r14d, out r15)
	r14 = rax
// DataOut: fs r11 r11d r14 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:0x0000000000413764 rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> al:al * 0x02 r14:0x00000000CCCCCCCD r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C2B:
	r15 = (uint64) Mem0[0x000000000061B174:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	r15 = (uint64) (r15d - eax)
	SZO = cond(r15d & r15d)
	C = false
	rax = (uint64) r15d
	branch Test(LE,SZO) l0000000000406F50
// DataOut: eax fs r11 r11d r12 r13 r13d r14 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> al:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C4B:
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C60:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406C60
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C6D:
	ax = (int16) al
	rdx = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C74:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	rbp = rdx + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(NE,Z) l0000000000406F50
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406F50:
	rdx = rbp
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C8C:
	Mem0[rdx:byte] = 0x20
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> edx:<invalid> al:<invalid> r9:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406C8F:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = 0x0000000000413764
	branch Test(NE,Z) l0000000000407120
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:<invalid> al:<invalid> r9:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407120:
	rdi = Mem0[rbx + 0x0000000000000020:word64]
	rsi = rsp + 0x0000000000000070
	rax = fn000000000040CD70(rsi, rdi, out r14)
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:0x0000000000413764 r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r15:<invalid> r14:<invalid> ax:0x3764 al:0x64 r9:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406CA1:
	r9 = (uint64) Mem0[0x000000000061B170:word32]
	rdi = rbp
	Mem0[rsp:word64] = rax
	r8 = r13
	rcx = 0x0000000000413769
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	rax = 0x0000000000000000
	rdi = rbp
	rax = 0x0000000000000000
	rbp = rbp + 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(NE,Z) l00000000004070F0
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:0x00413764 r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r14:<invalid> r15:<invalid> ax:0x3764 al:0x64 r9:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:0x37 r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004070F0:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000002
	rsi = 0x0000000000000001
	rdi = 0x0000000000413771
	call fwrite_unlocked (retsize: 8; depth: 8)
	v35 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v35
	SCZO = cond(v35)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:0x0000000000000001 rcx:0x0000000000413769 eax:<invalid> r8:<invalid> rdx:0xFFFFFFFFFFFFFFFF r12:<invalid> rbp:<invalid> r9:(uint64) Mem0[0x000000000061B170:word32] r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:0xFFFFFFFF r11:<invalid> r10:<invalid> cl:0x69 ah:<invalid> r15d:<invalid> ecx:0x00413769 r14d:<invalid> dl:0xFF sil:0x01 edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406CE2:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406CEB:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406CF4:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407148
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407148:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407155:
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D01:
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D08:
	rsi = Mem0[0x000000000061A610:word64]
	rdi = r12
	rbp = rbp - r12
	rax = DPB(rax, fputs_unlocked(rdi, rsi), 0)
	v33 = Mem0[0x000000000061B018:word64] + rbp
	Mem0[0x000000000061B018:word64] = v33
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000407248
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407248:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rsi = (uint64) Mem0[0x000000000061B168:word32]
	rax = fn00000000004057B0(dl, rsi, edi, r8, r12, fs, out rsp, out rbp, out r12, out r13d, out r14)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> edx:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D2E:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000407210
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407210:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	rax = (uint64) Mem0[rbx + 0x0000000000000030:word32]
	rdi = 0x0000000000413764
	rdx = (uint64) Mem0[0x000000000061B164:word32]
	rsi = (uint64) eax
	branch Test(EQ,Z) l0000000000407238
// DataOut: eax edx fs r11 r11d r12 r8 r9 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407229:
	rdi = 0x0000000000000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407415
// DataOut: eax edx fs r11 r11d r12 r8 r9 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000413764 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:(uint64) Mem0[0x000000000061B164:word32] r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00413764 -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407415:
	rdi = (uint64) eax
	Mem0[rsp + 0x0000000000000018:word64] = rsi
	Mem0[rsp + 0x0000000000000010:word32] = edx
	rax = fn000000000040CB40(rax, rsi, edi, r8, r12, out rbx, out rsp, out rbp, out r12)
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rdi = rax
	rdx = (uint64) Mem0[rsp + 0x0000000000000010:word32]
// DataOut: edx fs r11 r11d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:(uint64) Mem0[0x000000000061B164:word32] r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000407238:
	rax = fn0000000000405700(rax, edx, rdi, fs, out rsp, out rbp, out r12, out r13d, out r14)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D3B:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l00000000004071D0
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004071D0:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rdi = (uint64) Mem0[rbx + 0x000000000000002C:word32]
	rbp = r12
	rsi = (uint64) Mem0[0x000000000061B160:word32]
	rax = fn00000000004057B0(dl, rsi, edi, r8, r12, fs, out rsp, out rbp, out r12, out r13d, out r14)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r11d r12 r13d r14 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D48:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	rbp = r12
	branch Test(NE,Z) l00000000004071F5
// DataOut: fs r11 r11d r12 r13d r14 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004071F5:
	rdi = Mem0[rbx + 0x00000000000000A8:word64]
	rdx = (uint64) Mem0[0x000000000061B16C:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rax = fn0000000000405700(rax, edx, rdi, fs, out rsp, out rbp, out r12, out r13d, out r14)
	rdi = Mem0[rbx + 0x00000000000000A8:word64]
	rdx = (uint64) Mem0[0x000000000061B16C:word32]
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rax = fn0000000000405700(rax, edx, rdi, fs, out rsp, out rbp, out r12, out r13d, out r14)
// DataOut: fs r11 r11d r12 r13d r14 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D58:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F60
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F60
// DataOut: fs r11 r11d r12 r13d r14 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406F60:
	rsi = 0x0000000000413764
// DataOut: fs r11 r11d r14 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D65:
	rax = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(EQ,Z) l00000000004072B0
	rax = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(EQ,Z) l00000000004072B0
// DataOut: fs r11 r11d r12 r13d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004072B0:
	rax = Mem0[rbx + 0x0000000000000038:word64]
	rsi = rsp + 0x0000000000000070
	rbp = 0x00000000FFFFFFFE
	r13 = (uint64) (r13d - Mem0[0x000000000061B15C:word32])
	r13 = (uint64) (r13d - Mem0[0x000000000061B158:word32])
	rdi = rax
	eax = (word32) al
	r13 = (uint64) (r13d + Mem0[0x000000000061B154:word32])
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdx = Mem0[rbx + 0x0000000000000038:word64]
	r15 = rax
	rsi = rsp + 0x0000000000000050
	r14 = (uint64) Mem0[0x000000000061B158:word32]
	rdi = rdx
	rdx = rdx >>u 0x0000000000000008
	rax = (uint64) edx
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	r8 = 0x0000000000000000
	SZO = cond(r13d & r13d)
	C = false
	r9 = rax
	branch Test(SG,S) l0000000000407328
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15b r8d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407324_1:
	r8d = r13d
// DataOut: fs r11 r11d r12 r14 r14d r15 r15b r8d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:(uint64) (r13d + Mem0[0x000000000061B154:word32]) rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:0x0000000000000000 rdx:<invalid> r12:<invalid> rbp:0x00000000FFFFFFFE r9:<invalid> dil:<invalid> r14:0x00000000CCCCCCCD r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407328:
	r8 = (uint64) (r8d + Mem0[0x000000000061B15C:word32])
	Mem0[rsp + 0x0000000000000008:word64] = r15
	Mem0[rsp:word32] = r14d
	rcx = 0x0000000000413774
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rdi = 0x00000000FFFFFFFE
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rax = 0x0000000000000000
	rax = (int64) Mem0[0x000000000061B154:word32]
	r13 = 0xFFFFFFFFFFFFFFFF + rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:(uint64) (r13d + Mem0[0x000000000061B154:word32]) rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:0x00000000FFFFFFFE r9:<invalid> dil:<invalid> r14:0x00000000CCCCCCCD r15:<invalid> r8d:r13d edx:<invalid> ebx:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406D78:
	rdi = Mem0[rbx + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rsp + 0x0000000000000070
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r14d, out r15)
	r14 = rax
	rdi = Mem0[rbx + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rsp + 0x0000000000000070
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r14d, out r15)
	r14 = rax
// DataOut: fs r11 r11d r14 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> r14:<invalid> r15:<invalid> ax:<invalid> al:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000406D9B:
	r13 = (uint64) Mem0[0x000000000061B154:word32]
	rsi = 0x0000000000000000
	SZO = cond(esi)
	C = false
	rdi = r14
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	r13 = (uint64) (r13d - eax)
	SZO = cond(r13d & r13d)
	rax = (uint64) r13d
	branch Test(LE,SZO) l0000000000406DDC
	r13 = (uint64) Mem0[0x000000000061B154:word32]
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = r14
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	r13 = (uint64) (r13d - eax)
	SZO = cond(r13d & r13d)
	C = false
	rax = (uint64) r13d
	branch Test(LE,SZO) l0000000000406DDC
// DataOut: eax fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> edx:<invalid> ebx:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DB7:
	rax = (uint64) (eax - 0x00000001)
	rdx = (uint64) eax
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:(uint64) r13d r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DC8:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406DC8
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DD5:
	ax = (int16) al
	rbp = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> r11:<invalid> r10:<invalid> al:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DDC:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	r13 = r13 + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(EQ,Z) l0000000000406E98
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406E98:
	Mem0[rbp + 0x0000000000000000:byte] = 0x20
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406E9C:
	rdi = rsp + 0x0000000000000030
	rax = localtime(rdi)
	Mem0[rbp + 0x0000000000000000:byte] = 0x01
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F80
// DataOut: eax fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0xFE r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EB8:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000407364
// DataOut: eax fs r11 r11d r12 r13 r14 r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EC1:
	rdx = Mem0[0x000000000061B180:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rdi = Mem0[0x000000000061B188:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	SCZO = cond(rsi - rdx)
	branch Test(GT,SZO) l0000000000407380
// DataOut: eax ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EE2:
	branch Test(LT,SO) l0000000000406EEC
// DataOut: eax ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EE4:
	SCZO = cond(edi - ecx)
	branch Test(SG,S) l0000000000407380
// DataOut: eax ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407380:
	rdi = 0x000000000061B180
	Mem0[rsp + 0x0000000000000010:word64] = rax
	rsp = fn000000000040AB30(eax, rdi)
	rdx = Mem0[0x000000000061B180:word64]
	r8 = Mem0[0x000000000061B188:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	rax = Mem0[rsp + 0x0000000000000010:word64]
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EEC:
	r8 = rdi
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EEF:
	rdi = rdx + 0xFFFFFFFFFF0F3D54
	SCZO = cond(rdi - rsi)
	branch Test(GE,SO) l0000000000407268
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407268:
	rdi = 0x0000000000000000
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407273:
	SCZO = cond(r8d - ecx)
	branch Test(NS,S) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0x00 r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040727C:
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000000 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0x00 r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000000 -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EFF:
	SCZO = cond(rdx - rsi)
	rdi = 0x0000000000000001
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F09:
	dil = 0x00
	branch Test(LT,SO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:0x0000000000000001 rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0x01 r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:0x00000001 -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F0E:
	rdi = (uint64) ecx
	rdi = (uint64) (edi - r8d)
	rdi = (uint64) (edi >>u 0x0000001F)
	SCZO = cond(edi)
// DataOut: ecx edi fs r11d r13 r14 r15b rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:0x00 r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F20:
	rdi = (int64) edi
	rdx = rax
	rsi = Mem0[0x0061A3D0 + rdi * 0x0000000000000008:word64]
	rdi = r13
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, r11d, r14, r15b, fs, out rsp, out rbp, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000406F6B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F6B:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F3B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F72:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(NE,Z) l0000000000407364
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407364:
	rdi = Mem0[rsp + 0x0000000000000030:word64]
	rsi = rsp + 0x0000000000000050
	rax = fn000000000040CCD0(rsi, rdi, out r14)
	r9 = rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F7F:
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F80:
	rcx = 0x0000000000413764
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F86:
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l00000000004073B1
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073B1:
	rdi = rsp + 0x0000000000000028
	Mem0[rsp + 0x0000000000000010:word64] = r9
	Mem0[rsp + 0x0000000000000028:word64] = 0x0000000000000000
	rax = localtime(rdi)
	SZO = cond(rax & rax)
	C = false
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(EQ,Z) l0000000000407403
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:(uint64) Mem0[0x000000000061A3C4:word32] rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073D3:
	rsi = Mem0[0x000000000061A3D0:word64]
	rdi = rsp + 0x0000000000000070
	rcx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = rax
	rax = fn0000000000406A80(ecx, rdx, rsi, rdi, r11d, r14, r15b, fs, out rsp, out rbp, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	SZO = cond(rax & rax)
	C = false
	r8 = (uint64) Mem0[0x000000000061A3C4:word32]
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(NE,Z) l0000000000407436
// DataOut: fs r11 r12 r13 r14d r15 r8d r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:(uint64) Mem0[0x000000000061A3C4:word32] rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> ebp:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407436:
	rdi = rsp + 0x0000000000000070
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rsi = rax
	Mem0[rsp + 0x0000000000000010:word64] = r9
	rax = fn000000000040D240(edx, rsi, rdi, fs, out ebx, out rsp, out rbp, out rsi, out rdi, out r12, out r13, out r14, out r15)
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	Mem0[0x000000000061A3C4:word32] = eax
	r8 = (uint64) eax
// DataOut: fs r11 r12 r13 r14d r15 r8d rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:(uint64) Mem0[0x000000000061A3C4:word32] rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073FA:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NS,S) l0000000000406F96
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407403:
	Mem0[0x000000000061A3C4:word32] = 0x00000000
	r8 = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F96:
	rdi = r13
	rcx = 0x0000000000413779
	rdx = 0xFFFFFFFFFFFFFFFF
	rsi = 0x0000000000000001
	rax = 0x0000000000000000
	rax = 0x0000000000000000
	rdi = r13
	rax = 0x0000000000000000
	r13 = r13 + 0x0000000000000000
	SCZO = cond(r13)
// DataOut: fs r11 r12 r13 r14d r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F3B:
	rax = rax + r13
	SCZO = cond(rax)
	r13 = r8 + 0x0000000000000001
	Mem0[rax:byte] = 0x20
	Mem0[rax + 0x0000000000000001:byte] = 0x00
// DataOut: fs r11 r12 r13 r14d r15 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> edx:<invalid> ebx:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r9d:<invalid> ecx:<invalid> r11d:<invalid> r8b:<invalid> ah:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406FBC:
	rsi = Mem0[0x000000000061A610:word64]
	r13 = r13 - r12
	rdi = r12
	rax = DPB(rax, fputs_unlocked(rdi, rsi), 0)
	rdx = 0x000000000061AFC0
	rsi = 0x0000000000000000
	rcx = r13
	rdi = rbx
	v41 = Mem0[0x000000000061B018:word64] + r13
	Mem0[0x000000000061B018:word64] = v41
	SCZO = cond(v41)
	rbx = fn0000000000406540(rcx, rdx, sil, rdi, r11, r14d, r15, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	rdx = (uint64) Mem0[rbx + 0x00000000000000A0:word32]
	rbp = rax
	SCZO = cond(edx - 0x00000006)
	branch Test(EQ,Z) l0000000000407160
// DataOut: edx fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> edx:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> al:<invalid> cl:<invalid> r14d:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> r9d:<invalid> ecx:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> r12d:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407160:
	SCZO = cond(Mem0[rbx + 0x0000000000000008:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040716B:
	rcx = Mem0[0x000000000061A610:word64]
	rdx = 0x0000000000000004
	rsi = 0x0000000000000001
	rdi = 0x000000000041377E
	call fwrite_unlocked (retsize: 8; depth: 8)
	rcx = r13 + 0x0000000000000004 + rbp
	rdx = 0x0000000000000000
	rsi = 0x0000000000000001
	rdi = rbx
	v45 = Mem0[0x000000000061B018:word64] + 0x0000000000000004
	Mem0[0x000000000061B018:word64] = v45
	SCZO = cond(v45)
	rbx = fn0000000000406540(rcx, rdx, sil, rdi, r11, r14d, r15, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	rdx = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004071B0:
	rsi = (uint64) Mem0[rbx + 0x00000000000000A4:word32]
	rdx = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = 0x0000000000000001
	al = fn0000000000405D00(edx, esi, dil, out rsp, out rsi, out rdi)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:(uint64) Mem0[0x000000000061B12C:word32] r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406FF9:
	rax = (uint64) Mem0[0x000000000061B12C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: edx fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407003:
	edi = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	rsi = (uint64) Mem0[rbx + 0x0000000000000028:word32]
	al = fn0000000000405D00(edx, esi, dil, out rsp, out rsi, out rdi)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:(uint64) Mem0[0x000000000061B12C:word32] r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> cl:<invalid> edi:<invalid> r9d:<invalid> ah:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407012:
	rax = Mem0[rsp + 0x00000000000012A8:word64]
	rax = rax ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rax)
	C = false
	branch Test(NE,Z) l000000000040745A
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040745A:
	__stack_chk_fail()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	rax = (uint64) (eax | r8d)
	dl = dl | cl
	SZO = cond(dl)
	C = false
	branch Test(NE,Z) l00000000004074B0
// DataOut: al dl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B0:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000040748F
// DataOut: al dl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B4:
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040748F:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l00000000004074C0
// DataOut: al fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074C0:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000407493
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407493:
	rcx = Mem0[rdi + 0x0000000000000040:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000040:word64] - rcx)
	rax = Mem0[rsi:word64]
	rdx = Mem0[rdi:word64]
	branch Test(GT,SZO) l00000000004074B8
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B8:
	rax = 0x00000000FFFFFFFF
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074A3:
	branch Test(LT,SO) l00000000004074C4
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074C4:
	return rax
	rax = 0x0000000000000001
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074A5:
	rsi = rdx
	rdi = rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000402550:
	call Mem0[0x000000000061A1F0:word32] (retsize: 4; depth: 4)
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> r8b:Test(EQ,Z) ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407029:
	rsp = rsp + 4792
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> r8b:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000406B70_exit:
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r11 (=> r11Out)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r8d:<invalid> r14d:<invalid> al:<invalid> dl:<invalid> edx:<invalid> dx:<invalid> esi:<invalid> edi:<invalid> cl:<invalid> ebx:<invalid> r8b:<invalid> r10:<invalid> r11:<invalid> ax:<invalid> ecx:<invalid> r9d:<invalid> ah:<invalid> r12d:<invalid> r15d:<invalid> r11d:<invalid> ebp:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DF5:
	rbp = r13
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> eax:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> r14:<invalid> r15:<invalid> edx:<invalid> ebx:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x00 edi:<invalid> -4816(fp):<invalid> -4800(fp):edx -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000407870(word64 rsi, word64 rdi, word64 r11, word32 r14d, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r14d r15 rdi rsi
// LiveOut:
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000407870_entry:
// DataOut: fs r11 r14d r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407870:
	fn0000000000406A30()
	word64 rbp_161 = rsi
	branch Mem0[0x000000000061B114:byte] != 0x00 l0000000000407970
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407970:
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000407992
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040797E:
	word64 rdi_212 = Mem0[rdi + 0x0000000000000018:word64]
	branch rdi_212 == 0x0000000000000000 l0000000000407992
// DataOut: dil fs r11 r14d r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000407987:
	word64 r14_219
	fn000000000040CD70(fp - 0x00000000000002B0, rdi_212, out r14_219)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rsi:<invalid> rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000407992:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004079A7
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079A0_1:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:0x0000000000000000 rsi:0x0000000000413779 r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079A7:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004078A4:
	branch Mem0[0x000000000061B144:byte] == 0x00 l00000000004078E0
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004078AD:
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l00000000004079C0
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079C0:
	word64 rsp_180
	word64 r8_182
	word64 r9_183
	fn000000000040BD70(0x0000000000000200, (word32) (uint64) Mem0[0x000000000061B140:word32], rsi, fp - 0x00000000000002B0, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, out rsp_180, out rbp_161, out r8_182, out r9_183, out r11, out r14d, out r15)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> rcx:0x0000000000413764 rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r14:0x00000000CCCCCCCD al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078BF:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004078D4
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> eax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078CD_1:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 rdi:<invalid> r8:<invalid> edx:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> eax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078D4:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000413779 edx:<invalid> rdi:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> eax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078E0:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000407911
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> eax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078E9:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000407900
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> eax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078F9_1:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> eax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407900:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> eax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407911:
	word64 rbp_77
	word64 rsi_78
	word64 rdi_79
	word64 r8_80
	word64 r9_81
	word64 r11_82
	word64 r12_83
	word64 r13_84
	word64 r14_85
	word64 r15_86
	word64 rsp_105
	word64 rbx_87 = fn0000000000406540(rbp_161, 0x0000000000000000, 0x00, rdi, r11, r14d, r15, fs, out rsp_105, out rbp_77, out rsi_78, out rdi_79, out r8_80, out r9_81, out r11_82, out r12_83, out r13_84, out r14_85, out r15_86)
	branch (word32) (uint64) Mem0[0x000000000061B12C:word32] == 0x00000000 l0000000000407948
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r8:<invalid> r14:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> eax:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:0x79 edi:0x00000001 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040792D:
	word64 rsi_130
	word64 rdi_131
	fn0000000000405D00((word32) (uint64) Mem0[rbx_87 + 0x00000000000000A0:word32], (word32) (uint64) Mem0[rbx_87 + 0x0000000000000028:word32], (byte) (word32) Mem0[rbx_87 + 0x00000000000000B0:byte], out rsp_105, out rsi_130, out rdi_131)
// DataOut: fs rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:(uint64) Mem0[0x000000000061B12C:word32] rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> al:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> esi:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> cl:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> edi:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407948:
	branch (Mem0[rsp_105 + 0x0000000000000298:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l00000000004079E6
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004079E6:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004079EB_thunk_fn00000000004079F0:
	fn00000000004079F0()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407962:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000407870_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> al:<invalid> eax:<invalid> edx:<invalid> esi:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> cl:<invalid> r14d:<invalid> r15:<invalid> r9:<invalid> dl:<invalid> dx:<invalid> r11:<invalid> r10:<invalid> ah:<invalid> ecx:<invalid> ax:<invalid> r15d:<invalid> r12d:<invalid> sil:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



void fn00000000004079F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax eax esp rax rsp sp spl
// Preserved:
fn00000000004079F0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004079F0:
	branch Mem0[0x000000000061B150:word32] >u 0x00000004 l0000000000407A46
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407A46:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004079F9:
	word64 rax_39 = (uint64) Mem0[0x000000000061B150:word32]
	word64 rsp_41
	byte SCZO_42
	byte CZ_43
	word64 rdi_44
	word64 rsi_45
	word64 rbp_46
	word64 rbx_47
	word32 eax_48
	word64 rax_49
	call Mem0[rax_39 * 0x00000008 + 0x00412308:word32] (retsize: 4; depth: 84)
		uses: CZ_4,dwLoc04_22,dwLoc08_25,dwLoc0C_28,dwLoc10_31,dwLoc14_33,dwLoc18_36,eax,rax_39,rbp,rbx,rdi,rsi,rsp_37,SCZO_38
		defs: CZ_43,eax_48,rax_49,rbp_46,rbx_47,rdi_44,rsi_45,rsp_41,SCZO_42
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn00000000004079F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000407EA0(word64 rcx, word32 edx, word64 rbp, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r14, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx esi fs r11 r14 r15 r8 rbp rcx rdi rsi
// LiveOut:
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000407EA0_entry:
// DataOut: edx esi fs r11 r14 r15 r8 rbp rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407EA0:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	rbp = fp - 0x0000000000000004
	rsp = fp - 0x0000000000000008
	dwLoc08 = rdi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rsi
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x0000000000000004
	r13 = (uint64) esi
	v9 = fp - 0x0000000000000010
	rsp = fp - 0x0000000000000014
	dwLoc14 = fp - 0x0000000000000010
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000390
	dwLoc0388 = edx
	rdx = rcx
	rax = Mem0[fs:0x00000028:word64]
	qwLoc3C = rax
	rax = 0x0000000000000000
	rcx = Mem0[0x000000000061B1B0:word64]
	ecx = (word32) rcx (alias)
	cl = (byte) rcx (alias)
	SCZO = cond(rcx - Mem0[0x000000000061B1B8:word64])
	Z = SCZO (alias)
	r9 = Mem0[0x000000000061B1C0:word64]
	r9d = (word32) r9 (alias)
	r9w = (word16) r9 (alias)
	branch Test(EQ,Z) l0000000000408400
// DataOut: cl fs r11 r13 r13d r14 r15 r8 r9 r9b rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408400:
	r8 = 0x00000000AAAAAAAA
	rdi = Mem0[0x000000000061B1C0:word64]
	SCZO = cond(rcx - 0x0000000000000000)
	branch Test(UGT,CZ) l0000000000408C7B
// DataOut: fs r11 r13 r13d r14 r15 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000390 rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:rdi rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040841A:
	rsi = rcx + rcx * 0x0000000000000002
	qwLoc0394 = rdx
	rsi = rsi << 0x0000000000000007
	SCZO = cond(rsi)
	rax = fn0000000000410C90(rdx, rsi, rdi, out rsp, out r8)
	v29 = Mem0[0x000000000061B1B8:word64] << 0x0000000000000001
	Mem0[0x000000000061B1B8:word64] = v29
	SCZO = cond(v29)
	Mem0[0x000000000061B1C0:word64] = rax
	r9 = rax
	rcx = Mem0[0x000000000061B1B0:word64]
	rdx = qwLoc0394
// DataOut: cl fs r11 r13 r13d r15 r8 r9 r9b rbp rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000390 rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:rdi rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> r8:0x00000000AAAAAAAA rdi:<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407EED:
	rcx = rcx + rcx * 0x0000000000000002
	rsi = 0x00000000000000C0
	rcx = rcx << 0x0000000000000006
	r14 = r9 + rcx
	SZO = cond(r14b & 0x01)
	C = false
	rdi = r14
	branch Test(NE,Z) l0000000000408A18
// DataOut: dil esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rsi:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408A18:
	Mem0[0x00000000000000C0:byte] = 0x00
	rdi = 0x00000000000000C1
	sil = 0xBF
// DataOut: dil esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x00000000000000C0 r14:<invalid> rdi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F0B:
	SZO = cond(dil & 0x02)
	C = false
	branch Test(NE,Z) l00000000004089E0
// DataOut: dil esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004089E0:
	r9 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	rsi = (uint64) (esi - 0x00000002)
	Mem0[r15 - 0x0000000000000002:word16] = r9w
	SZO = cond(dil & 0x04)
	C = false
	branch Test(EQ,Z) l0000000000407F1F
// DataOut: esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004089F9:
// DataOut: esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:0x0000000000000000 rsi:(uint64) (esi - 0x00000002) r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F15:
	SZO = cond(dil & 0x04)
	C = false
	branch Test(NE,Z) l0000000000408A00
// DataOut: esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408A00:
	Mem0[rdi:word32] = 0x00000000
	rsi = (uint64) (esi - 0x00000004)
	rdi = rdi + 0x0000000000000004
	SCZO = cond(rdi)
// DataOut: esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F1F:
	rcx = (uint64) esi
	rax = 0x0000000000000000
	rcx = (uint64) (ecx >>u 0x00000003)
	SZO = cond(sil & 0x04)
	C = false
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rcx rdi rdx rsp sil
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F2A:
	branch rcx == 0x0000000000000000 l0000000000407F2D
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rcx rdi rdx rsp sil
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F2D:
	branch Test(NE,Z) l0000000000408360
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408360:
	Mem0[rdi:word32] = 0x00000000
	rdi = rdi + 0x0000000000000004
	SZO = cond(sil & 0x02)
	C = false
	branch Test(EQ,Z) l0000000000407F3D
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408374:
// DataOut: eax esi fs r11 r13 r13d r14 r15 rax rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F33:
	SZO = cond(sil & 0x02)
	C = false
	branch Test(NE,Z) l0000000000408340
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408340:
	r8 = 0x0000000000000000
	rdi = rdi + 0x0000000000000002
	Mem0[r15 - 0x0000000000000002:word16] = r8w
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(EQ,Z) l0000000000407F46
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408355:
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:(uint64) (esi & 0x00000001) r14:<invalid> rdi:<invalid> r8:0x0000000000000000 sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F3D:
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	branch Test(NE,Z) l0000000000408338
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408338:
	Mem0[rdi:byte] = 0x00
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:(uint64) (esi & 0x00000001) r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F46:
	SCZO = cond(bLoc0388 - 0x00)
	Mem0[rsi + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r14 + 0x00000000000000A0:word32] = r13d
	branch Test(EQ,Z) l0000000000408220
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:(uint64) (esi & 0x00000001) r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408220:
	SCZO = cond(Mem0[0x000000000061B0C1:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:(uint64) (esi & 0x00000001) r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040822D:
	SCZO = cond(r13d - 0x00000003)
	branch Test(EQ,Z) l0000000000408910
// DataOut: fs r11 r13 r13d r14 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:(uint64) (esi & 0x00000001) r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408910:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408237
// DataOut: fs r11 r13 r13d r14 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:(uint64) (esi & 0x00000001) r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040891D:
	rdi = 0x0000000000000013
	qwLoc0394 = rdx
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:(uint64) (esi & 0x00000001) r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l000000000040893D:
	rdi = 0x0000000000000012
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l0000000000408956:
	rdi = 0x0000000000000014
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040896F:
// DataOut: fs r11 r13 r13d r14 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> al:<invalid> sil:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408237:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000408818
// DataOut: al eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408818:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(NE,Z) l0000000000408246
// DataOut: al eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408246:
	SZO = cond(r13d & r13d)
	C = false
	sil = Test(EQ,Z)
	branch Test(EQ,Z) l0000000000408255
// DataOut: al eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040824F:
	SCZO = cond(r13d - 0x00000006)
	branch Test(NE,Z) l0000000000408280
// DataOut: al eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408255:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
	SCZO = cond(ecx - 0x00000005)
	branch Test(EQ,Z) l0000000000408BD0
// DataOut: al eax ecx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408BD0:
	rcx = 0x0000000000000005
// DataOut: eax ecx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) Mem0[0x000000000061B110:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408264:
	SCZO = cond(Mem0[0x000000000061B198:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al eax ecx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) Mem0[0x000000000061B110:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408271:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al eax ecx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) Mem0[0x000000000061B110:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040827E:
// DataOut: al eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) Mem0[0x000000000061B110:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408280:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408288:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408825
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408825:
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
// DataOut: fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:<invalid> al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408295:
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040829E:
	r12 = 0x0000000000000000
	SCZO = cond(r13d - 0x00000005)
	branch Test(NE,Z) l00000000004081E1
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004082AB:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000003)
	branch Test(EQ,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) r12:0x0000000000000000 al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004082B8:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081E1
// DataOut: fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) r12:0x0000000000000000 al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004082C5:
	rdi = 0x000000000000000E
	qwLoc0394 = rdx
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) r12:0x0000000000000000 al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l00000000004082E5:
	rdi = 0x0000000000000010
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) r12:0x0000000000000000 al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l00000000004082FE:
	rdi = 0x0000000000000011
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) r12:0x0000000000000000 al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l0000000000408317:
	rdi = 0x0000000000000015
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) r12:0x0000000000000000 al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408330:
// DataOut: fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] sil:Test(EQ,Z) r12:0x0000000000000000 al:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407F62:
	rcx = (uint64) Mem0[0x000000000061B110:word32]
// DataOut: eax ecx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] r12:0x0000000000000000 cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F68:
	esi = (word32) Mem0[rbx:byte]
	r12 = rbx
	SCZO = cond(sil - 0x2F)
	branch Test(EQ,Z) l0000000000407F81
// DataOut: eax ecx esi fs r11 r12 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> sil:<invalid> al:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] r12:0x0000000000000000 cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F74:
	r15d = (word32) Mem0[0x00000000AAAAAAA9:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l0000000000408670
// DataOut: eax ecx esi fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> sil:<invalid> al:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408670:
	rdi = rbx
	dwLoc0398 = ecx
	dwLoc038C = esi
	qwLoc0394 = rdx
	rax = DPB(rax, strlen(rdi), 0)
	rdx = qwLoc0394
	r12 = rax
	rdi = rdx
	rax = DPB(rax, strlen(rdi), 0)
	rax = r12 + 0x0000000000000020 + rax
	rdx = qwLoc0394
	rsi = (uint64) dwLoc038C
	rcx = (uint64) dwLoc0398
	rax = rax & 0xFFFFFFFFFFFFFFF0
	rsp = rsp - rax
	rax = rsp + 0x000000000000000F
	rax = rax & 0xFFFFFFFFFFFFFFF0
	SCZO = cond(r15b - 0x2E)
	r12 = rax
	branch Test(EQ,Z) l0000000000408B30
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408B30:
	SCZO = cond(Mem0[rdx + 0x0000000000000001:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408705
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408B3A:
// DataOut: ecx fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086D2:
	rsi = rdx
// DataOut: ecx fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086D8:
	rax = rax + 0x0000000000000001
	rsi = rsi + 0x0000000000000001
	Mem0[r8 - 0x0000000000000001:byte] = r15b
	r15d = (word32) Mem0[r14:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004086D8
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086ED:
	SCZO = cond(rdx - rsi)
	rdi = rax
	branch Test(UGE,C) l0000000000408702
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:rcx r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086F5:
	SCZO = cond(Mem0[rsi - 0x0000000000000001:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408702
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086FB:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	Mem0[rdi:byte] = 0x2F
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408702:
	esi = (word32) Mem0[rbx:byte]
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rax rbp rbx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408705:
	SZO = cond(sil & sil)
	C = false
	branch Test(EQ,Z) l0000000000408724
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rax rbp rbx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040870A:
	rdx = rbx
// DataOut: ecx fs r11 r12 r13 r13d r14 rax rbp rbx rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408710:
	rax = rax + 0x0000000000000001
	rdx = rdx + 0x0000000000000001
	Mem0[rax - 0x0000000000000001:byte] = sil
	esi = (word32) Mem0[rdx:byte]
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000408710
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rax rbp rbx rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408724:
	Mem0[rax:byte] = 0x00
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F81:
	SCZO = cond(ecx - 0x00000003)
	branch Test(ULT,C) l0000000000407FFD
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F86:
	SCZO = cond(ecx - 0x00000004)
	branch Test(ULE,CZ) l0000000000407FF0
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407FF0:
	SCZO = cond(bLoc0388 - 0x00)
	branch Test(NE,Z) l00000000004088B0
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088B0:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	dwLoc0394 = ecx
	rdx = r15
	call __xstat (retsize: 8; depth: 8)
	rcx = (uint64) dwLoc0394
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SCZO = cond(ecx - 0x00000003)
	branch Test(EQ,Z) l0000000000408015
// DataOut: eax edx esi fs r11 r12 r13 r13d r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088E0:
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408B5E
// DataOut: eax edx fs r11 r12 r13 r13d r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):ecx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B5E:
	dwLoc0394 = eax
	rax = __errno_location()
	SCZO = cond(Mem0[rax:word32] - 0x00000002)
	rdx = (uint64) dwLoc0394
	al = Test(EQ,Z)
// DataOut: al eax edx fs r11 r12 r13 r13d r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):ecx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088E8:
	rax = (uint64) Mem0[0x0000000000000029:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00004000)
	al = Test(NE,Z)
// DataOut: al eax edx fs r11 r12 r13 r13d r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> sil:0x01 al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):ecx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088F9:
	SZO = cond(al & al)
	C = false
	rsi = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408015
// DataOut: eax edx esi fs r11 r12 r13 r13d r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:0x01 eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408906:
// DataOut: eax fs r11 r12 r13 r13d r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) ecx r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:<invalid> esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:0x01 eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407F8B:
	SCZO = cond(ecx - 0x00000005)
	branch Test(NE,Z) l0000000000407FFD
// DataOut: eax fs r11 r12 r13 r13d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407FFD:
	r15 = r14 + 0x0000000000000010
// DataOut: eax fs r11 r12 r13 r13d r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408001:
	rdx = r15
	rsi = r12
	rdi = 0x0000000000000001
	call __lxstat (retsize: 8; depth: 8)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = (uint64) eax
// DataOut: edx esi fs r11 r12 r13 r13d r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408015:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000407FB1
// DataOut: edx esi fs r11 r12 r13 r13d r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407F92:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	rdi = 0x0000000000000001
	rdx = r15
	call __xstat (retsize: 8; depth: 8)
	rdx = (uint64) eax
	rsi = 0x0000000000000001
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408019
// DataOut: edx esi fs r11 r12 r13 r13d r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):ecx -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408019:
	SCZO = cond(r13d - 0x00000005)
	Mem0[rsi + 0x00000000000000B0:byte] = 0x01
	branch Test(EQ,Z) l0000000000408380
	SCZO = cond(r13d - 0x00000005)
	Mem0[rsi + 0x00000000000000B0:byte] = 0x01
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040802B:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00008000)
	branch Test(EQ,Z) l0000000000408380
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x00008000)
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408380:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040838D:
	rdi = 0x0000000000000015
	dwLoc038C = esi
	dwLoc0394 = edx
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = (uint64) dwLoc0394
	rsi = (uint64) dwLoc038C
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -038C(64) Local -0394(64)

l00000000004083B7:
	r13 = Mem0[r14 + 0x0000000000000010:word64]
	SCZO = cond(r13 - Mem0[0x000000000061A678:word64])
	branch Test(EQ,Z) l0000000000408C1F
// DataOut: edx esi fs r11 r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:(uint64) Mem0[fp - 0x0000000000000004 - 0x0000000000000388:word32] r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -038C(64) Local -0394(64)

l0000000000408C1F:
	rax = __errno_location()
	rdx = (uint64) dwLoc0394
	Mem0[rax:word32] = 0x0000005F
	rsi = (uint64) dwLoc038C
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:(uint64) Mem0[fp - 0x0000000000000004 - 0x0000000000000388:word32] r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004083C8:
	dwLoc038C = esi
	dwLoc0394 = edx
	rax = __errno_location()
	rsi = (uint64) dwLoc038C
	rdx = (uint64) dwLoc0394
	Mem0[rax:word32] = 0x0000005F
	Mem0[0x000000000061A678:word64] = r13
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:(uint64) Mem0[fp - 0x0000000000000004 - 0x0000000000000388:word32] r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004083F2:
	Mem0[rsi + 0x00000000000000B8:byte] = 0x00
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:(uint64) Mem0[fp - 0x0000000000000004 - 0x0000000000000388:word32] r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040803F:
	rcx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(ecx & ecx)
	branch Test(EQ,Z) l0000000000408056
	rcx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000408056
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408049:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004080EF
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004080EF
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) Mem0[0x000000000061B150:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408056:
	rax = Mem0[0x000000000061A670:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	dwLoc0394 = edx
	branch Test(EQ,Z) l0000000000408C52
	rax = Mem0[0x000000000061A670:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	dwLoc0394 = edx
	branch Test(EQ,Z) l0000000000408C52
// DataOut: eax fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) Mem0[0x000000000061B150:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0394(64)

l0000000000408C52:
	rax = __errno_location()
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0394
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
// DataOut: edx fs r11 r12 r13 r13b r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) Mem0[0x000000000061B150:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040806D:
	SZO = cond(sil & sil)
	rsi = rsi + 0x00000000000000A8
	branch Test(EQ,Z) l0000000000408458
	SZO = cond(sil & sil)
	C = false
	rdi = r12
	rsi = rsi + 0x00000000000000A8
	branch Test(EQ,Z) l0000000000408458
// DataOut: eax fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) Mem0[0x000000000061B150:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0394(64)

l0000000000408458:
	eax = fn0000000000411840(eax, rsi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0394
	branch Test(NS,S) l0000000000408093
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) Mem0[0x000000000061B150:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408080:
	eax = fn0000000000411820(eax, rsi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0394
	branch Test(SG,S) l000000000040846B
	eax = fn0000000000411820(eax, rsi)
	SZO = cond(eax & eax)
	C = false
	rdx = (uint64) dwLoc0394
	branch Test(SG,S) l000000000040846B
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:(uint64) Mem0[0x000000000061B150:word32] r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040846B:
	dwLoc0394 = edx
	rax = __errno_location()
	rax = (uint64) Mem0[rax:word32]
	rdx = (uint64) dwLoc0394
	SCZO = cond(eax - 0x00000016)
	branch Test(EQ,Z) l000000000040848C
	dwLoc0394 = edx
	rax = __errno_location()
	rax = (uint64) Mem0[rax:word32]
	rdx = (uint64) dwLoc0394
	SCZO = cond(eax - 0x00000016)
	branch Test(EQ,Z) l000000000040848C
// DataOut: eax edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408483:
	SCZO = cond(eax - 0x00000026)
	branch Test(NE,Z) l00000000004089C0
	SCZO = cond(eax - 0x00000026)
	branch Test(NE,Z) l00000000004089C0
// DataOut: eax edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004089C0:
	SCZO = cond(eax - 0x0000005F)
	branch Test(NE,Z) l0000000000408497
// DataOut: eax edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004089C9:
// DataOut: eax edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040848C:
	rcx = Mem0[rsi + 0x0000000000000010:word64]
	Mem0[0x000000000061A670:word64] = rcx
	rcx = Mem0[rsi + 0x0000000000000010:word64]
	Mem0[0x000000000061A670:word64] = rcx
// DataOut: eax edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408497:
	SCZO = cond(eax - 0x0000005F)
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
	branch Test(EQ,Z) l00000000004089D0
// DataOut: eax edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084AB:
	SCZO = cond(eax - 0x0000003D)
	branch Test(EQ,Z) l00000000004089D0
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004089D0:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
// DataOut: edx fs r11 r12 r13 r13b r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084B4:
	Mem0[rsi + 0x00000000000000B4:word32] = 0x00000000
// DataOut: fs r11 r12
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408093:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	rsi = 0x00000000004137B1
	rdi = Mem0[0x0000000000413859:word64]
	rsi = 0x00000000004137B1
	rcx = 0x000000000000000A
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080A4:
	branch rcx == 0x0000000000000000 l00000000004080A6
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080A4_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 0x0000000000000001
	rdi = rdi + 0x0000000000000001
	rcx = rcx - 0x0000000000000001
	branch Test(NE,Z) l00000000004080A4
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080A6:
	r13b = Test(NE,Z)
// DataOut: edx fs r11 r12 r13 r13b r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080AA:
	rax = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000408830
// DataOut: edx fs r11 r12 r13 r13b r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408830:
	rax = Mem0[0x000000000061A668:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	branch Test(EQ,Z) l0000000000408B40
// DataOut: edx fs r11 r12 r13 r13b r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:(uint64) Mem0[0x000000000061B150:word32] rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B40:
	dwLoc0394 = edx
	rax = __errno_location()
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[rax:word32] = 0x0000005F
	rdx = (uint64) dwLoc0394
// DataOut: cl edx fs r11 r12 r13b r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408841:
	dwLoc038C = edx
	rax = __errno_location()
	rsi = r15
	Mem0[rax:word32] = 0x00000000
	rdi = r12
	qwLoc0394 = rax
	rax = fn0000000000409CC0(rsi)
	SZO = cond(eax & eax)
	C = false
	rcx = 0x0000000000000001
	r8 = Mem0[r13 - 0x0000000000000390:word64]
	rdx = (uint64) dwLoc038C
	branch Test(GT,SZO) l00000000004080BA
// DataOut: cl eax edx fs r11 r12 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):edx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040887E:
	rdx = (uint64) Mem0[rax:word32]
	SCZO = cond(edx - 0x00000016)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r11 r12 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:(uint64) edx rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040888A:
	SCZO = cond(edx - 0x00000026)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r11 r12 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408893:
	SCZO = cond(edx - 0x0000005F)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax fs r11 r12 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408C3B:
	rdx = Mem0[rsi + 0x0000000000000010:word64]
	rax = (uint64) (eax >>u 0x0000001F)
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
	Mem0[0x000000000061A668:word64] = rdx
	rdx = (uint64) eax
// DataOut: cl edx fs r11 r12 r13b r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040889C:
	rax = (uint64) (eax >>u 0x0000001F)
	SCZO = cond(eax)
	rdx = (uint64) eax
// DataOut: edx fs r11 r12 r13b r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:0x0000000000000001 r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:0x01 r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):edx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080B8:
	rcx = 0x0000000000000000
	SZO = cond(ecx)
	C = false
// DataOut: cl edx fs r11 r12 r13b r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r13b:Test(NE,Z) eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080BA:
	rsi = (uint64) ecx
	rax = 0x0000000000000000
	sil = sil | r13b
	SZO = cond(sil)
	C = false
	branch Test(EQ,Z) l00000000004080D9
// DataOut: cl eax edx fs r11 r12 r13b r14 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> eax:<invalid> sil:<invalid> r13b:Test(NE,Z) cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080C3:
	rcx = (uint64) (ecx ^ 0x00000001)
	r13b = r13b & cl
	SZO = cond(r13b)
	C = false
	rax = (uint64) r13d
	branch Test(EQ,Z) l00000000004080D0
// DataOut: eax edx fs r11 r12 r13d r14 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:Test(NE,Z) cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080CC_2:
	esi = r13d
// DataOut: eax edx fs r11 r12 r14 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:(uint64) r13d rcx:(uint64) (ecx ^ 0x00000001) r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080D0:
	rax = (uint64) (eax << 0x0000001F)
	rax = (uint64) (eax >> 0x0000001F)
	rax = (uint64) (eax + 0x00000002)
	SCZO = cond(eax)
// DataOut: eax edx fs r11 r12 r14 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:(uint64) r13d rcx:(uint64) (ecx ^ 0x00000001) r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080D9:
	v46 = Mem0[0x000000000061B17C:byte] | sil
	Mem0[0x000000000061B17C:byte] = v46
	SZO = cond(Mem0[0x000000000061B17C:byte])
	SZO = cond(edx & edx)
	C = false
	Mem0[rsi + 0x00000000000000B4:word32] = eax
	branch Test(NE,Z) l00000000004084BF
// DataOut: fs r11 r12 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084BF:
	rdi = r12
	rbx = fn000000000040EAB0(rdi, r11, fs, out rsp, out rbp, out r12, out r14, out r15b)
	r13 = rax
	rax = __errno_location()
	rsi = (uint64) Mem0[rax:word32]
	rdi = 0x0000000000000000
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rcx = r13
	rdx = 0x0000000000415E54
	call error (retsize: 8; depth: 8)
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084F6:
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080EF:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(EQ,Z) l0000000000408500
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r13b:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408500:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l0000000000408519
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040850C:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l000000000040862A
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408519:
	rsi = Mem0[rsi + 0x0000000000000040:word64]
	rdi = r12
	rax = fn0000000000409D20(rsi, out rbp, out rsi, out r11, out r12, out r14)
	SZO = cond(rax & rax)
	C = false
	r13 = rax
	Mem0[rsi + 0x0000000000000008:word64] = rax
	branch Test(EQ,Z) l0000000000408BDA
// DataOut: fs r11 r12 r13 r14 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408BDA:
	rdi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = 0x0000000000000005
	rsi = 0x0000000000413794
	rax = dcgettext(0x0000000000000000, 0x0000000000413794, 0x0000000000000005)
	edi = (word32) Mem0[rbp - 0x0000000000000384:byte]
	rdx = r12
	rsi = rax
	rax = fn0000000000405810(rdx, edi, r11, fs, out rbp, out rsi, out rdi, out r12, out r14, out r15b)
	r13 = Mem0[r14 + 0x0000000000000008:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(NE,Z) l0000000000408535
// DataOut: fs r12 r13 r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000FFFFFFFF rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:0x00000000FFFFFFFE r11:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408C0A:
// DataOut: fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408535:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408C0F
// DataOut: fs r12 r13 r14 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408C0F:
	rdi = r13
	rax = fn0000000000410E30(rax, rdi, out rsp, out rbp, out rsi)
	r13 = rax
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408540:
	rdi = r12
	rax = fn000000000040A2B0(rdi, qwLoc08, qwArg08, qwArg10, out rbx, out rbp, out rsi)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	rdi = r13
	branch Test(EQ,Z) l0000000000408B98
// DataOut: fs r12 r13 r14 r15 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B98:
	rax = fn0000000000410E30(rax, rdi, out rsp, out rbp, out rsi)
	r13 = rax
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408557:
	rax = DPB(rax, strlen(rdi), 0)
	rdi = r15 + 0x0000000000000002 + rax
	rax = fn0000000000410C40(rsi, rdi, out rsp)
	rcx = rax
	rax = 0x0000000000000000
	SCZO = cond(Mem0[r12 - 0x0000000000000001 + r15:byte] - 0x2F)
	rdi = rcx
	rsi = r12
	Mem0[rbp - 0x0000000000000390:word64] = rcx
	al = Test(NE,Z)
	r15 = r15 + rax
	SCZO = cond(r15)
	rdx = r15
	call stpncpy (retsize: 8; depth: 8)
	rsi = r13
	rdi = rax
	rax = strcpy(rdi, rsi)
	rcx = Mem0[rbp - 0x0000000000000390:word64]
	r13 = rcx
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085A1:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085A6:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000001)
	branch Test(ULE,CZ) l0000000000408B80
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B80:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B8D:
// DataOut: eax fs r13 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085B3:
	rdx = rbp - 0x0000000000000380
	rsi = r13
	rdi = 0x0000000000000001
	call __xstat (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000408607
// DataOut: fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085CB:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	Mem0[rsi + 0x00000000000000B1:byte] = 0x01
	rax = (uint64) Mem0[rbp - 0x0000000000000368:word32]
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085E2:
	rdx = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085EC:
	rdx = (uint64) eax
	rdx = (uint64) (edx & 0x0000F000)
	SCZO = cond(edx - 0x00004000)
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:(uint64) Mem0[0x000000000061B150:word32] rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085FC:
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408600:
	Mem0[rsi + 0x00000000000000A4:word32] = eax
// DataOut: fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> al:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408607:
	rdi = r13
	free(rdi)
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000F000)
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408623:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040862A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000006
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408103:
	SCZO = cond(eax - 0x00004000)
	branch Test(EQ,Z) l0000000000408978
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408978:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	branch Test(EQ,Z) l00000000004089A8
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408981:
	SCZO = cond(Mem0[0x000000000061B10D:byte] - 0x00)
	branch Test(NE,Z) l00000000004089A8
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004089A8:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000003
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040898A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000009
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040810E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000005
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408120:
	SZO = cond(r13d & r13d)
	C = false
	r12 = Mem0[r14 + 0x0000000000000050:word64]
	branch Test(EQ,Z) l0000000000408132
// DataOut: eax fs r12 r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408129:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081A8
// DataOut: eax fs r12 r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408132:
	r8 = Mem0[0x000000000061B138:word64]
	rdx = (uint64) Mem0[0x000000000061B140:word32]
	r15 = r13 - 0x00000000000002D0
	rcx = 0x0000000000000200
	rdi = r12
	rsi = r15
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r14d, out r15)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B174:word32])
	branch Test(LE,SZO) l000000000040816E
// DataOut: eax fs r11d r12 r14 r14d r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> al:<invalid> sil:<invalid> eax:<invalid> r11:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> cl:<invalid> bpl:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408168:
	Mem0[0x000000000061B174:word32] = eax
// DataOut: eax fs r11d r12 r14 r14d r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040816E:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(NE,Z) l00000000004081A8
// DataOut: eax fs r11d r12 r13 r13d r14 r14d r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040817A:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000408B10
// DataOut: eax fs r11d r12 r14 r14d r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B10:
	rdi = (uint64) Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rbx, rbp, rsi, edi, r8, r11d, r12, r14, fs, out rsp, out rbp, out rsi, out r8, out r9, out r12, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B168:word32])
	branch Test(LE,SZO) l0000000000408187
// DataOut: eax fs r11d r12 r14 r14d r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408B25:
	Mem0[0x000000000061B168:word32] = eax
// DataOut: eax fs r11d r12 r14 r14d r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408187:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A90
// DataOut: eax fs r11d r12 r14 r14d r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408A90:
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	r13 = (uint64) Mem0[r14 + 0x0000000000000030:word32]
	branch Test(EQ,Z) l0000000000408BA8
// DataOut: fs r11d r12 r13d r14 r14d r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408BA8:
	rdi = (uint64) r13d
	rax = fn000000000040CB40(rax, rsi, edi, r8, r12, out rbx, out rsp, out rbp, out r12)
	SZO = cond(rax & rax)
	C = false
	rdi = rax
	branch Test(EQ,Z) l0000000000408AA1
// DataOut: fs r11d r12 r13d r14 r14d r15 r15d r8 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000408BBC:
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	rdx = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408BCA
// DataOut: eax edx fs r11d r12 r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408BC7_1:
	edx = eax
// DataOut: eax edx fs r11d r12 r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408BCA:
// DataOut: eax edx fs r11d r12 r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AA1:
	rdx = 0x0000000000000015
	r8 = (uint64) r13d
	rcx = 0x000000000041375A
	rsi = 0x0000000000000001
	rdi = r15
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rax = 0x0000000000000000
	rdx = r15
// DataOut: fs r11d r12 r14 r14d r15d r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AC0:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000408AC0
// DataOut: al eax edx fs r11d r12 r14 r14d r15d r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AD7:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000408AE4
// DataOut: al cl edx fs r11d r12 r14 r14d r15d r8 rbp rbx rdx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AE1_1:
	eax = ecx
// DataOut: al edx fs r11d r12 r14 r14d r15d r8 rbp rbx rdx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AE4:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000408AEC
// DataOut: al ecx edx fs r11d r12 r14 r14d r15d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AE8_2:
	rdx = rcx
// DataOut: al edx fs r11d r12 r14 r14d r15d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AEC:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = (uint64) (edx - r15d)
	SCZO = cond(edx)
// DataOut: eax edx fs r11d r12 r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:0x0000000000000001 r14:<invalid> rdi:<invalid> r8:(uint64) r13d esi:0x00000001 r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:0x01 ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AF5:
	SCZO = cond(Mem0[0x000000000061B164:word32] - edx)
	branch Test(GE,SO) l0000000000408194
// DataOut: eax edx fs r11d r12 r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B01:
	Mem0[0x000000000061B164:word32] = edx
// DataOut: eax fs r11d r12 r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408194:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A70
// DataOut: eax fs r11d r12 r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408A70:
	rdi = (uint64) Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(rbx, rbp, rsi, edi, r8, r11d, r12, r14, fs, out rsp, out rbp, out rsi, out r8, out r9, out r12, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B160:word32])
	branch Test(LE,SZO) l00000000004081A1
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408A85:
	Mem0[0x000000000061B160:word32] = eax
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004081A1:
	r13 = (uint64) Mem0[0x000000000061B150:word32]
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> ecx:<invalid> r9d:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004081A8:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081C9
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004081B1:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	rax = DPB(rax, strlen(rdi), 0)
	SCZO = cond(eax - Mem0[0x000000000061B16C:word32])
	branch Test(GT,SZO) l0000000000408730
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408730:
	SZO = cond(r13d & r13d)
	C = false
	Mem0[0x000000000061B16C:word32] = eax
	branch Test(NE,Z) l00000000004081D2
// DataOut: fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004081C9:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040873F
// DataOut: fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040873F:
	rdi = Mem0[rsi + 0x0000000000000020:word64]
	rsi = rbp - 0x00000000000002F0
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	SCZO = cond(eax - Mem0[0x000000000061B170:word32])
	branch Test(LE,SZO) l0000000000408765
	rdi = Mem0[rsi + 0x0000000000000020:word64]
	rsi = rbp - 0x00000000000002F0
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	SCZO = cond(eax - Mem0[0x000000000061B170:word32])
	branch Test(LE,SZO) l0000000000408765
// DataOut: eax fs r13 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040875F:
	Mem0[0x000000000061B170:word32] = eax
	Mem0[0x000000000061B170:word32] = eax
// DataOut: fs r13 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408765:
	rax = (uint64) Mem0[rsi + 0x0000000000000028:word32]
	rax = (uint64) (eax & 0x0000B000)
	SCZO = cond(eax - 0x00002000)
	branch Test(NE,Z) l0000000000408A30
// DataOut: fs r13 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408A30:
	rdi = Mem0[rsi + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rbp - 0x00000000000002D0
	rdx = (uint64) Mem0[0x000000000061B134:word32]
	rcx = 0x0000000000000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r14d, out r15)
	rsi = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408A68:
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> sil:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408779:
	rax = Mem0[rsi + 0x0000000000000038:word64]
	r15 = r13 - 0x00000000000002D0
	rsi = r15
	rdi = rax
	rax = rax >>u 0x0000000000000008
	rdi = rdi >>u 0x0000000000000020
	rax = (uint64) (eax & 0x00000FFF)
	rdi = (uint64) (edi & 0xFFFFF000)
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	SCZO = cond(eax - Mem0[0x000000000061B15C:word32])
	branch Test(LE,SZO) l00000000004087BA
// DataOut: eax fs r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087B4:
	Mem0[0x000000000061B15C:word32] = eax
// DataOut: fs r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:(uint64) Mem0[0x000000000061B150:word32] - 0x00000000000002D0 r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:(uint64) Mem0[0x000000000061B150:word32] - 0x00000000000002D0 r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087BA:
	rax = Mem0[rsi + 0x0000000000000038:word64]
	rsi = r15
	rdi = rax
	eax = (word32) al
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	rdi = (uint64) (edi | eax)
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	rdx = (uint64) Mem0[0x000000000061B158:word32]
	SCZO = cond(eax - edx)
	branch Test(LE,SZO) l00000000004087F0
// DataOut: eax edx fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:(uint64) Mem0[0x000000000061B150:word32] - 0x00000000000002D0 r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:(uint64) Mem0[0x000000000061B150:word32] - 0x00000000000002D0 r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087E8:
	Mem0[0x000000000061B158:word32] = eax
	rdx = (uint64) eax
// DataOut: edx fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:(uint64) Mem0[0x000000000061B158:word32] rax:<invalid> rcx:<invalid> r9:<invalid> rsi:(uint64) Mem0[0x000000000061B150:word32] - 0x00000000000002D0 r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:(uint64) Mem0[0x000000000061B150:word32] - 0x00000000000002D0 eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087F0:
	rax = (uint64) Mem0[0x000000000061B15C:word32]
	eax = rdx + 0x0000000000000002 + rax
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:(uint64) Mem0[0x000000000061B150:word32] rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:(uint64) Mem0[0x000000000061B150:word32] - 0x00000000000002D0 r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:(uint64) Mem0[0x000000000061B150:word32] - 0x00000000000002D0 eax:<invalid> dil:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408806:
	Mem0[0x000000000061B154:word32] = eax
// DataOut: fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> dil:<invalid> sil:<invalid> dl:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004081D2:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408640
// DataOut: fs r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408640:
	rdi = Mem0[rsi + 0x0000000000000018:word64]
	rsi = rbp - 0x00000000000002D0
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	SCZO = cond(eax - Mem0[0x000000000061B178:word32])
	branch Test(LE,SZO) l00000000004081E1
// DataOut: eax fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408664:
	Mem0[0x000000000061B178:word32] = eax
// DataOut: fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> eax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> sil:<invalid> ecx:<invalid> r14d:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407FB1:
	rdi = 0x0000000000000000
	rdx = 0x0000000000000005
	rsi = 0x0000000000413783
	rax = dcgettext(0x0000000000000000, 0x0000000000413783, 0x0000000000000005)
	r15 = (uint64) Mem0[r13 - 0x0000000000000384:word32]
	rdx = r12
	rsi = rax
	r12 = 0x0000000000000000
	SZO = cond(r12d)
	C = false
	edi = (word32) r15b
	rax = fn0000000000405810(rdx, edi, r11, fs, out rbp, out rsi, out rdi, out r12, out r14, out r15b)
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004081F4
// DataOut: fs r14 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407FE4:
// DataOut: fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> esi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> eax:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> ecx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004081E1:
	rdi = rbx
	rax = fn0000000000410E30(rax, rdi, out rsp, out rbp, out rsi)
	v43 = Mem0[0x000000000061B1B0:word64] + 0x0000000000000001
	Mem0[0x000000000061B1B0:word64] = v43
	SCZO = cond(v43)
	Mem0[rsi:word64] = rax
	rdi = rbx
	rax = fn0000000000410E30(rax, rdi, out rsp, out rbp, out rsi)
	v47 = Mem0[0x000000000061B1B0:word64] + 0x0000000000000001
	Mem0[0x000000000061B1B0:word64] = v47
	SCZO = cond(v47)
	Mem0[rsi:word64] = rax
// DataOut: fs r14 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> sil:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> ah:<invalid> dx:<invalid> dl:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> r11d:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004081F4:
	rbx = Mem0[rbp - 0x0000000000000038:word64]
	rbx = rbx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rbx)
	C = false
	rax = r12
	branch Test(NE,Z) l0000000000408C76
// DataOut: r14 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> r11d:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408C76:
	__stack_chk_fail()
// DataOut: r14 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> r11d:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408C7B:
	fn0000000000410E50()
	rax = (uint64) Mem0[rdi + 0x00000000000000A0:word32]
	r8 = (uint64) Mem0[r14 + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	rdx = (uint64) (edx | r8d)
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0000000000408CE8
// DataOut: al dl rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rsi:<invalid> r14:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> r11d:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// Terminates process

l0000000000408CE8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l0000000000408CAF
// DataOut: al dl rdi rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx | r8d) -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CEC:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx | r8d) -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CAF:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408CC0
// DataOut: dl rdi rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx | r8d) -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CB3:
	SZO = cond(dl & dl)
	C = false
	rax = 0x0000000000000001
	branch Test(EQ,Z) l0000000000408CC0
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx | r8d) -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CC0:
	rcx = Mem0[rsi + 0x0000000000000068:word64]
	SCZO = cond(Mem0[rdi + 0x0000000000000068:word64] - rcx)
	rax = Mem0[rdi + 0x0000000000000070:word64]
	rdx = Mem0[rsi + 0x0000000000000070:word64]
	branch Test(GT,SZO) l0000000000408CF0
// DataOut: eax edx rdi rsi
// DataOut (flags): SO
// SymbolicIn: rax:<invalid> r8:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx | r8d) -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CF0:
	rax = 0x00000000FFFFFFFF
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CD2:
	branch Test(LT,SO) l0000000000408D00
// DataOut: eax edx rdi rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408D00:
	rax = 0x0000000000000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CD4:
	rdx = (uint64) (edx - eax)
	SCZO = cond(edx)
	branch Test(NE,Z) l0000000000408D06
// DataOut: edx rdi rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:<invalid> rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408D06:
	rax = (uint64) edx
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx - eax) rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CD8:
	rsi = Mem0[rsi:word64]
	rdi = Mem0[rdi:word64]
// DataOut:
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx - eax) rcx:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CDB_thunk_fn0000000000405020:
	fn0000000000405020(qwArg00)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx - eax) rcx:<invalid> rsi:<invalid> rdi:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CBC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rax:0x0000000000000001 r8:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> r8b:Test(EQ,Z) rdx:(uint64) (edx | r8d) -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040820A:
	rsp = rbp - 0x0000000000000028
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> r8:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> r11d:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

fn0000000000407EA0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r8:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rsp:<invalid> rbp:<invalid> r13:<invalid> rbx:<invalid> r9:<invalid> r14:<invalid> eax:<invalid> r12:<invalid> esi:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8d:<invalid> r11:<invalid> ebp:<invalid> sil:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> ah:<invalid> ecx:<invalid> r14d:<invalid> bpl:<invalid> r11d:<invalid> dil:<invalid> r9d:<invalid> r13b:<invalid> -920(fp):ecx -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407F2A_1:
	Mem0[rdi:word64] = 0x0000000000000000
	rdi = rdi + 0x0000000000000008
	rcx = rcx - 0x0000000000000001
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rcx rdi rdx rsp sil
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13:(uint64) esi rbx:<invalid> rdx:rcx rax:0x0000000000000000 rcx:<invalid> r9:<invalid> rsi:<invalid> r14:<invalid> rdi:<invalid> sil:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)



void fn0000000000409750(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000409750_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000409750_entry:
// DataOut: edi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409750:
	word64 rbx_10 = (uint64) edi
	word32 ebx_11 = (word32) rbx_10
	branch edi == 0x00000000 l0000000000409794
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409794:
	dcgettext(0x0000000000000000, 0x0000000000413D88, 0x0000000000000005)
	word64 rbp_59 = Mem0[0x000000000061A610:word64]
	word64 rax_63 = dcgettext(0x0000000000000000, 0x0000000000413DB0, 0x0000000000000005)
	word64 rax_66 = DPB(rax_63, fputs_unlocked(rax_63, rbp_59), 0)
	word64 rbp_67 = Mem0[0x000000000061A610:word64]
	word64 rax_71 = dcgettext(0x0000000000000000, 0x0000000000413E40, 0x0000000000000005)
	word64 rax_74 = DPB(rax_71, fputs_unlocked(rax_71, rbp_67), 0)
	word64 rbp_75 = Mem0[0x000000000061A610:word64]
	word64 rax_79 = dcgettext(0x0000000000000000, 0x0000000000413E90, 0x0000000000000005)
	word64 rax_82 = DPB(rax_79, fputs_unlocked(rax_79, rbp_75), 0)
	word64 rbp_83 = Mem0[0x000000000061A610:word64]
	word64 rax_87 = dcgettext(0x0000000000000000, 0x0000000000413FA0, 0x0000000000000005)
	word64 rax_90 = DPB(rax_87, fputs_unlocked(rax_87, rbp_83), 0)
	word64 rbp_91 = Mem0[0x000000000061A610:word64]
	word64 rax_95 = dcgettext(0x0000000000000000, 0x00000000004141E8, 0x0000000000000005)
	word64 rax_98 = DPB(rax_95, fputs_unlocked(rax_95, rbp_91), 0)
	word64 rbp_99 = Mem0[0x000000000061A610:word64]
	word64 rax_103 = dcgettext(0x0000000000000000, 0x0000000000414398, 0x0000000000000005)
	word64 rax_106 = DPB(rax_103, fputs_unlocked(rax_103, rbp_99), 0)
	word64 rbp_107 = Mem0[0x000000000061A610:word64]
	word64 rax_111 = dcgettext(0x0000000000000000, 0x0000000000414540, 0x0000000000000005)
	word64 rax_114 = DPB(rax_111, fputs_unlocked(rax_111, rbp_107), 0)
	word64 rbp_115 = Mem0[0x000000000061A610:word64]
	word64 rax_119 = dcgettext(0x0000000000000000, 0x0000000000414580, 0x0000000000000005)
	word64 rax_122 = DPB(rax_119, fputs_unlocked(rax_119, rbp_115), 0)
	word64 rbp_123 = Mem0[0x000000000061A610:word64]
	word64 rax_127 = dcgettext(0x0000000000000000, 0x0000000000414670, 0x0000000000000005)
	word64 rax_130 = DPB(rax_127, fputs_unlocked(rax_127, rbp_123), 0)
	word64 rbp_131 = Mem0[0x000000000061A610:word64]
	word64 rax_135 = dcgettext(0x0000000000000000, 0x0000000000414780, 0x0000000000000005)
	word64 rax_138 = DPB(rax_135, fputs_unlocked(rax_135, rbp_131), 0)
	word64 rbp_139 = Mem0[0x000000000061A610:word64]
	word64 rax_143 = dcgettext(0x0000000000000000, 0x0000000000414928, 0x0000000000000005)
	word64 rax_146 = DPB(rax_143, fputs_unlocked(rax_143, rbp_139), 0)
	word64 rbp_147 = Mem0[0x000000000061A610:word64]
	word64 rax_151 = dcgettext(0x0000000000000000, 0x0000000000414AC0, 0x0000000000000005)
	word64 rax_154 = DPB(rax_151, fputs_unlocked(rax_151, rbp_147), 0)
	word64 rbp_155 = Mem0[0x000000000061A610:word64]
	word64 rax_159 = dcgettext(0x0000000000000000, 0x0000000000414C28, 0x0000000000000005)
	word64 rax_162 = DPB(rax_159, fputs_unlocked(rax_159, rbp_155), 0)
	word64 rbp_163 = Mem0[0x000000000061A610:word64]
	word64 rax_167 = dcgettext(0x0000000000000000, 0x0000000000414DA0, 0x0000000000000005)
	word64 rax_170 = DPB(rax_167, fputs_unlocked(rax_167, rbp_163), 0)
	word64 rbp_171 = Mem0[0x000000000061A610:word64]
	word64 rax_175 = dcgettext(0x0000000000000000, 0x0000000000414F58, 0x0000000000000005)
	word64 rax_178 = DPB(rax_175, fputs_unlocked(rax_175, rbp_171), 0)
	word64 rbp_179 = Mem0[0x000000000061A610:word64]
	word64 rax_183 = dcgettext(0x0000000000000000, 0x0000000000415020, 0x0000000000000005)
	word64 rax_186 = DPB(rax_183, fputs_unlocked(rax_183, rbp_179), 0)
	word64 rbp_187 = Mem0[0x000000000061A610:word64]
	word64 rax_191 = dcgettext(0x0000000000000000, 0x00000000004151F0, 0x0000000000000005)
	word64 rax_194 = DPB(rax_191, fputs_unlocked(rax_191, rbp_187), 0)
	word64 rbp_195 = Mem0[0x000000000061A610:word64]
	word64 rax_199 = dcgettext(0x0000000000000000, 0x00000000004153F0, 0x0000000000000005)
	word64 rax_202 = DPB(rax_199, fputs_unlocked(rax_199, rbp_195), 0)
	word64 rbp_203 = Mem0[0x000000000061A610:word64]
	word64 rax_207 = dcgettext(0x0000000000000000, 0x0000000000415480, 0x0000000000000005)
	word64 rax_210 = DPB(rax_207, fputs_unlocked(rax_207, rbp_203), 0)
	word64 rbp_211 = Mem0[0x000000000061A610:word64]
	word64 rax_215 = dcgettext(0x0000000000000000, 0x00000000004155E8, 0x0000000000000005)
	word64 rax_218 = DPB(rax_215, fputs_unlocked(rax_215, rbp_211), 0)
	word64 rbp_219 = Mem0[0x000000000061A610:word64]
	word64 rax_223 = dcgettext(0x0000000000000000, 0x0000000000415748, 0x0000000000000005)
	word64 rax_226 = DPB(rax_223, fputs_unlocked(rax_223, rbp_219), 0)
	word64 rbp_227 = Mem0[0x000000000061A610:word64]
	word64 rax_231 = dcgettext(0x0000000000000000, 0x0000000000415778, 0x0000000000000005)
	word64 rax_234 = DPB(rax_231, fputs_unlocked(rax_231, rbp_227), 0)
	word64 rbp_235 = Mem0[0x000000000061A610:word64]
	word64 rax_239 = dcgettext(0x0000000000000000, 0x00000000004157B0, 0x0000000000000005)
	word64 rax_242 = DPB(rax_239, fputs_unlocked(rax_239, rbp_235), 0)
	word64 rbp_243 = Mem0[0x000000000061A610:word64]
	word64 rax_247 = dcgettext(0x0000000000000000, 0x0000000000415850, 0x0000000000000005)
	word64 rax_250 = DPB(rax_247, fputs_unlocked(rax_247, rbp_243), 0)
	word64 rbp_251 = Mem0[0x000000000061A610:word64]
	word64 rax_258 = dcgettext(0x0000000000000000, 0x0000000000415970, 0x0000000000000005)
	word64 rax_261 = DPB(rax_258, fputs_unlocked(rax_258, rbp_251), 0)
	word64 rsi_263
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_263)
	dcgettext(0x0000000000000000, 0x00000000004137BB, 0x0000000000000005)
	dcgettext(0x0000000000000000, 0x00000000004137E8, 0x0000000000000005)
	word64 rbp_283 = Mem0[0x000000000061A610:word64]
	word64 rax_287 = dcgettext(0x0000000000000000, 0x0000000000415A30, 0x0000000000000005)
	word64 rax_290 = DPB(rax_287, fputs_unlocked(rax_287, rbp_283), 0)
	word64 rsp_296
	word64 rbp_297
	word32 edx_298
	word64 rdx_299
	word64 rbx_300
	word32 edi_302
	byte SCZO_303
	byte SZO_304
	byte C_305
	byte Z_306
	word32 esi_307
	word64 rsi_308
	word64 rdi_309
	word64 rax_310
	word64 rcx_311
	word32 eax_312
	word32 ecx_313
	call setlocale (retsize: 8; depth: 24)
		uses: C_294,dwLoc04_4,dwLoc08_8,eax_291,ebx_11,ecx,edi_254,edx,esi,rax_290,rbp_283,rbx_10,rcx_278,rdi_295,rdx_284,rsi_292,rsp_12,SCZO,SZO_293,Z_14
		defs: C_305,eax_312,ebx_301,ecx_313,edi_302,edx_298,esi_307,rax_310,rbp_297,rbx_300,rcx_311,rdi_309,rdx_299,rsi_308,rsp_296,SCZO_303,SZO_304,Z_306
	branch rax_310 == 0x0000000000000000 l0000000000409BC8
// DataOut: eax ebx rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BB2:
	word64 rax_337 = DPB(rax_310, strncmp(rax_310, 0x000000000041380A, 0x0000000000000003), 0)
	branch strncmp(rax_310, 0x000000000041380A, 0x0000000000000003) != 0x00000000 l0000000000409BFF
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BFF:
	word64 rsi_343
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_343)
	dcgettext(0x0000000000000000, 0x0000000000415A70, 0x0000000000000005)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:0x0000000000000003 rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:0x000000000041380A rax:<invalid> rcx:<invalid> edx:0x00000003 ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BC8:
	word64 rsi_320
	fn000000000040A390(Mem0[0x000000000061B200:word64], out rsi_320)
	dcgettext(0x0000000000000000, 0x0000000000415AB8, 0x0000000000000005)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409768:
	dcgettext(0x0000000000000000, 0x0000000000413D60, 0x0000000000000005)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:0x0000000000000005 rbx:(uint64) edi rbp:<invalid> -8(fp):rbx -4(fp):rbp

l000000000040978D:
	exit((uint64) ebx_11)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rdx:<invalid> rbx:(uint64) edi rbp:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000409CC0(word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: eax rax
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn0000000000409CC0_entry:
// DataOut: fs r11 r12 r13 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409CC0:
	word64 rax_6 = (uint64) ((word32) (uint64) Mem0[rsi + 0x0000000000000018:word32] & 0x0000F000)
	word32 eax_7 = (word32) rax_6
	branch eax_7 == 0x0000A000 l0000000000409D10
// DataOut: eax fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D10:
	return 0x0000000000000000
// DataOut: eax fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:(uint64) (eax & 0x0000F000)

l0000000000409CCF:
	word64 rsp_26
	word32 eax_27
	word64 rsi_28
	byte SZO_30
	byte C_31
	byte SCZO_32
	byte Z_33
	byte S_34
	byte al_35
	word64 rax_29
	call acl_extended_file (retsize: 8; depth: 16)
		uses: al_8,C,eax_7,rax_6,rsi,rsp_21,S,SCZO_22,SZO,Z_10
		defs: al_35,C_31,eax_27,rax_29,rsi_28,rsp_26,S_34,SCZO_32,SZO_30,Z_33
	branch eax_27 < 0x00000000 l0000000000409CE8
// DataOut: eax fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:(uint64) (eax & 0x0000F000)
// LocalsOut: fp(64)

l0000000000409CE8:
	word32 eax_48 = (word32) (uint64) Mem0[__errno_location():word32]
	branch eax_48 == 0x0000005F l0000000000409D18
// DataOut: eax fs r11 r12 r13 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF4:
	branch eax_48 == 0x00000026 l0000000000409D18
// DataOut: eax fs r11 r12 r13 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF9:
	branch eax_48 == 0x00000016 l0000000000409D18
// DataOut: eax fs r11 r12 r13 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409D18:
	return 0x0000000000000000
// DataOut: eax fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

l0000000000409CFE:
	rax_29 = (uint64) -(word32) (eax_48 != 0x00000010)
// DataOut: eax fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CDC:
	return rax_29
// DataOut: eax fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> al:<invalid> eax:<invalid>

fn0000000000409CC0_exit:
// DataOut: eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> al:<invalid> eax:<invalid>



word64 fn0000000000409D20(word64 rsi, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: r11 r12 r14 rax rbp rsi
// Trashed: SCZO ah al ax bp bpl dh di dil dl dx eax ebp edi edx esi esp r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000409D20_entry:
	*r12Out = r12
	*r11Out = r11
// DataOut: fs r11 r12 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D20:
	word64 r14_11
	*r14Out = 0x00000000FFFFFFFF
	word64 rbx_157 = 0x0000000000000401
	branch rsi >u 0x0000000000000400 l0000000000409D59
// DataOut: fs r11 r12 r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D55_1:
	rbx_157 = rsi + 0x0000000000000001
// DataOut: fs r11 r12 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:0x0000000000000401 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D59:
// DataOut: fs r11 r12 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D60:
	branch malloc(rbx_157) == 0x0000000000000000 l0000000000409DAB
// DataOut: fs r11 r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D70:
	word64 rsp_149
	word64 rdi_150
	word64 rsi_151
	word64 rax_152
	word64 r15_153
	word64 r14_154
	word64 rbp_155
	word64 r13_156
	word32 ebx_158
	byte SCZO_159
	byte CZ_160
	byte SZO_161
	byte C_162
	byte Z_163
	word64 rdx_164
	word64 r12_165
	byte S_166
	word32 eax_167
	word32 edx_168
	word64 r11_169
	call readlink (retsize: 8; depth: 56)
		uses: C_55,CZ_43,dwLoc04_4,dwLoc08_10,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_23,dwLoc24,eax_52,ebx_45,edx_42,qwLoc08,qwLoc10,qwLoc18,qwLoc30,r11_44,r12_40,r13_143,r14_37,r15_38,rax_144,rbp_56,rbx_145,rdi_148,rdx_146,rsi_147,rsp_49,S_39,SCZO_46,SZO_53,Z_54
		defs: C_162,CZ_160,eax_167,ebx_158,edx_168,r11_169,r12_165,r13_156,r14_154,r15_153,rax_152,rbp_155,rbx_157,rdi_150,rdx_164,rsi_151,rsp_149,S_166,SCZO_159,SZO_161,Z_163
	word64 r12_173 = rax_152
	*r12Out = r12_173
	branch rax_152 < 0x0000000000000000 l0000000000409DD8
// DataOut: fs r11 r12 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DD8:
	word64 rax_232 = __errno_location()
	word32 edx_235 = (word32) (uint64) Mem0[rax_232:word32]
	branch edx_235 == 0x00000022 l0000000000409D86
// DataOut: edx fs r11 r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DE4:
	free(rbp_155)
	Mem244[rax_232:word32] = (word32) (uint64) edx_235
// DataOut: fs r11 r12 r14 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D86:
	branch rbx_157 >u rax_152 l0000000000409E08
// DataOut: fs r11 r12 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409E08:
	Mem215[rbp_155:byte] = 0x00
	word64 rbp_226
	*rbpOut = Mem215[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_228
	*rsiOut = Mem215[qwLoc08 + 0x0000000000000010:word64]
	return rbp_155
// DataOut: fs r11 r12 r14 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409D8B:
	free(rbp_155)
	branch rbx_157 >u 0x00000000FFFFFFFF l0000000000409DC0
// DataOut: fs r11 r12 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DC0:
	branch rbx_157 >u 0x00000000FFFFFFFE l0000000000409E20
// DataOut: fs r11 r12 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409E20:
	Mem197[__errno_location():word32] = 0x0000000C
	word64 rbp_209
	*rbpOut = Mem197[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_211
	*rsiOut = Mem197[qwLoc08 + 0x0000000000000010:word64]
	return 0x0000000000000000
// DataOut: fs r11 r12 r14 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409DC5:
	word64 r11_195
	*r11Out = 0x00000000FFFFFFFF
// DataOut: fs r11 r12 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D98:
	branch malloc(rbx_157 * 0x0000000000000002) != 0x0000000000000000 l0000000000409D70
// DataOut: fs r11 r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DAB:
// DataOut: fs r11 r12 r14 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DAD:
	word64 rbp_114
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_116
	*rsiOut = Mem0[qwLoc08 + 0x0000000000000010:word64]
	return 0x0000000000000000
// DataOut: fs r11 r12 r14 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:0x0000000000000000 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:<invalid> -48(fp):<invalid> -36(fp):edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000409D20_exit:
// DataOut: r11 r12 r14 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi rbx:rbx rdi:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> r11:<invalid> -48(fp):<invalid> -36(fp):edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000409E50(word64 rax, word64 rcx, word64 rdx, word64 rsi, word64 rdi, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rcx rdi rdx rsi
// LiveOut: al eax ebp r12 r14 rax rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000409E50_entry:
// DataOut: fs r11 r8 rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409E50:
	word64 qwLoc38_115
	word64 rax_111
	word64 rax_29 = DPB(rax, strlen(rdi), 0)
	word64 r12_16
	*r12Out = rcx
	word64 rbp_133 = rdx
	word64 r14_129 = Mem0[rsi:word64]
	*r14Out = r14_129
	branch r14_129 == 0x0000000000000000 l0000000000409F72
// DataOut: eax fs r11 r12 r14 r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0040(64)

l0000000000409F72:
	qwLoc38_115 = 0xFFFFFFFFFFFFFFFF
// DataOut: fs r11 r12 r14 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:rdx rax:DPB(rax, <invalid>, 0) r14:<invalid> -64(fp):rdi -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64)

l0000000000409E81:
	byte bLoc29_114 = 0x00
	qwLoc38_115 = 0xFFFFFFFFFFFFFFFF
	word64 rbx_116 = 0x0000000000000000
	rax_130 = rax_29
// DataOut: eax fs r11 r12 r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:rdx rax:DPB(rax, <invalid>, 0) r14:<invalid> -64(fp):rdi -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EE8:
	word64 rax_130
	word64 rax_138 = DPB(rax_130, strncmp(r14_129, rdi, rax_29), 0)
	branch strncmp(r14_129, rdi, rax_29) != 0x00000000 l0000000000409ED8
	rax_130 = DPB(rax_130, strncmp(r14_129, rdi, rax_29), 0)
	branch strncmp(r14_129, rdi, rax_29) != 0x00000000 l0000000000409ED8
// DataOut: eax fs r11 r12 r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EFB:
	branch DPB(rax_130, strlen(r14_129), 0) == rax_29 l0000000000409F60
	rax_130 = DPB(rax_130, strlen(r14_129), 0)
	branch rax_130 == rax_29 l0000000000409F60
// DataOut: eax fs r11 r12 r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(32) Local -0038(0) Local -0040(64)

l0000000000409F60:
	word32 ebp_254
	*ebpOut = (word32) Mem0[qwLoc08 + 0x0000000000000008:word64]
	return rbx_116
// DataOut: al eax ebp fs r11 r12 r14 r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409F08:
	branch qwLoc38_115 != 0xFFFFFFFFFFFFFFFF l0000000000409EA0
	branch qwLoc38_115 != 0xFFFFFFFFFFFFFFFF l0000000000409EA0
// DataOut: eax fs r11 r12 r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(32) Local -0038(64) Local -0040(64)

l0000000000409EA0:
	rax_130 = rdx
	branch rdx == 0x0000000000000000 l0000000000409F50
// DataOut: eax fs r11 r12 r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(32) Local -0038(64) Local -0040(64)

l0000000000409F50:
	bLoc29_114 = 0x01
// DataOut: eax fs r11 r12 r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:rdx r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EAE:
	word64 rdi_224 = qwLoc38_115 *s rcx + rdx
	word64 rax_225 = DPB(rdx, memcmp(rdi_224, rbp_133, rcx), 0)
	byte cl_229 = (byte) (word32) bLoc29_114
	rax_130 = 0x0000000000000001
	branch memcmp(rdi_224, rbp_133, rcx) == 0x00000000 l0000000000409ED4
// DataOut: al cl eax fs r11 r12 r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:rdx r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0038(0) Local -0040(64)

l0000000000409ED1_1:
	cl_229 = 0x01 (alias)
// DataOut: cl eax fs r11 r12 r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:0x0000000000000001 r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0038(0) Local -0040(64)

l0000000000409ED4:
	bLoc29_114 = cl_229
// DataOut: eax fs r11 r12 r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:0x0000000000000001 r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409ED8:
	rbx_116 = rbx_116 + 0x0000000000000001
	rbp_133 = rbp_133 + rcx
	r14_129 = Mem0[rsi + rbx_116 * 0x0000000000000008:word64]
	*r14Out = r14_129
	branch r14_129 == 0x0000000000000000 l0000000000409F28
// DataOut: eax fs r11 r12 r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409F10:
	word64 rbx_201 = rbx_116 + 0x0000000000000001
	word64 rbp_202 = rbp_133 + rcx
	branch Mem0[rsi + rbx_201 * 0x0000000000000008:word64] != 0x0000000000000000 l0000000000409EE8
	qwLoc38_115 = rbx_201
	rbx_116 = rbx_201 + 0x0000000000000001
	rbp_133 = rbp_202 + rcx
	r14_129 = Mem0[rsi + (rbx_201 + 0x0000000000000001) * 0x0000000000000008:word64]
	*r14Out = r14_129
	branch r14_129 != 0x0000000000000000 l0000000000409EE8
// DataOut: eax fs r11 r12 r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409F25:
// DataOut: fs r11 r12 r14 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0029(0) Local -0038(64)

l0000000000409F28:
	rax_111 = 0xFFFFFFFFFFFFFFFE
	branch bLoc29_114 != 0x00 l0000000000409F3B
// DataOut: al eax fs r11 r12 r14 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64)

l0000000000409F36:
	rax_111 = qwLoc38_115
// DataOut: al eax fs r11 r12 r14 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409F3B:
	word32 ebp_87
	*ebpOut = (word32) Mem0[qwLoc08 + 0x0000000000000008:word64]
	return rax_111
// DataOut: al eax ebp fs r11 r12 r14 r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) rbx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000409E50_exit:
// DataOut: al eax ebp r12 r14 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> r13:DPB(rax, <invalid>, 0) rdx:<invalid> ecx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000409F80(word64 rdx, word64 rdi, word64 r11, selector fs, ptr64 & rbpOut, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi rdx
// LiveOut: r11 r15 rbp rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000409F80_entry:
// DataOut: fs r11 rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409F80:
	branch rdx == 0xFFFFFFFFFFFFFFFF l0000000000409FE0
// DataOut: fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409FE0:
	dcgettext(0x0000000000000000, 0x0000000000415DFD, 0x0000000000000005)
// DataOut: fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rdx:0x0000000000000005 rbp:rdi rbx:rsi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000409F95:
	dcgettext(0x0000000000000000, 0x0000000000415E18, 0x0000000000000005)
// DataOut: fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rdx:0x0000000000000005 rbp:rdi rbx:rsi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000409FA4:
	word64 r11_25
	word64 rbx_26 = fn000000000040EBF0(rdi, 0x0000000000000001, r11, fs, out r11_25)
	word64 r11_35
	word64 r15_36
	fn000000000040E970(rbx_26, 0x00000006, 0x00000000, r11_25, fs, out r11_35, out r15_36)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rdx:0x0000000000000005 rbp:rdi rbx:rsi rsi:<invalid> rdi:0x0000000000000000 rax:<invalid> r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000402770:
	word64 rsp_53
	word64 rdx_54
	byte SCZO_55
	word32 edx_56
	word64 rbp_57
	word64 rdi_58
	word64 rbx_59
	word64 rsi_60
	byte Z_61
	word32 esi_62
	word32 edi_63
	byte SZO_64
	byte C_65
	word64 rax_66
	word64 r12_67
	word64 r8_68
	word64 rcx_69
	word32 eax_70
	word64 r11_71
	selector fs_72
	word64 r15_73
	call Mem0[0x000000000061A300:word32] (retsize: 4; depth: 4)
		uses: C_52,dwLoc04_4,dwLoc08_11,dwLoc0C_16,edi_31,esi_29,fs,r11_35,r12_19,r15_36,r8_41,rax_50,rbp_44,rbx_39,rcx_43,rdi_49,rdx_42,rsi_48,rsp_47,SCZO_6,SZO_51,Z_7
		defs: C_65,eax_70,edi_63,edx_56,esi_62,fs_72,r11_71,r12_67,r15_73,r8_68,rax_66,rbp_57,rbx_59,rcx_69,rdi_58,rdx_54,rsi_60,rsp_53,SCZO_55,SZO_64,Z_61
	return rbx_59
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000409F80_exit:
// DataOut: r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040A000(word64 rdx, word64 rsi, word64 rdi, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi rdx rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040A000_entry:
// DataOut: fs r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A000:
	word64 rbx_30 = Mem0[0x000000000061A650:word64]
	word64 rax_31 = dcgettext(0x0000000000000000, 0x0000000000415E35, 0x0000000000000005)
	word64 rax_131 = DPB(rax_31, fputs_unlocked(rax_31, rbx_30), 0)
	word64 r14_10 = 0x0000000000000000
	word64 r13_125 = rdx
	word64 rbp_136 = rsi
	word64 rbx_135 = 0x0000000000000000
	word64 r12_130 = Mem0[rdi:word64]
	branch r12_130 != 0x0000000000000000 l000000000040A086
// DataOut: eax fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A086:
	branch rbx_135 == 0x0000000000000000 l000000000040A050
	branch rbx_135 == 0x0000000000000000 l000000000040A050
// DataOut: eax fs r11 r12 r13 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A08B:
	word64 rax_173 = DPB(rax_131, memcmp(r14_10, rbp_136, r13_125), 0)
	branch memcmp(r14_10, rbp_136, r13_125) != 0x00000000 l000000000040A050
	word64 rax_180 = DPB(rax_131, memcmp(r14_10, rbp_136, r13_125), 0)
	branch memcmp(r14_10, rbp_136, r13_125) != 0x00000000 l000000000040A050
// DataOut: fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A050:
	word64 rbp_151
	word64 r15_155
	rbx_135 = fn000000000040EC10(r12_130, r11, fs, out rbp_151, out r11, out r13_125, out r14_10, out r15_155)
	rbp_136 = rbp_151 + r13_125
	rax_131 = 0x0000000000000000
	r12_130 = Mem0[r15_155 + rbx_135 * 0x0000000000000008:word64]
	branch r12_130 == 0x0000000000000000 l000000000040A0D0
// DataOut: eax fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A09D:
	word64 rbp_189
	word64 r11_190
	word64 r13_191
	word64 r14_192
	word64 r15_193
	word64 rbx_194 = fn000000000040EC10(r12_130, r11, fs, out rbp_189, out r11_190, out r13_191, out r14_192, out r15_193)
	word64 r12_201 = Mem0[r15_193 + rbx_194 * 0x0000000000000008:word64]
	branch r12_201 != 0x0000000000000000 l000000000040A086
	word64 r15_212
	rbx_135 = fn000000000040EC10(r12_201, r11_190, fs, out rbp_136, out r11, out r13_125, out r14_10, out r15_212)
	rax_131 = 0x0000000000000000
	r12_130 = Mem0[r15_212 + rbx_135 * 0x0000000000000008:word64]
	branch r12_130 != 0x0000000000000000 l000000000040A086
// DataOut: eax fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A047:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r15:rdi rdi:<invalid> r14:0x0000000000000000 r13:rdx rdx:0x0000000000000005 rbp:rsi rsi:<invalid> rbx:0x0000000000000000 rax:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0D0:
	word64 rdi_59 = Mem0[0x000000000061A650:word64]
	branch Mem0[rdi_59 + 0x0000000000000028:word64] >=u Mem0[rdi_59 + 0x0000000000000030:word64] l000000000040A0FB
	word64 rdi_63 = Mem0[0x000000000061A650:word64]
	word64 rax_65 = Mem0[rdi_63 + 0x0000000000000028:word64]
	branch rax_65 >=u Mem0[rdi_63 + 0x0000000000000030:word64] l000000000040A0FB
// DataOut: rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0FB:
	word64 rsp_115 = Mem0[fp - 0x0000000000000008:word64]
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A10E_thunk_fn0000000000402400:
	fn0000000000402400()
	return rsp_115 + 0x0000000000000020
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0E1:
	Mem77[rdi_63 + 0x0000000000000028:word64] = rax_65 + 0x0000000000000001
	Mem78[rax_65:byte] = 0x0A
	word64 rsp_84 = Mem78[fp - 0x0000000000000008:word64]
	word64 rdi_90 = Mem78[rsp_84 + 0x0000000000000018:word64]
	return rsp_84 + 0x0000000000000020
	Mem93[rdi_90 + 0x0000000000000028:word64] = rax_65 + 0x0000000000000001
	Mem94[rax_65:byte] = 0x0A
	return Mem94[rsp_84 + 0x0000000000000038:word64] + 0x0000000000000020
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A000_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> r12:<invalid> rcx:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040A120(word64 rax, word64 rcx, word64 rdx, word64 rsi, word64 r8, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r8 rax rcx rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A120_entry:
// DataOut: fs r11 r8 rax rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A120:
	word64 rsp_37
	word32 ebp_38
	word64 r12_39
	word64 r14_40
	word64 rax_41 = fn0000000000409E50(rax, r8, rcx, rdx, rsi, out rsp_37, out ebp_38, out r12_39, out r14_40)
	branch rax_41 < 0x0000000000000000 l000000000040A165
// DataOut: fs r11 r14 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A165:
	word64 rbp_83
	word64 r11_84
	word64 r15_85
	word64 rbx_86 = fn0000000000409F80(rax_41, r14_40, r11, fs, out rbp_83, out r11_84, out r15_85)
	word64 rsp_90 = fn000000000040A000(r15_85, rbp_83, rbx_86, r11_84, fs)
	word64 rsp_91
	word64 rdi_92
	word64 r15_93
	word64 r8_94
	word64 rsi_95
	word64 r14_96
	word64 rbp_97
	word64 r13_98
	word64 r9_99
	word64 r12_100
	word64 rcx_101
	word64 rbx_102
	word64 rdx_103
	byte SCZO_104
	word64 rax_105
	byte SZO_106
	byte C_107
	byte S_108
	word32 r13d_109
	word64 r11_110
	selector fs_111
	word32 ebp_112
	call r13d (retsize: 4; depth: 4)
		uses: C_44,dwLoc04_4,dwLoc08_9,dwLoc0C_13,dwLoc10_18,dwLoc14_22,dwLoc18_29,ebp_38,fs,r11_84,r12_39,r13_15,r13d,r14_40,r15_85,r8,r9,rax_41,rbp_83,rbx_86,rcx_26,rdi_89,rdx_87,rsi_88,rsp_90,S_43,SCZO_35,SZO_42
		defs: C_107,ebp_112,fs_111,r11_110,r12_100,r13_98,r13d_109,r14_96,r15_93,r8_94,r9_99,rax_105,rbp_97,rbx_102,rcx_101,rdi_92,rdx_103,rsi_95,rsp_91,S_108,SCZO_104,SZO_106
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:r8 rbx:rdx rdx:<invalid> rsi:<invalid> rax:<invalid> ecx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A156:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> eax:0xFFFFFFFF al:0xFF cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A120_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> ecx:<invalid> eax:0xFFFFFFFF al:0xFF cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040A2B0(word64 rdi, word64 qwArg00, word64 qwArg10, word64 qwArg18, ptr64 & rbxOut, ptr64 & rbpOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rbp rbx rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh dl dx eax ebp ebx ecx edx esi esp rax rbp rbx rcx rdx rsi rsp si sil sp spl
// Preserved:
// Stack args: Stack +0010(64) Stack +0018(64)
fn000000000040A2B0_entry:
// DataOut: fs r12 r13 r14 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0010(64) Stack +0018(64)

l000000000040A2B0:
	word64 rdx_27
	word64 rbp_16 = (uint64) (Mem0[rdi:byte] == 0x2F)
	word64 rsi_19
	word64 rax_20 = fn000000000040A390(rdi, out rsi_19)
	word64 rcx_22 = rax_20 - rdi
	branch rcx_22 <=u rbp_16 l000000000040A2FD
// DataOut: fs r12 r13 r14 rax rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0010(64) Stack +0018(64)

l000000000040A2D2:
	rdx_27 = rcx_22 - 0x0000000000000001
	branch Mem0[rax_20 - 0x0000000000000001:byte] == 0x2F l000000000040A2EE
// DataOut: fs r12 r13 r14 rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0010(64) Stack +0018(64)

l000000000040A2EE:
	branch rbp_16 <u rdx_27 l000000000040A2E0
// DataOut: fs r12 r13 r14 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0010(64) Stack +0018(64)

l000000000040A2E0:
	rax_20 = rdx_27 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rdx_27:byte] != 0x2F l000000000040A2F3
// DataOut: fs r12 r13 r14 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0010(64) Stack +0018(64)

l000000000040A2EB:
	rdx_27 = rax_20
// DataOut: fs r12 r13 r14 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0010(64) Stack +0018(64)

l000000000040A2DC:
// DataOut: fs r12 r13 r14 rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0010(64) Stack +0018(64)

l000000000040A2FD:
	rdx_27 = rcx_22
// DataOut: fs r12 r13 r14 rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0010(64) Stack +0018(64)

l000000000040A2F3:
	return rax_20
	word64 rbx_40
	*rbxOut = qwArg10
	word64 rbp_43
	*rbpOut = qwArg18
	return rdx_27
// DataOut: fs r12 r13 r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

fn000000000040A2B0_exit:
// DataOut: rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000020 rbp:<invalid> rbx:<invalid> bpl:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn000000000040A390(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A390_entry:
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A390:
	word32 edx_107 = (word32) Mem0[rdi:byte]
	word64 rax_104 = rdi
	branch (byte) edx_107 != 0x2F l000000000040A3AC
// DataOut: dl ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A39B:
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:(word32) Mem0[rdi:byte] rax:rdi

l000000000040A3A0:
	rax_104 = rax_104 + 0x0000000000000001
	edx_107 = (word32) Mem0[rax_104:byte]
	branch (byte) edx_107 == 0x2F l000000000040A3A0
// DataOut: dl ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3AC:
	word64 rsi_16 = 0x0000000000000000
	*rsiOut = rsi_16
	byte sil_102 = 0x00
	word64 rdx_19 = rax_104
	branch (byte) (uint64) edx_107 == 0x00 l000000000040A3F7
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3F7:
	return rax_104
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:0x0000000000000000 rdx:<invalid>

l000000000040A3B7:
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:0x0000000000000000 rdx:<invalid>

l000000000040A3C0:
	rdx_19 = rdx_19 + 0x0000000000000001
	byte cl_52 = (byte) (word32) Mem0[rdx_19:byte]
	branch cl_52 == 0x00 l000000000040A3E5
// DataOut: cl ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3CB:
	branch cl_52 == 0x2F l000000000040A3F0
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3F0:
	word64 rsi_100
	*rsiOut = 0x0000000000000001
	sil_102 = 0x01 (alias)
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D0:
	branch sil_102 == 0x00 l000000000040A3C0
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3D5:
	rdx_19 = rdx_19 + 0x0000000000000001
	rax_104 = rdx_19
	cl_52 = (byte) (word32) Mem0[rdx_19:byte] (alias)
	word64 rsi_94 = 0x0000000000000000
	*rsiOut = rsi_94
	sil_102 = 0x00 (alias)
	branch cl_52 != 0x00 l000000000040A3CB
// DataOut: cl ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

l000000000040A3E5:
	return rax_104
// DataOut: ebx fs r11 r12 r13 r14 r14d r15 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>

fn000000000040A390_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid>



word64 fn000000000040A400(word64 rax, word64 rdi, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: rax rsp
// Trashed: SCZO ah al ax dh dl dx eax edx esp rax rdx rsp sp spl
// Preserved: rbx
fn000000000040A400_entry:
// DataOut: r11 r12 r14 r14d r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A400:
	word64 rax_23 = DPB(rax, strlen(rdi), 0)
	branch rax_23 <=u 0x0000000000000001 l000000000040A41A
// DataOut: r11 r12 r14 r14d r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A40F:
	word64 rdx_31 = rax_23 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rax_23:byte] == 0x2F l000000000040A420
// DataOut: r11 r12 r14 r14d r15 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rax:<invalid> rdx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040A420:
	rax_23 = rdx_31
	branch rdx_31 != 0x0000000000000001 l000000000040A40F
// DataOut: r11 r12 r14 r14d r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rax:<invalid> rdx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040A429:
	return rdx_31
// DataOut: r11 r12 r14 r14d r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rax:<invalid> rdx:<invalid> -4(fp):rbx

l000000000040A41A:
	return rax_23
// DataOut: r11 r12 r14 r14d r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rax:<invalid> rdx:<invalid> -4(fp):rbx

fn000000000040A400_exit:
// DataOut: rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdx:<invalid> -4(fp):rbx



void fn000000000040A600(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx rax rdi rdx
// Preserved: rsp
fn000000000040A600_entry:
// DataOut: fs r11 r11d r13 r13d r14 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A600:
	word32 edi_5 = (word32) (uint64) Mem0[rdi + 0x0000000000000018:word32]
// DataOut: edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A430:
	byte dl_15
	word32 eax_9 = (word32) (uint64) ((word32) (uint64) edi_5 & 0x0000F000)
	branch eax_9 == 0x00008000 l000000000040A5B0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32]

l000000000040A5B0:
	dl_15 = 0x2D (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A442:
	branch eax_9 == 0x00004000 l000000000040A5C0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A5C0:
	dl_15 = 0x64 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A44D:
	branch eax_9 == 0x00006000 l000000000040A5D0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A5D0:
	dl_15 = 0x62 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A458:
	branch eax_9 == 0x00002000 l000000000040A5A0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A5A0:
	dl_15 = 0x63 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A463:
	branch eax_9 == 0x0000A000 l000000000040A5E0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A5E0:
	dl_15 = 0x6C (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A46E:
	branch eax_9 == 0x00001000 l000000000040A5F0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A5F0:
	dl_15 = 0x70 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A479:
	dl_15 = 0x73 (alias)
	branch eax_9 == 0x0000C000 l000000000040A48B
// DataOut: al dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax & 0x0000F000)

l000000000040A488_1:
	dl_15 = 0x3F (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:0x000000000000003F rdx:0x0000000000000073

l000000000040A48B:
	byte al_180
	Mem18[rsi:byte] = dl_15
	Mem30[rsi + 0x0000000000000001:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000100)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem43[rsi + 0x0000000000000002:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000080)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_51 = (word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000040)) - 0x00000001))
	branch (edi_5 & 0x00000800) == 0x00000000 l000000000040A590
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:<invalid> rdx:<invalid> edx:eax

l000000000040A590:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4CD:
	al_180 = (byte) (uint64) ((word32) (uint64) (eax_51 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:<invalid> rdx:<invalid> edx:eax

l000000000040A4D3:
	byte al_168
	Mem57[rsi + 0x0000000000000003:byte] = al_180
	Mem70[rsi + 0x0000000000000004:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000020)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem83[rsi + 0x0000000000000005:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000010)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_91 = (word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000008)) - 0x00000001))
	branch (edi_5 & 0x00000400) == 0x00000000 l000000000040A580
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:<invalid> rdx:<invalid> edx:eax

l000000000040A580:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:<invalid> rdx:<invalid> edx:eax

l000000000040A50E:
	al_168 = (byte) (uint64) ((word32) (uint64) (eax_91 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:<invalid> rdx:<invalid> edx:eax

l000000000040A514:
	Mem97[rsi + 0x0000000000000006:byte] = al_168
	Mem110[rsi + 0x0000000000000007:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000004)) - 0x00000001)) & 0xFFFFFFBB) + 0x00000072)
	Mem126[rsi + 0x0000000000000008:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) ((word32) ((uint64) edi_5) & 0x00000002)) - 0x00000001)) & 0xFFFFFFB6) + 0x00000077)
	branch (edi_5 & 0x00000200) == 0x00000000 l000000000040A560
// DataOut: edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:<invalid> rdx:<invalid> edx:eax

l000000000040A560:
	Mem151[rsi + 0x000000000000000A:byte] = 0x20
	Mem152[rsi + 0x000000000000000B:byte] = 0x00
	Mem163[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFB5) + 0x00000078)
	return
// DataOut: fs r11 r11d r13 r13d r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax + 0x00000077) rdx:<invalid> edx:eax

l000000000040A545:
	Mem136[rsi + 0x000000000000000A:byte] = 0x20
	Mem137[rsi + 0x000000000000000B:byte] = 0x00
	Mem148[rsi + 0x0000000000000009:byte] = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) (0x00000000 - cond((word32) ((uint64) (edi_5 & 0x00000001)) - 0x00000001)) & 0xFFFFFFE0) + 0x00000074)
	return
// DataOut: fs r11 r11d r13 r13d r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) Mem0[rdi + 0x0000000000000018:word32] rax:(uint64) (eax + 0x00000077) rdx:<invalid> edx:eax

fn000000000040A600_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:(uint64) (edi & 0x00000001) rax:<invalid> rdx:<invalid> edx:eax



word64 fn000000000040A610(word64 rdx, word64 rsi, word64 rdi, ptr64 & rbpOut, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax rbp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040A610_entry:
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A610:
	word64 rdx_7
	word64 rsp_8
	word64 rbp_9
	word64 rsi_10
	word64 rdi_11
	word32 r14d_12
	word64 rax_13 = fn000000000040A630(rdx, rsi, rdi, out rdx_7, out rsp_8, out rbp_9, out rsi_10, out rdi_11, out r14d_12)
	branch rax_13 == 0x0000000000000000 l000000000040A623
// DataOut: r11 r14d rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A623:
	fn0000000000410E50()
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> rax:<invalid> rcx:<invalid> r13:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid>
// Terminates process

l000000000040A628_thunk_fn000000000040A630:
	word64 rdx_29
	word64 rsp_30
	word64 rbp_31
	word64 rsi_32
	word64 rdi_33
	word32 r14d_34
	return fn000000000040A630(rdx_7, rsi_10, rdi_11, out rdx_29, out rsp_30, out rbp_31, out rsi_32, out rdi_33, out r14d_34)
// DataOut: r11 r14d rax rbp
// DataOut (flags): 
// SymbolicIn:

l000000000040A61E:
	return rax_13
// DataOut: r11 r14d rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> rax:<invalid> rcx:<invalid> r13:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid>

fn000000000040A610_exit:
// DataOut: r14d rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> rax:<invalid> rcx:<invalid> r13:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid>



word64 fn000000000040A630(word64 rdx, word64 rsi, word64 rdi, ptr64 & rdxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r14dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14d rax rbp rdi rdx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A630_entry:
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A630:
	word64 rsi_28
	word64 rax_29 = fn000000000040A390(rdi, out rsi_28)
	word64 rsp_32
	word64 rax_33 = fn000000000040A400(rax_29, rax_29, out rsp_32)
	word64 rdx_37 = rax_29 - rdi
	*rdxOut = rdx_37
	Mem42[rsp_32:word64] = rdx_37 + rax_33
	word64 r14_10 = 0x0000000000000000
	word32 r14d_11
	*r14dOut = 0x00000000
	branch rax_33 == 0x0000000000000000 l000000000040A679
// DataOut: r11 r12 r14 r14d r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A66D:
	byte r14b_135 = Mem42[rax_29 - 0x0000000000000001 + rax_33:byte] != 0x2F
	r14_10 = (uint64) r14b_135 (alias)
	word32 r14d_137
	*r14dOut = (word32) r14b_135
// DataOut: r11 r12 r14 r14d r15 rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:0x0000000000000000 r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rax:<invalid> rcx:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A679:
	word64 rbx_125 = rsi + 0x0000000000000001
	branch Mem42[rsi:byte] == 0x2F l000000000040A700
// DataOut: r11 r12 r14 r14d r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A700:
	rbx_125 = rbx_125 + 0x0000000000000000
	branch Mem42[rbx_125:byte] != 0x2F l000000000040A682
// DataOut: r11 r12 r14 r14d r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A70D:
	rbx_125 = rbx_125 + 0x0000000000000001
	branch Mem42[rbx_125 + 0x0000000000000001:byte] != 0x2F l000000000040A682
// DataOut: r11 r12 r14 r14d r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A71A:
// DataOut: r11 r12 r14 r14d r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A682:
	word64 rax_108
	word64 rax_52 = DPB(rax_33, strlen(rbx_125), 0)
	word64 rcx_53 = Mem42[rsp_32:word64]
	Mem54[rsp_32 + 0x0000000000000008:word64] = rax_52
	word64 rax_57 = malloc(rcx_53 + 0x0000000000000001 + r14_10 + rax_52)
	branch rax_57 == 0x0000000000000000 l000000000040A720
// DataOut: r11 r12 r13 r14 r14d r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> rcx:<invalid> ecx:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A720:
	rax_108 = 0x0000000000000000
// DataOut: r11 r14d rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6A8:
	word64 rax_95 = mempcpy(rax_57, rdi, Mem54[rsp_32:word64])
	Mem99[rax_95:byte] = 0x2F
	word64 rdi_100 = rax_95 + r14_10
	branch rdx == 0x0000000000000000 l000000000040A6D5
// DataOut: r11 r13 r14d rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6C3:
	Mem119[rdi_100:word64] = rdi_100 - (uint64) (Mem99[rsi:byte] == 0x2F)
// DataOut: r11 r13 r14d rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6D5:
	word64 rdx_104 = Mem99[rsp_32 + 0x0000000000000008:word64]
	*rdxOut = rdx_104
	Mem107[mempcpy(rdi_100, rbx_125, rdx_104):byte] = 0x00
	rax_108 = rax_57
// DataOut: r11 r14d rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:rdi r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> al:Test(EQ,Z) edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6E8:
	word64 rsp_78 = Mem54[rsp_32 + 0x0000000000000028:word64]
	word64 rbp_80
	*rbpOut = Mem54[rsp_78 + 0x0000000000000008:word64]
	word64 rsi_82
	*rsiOut = Mem54[rsp_78 + 0x0000000000000010:word64]
	word64 rdi_84
	*rdiOut = Mem54[rsp_78 + 0x0000000000000018:word64]
	word64 rsp_85
	*rspOut = rsp_78 + 0x0000000000000020
	return rax_108
// DataOut: r11 r14d rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A630_exit:
// DataOut: r14d rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14:<invalid> r12:rdi rbp:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040A730(word64 rdi, word32 r14d, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r14d rdi
// LiveOut: eax r9 rax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A730_entry:
	*r9Out = r9
// DataOut: fs r11d r12 r13d r14 r14d r15 r15d r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A730:
	word64 rdx_143 = Mem0[rdi:word64]
	byte cl_146 = (byte) (word32) Mem0[rdx_143:byte]
	branch cl_146 == 0x00 l000000000040A7CD
// DataOut: cl fs r11d r12 r13d r14 r14d r15 r15d r9 rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A7CD:
	return 0x0000000000000000
// DataOut: eax fs r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A73E:
	byte r8b_101 = 0x00
	word64 rax_109 = 0x0000000000000000
// DataOut: cl eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A776:
	branch r8b_101 != 0x00 l000000000040A750
	branch r8b_101 != 0x00 l000000000040A750
// DataOut: cl eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A750:
	r8b_101 = 0x00 (alias)
	branch (word32) (uint64) ((word32) (uint64) ((int32) cl_146 & 0xFFFFFFDF) - 0x00000041) <=u 0x00000019 l000000000040A768
// DataOut: cl eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A77B:
	branch cl_146 == 0x2E l000000000040A7B8
	branch cl_146 == 0x2E l000000000040A7B8
// DataOut: cl eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7B8:
	branch rax_109 == 0x0000000000000000 l000000000040A7C8
// DataOut: fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7C8:
// DataOut: fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A7BD:
	rax_109 = 0x0000000000000001
// DataOut: eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A780:
	branch r14 <=u 0x0000000000000039 l000000000040A768
	word32 esi_119 = (int32) cl_146
	r9 = DPB(r9, r14 - 0x0000000000000030, 0) (alias)
	*r9Out = r9
	branch r14 <=u 0x0000000000000039 l000000000040A768
// DataOut: cl eax esi fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A78D:
	word32 esi_128 = (word32) (uint64) ((word32) (uint64) (esi_119 & 0xFFFFFFDF) - 0x00000041)
	branch esi_128 >u 0x00000019 l000000000040A761
	branch (word32) (uint64) ((word32) (uint64) (esi_128 & 0xFFFFFFDF) - 0x00000041) >u 0x00000019 l000000000040A761
// DataOut: cl eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 r9d:r14 - 0x0000000000000030 esi:(int32) cl rsi:<invalid>

l000000000040A761:
	branch cl_146 == 0x7E l000000000040A768
// DataOut: eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A764_1:
	rax_109 = 0x0000000000000000
// DataOut: eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A768:
	rdx_143 = rdx_143 + 0x0000000000000001
	Mem93[rdi:word64] = rdx_143
	cl_146 = (byte) (word32) Mem93[rdx_143:byte] (alias)
	branch cl_146 == 0x00 l000000000040A7B0
// DataOut: cl eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A798:
	word64 rdx_137 = rdx_143 + 0x0000000000000001
	Mem138[rdi:word64] = rdx_137
	branch (byte) (word32) Mem138[rdx_137:byte] != 0x00 l000000000040A776
	Mem144[rdi:word64] = rdx_137 + 0x0000000000000001
	rdx_143 = rdx_137 + 0x0000000000000001
	cl_146 = (byte) (word32) Mem144[rdx_137 + 0x0000000000000001:byte] (alias)
	branch cl_146 != 0x00 l000000000040A776
// DataOut: cl eax fs r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 r9d:r14 - 0x0000000000000030 esi:<invalid> rsi:<invalid>

l000000000040A7A6:
// DataOut: eax fs r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 r9d:r14 - 0x0000000000000030 esi:<invalid> rsi:<invalid>

l000000000040A7B0:
	return rax_109
// DataOut: eax fs r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8:0x0000000000000000 rax:<invalid> r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030

fn000000000040A730_exit:
// DataOut: eax r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> rax:<invalid> r8:0x0000000000000000 r10:0x0000000000000000 esi:<invalid> rsi:<invalid> r9d:r14 - 0x0000000000000030



word64 fn000000000040AB30(word32 eax, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rdi
// LiveOut: rsp
// Trashed: SCZO ah al ax di dil eax edi esi esp rax rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AB30_entry:
// DataOut: eax fs r11d r13 r14 r15b rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -000C(64) Local -0014(64)

l000000000040AB30:
	word64 rax_11 = DPB(rax, clock_gettime(0x0000000000000000, rdi), 0)
	word32 eax_12 = clock_gettime(0x0000000000000000, rdi)
	branch eax_12 == 0x00000000 l000000000040AB67
// DataOut: fs r11d r13 r14 r15b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -000C(64) Local -0014(64)

l000000000040AB46:
	word64 rsp_38
	word64 rbx_39
	word64 rsi_40
	word64 rdi_41
	word32 edi_42
	byte SZO_43
	byte C_44
	byte SCZO_45
	word64 rax_46
	word32 eax_47
	byte Z_48
	word32 esi_49
	call gettimeofday (retsize: 8; depth: 28)
		uses: C_35,dwLoc04_4,eax_12,edi,esi_33,qwLoc04,rax_11,rbx_7,rdi_36,rsi_32,rsp_9,SCZO,SZO_34,Z_14
		defs: C_44,eax_47,edi_42,esi_49,rax_46,rbx_39,rdi_41,rsi_40,rsp_38,SCZO_45,SZO_43,Z_48
	Mem52[rbx_39:word64] = qwLoc14
	Mem57[rbx_39 + 0x0000000000000008:word64] = qwLoc0C *s 1000
// DataOut: fs r11d r13 r14 r15b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rsi:rdi rbx:rdi rdi:0x0000000000000000 rax:DPB(rax, <invalid>, 0) -4(fp):rbx
// LocalsOut: fp(64)

l000000000040AB67:
	return fp + 0x0000000000000004
// DataOut: fs r11d r13 r14 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rsi:<invalid> rbx:rdi rdi:<invalid> rax:<invalid> -4(fp):rbx

fn000000000040AB30_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rsi:<invalid> rbx:rbx rdi:<invalid> rax:<invalid> -4(fp):rbx



void fn000000000040AB70(word64 rax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx di dil eax ecx edi esi rax rcx rdi rsi si sil
// Preserved: rsp
fn000000000040AB70_entry:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AB70:
	word64 rsp_7
	byte SCZO_8
	word32 esi_9
	word64 rsi_10
	byte SZO_11
	byte C_12
	word64 rax_13
	byte Z_14
	word32 eax_15
	word32 edi_16
	word64 rdi_17
	word32 ecx_18
	word64 rcx_19
	byte al_20
	call setlocale (retsize: 8; depth: 16)
		uses: C_6,esi_4,rsi_3,rsp_2,SZO_5
		defs: al_20,C_12,eax_15,ecx_18,edi_16,esi_9,rax_13,rcx_19,rdi_17,rsi_10,rsp_7,SCZO_8,SZO_11,Z_14
	branch rax_13 == 0x0000000000000000 l000000000040ABB0
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ABB0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>

l000000000040AB80:
	branch Mem0[rax_13:byte] != 0x43 l000000000040AB98
// DataOut: rax
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040AB85:
	branch Mem0[rax_13 + 0x0000000000000001:byte] != 0x00 l000000000040AB98
// DataOut: rax
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040AB98:
	word64 rsi_46 = rax_13
	word64 rdi_48 = 0x0000000000415E6A
	word64 rcx_50 = 0x0000000000000006
// DataOut: rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5:
	branch rcx_50 == 0x0000000000000000 l000000000040ABA7
// DataOut: rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5_1:
	rsi_46 = rsi_94 + 0x0000000000000001
	rdi_48 = rdi_95 + 0x0000000000000001
	rcx_50 = rcx_50 - 0x0000000000000001
	word64 rsi_94 = rsi_46
	word64 rdi_95 = rdi_48
	branch Mem0[rsi_94:byte] != Mem0[rdi_95:byte] l000000000040ABA5
// DataOut: rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA7:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid> rdi:<invalid> rcx:<invalid>

l000000000040AB8B:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rsi:<invalid>

fn000000000040AB70_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rax:<invalid> rdi:<invalid> rcx:<invalid> al:Test(NE,Z)



void fn000000000040ABC0(word64 rdi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040ABC0_entry:
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABC0:
	word64 rdi_133
	branch rdi >u 0x0000000000000009 l000000000040AC4F
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC4F:
	rdi_133 = rdi | 0x0000000000000001
	branch (rdi | 0x0000000000000001) != 0xFFFFFFFFFFFFFFFF l000000000040ABCF
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC5D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:rdi | 0x0000000000000001

l000000000040ABCA:
	rdi_133 = 0x000000000000000B
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABCF:
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid>

l000000000040ABE0:
	word64 rcx_101
	branch rdi_133 <=u 0x0000000000000009 l000000000040AC48
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040AC48:
	rcx_101 = 0x0000000000000003
// DataOut: r8 rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040ABE6:
	word64 rdx_rax_92 = rdi_133 *u 0x00000000AAAAAAAB
	branch rdi_133 == (rdx_rax_92 >>u 0x0000000000000001) + (rdx_rax_92 >>u 0x0000000000000001) * 0x0000000000000002 l000000000040AC3A
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040ABF8:
	word64 rsi_103 = 0x0000000000000009
	rcx_101 = 0x0000000000000003
// DataOut: r8 rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040AC21:
	word64 rsi_111 = rsi_103 + r8
	word64 rcx_112 = rcx_101 + 0x0000000000000002
	branch rsi_111 <u rdi_133 l000000000040AC10
	rsi_103 = rsi_111 + r8
	rcx_101 = rcx_112 + 0x0000000000000002
	branch rsi_103 <u rdi_133 l000000000040AC10
// DataOut: r8 rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040AC10:
	r8 = r8 + 0x0000000000000008
	branch (uint64) (rdi_133 % (rcx_112 + 0x0000000000000002)) == 0x0000000000000000 l000000000040AC3A
// DataOut: r8 rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040AC2D:
	branch (uint64) (rdi_133 % rcx_101) != 0x0000000000000000 l000000000040AC44
	branch (uint64) (rdi_133 % rcx_101) != 0x0000000000000000 l000000000040AC44
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rcx:<invalid> rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040AC3A:
	word64 rdi_61 = rdi_133 + 0x0000000000000002
	branch rdi_61 != 0xFFFFFFFFFFFFFFFF l000000000040ABE0
	rdi_133 = rdi_61 + 0x0000000000000002
	branch rdi_61 != 0x0000000000000003 l000000000040ABE0
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

l000000000040AC44:
	return
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>

fn000000000040ABC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> r9:0x00000000AAAAAAAB Sequence rdx:rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> r8:<invalid>



word64 fn000000000040AC80(word64 rax, word64 rdi, ptr64 & rspOut, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: al rax rdi rsi rsp
// Trashed: SCZO ah al ax di dil eax edi esi esp rax rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AC80_entry:
// DataOut: cl r11 r12 r13 r13b r14 r15b r8 rax rbp rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC80:
	word64 rsp_11
	word64 rbx_12
	word64 rdi_13
	word64 rsi_14
	word64 rax_15
	byte SCZO_16
	byte C_17
	call Mem0[rdi + 0x0000000000000030:word32] (retsize: 4; depth: 8)
		uses: dwLoc04_4,rbx_6,rdi_8,rsi_10,rsp_2
		defs: C_17,rax_15,rbx_12,rdi_13,rsi_14,rsp_11,SCZO_16
	branch rax_15 >=u Mem0[rbx_12 + 0x0000000000000010:word64] l000000000040AC9D
// DataOut: cl r11 r12 r13 r13b r14 r15b r8 rax rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC9D:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> rsi:<invalid> -4(fp):rbx

l000000000040AC94:
	word64 rsp_25
	*rspOut = fp + 0x0000000000000004
	return (rax_15 << 0x0000000000000004) + Mem0[rbx_12:word64]
// DataOut: al cl r11 r12 r13 r13b r14 r15b r8 rax rbp rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> rsi:<invalid> -4(fp):rbx

fn000000000040AC80_exit:
// DataOut: al rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rdi:<invalid> rsi:<invalid> rax:<invalid> -4(fp):rbx



word64 fn000000000040ACB0(word64 rax, word32 ecx, word64 rsi, word64 rdi, word64 r8, word64 r11, ptr64 & rcxOut, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cl ecx r11 r8 rax rdi rsi
// LiveOut: cl eax ebx rax rbx rcx rdi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r9 r9b r9d r9w rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved:
fn000000000040ACB0_entry:
	*rcxOut = rcx
// DataOut: cl ecx r11 r8 rax rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ACB0:
	word64 r13_11 = (uint64) ecx
	word64 rsi_27
	word64 rdi_28
	word64 rsp_137
	word64 rax_238 = fn000000000040AC80(rax, rdi, out rsp_137, out rsi_27, out rdi_28)
	Mem31[rsi_27:word64] = rax_238
	byte r13b_13 = (byte) r13_11
	word64 rbp_166 = rdi
	word64 rsi_136 = Mem31[rax_238:word64]
	word64 rbx_165 = rax_238
	branch rsi_136 == 0x0000000000000000 l000000000040AD4F
// DataOut: al cl r11 r12 r13b r8 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ACD7:
	branch rsi == rsi_136 l000000000040ACE9
// DataOut: al cl r11 r12 r13b r8 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACDC:
	word64 rsi_191
	word64 r14_192
	word64 rdx_193
	word32 r13d_195
	word32 ecx_196
	word64 r13_197
	word64 rdi_199
	word64 rax_201
	byte SZO_202
	byte C_203
	byte Z_204
	byte SCZO_205
	byte al_206
	word32 esi_207
	word64 r9_209
	word64 r10_211
	word64 rcx_213
	word64 r12_198
	call Mem31[rdi + 0x0000000000000038:word32] (retsize: 4; depth: 4)
		uses: al_30,C_37,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_19,dwLoc14_24,ecx,esi_33,r10,r11,r12_17,r13_11,r13b_13,r13d_12,r14_6,r8,r9,rax_29,rbp_21,rbx_34,rcx,rdi_189,rdx,rsi_32,rsp_26,SCZO_116,SZO_35,Z_117
		defs: al_206,C_203,ecx_196,esi_207,r10_211,r11_212,r12_198,r13_197,r13b_208,r13d_195,r14_192,r8_210,r9_209,rax_201,rbp_194,rbx_200,rcx_213,rdi_199,rdx_193,rsi_191,rsp_190,SCZO_205,SZO_202,Z_204
	branch al_206 == 0x00 l000000000040AD46
// DataOut: cl r11 r12 r13b r8 rbp rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD46:
	rax_238 = Mem31[rbx_165 + 0x0000000000000008:word64]
	branch rax_238 != 0x0000000000000000 l000000000040AD30
// DataOut: al cl r12 r13b rax rbp rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD30:
	rsi_136 = Mem31[rax_238:word64]
	branch rsi_136 == r12_198 l000000000040AD67
// DataOut: al cl r12 r13b rax rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD38:
	word64 rsi_292
	word64 r14_293
	word64 rdx_294
	word32 r13d_296
	word32 ecx_297
	word64 r13_298
	word64 rdi_300
	word64 rax_302
	byte SZO_303
	byte C_304
	byte Z_305
	byte SCZO_306
	byte al_307
	word32 esi_308
	word64 r9_310
	word64 r8_311
	word64 r10_312
	word64 r11_313
	word64 rcx_314
	call Mem31[rbp_166 + 0x0000000000000038:word32] (retsize: 4; depth: 4)
		uses: al_239,C_242,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_19,dwLoc14_24,ecx_233,esi_244,r10_231,r11_219,r12_224,r13_225,r13b_221,r13d_226,r14_228,r8_220,r9_230,rax_238,rbp_235,rbx_234,rcx_232,rdi_290,rdx_227,rsi_243,rsp_237,SCZO_245,SZO_240,Z_246
		defs: al_307,C_304,ecx_297,esi_308,r10_312,r11_313,r12_299,r13_298,r13b_309,r13d_296,r14_293,r8_311,r9_310,rax_302,rbp_295,rbx_301,rcx_314,rdi_300,rdx_294,rsi_292,rsp_291,SCZO_306,SZO_303,Z_305
	branch al_307 != 0x00 l000000000040AD60
// DataOut: cl r12 r13b rbp rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD60:
	rax_238 = Mem31[rbx_165 + 0x0000000000000008:word64]
	rsi_136 = Mem31[rax_238:word64]
// DataOut: cl r13b rax rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD67:
	branch r13b_13 == 0x00 l000000000040AD1C
// DataOut: cl rax rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD6C:
	Mem272[rbx_165 + 0x0000000000000008:word64] = Mem31[rax_238 + 0x0000000000000008:word64]
	Mem273[rax_238:word64] = 0x0000000000000000
	word64 rcx_274 = Mem273[rbp_166 + 0x0000000000000048:word64]
	*rcxOut = rcx_274
	Mem276[rax_238 + 0x0000000000000008:word64] = rcx_274
	Mem277[rbp_166 + 0x0000000000000048:word64] = rax_238
	word64 rbx_280
	*rbxOut = Mem277[rsp_137:word64]
	word64 rsp_289
	*rspOut = Mem277[rsp_137 + 0x0000000000000010:word64] + 0x0000000000000018
	return rsi_136
// DataOut: cl eax ebx rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD42:
	rbx_165 = Mem31[rbx_165 + 0x0000000000000008:word64]
// DataOut: cl r12 r13b rbp rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD4F:
	word64 rsp_93 = Mem31[rsp_137 + 0x0000000000000010:word64]
	return rax_238
	word64 rbx_100
	*rbxOut = Mem31[rsp_93 + 0x0000000000000018:word64]
	word64 rsp_115
	*rspOut = Mem31[rsp_93 + 0x0000000000000028:word64] + 0x0000000000000018
	return 0x0000000000000000
// DataOut: cl eax ebx rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACE6:
	rsi_136 = Mem31[rbx_165:word64]
// DataOut: cl r11 r13b r8 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACE9:
	branch r13b_13 == 0x00 l000000000040AD1C
// DataOut: cl r11 r8 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACEE:
	word64 rax_174 = Mem31[rbx_165 + 0x0000000000000008:word64]
	branch rax_174 == 0x0000000000000000 l000000000040AD98
// DataOut: cl r11 r8 rax rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD98:
	Mem188[rbx_165:word64] = 0x0000000000000000
// DataOut: cl rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACFB:
	word64 r10_180 = Mem31[r8 + 0x0000000000000008:word64]
	Mem181[r11:word64] = Mem31[r8:word64]
	Mem182[r11 + 0x0000000000000008:word64] = r10_180
	Mem183[rax_174:word64] = 0x0000000000000000
	word64 rcx_184 = Mem183[rbp_166 + 0x0000000000000048:word64]
	*rcxOut = rcx_184
	Mem186[rax_174 + 0x0000000000000008:word64] = rcx_184
	Mem187[rbp_166 + 0x0000000000000048:word64] = rax_174
// DataOut: cl rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD1C:
	word64 rbx_138
	*rbxOut = Mem31[rsp_137:word64]
	word64 rsp_149
	*rspOut = Mem31[rsp_137 + 0x0000000000000010:word64] + 0x0000000000000018
	return rsi_136
// DataOut: cl eax ebx rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

fn000000000040ACB0_exit:
// DataOut: cl eax ebx rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13:(uint64) ecx r12:rsi rbp:<invalid> rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi



void fn000000000040AE40(word64 rax, word32 edx, word64 rbp, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edx rax rbp rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040AE40_entry:
// DataOut: dl edx rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AE40:
	byte r15b_8 = (byte) (uint64) edx
	word64 r13_121 = Mem0[rsi:word64]
	branch r13_121 >=u Mem0[rsi + 0x0000000000000008:word64] l000000000040AEEF
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AE64:
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE68:
	rbp = Mem0[rbp:word64]
	branch rbp == 0x0000000000000000 l000000000040AEE1
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE71:
	word64 rbx_124 = Mem0[rbp + 0x0000000000000008:word64]
	branch rbx_124 != 0x0000000000000000 l000000000040AE94
// DataOut: r12 r13 r14 r15b rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE94:
	word64 rbp_215 = Mem0[rbx_124:word64]
	word64 rsp_218
	word64 rsi_219
	word64 rdi_220
	rax = fn000000000040AC80(rax, rdi, out rsp_218, out rsi_219, out rdi_220)
	word64 rdx_225 = Mem0[rbx_124 + 0x0000000000000008:word64]
	branch Mem0[rax:word64] != 0x0000000000000000 l000000000040AE80
// DataOut: r12 r13 r14 r15b rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE80:
	Mem256[rbx_124 + 0x0000000000000008:word64] = Mem0[rax + 0x0000000000000008:word64]
	Mem257[rax + 0x0000000000000008:word64] = rbx_124
	branch rdx_225 == 0x0000000000000000 l000000000040AED0
// DataOut: r12 r13 r14 r15b rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEAC:
	Mem241[rax:word64] = rbp_215
	Mem243[rdi + 0x0000000000000018:word64] = Mem241[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	Mem247[rbx_124:word64] = 0x0000000000000000
	rax = Mem247[rdi + 0x0000000000000048:word64]
	Mem250[rbx_124 + 0x0000000000000008:word64] = rax
	Mem251[rdi + 0x0000000000000048:word64] = rbx_124
	branch rdx_225 != 0x0000000000000000 l000000000040AE91
// DataOut: r12 r13 r14 r15b rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE91:
	rbx_124 = rdx_225
// DataOut: r12 r13 r14 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AECF:
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AED0:
	rbp = Mem0[rbp_215:word64]
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE7A:
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AED4:
	Mem142[rbp + 0x0000000000000008:word64] = 0x0000000000000000
	branch r15b_8 == 0x00 l000000000040AF08
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF08:
	word64 rsp_145
	word64 rsi_146
	word64 rdi_147
	rax = fn000000000040AC80(rax, rdi, out rsp_145, out rsi_146, out rdi_147)
	branch Mem142[rax:word64] == 0x0000000000000000 l000000000040AF5B
// DataOut: r12 r13 r14 r15b rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF5B:
	Mem206[rax:word64] = rbp
	Mem208[rdi + 0x0000000000000018:word64] = Mem206[rdi + 0x0000000000000018:word64] + 0x0000000000000001
// DataOut: r12 r13 r14 r15b rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF1C:
	rax = Mem142[rdi + 0x0000000000000048:word64]
	branch rax == 0x0000000000000000 l000000000040AF66
// DataOut: r12 r13 r14 r15b rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF66:
	rax = malloc(0x0000000000000010)
	branch rax != 0x0000000000000000 l000000000040AF2F
// DataOut: r12 r13 r14 r15b rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF75:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:0x0000000000000010 rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF26:
	Mem182[rdi + 0x0000000000000048:word64] = Mem142[rax + 0x0000000000000008:word64]
// DataOut: r12 r13 r14 r15b rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF2F:
	word64 rdx_177 = Mem142[rax + 0x0000000000000008:word64]
	Mem178[rax:word64] = rbp
	Mem179[rax + 0x0000000000000008:word64] = rdx_177
	Mem180[rax + 0x0000000000000008:word64] = rax
// DataOut: r12 r13 r14 r15b rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF3E:
	Mem160[rbp:word64] = 0x0000000000000000
	Mem162[rsi_146 + 0x0000000000000018:word64] = Mem160[rsi_146 + 0x0000000000000018:word64] - 0x0000000000000001
	r13_121 = r13_121 + 0x0000000000000010
	branch Mem162[rsi + 0x0000000000000008:word64] >u r13_121 l000000000040AE68
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF59:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEE1:
	r13_121 = r13_121 + 0x0000000000000010
	branch Mem0[rsi + 0x0000000000000008:word64] >u r13_121 l000000000040AE68
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEEF:
	return
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040AE40_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(uint64) edx r14:rsi r12:rdi r13:<invalid> rbx:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040AFB0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: ah al ax eax rax
// Preserved: rsp
fn000000000040AFB0_entry:
// DataOut: rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AFB0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040AFB0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn000000000040B640(word64 rdi, word64 r13, word64 r15, word64 qwArg00, word64 qwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r15 rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx di dil eax ebp ebx edi esp r12 r12b r12d r12w rax rbp rbx rdi rsp sp spl
// Preserved:
// Stack args: Stack +0000(64) Stack +0004(64)
fn000000000040B640_entry:
// DataOut: r13 r15 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B640:
	word64 rax_115
	word64 rbp_132 = rdi
	branch Mem0[rdi + 0x0000000000000040:word64] == 0x0000000000000000 l000000000040B655
// DataOut: r13 r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B64E:
	branch Mem0[rdi + 0x0000000000000020:word64] != 0x0000000000000000 l000000000040B6C6
// DataOut: r13 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6C6:
	word64 r12_122 = Mem0[r15:word64]
	branch r12_122 >=u Mem0[r15 + 0x0000000000000008:word64] l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6CF:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6D0:
	word64 rdi_134 = Mem0[r12_122:word64]
	branch rdi_134 != 0x0000000000000000 l000000000040B6E3
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6E3:
	word64 rsp_157
	word64 rdi_159
	word64 rbx_160
	byte SCZO_161
	byte Z_162
	word64 rax_163
	byte C_166
	byte SZO_167
	byte CZ_168
	word64 r15_169
	call Mem0[rbp_132 + 0x0000000000000040:word32] (retsize: 4; depth: 16)
		uses: C_138,CZ_127,dwLoc04_4,dwLoc08_7,dwLoc0C_12,qwLoc0C,r12_129,r13_128,r15_126,rax_130,rbp_132,rbx_135,rdi_134,rsp_133,SCZO_131,SZO_136,Z_137
		defs: C_166,CZ_168,r12_164,r13_165,r15_169,rax_163,rbp_158,rbx_160,rdi_159,rsp_157,SCZO_161,SZO_167,Z_162
	branch Mem0[rbx_160 + 0x0000000000000008:word64] != 0x0000000000000000 l000000000040B6E0
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6E0:
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6DC:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6EF:
	word64 r12_150 = r12_122 + 0x0000000000000010
	branch Mem0[rbp_132 + 0x0000000000000008:word64] >u r12_150 l000000000040B6D0
	rax_115 = Mem0[rbp_132 + 0x0000000000000008:word64]
	r12_122 = r12_150 + 0x0000000000000010
	branch rax_115 >u r12_150 + 0x0000000000000010 l000000000040B6D0
// DataOut: r12 r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6FC:
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B655:
	rax_115 = Mem0[rdi + 0x0000000000000008:word64]
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B659:
	word64 r12_104 = Mem0[r13:word64] + 0x0000000000000008
	branch r12_104 >=u rax_115 l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B662:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B668:
	word64 rdi_107 = Mem0[r12_104 + 0x0000000000000000:word64]
	branch rdi_107 != 0x0000000000000000 l000000000040B67B
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B67B:
	word64 rbx_108 = Mem0[rdi_107 + 0x0000000000000008:word64]
	free(rdi_107)
	branch rbx_108 != 0x0000000000000000 l000000000040B678
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B678:
	rdi_107 = rbx_108
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B672:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B689:
	word64 r12_101 = r12_104 + 0x0000000000000010
	branch Mem0[r13 + 0x0000000000000008:word64] >u r12_101 l000000000040B668
	r12_104 = r12_101 + 0x0000000000000010
	branch Mem0[r13 + 0x0000000000000008:word64] >u r12_101 + 0x0000000000000010 l000000000040B668
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B693:
	branch Mem0[rbp_132 + 0x0000000000000048:word64] != 0x0000000000000000 l000000000040B6A3
	branch Mem0[rbp_132 + 0x0000000000000048:word64] != 0x0000000000000000 l000000000040B6A3
	word64 rdi_31 = Mem0[rbp_132 + 0x0000000000000048:word64]
	branch rdi_31 != 0x0000000000000000 l000000000040B6A3
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6A3:
	word64 rbx_70 = Mem0[rdi_31 + 0x0000000000000008:word64]
	free(rdi_31)
	branch rbx_70 != 0x0000000000000000 l000000000040B6A0
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6A0:
	rdi_31 = rbx_70
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B69C:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6B1:
	free(Mem0[rbp_132:word64])
	free(qwArg00)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004021F0:
	word64 rsp_56
	word64 rbp_57
	word64 rdi_58
	word64 rbx_59
	byte SCZO_60
	byte Z_61
	word64 rax_62
	word64 r12_63
	word64 r13_64
	byte C_65
	byte SZO_66
	byte CZ_67
	word64 r15_68
	call Mem0[0x000000000061A040:word32] (retsize: 4; depth: 4)
		uses: C_36,CZ_17,dwLoc04_4,dwLoc08_7,dwLoc0C_12,qwLoc0C,r12_19,r13_18,r15_16,rax_20,rbp_52,rbx_49,rdi_51,rsp_55,SCZO_21,SZO_35,Z_37
		defs: C_65,CZ_67,r12_63,r13_64,r15_68,rax_62,rbp_57,rbx_59,rdi_58,rsp_56,SCZO_60,SZO_66,Z_61
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rax:<invalid> rdi:fp rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040B640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



void fn000000000040BB90(word64 rax, word64 rsi, word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040BB90_entry:
// DataOut: r11 r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BB90:
	word64 rcx_24
	word64 rbx_25
	word64 rsp_26
	word64 rdi_27
	word64 rax_28 = fn000000000040ACB0(rax, 0x00000001, rsi, rdi, r8, r11, out rcx_24, out rbx_25, out rsp_26, out rdi_27)
	word32 ebp_33 = (word32) rax_28
	branch rax_28 == 0x0000000000000000 l000000000040BD08
// DataOut: cl ebp ebx rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040BD08:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:fp - 0x0000000000000014 rbp:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBB6:
	word64 rdx_66 = Mem0[rsp_26 + 0x0000000000000008:word64]
	Mem68[rbx_25 + 0x0000000000000020:word64] = Mem0[rbx_25 + 0x0000000000000020:word64] - 0x0000000000000001
	branch Mem68[rdx_66:word64] == 0x0000000000000000 l000000000040BBD0
// DataOut: cl ebp ebx rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:fp - 0x0000000000000014 rbp:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBD0:
	word64 rax_72 = Mem68[rbx_25 + 0x0000000000000018:word64]
	Mem79[rbx_25 + 0x0000000000000018:word64] = rax_72 - 0x0000000000000001
	byte al_75 = (byte) (rax_72 - 0x0000000000000001)
	branch rax_72 < 0x0000000000000001 l000000000040BCE8
// DataOut: al cl eax ebp ebx rax rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BCE8:
	branch rcx_24 == 0x0000000000000000 l000000000040BCF8
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BCF4_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:(uint64) (eax & 0x00000001) r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BCF8:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:(uint64) (eax & 0x00000001) r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBE5:
	branch rcx_24 == 0x0000000000000000 l000000000040BBE9
// DataOut: al cl ebp ebx rax rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBE5_1:
// DataOut: al cl ebp ebx rax rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBE9:
	Mem81[rax_72 - 0x0000000000000076:byte] = __ror(Mem79[rax_72 - 0x0000000000000076:byte], 0x43)
	Mem84[rax_72 - 0x0000000000000076:byte] = Mem81[rax_72 - 0x0000000000000076:byte] + 0x01 + ((Mem79[rax_72 - 0x0000000000000076:byte] & 0x08) != 0x00)
	Mem87[rsp_26 - 0x0000000000000004:word32] = rbx_25
	Mem89[rax_72 - 0x000000000000007C:byte] = Mem87[rax_72 - 0x000000000000007C:byte] - 0x01
	Mem91[rdi_27:byte] = __ror(Mem89[rdi_27:byte], 0x88)
	__syscall(0x00)
	Mem93[rax_72 - 0x0000000000000001:byte] = Mem91[rax_72 - 0x0000000000000001:byte] + al_75
	branch rcx_24 == 0x0000000000000000 l000000000040BBFF
// DataOut: cl ebp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBFB_1:
// DataOut: cl ebp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -32(fp):rdi -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBFF:
	Mem96[rsp_26 - 0x0000000000000008:word32] = ebp_33
	Mem101[rsp_26 - 0x0000000000001163:word32] = rsp_26 - 0x0000000000000008
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -32(fp):rdi -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBC6:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040BB90_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> ebp:<invalid> cl:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> -4479(fp):fp - 0x0000000000000024 -36(fp):ebp -32(fp):rdi -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040BD70(word64 rcx, word32 edx, word64 rbp, word64 rsi, word64 rdi, word64 r8, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r14dOut, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs r8 rbp rcx rdi rsi
// LiveOut: r11 r11d r14d r15 r8 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040BD70_entry:
	def fp
	def rdi
	def edx
	def rsi
	def rbp
	def rbx
	def rcx
	def r8
	def fs
	def Mem0
	def bLocB0
	def qwLoc18
	def qwLoc10
	def qwLoc08
	def rspOut
	def rbpOut
	def r8Out
	def r9Out
	def r11Out
	def r14dOut
	def r15Out
	def dwLoc74
	def qwLoc90
	def qwLoc98
	def rLoc4
	def wLoc6A
	def wLoc6C
	def rLoc90
	def rLoc3
	def rLoc2
	def qwLoc68
	def rLoc1
	def rLocD0
// DataOut: edx fs r8 r9 rbp rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BD70:
	rsp_1 = fp
	rsp_2 = fp - 0x0000000000000004
	dwLoc04_4 = rdi
	rax_6 = (uint64) edx
	eax_7 = (word32) rax_6 (alias)
	rax_8 = (uint64) (eax_7 & 0x00000003)
	eax_9 = (word32) rax_8 (alias)
	rsp_10 = fp - 0x0000000000000008
	dwLoc08_12 = rsi
	r14_13 = rsi
	r14d_14 = (word32) r14_13 (alias)
	rsp_15 = fp - 0x000000000000000C
	dwLoc0C_17 = rbp
	v12_18 = fp - 0x000000000000000C
	rsp_19 = fp - 0x0000000000000010
	dwLoc10_20 = fp - 0x000000000000000C
	r12_21 = rdi
	r12d_22 = (word32) r12_21 (alias)
	rsp_23 = fp - 0x0000000000000014
	dwLoc14_24 = rbp
	rsp_25 = fp - 0x0000000000000018
	dwLoc18_27 = rbx
	rbx_29 = rcx
	ebx_30 = (word32) rbx_29 (alias)
	rsp_31 = fp - 0x00000000000000D0
	dwLoc98_32 = eax_9
	rax_33 = (uint64) edx
	eax_34 = (word32) rax_33 (alias)
	qwLocA0_35 = rsi
	rax_36 = (uint64) (eax_34 & 0x00000020)
	eax_37 = (word32) rax_36 (alias)
	dwLocB0_38 = edx
	qwLocA8_40 = r8
	rcx_43 = Mem0[fs:0x00000028:word64]
	qwLoc28_44 = rcx_43
	rcx_45 = 0x0000000000000000
	SCZO_46 = cond(eax_37 - 0x00000001)
	C_47 = SCZO_46 (alias)
	dwLoc78_48 = eax_37
	rax_49 = (uint64) (0x00000000 - C_47)
	eax_50 = (word32) rax_49 (alias)
	dwLocAC_51 = eax_50
	v20_52 = dwLocAC_51 & 0xFFFFFFE8
	dwLocAC_53 = v20_52
	SZO_54 = cond(dwLocAC_53)
	v21_55 = dwLocAC_53 + 0x00000400
	dwLocAC_56 = v21_55
	SCZO_57 = cond(v21_55)
	call localeconv (retsize: 8; depth: 216)
		uses: C_47,dwLoc04_4,dwLoc08_12,dwLoc0C_17,dwLoc10_20,dwLoc14_24,dwLoc18_27,dwLoc78_48,dwLoc98_32,dwLocAC_56,dwLocB0_38,eax_50,ebx_30,edx,fs,qwLoc28_44,qwLocA0_35,qwLocA8_40,r12_21,r12d_22,r14_13,r14d_14,r8,rax_49,rbp,rbx_29,rcx_45,rdi,rsi,rsp_31,SCZO_57,SZO_54
		defs: ah_92,al_95,ax_93,C_64,cl_85,CZ_79,CZP_90,dil_98,dl_96,eax_60,ebx_82,ecx_74,edi_84,edx_61,esi_88,fs_73,P_94,r10_83,r10b_101,r10d_100,r11_77,r12_68,r12d_89,r13_76,r14_66,r14d_91,r15_75,r15d_99,r8_72,r9_87,r9d_86,rax_62,rbp_67,rbx_69,rcx_70,rdi_59,rdx_78,rsi_65,rsp_58,S_81,SCZO_71,sil_97,SZO_63,Z_80
	r15_102 = Mem0[r8_72:word64]
	r15d_103 = (word32) r15_102 (alias)
	r13_104 = rax_62
	rdi_105 = r15_102
	rax_106 = DPB(rax_62, strlen(rdi_105), 0)
	rbp_107 = Mem0[rbp_67 + 0x0000000000000010:word64]
	r11_108 = rax_106
	r13_109 = Mem0[r13_104 + 0x0000000000000008:word64]
	rax_110 = rax_106 - 0x0000000000000001
	rdx_111 = 0x0000000000000001
	edx_112 = (word32) rdx_111 (alias)
	dl_113 = (byte) rdx_111 (alias)
	SCZO_114 = cond(rax_110 - 0x0000000000000010)
	C_115 = SCZO_114 (alias)
	SZO_116 = SCZO_114 (alias)
	Z_117 = SCZO_114 (alias)
	CZ_118 = SCZO_114 (alias)
	S_119 = SCZO_114 (alias)
	CZP_120 = SCZO_114 (alias)
	rdi_121 = r13_109
	rax_122 = 0x0000000000413990
	rdx_rax_123 = SEQ(rdx_111, rax_122) (alias)
	edx_eax_124 = rax_122 (alias)
	branch rax_110 <u 0x0000000000000010 l000000000040BE0A
// DataOut: bl ebx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdx
// DataOut (flags): C
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE06_1:
	r11_1892 = 0x0000000000000001
// DataOut: bl ebx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdx
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE0A:
	r11_125 = PHI(r11_108, r11_1892)
	branch rax_110 <u 0x0000000000000010 l000000000040BE0E
// DataOut: bl ebx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE0A_2:
	r15_1890 = 0x0000000000413990
	r15d_1891 = (word32) r15_1890 (alias)
// DataOut: bl ebx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE0E:
	r15_126 = PHI(r15_102, r15_1890)
	r15d_127 = PHI(r15d_103, r15d_1891)
	qwLoc80_128 = r11_125
	rax_129 = 0x0000000000413990
	SCZO_130 = cond(0x000000000041397F)
	C_131 = SCZO_130 (alias)
	rax_132 = 0x0000000000416919
	rdx_rax_133 = SEQ(rdx_111, rax_132) (alias)
	edx_eax_134 = rax_132 (alias)
	r11_135 = qwLoc80_128
	branch 0x000000000041397F <u 0x0000000000000000 l000000000040BE2A
// DataOut: bl ebx fs r11 r11d r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE26_3:
	r13_1889 = 0x0000000000416919
// DataOut: bl ebx fs r11 r11d r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(64) Local -00B0(32)

l000000000040BE2A:
	r13_136 = PHI(r13_109, r13_1889)
	rax_137 = r14_66
	rdx_rax_138 = SEQ(rdx_111, rax_137) (alias)
	edx_eax_139 = rax_137 (alias)
	r8_140 = r8_72 + 648
	SCZO_141 = cond(qwLocA8_40 - rbx_69)
	CZ_142 = SCZO_141 (alias)
	qwLocB8_143 = rax_137
	branch qwLocA8_40 >u rbx_69 l000000000040C0E0
// DataOut: bl ebx fs r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:0x0000000000416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C0E0:
	SZO_1823 = cond(rbx_69 & rbx_69)
	Z_1824 = SZO_1823 (alias)
	C_1825 = false
	branch Test(EQ,Z_1824) l000000000040BE59
// DataOut: bl ebx fs r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C0E9:
	rax_1826 = qwLocA8_40
	rdx_1827 = 0x0000000000000000
	rdx_rax_1828 = SEQ(rdx_1827, rax_1826) (alias)
	v35_1829 = rdx_rax_1828
	rdx_1830 = (uint64) (v35_1829 % rbx_69)
	edx_1831 = (word32) rdx_1830 (alias)
	dl_1832 = (byte) rdx_1830 (alias)
	rax_1833 = (uint64) (v35_1829 /u rbx_69)
	rdx_rax_1834 = SEQ(rdx_1830, rax_1833) (alias)
	edx_eax_1835 = rax_1833 (alias)
	SZO_1836 = cond(rdx_1830 & rdx_1830)
	Z_1837 = SZO_1836 (alias)
	C_1838 = false
	rsi_1839 = rax_1833
	sil_1840 = (byte) rsi_1839 (alias)
	esi_1841 = (word32) rsi_1839 (alias)
	branch Test(NE,Z_1837) l000000000040BE59
// DataOut: bl ebx fs r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C0FF:
	rdx_1842 = 0x0000000000000000
	rax_1843 = r12_68
	rdx_rax_1844 = SEQ(rdx_1842, rax_1843) (alias)
	v36_1845 = rdx_rax_1844
	rdx_1846 = (uint64) (v36_1845 % rsi_1839)
	rax_1847 = (uint64) (v36_1845 /u rsi_1839)
	rdi_1848 = rdx_1846 + rdx_1846 * 0x0000000000000004
	r10_1849 = rax_1847
	r10d_1850 = (word32) r10_1849 (alias)
	r10b_1851 = (byte) r10_1849 (alias)
	rdx_1852 = 0x0000000000000000
	rax_1853 = rdi_1848 + rdi_1848
	rdx_rax_1854 = SEQ(rdx_1852, rax_1853) (alias)
	v38_1855 = rdx_rax_1854
	rdx_1856 = (uint64) (v38_1855 % rsi_1839)
	rax_1857 = (uint64) (v38_1855 /u rsi_1839)
	eax_1858 = (word32) rax_1857 (alias)
	rdx_1859 = rdx_1856 + rdx_1856
	edx_1860 = (word32) rdx_1859 (alias)
	rdx_rax_1861 = SEQ(rdx_1859, rax_1857) (alias)
	edx_eax_1862 = rdx_1859 (alias)
	dl_1863 = (byte) rdx_1859 (alias)
	rdi_1864 = (uint64) eax_1858
	edi_1865 = (word32) rdi_1864 (alias)
	dil_1866 = (byte) rdi_1864 (alias)
	SCZO_1867 = cond(rsi_1839 - rdx_1859)
	C_1868 = SCZO_1867 (alias)
	SZO_1869 = SCZO_1867 (alias)
	Z_1870 = SCZO_1867 (alias)
	CZ_1871 = SCZO_1867 (alias)
	S_1872 = SCZO_1867 (alias)
	CZP_1873 = SCZO_1867 (alias)
	branch Test(ULE,CZ_1871) l000000000040C6E0
// DataOut: edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rdx
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) (rdx_rax /u rcx) r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:(uint64) (rdx_rax % rcx) r8:r8 + 648 rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C6E0:
	rcx_1881 = (uint64) (0x00000000 - C_1868)
	ecx_1882 = (word32) rcx_1881 (alias)
	rcx_1883 = (uint64) ~ecx_1882
	ecx_1884 = (word32) rcx_1883 (alias)
	rcx_1885 = (uint64) (ecx_1884 + 0x00000003)
	ecx_1886 = (word32) rcx_1885 (alias)
	cl_1887 = (byte) rcx_1885 (alias)
	SCZO_1888 = cond(ecx_1886)
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) (rdx_rax /u (uint64) (rdx_rax /u rcx)) r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) eax rbp:<invalid> r11:<invalid> rdx:(uint64) (rdx_rax % (uint64) (rdx_rax /u rcx)) + (uint64) (rdx_rax % (uint64) (rdx_rax /u rcx)) r8:r8 + 648 rsi:(uint64) (rdx_rax /u rcx) r10:(uint64) (rdx_rax /u (uint64) (rdx_rax /u rcx)) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C125:
	rcx_1874 = 0x0000000000000000
	SZO_1875 = cond(rdx_1859 & rdx_1859)
	Z_1876 = SZO_1875 (alias)
	C_1877 = false
	cl_1878 = Test(NE,Z_1876)
	rcx_1879 = DPB(rcx_1874, cl_1878, 0) (alias)
	ecx_1880 = DPB(ecx_74, cl_1878, 0) (alias)
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) (rdx_rax /u (uint64) (rdx_rax /u rcx)) r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) eax rbp:<invalid> r11:<invalid> rdx:(uint64) (rdx_rax % (uint64) (rdx_rax /u rcx)) + (uint64) (rdx_rax % (uint64) (rdx_rax /u rcx)) r8:r8 + 648 rsi:(uint64) (rdx_rax /u rcx) r10:(uint64) (rdx_rax /u (uint64) (rdx_rax /u rcx)) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040BE43:
	rdx_1779 = 0x0000000000000000
	rax_1780 = rbx_69
	rdx_rax_1781 = SEQ(rdx_1779, rax_1780) (alias)
	v28_1782 = rdx_rax_1781
	rdx_1783 = (uint64) (v28_1782 % qwLocA8_40)
	edx_1784 = (word32) rdx_1783 (alias)
	dl_1785 = (byte) rdx_1783 (alias)
	rax_1786 = (uint64) (v28_1782 /u qwLocA8_40)
	eax_1787 = (word32) rax_1786 (alias)
	rdx_rax_1788 = SEQ(rdx_1783, rax_1786) (alias)
	edx_eax_1789 = rax_1786 (alias)
	ah_1790 = SLICE(rax_1786, byte, 8) (alias)
	ax_1791 = (word16) rax_1786 (alias)
	al_1792 = (byte) rax_1786 (alias)
	SZO_1793 = cond(rdx_1783 & rdx_1783)
	Z_1794 = SZO_1793 (alias)
	C_1795 = false
	rcx_1796 = rax_1786
	ecx_1797 = (word32) rcx_1796 (alias)
	cl_1798 = (byte) rcx_1796 (alias)
	branch Test(EQ,Z_1794) l000000000040C2F0
// DataOut: bl ebx fs r11 r11d r12 r12d r13 r14d r15 r9 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C2F0:
	r10_1799 = rax_1786
	rdx_1800 = 0x0000000000000000
	r10_1801 = r10_1799 *s r12_68
	r10d_1802 = (word32) r10_1801 (alias)
	r10b_1803 = (byte) r10_1801 (alias)
	rax_1804 = r10_1801
	rdx_rax_1805 = SEQ(rdx_1800, rax_1804) (alias)
	v74_1806 = rdx_rax_1805
	rdx_1807 = (uint64) (v74_1806 % rcx_1796)
	edx_1808 = (word32) rdx_1807 (alias)
	dl_1809 = (byte) rdx_1807 (alias)
	rax_1810 = (uint64) (v74_1806 /u rcx_1796)
	rdx_rax_1811 = SEQ(rdx_1807, rax_1810) (alias)
	edx_eax_1812 = rax_1810 (alias)
	SCZO_1813 = cond(rax_1810 - r12_68)
	Z_1814 = SCZO_1813 (alias)
	branch Test(NE,Z_1814) l000000000040BE59
// DataOut: bl ebx fs r10 r10b r10d r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) (rdx_rax /u r8) r14:rsi r12:rdi rbx:rcx rcx:(uint64) (rdx_rax /u (r8 + 648)) r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:(uint64) (rdx_rax % r8) r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C308:
	rcx_1815 = 0x0000000000000000
	ecx_1816 = (word32) rcx_1815 (alias)
	cl_1817 = (byte) rcx_1815 (alias)
	rdi_1818 = 0x0000000000000000
	edi_1819 = (word32) rdi_1818 (alias)
	dil_1820 = (byte) rdi_1818 (alias)
	SZO_1821 = cond(edi_1819)
	C_1822 = false
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) (rdx_rax /u (uint64) (rdx_rax /u (r8 + 1296))) r14:rsi r12:rdi rbx:rcx rcx:(uint64) (rdx_rax /u (r8 + 648)) r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:(uint64) (rdx_rax % (uint64) (rdx_rax /u (r8 + 1296))) r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C12D:
	r10b_1288 = PHI(r10b_1851, r10b_1851, r10b_1803)
	r10d_1289 = PHI(r10d_1850, r10d_1850, r10d_1802)
	dil_1290 = PHI(dil_1866, dil_1866, dil_1820)
	sil_1291 = PHI(sil_1840, sil_1840, sil_97)
	CZP_1292 = PHI(CZP_1873, CZP_1873, CZP_120)
	esi_1293 = PHI(esi_1841, esi_1841, esi_88)
	edi_1294 = PHI(edi_1865, edi_1865, edi_1819)
	r10_1295 = PHI(r10_1849, r10_1849, r10_1801)
	S_1296 = PHI(S_1872, S_1872, S_119)
	CZ_1297 = PHI(CZ_1871, CZ_1871, CZ_142)
	ecx_1298 = PHI(ecx_1880, ecx_1886, ecx_1816)
	rcx_1299 = PHI(rcx_1879, rcx_1885, rcx_1815)
	cl_1300 = PHI(cl_1878, cl_1887, cl_1817)
	rax_1301 = PHI(rax_1857, rax_1857, rax_1810)
	eax_1302 = PHI(eax_1858, eax_1858, eax_1787)
	ah_1303 = PHI(ah_92, ah_92, ah_1790)
	ax_1304 = PHI(ax_93, ax_93, ax_1791)
	al_1305 = PHI(al_95, al_95, al_1792)
	rdx_1306 = PHI(rdx_1859, rdx_1859, rdx_1807)
	edx_1307 = PHI(edx_1860, edx_1860, edx_1808)
	rdx_rax_1308 = PHI(rdx_rax_1861, rdx_rax_1861, rdx_rax_1811)
	edx_eax_1309 = PHI(edx_eax_1862, edx_eax_1862, edx_eax_1812)
	dl_1310 = PHI(dl_1863, dl_1863, dl_1809)
	SCZO_1311 = PHI(SCZO_1867, SCZO_1888, SCZO_1813)
	rsi_1312 = PHI(rsi_1839, rsi_1839, rsi_65)
	rdi_1313 = PHI(rdi_1864, rdi_1864, rdi_1818)
	r9_1314 = (uint64) dwLocB0_38
	r9d_1315 = (word32) r9_1314 (alias)
	r8_1316 = qwLocB8_143
	rbx_1317 = 0x00000000FFFFFFFF
	ebx_1318 = (word32) rbx_1317 (alias)
	r9_1319 = (uint64) (r9d_1315 & 0x00000010)
	r9d_1320 = (word32) r9_1319 (alias)
	SZO_1321 = cond(r9d_1320)
	Z_1322 = SZO_1321 (alias)
	C_1323 = false
	branch Test(EQ,Z_1322) l000000000040C530
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C146:
	rsi_1519 = (uint64) dwLocAC_56
	sil_1520 = (byte) rsi_1519 (alias)
	esi_1521 = (word32) rsi_1519 (alias)
	SCZO_1522 = cond(r10_1295 - rsi_1519)
	C_1523 = SCZO_1522 (alias)
	branch Test(ULT,C_1523) l000000000040C710
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:(uint64) (r9d & 0x00000010) rsi:(uint64) (rdx_rax /u rcx) cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C710:
	r8_1774 = qwLocB8_143
	rbx_1775 = 0x0000000000000000
	ebx_1776 = (word32) rbx_1775 (alias)
	SZO_1777 = cond(ebx_1776)
	C_1778 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C153:
	rbx_1524 = 0x0000000000000000
	ebx_1525 = (word32) rbx_1524 (alias)
	SZO_1526 = cond(ebx_1525)
	C_1527 = false
	r12_1528 = (uint64) dwLocAC_56
	r12d_1529 = (word32) r12_1528 (alias)
// DataOut: ebx ecx edi fs r10 r11 r11d r12d r13 r15 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:0x00000000FFFFFFFF rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:rsi r10:<invalid> r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C17D:
	r10_1530 = PHI(r10_1295, r10_1576)
	r14_1531 = PHI(r14_66, r14_1595)
	ebx_1532 = PHI(ebx_1525, ebx_1611)
	ecx_1533 = PHI(ecx_1298, ecx_1604)
	SZO_1534 = PHI(SZO_1526, SZO_1607)
	Z_1535 = PHI(Z_1322, Z_1619)
	C_1536 = PHI(C_1527, C_1609)
	edx_1537 = PHI(edx_1307, edx_1585)
	rbx_1538 = PHI(rbx_1524, rbx_1610)
	rdi_1539 = PHI(rdi_1313, rdi_1596)
	rax_1540 = r10_1530
	rdx_1541 = 0x0000000000000000
	rdx_rax_1542 = SEQ(rdx_1541, rax_1540) (alias)
	v49_1543 = rdx_rax_1542
	rdx_1544 = (uint64) (v49_1543 % rsi_1519)
	rax_1545 = (uint64) (v49_1543 /u rsi_1519)
	r8_1546 = rax_1545
	eax_1547 = rdx_1544 + rdx_1544 * 0x00000004
	rax_1548 = DPB(rax_1545, eax_1547, 0) (alias)
	rdx_1549 = 0x0000000000000000
	r10_1550 = r8_1546
	eax_1551 = rdi_1539 + rax_1548 * 0x00000002
	edx_eax_1552 = SEQ(edx_1537, eax_1551) (alias)
	rdi_1553 = (uint64) ecx_1533
	edi_1554 = (word32) rdi_1553 (alias)
	rdi_1555 = (uint64) (edi_1554 >> 0x00000001)
	v51_1556 = edx_eax_1552
	edx_1557 = (uint32) (v51_1556 % r12d_1529)
	rdx_1558 = DPB(rdx_1549, edx_1557, 0) (alias)
	eax_1559 = (uint32) (v51_1556 /u r12d_1529)
	r14d_1560 = rdi_1555 + rdx_1558 * 0x00000002
	rdi_1561 = (uint64) eax_1559
	rcx_1562 = (uint64) (ecx_1533 + r14d_1560)
	ecx_1563 = (word32) rcx_1562 (alias)
	SCZO_1564 = cond(r12d_1529 - r14d_1560)
	CZ_1565 = SCZO_1564 (alias)
	branch Test(UGT,CZ_1565) l000000000040C160
	rax_1566 = r10_1550
	rdx_1567 = 0x0000000000000000
	rdx_rax_1568 = SEQ(rdx_1567, rax_1566) (alias)
	v57_1569 = rdx_rax_1568
	rdx_1570 = (uint64) (v57_1569 % rsi_1519)
	rax_1571 = (uint64) (v57_1569 /u rsi_1519)
	r8_1572 = rax_1571
	eax_1573 = rdx_1570 + rdx_1570 * 0x00000004
	rax_1574 = DPB(rax_1571, eax_1573, 0) (alias)
	rdx_1575 = 0x0000000000000000
	r10_1576 = r8_1572
	r10d_1577 = (word32) r10_1576 (alias)
	r10b_1578 = (byte) r10_1576 (alias)
	eax_1579 = rdi_1561 + rax_1574 * 0x00000002
	edx_eax_1580 = SEQ(edx_1557, eax_1579) (alias)
	rdi_1581 = (uint64) ecx_1563
	edi_1582 = (word32) rdi_1581 (alias)
	rdi_1583 = (uint64) (edi_1582 >> 0x00000001)
	v58_1584 = edx_eax_1580
	edx_1585 = (uint32) (v58_1584 % r12d_1529)
	rdx_1586 = DPB(rdx_1575, edx_1585, 0) (alias)
	eax_1587 = (uint32) (v58_1584 /u r12d_1529)
	rax_1588 = DPB(rax_1574, eax_1587, 0) (alias)
	rdx_rax_1589 = DPB(rdx_rax_1568, eax_1587, 0) (alias)
	edx_eax_1590 = SEQ(edx_1585, eax_1587) (alias)
	ah_1591 = SLICE(eax_1587, byte, 8) (alias)
	ax_1592 = (word16) eax_1587 (alias)
	al_1593 = (byte) eax_1587 (alias)
	r14d_1594 = rdi_1583 + rdx_1586 * 0x00000002
	r14_1595 = DPB(r14_1531, r14d_1594, 0) (alias)
	rdi_1596 = (uint64) eax_1587
	edi_1597 = (word32) rdi_1596 (alias)
	dil_1598 = (byte) rdi_1596 (alias)
	rcx_1599 = (uint64) (ecx_1563 + r14d_1594)
	ecx_1600 = (word32) rcx_1599 (alias)
	cl_1601 = (byte) rcx_1599 (alias)
	SCZO_1602 = cond(r12d_1529 - r14d_1594)
	CZ_1603 = SCZO_1602 (alias)
	branch Test(UGT,CZ_1603) l000000000040C160
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) cl:<invalid> eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C160:
	SZO_1767 = cond(ecx_1600 & ecx_1600)
	Z_1768 = SZO_1767 (alias)
	C_1769 = false
	cl_1770 = Test(NE,Z_1768)
	ecx_1771 = (word32) cl_1770
	rcx_1772 = DPB(rcx_1599, ecx_1771, 0) (alias)
	cl_1773 = (byte) ecx_1771 (alias)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C1A8:
	SCZO_1749 = cond(r12d_1529 - ecx_1600)
	C_1750 = SCZO_1749 (alias)
	rcx_1751 = (uint64) (0x00000000 - C_1750)
	ecx_1752 = (word32) rcx_1751 (alias)
	rcx_1753 = (uint64) ~ecx_1752
	ecx_1754 = (word32) rcx_1753 (alias)
	rcx_1755 = (uint64) (ecx_1754 + 0x00000003)
	ecx_1756 = (word32) rcx_1755 (alias)
	SCZO_1757 = cond(r12d_1529 - ecx_1756)
	C_1758 = SCZO_1757 (alias)
	rcx_1759 = (uint64) (0x00000000 - C_1758)
	ecx_1760 = (word32) rcx_1759 (alias)
	rcx_1761 = (uint64) ~ecx_1760
	ecx_1762 = (word32) rcx_1761 (alias)
	rcx_1763 = (uint64) (ecx_1762 + 0x00000003)
	ecx_1764 = (word32) rcx_1763 (alias)
	cl_1765 = (byte) rcx_1763 (alias)
	SCZO_1766 = cond(ecx_1764)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C168:
	ecx_1604 = PHI(ecx_1764, ecx_1771)
	rcx_1605 = PHI(rcx_1763, rcx_1772)
	cl_1606 = PHI(cl_1765, cl_1773)
	SZO_1607 = PHI(SZO_1534, SZO_1767)
	Z_1608 = PHI(Z_1535, Z_1768)
	C_1609 = PHI(C_1758, C_1769)
	rbx_1610 = (uint64) (ebx_1532 + 0x00000001)
	ebx_1611 = (word32) rbx_1610 (alias)
	SCZO_1612 = cond(rsi_1519 - r8_1572)
	CZ_1613 = SCZO_1612 (alias)
	branch Test(UGT,CZ_1613) l000000000040C49F
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C49F:
	SCZO_1620 = cond(r8_1572 - 0x0000000000000009)
	CZ_1621 = SCZO_1620 (alias)
	branch Test(UGT,CZ_1621) l000000000040C768
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4A9:
	SCZO_1622 = cond(dwLoc98_32 - 0x00000001)
	Z_1623 = SCZO_1622 (alias)
	branch Test(EQ,Z_1623) l000000000040C7B0
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7B0:
	rdx_1736 = (uint64) eax_1587
	edx_1737 = (word32) rdx_1736 (alias)
	rdx_1738 = (uint64) (edx_1737 & 0x00000001)
	edx_1739 = (word32) rdx_1738 (alias)
	rdx_1740 = (uint64) (edx_1739 + ecx_1604)
	edx_1741 = (word32) rdx_1740 (alias)
	SCZO_1742 = cond(edx_1741 - 0x00000002)
	SZO_1743 = SCZO_1742 (alias)
	dl_1744 = Test(GT,SZO_1743)
	edx_1745 = DPB(edx_1741, dl_1744, 0) (alias)
	rdx_1746 = DPB(rdx_1740, dl_1744, 0) (alias)
	rdx_rax_1747 = DPB(rdx_rax_1589, dl_1744, 64) (alias)
	edx_eax_1748 = DPB(edx_eax_1590, dl_1744, 32) (alias)
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4B4:
	r12_1720 = (uint64) dwLoc98_32
	r12d_1721 = (word32) r12_1720 (alias)
	SZO_1722 = cond(ecx_1604 & ecx_1604)
	dl_1723 = Test(GT,SZO_1722)
	edx_1724 = DPB(edx_1585, dl_1723, 0) (alias)
	SZO_1725 = cond(r12d_1721 & r12d_1721)
	Z_1726 = SZO_1725 (alias)
	sil_1727 = Test(EQ,Z_1726)
	esi_1728 = DPB(esi_1521, sil_1727, 0) (alias)
	rdx_1729 = (uint64) (edx_1724 & esi_1728)
	edx_1730 = (word32) rdx_1729 (alias)
	rdx_rax_1731 = SEQ(rdx_1729, rax_1588) (alias)
	edx_eax_1732 = rdx_1729 (alias)
	dl_1733 = (byte) rdx_1729 (alias)
	SZO_1734 = cond(edx_1730)
	C_1735 = false
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4C7:
	sil_1624 = PHI(sil_1727, sil_1520)
	esi_1625 = PHI(esi_1728, esi_1521)
	r12_1626 = PHI(r12_1720, r12_1528)
	r12d_1627 = PHI(r12d_1721, r12d_1529)
	rdx_1628 = PHI(rdx_1729, rdx_1746)
	edx_1629 = PHI(edx_1730, edx_1745)
	rdx_rax_1630 = PHI(rdx_rax_1731, rdx_rax_1747)
	edx_eax_1631 = PHI(edx_eax_1732, edx_eax_1748)
	dl_1632 = PHI(dl_1733, dl_1744)
	SCZO_1633 = PHI(SCZO_1622, SCZO_1742)
	SZO_1634 = cond(dl_1632 & dl_1632)
	Z_1635 = SZO_1634 (alias)
	C_1636 = false
	branch Test(EQ,Z_1635) l000000000040C788
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C788:
	SZO_1717 = cond(eax_1587 & eax_1587)
	Z_1718 = SZO_1717 (alias)
	C_1719 = false
	branch Test(NE,Z_1718) l000000000040C4DB
// DataOut: dil ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4CF:
	edi_1693 = rax_1588 + 0x0000000000000001
	rdi_1694 = DPB(rdi_1596, edi_1693, 0) (alias)
	dil_1695 = (byte) edi_1693 (alias)
	SCZO_1696 = cond(edi_1693 - 0x0000000A)
	Z_1697 = SCZO_1696 (alias)
	branch Test(EQ,Z_1697) l000000000040C7CE
// DataOut: dil ebx fs r10 r10d r11 r11d r13 r14d r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7CE:
	r10_1698 = r8_1572 + 0x0000000000000001
	r10d_1699 = (word32) r10_1698 (alias)
	r10b_1700 = (byte) r10_1698 (alias)
	SCZO_1701 = cond(r10_1698 - 0x000000000000000A)
	Z_1702 = SCZO_1701 (alias)
	branch Test(NE,Z_1702) l000000000040C7FF
// DataOut: ebx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7FF:
	rcx_1712 = 0x0000000000000000
	ecx_1713 = (word32) rcx_1712 (alias)
	cl_1714 = (byte) rcx_1712 (alias)
	SZO_1715 = cond(0x00000000)
	C_1716 = false
// DataOut: ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) + 0x0000000000000001 r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C790:
	r10b_1669 = PHI(r10b_1578, r10b_1700)
	r10d_1670 = PHI(r10d_1577, r10d_1699)
	dil_1671 = PHI(dil_1598, dil_1695)
	edi_1672 = PHI(edi_1597, edi_1693)
	r10_1673 = PHI(r10_1576, r10_1698)
	ecx_1674 = PHI(ecx_1604, ecx_1713)
	rcx_1675 = PHI(rcx_1605, rcx_1712)
	cl_1676 = PHI(cl_1606, cl_1714)
	SCZO_1677 = PHI(SCZO_1633, SCZO_1701)
	rdi_1678 = PHI(rdi_1596, rdi_1694)
	SZO_1679 = cond(bLocB0 & 0x08)
	Z_1680 = SZO_1679 (alias)
	C_1681 = false
	branch Test(NE,Z_1680) l000000000040C7C2
// DataOut: ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:<invalid> r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7C2:
	r8_1687 = qwLocB8_143
	rdi_1688 = 0x0000000000000000
	edi_1689 = (word32) rdi_1688 (alias)
	dil_1690 = (byte) rdi_1688 (alias)
	SZO_1691 = cond(0x00000000)
	C_1692 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:<invalid> r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C797:
	rdi_1682 = 0x0000000000000000
	edi_1683 = (word32) rdi_1682 (alias)
	dil_1684 = (byte) rdi_1682 (alias)
	SZO_1685 = cond(0x00000000)
	C_1686 = false
// DataOut: dil ebx fs r10 r10d r11 r13 r14d r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:<invalid> r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C7D8:
	r8_1703 = qwLocB8_143
	rcx_1704 = 0x0000000000000000
	ecx_1705 = (word32) rcx_1704 (alias)
	cl_1706 = (byte) rcx_1704 (alias)
	rdi_1707 = 0x0000000000000000
	edi_1708 = (word32) rdi_1707 (alias)
	dil_1709 = (byte) rdi_1707 (alias)
	SZO_1710 = cond(0x00000000)
	C_1711 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) + 0x0000000000000001 r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C4DB:
	edi_1637 = PHI(edi_1693, edi_1597, edi_1683)
	r10_1638 = PHI(r10_1576, r10_1576, r10_1673)
	Z_1639 = PHI(Z_1697, Z_1718, Z_1680)
	SCZO_1640 = PHI(SCZO_1696, SCZO_1633, SCZO_1677)
	rax_1641 = qwLocA0_35
	rdi_1642 = (uint64) (edi_1637 + 0x00000030)
	dil_1643 = (byte) rdi_1642 (alias)
	rdx_1644 = r11_135
	rsi_1645 = r15_126
	dwLoc74_1646 = r9d_1320
	qwLoc90_1647 = r10_1638
	qwLoc80_1648 = r11_135
	r8_1649 = r8_1572 + 0x0000000000000287
	Mem1650[rax_1641 + 0x0000000000000287:byte] = dil_1643
	r8_1651 = r8_1649 - r11_135
	rdi_1652 = r8_1651
	rax_1653 = memcpy(rdi_1652, rsi_1645, rdx_1644)
	r11_1654 = qwLoc80_1648
	r10_1655 = qwLoc90_1647
	r10d_1656 = (word32) r10_1655 (alias)
	r10b_1657 = (byte) r10_1655 (alias)
	r8_1658 = rax_1653
	r9_1659 = (uint64) dwLoc74_1646
	r9d_1660 = (word32) r9_1659 (alias)
	rcx_1661 = 0x0000000000000000
	ecx_1662 = (word32) rcx_1661 (alias)
	cl_1663 = (byte) rcx_1661 (alias)
	rdi_1664 = 0x0000000000000000
	edi_1665 = (word32) rdi_1664 (alias)
	dil_1666 = (byte) rdi_1664 (alias)
	SZO_1667 = cond(0x00000000)
	C_1668 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:<invalid> r9:(uint64) (r9d & 0x00000010) rsi:<invalid> eax:(uint32) (edx_eax /u r12d) edx:<invalid> r14d:<invalid> cl:<invalid> ecx:<invalid> dl:<invalid> sil:Test(EQ,Z) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C174:
	SCZO_1618 = cond(ebx_1611 - 0x00000008)
	Z_1619 = SCZO_1618 (alias)
	branch Test(EQ,Z_1619) l000000000040C768
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C768:
	CZ_1614 = PHI(CZ_1613, CZ_1621)
	Z_1615 = PHI(Z_1619, Z_1608)
	SCZO_1616 = PHI(SCZO_1618, SCZO_1620)
	r8_1617 = qwLocB8_143
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:(uint64) (uint32) (edx_eax /u r12d) rbp:<invalid> r11:<invalid> rdx:<invalid> r8:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r10:(uint64) (rdx_rax /u (uint64) ((eax & 0xFFFFFFE8) + 0x00000400)) r9:(uint64) (r9d & 0x00000010) rsi:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) eax:(uint32) (edx_eax /u r12d) edx:(uint32) (edx_eax % r12d) r14d:<invalid> cl:<invalid> ecx:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C530:
	dwLoc74_1324 = PHI(dwLoc74, dwLoc74, dwLoc74_1646, dwLoc74, dwLoc74, dwLoc74)
	qwLoc90_1325 = PHI(qwLoc90, qwLoc90, qwLoc90_1647, qwLoc90, qwLoc90, qwLoc90)
	qwLoc80_1326 = PHI(qwLoc80_128, qwLoc80_128, qwLoc80_1648, qwLoc80_128, qwLoc80_128, qwLoc80_128)
	r10b_1327 = PHI(r10b_1288, r10b_1578, r10b_1657, r10b_1700, r10b_1669, r10b_1288)
	r10d_1328 = PHI(r10d_1289, r10d_1577, r10d_1656, r10d_1699, r10d_1670, r10d_1289)
	dil_1329 = PHI(dil_1290, dil_1598, dil_1666, dil_1709, dil_1690, dil_1290)
	sil_1330 = PHI(sil_1291, sil_1520, sil_1624, sil_1624, sil_1624, sil_1520)
	esi_1331 = PHI(esi_1293, esi_1521, esi_1625, esi_1625, esi_1625, esi_1521)
	edi_1332 = PHI(edi_1294, edi_1597, edi_1665, edi_1708, edi_1689, edi_1294)
	r10_1333 = PHI(r10_1295, r10_1576, r10_1655, r10_1698, r10_1673, r10_1295)
	r11_1334 = PHI(r11_135, r11_135, r11_1654, r11_135, r11_135, r11_135)
	r8_1335 = PHI(r8_1316, r8_1617, r8_1658, r8_1703, r8_1687, r8_1774)
	r9_1336 = PHI(r9_1319, r9_1319, r9_1659, r9_1319, r9_1319, r9_1319)
	r9d_1337 = PHI(r9d_1320, r9d_1320, r9d_1660, r9d_1320, r9d_1320, r9d_1320)
	r12_1338 = PHI(r12_68, r12_1528, r12_1626, r12_1626, r12_1626, r12_68)
	r12d_1339 = PHI(r12d_89, r12d_1529, r12d_1627, r12d_1627, r12d_1627, r12d_89)
	r14_1340 = PHI(r14_66, r14_1595, r14_1595, r14_1595, r14_1595, r14_66)
	r14d_1341 = PHI(r14d_91, r14d_1594, r14d_1594, r14d_1594, r14d_1594, r14d_91)
	CZ_1342 = PHI(CZ_1297, CZ_1614, CZ_1621, CZ_1621, CZ_1621, CZ_1297)
	ebx_1343 = PHI(ebx_1318, ebx_1611, ebx_1611, ebx_1611, ebx_1611, ebx_1776)
	ecx_1344 = PHI(ecx_1298, ecx_1604, ecx_1662, ecx_1705, ecx_1674, ecx_1298)
	rcx_1345 = PHI(rcx_1299, rcx_1605, rcx_1661, rcx_1704, rcx_1675, rcx_1299)
	cl_1346 = PHI(cl_1300, cl_1606, cl_1663, cl_1706, cl_1676, cl_1300)
	SZO_1347 = PHI(SZO_1321, SZO_1607, SZO_1667, SZO_1710, SZO_1691, SZO_1777)
	C_1348 = PHI(C_1323, C_1609, C_1668, C_1711, C_1692, C_1778)
	rax_1349 = PHI(rax_1301, rax_1588, rax_1653, rax_1588, rax_1588, rax_1301)
	eax_1350 = PHI(eax_1302, eax_1587, eax_1587, eax_1587, eax_1587, eax_1302)
	ah_1351 = PHI(ah_1303, ah_1591, ah_1591, ah_1591, ah_1591, ah_1303)
	ax_1352 = PHI(ax_1304, ax_1592, ax_1592, ax_1592, ax_1592, ax_1304)
	al_1353 = PHI(al_1305, al_1593, al_1593, al_1593, al_1593, al_1305)
	rdx_1354 = PHI(rdx_1306, rdx_1586, rdx_1644, rdx_1628, rdx_1628, rdx_1306)
	edx_1355 = PHI(edx_1307, edx_1585, edx_1629, edx_1629, edx_1629, edx_1307)
	rdx_rax_1356 = PHI(rdx_rax_1308, rdx_rax_1589, rdx_rax_1630, rdx_rax_1630, rdx_rax_1630, rdx_rax_1308)
	edx_eax_1357 = PHI(edx_eax_1309, edx_eax_1590, edx_eax_1631, edx_eax_1631, edx_eax_1631, edx_eax_1309)
	dl_1358 = PHI(dl_1310, dl_1310, dl_1632, dl_1632, dl_1632, dl_1310)
	rbx_1359 = PHI(rbx_1317, rbx_1610, rbx_1610, rbx_1610, rbx_1610, rbx_1775)
	rsi_1360 = PHI(rsi_1312, rsi_1519, rsi_1645, rsi_1519, rsi_1519, rsi_1519)
	rdi_1361 = PHI(rdi_1313, rdi_1596, rdi_1664, rdi_1707, rdi_1688, rdi_1313)
	SCZO_1362 = cond(dwLoc98_32 - 0x00000001)
	Z_1363 = SCZO_1362 (alias)
	branch Test(EQ,Z_1363) l000000000040C6F0
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> eax:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C6F0:
	rax_1498 = r10_1333
	eax_1499 = (word32) rax_1498 (alias)
	rcx_1500 = (int64) ecx_1344
	ecx_1501 = (word32) rcx_1500 (alias)
	cl_1502 = (byte) rcx_1500 (alias)
	rax_1503 = (uint64) (eax_1499 & 0x00000001)
	rax_1504 = rax_1503 + rcx_1500
	SCZO_1505 = cond(rax_1504)
	Z_1506 = SCZO_1505 (alias)
	al_1507 = Test(NE,Z_1506)
	eax_1508 = (word32) al_1507
	rdi_1509 = (uint64) (edi_1332 + eax_1508)
	edi_1510 = (word32) rdi_1509 (alias)
	SCZO_1511 = cond(edi_1510 - 0x00000005)
	SZO_1512 = SCZO_1511 (alias)
	al_1513 = Test(GT,SZO_1512)
	eax_1514 = DPB(eax_1508, al_1513, 0) (alias)
	rax_1515 = DPB(rax_1504, al_1513, 0) (alias)
	rdx_rax_1516 = DPB(rdx_rax_1356, al_1513, 0) (alias)
	edx_eax_1517 = DPB(edx_eax_1357, al_1513, 0) (alias)
	ax_1518 = DPB(ax_1352, al_1513, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> eax:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C53B:
	rsi_1476 = (uint64) dwLoc98_32
	esi_1477 = (word32) rsi_1476 (alias)
	rax_1478 = 0x0000000000000000
	eax_1479 = (word32) rax_1478 (alias)
	rdx_rax_1480 = SEQ(rdx_1354, rax_1478) (alias)
	edx_eax_1481 = rax_1478 (alias)
	ax_1482 = (word16) rax_1478 (alias)
	al_1483 = (byte) rax_1478 (alias)
	SZO_1484 = cond(esi_1477 & esi_1477)
	Z_1485 = SZO_1484 (alias)
	C_1486 = false
	branch Test(NE,Z_1485) l000000000040C54C
// DataOut: al ebx ecx edi fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> cl:<invalid> eax:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C545:
	rcx_1487 = (uint64) (ecx_1344 + edi_1332)
	ecx_1488 = (word32) rcx_1487 (alias)
	cl_1489 = (byte) rcx_1487 (alias)
	SZO_1490 = cond(ecx_1488 & ecx_1488)
	C_1491 = false
	al_1492 = Test(GT,SZO_1490)
	eax_1493 = DPB(eax_1479, al_1492, 0) (alias)
	rax_1494 = DPB(rax_1478, al_1492, 0) (alias)
	rdx_rax_1495 = DPB(rdx_rax_1480, al_1492, 0) (alias)
	edx_eax_1496 = DPB(edx_eax_1481, al_1492, 0) (alias)
	ax_1497 = DPB(ax_1482, al_1492, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:(uint64) eax cl:<invalid> eax:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C54C:
	esi_1364 = PHI(esi_1477, esi_1477, esi_1331)
	edi_1365 = PHI(edi_1332, edi_1332, edi_1510)
	ecx_1366 = PHI(ecx_1344, ecx_1488, ecx_1501)
	rcx_1367 = PHI(rcx_1345, rcx_1487, rcx_1500)
	cl_1368 = PHI(cl_1346, cl_1489, cl_1502)
	rax_1369 = PHI(rax_1478, rax_1494, rax_1515)
	eax_1370 = PHI(eax_1479, eax_1493, eax_1514)
	ax_1371 = PHI(ax_1482, ax_1497, ax_1518)
	al_1372 = PHI(al_1483, al_1492, al_1513)
	rdx_rax_1373 = PHI(rdx_rax_1480, rdx_rax_1495, rdx_rax_1516)
	edx_eax_1374 = PHI(edx_eax_1481, edx_eax_1496, edx_eax_1517)
	SCZO_1375 = PHI(SCZO_1362, SCZO_1362, SCZO_1511)
	rsi_1376 = PHI(rsi_1476, rsi_1476, rsi_1360)
	rdi_1377 = PHI(rdi_1361, rdi_1361, rdi_1509)
	SZO_1378 = cond(al_1372 & al_1372)
	Z_1379 = SZO_1378 (alias)
	C_1380 = false
	branch Test(EQ,Z_1379) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) eax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C550:
	r10_1438 = r10_1333 + 0x0000000000000001
	r10d_1439 = (word32) r10_1438 (alias)
	r10b_1440 = (byte) r10_1438 (alias)
	SZO_1441 = cond(r9d_1337 & r9d_1337)
	Z_1442 = SZO_1441 (alias)
	C_1443 = false
	branch Test(EQ,Z_1442) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) eax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C559:
	rax_1444 = (uint64) dwLocAC_56
	eax_1445 = (word32) rax_1444 (alias)
	rdx_rax_1446 = SEQ(rdx_1354, rax_1444) (alias)
	edx_eax_1447 = rax_1444 (alias)
	ah_1448 = SLICE(rax_1444, byte, 8) (alias)
	ax_1449 = (word16) rax_1444 (alias)
	al_1450 = (byte) rax_1444 (alias)
	SCZO_1451 = cond(rax_1444 - r10_1438)
	Z_1452 = SCZO_1451 (alias)
	branch Test(NE,Z_1452) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:Test(GT,SZO) eax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C562:
	SCZO_1453 = cond(ebx_1343 - 0x00000008)
	Z_1454 = SCZO_1453 (alias)
	branch Test(EQ,Z_1454) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C567:
	rbx_1455 = (uint64) (ebx_1343 + 0x00000001)
	ebx_1456 = (word32) rbx_1455 (alias)
	SZO_1457 = cond(bLocB0 & 0x08)
	Z_1458 = SZO_1457 (alias)
	C_1459 = false
	rdx_1460 = 0x0000000000000001
	rdx_rax_1461 = SEQ(rdx_1460, rax_1444) (alias)
	edx_eax_1462 = rdx_1460 (alias)
	branch Test(NE,Z_1458) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C577:
	rax_1463 = rax_1444 - 0x0000000000000001
	Mem1464[rax_1463 - 0x0000000000000001:byte] = 0x30
	rdx_1465 = r11_1334
	rsi_1466 = r15_126
	qwLoc98_1467 = r10_1438
	rax_1468 = rax_1463 - r11_1334
	SCZO_1469 = cond(rax_1468)
	rdi_1470 = rax_1468
	rax_1471 = memcpy(rdi_1470, rsi_1466, rdx_1465)
	r10_1472 = qwLoc98_1467
	r10d_1473 = (word32) r10_1472 (alias)
	r10b_1474 = (byte) r10_1472 (alias)
	r8_1475 = rax_1471
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) r14:<invalid> r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:0x00000001 r14d:<invalid> ecx:<invalid> dl:0x01 sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C5A0:
	qwLoc98_1381 = PHI(qwLoc98, qwLoc98, qwLoc98, qwLoc98, qwLoc98, qwLoc98_1467)
	r10b_1382 = PHI(r10b_1327, r10b_1440, r10b_1440, r10b_1440, r10b_1440, r10b_1474)
	r10d_1383 = PHI(r10d_1328, r10d_1439, r10d_1439, r10d_1439, r10d_1439, r10d_1473)
	r10_1384 = PHI(r10_1333, r10_1438, r10_1438, r10_1438, r10_1438, r10_1472)
	r8_1385 = PHI(r8_1335, r8_1335, r8_1335, r8_1335, r8_1335, r8_1475)
	ebx_1386 = PHI(ebx_1343, ebx_1343, ebx_1343, ebx_1343, ebx_1456, ebx_1456)
	SZO_1387 = PHI(SZO_1378, SZO_1441, SZO_1441, SZO_1441, SZO_1457, SZO_1457)
	Z_1388 = PHI(Z_1379, Z_1442, Z_1452, Z_1454, Z_1458, Z_1458)
	C_1389 = PHI(C_1380, C_1443, C_1443, C_1443, C_1459, C_1459)
	rax_1390 = PHI(rax_1369, rax_1369, rax_1444, rax_1444, rax_1444, rax_1471)
	eax_1391 = PHI(eax_1370, eax_1370, eax_1445, eax_1445, eax_1445, eax_1445)
	ah_1392 = PHI(ah_1351, ah_1351, ah_1448, ah_1448, ah_1448, ah_1448)
	ax_1393 = PHI(ax_1371, ax_1371, ax_1449, ax_1449, ax_1449, ax_1449)
	al_1394 = PHI(al_1372, al_1372, al_1450, al_1450, al_1450, al_1450)
	rdx_1395 = PHI(rdx_1354, rdx_1354, rdx_1354, rdx_1354, rdx_1460, rdx_1465)
	rdx_rax_1396 = PHI(rdx_rax_1373, rdx_rax_1373, rdx_rax_1446, rdx_rax_1446, rdx_rax_1461, rdx_rax_1461)
	edx_eax_1397 = PHI(edx_eax_1374, edx_eax_1374, edx_eax_1447, edx_eax_1447, edx_eax_1462, edx_eax_1462)
	SCZO_1398 = PHI(SCZO_1375, SCZO_1375, SCZO_1451, SCZO_1453, SCZO_1453, SCZO_1469)
	rbx_1399 = PHI(rbx_1359, rbx_1359, rbx_1359, rbx_1359, rbx_1455, rbx_1455)
	rsi_1400 = PHI(rsi_1376, rsi_1376, rsi_1376, rsi_1376, rsi_1376, rsi_1466)
	rdi_1401 = PHI(rdi_1377, rdi_1377, rdi_1377, rdi_1377, rdi_1377, rdi_1470)
	r12_1402 = r8_1385
	r12d_1403 = (word32) r12_1402 (alias)
	r9_1404 = 0x00000000CCCCCCCD
	r9d_1405 = (word32) r9_1404 (alias)
// DataOut: ebx fs r10 r10b r11 r11d r12 r13 r14d r15 r8 r9 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:<invalid> rsi:<invalid> al:<invalid> eax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C5B0:
	r10_1406 = PHI(r10_1384, r10_1430)
	r12_1407 = PHI(r12_1402, r12_1409)
	rax_1408 = r10_1406
	r12_1409 = r12_1407 - 0x0000000000000001
	r12d_1410 = (word32) r12_1409 (alias)
	rdx_rax_1411 = rcx_1367 *u rax_1408
	rdx_1412 = SLICE(rdx_rax_1411, word64, 64) (alias)
	rdx_1413 = rdx_1412 >>u 0x0000000000000003
	rax_1414 = rdx_1413 + rdx_1413 * 0x0000000000000004
	rax_1415 = rax_1414 + rax_1414
	eax_1416 = (word32) rax_1415 (alias)
	rdx_rax_1417 = SEQ(rdx_1413, rax_1415) (alias)
	edx_eax_1418 = rax_1415 (alias)
	ah_1419 = SLICE(rax_1415, byte, 8) (alias)
	ax_1420 = (word16) rax_1415 (alias)
	al_1421 = (byte) rax_1415 (alias)
	r10_1422 = r10_1406 - rax_1415
	r10d_1423 = (word32) r10_1422 (alias)
	r10_1424 = (uint64) (r10d_1423 + 0x00000030)
	r10b_1425 = (byte) r10_1424 (alias)
	SZO_1426 = cond(rdx_1413 & rdx_1413)
	Z_1427 = SZO_1426 (alias)
	C_1428 = false
	Mem1429[r12_1409:byte] = r10b_1425
	r10_1430 = rdx_1413
	r10d_1431 = (word32) r10_1430 (alias)
	r10b_1432 = (byte) r10_1430 (alias)
	branch Test(NE,Z_1427) l000000000040C5B0
// DataOut: ebx fs r10 r10b r11 r11d r12 r13 r14d r15 r8 r9 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:0x00000000CCCCCCCD rsi:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C5D8:
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> r10:<invalid> r9:0x00000000CCCCCCCD rsi:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BE59:
	r10b_623 = PHI(r10b_101, r10b_101, r10b_101, r10b_1803)
	r10d_624 = PHI(r10d_100, r10d_100, r10d_100, r10d_1802)
	sil_625 = PHI(sil_97, sil_97, sil_1840, sil_97)
	esi_626 = PHI(esi_88, esi_88, esi_1841, esi_88)
	r10_627 = PHI(r10_83, r10_83, r10_83, r10_1801)
	ecx_628 = PHI(ecx_1797, ecx_74, ecx_74, ecx_1797)
	rcx_629 = PHI(rcx_1796, rcx_70, rcx_70, rcx_1796)
	cl_630 = PHI(cl_1798, cl_85, cl_85, cl_1798)
	Z_631 = PHI(Z_1794, Z_1824, Z_1837, Z_1814)
	rax_632 = PHI(rax_1786, rax_137, rax_1833, rax_1810)
	eax_633 = PHI(eax_1787, eax_60, eax_60, eax_1787)
	ah_634 = PHI(ah_1790, ah_92, ah_92, ah_1790)
	ax_635 = PHI(ax_1791, ax_93, ax_93, ax_1791)
	al_636 = PHI(al_1792, al_95, al_95, al_1792)
	rdx_637 = PHI(rdx_1783, rdx_111, rdx_1830, rdx_1807)
	edx_638 = PHI(edx_1784, edx_112, edx_1831, edx_1808)
	rdx_rax_639 = PHI(rdx_rax_1788, rdx_rax_138, rdx_rax_1834, rdx_rax_1811)
	edx_eax_640 = PHI(edx_eax_1789, edx_eax_139, edx_eax_1835, edx_eax_1812)
	dl_641 = PHI(dl_1785, dl_113, dl_1832, dl_1809)
	SCZO_642 = PHI(SCZO_141, SCZO_141, SCZO_141, SCZO_1813)
	rsi_643 = PHI(rsi_65, rsi_65, rsi_1839, rsi_65)
	qwLoc68_644 = r12_68
	SZO_645 = cond(r12_68 & r12_68)
	S_646 = SZO_645 (alias)
	C_647 = false
	rLoc1_648 = (real64) qwLoc68_644
	branch (r12_68 & r12_68) < 0x0000000000000000 l000000000040C5F0
// DataOut: bl ebx fs r11 r11d r13 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5F0:
	rLoc1_1282 = rLoc1_648 + Mem0[0x0000000000415F08:real32]
	qwLoc68_1283 = rbx_69
	SZO_1284 = cond(rbx_69 & rbx_69)
	S_1285 = SZO_1284 (alias)
	C_1286 = false
	rLoc2_1287 = (real64) qwLoc68_1283
	branch Test(NS,S_1285) l000000000040BE7D
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rdi -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE6B:
	qwLoc68_1277 = rbx_69
	SZO_1278 = cond(rbx_69 & rbx_69)
	S_1279 = SZO_1278 (alias)
	C_1280 = false
	rLoc2_1281 = (real64) qwLoc68_1277
	branch Test(SG,S_1279) l000000000040C608
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rdi -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C608:
	rLoc2_1270 = PHI(rLoc2_1281, rLoc2_1287)
	qwLoc68_1271 = PHI(qwLoc68_1277, qwLoc68_1283)
	rLoc1_1272 = PHI(rLoc1_648, rLoc1_1282)
	S_1273 = PHI(S_1279, S_1285)
	SZO_1274 = PHI(SZO_1278, SZO_1284)
	C_1275 = PHI(C_1280, C_1286)
	rLoc2_1276 = rLoc2_1270 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rcx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE7D:
	rLoc2_649 = PHI(rLoc2_1281, rLoc2_1287, rLoc2_1276)
	rLoc1_650 = PHI(rLoc1_648, rLoc1_1282, rLoc1_1272)
	rax_651 = qwLocA8_40
	rdx_rax_652 = SEQ(rdx_637, rax_651) (alias)
	edx_eax_653 = rax_651 (alias)
	qwLoc68_654 = rax_651
	SZO_655 = cond(rax_651 & rax_651)
	S_656 = SZO_655 (alias)
	C_657 = false
	rLoc3_658 = (real64) qwLoc68_654
	branch (rax_651 & rax_651) < 0x0000000000000000 l000000000040C5E0
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):rcx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5E0:
	rLoc3_1269 = rLoc3_658 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE94:
	rLoc3_659 = PHI(rLoc3_658, rLoc3_1269)
	SZO_660 = cond(bLocB0 & 0x10)
	Z_661 = SZO_660 (alias)
	C_662 = false
	rLoc2_663 = rLoc2_649 / rLoc3_659
	rLoc1_664 = rLoc1_650 * rLoc2_663
	branch (bLocB0 & 0x10) == 0x00 l000000000040C1B8
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C1B8:
	SCZO_1104 = cond(dwLoc98_32 - 0x00000001)
	Z_1105 = SCZO_1104 (alias)
	branch Test(EQ,Z_1105) l000000000040C1CD
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C1BF:
	rLoc2_1147 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_1148 = cond(rLoc2_1147 - rLoc1_664)
	CZ_1149 = CZP_1148 (alias)
	branch Test(UGT,CZ_1149) l000000000040C408
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C408:
	rLoc2_1150 = (real64) Mem0[0x0000000000415F0C:real32]
	v69_1151 = rLoc2_1150
	rLoc2_1152 = rLoc1_664
	rLoc1_1153 = v69_1151
	CZP_1154 = cond(rLoc2_1152 - rLoc1_1153)
	C_1155 = CZP_1154 (alias)
	branch Test(UGE,C_1155) l000000000040C6A0
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C6A0:
	wLoc6A_1247 = __fstcw()
	eax_1248 = (word32) wLoc6A_1247
	ah_1249 = SLICE(eax_1248, byte, 8) (alias)
	rLoc2_1250 = rLoc2_1152 - rLoc1_1153
	v71_1251 = rLoc2_1250
	rLoc2_1252 = rLoc1_1153
	rLoc1_1253 = v71_1251
	r10_1254 = 0x0000000000000000
	ah_1255 = ah_1249 | 0x0C
	ax_1256 = DPB(ax_635, ah_1255, 8) (alias)
	wLoc6C_1257 = ax_1256
	__fldcw(wLoc6C_1257)
	qwLoc68_1258 = (int64) rLoc2_1252
	__fldcw(wLoc6A_1247)
	rax_1259 = qwLoc68_1258
	rax_1260 = rax_1259 ^ rdx_637
	eax_1261 = (word32) rax_1260 (alias)
	rdx_rax_1262 = SEQ(rdx_637, rax_1260) (alias)
	edx_eax_1263 = rax_1260 (alias)
	ah_1264 = SLICE(rax_1260, byte, 8) (alias)
	ax_1265 = (word16) rax_1260 (alias)
	al_1266 = (byte) rax_1260 (alias)
	SZO_1267 = cond(rax_1260)
	C_1268 = false
// DataOut: al ax eax fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C418:
	rLoc1_1229 = rLoc2_1152
	wLoc6A_1230 = __fstcw()
	eax_1231 = (word32) wLoc6A_1230
	ah_1232 = SLICE(eax_1231, byte, 8) (alias)
	ah_1233 = ah_1232 | 0x0C
	ax_1234 = DPB(ax_635, ah_1233, 8) (alias)
	SZO_1235 = cond(ah_1233)
	C_1236 = false
	wLoc6C_1237 = ax_1234
	rLoc2_1238 = rLoc2_1152
	__fldcw(wLoc6C_1237)
	qwLoc68_1239 = (int64) rLoc2_1238
	__fldcw(wLoc6A_1230)
	rax_1240 = qwLoc68_1239
	eax_1241 = (word32) rax_1240 (alias)
	rdx_rax_1242 = SEQ(rdx_637, rax_1240) (alias)
	edx_eax_1243 = rax_1240 (alias)
	ah_1244 = SLICE(rax_1240, byte, 8) (alias)
	ax_1245 = (word16) rax_1240 (alias)
	al_1246 = (byte) rax_1240 (alias)
// DataOut: al ax eax fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C43E:
	wLoc6A_1156 = PHI(wLoc6A_1230, wLoc6A_1247)
	wLoc6C_1157 = PHI(wLoc6C_1237, wLoc6C_1257)
	rLoc2_1158 = PHI(rLoc2_1238, rLoc2_1252)
	qwLoc68_1159 = PHI(qwLoc68_1239, qwLoc68_1258)
	rLoc1_1160 = PHI(rLoc1_1229, rLoc1_1253)
	r10_1161 = PHI(r10_627, r10_1254)
	rax_1162 = PHI(rax_1240, rax_1260)
	eax_1163 = PHI(eax_1241, eax_1261)
	ah_1164 = PHI(ah_1244, ah_1264)
	ax_1165 = PHI(ax_1245, ax_1265)
	al_1166 = PHI(al_1246, al_1266)
	rsi_1167 = (uint64) dwLoc98_32
	esi_1168 = (word32) rsi_1167 (alias)
	rdx_1169 = 0x0000000000000000
	edx_1170 = (word32) rdx_1169 (alias)
	rdx_rax_1171 = SEQ(rdx_1169, rax_1162) (alias)
	edx_eax_1172 = rdx_1169 (alias)
	dl_1173 = (byte) rdx_1169 (alias)
	SZO_1174 = cond(esi_1168 & esi_1168)
	Z_1175 = SZO_1174 (alias)
	C_1176 = false
	branch Test(NE,Z_1175) l000000000040C470
// DataOut: al ax eax fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C470:
	rLoc1_1228 = rLoc1_1160
// DataOut: fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) eax -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C448:
	qwLoc68_1196 = rax_1162
	SZO_1197 = cond(rax_1162 & rax_1162)
	S_1198 = SZO_1197 (alias)
	C_1199 = false
	rLoc2_1200 = (real64) qwLoc68_1196
	branch Test(SG,S_1198) l000000000040C772
// DataOut: fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) eax -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C772:
	rLoc2_1227 = rLoc2_1200 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) eax -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C45A:
	rLoc2_1201 = PHI(rLoc2_1200, rLoc2_1227)
	rcx_1202 = 0x0000000000000000
	ecx_1203 = (word32) rcx_1202 (alias)
	SZO_1204 = cond(ecx_1203)
	rdx_1205 = 0x0000000000000001
	edx_1206 = (word32) rdx_1205 (alias)
	rdx_rax_1207 = SEQ(rdx_1205, rax_1162) (alias)
	edx_eax_1208 = rdx_1205 (alias)
	dl_1209 = (byte) rdx_1205 (alias)
	CZP_1210 = cond(rLoc2_1201 - rLoc1_1160)
	Z_1211 = CZP_1210 (alias)
	P_1212 = CZP_1210 (alias)
	rLoc1_1213 = rLoc1_1160
	cl_1214 = Test(PE,P_1212)
	rcx_1215 = DPB(rcx_1202, cl_1214, 0) (alias)
	ecx_1216 = DPB(ecx_1203, cl_1214, 0) (alias)
	branch Test(NE,Z_1211) l000000000040C46C
// DataOut: fs r11 r11d r13 r9 rax rbp rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) eax -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C468_1:
	rdx_1222 = rcx_1215
	edx_1223 = (word32) rdx_1222 (alias)
	rdx_rax_1224 = SEQ(rdx_1222, rax_1162) (alias)
	edx_eax_1225 = rdx_1222 (alias)
	dl_1226 = (byte) rdx_1222 (alias)
// DataOut: fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) eax cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C46C:
	rdx_1217 = PHI(rdx_1205, rdx_1222)
	edx_1218 = PHI(edx_1206, edx_1223)
	rdx_rax_1219 = PHI(rdx_rax_1207, rdx_rax_1224)
	edx_eax_1220 = PHI(edx_eax_1208, edx_eax_1225)
	dl_1221 = PHI(dl_1209, dl_1226)
// DataOut: fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) eax cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C472:
	rLoc2_1177 = PHI(rLoc2_1201, rLoc2_1158)
	P_1178 = PHI(P_1212, P_94)
	CZP_1179 = PHI(CZP_1210, CZP_1154)
	ecx_1180 = PHI(ecx_1216, ecx_628)
	rcx_1181 = PHI(rcx_1215, rcx_629)
	cl_1182 = PHI(cl_1214, cl_630)
	Z_1183 = PHI(Z_1211, Z_1175)
	rdx_1184 = PHI(rdx_1217, rdx_1169)
	edx_1185 = PHI(edx_1218, edx_1170)
	rdx_rax_1186 = PHI(rdx_rax_1219, rdx_rax_1171)
	edx_eax_1187 = PHI(edx_eax_1220, edx_eax_1172)
	dl_1188 = PHI(dl_1221, dl_1173)
	rax_1189 = rax_1162 + rdx_1184
	qwLoc68_1190 = rax_1189
	SZO_1191 = cond(rax_1189 & rax_1189)
	S_1192 = SZO_1191 (alias)
	C_1193 = false
	rLoc1_1194 = (real64) qwLoc68_1190
	branch Test(NS,S_1192) l000000000040C1CD
// DataOut: fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) eax cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C487:
	rLoc1_1195 = rLoc1_1194 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) eax cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C1CD:
	wLoc6A_1106 = PHI(wLoc6A, wLoc6A, wLoc6A_1156, wLoc6A_1156)
	wLoc6C_1107 = PHI(wLoc6C, wLoc6C, wLoc6C_1157, wLoc6C_1157)
	rLoc2_1108 = PHI(rLoc2_663, rLoc2_1147, rLoc2_1177, rLoc2_1177)
	qwLoc68_1109 = PHI(qwLoc68_654, qwLoc68_654, qwLoc68_1190, qwLoc68_1190)
	rLoc1_1110 = PHI(rLoc1_664, rLoc1_664, rLoc1_1194, rLoc1_1195)
	P_1111 = PHI(P_94, P_94, P_1178, P_1178)
	CZP_1112 = PHI(CZP_120, CZP_1148, CZP_1179, CZP_1179)
	esi_1113 = PHI(esi_626, esi_626, esi_1168, esi_1168)
	r10_1114 = PHI(r10_627, r10_627, r10_1161, r10_1161)
	S_1115 = PHI(S_656, S_656, S_1192, S_1192)
	CZ_1116 = PHI(CZ_142, CZ_1149, CZ_1149, CZ_1149)
	ecx_1117 = PHI(ecx_628, ecx_628, ecx_1180, ecx_1180)
	cl_1118 = PHI(cl_630, cl_630, cl_1182, cl_1182)
	Z_1119 = PHI(Z_1105, Z_1105, Z_1183, Z_1183)
	eax_1120 = PHI(eax_633, eax_633, eax_1163, eax_1163)
	ah_1121 = PHI(ah_634, ah_634, ah_1164, ah_1164)
	ax_1122 = PHI(ax_635, ax_635, ax_1165, ax_1165)
	al_1123 = PHI(al_636, al_636, al_1166, al_1166)
	edx_1124 = PHI(edx_638, edx_638, edx_1185, edx_1185)
	rdx_rax_1125 = PHI(rdx_rax_652, rdx_rax_652, rdx_rax_1186, rdx_rax_1186)
	edx_eax_1126 = PHI(edx_eax_653, edx_eax_653, edx_eax_1187, edx_eax_1187)
	dl_1127 = PHI(dl_641, dl_641, dl_1188, dl_1188)
	rLocD0_1128 = (real80) rLoc1_1110
	rbx_1129 = qwLocA0_35
	rcx_1130 = 0x0000000000415F18
	rdx_1131 = 0xFFFFFFFFFFFFFFFF
	rsi_1132 = 0x0000000000000001
	rax_1133 = 0x0000000000000000
	r14_1134 = 0x0000000000000000
	r14d_1135 = (word32) r14_1134 (alias)
	SZO_1136 = cond(r14d_1135)
	C_1137 = false
	rdi_1138 = rbx_1129
	rax_1139 = 0x0000000000000000
	rdi_1140 = rbx_1129
	rbx_1141 = 0x00000000FFFFFFFF
	ebx_1142 = (word32) rbx_1141 (alias)
	rax_1143 = 0x0000000000000000
	r15_1144 = 0x0000000000000000
	r15d_1145 = (word32) r15_1144 (alias)
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:<invalid> eax:<invalid> ah:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEA3:
	rLoc2_715 = (real64) dwLocAC_56
	rbx_716 = 0x0000000000000000
	ebx_717 = (word32) rbx_716 (alias)
	SZO_718 = cond(ebx_717)
	C_719 = false
	rLoc3_720 = rLoc3_659
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:rcx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEB4:
	rLoc4_722 = PHI(rLoc4, rLoc4_733)
	rLoc3_723 = PHI(rLoc3_720, rLoc3_1100)
	rLoc1_724 = PHI(rLoc1_664, rLoc1_1101)
	ebx_725 = PHI(ebx_717, ebx_729)
	Z_726 = PHI(Z_661, Z_1095)
	rLoc4_727 = rLoc4_722
	rbx_728 = (uint64) (ebx_725 + 0x00000001)
	ebx_729 = (word32) rbx_728 (alias)
	SCZO_730 = cond(ebx_729)
	rLoc4_731 = rLoc4_727 * rLoc2_715
	v46_732 = rLoc4_731
	rLoc4_733 = rLoc1_724
	rLoc1_734 = v46_732
	CZP_735 = cond(rLoc4_733 - rLoc1_734)
	C_736 = CZP_735 (alias)
	branch rLoc4_733 <u rLoc1_734 l000000000040BED0
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BED0:
	rLoc2_1102 = rLoc4_733
	rLoc1_1103 = rLoc3_723
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEC1:
	SCZO_1094 = cond(ebx_729 - 0x00000008)
	Z_1095 = SCZO_1094 (alias)
	branch Test(NE,Z_1095) l000000000040BEB0
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEB0:
	rLoc3_1098 = rLoc4_733
	v70_1099 = rLoc3_1098
	rLoc3_1100 = rLoc1_734
	rLoc1_1101 = v70_1099
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEC6:
	rLoc2_1096 = rLoc4_733
	rLoc1_1097 = rLoc3_723
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BED4:
	rLoc2_737 = PHI(rLoc2_1096, rLoc2_1102)
	rLoc1_738 = PHI(rLoc1_1097, rLoc1_1103)
	rLoc1_739 = rLoc2_737 / rLoc1_738
	SCZO_740 = cond(dwLoc98_32 - 0x00000001)
	Z_741 = SCZO_740 (alias)
	rLoc2_742 = rLoc2_737
	branch dwLoc98_32 == 0x00000001 l000000000040BF70
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF70:
	v68_1091 = rLoc2_742
	rLoc2_1092 = rLoc1_739
	rLoc1_1093 = v68_1091
// DataOut: ebx fs r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEE3:
	rLoc2_967 = rLoc2_742
	rLoc2_968 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_969 = cond(rLoc2_968 - rLoc1_739)
	CZ_970 = CZP_969 (alias)
	branch Test(ULE,CZ_970) l000000000040C498
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C498:
	rLoc2_1088 = rLoc2_968
// DataOut: ebx fs r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BEF3:
	rLoc2_971 = (real64) Mem0[0x0000000000415F0C:real32]
	v52_972 = rLoc2_971
	rLoc2_973 = rLoc1_739
	rLoc1_974 = v52_972
	CZP_975 = cond(rLoc2_973 - rLoc1_974)
	C_976 = CZP_975 (alias)
	branch Test(UGE,C_976) l000000000040C660
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C660:
	wLoc6A_1066 = __fstcw()
	eax_1067 = (word32) wLoc6A_1066
	ah_1068 = SLICE(eax_1067, byte, 8) (alias)
	rLoc2_1069 = rLoc2_973 - rLoc1_974
	v59_1070 = rLoc2_1069
	rLoc2_1071 = rLoc1_974
	rLoc1_1072 = v59_1070
	r10_1073 = 0x0000000000000000
	ah_1074 = ah_1068 | 0x0C
	ax_1075 = DPB(ax_635, ah_1074, 8) (alias)
	wLoc6C_1076 = ax_1075
	__fldcw(wLoc6C_1076)
	qwLoc68_1077 = (int64) rLoc2_1071
	__fldcw(wLoc6A_1066)
	rax_1078 = qwLoc68_1077
	rax_1079 = rax_1078 ^ rdx_637
	eax_1080 = (word32) rax_1079 (alias)
	rdx_rax_1081 = SEQ(rdx_637, rax_1079) (alias)
	edx_eax_1082 = rax_1079 (alias)
	ah_1083 = SLICE(rax_1079, byte, 8) (alias)
	ax_1084 = (word16) rax_1079 (alias)
	al_1085 = (byte) rax_1079 (alias)
	SZO_1086 = cond(rax_1079)
	C_1087 = false
// DataOut: al ax ebx fs r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF03:
	rLoc1_1048 = rLoc2_973
	wLoc6A_1049 = __fstcw()
	eax_1050 = (word32) wLoc6A_1049
	ah_1051 = SLICE(eax_1050, byte, 8) (alias)
	ah_1052 = ah_1051 | 0x0C
	ax_1053 = DPB(ax_635, ah_1052, 8) (alias)
	SZO_1054 = cond(ah_1052)
	C_1055 = false
	wLoc6C_1056 = ax_1053
	rLoc2_1057 = rLoc2_973
	__fldcw(wLoc6C_1056)
	qwLoc68_1058 = (int64) rLoc2_1057
	__fldcw(wLoc6A_1049)
	rax_1059 = qwLoc68_1058
	eax_1060 = (word32) rax_1059 (alias)
	rdx_rax_1061 = SEQ(rdx_637, rax_1059) (alias)
	edx_eax_1062 = rax_1059 (alias)
	ah_1063 = SLICE(rax_1059, byte, 8) (alias)
	ax_1064 = (word16) rax_1059 (alias)
	al_1065 = (byte) rax_1059 (alias)
// DataOut: al ax ebx fs r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:r8 r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF29:
	wLoc6A_977 = PHI(wLoc6A_1049, wLoc6A_1066)
	wLoc6C_978 = PHI(wLoc6C_1056, wLoc6C_1076)
	rLoc2_979 = PHI(rLoc2_1057, rLoc2_1071)
	qwLoc68_980 = PHI(qwLoc68_1058, qwLoc68_1077)
	rLoc1_981 = PHI(rLoc1_1048, rLoc1_1072)
	r10_982 = PHI(r10_627, r10_1073)
	rax_983 = PHI(rax_1059, rax_1079)
	eax_984 = PHI(eax_1060, eax_1080)
	ah_985 = PHI(ah_1063, ah_1083)
	ax_986 = PHI(ax_1064, ax_1084)
	al_987 = PHI(al_1065, al_1085)
	rcx_988 = (uint64) dwLoc98_32
	ecx_989 = (word32) rcx_988 (alias)
	rdx_990 = 0x0000000000000000
	edx_991 = (word32) rdx_990 (alias)
	rdx_rax_992 = SEQ(rdx_990, rax_983) (alias)
	edx_eax_993 = rdx_990 (alias)
	dl_994 = (byte) rdx_990 (alias)
	SZO_995 = cond(ecx_989 & ecx_989)
	Z_996 = SZO_995 (alias)
	C_997 = false
	branch Test(NE,Z_996) l000000000040BF55
// DataOut: al ax ebx fs r11 r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF33:
	qwLoc68_1022 = rax_983
	SZO_1023 = cond(rax_983 & rax_983)
	S_1024 = SZO_1023 (alias)
	C_1025 = false
	rLoc2_1026 = (real64) qwLoc68_1022
	branch Test(SG,S_1024) l000000000040C77D
// DataOut: ebx fs r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:(uint64) eax r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C77D:
	rLoc2_1047 = rLoc2_1026 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:(uint64) eax r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF45:
	rLoc2_1027 = PHI(rLoc2_1026, rLoc2_1047)
	rcx_1028 = 0x0000000000000000
	ecx_1029 = (word32) rcx_1028 (alias)
	SZO_1030 = cond(ecx_1029)
	rdx_1031 = 0x0000000000000001
	edx_1032 = (word32) rdx_1031 (alias)
	rdx_rax_1033 = SEQ(rdx_1031, rax_983) (alias)
	edx_eax_1034 = rdx_1031 (alias)
	dl_1035 = (byte) rdx_1031 (alias)
	CZP_1036 = cond(rLoc2_1027 - rLoc1_981)
	Z_1037 = CZP_1036 (alias)
	P_1038 = CZP_1036 (alias)
	cl_1039 = Test(PE,P_1038)
	rcx_1040 = DPB(rcx_1028, cl_1039, 0) (alias)
	ecx_1041 = DPB(ecx_1029, cl_1039, 0) (alias)
	branch Test(NE,Z_1037) l000000000040BF55
// DataOut: ebx fs r11 r13 r9 rax rbp rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:(uint64) eax r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF51_1:
	rdx_1042 = rcx_1040
	edx_1043 = (word32) rdx_1042 (alias)
	rdx_rax_1044 = SEQ(rdx_1042, rax_983) (alias)
	edx_eax_1045 = rdx_1042 (alias)
	dl_1046 = (byte) rdx_1042 (alias)
// DataOut: ebx fs r11 r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> cl:Test(PE,P) rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF55:
	P_998 = PHI(P_1038, P_1038, P_94)
	CZP_999 = PHI(CZP_1036, CZP_1036, CZP_975)
	ecx_1000 = PHI(ecx_1041, ecx_1041, ecx_989)
	rcx_1001 = PHI(rcx_1040, rcx_1040, rcx_988)
	cl_1002 = PHI(cl_1039, cl_1039, cl_630)
	Z_1003 = PHI(Z_1037, Z_1037, Z_996)
	rdx_1004 = PHI(rdx_1031, rdx_1042, rdx_990)
	edx_1005 = PHI(edx_1032, edx_1043, edx_991)
	rdx_rax_1006 = PHI(rdx_rax_1033, rdx_rax_1044, rdx_rax_992)
	edx_eax_1007 = PHI(edx_eax_1034, edx_eax_1045, edx_eax_993)
	dl_1008 = PHI(dl_1035, dl_1046, dl_994)
	rax_1009 = rax_983 + rdx_1004
	qwLoc68_1010 = rax_1009
	SZO_1011 = cond(rax_1009 & rax_1009)
	S_1012 = SZO_1011 (alias)
	C_1013 = false
	rLoc2_1014 = (real64) qwLoc68_1010
	branch Test(SG,S_1012) l000000000040C758
// DataOut: ebx fs r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C758:
	rLoc2_1018 = rLoc2_1014 + Mem0[0x0000000000415F08:real32]
	v66_1019 = rLoc2_1018
	rLoc2_1020 = rLoc1_981
	rLoc1_1021 = v66_1019
// DataOut: ebx fs r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF6A:
	v56_1015 = rLoc2_1014
	rLoc2_1016 = rLoc1_981
	rLoc1_1017 = v56_1015
// DataOut: ebx fs r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 eax:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BF72:
	wLoc6A_743 = PHI(wLoc6A_977, wLoc6A_977, wLoc6A, wLoc6A)
	wLoc6C_744 = PHI(wLoc6C_978, wLoc6C_978, wLoc6C, wLoc6C)
	rLoc2_745 = PHI(rLoc2_1016, rLoc2_1020, rLoc2_1088, rLoc2_1092)
	qwLoc68_746 = PHI(qwLoc68_1010, qwLoc68_1010, qwLoc68_654, qwLoc68_654)
	rLoc1_747 = PHI(rLoc1_1017, rLoc1_1021, rLoc1_739, rLoc1_1093)
	P_748 = PHI(P_998, P_998, P_94, P_94)
	CZP_749 = PHI(CZP_999, CZP_999, CZP_969, CZP_735)
	r10_750 = PHI(r10_982, r10_982, r10_627, r10_627)
	S_751 = PHI(S_1012, S_1012, S_656, S_656)
	ecx_752 = PHI(ecx_1000, ecx_1000, ecx_628, ecx_628)
	cl_753 = PHI(cl_1002, cl_1002, cl_630, cl_630)
	C_754 = PHI(C_1013, C_1013, C_736, C_736)
	eax_755 = PHI(eax_984, eax_984, eax_633, eax_633)
	ah_756 = PHI(ah_985, ah_985, ah_634, ah_634)
	ax_757 = PHI(ax_986, ax_986, ax_635, ax_635)
	r14_758 = qwLocA0_35
	rdx_759 = 0xFFFFFFFFFFFFFFFF
	rcx_760 = 0x0000000000415F1E
	rsi_761 = 0x0000000000000001
	rax_762 = 0x0000000000000000
	qwLoc80_763 = r11_135
	rdi_764 = r14_758
	rLoc90_765 = (real80) rLoc2_745
	rLocD0_766 = (real80) rLoc1_747
	rax_767 = 0x0000000000000000
	rdi_768 = r14_758
	rax_769 = 0x0000000000000000
	r11_770 = qwLoc80_763
	rdx_771 = (uint64) dwLoc78_48
	edx_772 = (word32) rdx_771 (alias)
	dl_773 = (byte) rdx_771 (alias)
	r15_774 = 0x0000000000000000
	r15d_775 = (word32) r15_774 (alias)
	rax_776 = 0x0000000000000000
	rLoc1_777 = (real64) rLoc90_765
	SZO_778 = cond(edx_772 & edx_772)
	Z_779 = SZO_778 (alias)
	r14_780 = r11_770 + 0x0000000000000001
	r14d_781 = (word32) r14_780 (alias)
	al_782 = (edx_772 & edx_772) == 0x00000000
	rax_783 = DPB(rax_776, al_782, 0) (alias)
	rax_784 = r14_780 + 0x0000000000000001 + rax_783
	rdx_rax_785 = SEQ(rdx_771, rax_784) (alias)
	edx_eax_786 = rax_784 (alias)
	SCZO_787 = cond(0x0000000000000000 - rax_784)
	CZ_788 = SCZO_787 (alias)
	branch 0x0000000000000000 >u rax_784 l000000000040BFF0
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:rsi r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) eax:<invalid> ah:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BFCB:
	SZO_957 = cond(bLocB0 & 0x08)
	Z_958 = SZO_957 (alias)
	C_959 = false
	branch Test(EQ,Z_958) l000000000040C208
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C208:
	rLoc1_966 = rLoc1_777
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BFD6:
	rax_960 = qwLocA0_35
	rdx_rax_961 = SEQ(rdx_771, rax_960) (alias)
	edx_eax_962 = rax_960 (alias)
	SCZO_963 = cond(Mem0[rax_960 - 0x0000000000000001 + r15_774:byte] - 0x30)
	Z_964 = SCZO_963 (alias)
	branch Test(NE,Z_964) l000000000040C210
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C210:
	rLoc1_965 = rLoc1_777
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BFE7:
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:rsi r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040BFF0:
	SZO_789 = PHI(SZO_778, SZO_957)
	C_790 = PHI(C_754, C_959)
	rax_791 = PHI(rax_784, rax_960)
	rdx_rax_792 = PHI(rdx_rax_785, rdx_rax_961)
	edx_eax_793 = PHI(edx_eax_786, edx_eax_962)
	SCZO_794 = cond(dwLoc98_32 - 0x00000001)
	Z_795 = SCZO_794 (alias)
	rLoc1_796 = rLoc1_777 * Mem0[0x0000000000415F84:real32]
	branch dwLoc98_32 == 0x00000001 l000000000040C0A0
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C001:
	rLoc2_835 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_836 = cond(rLoc2_835 - rLoc1_796)
	CZ_837 = CZP_836 (alias)
	branch rLoc2_835 <=u rLoc1_796 l000000000040C0A0
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C00F:
	rLoc2_838 = (real64) Mem0[0x0000000000415F0C:real32]
	v61_839 = rLoc2_838
	rLoc2_840 = rLoc1_796
	rLoc1_841 = v61_839
	CZP_842 = cond(rLoc2_840 - rLoc1_841)
	C_843 = CZP_842 (alias)
	branch rLoc2_840 >=u rLoc1_841 l000000000040C720
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C720:
	wLoc6A_935 = __fstcw()
	eax_936 = (word32) wLoc6A_935
	ah_937 = SLICE(eax_936, byte, 8) (alias)
	rLoc2_938 = rLoc2_840 - rLoc1_841
	v65_939 = rLoc2_938
	rLoc2_940 = rLoc1_841
	rLoc1_941 = v65_939
	r10_942 = 0x0000000000000000
	ah_943 = ah_937 | 0x0C
	ax_944 = DPB(ax_757, ah_943, 8) (alias)
	wLoc6C_945 = ax_944
	__fldcw(wLoc6C_945)
	qwLoc68_946 = (int64) rLoc2_940
	__fldcw(wLoc6A_935)
	rax_947 = qwLoc68_946
	rax_948 = rax_947 ^ rdx_771
	eax_949 = (word32) rax_948 (alias)
	rdx_rax_950 = SEQ(rdx_771, rax_948) (alias)
	edx_eax_951 = rax_948 (alias)
	ah_952 = SLICE(rax_948, byte, 8) (alias)
	ax_953 = (word16) rax_948 (alias)
	al_954 = (byte) rax_948 (alias)
	SZO_955 = cond(rax_948)
	C_956 = false
// DataOut: ax ebx fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C01F:
	rLoc1_917 = rLoc2_840
	wLoc6A_918 = __fstcw()
	eax_919 = (word32) wLoc6A_918
	ah_920 = SLICE(eax_919, byte, 8) (alias)
	ah_921 = ah_920 | 0x0C
	ax_922 = DPB(ax_757, ah_921, 8) (alias)
	SZO_923 = cond(ah_921)
	C_924 = false
	wLoc6C_925 = ax_922
	rLoc2_926 = rLoc2_840
	__fldcw(wLoc6C_925)
	qwLoc68_927 = (int64) rLoc2_926
	__fldcw(wLoc6A_918)
	rax_928 = qwLoc68_927
	eax_929 = (word32) rax_928 (alias)
	rdx_rax_930 = SEQ(rdx_771, rax_928) (alias)
	edx_eax_931 = rax_928 (alias)
	ah_932 = SLICE(rax_928, byte, 8) (alias)
	ax_933 = (word16) rax_928 (alias)
	al_934 = (byte) rax_928 (alias)
// DataOut: ax ebx fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C045:
	wLoc6A_844 = PHI(wLoc6A_918, wLoc6A_935)
	wLoc6C_845 = PHI(wLoc6C_925, wLoc6C_945)
	rLoc2_846 = PHI(rLoc2_926, rLoc2_940)
	qwLoc68_847 = PHI(qwLoc68_927, qwLoc68_946)
	rLoc1_848 = PHI(rLoc1_917, rLoc1_941)
	r10_849 = PHI(r10_750, r10_942)
	rax_850 = PHI(rax_928, rax_948)
	eax_851 = PHI(eax_929, eax_949)
	ah_852 = PHI(ah_932, ah_952)
	ax_853 = PHI(ax_933, ax_953)
	al_854 = PHI(al_934, al_954)
	r14_855 = (uint64) dwLoc98_32
	r14d_856 = (word32) r14_855 (alias)
	rdx_857 = 0x0000000000000000
	edx_858 = (word32) rdx_857 (alias)
	rdx_rax_859 = SEQ(rdx_857, rax_850) (alias)
	edx_eax_860 = rdx_857 (alias)
	dl_861 = (byte) rdx_857 (alias)
	SZO_862 = cond(r14d_856 & r14d_856)
	Z_863 = SZO_862 (alias)
	C_864 = false
	branch (r14d_856 & r14d_856) != 0x00000000 l000000000040C080
// DataOut: ax ebx fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:(uint64) eax r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C080:
	rLoc1_916 = rLoc1_848
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) eax r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C051:
	qwLoc68_884 = rax_850
	SZO_885 = cond(rax_850 & rax_850)
	S_886 = SZO_885 (alias)
	C_887 = false
	rLoc2_888 = (real64) qwLoc68_884
	branch (rax_850 & rax_850) < 0x0000000000000000 l000000000040C79E
// DataOut: ebx fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) eax r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C79E:
	rLoc2_915 = rLoc2_888 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) eax r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C063:
	rLoc2_889 = PHI(rLoc2_888, rLoc2_915)
	rcx_890 = 0x0000000000000000
	ecx_891 = (word32) rcx_890 (alias)
	SZO_892 = cond(ecx_891)
	rdx_893 = 0x0000000000000001
	edx_894 = (word32) rdx_893 (alias)
	rdx_rax_895 = SEQ(rdx_893, rax_850) (alias)
	edx_eax_896 = rdx_893 (alias)
	dl_897 = (byte) rdx_893 (alias)
	CZP_898 = cond(rLoc2_889 - rLoc1_848)
	Z_899 = CZP_898 (alias)
	P_900 = CZP_898 (alias)
	rLoc1_901 = rLoc1_848
	cl_902 = Test(PE,P_900)
	rcx_903 = DPB(rcx_890, cl_902, 0) (alias)
	ecx_904 = DPB(ecx_891, cl_902, 0) (alias)
	branch rLoc2_889 != rLoc1_848 l000000000040C075
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) eax r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:0x0000000000415F1E r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:0x0000000000000000 r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C071_1:
	rdx_910 = rcx_903
	edx_911 = (word32) rdx_910 (alias)
	rdx_rax_912 = SEQ(rdx_910, rax_850) (alias)
	edx_eax_913 = rdx_910 (alias)
	dl_914 = (byte) rdx_910 (alias)
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) eax r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:0x0000000000000001 r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:Test(PE,P) -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C075:
	rdx_905 = PHI(rdx_893, rdx_910)
	edx_906 = PHI(edx_894, edx_911)
	rdx_rax_907 = PHI(rdx_rax_895, rdx_rax_912)
	edx_eax_908 = PHI(edx_eax_896, edx_eax_913)
	dl_909 = PHI(dl_897, dl_914)
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) eax r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:Test(PE,P) -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C082:
	rLoc2_865 = PHI(rLoc2_889, rLoc2_846)
	P_866 = PHI(P_900, P_748)
	CZP_867 = PHI(CZP_898, CZP_842)
	ecx_868 = PHI(ecx_904, ecx_752)
	rcx_869 = PHI(rcx_903, rcx_760)
	cl_870 = PHI(cl_902, cl_753)
	Z_871 = PHI(Z_899, Z_863)
	rdx_872 = PHI(rdx_905, rdx_857)
	edx_873 = PHI(edx_906, edx_858)
	rdx_rax_874 = PHI(rdx_rax_907, rdx_rax_859)
	edx_eax_875 = PHI(edx_eax_908, edx_eax_860)
	dl_876 = PHI(dl_909, dl_861)
	rax_877 = rax_850 + rdx_872
	qwLoc68_878 = rax_877
	SZO_879 = cond(rax_877 & rax_877)
	S_880 = SZO_879 (alias)
	C_881 = false
	rLoc1_882 = (real64) qwLoc68_878
	branch (rax_877 & rax_877) >= 0x0000000000000000 l000000000040C0A0
// DataOut: ebx fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) eax r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C093:
	rLoc1_883 = rLoc1_882 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) eax r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> eax:<invalid> ah:<invalid> r10:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C0A0:
	wLoc6A_797 = PHI(wLoc6A_743, wLoc6A_743, wLoc6A_844, wLoc6A_844)
	wLoc6C_798 = PHI(wLoc6C_744, wLoc6C_744, wLoc6C_845, wLoc6C_845)
	rLoc2_799 = PHI(rLoc2_745, rLoc2_835, rLoc2_865, rLoc2_865)
	qwLoc68_800 = PHI(qwLoc68_746, qwLoc68_746, qwLoc68_878, qwLoc68_878)
	rLoc1_801 = PHI(rLoc1_796, rLoc1_796, rLoc1_882, rLoc1_883)
	P_802 = PHI(P_748, P_748, P_866, P_866)
	CZP_803 = PHI(CZP_749, CZP_836, CZP_867, CZP_867)
	r10_804 = PHI(r10_750, r10_750, r10_849, r10_849)
	S_805 = PHI(S_751, S_751, S_880, S_880)
	CZ_806 = PHI(CZ_788, CZ_837, CZ_837, CZ_837)
	ecx_807 = PHI(ecx_752, ecx_752, ecx_868, ecx_868)
	cl_808 = PHI(cl_753, cl_753, cl_870, cl_870)
	Z_809 = PHI(Z_795, Z_795, Z_871, Z_871)
	eax_810 = PHI(eax_755, eax_755, eax_851, eax_851)
	ah_811 = PHI(ah_756, ah_756, ah_852, ah_852)
	ax_812 = PHI(ax_757, ax_757, ax_853, ax_853)
	al_813 = PHI(al_782, al_782, al_854, al_854)
	edx_814 = PHI(edx_772, edx_772, edx_873, edx_873)
	rdx_rax_815 = PHI(rdx_rax_792, rdx_rax_792, rdx_rax_874, rdx_rax_874)
	edx_eax_816 = PHI(edx_eax_793, edx_eax_793, edx_eax_875, edx_eax_875)
	dl_817 = PHI(dl_773, dl_773, dl_876, dl_876)
	rLoc1_818 = rLoc1_801 / Mem0[0x0000000000415F84:real32]
	r14_819 = qwLocA0_35
	rcx_820 = 0x0000000000415F18
	rdx_821 = 0xFFFFFFFFFFFFFFFF
	rsi_822 = 0x0000000000000001
	rax_823 = 0x0000000000000000
	rdi_824 = r14_819
	rLocD0_825 = (real80) rLoc1_818
	rax_826 = 0x0000000000000000
	rdi_827 = r14_819
	r14_828 = 0x0000000000000000
	r14d_829 = (word32) r14_828 (alias)
	SZO_830 = cond(r14d_829)
	C_831 = false
	rax_832 = 0x0000000000000000
	r15_833 = 0x0000000000000000
	r15d_834 = (word32) r15_833 (alias)
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 al:<invalid> r10:<invalid> eax:<invalid> ah:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C218:
	rLoc4_665 = PHI(rLoc4, rLoc4_733, rLoc4_733, rLoc4_733)
	rLoc3_666 = PHI(rLoc3_659, rLoc3_723, rLoc3_723, rLoc3_723)
	qwLoc80_667 = PHI(qwLoc80_128, qwLoc80_763, qwLoc80_763, qwLoc80_763)
	rLoc90_668 = PHI(rLoc90, rLoc90_765, rLoc90_765, rLoc90_765)
	wLoc6A_669 = PHI(wLoc6A_1106, wLoc6A_743, wLoc6A_743, wLoc6A_797)
	wLoc6C_670 = PHI(wLoc6C_1107, wLoc6C_744, wLoc6C_744, wLoc6C_798)
	rLoc2_671 = PHI(rLoc2_1108, rLoc2_745, rLoc2_745, rLoc2_799)
	qwLoc68_672 = PHI(qwLoc68_1109, qwLoc68_746, qwLoc68_746, qwLoc68_800)
	rLoc1_673 = PHI(rLoc1_1110, rLoc1_965, rLoc1_966, rLoc1_818)
	rLocD0_674 = PHI(rLocD0_1128, rLocD0_766, rLocD0_766, rLocD0_825)
	P_675 = PHI(P_1111, P_748, P_748, P_802)
	CZP_676 = PHI(CZP_1112, CZP_749, CZP_749, CZP_803)
	esi_677 = PHI(esi_1113, esi_626, esi_626, esi_626)
	r10_678 = PHI(r10_1114, r10_750, r10_750, r10_804)
	S_679 = PHI(S_1115, S_751, S_751, S_805)
	r11_680 = PHI(r11_135, r11_770, r11_770, r11_770)
	r15_681 = PHI(r15_1144, r15_774, r15_774, r15_833)
	r14_682 = PHI(r14_1134, r14_780, r14_780, r14_828)
	r14d_683 = PHI(r14d_1135, r14d_781, r14d_781, r14d_829)
	CZ_684 = PHI(CZ_1116, CZ_788, CZ_788, CZ_806)
	ebx_685 = PHI(ebx_1142, ebx_729, ebx_729, ebx_729)
	ecx_686 = PHI(ecx_1117, ecx_752, ecx_752, ecx_807)
	rcx_687 = PHI(rcx_1130, rcx_760, rcx_760, rcx_820)
	cl_688 = PHI(cl_1118, cl_753, cl_753, cl_808)
	SZO_689 = PHI(SZO_1136, SZO_957, SZO_957, SZO_830)
	Z_690 = PHI(Z_1119, Z_964, Z_958, Z_809)
	C_691 = PHI(C_1137, C_959, C_959, C_831)
	edx_692 = PHI(edx_1124, edx_772, edx_772, edx_814)
	dl_693 = PHI(dl_1127, dl_773, dl_773, dl_817)
	rbx_694 = PHI(rbx_1141, rbx_728, rbx_728, rbx_728)
	r12_695 = qwLocB8_143
	rsi_696 = qwLocA0_35
	rdx_697 = r15_681
	r12_698 = r12_695 - r15_681
	r12d_699 = (word32) r12_698 (alias)
	r15_700 = r15_681 - r14_682
	r15d_701 = (word32) r15_700 (alias)
	SCZO_702 = cond(r15_700)
	rdi_703 = r12_698
	rax_704 = memmove(rdi_703, rsi_696, rdx_697)
	eax_705 = (word32) rax_704 (alias)
	rdx_rax_706 = SEQ(rdx_697, rax_704) (alias)
	edx_eax_707 = rax_704 (alias)
	ah_708 = SLICE(rax_704, byte, 8) (alias)
	ax_709 = (word16) rax_704 (alias)
	al_710 = (byte) rax_704 (alias)
	r8_711 = r12_698 + r15_700
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:0x0000000000000001 rbp:<invalid> r11:<invalid> rdx:<invalid> r8:r8 + 648 rsi:0x0000000000000001 r10:<invalid> al:<invalid> eax:<invalid> ah:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):eax -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):eax -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C237:
	dwLoc74_144 = PHI(dwLoc74, dwLoc74_1324)
	qwLoc90_145 = PHI(qwLoc90, qwLoc90_1325)
	rLoc4_146 = PHI(rLoc4_665, rLoc4)
	rLoc3_147 = PHI(rLoc3_666, rLoc3)
	qwLoc80_148 = PHI(qwLoc80_667, qwLoc80_1326)
	rLoc90_149 = PHI(rLoc90_668, rLoc90)
	wLoc6A_150 = PHI(wLoc6A_669, wLoc6A)
	wLoc6C_151 = PHI(wLoc6C_670, wLoc6C)
	rLoc2_152 = PHI(rLoc2_671, rLoc2)
	qwLoc68_153 = PHI(qwLoc68_672, qwLoc68)
	rLoc1_154 = PHI(rLoc1_673, rLoc1)
	rLocD0_155 = PHI(rLocD0_674, rLocD0)
	qwLoc98_156 = PHI(qwLoc98, qwLoc98_1381)
	r10b_157 = PHI(r10b_623, r10b_1432)
	r10d_158 = PHI(r10d_624, r10d_1431)
	dil_159 = PHI(dil_98, dil_1329)
	sil_160 = PHI(sil_625, sil_1330)
	P_161 = PHI(P_675, P_94)
	CZP_162 = PHI(CZP_676, CZP_1292)
	esi_163 = PHI(esi_677, esi_1364)
	edi_164 = PHI(edi_84, edi_1365)
	r10_165 = PHI(r10_678, r10_1430)
	S_166 = PHI(S_679, S_1296)
	r11_167 = PHI(r11_680, r11_1334)
	r8_168 = PHI(r8_711, r8_1385)
	r15_169 = PHI(r15_700, r15_126)
	r15d_170 = PHI(r15d_701, r15d_127)
	r9_171 = PHI(r9_87, r9_1404)
	r9d_172 = PHI(r9d_86, r9d_1405)
	r12_173 = PHI(r12_698, r12_1409)
	r12d_174 = PHI(r12d_699, r12d_1410)
	r14_175 = PHI(r14_682, r14_1340)
	r14d_176 = PHI(r14d_683, r14d_1341)
	CZ_177 = PHI(CZ_684, CZ_1342)
	ebx_178 = PHI(ebx_685, ebx_1386)
	ecx_179 = PHI(ecx_686, ecx_1366)
	rcx_180 = PHI(rcx_687, rcx_1367)
	cl_181 = PHI(cl_688, cl_1368)
	rax_182 = PHI(rax_704, rax_1415)
	eax_183 = PHI(eax_705, eax_1416)
	ah_184 = PHI(ah_708, ah_1419)
	ax_185 = PHI(ax_709, ax_1420)
	al_186 = PHI(al_710, al_1421)
	rdx_187 = PHI(rdx_697, rdx_1413)
	edx_188 = PHI(edx_692, edx_1355)
	rdx_rax_189 = PHI(rdx_rax_706, rdx_rax_1417)
	edx_eax_190 = PHI(edx_eax_707, edx_eax_1418)
	dl_191 = PHI(dl_693, dl_1358)
	SCZO_192 = PHI(SCZO_702, SCZO_1398)
	rbx_193 = PHI(rbx_694, rbx_1399)
	rsi_194 = PHI(rsi_696, rsi_1400)
	rdi_195 = PHI(rdi_703, rdi_1401)
	SZO_197 = cond(bLocB0 & 0x04)
	Z_198 = SZO_197 (alias)
	C_199 = false
	branch (bLocB0 & 0x04) != 0x00 l000000000040C318
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:0x00000000CCCCCCCD al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C318:
	r8_487 = r8_168 - r12_173
	SCZO_488 = cond(r8_487)
	rdi_489 = r13_136
	r15_490 = 0xFFFFFFFFFFFFFFFF
	r15d_491 = (word32) r15_490 (alias)
	r14_492 = r8_487
	r14d_493 = (word32) r14_492 (alias)
	rax_494 = DPB(rax_182, strlen(rdi_489), 0)
	rdi_495 = fp - 0x0000000000000060
	rsi_496 = r12_173
	rcx_497 = 0x0000000000000029
	rdx_498 = r14_492
	qwLoc98_499 = rax_494
	call __memcpy_chk (retsize: 8; depth: 216)
		uses: ah_184,al_186,ax_185,bLocB0,C_199,cl_181,CZ_177,CZP_162,dil_159,dl_191,dwLoc04_4,dwLoc08_12,dwLoc0C_17,dwLoc10_20,dwLoc14_24,dwLoc18_27,dwLoc74_144,dwLoc78_48,dwLoc98_32,dwLocAC_56,dwLocB0_38,eax_183,ebx_178,ecx_179,edi_164,edx_188,esi_163,fs_73,P_161,qwLoc08,qwLoc10,qwLoc18,qwLoc28_44,qwLoc68_153,qwLoc80_148,qwLoc90_145,qwLoc98_499,qwLocA0_35,qwLocA8_40,qwLocB8_143,r10_165,r10b_157,r10d_158,r11_167,r12_173,r12d_174,r13_136,r14_492,r14d_493,r15_490,r15d_491,r8_487,r9_171,r9d_172,rax_494,rbp_107,rbx_193,rcx_497,rdi_495,rdx_498,rLoc90_149,rLocD0_155,rsi_496,rsp_58,S_166,SCZO_488,sil_160,SZO_197,wLoc6A_150,wLoc6C_151,Z_198
		defs: ah_534,al_537,ax_535,C_506,cl_527,CZ_521,CZP_532,dil_540,dl_538,eax_502,ebx_524,ecx_516,edi_526,edx_503,esi_530,fs_515,P_536,r10_525,r10b_543,r10d_542,r11_519,r12_510,r12d_531,r13_518,r14_508,r14d_533,r15_517,r15d_541,r8_514,r9_529,r9d_528,rax_504,rbp_509,rbx_511,rcx_512,rdi_501,rdx_520,rsi_507,rsp_500,S_523,SCZO_513,sil_539,SZO_505,Z_522
	r9_544 = r12_510 + r14_508
	r9d_545 = (word32) r9_544 (alias)
	r12_546 = r13_518
	r12d_547 = (word32) r12_546 (alias)
	r13_548 = qwLoc98_499
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:0x00000000CCCCCCCD al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> edx:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C36C:
	r15_549 = PHI(r15_517, r15_581)
	r15d_550 = PHI(r15d_541, r15d_582)
	r9_551 = PHI(r9_544, r9_609)
	r9d_552 = PHI(r9d_545, r9d_610)
	r14_553 = PHI(r14_508, r14_583)
	r14d_554 = PHI(r14d_533, r14d_584)
	CZ_555 = PHI(CZ_521, CZ_579)
	rax_556 = PHI(rax_504, rax_608)
	eax_557 = PHI(eax_502, eax_590)
	ah_558 = PHI(ah_534, ah_593)
	ax_559 = PHI(ax_535, ax_594)
	al_560 = PHI(al_537, al_595)
	rdx_561 = PHI(rdx_520, rdx_605)
	rdx_rax_562 = PHI(rdx_rax_189, rdx_rax_591)
	SCZO_563 = PHI(SCZO_513, SCZO_604)
	rbp_564 = PHI(rbp_509, rbp_577)
	rsi_565 = PHI(rsi_507, rsi_606)
	rdi_566 = PHI(rdi_501, rdi_607)
	edx_567 = (word32) Mem0[rbp_564 + 0x0000000000000000:byte]
	rdx_568 = DPB(rdx_561, edx_567, 0) (alias)
	rdx_rax_569 = DPB(rdx_rax_562, edx_567, 64) (alias)
	edx_eax_570 = SEQ(edx_567, eax_557) (alias)
	dl_571 = (byte) edx_567 (alias)
	SZO_572 = cond(dl_571 & dl_571)
	Z_573 = SZO_572 (alias)
	C_574 = false
	branch (dl_571 & dl_571) == 0x00 l000000000040C383
// DataOut: dl ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C374:
	SCZO_613 = cond(dl_571 - 0x7E)
	CZ_614 = SCZO_613 (alias)
	r15d_615 = (word32) dl_571
	r15_616 = DPB(r15_549, r15d_615, 0) (alias)
	branch dl_571 <=u 0x7E l000000000040C37F
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> r15d:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C37B_1:
	r15_621 = r14_553
	r15d_622 = (word32) r15_621 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C37F:
	r15_617 = PHI(r15_616, r15_621)
	r15d_618 = PHI(r15d_615, r15d_622)
	rbp_619 = rbp_564 + 0x0000000000000001
	SCZO_620 = cond(rbp_619)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C383:
	r15_575 = PHI(r15_549, r15_617)
	r15d_576 = PHI(r15d_550, r15d_618)
	rbp_577 = PHI(rbp_564, rbp_619)
	SCZO_578 = cond(r15_575 - r14_553)
	CZ_579 = SCZO_578 (alias)
	rax_580 = fp - 0x0000000000000060
	branch r15_575 <=u r14_553 l000000000040C38F
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C38B_1:
	r15_611 = r14_553
	r15d_612 = (word32) r15_611 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:fp - 0x0000000000000060 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C38F:
	r15_581 = PHI(r15_575, r15_611)
	r15d_582 = PHI(r15d_576, r15d_612)
	r14_583 = r14_553 - r15_581
	r14d_584 = (word32) r14_583 (alias)
	r9_585 = r9_551 - r15_581
	rdx_586 = r15_581
	rsi_587 = fp - 0x0000000000000060 + r14_583
	rdi_588 = r9_585
	rax_589 = memcpy(rdi_588, rsi_587, rdx_586)
	eax_590 = (word32) rax_589 (alias)
	rdx_rax_591 = SEQ(rdx_586, rax_589) (alias)
	edx_eax_592 = rax_589 (alias)
	ah_593 = SLICE(rax_589, byte, 8) (alias)
	ax_594 = (word16) rax_589 (alias)
	al_595 = (byte) rax_589 (alias)
	SZO_596 = cond(r14_583 & r14_583)
	Z_597 = SZO_596 (alias)
	C_598 = false
	r9_599 = rax_589
	r9d_600 = (word32) r9_599 (alias)
	branch (r14_583 & r14_583) != 0x0000000000000000 l000000000040C358
// DataOut: ebx fs r11 r11d r12 r13 r14 r14d r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:fp - 0x0000000000000060 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C358:
	r9_603 = r9_599 - r13_548
	SCZO_604 = cond(r9_603)
	rdx_605 = r13_548
	rsi_606 = r12_546
	rdi_607 = r9_603
	rax_608 = memcpy(rdi_607, rsi_606, rdx_605)
	r9_609 = rax_608
	r9d_610 = (word32) r9_609 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C3AC:
	r12_601 = rax_589
	r12d_602 = (word32) r12_601 (alias)
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(0) Local -00B8(64)

l000000000040C242:
	qwLoc98_200 = PHI(qwLoc98_499, qwLoc98_156)
	r10b_201 = PHI(r10b_543, r10b_157)
	r10d_202 = PHI(r10d_542, r10d_158)
	dil_203 = PHI(dil_540, dil_159)
	sil_204 = PHI(sil_539, sil_160)
	P_205 = PHI(P_536, P_161)
	CZP_206 = PHI(CZP_532, CZP_162)
	esi_207 = PHI(esi_530, esi_163)
	edi_208 = PHI(edi_526, edi_164)
	r10_209 = PHI(r10_525, r10_165)
	S_210 = PHI(S_523, S_166)
	r11_211 = PHI(r11_519, r11_167)
	fs_212 = PHI(fs_515, fs_73)
	r8_213 = PHI(r8_514, r8_168)
	r13_214 = PHI(r13_548, r13_136)
	r15_215 = PHI(r15_581, r15_169)
	r15d_216 = PHI(r15d_582, r15d_170)
	r9_217 = PHI(r9_599, r9_171)
	r9d_218 = PHI(r9d_600, r9d_172)
	r12_219 = PHI(r12_601, r12_173)
	r12d_220 = PHI(r12d_602, r12d_174)
	r14_221 = PHI(r14_583, r14_175)
	r14d_222 = PHI(r14d_584, r14d_176)
	CZ_223 = PHI(CZ_579, CZ_177)
	ebx_224 = PHI(ebx_524, ebx_178)
	ecx_225 = PHI(ecx_516, ecx_179)
	rcx_226 = PHI(rcx_512, rcx_180)
	cl_227 = PHI(cl_527, cl_181)
	rax_228 = PHI(rax_589, rax_182)
	eax_229 = PHI(eax_590, eax_183)
	ah_230 = PHI(ah_593, ah_184)
	ax_231 = PHI(ax_594, ax_185)
	al_232 = PHI(al_595, al_186)
	rdx_233 = PHI(rdx_586, rdx_187)
	edx_234 = PHI(edx_567, edx_188)
	rdx_rax_235 = PHI(rdx_rax_591, rdx_rax_189)
	edx_eax_236 = PHI(edx_eax_592, edx_eax_190)
	dl_237 = PHI(dl_571, dl_191)
	SCZO_238 = PHI(SCZO_578, SCZO_192)
	rbx_239 = PHI(rbx_511, rbx_193)
	rbp_240 = PHI(rbp_577, rbp_107)
	rsi_241 = PHI(rsi_587, rsi_194)
	rdi_242 = PHI(rdi_588, rdi_195)
	rsp_243 = PHI(rsp_500, rsp_58)
	SZO_244 = cond(bLocB0 & 0x80)
	Z_245 = SZO_244 (alias)
	C_246 = false
	branch (bLocB0 & 0x80) == 0x00 l000000000040C2BA
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C249:
	SCZO_379 = cond(ebx_224 - 0xFFFFFFFF)
	Z_380 = SCZO_379 (alias)
	branch ebx_224 == 0xFFFFFFFF l000000000040C618
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C618:
	rdx_448 = qwLocA8_40
	edx_449 = (word32) rdx_448 (alias)
	rdx_rax_450 = SEQ(rdx_448, rax_228) (alias)
	edx_eax_451 = rdx_448 (alias)
	dl_452 = (byte) rdx_448 (alias)
	SCZO_453 = cond(rdx_448 - 0x0000000000000001)
	CZ_454 = SCZO_453 (alias)
	branch rdx_448 <=u 0x0000000000000001 l000000000040C7A9
// DataOut: fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00AC(64) Local -00B0(32) Local -00B8(64)

l000000000040C7A9:
	rbx_483 = 0x0000000000000000
	ebx_484 = (word32) rbx_483 (alias)
	SZO_485 = cond(ebx_484)
	C_486 = false
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C627:
	r14_455 = (uint64) dwLocAC_56
	r14d_456 = (word32) r14_455 (alias)
	rbx_457 = 0x0000000000000001
	ebx_458 = (word32) rbx_457 (alias)
	rax_459 = 0x0000000000000001
	eax_460 = (word32) rax_459 (alias)
	rdx_rax_461 = SEQ(rdx_448, rax_459) (alias)
	edx_eax_462 = rax_459 (alias)
	ah_463 = SLICE(rax_459, byte, 8) (alias)
	ax_464 = (word16) rax_459 (alias)
	al_465 = (byte) rax_459 (alias)
// DataOut: ebx fs r11 r11d r12 r14 r14d r15 r8 r9 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C640:
	ebx_466 = PHI(ebx_458, ebx_480)
	Z_467 = PHI(Z_380, Z_482)
	rax_468 = PHI(rax_459, rax_470)
	rbx_469 = PHI(rbx_457, rbx_479)
	rax_470 = rax_468 *s r14_455
	eax_471 = (word32) rax_470 (alias)
	rdx_rax_472 = SEQ(rdx_448, rax_470) (alias)
	edx_eax_473 = rax_470 (alias)
	ah_474 = SLICE(rax_470, byte, 8) (alias)
	ax_475 = (word16) rax_470 (alias)
	al_476 = (byte) rax_470 (alias)
	SCZO_477 = cond(rdx_448 - rax_470)
	CZ_478 = SCZO_477 (alias)
	branch rdx_448 <=u rax_470 l000000000040C252
// DataOut: ebx fs r11 r11d r12 r14 r14d r15 r8 r9 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C64D:
	rbx_479 = (uint64) (ebx_466 + 0x00000001)
	ebx_480 = (word32) rbx_479 (alias)
	SCZO_481 = cond(ebx_480 - 0x00000008)
	Z_482 = SCZO_481 (alias)
	branch ebx_480 != 0x00000008 l000000000040C640
// DataOut: ebx fs r11 r11d r12 r14 r14d r15 r8 r9 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C655:
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:(uint64) ((eax & 0xFFFFFFE8) + 0x00000400) r12:<invalid> rbx:(uint64) (ebx + 0x00000001) rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:r8 r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C252:
	r14_381 = PHI(r14_221, r14_455, r14_455, r14_221)
	r14d_382 = PHI(r14d_222, r14d_456, r14d_456, r14d_222)
	CZ_383 = PHI(CZ_223, CZ_478, CZ_478, CZ_454)
	ebx_384 = PHI(ebx_224, ebx_466, ebx_480, ebx_484)
	rdx_385 = PHI(rdx_233, rdx_448, rdx_448, rdx_448)
	edx_386 = PHI(edx_234, edx_449, edx_449, edx_449)
	dl_387 = PHI(dl_237, dl_452, dl_452, dl_452)
	SCZO_388 = PHI(SCZO_379, SCZO_477, SCZO_481, SCZO_453)
	rbx_389 = PHI(rbx_239, rbx_469, rbx_479, rbx_483)
	rax_390 = (uint64) dwLocB0_38
	eax_391 = (word32) rax_390 (alias)
	rcx_392 = (uint64) ebx_384
	ecx_393 = (word32) rcx_392 (alias)
	rax_394 = (uint64) (eax_391 & 0x00000100)
	eax_395 = (word32) rax_394 (alias)
	rdx_rax_396 = SEQ(rdx_385, rax_394) (alias)
	edx_eax_397 = rax_394 (alias)
	ah_398 = SLICE(rax_394, byte, 8) (alias)
	ax_399 = (word16) rax_394 (alias)
	al_400 = (byte) rax_394 (alias)
	rcx_401 = (uint64) (ecx_393 | eax_395)
	ecx_402 = (word32) rcx_401 (alias)
	SZO_403 = cond(ecx_402)
	Z_404 = SZO_403 (alias)
	C_405 = false
	branch ecx_402 == 0x00000000 l000000000040C2BA
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(0) Local -00B8(64)

l000000000040C261:
	SZO_406 = cond(bLocB0 & 0x40)
	Z_407 = SZO_406 (alias)
	C_408 = false
	branch (bLocB0 & 0x40) != 0x00 l000000000040C3E8
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B8(64)

l000000000040C3E8:
	rcx_444 = qwLocA0_35
	rsi_445 = rcx_444 + 0x0000000000000289
	Mem446[rcx_444 + 0x0000000000000288:byte] = 0x20
	qwLocB8_447 = rsi_445
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C26C:
	rcx_409 = PHI(rcx_401, rcx_444)
	qwLocB8_410 = PHI(qwLocB8_143, qwLocB8_447)
	rsi_411 = PHI(rsi_241, rsi_445)
	SZO_412 = cond(ebx_384 & ebx_384)
	Z_413 = SZO_412 (alias)
	C_414 = false
	branch (ebx_384 & ebx_384) == 0x00000000 l000000000040C7EB
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C274:
	rcx_415 = qwLocB8_410
	rdx_416 = rcx_415 + 0x0000000000000001
	edx_417 = (word32) rdx_416 (alias)
	rdx_rax_418 = SEQ(rdx_416, rax_394) (alias)
	edx_eax_419 = rdx_416 (alias)
	dl_420 = (byte) rdx_416 (alias)
	rcx_421 = (uint64) dwLoc78_48
	ecx_422 = (word32) rcx_421 (alias)
	SZO_423 = cond(ecx_422 & ecx_422)
	Z_424 = SZO_423 (alias)
	C_425 = false
	branch (ecx_422 & ecx_422) == 0x00000000 l000000000040C3D0
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C3D0:
	SCZO_439 = cond(ebx_384 - 0x00000001)
	Z_440 = SCZO_439 (alias)
	rcx_441 = 0x000000000000006B
	ecx_442 = (word32) rcx_441 (alias)
	cl_443 = (byte) rcx_441 (alias)
	branch ebx_384 != 0x00000001 l000000000040C289
// DataOut: cl eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:(uint64) eax r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C3DE:
// DataOut: cl eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:0x000000000000006B r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:0x6B edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:0x0000006B dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C289:
	Z_433 = PHI(Z_424, Z_440)
	SCZO_434 = PHI(SCZO_388, SCZO_439)
	rcx_435 = (int64) ebx_384
	ecx_436 = (word32) Mem0[rcx_435 + 0x0000000000415F78:byte]
	rcx_437 = DPB(rcx_435, ecx_436, 0) (alias)
	cl_438 = (byte) ecx_436 (alias)
// DataOut: cl eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> ecx:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C293:
	ecx_426 = PHI(ecx_436, ecx_442)
	rcx_427 = PHI(rcx_437, rcx_441)
	cl_428 = PHI(cl_438, cl_443)
	Z_429 = PHI(Z_433, Z_440)
	SCZO_430 = PHI(SCZO_434, SCZO_439)
	rdi_431 = qwLocB8_410
	Mem432[rdi_431:byte] = cl_428
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> ecx:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C29A:
	r14_324 = PHI(r14_381, r14_247)
	r14d_325 = PHI(r14d_382, r14d_248)
	CZ_326 = PHI(CZ_383, CZ_249)
	ebx_327 = PHI(ebx_384, ebx_250)
	ecx_328 = PHI(ecx_426, ecx_251)
	rcx_329 = PHI(rcx_427, rcx_252)
	cl_330 = PHI(cl_428, cl_253)
	qwLocB8_331 = PHI(qwLocB8_410, qwLocB8_254)
	rax_332 = PHI(rax_394, rax_258)
	eax_333 = PHI(eax_395, eax_259)
	ah_334 = PHI(ah_398, ah_260)
	ax_335 = PHI(ax_399, ax_261)
	al_336 = PHI(al_400, al_262)
	rdx_337 = PHI(rdx_416, rdx_267)
	edx_338 = PHI(edx_417, edx_268)
	rdx_rax_339 = PHI(rdx_rax_418, rdx_rax_269)
	edx_eax_340 = PHI(edx_eax_419, edx_eax_270)
	dl_341 = PHI(dl_420, dl_271)
	SCZO_342 = PHI(SCZO_430, SCZO_263)
	rbx_343 = PHI(rbx_389, rbx_264)
	rsi_344 = PHI(rsi_411, rsi_265)
	rdi_345 = PHI(rdi_431, rdi_266)
	SZO_346 = cond(eax_333 & eax_333)
	Z_347 = SZO_346 (alias)
	C_348 = false
	branch (eax_333 & eax_333) == 0x00000000 l000000000040C7F5
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C7F5:
	qwLocB8_378 = rdx_337
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C2A2:
	rax_349 = (uint64) dwLoc78_48
	eax_350 = (word32) rax_349 (alias)
	rdx_rax_351 = SEQ(rdx_337, rax_349) (alias)
	edx_eax_352 = rax_349 (alias)
	SZO_353 = cond(eax_350 & eax_350)
	Z_354 = SZO_353 (alias)
	C_355 = false
	branch (eax_350 & eax_350) != 0x00000000 l000000000040C3B8
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C3B8:
	SZO_368 = cond(ebx_327 & ebx_327)
	Z_369 = SZO_368 (alias)
	C_370 = false
	branch (ebx_327 & ebx_327) == 0x00000000 l000000000040C2AE
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) eax r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C3C0:
	Mem371[rdx_337:byte] = 0x69
	rdx_372 = rdx_337 + 0x0000000000000001
	edx_373 = (word32) rdx_372 (alias)
	rdx_rax_374 = SEQ(rdx_372, rax_349) (alias)
	edx_eax_375 = rdx_372 (alias)
	dl_376 = (byte) rdx_372 (alias)
	SCZO_377 = cond(rdx_372)
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) eax r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C2AE:
	SZO_356 = PHI(SZO_353, SZO_368, SZO_368)
	Z_357 = PHI(Z_354, Z_369, Z_369)
	C_358 = PHI(C_355, C_370, C_370)
	rdx_359 = PHI(rdx_337, rdx_337, rdx_372)
	edx_360 = PHI(edx_338, edx_338, edx_373)
	rdx_rax_361 = PHI(rdx_rax_351, rdx_rax_351, rdx_rax_374)
	edx_eax_362 = PHI(edx_eax_352, edx_eax_352, edx_eax_375)
	dl_363 = PHI(dl_341, dl_341, dl_376)
	SCZO_364 = PHI(SCZO_342, SCZO_342, SCZO_377)
	rax_365 = rdx_359 + 0x0000000000000001
	Mem366[rdx_359:byte] = 0x42
	qwLocB8_367 = rax_365
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:(uint64) eax r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> ecx:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C2BA:
	r14_272 = PHI(r14_221, r14_381, r14_324, r14_324)
	r14d_273 = PHI(r14d_222, r14d_382, r14d_325, r14d_325)
	CZ_274 = PHI(CZ_223, CZ_383, CZ_326, CZ_326)
	ebx_275 = PHI(ebx_224, ebx_384, ebx_327, ebx_327)
	ecx_276 = PHI(ecx_225, ecx_402, ecx_328, ecx_328)
	rcx_277 = PHI(rcx_226, rcx_401, rcx_329, rcx_329)
	cl_278 = PHI(cl_227, cl_227, cl_330, cl_330)
	qwLocB8_279 = PHI(qwLocB8_143, qwLocB8_143, qwLocB8_367, qwLocB8_378)
	rdx_280 = PHI(rdx_233, rdx_385, rdx_359, rdx_337)
	edx_281 = PHI(edx_234, edx_386, edx_360, edx_338)
	dl_282 = PHI(dl_237, dl_387, dl_363, dl_341)
	SCZO_283 = PHI(SCZO_238, SCZO_388, SCZO_364, SCZO_342)
	rbx_284 = PHI(rbx_239, rbx_389, rbx_343, rbx_343)
	rsi_285 = PHI(rsi_241, rsi_241, rsi_344, rsi_344)
	rax_286 = qwLocB8_279
	rdi_287 = qwLoc28_44
	rdi_288 = rdi_287 ^ Mem0[fs_212:0x00000028:word64]
	SZO_289 = cond(rdi_288)
	Z_290 = SZO_289 (alias)
	C_291 = false
	Mem292[rax_286:byte] = 0x00
	rax_293 = r12_219
	eax_294 = (word32) rax_293 (alias)
	rdx_rax_295 = SEQ(rdx_280, rax_293) (alias)
	edx_eax_296 = rax_293 (alias)
	ah_297 = SLICE(rax_293, byte, 8) (alias)
	ax_298 = (word16) rax_293 (alias)
	al_299 = (byte) rax_293 (alias)
	branch rdi_288 != 0x0000000000000000 l000000000040C7E6
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C7E6:
	__stack_chk_fail()
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C7EB:
	r14_247 = PHI(r14_381, r14_272)
	r14d_248 = PHI(r14d_382, r14d_273)
	CZ_249 = PHI(CZ_383, CZ_274)
	ebx_250 = PHI(ebx_384, ebx_275)
	ecx_251 = PHI(ecx_402, ecx_276)
	rcx_252 = PHI(rcx_409, rcx_277)
	cl_253 = PHI(cl_227, cl_278)
	qwLocB8_254 = PHI(qwLocB8_410, qwLocB8_279)
	SZO_255 = PHI(SZO_412, SZO_289)
	Z_256 = PHI(Z_413, Z_290)
	C_257 = PHI(C_414, C_291)
	rax_258 = PHI(rax_394, rax_293)
	eax_259 = PHI(eax_395, eax_294)
	ah_260 = PHI(ah_398, ah_297)
	ax_261 = PHI(ax_399, ax_298)
	al_262 = PHI(al_400, al_299)
	SCZO_263 = PHI(SCZO_388, SCZO_283)
	rbx_264 = PHI(rbx_389, rbx_284)
	rsi_265 = PHI(rsi_411, rsi_285)
	rdi_266 = PHI(rdi_242, rdi_288)
	rdx_267 = qwLocB8_254
	edx_268 = (word32) rdx_267 (alias)
	rdx_rax_269 = SEQ(rdx_267, rax_258) (alias)
	edx_eax_270 = rdx_267 (alias)
	dl_271 = (byte) rdx_267 (alias)
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C2DC:
	rsp_300 = fp - 0x0000000000000018
	SCZO_301 = cond(fp - 0x0000000000000018)
	rbx_303 = qwLoc18
	rsp_304 = fp - 0x0000000000000010
	rbp_306 = qwLoc10
	rsp_307 = fp - 0x0000000000000008
	rsp_309 = qwLoc08
	rsp_310 = rsp_309 + 0x0000000000000008
	rbp_311 = Mem292[rsp_310:word64]
	rsp_312 = rsp_310 + 0x0000000000000008
	rsi_313 = Mem292[rsp_312:word64]
	rsp_314 = rsp_312 + 0x0000000000000008
	rdi_315 = Mem292[rsp_314:word64]
	rsp_316 = rsp_314 + 0x0000000000000008
	return rax_293
// DataOut: fs r11 r11d r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 rax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040BD70_exit:
	use rsp_316 (=> rspOut)
	use rbp_311 (=> rbpOut)
	use r8_213 (=> r8Out)
	use r9_217 (=> r9Out)
	use r11_211 (=> r11Out)
	use r14d_273 (=> r14dOut)
	use r15_215 (=> r15Out)
// DataOut: r11 r11d r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 rax:<invalid> r14:<invalid> r12:<invalid> rbx:rbx rcx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> r11:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r10:<invalid> r9:<invalid> al:<invalid> eax:<invalid> Sequence rdx:rax:<invalid> cl:<invalid> edx:<invalid> ah:<invalid> r15d:<invalid> ecx:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> edi:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):(eax & 0xFFFFFFE8) + 0x00000400 -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):eax -116(fp):r9d -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040C810(word64 rax, word64 rdx, word64 rdi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rax rdi rdx
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040C810_entry:
// DataOut: r8 rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C810:
	word32 ebp_121
	word64 rbp_136
	word64 rdx_134
	word64 r12_11 = rdx
	word64 rbx_108 = rdi
	branch rdi == 0x0000000000000000 l000000000040C910
// DataOut: r12 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040C910:
	rax = getenv(0x00000000004138E4)
	rbx_108 = rax
	branch rax != 0x0000000000000000 l000000000040C82C
// DataOut: r12 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:rdi -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C926:
	rax = getenv(0x0000000000415F24)
	rbx_108 = rax
	branch rax != 0x0000000000000000 l000000000040C82C
// DataOut: r12 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rdi:0x00000000004138E4 rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C93C:
	word64 rdx_258 = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
	Mem262[rdx:word64] = rdx_258 + 512
	rbp_136 = 0x0000000000000000
	ebp_121 = 0x00000000 (alias)
	rdx_134 = rdx_258 + 512
// DataOut: ebp r12 r8 rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rdi:0x0000000000415F24 rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C82C:
	branch Mem0[rbx_108:byte] == 0x27 l000000000040C8A0
// DataOut: r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rdi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8A0:
	rbx_108 = rbx_108 + 0x0000000000000001
// DataOut: r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rbp:0x0000000000000000 rdi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C833:
	word64 rsp_120
	word64 r14_123
	word64 rax_124 = fn0000000000409E50(rax, 0x0000000000000004, 0x0000000000415F50, 0x0000000000415F60, rbx_108, out rsp_120, out ebp_121, out r12_11, out r14_123)
	byte al_127 = (byte) rax_124
	branch (word32) rax_124 < 0x00000000 l000000000040C8B0
// DataOut: al ebp r12 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> rbp:<invalid> bpl:0x04 rdi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8B0:
	word64 rsp_151
	word64 r8_153
	branch fn0000000000411360(0x00000000, rsp_120 + 0x0000000000000008, rbx_108, r8, out rsp_151, out rbp_136, out r8_153, out r12_11) != 0x00000000 l000000000040C968
// DataOut: ebp r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> r15:<invalid> r14:<invalid> ecx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C968:
	Mem225[rbp_136:word32] = 0x00000000
	rdx_134 = Mem225[r12_11:word64]
// DataOut: r12 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8D0:
	branch (byte) (uint64) ((word32) Mem0[rbx_108:byte] - 0x00000030) <=u 0x09 l000000000040C907
// DataOut: ebp r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8DA:
	word64 rdx_180 = Mem0[rsp_151 + 0x0000000000000008:word64]
	branch rbx_108 != rdx_180 l000000000040C8F9
// DataOut: ebp r12 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8F9:
	word64 rbx_211 = rbx_108 + 0x0000000000000001
	branch (byte) (uint64) ((word32) Mem0[rbx_211:byte] - 0x00000030) >u 0x09 l000000000040C8F0
	rbx_108 = rbx_211 + 0x0000000000000001
	branch (byte) (uint64) ((word32) Mem0[rbx_211 + 0x0000000000000001:byte] - 0x00000030) >u 0x09 l000000000040C8F0
// DataOut: ebp r12 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8F0:
	branch rbx_211 + 0x0000000000000001 == rdx_180 l000000000040C980
// DataOut: ebp r12 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8E4:
// DataOut: ebp r12 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C980:
	branch Mem0[rdx_180 - 0x0000000000000001:byte] == 0x42 l000000000040C998
// DataOut: ebp r12 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C998:
	rbp_136 = (uint64) (ebp_121 | 0x00000180)
	ebp_121 = (word32) rbp_136 (alias)
	branch Mem0[rdx_180 - 0x0000000000000002:byte] != 0x69 l000000000040C907
// DataOut: ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C9A8:
// DataOut: ebp r12 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C986:
	ebp_121 = DPB(ebp_121, 0x84, 0) (alias)
// DataOut: ebp r12 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:0x04 r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C98A:
	rbp_136 = (uint64) (ebp_121 | 0x00000020)
	ebp_121 = (word32) rbp_136 (alias)
// DataOut: ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C907:
	rdx_134 = Mem0[r12_11:word64]
// DataOut: ebp r12 r8 rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> bpl:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C84E:
	Mem133[r12_11:word64] = 0x0000000000000001
	rbp_136 = (uint64) (ebp_121 | Mem133[DPB(rax_124, (int16) al_127, 0) * 0x00000004 + 0x00415F50:word32])
	rdx_134 = 0x0000000000000001
	ebp_121 = (word32) rbp_136 (alias)
// DataOut: ebp r12 r8 rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:0x0000000000000004 rdx:<invalid> rsi:<invalid> rdi:<invalid> bpl:0x04 rax:<invalid> r15:<invalid> r14:<invalid> ecx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C864:
	Mem97[rbp_136:word32] = ebp_121
// DataOut: r12 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:(int16) al rax:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C86A:
	branch rdx_134 != 0x0000000000000000 l000000000040C894
// DataOut: r12 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C86F:
	Mem75[r12_11:word64] = (uint64) ((word32) (0x0000000000000000 - (getenv(0x0000000000415F2E) <u 0x0000000000000001)) & 0x00000200)
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C894:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn000000000040C810_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> rbp:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> rax:<invalid> r8:<invalid> bpl:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> cl:<invalid> ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn000000000040C9B0(word64 rsi, word32 edi, word64 r8, word64 r12, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r12 r8 rsi
// LiveOut: ebp esp r12 r12b rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040C9B0_entry:
	*r12Out = r12
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C9B0:
	word32 ebp_10 = (word32) (uint64) edi
	word64 rsp_11 = fp - 0x000000000000000C
	word64 rbx_100 = Mem0[0x000000000061B1F8:word64]
	branch rbx_100 != 0x0000000000000000 l000000000040C9D1
// DataOut: ebp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040C9D1:
	branch Mem0[rbx_100:word32] != ebp_10 l000000000040C9C8
	branch Mem0[rbx_100:word32] != ebp_10 l000000000040C9C8
// DataOut: ebp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9C8:
	rbx_100 = Mem0[rbx_100 + 0x0000000000000008:word64]
	branch rbx_100 == 0x0000000000000000 l000000000040C9F0
// DataOut: ebp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9C2:
// DataOut: ebp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9F0:
	word64 rax_63 = getpwuid((uint64) ebp_10)
	word64 rdi_68 = 0x0000000000000011
	branch rax_63 == 0x0000000000000000 l000000000040CA16
// DataOut: ebp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CA07:
	r12 = Mem0[r8:word64]
	*r12Out = r12
	rdi_68 = DPB(rax_63, strlen(r12), 0) + 0x0000000000000011
// DataOut: ebp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:0x0000000000416919 rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CA16:
	word64 rax_76 = fn0000000000410C40(rsi, rdi_68, out rsp_11)
	Mem78[rax_76:word32] = ebp_10
	strcpy(rax_76 + 0x0000000000000010, r12)
	word64 rax_82 = Mem78[0x000000000061B1F8:word64]
	Mem83[0x000000000061B1F8:word64] = rax_76
	Mem84[rax_76 + 0x0000000000000008:word64] = rax_82
	rbx_100 = rax_76
// DataOut: fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:0x0000000000416919 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9D5:
	word64 rbx_31 = Mem0[rsp_11:word64]
	word64 rsp_35 = Mem0[rsp_11 + 0x0000000000000010:word64]
	branch Mem0[rbx_100 + 0x0000000000000010:byte] == 0x00 l000000000040C9E7
	word64 rax_37 = 0x0000000000000000
	word64 rbp_44
	*rbpOut = Mem0[rsp_35 + 0x0000000000000010:word64]
	word64 rsp_48
	*rspOut = Mem0[rsp_35 + 0x0000000000000018:word64] + 0x0000000000000008
	branch Mem0[rbx_31 + 0x0000000000000010:byte] == 0x00 l000000000040C9E7
// DataOut: ebp esp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:(uint64) edi rbx:<invalid> rdi:<invalid> rax:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9E3_1:
	rax_37 = rbx_31 + 0x0000000000000010
// DataOut: ebp esp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:0x0000000000000000 rdx:<invalid> rdi:<invalid> r12:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9E3_1:
	rax_37 = rbx_31 + 0x0000000000000010
// DataOut: ebp esp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:0x0000000000000000 rdx:<invalid> rdi:<invalid> r12:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9E7:
	return rax_37
	return rax_37
// DataOut: ebp esp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040C9B0_exit:
// DataOut: ebp esp r12 r12b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040CB40(word64 rax, word64 rsi, word32 edi, word64 r8, word64 r12, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r12 r8 rax rsi
// LiveOut: r12 rax rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040CB40_entry:
	*r12Out = r12
// DataOut: edi fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CB40:
	word64 rbx_100
	word64 rbp_9 = (uint64) edi
	word32 ebp_10 = (word32) rbp_9
	word64 rsp_11 = fp - 0x000000000000000C
	word64 rbx_16 = Mem0[0x000000000061B1E8:word64]
	rbx_100 = rbx_16
	branch rbx_16 != 0x0000000000000000 l000000000040CB61
// DataOut: ebp fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CB61:
	branch Mem0[rbx_100:word32] != ebp_10 l000000000040CB58
	branch Mem0[rbx_100:word32] != ebp_10 l000000000040CB58
// DataOut: ebp fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB58:
	rbx_100 = Mem0[rbx_100 + 0x0000000000000008:word64]
	branch rbx_100 == 0x0000000000000000 l000000000040CB80
// DataOut: ebp fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB52:
// DataOut: ebp fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB80:
	word64 rsp_70
	word64 rbp_71
	word32 ebp_72
	word32 edi_73
	word64 rbx_74
	byte SZO_75
	byte C_76
	byte Z_77
	byte SCZO_78
	word32 eax_79
	word64 rax_80
	word64 rdx_81
	word64 rdi_82
	word32 esp_83
	word64 r8_85
	word64 rsi_86
	word64 r12_105
	call getgrgid (retsize: 8; depth: 8)
		uses: C_19,dwLoc04_4,dwLoc08_7,dwLoc0C_14,eax,ebp_10,edi,esp_12,r12,r8,rax,rbp_9,rbx_16,rdi_61,rdx,rsi,rsp_62,SCZO,SZO_17,Z_18
		defs: C_76,eax_79,ebp_72,edi_73,esp_83,r12_84,r8_85,rax_80,rbp_71,rbx_74,rdi_82,rdx_81,rsi_86,rsp_70,SCZO_78,SZO_75,Z_77
	word64 rdi_108 = 0x0000000000000011
	branch rax_80 == 0x0000000000000000 l000000000040CBA6
// DataOut: ebp fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:(uint64) edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB97:
	r12_105 = Mem0[r8_85:word64]
	*r12Out = r12_105
	rdi_108 = DPB(rax_80, strlen(r12_105), 0) + 0x0000000000000011
// DataOut: ebp fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:0x0000000000416919 rbp:(uint64) edi rbx:<invalid> rdi:0x0000000000000011 -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CBA6:
	word64 rax_96 = fn0000000000410C40(rsi_86, rdi_108, out rsp_11)
	Mem98[rax_96:word32] = ebp_72
	strcpy(rax_96 + 0x0000000000000010, r12_105)
	word64 rax_102 = Mem98[0x000000000061B1E8:word64]
	Mem103[0x000000000061B1E8:word64] = rax_96
	Mem104[rax_96 + 0x0000000000000008:word64] = rax_102
	rbx_100 = rax_96
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:0x0000000000416919 rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB65:
	word64 rbx_32 = Mem0[rsp_11:word64]
	word64 rsp_36 = Mem0[rsp_11 + 0x0000000000000010:word64]
	branch Mem0[rbx_100 + 0x0000000000000010:byte] == 0x00 l000000000040CB77
	word64 rax_38 = 0x0000000000000000
	word64 rbx_43
	*rbxOut = Mem0[rsp_36 + 0x0000000000000008:word64]
	word64 rbp_45
	*rbpOut = Mem0[rsp_36 + 0x0000000000000010:word64]
	word64 rsp_49
	*rspOut = Mem0[rsp_36 + 0x0000000000000018:word64] + 0x0000000000000008
	branch Mem0[rbx_32 + 0x0000000000000010:byte] == 0x00 l000000000040CB77
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:(uint64) edi rbx:<invalid> rdi:<invalid> r12:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB73_1:
	rax_38 = rbx_32 + 0x0000000000000010
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:0x0000000000000000 rdx:<invalid> rdi:<invalid> r12:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB73_1:
	rax_38 = rbx_32 + 0x0000000000000010
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:0x0000000000000000 rdx:<invalid> rdi:<invalid> r12:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB77:
	return rax_38
	return rax_38
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040CB40_exit:
// DataOut: r12 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040CCD0(word64 rsi, word64 rdi, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: r14 r14d rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040CCD0_entry:
// DataOut: dil fs r11 r11d r12 r13 r15 r15b rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CCD0:
	Mem8[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_26 = rsi + 0x0000000000000014
	word64 r14_9
	*r14Out = 0x0000000066666667
	branch rdi < 0x0000000000000000 l000000000040CD28
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD28:
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b r8 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 r14:0x0000000066666667

l000000000040CD30:
	word64 rdx_68 = (rsi *s rdi >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_26 = rcx_26 - 0x0000000000000001
	Mem79[rcx_26:byte] = (byte) (uint64) (rdx_68 * 0x0000000000000005 * 0x00000002 + 0x0000000000000030 - edi)
	rdi = rdx_68
	edi = (word32) rdx_68 (alias)
	branch rdx_68 != 0x0000000000000000 l000000000040CD30
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b r8 rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 r8:rsi rsi:0x0000000000000030 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CD5B:
	Mem83[rcx_26 - 0x0000000000000001:byte] = 0x2D
	return rcx_26 - 0x0000000000000001
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 r8:rsi rsi:0x0000000000000030 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CCE7:
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 r14:0x0000000066666667

l000000000040CCF0:
	word64 rdx_35 = (rsi *s rdi >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_26 = rcx_26 - 0x0000000000000001
	Mem45[rcx_26:byte] = (byte) (uint64) ((word32) (rdi - (rdx_35 * 0x0000000000000005) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_35
	branch rdx_35 != 0x0000000000000000 l000000000040CCF0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CD20:
	return rcx_26
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CCD0_exit:
// DataOut: r14 r14d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> r8:rsi rsi:0x0000000000000030 eax:<invalid>



word64 fn000000000040CD70(word64 rsi, word64 rdi, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: eax r14 r14d rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx r14 r14b r14d r14w rax rcx rdi rdx
// Preserved: rsp
fn000000000040CD70_entry:
// DataOut: dil fs r11 r11d r12 r13 r13d r15 r15b rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD70:
	Mem4[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_10 = rsi + 0x0000000000000014
	word64 r14_5
	*r14Out = 0x00000000CCCCCCCD
// DataOut: dil fs r11 r11d r12 r13 r13d r14 r14d r15 r15b rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD88:
	word64 rdx_rax_11 = rsi *u rdi
	rcx_10 = rcx_10 - 0x0000000000000001
	Mem23[rcx_10:byte] = (byte) (uint64) ((word32) (rdi - ((rdx_rax_11 >>u 0x0000000000000003) + (rdx_rax_11 >>u 0x0000000000000003) * 0x0000000000000004) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_rax_11 >>u 0x0000000000000003
	branch rdx_rax_11 >>u 0x0000000000000003 != 0x0000000000000000 l000000000040CD88
// DataOut: dil fs r11 r11d r12 r13 r13d r14 r14d r15 r15b rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

l000000000040CDAE:
	return rcx_10
// DataOut: eax fs r11 r11d r12 r13 r13d r14 r14d r15 r15b rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>

fn000000000040CD70_exit:
// DataOut: eax r14 r14d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid>



void fn000000000040CDC0(word64 rax, word64 rcx, word64 rdx, word64 rsi, word64 rdi, word32 r8d, word32 r9d)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8d r9b r9d rax rcx rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bp bpl ch cl cx dh di dil dl dx eax ebp ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040CDC0_entry:
// DataOut: r8d r9b r9d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CDC0:
	word64 r15_419
	word64 qwLoc40_106
	word64 rbp_127
	word64 rax_399
	word64 rcx_123
	word32 eax_321
	word32 ecx_315
	word64 r12_124
	word64 rbx_24 = (uint64) r9d
	word64 rax_34 = DPB(rax, strlen(rdi), 0)
	word64 r13_11 = rsi
	word64 r12_16 = rcx
	word32 ebx_112 = (word32) rbx_24
	byte bl_113 = (byte) rbx_24
	word64 qwLoc48_105 = rdi
	word64 r14_110 = rax_34
	word64 rbp_42 = rax_34
	branch (bl_113 & 0x02) == 0x00 l000000000040CF60
// DataOut: bl ebx r12 r13 r14 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0048(64)

l000000000040CF60:
	word64 rsp_573
	word64 rdi_574
	word64 rsi_575
	word64 rcx_579
	word64 rbx_580
	word32 r9d_582
	byte SCZO_583
	word64 rdx_584
	word32 r8d_585
	word64 rax_586
	byte SZO_588
	byte C_589
	byte Z_591
	word64 r15_592
	word32 ebp_593
	byte CZ_594
	word32 ecx_595
	word32 eax_596
	word32 r12d_597
	word32 edx_598
	word32 edi_599
	word32 r15d_600
	word16 ax_601
	byte al_602
	call __ctype_get_mb_cur_max (retsize: 8; depth: 88)
		uses: al_37,ax_36,bl_26,bLoc21,C_40,CZ,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_35,ebp_43,ebx_25,ecx,edi,edx,qwLoc08,qwLoc10,qwLoc18,qwLoc30,qwLoc38_30,qwLoc40,qwLoc48_28,r12_16,r12d_17,r13_11,r14_41,r15,r15d,r8d,r9d,rax_34,rbp_42,rbx_24,rcx,rdi,rdx,rsi,rsp_27,SCZO,SZO_38,Z_39
		defs: al_602,ax_601,bl_587,C_589,CZ_594,eax_596,ebp_593,ebx_581,ecx_595,edi_599,edx_598,r12_578,r12d_597,r13_577,r14_590,r15_592,r15d_600,r8d_585,r9d_582,rax_586,rbp_576,rbx_580,rcx_579,rdi_574,rdx_584,rsi_575,rsp_573,SCZO_583,SZO_588,Z_591
	branch rax_586 <=u 0x0000000000000001 l000000000040CDFA
// DataOut: bl ebx r12 r13 r14 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:DPB(rax, <invalid>, 0) r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0048(64)

l000000000040CF6F:
	word64 rsp_611
	word64 rdi_612
	word64 rsi_613
	word64 rbp_614
	word64 rcx_617
	word64 rbx_618
	word32 r9d_620
	byte SCZO_621
	word64 rdx_622
	word32 r8d_623
	word64 rax_624
	byte SZO_626
	byte C_627
	byte Z_629
	word64 r15_630
	word32 ebp_631
	byte CZ_632
	word32 ecx_633
	word32 eax_634
	word32 r12d_635
	word32 edx_636
	word32 edi_637
	word32 r15d_638
	word16 ax_639
	byte al_640
	call mbstowcs (retsize: 8; depth: 88)
		uses: al_602,ax_601,bl_587,bLoc21,C_610,CZ_604,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_596,ebp_593,ebx_581,ecx_595,edi_608,edx_598,qwLoc08,qwLoc10,qwLoc18,qwLoc30,qwLoc38_30,qwLoc40,qwLoc48_28,r12_578,r12d_597,r13_577,r14_590,r15_592,r15d_600,r8d_585,r9d_582,rax_586,rbp_576,rbx_580,rcx_579,rdi_607,rdx_606,rsi_605,rsp_573,SCZO_603,SZO_609,Z_591
		defs: al_640,ax_639,bl_625,C_627,CZ_632,eax_634,ebp_631,ebx_619,ecx_633,edi_637,edx_636,r12_616,r12d_635,r13_615,r14_628,r15_630,r15d_638,r8d_623,r9d_620,rax_624,rbp_614,rbx_618,rcx_617,rdi_612,rdx_622,rsi_613,rsp_611,SCZO_621,SZO_626,Z_629
	branch rax_624 != 0xFFFFFFFFFFFFFFFF l000000000040CFA8
// DataOut: bl ebx r12 r13 r14 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0048(64)

l000000000040CFA8:
	word64 r15_669 = (rax_624 + 0x0000000000000001) * 0x0000000000000004
	word64 rax_673 = malloc(r15_669)
	qwLoc40_106 = rax_673
	branch rax_673 == 0x0000000000000000 l000000000040D160
// DataOut: bl ebx r12 r13 r14 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D160:
	branch (bl_113 & 0x01) == 0x00 l000000000040CF8C
// DataOut: bl ebx r12 r13 r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D169:
	r15_419 = r14_110
	rbp_127 = 0x0000000000000000
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CFCF:
	word64 rsp_684
	word64 rdi_685
	word64 rsi_686
	word64 rcx_690
	word64 rbx_691
	word32 r9d_693
	byte SCZO_694
	word64 rdx_695
	word32 r8d_696
	word64 rax_697
	byte SZO_699
	byte C_700
	byte Z_702
	word64 r15_703
	word32 ebp_704
	byte CZ_705
	word32 ecx_706
	word32 eax_707
	word32 r12d_708
	word32 edx_709
	word32 edi_710
	word32 r15d_711
	word16 ax_712
	byte al_713
	call mbstowcs (retsize: 8; depth: 88)
		uses: al_676,ax_675,bl_625,bLoc21,C_679,CZ_632,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_674,ebp_631,ebx_619,ecx_633,edi_637,edx_636,qwLoc08,qwLoc10,qwLoc18,qwLoc30_671,qwLoc38_30,qwLoc40_680,qwLoc48_28,r12_616,r12d_635,r13_615,r14_628,r15_669,r15d_670,r8d_623,r9d_620,rax_673,rbp_614,rbx_618,rcx_617,rdi_683,rdx_681,rsi_682,rsp_611,SCZO_641,SZO_677,Z_678
		defs: al_713,ax_712,bl_698,C_700,CZ_705,eax_707,ebp_704,ebx_692,ecx_706,edi_710,edx_709,r12_689,r12d_708,r13_688,r14_701,r15_703,r15d_711,r8d_696,r9d_693,rax_697,rbp_687,rbx_691,rcx_690,rdi_685,rdx_695,rsi_686,rsp_684,SCZO_694,SZO_699,Z_702
	branch rax_697 == 0x0000000000000000 l000000000040CE03
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CFEC:
	word64 rsi_750
	word64 qwLoc30_730
	Mem721[rax_673 - 0x0000000000000004 + r15_703:word32] = 0x00000000
	word64 rdi_722 = (uint64) Mem721[rax_673:word32]
	word32 edi_723 = (word32) rdi_722
	branch edi_723 == 0x00000000 l000000000040D106
// DataOut: bl eax ebx r12 r13 r14 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D106:
	word64 rax_971 = DPB(rax_673, wcswidth(rax_673, rax_624 + 0x0000000000000001), 0)
	r15_419 = (int64) wcswidth(rax_673, rax_624 + 0x0000000000000001)
// DataOut: bl ebx r12 r13 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D004:
	byte bLoc21_907 = 0x00
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D010:
	word64 rsp_909
	word64 rdi_910
	word64 rsi_911
	word64 rcx_915
	word64 rbx_916
	word32 r9d_918
	byte SCZO_919
	word64 rdx_920
	word32 r8d_921
	word64 rax_922
	byte SZO_924
	byte C_925
	byte Z_927
	word64 r15_928
	word32 ebp_929
	byte CZ_930
	word32 ecx_931
	word32 eax_932
	word32 r12d_933
	word32 edx_934
	word32 edi_935
	word32 r15d_936
	word16 ax_937
	byte al_938
	call iswprint (retsize: 8; depth: 88)
		uses: al_720,ax_719,bl_698,bLoc21_908,C_726,CZ_705,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_718,ebp_704,ebx_692,ecx_706,edi_723,edx_709,qwLoc08,qwLoc10,qwLoc18,qwLoc30_671,qwLoc38_30,qwLoc40_680,qwLoc48_28,r12_689,r12d_708,r13_688,r14_701,r15_905,r15d_906,r8d_696,r9d_693,rax_717,rbp_687,rbx_691,rcx_690,rdi_722,rdx_695,rsi_686,rsp_684,SCZO_694,SZO_724,Z_725
		defs: al_938,ax_937,bl_923,C_925,CZ_930,eax_932,ebp_929,ebx_917,ecx_931,edi_935,edx_934,r12_914,r12d_933,r13_913,r14_926,r15_928,r15d_936,r8d_921,r9d_918,rax_922,rbp_912,rbx_916,rcx_915,rdi_910,rdx_920,rsi_911,rsp_909,SCZO_919,SZO_924,Z_927
	branch eax_932 != 0x00000000 l000000000040D025
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D019:
	Mem967[rdi_910:word32] = 0x0000FFFD
	bLoc21_907 = 0x01
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D025:
	branch (word32) (uint64) Mem721[rdi_910:word32] != 0x00000000 l000000000040D010
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D030:
	word64 rax_952 = DPB(rax_922, wcswidth(rax_673, rax_624 + 0x0000000000000001), 0)
	r15_419 = (int64) wcswidth(rax_673, rax_624 + 0x0000000000000001)
	branch bLoc21_907 == 0x00 l000000000040D118
// DataOut: bl ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D118:
	rsi_750 = rax_624 + 0x0000000000000001
	rax_399 = Mem721[r12_16:word64]
	branch r15_419 <=u rax_399 l000000000040CF28
// DataOut: bl ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF28:
	rbp_127 = 0x0000000000000000
// DataOut: bl ebx r12 r13 r14 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D125:
	qwLoc30_730 = rbp_42 + 0x0000000000000001
// DataOut: bl ebx r12 r13 r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D04D:
	rsi_750 = rax_673
	qwLoc30_730 = DPB(rax_922, wcstombs(0x0000000000000000, rax_673, 0x0000000000000000), 0) + 0x0000000000000001
// DataOut: bl ebx r12 r13 r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D064:
	word64 rax_753 = malloc(qwLoc30_730)
	rbp_127 = rax_753
	branch rax_753 == 0x0000000000000000 l000000000040D138
// DataOut: bl ebx r12 r13 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D138:
	branch (bl_113 & 0x01) != 0x00 l000000000040CE08
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D141:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040D07A:
	word64 rdi_765 = (uint64) Mem721[rax_673:word32]
	word64 rax_759 = Mem721[r12_16:word64]
	word64 rax_761 = rax_673
	branch (word32) rdi_765 == 0x00000000 l000000000040D173
// DataOut: bl eax ebx r12 r13 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D173:
	r15_419 = 0x0000000000000000
// DataOut: bl ebx r12 r13 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D092:
	r15_419 = 0x0000000000000000
// DataOut: bl eax ebx r12 r13 r14 r15 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:(int64) eax -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0BA:
	word64 rax_801 = DPB(rax_761, wcwidth(rdi_765), 0)
	branch wcwidth(rdi_765) != 0xFFFFFFFF l000000000040D0A0
	word64 rax_805 = DPB(rax_761, wcwidth(rdi_765), 0)
	branch wcwidth(rdi_765) != 0xFFFFFFFF l000000000040D0A0
	word64 rax_809 = DPB(rax_761, wcwidth(rdi_765), 0)
	word32 eax_810 = wcwidth(rdi_765)
	byte al_812 = (byte) wcwidth(rdi_765)
	branch eax_810 != 0xFFFFFFFF l000000000040D0A0
// DataOut: al bl ebx r12 r13 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0A0:
	rax_761 = DPB(rax_761, (int16) al_812, 0) + r15_419
	branch rax_759 <u rax_761 l000000000040D0E0
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0C4:
	Mem834[rsi_750:word32] = 0x0000FFFD
	branch rax_759 >=u r15_419 + 0x0000000000000001 l000000000040D0AC
	Mem839[rsi_750:word32] = 0x0000FFFD
	branch rax_759 >=u r15_419 + 0x0000000000000001 l000000000040D0AC
	Mem844[rsi_750:word32] = 0x0000FFFD
	rax_761 = r15_419 + 0x0000000000000001
	branch rax_759 >=u rax_761 l000000000040D0AC
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0AC:
	branch (word32) (uint64) Mem721[rsi_750:word32] == 0x00000000 l000000000040D0E0
	rdi_765 = (uint64) Mem721[rsi_750:word32]
	r15_419 = rax_761
	branch (word32) rdi_765 == 0x00000000 l000000000040D0E0
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0DA:
// DataOut: bl ebx r12 r13 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D0E0:
	Mem784[rax_673:word32] = 0x00000000
	qwLoc48_105 = rax_753
	r14_110 = DPB(rax_761, wcstombs(rax_753, rax_673, qwLoc30_730), 0)
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF83:
	branch (bl_113 & 0x01) != 0x00 l000000000040D14D
// DataOut: bl ebx r12 r13 r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0048(64)

l000000000040D14D:
	r15_419 = r14_110
	qwLoc40_106 = 0x0000000000000000
	rbp_127 = 0x0000000000000000
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF8C:
	qwLoc40_106 = 0x0000000000000000
	rbp_127 = 0x0000000000000000
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CDFA:
	qwLoc40_106 = 0x0000000000000000
// DataOut: bl ebx r12 r13 r14 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE03:
	r15_419 = rbp_42
	rbp_127 = 0x0000000000000000
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE08:
	rax_399 = Mem0[r12_16:word64]
	branch r15_419 <=u rax_399 l000000000040CF2A
// DataOut: bl ebx r12 r13 r14 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF2A:
	branch r15_419 >=u rax_399 l000000000040D180
// DataOut: bl ebx r12 r13 r14 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040D180:
	rax_399 = r15_419
// DataOut: bl ebx ecx r12 r13 r14 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF33:
	Mem451[r12_16:word64] = r15_419
	word64 rax_447 = rax_399 - r15_419
	rcx_123 = rax_447
	ecx_315 = (word32) rax_447 (alias)
	eax_321 = (word32) (uint64) r8d (alias)
	branch eax_321 != 0x00000000 l000000000040CE2A
// DataOut: bl eax ebx ecx r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE15:
	r14_110 = rax_399
// DataOut: bl ebx ecx r12 r13 r14 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE1A:
	Mem405[r12_16:word64] = rax_399
	ecx_315 = 0x00000000
	rcx_123 = 0x0000000000000000
	eax_321 = (word32) (uint64) r8d (alias)
	branch eax_321 == 0x00000000 l000000000040CF4C
// DataOut: bl eax ebx ecx r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:0x0000000000000000 rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CF4C:
	r12_124 = 0x0000000000000000
	rcx_123 = 0x0000000000000000
// DataOut: bl ebx r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:(uint64) r8d r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE2A:
	r12_124 = 0x0000000000000000
	branch eax_321 == 0x00000001 l000000000040CE3E
// DataOut: bl ebx ecx r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx rbx:(uint64) r9d rax:(uint64) r8d r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE32:
	r12_124 = rcx_123 >>u 0x0000000000000001
	rcx_123 = (uint64) (ecx_315 & 0x00000001) + r12_124
// DataOut: bl ebx r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:0x0000000000000000 rbx:(uint64) r9d rax:(uint64) r8d r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE3E:
	branch (bl_113 & 0x04) == 0x00 l000000000040CE47
// DataOut: ebx r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d rax:(uint64) r8d r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE43_1:
	rcx_123 = 0x0000000000000000
// DataOut: ebx r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d rax:0x0000000000000000 r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE47:
	branch (word32) (uint64) (ebx_112 & 0x00000008) == 0x00000000 l000000000040CE4E
// DataOut: r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) r9d rax:0x0000000000000000 r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE4A_2:
	r12_124 = 0x0000000000000000
// DataOut: r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) (ebx & 0x00000008) rax:0x0000000000000000 r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64) Local -0048(64)

l000000000040CE4E:
	branch rdx == 0x0000000000000000 l000000000040CEF9
// DataOut: r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) (ebx & 0x00000008) rax:0x0000000000000000 r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64) Local -0040(64) Local -0048(64)

l000000000040CE5A:
	word64 rdx_173 = rcx_123 - 0x0000000000000001
	word64 rbx_175 = r13_11 - 0x0000000000000001 + rdx
	branch rcx_123 == 0x0000000000000000 l000000000040CE97
// DataOut: r12 r13 r14 rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:(uint64) (ebx & 0x00000008) rax:0x0000000000000000 r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64) Local -0048(64)

l000000000040CE6D:
	branch r13_11 >=u rbx_175 l000000000040CE97
// DataOut: r12 r13 r14 rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:rdx r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64) Local -0048(64)

l000000000040CE72:
	word64 rax_272 = 0x0000000000000000
// DataOut: r12 r13 r14 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:rdx r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64) Local -0048(64)

l000000000040CE89:
	Mem286[rbp_127 - 0x0000000000000001:byte] = 0x20
	word64 r13_283 = r13_11 + 0x0000000000000001
	branch rdx_173 != rax_272 l000000000040CE80
	Mem290[rbp_127 - 0x0000000000000001:byte] = 0x20
	r13_11 = r13_283 + 0x0000000000000001
	branch rdx_173 != rax_272 l000000000040CE80
// DataOut: r12 r13 r14 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64) Local -0048(64)

l000000000040CE80:
	rax_272 = rax_272 + 0x0000000000000001
	branch r13_283 + 0x0000000000000001 == rbx_175 l000000000040CE97
// DataOut: r12 r13 r14 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64) Local -0048(64)

l000000000040CE97:
	Mem188[rbp_127:byte] = 0x00
	branch rbx_175 - r13_11 <=u r14_110 l000000000040CEB6
	Mem195[rbp_127:byte] = 0x00
	word64 rdx_196 = rbx_175 - r13_11
	branch rdx_196 <=u r14_110 l000000000040CEB6
// DataOut: r12 r14 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64) Local -0040(64)

l000000000040CEB2_1:
	rdx_196 = r14_110
// DataOut: r12 r14 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64) Local -0040(64)

l000000000040CEB2_1:
	rdx_196 = r14_110
// DataOut: r12 r14 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64) Local -0040(64)

l000000000040CEB6:
	word64 rax_204 = mempcpy(r13_11, qwLoc48_105, rdx_196)
	word64 rsi_208 = r12_124 - 0x0000000000000001
	branch r12_124 == 0x0000000000000000 l000000000040CEF6
	word64 rax_210 = mempcpy(r13_11, rsi_208, rax_204)
	word64 rdx_217 = rax_210
	word64 rsi_219 = r12_124 - 0x0000000000000001
	branch r12_124 == 0x0000000000000000 l000000000040CEF6
// DataOut: r12 r14 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CECD:
	branch rbx_175 <=u rax_210 l000000000040CEF6
	branch rbx_175 <=u rax_210 l000000000040CEF6
// DataOut: r12 r14 rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CED2:
	word64 rax_240 = 0x0000000000000000
// DataOut: r12 r14 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEE9:
	word64 rdx_251 = rdx_217 + 0x0000000000000001
	Mem254[rdx_251 - 0x0000000000000001:byte] = 0x20
	branch rsi_219 != rax_240 l000000000040CEE0
	Mem259[rdx_251:byte] = 0x20
	rdx_217 = rdx_251 + 0x0000000000000001
	branch rsi_219 != rax_240 l000000000040CEE0
// DataOut: r12 r14 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEE0:
	rax_240 = rax_240 + 0x0000000000000001
	branch rdx_251 + 0x0000000000000001 == rbx_175 l000000000040CEF6
// DataOut: r12 r14 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEF6:
	Mem233[rdx_217:byte] = 0x00
	Mem234[rdx_217:byte] = 0x00
// DataOut: r12 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:rsi - 0x0000000000000001 + rdx rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEF9:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEFF:
	free(qwLoc40_106)
	free(rbp_127)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> rcx:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040CDC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 r13:<invalid> r12:<invalid> rbx:rbx rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> rcx:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040D240(word32 edx, word64 rsi, word64 rdi, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi rsi
// LiveOut: eax ebp ebx r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D240_entry:
	def fp
	def rdi
	def edx
	def rsi
	def rbp
	def rbx
	def fs
	def Mem0
	def qwLoc18
	def qwLoc10
	def qwLoc08
	def ebxOut
	def rspOut
	def rbpOut
	def rsiOut
	def rdiOut
	def r12Out
	def r13Out
	def r14Out
	def r15Out
	def qwLoc30
	def dwLoc34
// DataOut: ebx edx fs r11 r11d r12 r12b r14 r14b r14d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0034(64)

l000000000040D240:
	rsp_1 = fp
	rsp_2 = fp - 0x0000000000000004
	dwLoc04_4 = rdi
	r15_6 = (uint64) edx
	r15d_7 = (word32) r15_6 (alias)
	rsp_8 = fp - 0x0000000000000008
	dwLoc08_10 = rsi
	rsp_11 = fp - 0x000000000000000C
	dwLoc0C_13 = rbp
	r13_14 = rdi + rsi
	v9_15 = fp - 0x000000000000000C
	rsp_16 = fp - 0x0000000000000010
	dwLoc10_17 = fp - 0x000000000000000C
	rsp_18 = fp - 0x0000000000000014
	dwLoc14_19 = rbp
	rbp_20 = rdi
	rsp_21 = fp - 0x0000000000000018
	dwLoc18_23 = rbx
	rsp_24 = fp - 0x0000000000000040
	rax_27 = Mem0[fs:0x00000028:word64]
	qwLoc28_28 = rax_27
	rax_29 = 0x0000000000000000
	eax_30 = (word32) rax_29 (alias)
	al_31 = (byte) rax_29 (alias)
	SZO_32 = cond(eax_30)
	C_33 = false
	call __ctype_get_mb_cur_max (retsize: 8; depth: 72)
		uses: al_31,C_33,dwLoc04_4,dwLoc08_10,dwLoc0C_13,dwLoc10_17,dwLoc14_19,dwLoc18_23,eax_30,edx,fs,qwLoc28_28,r13_14,r15_6,r15d_7,rax_29,rbp_20,rbx,rdi,rsi,rsp_24,SZO_32
		defs: al_54,C_47,CZ_48,dh_61,eax_45,ebx_62,edx_36,esi_60,fs_43,r12_52,r12d_51,r13_40,r14_50,r14d_53,r15_37,r15d_49,rax_44,rbp_39,rbx_41,rcx_57,rdi_35,rdx_56,rsi_38,rsp_34,S_59,SCZO_42,SO_55,SZO_46,Z_58
	SCZO_63 = cond(0xFFFFFFFFFFFFFFFF)
	CZ_64 = SCZO_63 (alias)
	branch 0xFFFFFFFFFFFFFFFF <=u 0x0000000000000000 l000000000040D370
// DataOut: fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D370:
	SCZO_620 = cond(rbp_39 - r13_40)
	C_621 = SCZO_620 (alias)
	branch rbp_39 >=u r13_40 l000000000040D406
// DataOut: fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D379:
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: al_54,C_621,CZ_64,dh_61,dwLoc04_4,dwLoc08_10,dwLoc0C_13,dwLoc10_17,dwLoc14_19,dwLoc18_23,dwLoc34,eax_45,ebx_62,edx_36,esi_60,fs_43,qwLoc08,qwLoc10,qwLoc18,qwLoc28_28,qwLoc30,r12_52,r12d_51,r13_40,r14_50,r14d_53,r15_37,r15d_49,rax_44,rbp_39,rbx_41,rcx_57,rdi_35,rdx_56,rsi_38,rsp_34,S_59,SCZO_620,SO_55,SZO_46,Z_58
		defs: al_642,C_635,CZ_636,dh_649,eax_633,ebx_650,edx_624,esi_648,fs_631,r12_640,r12d_639,r13_628,r14_638,r14d_641,r15_625,r15d_637,rax_632,rbp_627,rbx_629,rcx_645,rdi_623,rdx_644,rsi_626,rsp_622,S_647,SCZO_630,SO_643,SZO_634,Z_646
	rsi_651 = (uint64) r15d_637
	esi_652 = (word32) rsi_651 (alias)
	rcx_653 = Mem0[rax_632:word64]
	rax_654 = 0x0000000000000000
	eax_655 = (word32) rax_654 (alias)
	al_656 = (byte) rax_654 (alias)
	rsi_657 = (uint64) (esi_652 & 0x00000002)
	esi_658 = (word32) rsi_657 (alias)
	SZO_659 = cond(esi_658)
	C_660 = false
// DataOut: eax esi fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D398:
	rdx_661 = PHI(rdx_644, rdx_683)
	rax_662 = PHI(rax_654, rax_687)
	eax_663 = PHI(eax_655, eax_688)
	al_664 = PHI(al_656, al_689)
	SCZO_665 = PHI(SCZO_630, SCZO_690)
	rbp_666 = PHI(rbp_627, rbp_674)
	rbp_667 = rbp_666 + 0x0000000000000001
	edx_668 = (word32) Mem0[rbp_667 - 0x0000000000000001:byte]
	rdx_669 = DPB(rdx_661, edx_668, 0) (alias)
	edx_670 = (word32) Mem0[rcx_653 + rdx_669 * 0x0002:word16]
	dh_671 = SLICE(edx_670, byte, 8) (alias)
	SZO_672 = cond(dh_671 & 0x40)
	Z_673 = SZO_672 (alias)
	branch (dh_671 & 0x40) != 0x00 l000000000040D3B2
	rbp_674 = rbp_667 + 0x0000000000000001
	edx_675 = (word32) Mem0[rbp_674 - 0x0000000000000001:byte]
	rdx_676 = DPB(rdx_669, edx_675, 0) (alias)
	edx_677 = (word32) Mem0[rcx_653 + rdx_676 * 0x0002:word16]
	rdx_678 = DPB(rdx_676, edx_677, 0) (alias)
	dh_679 = SLICE(edx_677, byte, 8) (alias)
	SZO_680 = cond(dh_679 & 0x40)
	Z_681 = SZO_680 (alias)
	C_682 = false
	branch (dh_679 & 0x40) != 0x00 l000000000040D3B2
// DataOut: eax edx esi fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:(uint64) (esi & 0x00000002) rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3A9:
	SZO_704 = cond(esi_658 & esi_658)
	Z_705 = SZO_704 (alias)
	branch (esi_658 & esi_658) != 0x00000000 l000000000040D369
	SZO_706 = cond(esi_658 & esi_658)
	Z_707 = SZO_706 (alias)
	C_708 = false
	branch (esi_658 & esi_658) != 0x00000000 l000000000040D369
// DataOut: eax edx esi fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:(uint64) (esi & 0x00000002) rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3AD:
	rdx_709 = (uint64) (edx_677 & 0x00000002)
	edx_710 = (word32) rdx_709 (alias)
	SZO_711 = cond(edx_710)
	Z_712 = SZO_711 (alias)
	branch edx_710 != 0x00000000 l000000000040D393
	rdx_713 = (uint64) (edx_710 & 0x00000002)
	edx_714 = (word32) rdx_713 (alias)
	SZO_715 = cond(edx_714)
	Z_716 = SZO_715 (alias)
	C_717 = false
	branch edx_714 != 0x00000000 l000000000040D393
// DataOut: eax esi fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:(uint64) (esi & 0x00000002) rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3B2:
	rdx_692 = PHI(rdx_678, rdx_713)
	edx_693 = PHI(edx_677, edx_714)
	SZO_694 = PHI(SZO_680, SZO_715)
	C_695 = PHI(C_682, C_717)
	SCZO_696 = cond(eax_663 - 0x7FFFFFFF)
	Z_697 = SCZO_696 (alias)
	branch eax_663 != 0x7FFFFFFF l000000000040D390
	SCZO_698 = cond(eax_663 - 0x7FFFFFFF)
	Z_699 = SCZO_698 (alias)
	branch eax_663 != 0x7FFFFFFF l000000000040D390
// DataOut: eax esi fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:(uint64) (esi & 0x00000002) rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D390:
	rax_700 = (uint64) (eax_663 + 0x00000001)
	eax_701 = (word32) rax_700 (alias)
	al_702 = (byte) rax_700 (alias)
	SCZO_703 = cond(eax_701)
// DataOut: eax esi fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:(uint64) (esi & 0x00000002) rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D393:
	rdx_683 = PHI(rdx_713, rdx_692)
	edx_684 = PHI(edx_714, edx_693)
	SZO_685 = PHI(SZO_715, SZO_694)
	C_686 = PHI(C_717, C_695)
	rax_687 = PHI(rax_662, rax_700)
	eax_688 = PHI(eax_663, eax_701)
	al_689 = PHI(al_664, al_702)
	SCZO_690 = cond(rbp_674 - r13_628)
	Z_691 = SCZO_690 (alias)
	branch rbp_674 == r13_628 l000000000040D3C5
// DataOut: eax esi fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:(uint64) (esi & 0x00000002) rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3B9:
// DataOut: fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:(uint64) (esi & 0x00000002) rcx:<invalid> edx:<invalid> rdx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D277:
	SCZO_202 = cond(rbp_39 - r13_40)
	C_203 = SCZO_202 (alias)
	branch rbp_39 >=u r13_40 l000000000040D406
// DataOut: fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D406:
	SCZO_195 = PHI(SCZO_202, SCZO_620)
	rax_196 = 0x0000000000000000
	eax_197 = (word32) rax_196 (alias)
	al_198 = (byte) rax_196 (alias)
	SZO_199 = cond(eax_197)
	C_200 = false
// DataOut: eax fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D280:
	r14_204 = (uint64) r15d_49
	r14d_205 = (word32) r14_204 (alias)
	r12_206 = 0x0000000000000000
	r12d_207 = (word32) r12_206 (alias)
	r15_208 = (uint64) (r15d_49 & 0x00000001)
	r15d_209 = (word32) r15_208 (alias)
	r14_210 = (uint64) (r14d_205 & 0x00000002)
	r14d_211 = (word32) r14_210 (alias)
	SZO_212 = cond(r14d_211)
	C_213 = false
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) edx r13:rdi + rsi rbp:rdi rax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2AC:
	qwLoc30_214 = PHI(qwLoc30, qwLoc30_279, qwLoc30_349)
	dh_215 = PHI(dh_61, dh_280, dh_423)
	S_216 = PHI(S_59, S_281, S_421)
	rcx_217 = PHI(rcx_57, rcx_282, rcx_419)
	rdx_218 = PHI(rdx_56, rdx_283, rdx_418)
	SO_219 = PHI(SO_55, SO_284, SO_417)
	r14d_220 = PHI(r14d_211, r14d_285, r14d_415)
	r12d_221 = PHI(r12d_207, r12d_286, r12d_589)
	r15d_222 = PHI(r15d_209, r15d_287, r15d_411)
	fs_223 = PHI(fs_43, fs_288, fs_405)
	edx_224 = PHI(edx_36, edx_289, edx_398)
	CZ_225 = PHI(CZ_64, CZ_308, CZ_591)
	Z_226 = PHI(Z_58, Z_291, Z_585)
	C_227 = PHI(C_213, C_292, C_586)
	r12_228 = PHI(r12_206, r12_293, r12_588)
	r13_229 = PHI(r13_40, r13_294, r13_402)
	r14_230 = PHI(r14_210, r14_295, r14_412)
	r15_231 = PHI(r15_208, r15_296, r15_399)
	rax_232 = PHI(rax_44, rax_297, rax_406)
	rbx_233 = PHI(rbx_41, rbx_300, rbx_427)
	ebx_234 = PHI(ebx_62, ebx_301, ebx_428)
	rbp_235 = PHI(rbp_39, rbp_302, rbp_587)
	rsi_236 = PHI(rsi_38, rsi_303, rsi_400)
	esi_237 = PHI(esi_60, esi_304, esi_422)
	rdi_238 = PHI(rdi_35, rdi_305, rdi_397)
	rsp_239 = PHI(rsp_34, rsp_306, rsp_396)
	eax_240 = (word32) Mem0[rbp_235 + 0x0000000000000000:byte]
	al_241 = (byte) eax_240 (alias)
	SCZO_242 = cond(al_241 - 0x3F)
	SZO_243 = SCZO_242 (alias)
	branch al_241 <= 0x3F l000000000040D290
	eax_244 = (word32) Mem0[rbp_235 + 0x0000000000000000:byte]
	rax_245 = DPB(rax_232, eax_244, 0) (alias)
	al_246 = (byte) eax_244 (alias)
	SCZO_247 = cond(al_246 - 0x3F)
	SZO_248 = SCZO_247 (alias)
	branch al_246 <= 0x3F l000000000040D290
// DataOut: al eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D290:
	SCZO_613 = cond(al_246 - 0x25)
	SO_614 = SCZO_613 (alias)
	branch al_246 >= 0x25 l000000000040D29B
// DataOut: al eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D294:
	rax_615 = (uint64) (eax_244 - 0x00000020)
	eax_616 = (word32) rax_615 (alias)
	al_617 = (byte) rax_615 (alias)
	SCZO_618 = cond(al_617 - 0x03)
	CZ_619 = SCZO_618 (alias)
	branch al_617 >u 0x03 l000000000040D2C3
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2B4:
	SCZO_595 = cond(al_246 - 0x41)
	SO_596 = SCZO_595 (alias)
	branch al_246 < 0x41 l000000000040D2C3
	SCZO_597 = cond(al_246 - 0x41)
	SO_598 = SCZO_597 (alias)
	branch al_246 < 0x41 l000000000040D2C3
// DataOut: al eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2B8:
	SCZO_599 = cond(al_246 - 0x5F)
	SZO_600 = SCZO_599 (alias)
	branch al_246 <= 0x5F l000000000040D29B
	SCZO_601 = cond(al_246 - 0x5F)
	SZO_602 = SCZO_601 (alias)
	branch al_246 <= 0x5F l000000000040D29B
// DataOut: al eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2BC:
	rax_603 = (uint64) (eax_244 - 0x00000061)
	eax_604 = (word32) rax_603 (alias)
	al_605 = (byte) rax_603 (alias)
	SCZO_606 = cond(al_605 - 0x1D)
	CZ_607 = SCZO_606 (alias)
	branch al_605 <=u 0x1D l000000000040D29B
	rax_608 = (uint64) (eax_604 - 0x00000061)
	eax_609 = (word32) rax_608 (alias)
	al_610 = (byte) rax_608 (alias)
	SCZO_611 = cond(al_610 - 0x1D)
	CZ_612 = SCZO_611 (alias)
	branch al_610 <=u 0x1D l000000000040D29B
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2C3:
	SO_341 = PHI(SO_598, SO_598, SO_614)
	CZ_342 = PHI(CZ_225, CZ_612, CZ_619)
	SZO_343 = PHI(SZO_248, SZO_602, SZO_248)
	rax_344 = PHI(rax_245, rax_608, rax_615)
	eax_345 = PHI(eax_244, eax_609, eax_616)
	al_346 = PHI(al_246, al_610, al_617)
	SCZO_347 = PHI(SCZO_597, SCZO_611, SCZO_618)
	qwLoc30_348 = 0x0000000000000000
	qwLoc30_349 = 0x0000000000000000
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2F4:
	r13_350 = PHI(r13_229, r13_465)
	rbp_351 = PHI(rbp_235, rbp_464)
	rdx_352 = r13_350
	rcx_353 = fp - 0x0000000000000030
	rdi_354 = fp - 0x0000000000000034
	rdx_355 = rdx_352 - rbp_351
	SCZO_356 = cond(rdx_355)
	rsi_357 = rbp_351
	call mbrtowc (retsize: 8; depth: 72)
		uses: al_346,C_227,CZ_342,dh_215,dwLoc04_4,dwLoc08_10,dwLoc0C_13,dwLoc10_17,dwLoc14_19,dwLoc18_23,eax_345,ebx_234,edx_224,esi_237,fs_223,qwLoc08,qwLoc10,qwLoc18,qwLoc28_28,qwLoc30_349,r12_228,r12d_221,r13_350,r14_230,r14d_220,r15_231,r15d_222,rax_344,rbp_351,rbx_233,rcx_353,rdi_354,rdx_355,rsi_357,rsp_239,S_216,SCZO_356,SO_341,SZO_343,Z_226
		defs: al_378,C_371,CZ_372,dh_385,eax_369,ebx_386,edx_360,esi_384,fs_367,r12_376,r12d_375,r13_364,r14_374,r14d_377,r15_361,r15d_373,rax_368,rbp_363,rbx_365,rcx_381,rdi_359,rdx_380,rsi_362,rsp_358,S_383,SCZO_366,SO_379,SZO_370,Z_382
	SCZO_387 = cond(rax_368 - 0xFFFFFFFFFFFFFFFF)
	Z_388 = SCZO_387 (alias)
	rbx_389 = rax_368
	branch rax_368 == 0xFFFFFFFFFFFFFFFF l000000000040D360
	rdx_390 = r13_364
	rcx_391 = fp - 0x0000000000000030
	rdi_392 = fp - 0x0000000000000034
	rdx_393 = rdx_390 - rbp_363
	SCZO_394 = cond(rdx_393)
	rsi_395 = rbp_363
	call mbrtowc (retsize: 8; depth: 72)
		uses: al_378,C_371,CZ_372,dh_385,dwLoc04_4,dwLoc08_10,dwLoc0C_13,dwLoc10_17,dwLoc14_19,dwLoc18_23,eax_369,ebx_386,edx_360,esi_384,fs_367,qwLoc08,qwLoc10,qwLoc18,qwLoc28_28,qwLoc30_349,r12_376,r12d_375,r13_364,r14_374,r14d_377,r15_361,r15d_373,rax_368,rbp_363,rbx_389,rcx_391,rdi_392,rdx_393,rsi_395,rsp_358,S_383,SCZO_394,SO_379,SZO_370,Z_388
		defs: al_416,C_409,CZ_410,dh_423,eax_407,ebx_424,edx_398,esi_422,fs_405,r12_414,r12d_413,r13_402,r14_412,r14d_415,r15_399,r15d_411,rax_406,rbp_401,rbx_403,rcx_419,rdi_397,rdx_418,rsi_400,rsp_396,S_421,SCZO_404,SO_417,SZO_408,Z_420
	SCZO_425 = cond(rax_406 - 0xFFFFFFFFFFFFFFFF)
	Z_426 = SCZO_425 (alias)
	rbx_427 = rax_406
	ebx_428 = (word32) rbx_427 (alias)
	branch rax_406 == 0xFFFFFFFFFFFFFFFF l000000000040D360
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D360:
	SZO_592 = cond(r15d_411 & r15d_411)
	Z_593 = SZO_592 (alias)
	C_594 = false
	branch (r15d_411 & r15d_411) == 0x00000000 l000000000040D29B
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D29B:
	qwLoc30_309 = PHI(qwLoc30_214, qwLoc30_214, qwLoc30_214, qwLoc30_214, qwLoc30_349)
	dh_310 = PHI(dh_215, dh_215, dh_215, dh_215, dh_423)
	S_311 = PHI(S_216, S_216, S_216, S_216, S_421)
	rcx_312 = PHI(rcx_217, rcx_217, rcx_217, rcx_217, rcx_419)
	rdx_313 = PHI(rdx_218, rdx_218, rdx_218, rdx_218, rdx_418)
	SO_314 = PHI(SO_598, SO_598, SO_614, SO_614, SO_417)
	r14d_315 = PHI(r14d_220, r14d_220, r14d_220, r14d_220, r14d_415)
	r12d_316 = PHI(r12d_221, r12d_221, r12d_221, r12d_221, r12d_413)
	r15d_317 = PHI(r15d_222, r15d_222, r15d_222, r15d_222, r15d_411)
	fs_318 = PHI(fs_223, fs_223, fs_223, fs_223, fs_405)
	edx_319 = PHI(edx_224, edx_224, edx_224, edx_224, edx_398)
	CZ_320 = PHI(CZ_225, CZ_612, CZ_225, CZ_619, CZ_410)
	SZO_321 = PHI(SZO_602, SZO_602, SZO_248, SZO_248, SZO_592)
	Z_322 = PHI(Z_226, Z_226, Z_226, Z_226, Z_593)
	C_323 = PHI(C_227, C_227, C_227, C_227, C_594)
	r13_324 = PHI(r13_229, r13_229, r13_229, r13_229, r13_402)
	r14_325 = PHI(r14_230, r14_230, r14_230, r14_230, r14_412)
	r15_326 = PHI(r15_231, r15_231, r15_231, r15_231, r15_399)
	rax_327 = PHI(rax_245, rax_608, rax_245, rax_615, rax_406)
	eax_328 = PHI(eax_244, eax_609, eax_244, eax_616, eax_407)
	al_329 = PHI(al_246, al_610, al_246, al_617, al_416)
	rbx_330 = PHI(rbx_233, rbx_233, rbx_233, rbx_233, rbx_427)
	ebx_331 = PHI(ebx_234, ebx_234, ebx_234, ebx_234, ebx_428)
	rbp_332 = PHI(rbp_235, rbp_235, rbp_235, rbp_235, rbp_401)
	rsi_333 = PHI(rsi_236, rsi_236, rsi_236, rsi_236, rsi_400)
	esi_334 = PHI(esi_237, esi_237, esi_237, esi_237, esi_422)
	rdi_335 = PHI(rdi_238, rdi_238, rdi_238, rdi_238, rdi_397)
	rsp_336 = PHI(rsp_239, rsp_239, rsp_239, rsp_239, rsp_396)
	rbp_337 = rbp_332 + 0x0000000000000001
	r12_338 = (uint64) (r12d_316 + 0x00000001)
	r12d_339 = (word32) r12_338 (alias)
	SCZO_340 = cond(r12d_339)
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D315:
	SCZO_429 = cond(rax_406 - 0xFFFFFFFFFFFFFFFE)
	Z_430 = SCZO_429 (alias)
	branch rax_406 == 0xFFFFFFFFFFFFFFFE l000000000040D3E8
	SCZO_431 = cond(rax_406 - 0xFFFFFFFFFFFFFFFE)
	Z_432 = SCZO_431 (alias)
	branch rax_406 == 0xFFFFFFFFFFFFFFFE l000000000040D3E8
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D3E8:
	SZO_584 = cond(r15d_411 & r15d_411)
	Z_585 = SZO_584 (alias)
	C_586 = false
	branch (r15d_411 & r15d_411) != 0x00000000 l000000000040D369
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D3F1:
	rbp_587 = r13_402
	r12_588 = (uint64) (r12d_413 + 0x00000001)
	r12d_589 = (word32) r12_588 (alias)
	SCZO_590 = cond(r13_402 - rbp_587)
	CZ_591 = SCZO_590 (alias)
	branch r13_402 >u rbp_587 l000000000040D2AC
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D31F:
	rdi_434 = (uint64) dwLoc34
	SZO_435 = cond(rax_406 & rax_406)
	Z_436 = SZO_435 (alias)
	rax_437 = 0x0000000000000001
	branch (rax_406 & rax_406) != 0x0000000000000000 l000000000040D32F
	rdi_438 = (uint64) dwLoc34
	SZO_439 = cond(0x0000000000000001)
	Z_440 = SZO_439 (alias)
	C_441 = false
	rax_442 = 0x0000000000000001
	branch 0x0000000000000001 != 0x0000000000000000 l000000000040D32F
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D32B_1:
	rbx_582 = 0x0000000000000001
	ebx_583 = (word32) rbx_582 (alias)
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:(uint64) Mem0[fp - 0x0000000000000040 + 0x000000000000000C:word32] rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D32B_1:
	rbx_580 = 0x0000000000000001
	ebx_581 = (word32) rbx_580 (alias)
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:(uint64) Mem0[fp - 0x0000000000000040 + 0x000000000000000C:word32] rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D32F:
	rbx_443 = PHI(rbx_427, rbx_580, rbx_582)
	ebx_444 = PHI(ebx_428, ebx_581, ebx_583)
	rax_445 = 0x0000000000000001
	SZO_446 = cond(0x00000001)
	S_447 = SZO_446 (alias)
	branch 0x00000001 >= 0x00000000 l000000000040D2D0
	rax_448 = 0x0000000000000001
	eax_449 = (word32) rax_448 (alias)
	al_450 = (byte) rax_448 (alias)
	SZO_451 = cond(0x00000001)
	S_452 = SZO_451 (alias)
	C_453 = false
	branch 0x00000001 >= 0x00000000 l000000000040D2D0
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:(uint64) Mem0[fp - 0x0000000000000040 + 0x000000000000000C:word32] rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2D0:
	rdx_571 = 0x000000007FFFFFFF
	edx_572 = (word32) rdx_571 (alias)
	rdx_573 = (uint64) (edx_572 - r12d_413)
	edx_574 = (word32) rdx_573 (alias)
	SCZO_575 = cond(0x00000001 - edx_574)
	SZO_576 = SCZO_575 (alias)
	branch 0x00000001 > edx_574 l000000000040D3C0
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:(uint64) Mem0[fp - 0x0000000000000040 + 0x000000000000000C:word32] rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2E0:
	r12_577 = (uint64) (r12d_413 + 0x00000001)
	r12d_578 = (word32) r12_577 (alias)
	SCZO_579 = cond(r12d_578)
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:0x00000001 rdx:(uint64) (edx - r12d) rcx:<invalid> rdi:(uint64) Mem0[fp - 0x0000000000000040 + 0x000000000000000C:word32] rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D338:
	SZO_491 = cond(r14d_415 & r14d_415)
	Z_492 = SZO_491 (alias)
	branch (r14d_415 & r14d_415) != 0x00000000 l000000000040D369
	SZO_493 = cond(r14d_415 & r14d_415)
	Z_494 = SZO_493 (alias)
	C_495 = false
	branch (r14d_415 & r14d_415) != 0x00000000 l000000000040D369
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:(uint64) Mem0[fp - 0x0000000000000040 + 0x000000000000000C:word32] rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D369:
	qwLoc30_165 = PHI(qwLoc30, qwLoc30_349, qwLoc30_349, qwLoc30_349)
	dh_166 = PHI(dh_679, dh_423, dh_423, dh_423)
	S_167 = PHI(S_647, S_452, S_421, S_421)
	rcx_168 = PHI(rcx_653, rcx_419, rcx_419, rcx_419)
	rdx_169 = PHI(rdx_678, rdx_418, rdx_418, rdx_418)
	SO_170 = PHI(SO_643, SO_417, SO_417, SO_417)
	r14d_171 = PHI(r14d_641, r14d_415, r14d_415, r14d_415)
	r12d_172 = PHI(r12d_639, r12d_413, r12d_413, r12d_413)
	r15d_173 = PHI(r15d_637, r15d_411, r15d_411, r15d_411)
	fs_174 = PHI(fs_631, fs_405, fs_405, fs_405)
	edx_175 = PHI(edx_677, edx_398, edx_398, edx_398)
	CZ_176 = PHI(CZ_636, CZ_410, CZ_410, CZ_410)
	SZO_177 = PHI(SZO_706, SZO_493, SZO_584, SZO_592)
	Z_178 = PHI(Z_707, Z_494, Z_585, Z_593)
	C_179 = PHI(C_708, C_495, C_586, C_594)
	r12_180 = PHI(r12_640, r12_414, r12_414, r12_414)
	r13_181 = PHI(r13_628, r13_402, r13_402, r13_402)
	r14_182 = PHI(r14_638, r14_412, r14_412, r14_412)
	r15_183 = PHI(r15_625, r15_399, r15_399, r15_399)
	SCZO_184 = PHI(SCZO_665, SCZO_431, SCZO_431, SCZO_425)
	rbx_185 = PHI(rbx_629, rbx_443, rbx_427, rbx_427)
	ebx_186 = PHI(ebx_650, ebx_444, ebx_428, ebx_428)
	rbp_187 = PHI(rbp_674, rbp_401, rbp_401, rbp_401)
	rsi_188 = PHI(rsi_657, rsi_400, rsi_400, rsi_400)
	esi_189 = PHI(esi_658, esi_422, esi_422, esi_422)
	rdi_190 = PHI(rdi_623, rdi_438, rdi_397, rdi_397)
	rsp_191 = PHI(rsp_622, rsp_396, rsp_396, rsp_396)
	rax_192 = 0x00000000FFFFFFFF
	eax_193 = (word32) rax_192 (alias)
	al_194 = (byte) rax_192 (alias)
// DataOut: eax fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D33D:
	rdi_496 = (uint64) dwLoc34
	call iswcntrl (retsize: 8; depth: 72)
		uses: al_450,C_495,CZ_410,dh_423,dwLoc04_4,dwLoc08_10,dwLoc0C_13,dwLoc10_17,dwLoc14_19,dwLoc18_23,dwLoc34,eax_449,ebx_444,edx_398,esi_422,fs_405,qwLoc08,qwLoc10,qwLoc18,qwLoc28_28,qwLoc30_349,r12_414,r12d_413,r13_402,r14_412,r14d_415,r15_399,r15d_411,rax_448,rbp_401,rbx_443,rcx_419,rdi_496,rdx_418,rsi_400,rsp_396,S_452,SCZO_431,SO_417,SZO_493,Z_494
		defs: al_517,C_510,CZ_511,dh_524,eax_508,ebx_525,edx_499,esi_523,fs_506,r12_515,r12d_514,r13_503,r14_513,r14d_516,r15_500,r15d_512,rax_507,rbp_502,rbx_504,rcx_520,rdi_498,rdx_519,rsi_501,rsp_497,S_522,SCZO_505,SO_518,SZO_509,Z_521
	SZO_526 = cond(0x00000001)
	Z_527 = SZO_526 (alias)
	C_528 = false
	branch 0x00000001 != 0x00000000 l000000000040D2E3
	rdi_529 = (uint64) dwLoc34
	call iswcntrl (retsize: 8; depth: 72)
		uses: al_517,C_528,CZ_511,dh_524,dwLoc04_4,dwLoc08_10,dwLoc0C_13,dwLoc10_17,dwLoc14_19,dwLoc18_23,dwLoc34,eax_508,ebx_525,edx_499,esi_523,fs_506,qwLoc08,qwLoc10,qwLoc18,qwLoc28_28,qwLoc30_349,r12_515,r12d_514,r13_503,r14_513,r14d_516,r15_500,r15d_512,rax_507,rbp_502,rbx_504,rcx_520,rdi_529,rdx_519,rsi_501,rsp_497,S_522,SCZO_505,SO_518,SZO_526,Z_527
		defs: al_550,C_543,CZ_544,dh_557,eax_541,ebx_558,edx_532,esi_556,fs_539,r12_548,r12d_547,r13_536,r14_546,r14d_549,r15_533,r15d_545,rax_540,rbp_535,rbx_537,rcx_553,rdi_531,rdx_552,rsi_534,rsp_530,S_555,SCZO_538,SO_551,SZO_542,Z_554
	SZO_559 = cond(0x00000001)
	Z_560 = SZO_559 (alias)
	C_561 = false
	branch 0x00000001 != 0x00000000 l000000000040D2E3
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:0x0000000000000001 r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:0x00000001 rdx:<invalid> rcx:<invalid> rdi:(uint64) Mem0[fp - 0x0000000000000040 + 0x000000000000000C:word32] rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D34A:
	SCZO_562 = cond(r12d_547 - 0x7FFFFFFF)
	Z_563 = SCZO_562 (alias)
	branch r12d_547 == 0x7FFFFFFF l000000000040D3C0
	SCZO_564 = cond(r12d_547 - 0x7FFFFFFF)
	Z_565 = SCZO_564 (alias)
	branch r12d_547 == 0x7FFFFFFF l000000000040D3C0
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D3C0:
	qwLoc30_135 = PHI(qwLoc30, qwLoc30_349, qwLoc30_349)
	dh_136 = PHI(dh_679, dh_557, dh_423)
	S_137 = PHI(S_647, S_555, S_452)
	rcx_138 = PHI(rcx_653, rcx_553, rcx_419)
	rdx_139 = PHI(rdx_692, rdx_552, rdx_573)
	SO_140 = PHI(SO_643, SO_551, SO_417)
	r14d_141 = PHI(r14d_641, r14d_549, r14d_415)
	r12d_142 = PHI(r12d_639, r12d_547, r12d_413)
	r15d_143 = PHI(r15d_637, r15d_545, r15d_411)
	fs_144 = PHI(fs_631, fs_539, fs_405)
	edx_145 = PHI(edx_693, edx_532, edx_574)
	CZ_146 = PHI(CZ_636, CZ_544, CZ_410)
	SZO_147 = PHI(SZO_694, SZO_559, SZO_576)
	Z_148 = PHI(Z_699, Z_565, Z_440)
	C_149 = PHI(C_695, C_561, C_453)
	r12_150 = PHI(r12_640, r12_548, r12_414)
	r13_151 = PHI(r13_628, r13_536, r13_402)
	r14_152 = PHI(r14_638, r14_546, r14_412)
	r15_153 = PHI(r15_625, r15_533, r15_399)
	SCZO_154 = PHI(SCZO_698, SCZO_564, SCZO_575)
	rbx_155 = PHI(rbx_629, rbx_537, rbx_443)
	ebx_156 = PHI(ebx_650, ebx_558, ebx_444)
	rbp_157 = PHI(rbp_674, rbp_535, rbp_401)
	rsi_158 = PHI(rsi_657, rsi_534, rsi_400)
	esi_159 = PHI(esi_658, esi_556, esi_422)
	rdi_160 = PHI(rdi_623, rdi_531, rdi_438)
	rsp_161 = PHI(rsp_622, rsp_530, rsp_396)
	rax_162 = 0x000000007FFFFFFF
	eax_163 = (word32) rax_162 (alias)
	al_164 = (byte) rax_162 (alias)
// DataOut: eax fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D353:
	r12_566 = (uint64) (r12d_547 + 0x00000001)
	r12d_567 = (word32) r12_566 (alias)
	r12_568 = (uint64) (r12d_567 + 0x00000001)
	r12d_569 = (word32) r12_568 (alias)
	SCZO_570 = cond(r12d_569)
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2E3:
	rbx_454 = PHI(rbx_537, rbx_537, rbx_443)
	rbp_455 = PHI(rbp_535, rbp_535, rbp_401)
	rdi_456 = fp - 0x0000000000000030
	rbp_457 = rbp_455 + rbx_454
	SCZO_458 = cond(rbp_457)
	call mbsinit (retsize: 8; depth: 72)
		uses: al_450,C_453,CZ_410,dh_423,dwLoc04_4,dwLoc08_10,dwLoc0C_13,dwLoc10_17,dwLoc14_19,dwLoc18_23,dwLoc34,eax_449,ebx_444,edx_398,esi_422,fs_405,qwLoc08,qwLoc10,qwLoc18,qwLoc28_28,qwLoc30_349,r12_414,r12d_413,r13_402,r14_412,r14d_415,r15_399,r15d_411,rax_448,rbp_457,rbx_454,rcx_419,rdi_456,rdx_418,rsi_400,rsp_396,S_452,SCZO_458,SO_417,SZO_451,Z_440
		defs: al_479,C_472,CZ_473,dh_486,eax_470,ebx_487,edx_461,esi_485,fs_468,r12_477,r12d_476,r13_465,r14_475,r14d_478,r15_462,r15d_474,rax_469,rbp_464,rbx_466,rcx_482,rdi_460,rdx_481,rsi_463,rsp_459,S_484,SCZO_467,SO_480,SZO_471,Z_483
	SZO_488 = cond(eax_470 & eax_470)
	Z_489 = SZO_488 (alias)
	C_490 = false
	branch (eax_470 & eax_470) != 0x00000000 l000000000040D2A3
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D2A3:
	qwLoc30_279 = PHI(qwLoc30_309, qwLoc30_349)
	dh_280 = PHI(dh_310, dh_486)
	S_281 = PHI(S_311, S_484)
	rcx_282 = PHI(rcx_312, rcx_482)
	rdx_283 = PHI(rdx_313, rdx_481)
	SO_284 = PHI(SO_314, SO_480)
	r14d_285 = PHI(r14d_315, r14d_478)
	r12d_286 = PHI(r12d_339, r12d_476)
	r15d_287 = PHI(r15d_317, r15d_474)
	fs_288 = PHI(fs_318, fs_468)
	edx_289 = PHI(edx_319, edx_461)
	SZO_290 = PHI(SZO_321, SZO_488)
	Z_291 = PHI(Z_322, Z_489)
	C_292 = PHI(C_323, C_490)
	r12_293 = PHI(r12_338, r12_477)
	r13_294 = PHI(r13_324, r13_465)
	r14_295 = PHI(r14_325, r14_475)
	r15_296 = PHI(r15_326, r15_462)
	rax_297 = PHI(rax_327, rax_469)
	eax_298 = PHI(eax_328, eax_470)
	al_299 = PHI(al_329, al_479)
	rbx_300 = PHI(rbx_330, rbx_466)
	ebx_301 = PHI(ebx_331, ebx_487)
	rbp_302 = PHI(rbp_337, rbp_464)
	rsi_303 = PHI(rsi_333, rsi_463)
	esi_304 = PHI(esi_334, esi_485)
	rdi_305 = PHI(rdi_335, rdi_460)
	rsp_306 = PHI(rsp_336, rsp_459)
	SCZO_307 = cond(r13_294 - rbp_302)
	CZ_308 = SCZO_307 (alias)
	branch r13_294 <=u rbp_302 l000000000040D401
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(64)

l000000000040D401:
	qwLoc30_249 = PHI(qwLoc30_279, qwLoc30_349)
	dh_250 = PHI(dh_280, dh_423)
	S_251 = PHI(S_281, S_421)
	rcx_252 = PHI(rcx_282, rcx_419)
	rdx_253 = PHI(rdx_283, rdx_418)
	SO_254 = PHI(SO_284, SO_417)
	r14d_255 = PHI(r14d_285, r14d_415)
	r12d_256 = PHI(r12d_286, r12d_589)
	r15d_257 = PHI(r15d_287, r15d_411)
	fs_258 = PHI(fs_288, fs_405)
	edx_259 = PHI(edx_289, edx_398)
	CZ_260 = PHI(CZ_308, CZ_591)
	SZO_261 = PHI(SZO_290, SZO_584)
	Z_262 = PHI(Z_291, Z_585)
	C_263 = PHI(C_292, C_586)
	r12_264 = PHI(r12_293, r12_588)
	r13_265 = PHI(r13_294, r13_402)
	r14_266 = PHI(r14_295, r14_412)
	r15_267 = PHI(r15_296, r15_399)
	SCZO_268 = PHI(SCZO_307, SCZO_590)
	rbx_269 = PHI(rbx_300, rbx_427)
	ebx_270 = PHI(ebx_301, ebx_428)
	rbp_271 = PHI(rbp_302, rbp_587)
	rsi_272 = PHI(rsi_303, rsi_400)
	esi_273 = PHI(esi_304, esi_422)
	rdi_274 = PHI(rdi_305, rdi_397)
	rsp_275 = PHI(rsp_306, rsp_396)
	rax_276 = (uint64) r12d_256
	eax_277 = (word32) rax_276 (alias)
	al_278 = (byte) rax_276 (alias)
// DataOut: eax fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:(uint64) (r15d & 0x00000001) r13:rdi + rsi rbp:<invalid> rax:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3C5:
	qwLoc30_65 = PHI(qwLoc30_135, qwLoc30_249, qwLoc30_165, qwLoc30, qwLoc30)
	dh_66 = PHI(dh_136, dh_250, dh_166, dh_679, dh_61)
	S_67 = PHI(S_137, S_251, S_167, S_647, S_59)
	rcx_68 = PHI(rcx_138, rcx_252, rcx_168, rcx_653, rcx_57)
	rdx_69 = PHI(rdx_139, rdx_253, rdx_169, rdx_683, rdx_56)
	SO_70 = PHI(SO_140, SO_254, SO_170, SO_643, SO_55)
	r14d_71 = PHI(r14d_141, r14d_255, r14d_171, r14d_641, r14d_53)
	r12d_72 = PHI(r12d_142, r12d_256, r12d_172, r12d_639, r12d_51)
	r15d_73 = PHI(r15d_143, r15d_257, r15d_173, r15d_637, r15d_49)
	fs_74 = PHI(fs_144, fs_258, fs_174, fs_631, fs_43)
	edx_75 = PHI(edx_145, edx_259, edx_175, edx_684, edx_36)
	CZ_76 = PHI(CZ_146, CZ_260, CZ_176, CZ_636, CZ_64)
	r12_77 = PHI(r12_150, r12_264, r12_180, r12_640, r12_52)
	r13_78 = PHI(r13_151, r13_265, r13_181, r13_628, r13_40)
	r14_79 = PHI(r14_152, r14_266, r14_182, r14_638, r14_50)
	r15_80 = PHI(r15_153, r15_267, r15_183, r15_625, r15_37)
	rax_81 = PHI(rax_162, rax_276, rax_192, rax_687, rax_196)
	eax_82 = PHI(eax_163, eax_277, eax_193, eax_688, eax_197)
	al_83 = PHI(al_164, al_278, al_194, al_689, al_198)
	SCZO_84 = PHI(SCZO_154, SCZO_268, SCZO_184, SCZO_690, SCZO_195)
	rbx_85 = PHI(rbx_155, rbx_269, rbx_185, rbx_629, rbx_41)
	ebx_86 = PHI(ebx_156, ebx_270, ebx_186, ebx_650, ebx_62)
	rbp_87 = PHI(rbp_157, rbp_271, rbp_187, rbp_674, rbp_39)
	rdi_88 = PHI(rdi_160, rdi_274, rdi_190, rdi_623, rdi_35)
	rsp_89 = PHI(rsp_161, rsp_275, rsp_191, rsp_622, rsp_34)
	rsi_90 = qwLoc28_28
	rsi_91 = rsi_90 ^ Mem0[fs_74:0x00000028:word64]
	esi_92 = (word32) rsi_91 (alias)
	SZO_93 = cond(rsi_91)
	Z_94 = SZO_93 (alias)
	C_95 = false
	branch rsi_91 != 0x0000000000000000 l000000000040D40A
// DataOut: eax esi fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040D40A:
	__stack_chk_fail()
// DataOut: esi fs r11 r11d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64)

l000000000040D40A_thunk_fn000000000040D420:
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc48, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	eax = (word32) rax (alias)
	al = (byte) rax (alias)
	return rax
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D3D5:
	rsp_96 = fp - 0x0000000000000018
	SCZO_97 = cond(fp - 0x0000000000000018)
	rbx_99 = qwLoc18
	ebx_100 = (word32) rbx_99 (alias)
	rsp_101 = fp - 0x0000000000000010
	rbp_103 = qwLoc10
	rsp_104 = fp - 0x0000000000000008
	rsp_106 = qwLoc08
	rsp_107 = rsp_106 + 0x0000000000000008
	rbp_108 = Mem0[rsp_107:word64]
	rsp_109 = rsp_107 + 0x0000000000000008
	rsi_110 = Mem0[rsp_109:word64]
	esi_111 = (word32) rsi_110 (alias)
	rsp_112 = rsp_109 + 0x0000000000000008
	rdi_113 = Mem0[rsp_112:word64]
	rsp_114 = rsp_112 + 0x0000000000000008
	return rax_81
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r14:(uint64) (r14d & 0x00000002) r12:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040D240_exit:
	r12_115 = PHI(r12_77, r12)
	r13_116 = PHI(r13_78, r13)
	r14_117 = PHI(r14_79, r14)
	r15_118 = PHI(r15_80, r15)
	rax_119 = PHI(rax_81, rax)
	eax_120 = PHI(eax_82, eax)
	al_121 = PHI(al_83, al)
	ebx_122 = PHI(ebx_100, ebx)
	rbp_123 = PHI(rbp_108, rbp)
	rsi_124 = PHI(rsi_110, rsi)
	rsp_125 = PHI(rsp_114, rsp)
	use ebx_122 (=> ebxOut)
	use rsp_125 (=> rspOut)
	use rbp_123 (=> rbpOut)
	use rsi_124 (=> rsiOut)
	use rdi_113 (=> rdiOut)
	use r12_115 (=> r12Out)
	use r13_116 (=> r13Out)
	use r14_117 (=> r14Out)
	use r15_118 (=> r15Out)
// DataOut: eax ebp ebx r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040D420(word64 rax, word32 esi, word64 rdi, selector fs, word64 qwArg00, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs rax rdi
// LiveOut: eax ebp ebx r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn000000000040D420_entry:
// DataOut: esi fs r11 r11d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D420:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	rbp = (uint64) esi
	ebp = (word32) rbp (alias)
	rsp = fp - 0x0000000000000008
	dwLoc08 = rbx
	qwLoc08 = DPB(qwLoc08, dwLoc08, 0) (alias)
	rbx = rdi
	rsp = fp - 0x0000000000000010
	rax = DPB(rax, strlen(rdi), 0)
	rsp = fp - 0x0000000000000008
	SCZO = cond(fp - 0x0000000000000008)
	rdi = rbx
	edi = (word32) rdi (alias)
	rdx = (uint64) ebp
	edx = (word32) rdx (alias)
	dh = SLICE(rdx, byte, 8) (alias)
	rbx = qwLoc08
	rsp = fp
	rbp = qwArg00
	rsp = fp + 0x0000000000000008
	rsi = rax
	esi = (word32) rsi (alias)
// DataOut: edx fs r11 r11d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D43B_thunk_fn000000000040D240:
	rax = fn000000000040D240(edx, rsi, rdi, fs, out ebx, out rsp, out rbp, out rsi, out rdi, out r12, out r13, out r14, out r15)
	eax = (word32) rax (alias)
	al = (byte) rax (alias)
	return rax
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx rax:DPB(rax, <invalid>, 0) rdi:rdi rdx:(uint64) ebp rsi:DPB(rax, <invalid>, 0) -8(fp):rbx -4(fp):rbp

fn000000000040D420_exit:
	use ebx (=> ebxOut)
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax ebp ebx r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r15:<invalid> r13:<invalid> rcx:<invalid> edx:<invalid> r14:<invalid> r12:<invalid> eax:<invalid> -8(fp):rbx -4(fp):rbp



word32 fn000000000040D450(word32 eax, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15, ptr64 & rspOut, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r11 r15 r8 rdi rsi
// LiveOut: eax r13 r14 r15 rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D450_entry:
// DataOut: eax r11 r13 r14 r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D450:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v6 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rbp = rcx
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000050
	SCZO = cond(rsi - 0x0000000000000002)
	Z = SCZO (alias)
	SZO = SCZO (alias)
	CZ = SCZO (alias)
	C = SCZO (alias)
	qwLoc50 = rsi
	qwLoc38 = rdx
	branch Test(UGT,CZ) l000000000040D490
// DataOut: eax r11 r13 r14 r15 r8 rdi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0050(64)

l000000000040D490:
	rsi = qwLoc50
	rdx = qwLoc38
	rax = rsi
	rax = rax >>u 0x0000000000000001
	r15 = rax
	qwLoc48 = rax
	rax = rdi + rax * 0x0000000000000008
	rsi = rsi - r15
	SCZO = cond(rsi)
	rdi = rax
	qwLoc28 = rax
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(r15 - 0x0000000000000001)
	branch Test(EQ,Z) l000000000040D570
// DataOut: r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D570:
	r12 = Mem0[r11:word64]
	rax = Mem0[rsp + 0x0000000000000018:word64]
	Mem0[r8:word64] = r12
// DataOut: r11 r12 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D4C5:
	rax = Mem0[rsp:word64]
	r15 = Mem0[rsp + 0x0000000000000018:word64]
	rcx = rbp
	rsi = Mem0[rsp + 0x0000000000000008:word64]
	rax = rax >>u 0x0000000000000002
	rdx = r15
	r13 = rbx + rax * 0x0000000000000008
	r14 = rax
	rsi = rsi - rax
	SCZO = cond(rsi)
	Mem0[rsp + 0x0000000000000020:word64] = rax
	rdi = r13
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	rdx = r15
	rcx = rbp
	rsi = r14
	rdi = rbx
	r15 = r15 + 0x0000000000000008
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[r11:word64]
	r13 = Mem0[r13 + 0x0000000000000000:word64]
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D53B:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4; depth: 4)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D520
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D520:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - r14)
	Mem0[r15 - 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D634
// DataOut: eax r11 r12 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D533:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D547:
	v25 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v25
	Mem0[r15 - 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000020:word64] - rax)
	branch Test(EQ,Z) l000000000040D625
// DataOut: eax r11 r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D625:
	rax = Mem0[rsp + 0x0000000000000008:word64]
	Mem0[rsp + 0x0000000000000010:word64] = r14
	Mem0[rsp + 0x0000000000000020:word64] = rax
// DataOut: r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D634:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rdi = r15
	rdx = rdx - rax
	rsi = rbx + rax * 0x0000000000000008
	rdx = rdx << 0x0000000000000003
	SCZO = cond(rdx)
	rax = memcpy(rdi, rsi, rdx)
	rax = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[r8:word64]
// DataOut: r11 r12 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D57B:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	rdi = 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	r13 = Mem0[r8:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5B7:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4; depth: 4)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D5A0
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5A0:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp:word64] - r14)
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D5F0
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5F0:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r15 = Mem0[rsp + 0x0000000000000008:word64]
	rsp = rsp + 0x0000000000000038
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = r15 - rax
	SCZO = cond(r15)
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdx = 0x00000000 + r15 * 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D620_thunk_fn00000000004025C0:
	fn00000000004025C0()
	return eax
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5AF:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5C3:
	v26 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v26
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - rax)
	branch Test(EQ,Z) l000000000040D479
// DataOut: eax r11 r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5DE:
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[rcx + rax * 0x0000000000000008:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5B3:
	r15 = r15 + 0x0000000000000001
	SCZO = cond(r15)
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D561:
	r12 = Mem0[rbx + rax * 0x0000000000000008:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D537:
	r15 = r15 + 0x0000000000000008
	SCZO = cond(r15)
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D473:
	branch Test(EQ,Z) l000000000040D660
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040D660:
	r13 = Mem0[r15 + 0x0000000000000008:word64]
	r12 = Mem0[r15:word64]
	rsi = r13
	rdi = r12
	call ecx (retsize: 4; depth: 84)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000040D479
// DataOut: eax r11 r12 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040D677:
	Mem0[r11:word64] = r13
	Mem0[r11 + 0x0000000000000008:word64] = r12
	rsp = fp - 0x0000000000000018
	SCZO = cond(fp - 0x0000000000000018)
	rbx = qwLoc18
	rsp = fp - 0x0000000000000010
	rbp = qwLoc10
	rsp = fp - 0x0000000000000008
	rsp = qwLoc08
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return eax
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D479:
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return eax
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040D450_exit:
	use rsp (=> rspOut)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax r13 r14 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040D690(word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r11 r15 r8 rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040D690_entry:
// DataOut: edi r11 r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D690:
	word32 eax_5 = (word32) (rdi + rsi * 0x0000000000000008)
// DataOut: eax r11 r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D697_thunk_fn000000000040D450:
	word64 rsp_12
	word64 r13_13
	word64 r14_14
	word64 r15_15
	fn000000000040D450(eax_5, rsi, rdi, r8, r11, r15, out rsp_12, out r13_13, out r14_14, out r15_15)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:rdi + rsi * 0x0000000000000008 rcx:rdx rdx:rdi + rsi * 0x0000000000000008

fn000000000040D690_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> r15:<invalid> r14:<invalid>



void fn000000000040D6A0(word64 rax, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D6A0_entry:
// DataOut: rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D6A0:
	word64 rbx_119 = rdi
	branch rdi == 0x0000000000000000 l000000000040D713
// DataOut: rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D713:
	word64 rax_158 = DPB(rax, fwrite(0x0000000000415FA0, 0x0000000000000001, 0x0000000000000037, Mem0[0x000000000061A650:word64]), 0)
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

l000000000040D6A9:
	word64 rax_11 = strrchr(rdi, 0x000000000000002F)
	branch rax_11 == 0x0000000000000000 l000000000040D703
// DataOut: rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6B8:
	word64 rcx_49 = rax_11 + 0x0000000000000001 - rdi
	byte SCZO_50 = cond(rcx_49 - 0x0000000000000006)
	byte C_110 = SCZO_50
	byte Z_143 = SCZO_50
	byte CZ_112 = SCZO_50
	branch rcx_49 <= 0x0000000000000006 l000000000040D703
// DataOut: rax rbx rdx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:0x000000000000002F rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6C8:
	word64 rsi_145 = rax_11 - 0x0000000000000006
	word64 rdi_148 = 0x0000000000415FD8
	word64 rcx_150 = 0x0000000000000007
// DataOut: rax rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:0x000000000000002F rax:<invalid> rdx:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6D6:
	branch rcx_150 == 0x0000000000000000 l000000000040D6D8
// DataOut: rax rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6D6_1:
	byte SCZO_140 = cond(Mem0[rsi_159:byte] - Mem0[rdi_160:byte])
	C_110 = SCZO_140 (alias)
	Z_143 = SCZO_140 (alias)
	CZ_112 = SCZO_140 (alias)
	rsi_145 = rsi_159 + 0x0000000000000001
	rdi_148 = rdi_160 + 0x0000000000000001
	rcx_150 = rcx_150 - 0x0000000000000001
	word64 rsi_159 = rsi_145
	word64 rdi_160 = rdi_148
	branch Mem0[rsi_159:byte] != Mem0[rdi_160:byte] l000000000040D6D6
// DataOut: rax rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6D8:
	branch Z_143 l000000000040D703
// DataOut: rax rbx rdx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6DA:
	word64 rcx_104 = 0x0000000000000003
	word64 rsi_100 = rax_11 + 0x0000000000000001
	word64 rdi_102 = 0x0000000000415FE0
// DataOut: rax rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6E7:
	branch rcx_104 == 0x0000000000000000 l000000000040D6E9
// DataOut: rax rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6E7_2:
	byte SCZO_127 = cond(Mem0[rsi_161:byte] - Mem0[rdi_162:byte])
	C_110 = SCZO_127 (alias)
	CZ_112 = SCZO_127 (alias)
	rsi_100 = rsi_161 + 0x0000000000000001
	rdi_102 = rdi_162 + 0x0000000000000001
	rcx_104 = rcx_104 - 0x0000000000000001
	word64 rsi_161 = rsi_100
	word64 rdi_162 = rdi_102
	branch Mem0[rsi_161:byte] != Mem0[rdi_162:byte] l000000000040D6E7
// DataOut: rax rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6E9:
	rbx_119 = rax_11 + 0x0000000000000001
	branch CZ_112 != C_110 l000000000040D703
// DataOut: rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6F8:
	Mem125[0x000000000061A600:word64] = rax_11 + 0x0000000000000004
	rbx_119 = rax_11 + 0x0000000000000004
// DataOut: rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D703:
	Mem41[0x000000000061B200:word64] = rbx_119
	Mem42[0x000000000061A648:word64] = rbx_119
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx

fn000000000040D6A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx



void fn000000000040D740(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx rax rcx rdi rdx
// Preserved: rsp
fn000000000040D740_entry:
// DataOut: ebx esi fs r11 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D740:
	word64 rcx_15 = 0x0000000000000007
	word64 rdi_14 = fp - 0x0000000000000048
// DataOut: ebx esi fs r11 rbp rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D754:
	branch rcx_15 == 0x0000000000000000 l000000000040D757
// DataOut: ebx esi fs r11 rbp rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:0x0000000000000000 rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):0x0000000000000000
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D757:
	branch esi == 0x00000008 l000000000040D7A1
// DataOut: ebx esi fs r11 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:0x0000000000000000 rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):0x0000000000000000
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D7A1:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:0x0000000000000000 rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):0x0000000000000000

l000000000040D759:
	Mem25[rdi:word64] = DPB(qwLoc48, esi, 0)
	Mem28[rdi + 0x0000000000000008:word64] = qwLoc40
	Mem31[rdi + 0x0000000000000010:word64] = qwLoc38
	Mem34[rdi + 0x0000000000000018:word64] = qwLoc30
	Mem37[rdi + 0x0000000000000020:word64] = qwLoc28
	Mem40[rdi + 0x0000000000000028:word64] = qwLoc20
	Mem43[rdi + 0x0000000000000030:word64] = qwLoc18
	return
// DataOut: ebx fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:0x0000000000000000 rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):0x0000000000000000

fn000000000040D740_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):esi

l000000000040D754_1:
	Mem17[rdi_14:word64] = 0x0000000000000000
	rdi_14 = rdi_14 + 0x0000000000000008
	rcx_15 = rcx_15 - 0x0000000000000001
// DataOut: ebx esi fs r11 rbp rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 rax:0x0000000000000000 rdx:rdi rcx:<invalid> rdi:<invalid> -72(fp):0x0000000000000000
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)



word64 fn000000000040D7B0(word32 esi, word64 rdi, word64 r8, word64 r13, word64 r15, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & r8Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs r13 r15 r8 rdi
// LiveOut: ebx r12 r12b r12d r13 r15 r15b r8 rax rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D7B0_entry:
	*r8Out = r8
	*r15Out = r15
	*r13Out = r13
// DataOut: esi fs r13 r15 r15b r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D7B0:
	word64 r12_10 = (uint64) esi
	*r12Out = r12_10
	word64 rax_23 = dcgettext(0x0000000000000000, rdi, 0x0000000000000005)
	word32 r12d_11 = (word32) r12_10
	word64 rsp_22 = fp - 0x0000000000000018
	word64 rbx_109 = rax_23
	branch rax_23 == rdi l000000000040D7E8
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D7E8:
	word64 rbp_65
	word64 r8_66
	word64 r12_67
	word64 r13_68
	word64 r15_69
	word64 rax_70 = fn0000000000411900(rdi, r8, r12_10, r13, r15, fs, out rsp_22, out rbp_65, out r8_66, out r12_67, out r13_68, out r15_69)
	byte dl_75 = (byte) (uint64) ((word32) Mem0[rax_70:byte] & 0xFFFFFFDF)
	branch dl_75 != 0x55 l000000000040D850
// DataOut: dl fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdx:0x0000000000000005 r12:(uint64) esi rsi:rdi rbp:rdi rdi:0x0000000000000000 rax:<invalid> rbx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D850:
	branch dl_75 != 0x47 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D855:
	branch (byte) (uint64) ((word32) Mem0[rax_70 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x42 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D861:
	branch Mem0[rax_70 + 0x0000000000000002:byte] != 0x31 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D867:
	branch Mem0[rax_70 + 0x0000000000000003:byte] != 0x38 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D86D:
	branch Mem0[rax_70 + 0x0000000000000004:byte] != 0x30 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D873:
	branch Mem0[rax_70 + 0x0000000000000005:byte] != 0x33 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D879:
	branch Mem0[rax_70 + 0x0000000000000006:byte] != 0x30 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D87F:
	branch Mem0[rax_70 + 0x0000000000000007:byte] != 0x00 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D885:
	word64 r13_134
	*r13Out = rax_23
	rbx_109 = 0x0000000000415FED
	branch Mem0[rbp_65:byte] == 0x60 l000000000040D89B
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D897_1:
	rbx_109 = 0x0000000000415FE8
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FE8 rbx:0x0000000000415FED edx:<invalid> r13:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r8:<invalid> edi:<invalid> eax:0x00415FE8 r10:<invalid> al:0xE8 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D89B:
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FE8 rbx:<invalid> edx:<invalid> r13:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r8:<invalid> edi:<invalid> eax:0x00415FE8 r10:<invalid> al:0xE8 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D7F8:
	branch (byte) (uint64) ((word32) Mem0[rax_70 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x54 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D804:
	branch (byte) (uint64) ((word32) Mem0[rax_70 + 0x0000000000000002:byte] & 0xFFFFFFDF) != 0x46 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D810:
	branch Mem0[rax_70 + 0x0000000000000003:byte] != 0x2D l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D816:
	branch Mem0[rax_70 + 0x0000000000000004:byte] != 0x38 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D81C:
	branch Mem0[rax_70 + 0x0000000000000005:byte] != 0x00 l000000000040D838
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D838:
	rbx_109 = 0x0000000000415FEB
	branch r12d_11 == 0x00000007 l000000000040D84A
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D846_1:
	rbx_109 = 0x0000000000416DEA
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000416DEA rbx:0x0000000000415FEB edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:0x00416DEA r10:<invalid> al:0xEA -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D84A:
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000416DEA rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:0x00416DEA r10:<invalid> al:0xEA -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D822:
	rbx_109 = 0x0000000000415FE4
	branch Mem0[rax_23:byte] != 0x60 l000000000040D833
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D82F_1:
	rbx_109 = 0x0000000000415FF1
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FF1 rbx:0x0000000000415FE4 edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:0x00415FF1 r10:<invalid> al:0xF1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D833:
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:0x0000000000415FF1 rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:0x00415FF1 r10:<invalid> al:0xF1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D7D7:
	word64 rsp_43 = rsp_22 + 0x0000000000000008
	word32 ebx_49
	*ebxOut = (word32) Mem0[rsp_43:word64]
	word64 rsp_56
	*rspOut = Mem0[rsp_43 + 0x0000000000000010:word64] + 0x0000000000000010
	return rbx_109
// DataOut: ebx fs r12 r12b r12d r13 r15 r15b r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn000000000040D7B0_exit:
// DataOut: ebx r12 r12b r12d r13 r15 r15b r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> r12:<invalid> rsi:<invalid> rbp:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> edx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> r13:<invalid> r15:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn000000000040D8A0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r8, word32 r9d, selector fs, word64 qwArg20, word64 qwArg28, word64 qwArg30, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r8 r8d r9b r9d rcx rdi rdx rsi
// LiveOut: ebp r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rcx rdx
fn000000000040D8A0_entry:
// DataOut: fs r12 r12b r12d r8 r8d r9b rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D8A0:
	word64 rdi_53
	word64 rcx_55
	word32 r14d_57
	word32 r8d_58
	word64 rbp_60
	word64 rdx_62
	word64 rbx_63
	word32 ebx_64
	word32 r9d_65
	byte SCZO_66
	word64 rax_67
	word32 eax_69
	byte SZO_70
	byte C_71
	byte al_72
	byte CZ_73
	word64 r11_74
	word32 esi_75
	byte Z_76
	word32 edi_77
	word64 r9_78
	word32 ebp_79
	word64 r8_80
	byte cl_81
	word32 r12d_83
	byte r12b_84
	word32 edx_85
	byte dl_86
	byte r11b_87
	word32 esp_88
	word32 r11d_89
	word16 dx_90
	word64 r10_92
	byte dil_93
	byte sil_94
	selector fs_1028
	word64 r14_1043
	word64 r12_1041
	word64 r13_1350
	word64 r15_1044
	word64 rsi_1006
	word64 rsp_1060
	word32 ecx_1071
	call __ctype_get_mb_cur_max (retsize: 8; depth: 232)
		uses: C_51,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_22,dwLoc18_25,dwLoc50_36,dwLocAC_35,eax_49,ebx_28,esp_30,fs,qwLoc28_47,qwLoc70_40,qwLoc78_43,qwLoc88_37,qwLocB8_33,qwLocC0_34,r13_17,r14_11,r14d_12,r15_6,r8d,r9d,rax_48,rbp,rbx_27,rcx,rdi,rdx,rsi,rsp_29,SZO_50
		defs: al_72,C_71,cl_81,CZ_73,dil_93,dl_86,dx_90,eax_69,ebp_79,ebx_64,ecx_82,edi_77,edx_85,esi_75,esp_88,fs_68,r10_92,r11_74,r11b_87,r11d_89,r12_91,r12b_84,r12d_83,r13_61,r14_59,r14d_57,r15_54,r8_80,r8d_58,r9_78,r9d_65,rax_67,rbp_60,rbx_63,rcx_55,rdi_53,rdx_62,rsi_56,rsp_52,SCZO_66,sil_94,SZO_70,Z_76
	byte al_101 = (byte) (uint64) ((word32) (uint64) ((word32) (uint64) ebx_64 >>u 0x00000001) & 0x00000001)
	branch r14d_57 >u 0x00000008 l000000000040E280
// DataOut: fs r12 r12b r12d r13 r14 r14d r15 r15b r8 rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AC(32) Local -00AD(0) Local -00B8(64) Local -00C0(64)

l000000000040E280:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) (eax & 0x00000001) -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D92D:
	word64 rbx_1055
	word64 rax_108 = (uint64) r14d_57
	word64 r11_111 = rsi
	byte r11b_1034 = (byte) rsi
	word32 r11d_1035 = (word32) rsi
	switch (r14d_57) { l000000000040D940 l000000000040E070 l000000000040DF10 l000000000040DF50 l000000000040DFB0 l000000000040DF90 l000000000040DFE0 l000000000040DFE0 l000000000040DFE0 }
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b r8 rax rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) (eax & 0x00000001) -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AC(32) Local -00AD(0) Local -00B8(64)

l000000000040DFE0:
	branch r14d_57 == 0x00000008 l000000000040E012
// DataOut: fs r11 r12 r12b r12d r13 r15 r15b r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AC(32)

l000000000040DFE2:
	word32 ebx_1991
	word64 rsp_1992
	word64 r8_1993
	word64 r12_1994
	word64 r13_1995
	word64 r15_1996
	word64 rax_1997 = fn000000000040D7B0((word32) (uint64) (word32) (uint64) r8d, 0x0000000000415FF5, r8_80, r13_1350, r15_1044, fs_1028, out ebx_1991, out rsp_1992, out r8_1993, out r12_1994, out r13_1995, out r15_1996)
	Mem2001[rsp_1992 + 0x0000000000000070:word64] = rax_1997
	rsi_1006 = (uint64) ebx_1991
	word32 ebx_2002
	word64 r8_2004
	rax_108 = fn000000000040D7B0((word32) rsi_1006, 0x0000000000416DEA, r8_1993, r13_1995, r15_1996, fs_1028, out ebx_2002, out rsp_1060, out r8_2004, out r12_1041, out r13_1350, out r15_1044)
	r11_111 = Mem2001[rsp_1060 + 0x0000000000000020:word64]
	Mem2014[rsp_1060 + 0x0000000000000068:word64] = rax_108
// DataOut: fs r11 r12 r12b r12d r13 r15 r15b rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E012:
	rbx_1055 = 0x0000000000000000
	branch Mem0[rsp_1060 + 0x0000000000000033:byte] != 0x00 l000000000040E044
// DataOut: fs r11 r12 r12b r12d r13 r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E01B:
	word64 rdx_1954 = Mem0[rsp_1060 + 0x0000000000000070:word64]
	word32 eax_1958 = (word32) Mem0[rdx_1954:byte]
	rax_108 = DPB(rax_108, eax_1958, 0) (alias)
	byte al_1960 = (byte) eax_1958
	branch al_1960 == 0x00 l000000000040E044
// DataOut: al fs r11 r12 r12b r12d r13 r15 r15b rax rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:0x0000000000000000 rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E027:
	word64 rcx_1964 = Mem0[rsp_1060 + 0x0000000000000028:word64]
	ecx_1071 = (word32) rcx_1964 (alias)
// DataOut: al fs r11 r12 r12b r12d r13 r15 r15b rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:0x0000000000000000 rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> edx:<invalid> ebp:<invalid> rcx:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E030:
	branch rbx_1055 >=u r11_111 l000000000040E038
// DataOut: al fs r11 r12 r12b r12d r13 r15 r15b rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E035:
	Mem1984[rcx_1964 + rbx_1055:byte] = al_1960
// DataOut: fs r11 r12 r12b r12d r13 r15 r15b rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E038:
	rbx_1055 = rbx_1055 + 0x0000000000000001
	word32 eax_1978 = (word32) Mem0[rdx_1954 + rbx_1055:byte]
	rax_108 = DPB(rax_108, eax_1978, 0) (alias)
	al_1960 = (byte) eax_1978 (alias)
	branch al_1960 != 0x00 l000000000040E030
// DataOut: al fs r11 r12 r12b r12d r13 r15 r15b rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E044:
	word64 rbp_1943 = Mem0[rsp_1060 + 0x0000000000000068:word64]
	Mem1944[rsp_1060 + 0x0000000000000038:word64] = r11_111
	word64 rax_1946 = DPB(rax_108, strlen(rbp_1943), 0)
	Mem1947[rsp_1060 + 0x0000000000000060:word64] = rbp_1943
	Mem1950[rsp_1060 + 0x0000000000000020:byte] = 0x01
	r11_111 = Mem1950[rsp_1060 + 0x0000000000000038:word64]
	r14_1043 = rax_1946
	r11b_1034 = (byte) r11_111 (alias)
	r11d_1035 = (word32) r11_111 (alias)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> ebp:<invalid> r8:<invalid> edi:<invalid> r10:<invalid> al:<invalid> -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF90:
	r14_1043 = 0x0000000000000000
	rbx_1055 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DFB0:
	rsi_1006 = 0x0000000000000001
	rbx_1055 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF50:
	branch al_101 != 0x00 l000000000040E428
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040DF5B:
	branch rsi == 0x0000000000000000 l000000000040E2B3
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E2B3:
	rsi_1006 = 0x0000000000000001
	rbx_1055 = 0x0000000000000001
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF64:
	Mem1884[rdi:byte] = 0x22
	rsi_1006 = 0x0000000000000001
	rbx_1055 = 0x0000000000000001
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF10:
	branch al_101 != 0x00 l000000000040E408
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E408:
	rsi_1006 = 0x0000000000000001
	rbx_1055 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF1B:
	branch rsi == 0x0000000000000000 l000000000040E2D1
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E2D1:
	rsi_1006 = 0x0000000000000001
	rbx_1055 = 0x0000000000000001
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF24:
	Mem1858[rdi:byte] = 0x27
	rsi_1006 = 0x0000000000000001
	rbx_1055 = 0x0000000000000001
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E070:
	rsi_1006 = 0x0000000000000001
	rbx_1055 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D940:
	r14_1043 = 0x0000000000000000
	rbx_1055 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14:(uint64) r8d r13:rdx rbx:(uint64) r9d rax:(uint64) r14d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D960:
	Mem211[rsp_1060 + 0x0000000000000038:byte] = (byte) (uint64) ((word32) Mem0[rsp_1060 + 0x0000000000000033:byte] ^ 0x00000001)
	word64 rax_1010 = (uint64) ((word32) Mem211[rsp_1060 + 0x0000000000000020:byte] ^ 0x00000001)
	Mem218[rsp_1060 + 0x0000000000000095:byte] = (byte) rax_1010
	word64 r9_1039
	*r9Out = r14_1043
	word64 rbp_1022 = 0x0000000000000000
	*r14Out = r11_111
	word64 r8_1038
	*r8Out = r13_1350
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> ebp:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:0x00000001 r11d:<invalid> ecx:<invalid> r10:<invalid> sil:0x01 -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D986:
	word64 rax_294
	byte al_1816 = rbp_1022 != r15_1044
	word64 rax_1741 = DPB(rax_1010, al_1816, 0)
	branch r15_1044 == 0xFFFFFFFFFFFFFFFF l000000000040DB76
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D996:
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> ebp:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9A0:
	branch al_1816 == 0x00 l000000000040DB86
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9A8:
	word64 r13_1746
	byte cl_604 = r9_1039 != 0x0000000000000000
	ecx_1071 = DPB(ecx_1071, cl_604, 0) (alias)
	branch r9_1039 == 0x0000000000000000 l000000000040E0A0
// DataOut: ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9B4:
	branch Mem218[rsp_1060 + 0x0000000000000020:byte] == 0x00 l000000000040E0A0
// DataOut: ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9BF:
	rax_1741 = rbp_1022 + r9_1039
	branch r15_1044 <u rax_1741 l000000000040E0A0
// DataOut: eax ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) cl:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0A0:
	r13_1746 = r8_1038 + rbp_1022
	r11b_1034 = 0x00 (alias)
	r11d_1035 = 0x00000000 (alias)
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9CD:
	rsi_1006 = Mem218[rsp_1060 + 0x0000000000000060:word64]
	Mem1762[rsp_1060 + 0x0000000000000050:word32] = ecx_1071
	Mem1763[rsp_1060 + 0x0000000000000048:word64] = r8_1038
	Mem1765[rsp_1060 + 0x0000000000000040:word64] = r9_1039
	r13_1746 = r8_1038 + rbp_1022
	rax_1741 = DPB(rax_1741, memcmp(r13_1746, rsi_1006, r9_1039), 0)
	word32 eax_1767 = memcmp(r13_1746, rsi_1006, r9_1039)
	*r9Out = Mem1765[rsp_1060 + 0x0000000000000040:word64]
	r8_1038 = Mem1765[rsp_1060 + 0x0000000000000048:word64]
	*r8Out = r8_1038
	branch eax_1767 != 0x00000000 l000000000040E0B0
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0B0:
	r11b_1034 = 0x00 (alias)
	r11d_1035 = 0x00000000 (alias)
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA05:
	branch Mem1765[rsp_1060 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA10:
	rbx_1055 = 0x0000000000000001
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA20:
	word32 r12d_1031 = (word32) Mem218[r13_1746:byte]
	byte r12b_1032 = (byte) r12d_1031
	r12_1041 = DPB(r12_1041, r12d_1031, 0) (alias)
	*r12Out = r12_1041
	branch r12b_1032 >u 0x7E l000000000040DE18
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE18:
	byte dl_1200
	word32 esi_1033
	byte dl_1047
	branch Mem218[rsp_1060 + 0x0000000000000078:word64] != 0x0000000000000001 l000000000040E0C0
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0C0:
	Mem1295[rsp_1060 + 0x00000000000000B0:word64] = 0x0000000000000000
	branch r15_1044 == 0xFFFFFFFFFFFFFFFF l000000000040E285
// DataOut: fs r11b r11d r12b r13 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E285:
	Mem1729[rsp_1060 + 0x0000000000000050:word64] = r9_1039
	Mem1730[rsp_1060 + 0x0000000000000048:word32] = r11d_1035
	Mem1731[rsp_1060 + 0x0000000000000040:word64] = r8_1038
	word64 rax_1732 = DPB(rax_1741, strlen(r8_1038), 0)
	r9_1039 = Mem1731[rsp_1060 + 0x0000000000000050:word64]
	r15_1044 = rax_1732
	r11b_1034 = (byte) (uint64) Mem1731[rsp_1060 + 0x0000000000000048:word32] (alias)
// DataOut: fs r11b r12b r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0D6:
	Mem1309[rsp_1060 + 0x0000000000000080:word64] = rbx_1055
	Mem1310[rsp_1060 + 0x0000000000000096:byte] = r12b_1032
	Mem1311[rsp_1060 + 0x0000000000000098:word64] = r13_1746
	Mem1314[rsp_1060 + 0x0000000000000048:word64] = rbp_1022
	Mem1315[rsp_1060 + 0x0000000000000088:word64] = r9_1039
	Mem1319[rsp_1060 + 0x0000000000000097:byte] = r11b_1034
	Mem1320[rsp_1060 + 0x0000000000000050:word64] = r14_1043
	Mem1322[rsp_1060 + 0x0000000000000040:word64] = r15_1044
// DataOut: fs r12d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E11D:
	word64 r15_1343
	word64 rcx_1344
	word32 r14d_1346
	word32 r8d_1347
	word64 r14_1348
	word64 rbp_1349
	word64 rdx_1351
	word64 rbx_1352
	word32 ebx_1353
	word32 r9d_1354
	byte SCZO_1355
	word64 rax_1356
	word32 eax_1358
	byte SZO_1359
	byte C_1360
	byte al_1361
	byte CZ_1362
	word64 r11_1363
	byte Z_1365
	word32 edi_1366
	word64 r9_1367
	word32 ebp_1368
	word64 r8_1369
	byte cl_1370
	word32 r12d_1372
	byte r12b_1373
	word32 edx_1374
	byte dl_1375
	byte r11b_1376
	word32 esp_1377
	word32 r11d_1378
	word16 dx_1379
	word64 r12_1380
	word64 r10_1381
	byte dil_1382
	byte sil_1383
	word64 rdi_1342
	call mbrtowc (retsize: 8; depth: 8)
		uses: al_1328,bLocAD_166,bLocC0_167,C_1308,cl_604,CZ_674,dil_570,dl_1337,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_22,dwLoc18_25,dwLoc50_36,dwLocAC_165,dx_1338,eax_1327,ebp_596,ebx_1313,ecx_606,edi_569,edx_1336,esi_568,esp_600,fs_563,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_168,qwLoc88_37,qwLocB8_33,qwLocC0_164,r10_562,r11_1302,r11b_1296,r11d_1297,r12_1316,r12b_1318,r12d_1317,r13_1323,r14_1332,r14d_1333,r15_1334,r8_1300,r8d_1298,r9_1301,r9d_1299,rax_1326,rbp_595,rbx_1324,rcx_1330,rdi_1331,rdx_1335,rsi_1340,rsp_1325,SCZO_1339,sil_565,SZO_1307,Z_1294
		defs: al_1361,C_1360,cl_1370,CZ_1362,dil_1382,dl_1375,dx_1379,eax_1358,ebp_1368,ebx_1353,ecx_1371,edi_1366,edx_1374,esi_1364,esp_1377,fs_1357,r10_1381,r11_1363,r11b_1376,r11d_1378,r12_1380,r12b_1373,r12d_1372,r13_1350,r14_1348,r14d_1346,r15_1343,r8_1369,r8d_1347,r9_1367,r9d_1354,rax_1356,rbp_1349,rbx_1352,rcx_1344,rdi_1342,rdx_1351,rsi_1345,rsp_1341,SCZO_1355,sil_1383,SZO_1359,Z_1365
	branch rax_1356 == 0x0000000000000000 l000000000040E30E
// DataOut: eax fs r12d r13 r14 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E30E:
	r11d_1035 = (word32) Mem1322[rsp_1060 + 0x0000000000000097:byte]
	r12d_1031 = (word32) Mem1322[rsp_1060 + 0x0000000000000096:byte]
	rax_1010 = rbx_1352
	rbp_1022 = Mem1322[rsp_1060 + 0x0000000000000048:word64]
	*r9Out = Mem1322[rsp_1060 + 0x0000000000000088:word64]
	r11b_1034 = (byte) r11d_1035 (alias)
	*r8Out = r13_1350
	rbx_1055 = Mem1322[rsp_1060 + 0x0000000000000080:word64]
	r12b_1032 = (byte) r12d_1031 (alias)
	*r12Out = DPB(r12_1380, r12d_1031, 0)
	dl_1200 = (byte) (uint64) ((word32) (uint64) r12d_1372 ^ 0x00000001) (alias)
	*r14Out = Mem1322[rsp_1060 + 0x0000000000000050:word64]
	*r15Out = Mem1322[rsp_1060 + 0x0000000000000040:word64]
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E157:
	branch rax_1356 == 0xFFFFFFFFFFFFFFFF l000000000040E350
// DataOut: eax fs r12d r13 r14 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E350:
	r12d_1031 = (word32) Mem1322[rsp_1060 + 0x0000000000000096:byte]
	r11d_1035 = (word32) Mem1322[rsp_1060 + 0x0000000000000097:byte]
	rax_1010 = rbx_1352
	rbp_1022 = Mem1322[rsp_1060 + 0x0000000000000048:word64]
	*r9Out = Mem1322[rsp_1060 + 0x0000000000000088:word64]
	r12b_1032 = (byte) r12d_1031 (alias)
	*r12Out = DPB(r12_1380, r12d_1031, 0)
	r11b_1034 = (byte) r11d_1035 (alias)
	*r8Out = r13_1350
	rbx_1055 = Mem1322[rsp_1060 + 0x0000000000000080:word64]
	*r14Out = Mem1322[rsp_1060 + 0x0000000000000050:word64]
	dl_1200 = 0x01 (alias)
	*r15Out = Mem1322[rsp_1060 + 0x0000000000000040:word64]
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E161:
	branch rax_1356 == 0xFFFFFFFFFFFFFFFE l000000000040E391
// DataOut: eax fs r12d r13 r14 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E391:
	r12d_1031 = (word32) Mem1322[rsp_1060 + 0x0000000000000096:byte]
	r11d_1035 = (word32) Mem1322[rsp_1060 + 0x0000000000000097:byte]
	r15_1044 = Mem1322[rsp_1060 + 0x0000000000000040:word64]
	*r15Out = r15_1044
	rsi_1006 = r14_1348
	rax_1010 = rbx_1352
	*r8Out = r13_1350
	rbp_1022 = Mem1322[rsp_1060 + 0x0000000000000048:word64]
	*r9Out = Mem1322[rsp_1060 + 0x0000000000000088:word64]
	r12b_1032 = (byte) r12d_1031 (alias)
	*r12Out = DPB(r12_1380, r12d_1031, 0)
	r11b_1034 = (byte) r11d_1035 (alias)
	rbx_1055 = Mem1322[rsp_1060 + 0x0000000000000080:word64]
	*r14Out = Mem1322[rsp_1060 + 0x0000000000000050:word64]
	word64 r13_1649 = Mem1322[rsp_1060 + 0x0000000000000098:word64]
	branch r15_1044 <=u r14_1348 l000000000040E3FE
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3DB:
	branch Mem1322[rdx_1351:byte] != 0x00 l000000000040E3F0
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3F0:
	word64 rax_1664 = rax_1010 + 0x0000000000000001
	branch r15_1044 >u rbp_1022 + rax_1664 l000000000040E3E8
	rax_1010 = rax_1664 + 0x0000000000000001
	branch r15_1044 >u rbp_1022 + (rax_1664 + 0x0000000000000001) l000000000040E3E8
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3E8:
	branch Mem1322[r13_1649 + (rax_1664 + 0x0000000000000001):byte] == 0x00 l000000000040E3FE
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3E1:
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3FE:
	dl_1200 = 0x01 (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r10:<invalid> r11d:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E16B:
	branch Mem1322[rsp_1060 + 0x0000000000000033:byte] == 0x00 l000000000040E1BF
// DataOut: eax fs r12d r13 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E172:
	branch Mem1322[rsp_1060 + 0x0000000000000034:word32] != 0x00000002 l000000000040E1BF
// DataOut: eax fs r12d r13 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E179:
	branch rax_1356 == 0x0000000000000001 l000000000040E1BF
// DataOut: eax fs r12d r13 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E17F:
	word64 rdx_1579 = 0x0000000000000001
	r15_1586 = r15_1343
// DataOut: eax fs r12d r13 r15 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E190:
	word64 r15_1586
	rdi_1342 = DPB(rdi_1342, (word32) Mem1322[r15_1586 + rdx_1579:byte], 0) (alias)
	ecx_1071 = rdi_1342 - 0x000000000000005B
	byte cl_1601 = (byte) (rdi_1342 - 0x000000000000005B)
	branch cl_1601 >u 0x21 l000000000040E1B6
// DataOut: cl eax fs r12d r13 r15 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 r11:<invalid> rsi:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E19D:
	r15_1586 = 0x000000000000002B
	branch (0x0000000000000001 << cl_1601 & rdi_1342) != 0x0000000000000000 l000000000040E260
// DataOut: eax fs r12d r13 r15 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 r11:<invalid> rsi:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E260:
	r11_111 = Mem1322[rsp_1060 + 0x0000000000000050:word64]
	r11b_1034 = (byte) r11_111 (alias)
	r11d_1035 = (word32) r11_111 (alias)
	r15_1044 = Mem1322[rsp_1060 + 0x0000000000000040:word64]
// DataOut: fs r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:0x000000000000002B r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 r11:<invalid> rsi:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1B6:
	rdx_1579 = rdx_1579 + 0x0000000000000001
	branch rdx_1579 != rax_1356 l000000000040E190
// DataOut: eax fs r12d r13 r15 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000001 r11:<invalid> rsi:<invalid> eax:0x00000001 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x01 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1BF:
	word64 rsp_1445
	word64 rdi_1446
	word64 r15_1447
	word64 rcx_1448
	word64 rsi_1449
	word32 r14d_1450
	word32 r8d_1451
	word64 r14_1452
	word64 rbp_1453
	word64 r13_1454
	word64 rdx_1455
	word64 rbx_1456
	word32 ebx_1457
	word32 r9d_1458
	byte SCZO_1459
	word64 rax_1460
	selector fs_1461
	word32 eax_1462
	byte SZO_1463
	byte C_1464
	byte al_1465
	byte CZ_1466
	word64 r11_1467
	word32 esi_1468
	byte Z_1469
	word32 edi_1470
	word64 r9_1471
	word32 ebp_1472
	word64 r8_1473
	byte cl_1474
	word32 ecx_1475
	word32 r12d_1476
	byte r12b_1477
	word32 edx_1478
	byte dl_1479
	byte r11b_1480
	word32 esp_1481
	word32 r11d_1482
	word16 dx_1483
	word64 r12_1484
	word64 r10_1485
	byte dil_1486
	byte sil_1487
	call iswprint (retsize: 8; depth: 8)
		uses: al_1361,bLocAD_166,bLocC0_167,C_1386,cl_1370,CZ_1362,dil_1382,dl_1375,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_22,dwLoc18_25,dwLoc50_36,dwLocAC_165,dx_1379,eax_1358,ebp_1388,ebx_1353,ecx_1371,edi_1366,edx_1374,esi_1364,esp_1377,fs_1357,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_168,qwLoc88_37,qwLocB8_33,qwLocC0_164,r10_1381,r11_1363,r11b_1376,r11d_1378,r12_1380,r12b_1373,r12d_1372,r13_1350,r14_1348,r14d_1346,r15_1343,r8_1369,r8d_1347,r9_1367,r9d_1354,rax_1356,rbp_1387,rbx_1352,rcx_1344,rdi_1444,rdx_1351,rsi_1345,rsp_1341,SCZO_1442,sil_1383,SZO_1384,Z_1443
		defs: al_1465,C_1464,cl_1474,CZ_1466,dil_1486,dl_1479,dx_1483,eax_1462,ebp_1472,ebx_1457,ecx_1475,edi_1470,edx_1478,esi_1468,esp_1481,fs_1461,r10_1485,r11_1467,r11b_1480,r11d_1482,r12_1484,r12b_1477,r12d_1476,r13_1454,r14_1452,r14d_1450,r15_1447,r8_1473,r8d_1451,r9_1471,r9d_1458,rax_1460,rbp_1453,rbx_1456,rcx_1448,rdi_1446,rdx_1455,rsi_1449,rsp_1445,SCZO_1459,sil_1487,SZO_1463,Z_1469
	branch eax_1462 != 0x00000000 l000000000040E1DE
// DataOut: fs r12d r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1DA_1:
// DataOut: fs r12d r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000000 r11:<invalid> rsi:<invalid> eax:0x00000000 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x00 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1DE:
	word64 rdi_1497
	word64 r15_1498
	word64 rcx_1499
	word64 rsi_1500
	word32 r14d_1501
	word32 r8d_1502
	word64 r14_1503
	word64 rbp_1504
	word64 r13_1505
	word64 rdx_1506
	word64 rbx_1507
	word32 ebx_1508
	word32 r9d_1509
	byte SCZO_1510
	word64 rax_1511
	word32 eax_1513
	byte SZO_1514
	byte C_1515
	byte al_1516
	byte CZ_1517
	word64 r11_1518
	word32 esi_1519
	byte Z_1520
	word32 edi_1521
	word64 r9_1522
	word32 ebp_1523
	word64 r8_1524
	byte cl_1525
	word32 r12d_1527
	byte r12b_1528
	word32 edx_1529
	byte dl_1530
	byte r11b_1531
	word32 esp_1532
	word32 r11d_1533
	word16 dx_1534
	word64 r12_1535
	word64 r10_1536
	byte dil_1537
	byte sil_1538
	call mbsinit (retsize: 8; depth: 8)
		uses: al_1465,bLocAD_166,bLocC0_167,C_1491,cl_1474,CZ_1466,dil_1486,dl_1479,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_22,dwLoc18_25,dwLoc50_36,dwLocAC_165,dx_1483,eax_1462,ebp_1472,ebx_1494,ecx_1475,edi_1470,edx_1478,esi_1468,esp_1481,fs_1461,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_168,qwLoc88_37,qwLocB8_33,qwLocC0_164,r10_1485,r11_1467,r11b_1480,r11d_1482,r12_1484,r12b_1477,r12d_1476,r13_1454,r14_1452,r14d_1450,r15_1447,r8_1473,r8d_1451,r9_1471,r9d_1458,rax_1492,rbp_1453,rbx_1493,rcx_1448,rdi_1488,rdx_1455,rsi_1449,rsp_1445,SCZO_1495,sil_1487,SZO_1489,Z_1490
		defs: al_1516,C_1515,cl_1525,CZ_1517,dil_1537,dl_1530,dx_1534,eax_1513,ebp_1523,ebx_1508,ecx_1526,edi_1521,edx_1529,esi_1519,esp_1532,fs_1512,r10_1536,r11_1518,r11b_1531,r11d_1533,r12_1535,r12b_1528,r12d_1527,r13_1505,r14_1503,r14d_1501,r15_1498,r8_1524,r8d_1502,r9_1522,r9d_1509,rax_1511,rbp_1504,rbx_1507,rcx_1499,rdi_1497,rdx_1506,rsi_1500,rsp_1496,SCZO_1510,sil_1538,SZO_1514,Z_1520
	branch 0x00000000 == 0x00000000 l000000000040E11D
// DataOut: fs r12d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:0x0000000000000000 r11:<invalid> rsi:<invalid> eax:0x00000000 r9:<invalid> rbp:<invalid> r8:<invalid> al:0x00 cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1EE:
	rsi_1006 = (uint64) r12d_1527
	r11d_1035 = (word32) Mem1322[rsp_1060 + 0x0000000000000097:byte]
	r12d_1031 = (word32) Mem1322[rsp_1060 + 0x0000000000000096:byte]
	esi_1033 = (word32) rsi_1006 (alias)
	r11b_1034 = (byte) r11d_1035 (alias)
	r12b_1032 = (byte) r12d_1031 (alias)
	*r12Out = DPB(r12_1535, r12d_1031, 0)
	rax_1010 = rbx_1507
	rbp_1022 = Mem1322[rsp_1060 + 0x0000000000000048:word64]
	*r9Out = Mem1322[rsp_1060 + 0x0000000000000088:word64]
	rbx_1055 = Mem1322[rsp_1060 + 0x0000000000000080:word64]
	*r14Out = Mem1322[rsp_1060 + 0x0000000000000050:word64]
	*r15Out = Mem1322[rsp_1060 + 0x0000000000000040:word64]
	*r8Out = r13_1505
	dl_1200 = (byte) (uint64) ((word32) (uint64) esi_1033 ^ 0x00000001) (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E22D:
	branch rax_1010 <=u 0x0000000000000001 l000000000040DE61
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E237:
	dl_1047 = dl_1200 & Mem1322[rsp_1060 + 0x0000000000000020:byte]
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> r12:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r10:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> dx:<invalid> dl:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE24:
	Mem1222[rsp_1060 + 0x0000000000000050:word64] = r8_1038
	Mem1223[rsp_1060 + 0x0000000000000048:word64] = r9_1039
	Mem1224[rsp_1060 + 0x0000000000000040:word32] = r11d_1035
	word64 rdi_1226
	word64 rcx_1228
	word32 r14d_1230
	word32 r8d_1231
	word64 r13_1234
	word64 rdx_1235
	word32 ebx_1237
	word32 r9d_1238
	byte SCZO_1239
	word64 rax_1240
	word32 eax_1242
	byte SZO_1243
	byte C_1244
	byte al_1245
	byte CZ_1246
	word64 r11_1247
	byte Z_1249
	word32 edi_1250
	word64 r9_1251
	word32 ebp_1252
	word64 r8_1253
	byte cl_1254
	word32 edx_1258
	byte dl_1259
	byte r11b_1260
	word32 esp_1261
	word32 r11d_1262
	word16 dx_1263
	word64 r10_1265
	byte dil_1266
	byte sil_1267
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_662,bLocAD_166,bLocC0_167,C_666,cl_604,CZ_674,dil_570,dl_586,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_20,dwLoc14_22,dwLoc18_25,dwLoc50_36,dwLocAC_165,dx_587,eax_661,ebp_596,ebx_664,ecx_606,edi_569,edx_585,esi_568,esp_600,fs_563,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_168,qwLoc88_37,qwLocB8_33,qwLocC0_164,r10_562,r11_656,r11b_650,r11d_651,r12_672,r12b_671,r12d_670,r13_657,r14_580,r14d_564,r15_581,r8_654,r8d_652,r9_655,r9d_653,rax_660,rbp_595,rbx_667,rcx_658,rdi_669,rdx_659,rsi_668,rsp_599,SCZO_1025,sil_565,SZO_665,Z_1026
		defs: al_1245,C_1244,cl_1254,CZ_1246,dil_1266,dl_1259,dx_1263,eax_1242,ebp_1252,ebx_1237,ecx_1255,edi_1250,edx_1258,esi_1248,esp_1261,fs_1241,r10_1265,r11_1247,r11b_1260,r11d_1262,r12_1264,r12b_1257,r12d_1256,r13_1234,r14_1232,r14d_1230,r15_1227,r8_1253,r8d_1231,r9_1251,r9d_1238,rax_1240,rbp_1233,rbx_1236,rcx_1228,rdi_1226,rdx_1235,rsi_1229,rsp_1225,SCZO_1239,sil_1267,SZO_1243,Z_1249
	word64 r11_1271 = (uint64) Mem1224[rsp_1060 + 0x0000000000000040:word32]
	word32 edx_1278 = (word32) Mem1224[Mem1224[rax_1240:word64] + DPB(rdx_1235, (word32) r12b_1032, 0) * 0x0002:word16]
	r11b_1034 = (byte) r11_1271 (alias)
	r11d_1035 = (word32) r11_1271 (alias)
	*r9Out = Mem1224[rsp_1060 + 0x0000000000000048:word64]
	*r8Out = Mem1224[rsp_1060 + 0x0000000000000050:word64]
	rax_1010 = 0x0000000000000001
	dl_1200 = (byte) (uint64) ((word32) (uint64) (DPB(edx_1278, (word16) edx_1278 >>u 0x000E, 0) ^ 0x00000001) & 0x00000001) (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE61:
	dl_1047 = dl_1200 & Mem218[rsp_1060 + 0x0000000000000020:byte]
	branch dl_1047 == 0x00 l000000000040DAF8
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE6B:
	word64 rcx_1069 = Mem218[rsp_1060 + 0x0000000000000028:word64]
	rax_1010 = rax_1010 + rbp_1022
	byte dil_1068 = (byte) (word32) Mem218[rsp_1060 + 0x0000000000000033:byte]
	ecx_1071 = (word32) rcx_1069 (alias)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF0:
	branch dl_1047 != 0x00 l000000000040DE80
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE80:
	branch dil_1068 != 0x00 l000000000040DC40
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE89:
	branch rbx_1055 >=u r14_1043 l000000000040DE92
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE8E:
	Mem1174[rcx_1069 + rbx_1055:byte] = 0x5C
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE92:
	branch r14_1043 <=u rbx_1055 + 0x0000000000000001 l000000000040DEAA
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE9B:
	word64 rsi_1169 = (uint64) (DPB(esi_1033, (byte) (uint64) r12d_1031 >>u 0x06, 0) + 0x00000030)
	Mem1173[rcx_1069 + 0x0000000000000001 + rbx_1055:byte] = (byte) rsi_1169
	esi_1033 = (word32) rsi_1169 (alias)
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEAA:
	rsi_1006 = rbx_1055 + 0x0000000000000002
	branch r14_1043 <=u rsi_1006 l000000000040DEC5
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEB3:
	rsi_1006 = (uint64) ((word32) (uint64) (DPB(esi_1033, (byte) (uint64) r12d_1031 >>u 0x03, 0) & 0x00000007) + 0x00000030)
	Mem1164[rcx_1069 + 0x0000000000000002 + rbx_1055:byte] = (byte) rsi_1006
	esi_1033 = (word32) rsi_1006 (alias)
// DataOut: dil dl fs r11b r11d r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEC5:
	r12_1041 = (uint64) ((word32) (uint64) (r12d_1031 & 0x00000007) + 0x00000030)
	*r12Out = r12_1041
	rbx_1055 = rbx_1055 + 0x0000000000000003
	r12b_1032 = (byte) r12_1041 (alias)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> sil:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF4:
	branch r11b_1034 == 0x00 l000000000040DED1
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF9:
	branch rbx_1055 >=u r14_1043 l000000000040DF02
// DataOut: dil dl fs r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEFE:
	Mem1129[rcx_1069 + rbx_1055:byte] = 0x5C
// DataOut: dil dl fs r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF02:
	rbx_1055 = rbx_1055 + 0x0000000000000001
	r11b_1034 = 0x00 (alias)
	r11d_1035 = 0x00000000 (alias)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DED1:
	rbp_1022 = rbp_1022 + 0x0000000000000001
	branch rax_1010 <=u rbp_1022 l000000000040DB54
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEDE:
	branch rbx_1055 >=u r14_1043 l000000000040DEE7
// DataOut: dil dl fs r11b r11d r12b r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEE3:
	Mem1116[rcx_1069 + rbx_1055:byte] = r12b_1032
// DataOut: dil dl fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEE7:
	r12d_1031 = (word32) Mem218[r8_1038 + rbp_1022:byte]
	r12b_1032 = (byte) r12d_1031 (alias)
	*r12Out = DPB(r12_1041, r12d_1031, 0)
	rbx_1055 = rbx_1055 + 0x0000000000000001
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA2F:
	rax_1010 = DPB(rax_1741, (word32) r12b_1032, 0) (alias)
	switch (rax_1010) { l000000000040DD20 }
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD20:
	branch Mem218[rsp_1060 + 0x0000000000000020:byte] == 0x00 l000000000040E240
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E240:
	branch (Mem218[rsp_1060 + 0x0000000000000090:byte] & 0x01) == 0x00 l000000000040DAF8
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DAF8:
	branch Mem218[rsp_1060 + 0x0000000000000038:byte] == 0x00 l000000000040DB09
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DAFF:
	branch Mem218[rsp_1060 + 0x0000000000000095:byte] != 0x00 l000000000040DB2E
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E24E:
	rbp_1022 = rbp_1022 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD2B:
	branch Mem218[rsp_1060 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD36:
	branch rbx_1055 >=u r14_1043 l000000000040DD44
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD3B:
	Mem1018[Mem218[rsp_1060 + 0x0000000000000028:word64] + rbx_1055:byte] = 0x5C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:(word32) r12b r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD44:
	rax_1010 = rbx_1055 + 0x0000000000000001
	branch r15_1044 <=u rbp_1022 + 0x0000000000000001 l000000000040DD80
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD51:
	rsi_1006 = DPB(rsi_1006, (word32) Mem218[r8_1038 + 0x0000000000000001 + rbp_1022:byte], 0) (alias)
	branch (byte) (rsi_1006 - 0x0000000000000030) >u 0x09 l000000000040DD80
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD5F:
	branch r14_1043 >u rax_1010 l000000000040E300
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E300:
	rsi_1006 = Mem218[rsp_1060 + 0x0000000000000028:word64]
	Mem1016[rsi_1006 + rax_1010:byte] = 0x30
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD68:
	branch r14_1043 <=u rbx_1055 + 0x0000000000000002 l000000000040DD7B
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD71:
	Mem1014[Mem218[rsp_1060 + 0x0000000000000028:word64] + 0x0000000000000002 + rbx_1055:byte] = 0x30
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD7B:
	rax_1010 = rbx_1055 + 0x0000000000000003
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD80:
	rbx_1055 = rax_1010
	rsp_1060 = 0x0000000000000030
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB09:
	word64 rdi_905 = Mem218[rsp_1060 + 0x0000000000000058:word64]
	branch rdi_905 == 0x0000000000000000 l000000000040DB2E
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB13:
	ecx_1071 = (word32) (uint64) r12d_1031 (alias)
	word64 rdx_911 = (uint64) r12d_1031
	rax_1010 = (uint64) (0x00000001 << (byte) ((uint64) (ecx_1071 & 0x0000001F)))
	branch (Mem218[rdi_905 + DPB(rdx_911, (word32) ((byte) rdx_911 >>u 0x05), 0) * 0x00000004:word32] & (word32) rax_1010) != 0x00000000 l000000000040DB33
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB2E:
	branch r11b_1034 == 0x00 l000000000040DB50
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB33:
	branch Mem218[rsp_1060 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC40:
	r11_111 = r14_1043
	r11b_1034 = (byte) r14_1043 (alias)
	r11d_1035 = (word32) r14_1043 (alias)
	r13_1350 = r8_1038
// DataOut: fs r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> r12d:<invalid> r12:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> sil:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB3E:
	branch rbx_1055 >=u r14_1043 l000000000040DB4C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB43:
	rax_1010 = Mem218[rsp_1060 + 0x0000000000000028:word64]
	Mem824[rax_1010 + rbx_1055:byte] = 0x5C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB4C:
	rbx_1055 = rbx_1055 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB50:
	rbp_1022 = rbp_1022 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> r11d:<invalid> r10:<invalid> edi:<invalid> ebp:<invalid> ecx:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB54:
	branch rbx_1055 >=u r14_1043 l000000000040DB62
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB59:
	rax_1010 = Mem218[rsp_1060 + 0x0000000000000028:word64]
	Mem729[rax_1010 + rbx_1055:byte] = r12b_1032
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB62:
	al_1816 = rbp_1022 != r15_1044
	rbx_1055 = rbx_1055 + 0x0000000000000001
	rax_1741 = DPB(rax_1010, al_1816, 0) (alias)
	branch r15_1044 != 0xFFFFFFFFFFFFFFFF l000000000040D9A0
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rdx:<invalid> dl:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> r12:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ebp:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB76:
	byte al_556 = Mem218[r8_1038 + rbp_1022:byte] != 0x00
	rax_1741 = DPB(rax_1741, al_556, 0) (alias)
	branch al_556 != 0x00 l000000000040D9A8
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB86:
	branch rbx_1055 != 0x0000000000000000 l000000000040DBA3
	r11_111 = r14_1043
	*r11Out = r11_111
	r11b_1034 = (byte) r14_1043 (alias)
	r11d_1035 = (word32) r14_1043 (alias)
	r13_1350 = r8_1038
	*r13Out = r13_1350
	branch rbx_1055 != 0x0000000000000000 l000000000040DBA3
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB91:
	branch Mem218[rsp_1060 + 0x0000000000000034:word32] != 0x00000002 l000000000040DBA3
	branch Mem218[rsp_1060 + 0x0000000000000034:word32] != 0x00000002 l000000000040DBA3
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB98:
	branch Mem218[rsp_1060 + 0x0000000000000033:byte] != 0x00 l000000000040DC46
	branch Mem218[rsp_1060 + 0x0000000000000033:byte] != 0x00 l000000000040DC46
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC46:
	word64 rax_362 = Mem218[rsp_1060 + 0x0000000000000068:word64]
	word32 r9d_364 = (word32) (uint64) Mem218[rsp_1060 + 0x0000000000000090:word32]
	word64 r8_366 = (uint64) Mem218[rsp_1060 + 0x0000000000000034:word32]
	word64 rdi_368 = Mem218[rsp_1060 + 0x0000000000000028:word64]
	Mem370[rsp_1060:word64] = 0x0000000000000000
	Mem372[rsp_1060 + 0x0000000000000010:word64] = rax_362
	Mem378[rsp_1060 + 0x0000000000000008:word64] = Mem372[rsp_1060 + 0x0000000000000070:word64]
	word64 rbp_381
	word64 r8_382
	word64 r9_383
	rax_294 = fn000000000040D8A0(r15_1044, r13_1350, r11_111, rdi_368, r8_366, (word32) (uint64) (r9d_364 & 0xFFFFFFFD), fs_1028, qwArg18, qwArg20, qwArg28, out rsp_1060, out rbp_381, out r8_382, out r9_383, out r11_111, out r12_1041, out r13_1350, out r14_1043, out r15_1044)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBA3:
	branch Mem218[rsp_1060 + 0x0000000000000033:byte] != 0x00 l000000000040DBE4
	branch Mem218[rsp_1060 + 0x0000000000000033:byte] != 0x00 l000000000040DBE4
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBAA:
	branch Mem218[rsp_1060 + 0x0000000000000060:word64] == 0x0000000000000000 l000000000040DBE4
	branch Mem218[rsp_1060 + 0x0000000000000060:word64] == 0x0000000000000000 l000000000040DBE4
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBB2:
	branch (byte) (word32) Mem218[Mem218[rsp_1060 + 0x0000000000000060:word64]:byte] == 0x00 l000000000040DBE4
	word64 rdx_469 = Mem218[rsp_1060 + 0x0000000000000060:word64]
	byte al_475 = (byte) (word32) Mem218[rdx_469:byte]
	branch al_475 == 0x00 l000000000040DBE4
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:Test(NE,Z) rdi:<invalid> rdx:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBBE:
	word64 rcx_481 = Mem218[rsp_1060 + 0x0000000000000028:word64]
	ecx_1071 = (word32) rcx_481 (alias)
	word64 rdx_484 = rdx_469 - rbx_1055 - rbx_1055
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD0:
	branch r14_1043 <=u rbx_1055 l000000000040DBD8
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD5:
	Mem507[rcx_481 + rbx_1055:byte] = al_475
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD8:
	rbx_1055 = rbx_1055 + 0x0000000000000001
	al_475 = (byte) (word32) Mem218[rdx_484 + rbx_1055:byte] (alias)
	branch al_475 != 0x00 l000000000040DBD0
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r12:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBE4:
	rax_294 = rbx_1055
	branch rbx_1055 >=u r14_1043 l000000000040DC86
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBF0:
	Mem459[Mem218[rsp_1060 + 0x0000000000000028:word64] + rbx_1055:byte] = 0x00
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> edx:<invalid> cl:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> ebp:<invalid> esi:<invalid> sil:<invalid> r11d:<invalid> r10:<invalid> ecx:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC86:
	branch (Mem218[rsp_1060 + 0x00000000000000B8:word64] ^ Mem218[fs_1028:0x00000028:word64]) != 0x0000000000000000 l000000000040E423
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E423:
	__stack_chk_fail()
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E428:
	Mem157[rsp_1060 + 0x0000000000000020:byte] = 0x01
	Mem159[rsp_1060 + 0x0000000000000060:word64] = 0x0000000000415FEB
	rsi_1006 = 0x0000000000000001
	rbx_1055 = 0x0000000000000000
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC9D:
	word64 rsp_316 = Mem218[rsp_1060 + 0x00000000000000D8:word64]
	word64 rbp_318
	*rbpOut = Mem218[rsp_316 + 0x0000000000000008:word64]
	word64 rsp_324
	*rspOut = rsp_316 + 0x0000000000000020
	return rax_294
// DataOut: ebp fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040D8A0_exit:
// DataOut: ebp r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r11:<invalid> rsi:<invalid> eax:<invalid> r9:<invalid> rbp:<invalid> r8:<invalid> al:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> r12:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):al -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):0x0000000000000000 -88(fp):<invalid> -80(fp):r9d -75(fp):al -74(fp):r12b -73(fp):r11b -72(fp):rdx -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040E450(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r11, selector fs, ptr64 & rbpOut, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 rcx rdi rdx rsi
// LiveOut: r11 r12 r12b r13 r14 r15 r15b rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040E450_entry:
// DataOut: edi fs r11 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E450:
	word64 r15_6 = (int64) edi
	__errno_location()
	word32 r15d_7 = (word32) r15_6
	word64 rsp_182 = fp - 0x0000000000000060
	word64 r12_181 = Mem0[0x000000000061A5D8:word64]
	branch r15d_7 < 0x00000000 l000000000040E5F7
// DataOut: edi fs r11 r12 r15 r15d rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E5F7:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040E48C:
	branch r15d_7 <u Mem0[0x000000000061A5F0:word32] l000000000040E4FA
// DataOut: edi fs r11 r12 r15 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E495:
	word64 r14_171 = (uint64) (rdi + 0x0000000000000001)
	branch r12_181 != 0x000000000061A5E0 l000000000040E5E0
// DataOut: ebp fs r11 r12 r14 r15 rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E5E0:
	word64 r8_208
	word64 rax_209 = fn0000000000410C90(rdx, r14_171 << 0x0000000000000004, r12_181, out rsp_182, out r8_208)
	Mem211[0x000000000061A5D8:word64] = rax_209
	r12_181 = rax_209
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:(uint64) (rdi + 0x0000000000000001) rsi:(uint64) (rdi + 0x0000000000000001) << 0x0000000000000004 -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E4B0:
	word64 r8_198
	word64 rax_199 = fn0000000000410C90(rdx, r14_171 << 0x0000000000000004, 0x0000000000000000, out rsp_182, out r8_198)
	word64 rsi_200 = Mem0[0x000000000061A5E0:word64]
	word64 rdi_201 = Mem0[0x000000000061A5E8:word64]
	Mem203[0x000000000061A5D8:word64] = rax_199
	Mem204[rax_199:word64] = rsi_200
	Mem205[rax_199 + 0x0000000000000008:word64] = rdi_201
	r12_181 = rax_199
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:(uint64) (rdi + 0x0000000000000001) rsi:(uint64) (rdi + 0x0000000000000001) << 0x0000000000000004 -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E4D6:
	word64 rdi_183 = (uint64) Mem0[0x000000000061A5F0:word32]
	memset((rdi_183 << 0x0000000000000004) + r12_181, 0x0000000000000000, r14_171 - rdi_183 << 0x0000000000000004)
	Mem192[0x000000000061A5F0:word32] = rdi + 0x0000000000000001
// DataOut: fs r11 r12 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:(uint64) (rdi + 0x0000000000000001) rsi:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E4FA:
	word64 r12_51 = r12_181 + (r15_6 << 0x0000000000000004)
	word32 ebp_50 = (word32) (uint64) Mem0[rcx + 0x0000000000000004:word32]
	word64 r8_53 = (uint64) Mem0[r11:word32]
	word64 r11_56 = Mem0[r12_51:word64]
	word64 r14_57 = Mem0[r12_51 + 0x0000000000000008:word64]
	Mem58[rsp_182 + 0x0000000000000010:word64] = Mem0[rcx + 0x0000000000000030:word64]
	word64 rax_59 = Mem58[rcx + 0x0000000000000028:word64]
	word64 rcx_64 = Mem58[rsp_182 + 0x0000000000000028:word64]
	word64 rdx_65 = Mem58[rsp_182 + 0x0000000000000020:word64]
	Mem69[rsp_182:word64] = r11 + 0x0000000000000008
	Mem71[rsp_182 + 0x0000000000000008:word64] = rax_59
	Mem72[rsp_182 + 0x0000000000000038:word64] = r11_56
	word32 ebp_61 = (word32) (uint64) (ebp_50 | 0x00000001)
	word64 r8_79
	word64 r9_80
	word64 r11_81
	word64 r12_82
	word64 r13_83
	word64 r14_84
	word64 r15_85
	word64 rbp_103
	word64 rsp_104
	word64 rax_86 = fn000000000040D8A0(rcx_64, rdx_65, r11_56, r14_57, r8_53, (word32) (uint64) ebp_61, fs, qwArg18, qwArg20, qwArg28, out rsp_104, out rbp_103, out r8_79, out r9_80, out r11_81, out r12_82, out r13_83, out r14_84, out r15_85)
	word64 r11_88 = Mem72[rsp_104 + 0x0000000000000038:word64]
	*r11Out = r11_88
	branch r11_88 >u rax_86 l000000000040E5BF
// DataOut: ebp fs r11 r12 r12b r13 r14 r15 r15b rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14:(uint64) (rdi + 0x0000000000000001) rsi:0x0000000000000000 rdi:<invalid> rdx:(uint64) (rdi + 0x0000000000000001) - (uint64) Mem0[0x000000000061A5F0:word32] << 0x0000000000000004 rcx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -64(fp):rsi -56(fp):rdx -44(fp):eax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040E554:
	Mem134[r12_82:word64] = rax_86 + 0x0000000000000001
	word64 rsi_130 = rax_86 + 0x0000000000000001
	branch r14_84 == 0x000000000061B220 l000000000040E577
// DataOut: ebp fs r11 r12 r14 r15 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040E565:
	Mem166[rsp_104 + 0x0000000000000038:word64] = rax_86 + 0x0000000000000001
	free(r14_84)
	rsi_130 = Mem166[rsp_104 + 0x0000000000000038:word64]
// DataOut: ebp fs r11 r12 r15 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040E577:
	Mem138[rsp_104 + 0x0000000000000038:word64] = rsi_130
	word64 rsp_139
	word64 rax_140 = fn0000000000410C40(rsi_130, rsi_130, out rsp_139)
	Mem141[r12_82 + 0x0000000000000008:word64] = rax_140
	word64 r8_144 = (uint64) Mem141[r11_88:word32]
	word64 rcx_145 = Mem141[rsp_139 + 0x0000000000000028:word64]
	word64 rdx_148 = Mem141[rsp_139 + 0x0000000000000020:word64]
	word64 rsi_149 = Mem141[rsp_139 + 0x0000000000000038:word64]
	Mem151[rsp_139 + 0x0000000000000010:word64] = Mem141[rcx + 0x0000000000000030:word64]
	word64 rax_152 = Mem151[rcx + 0x0000000000000028:word64]
	Mem153[rsp_139:word64] = r15_85
	Mem154[rsp_139 + 0x0000000000000008:word64] = rax_152
	word64 r8_157
	word64 r9_158
	word64 r11_159
	word64 r12_160
	word64 r13_161
	word64 r14_162
	word64 r15_163
	fn000000000040D8A0(rcx_145, rdx_148, rsi_149, rax_140, r8_144, (word32) (uint64) ebp_61, fs, qwArg18, qwArg20, qwArg28, out rsp_104, out rbp_103, out r8_157, out r9_158, out r11_159, out r12_160, out r13_161, out r14_162, out r15_163)
// DataOut: fs r11 r12 r12b r13 r14 r15 r15b rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040E5BF:
	Mem107[rbp_103:word32] = (word32) (uint64) Mem72[rsp_104 + 0x0000000000000034:word32]
	word64 rsp_115 = Mem107[rsp_104 + 0x0000000000000058:word64]
	word64 rbp_117
	*rbpOut = Mem107[rsp_115 + 0x0000000000000008:word64]
	return rsp_115 + 0x0000000000000020
// DataOut: fs r11 r12 r12b r13 r14 r15 r15b rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040E450_exit:
// DataOut: r11 r12 r12b r13 r14 r15 r15b rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):eax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040E600(word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040E600_entry:
// DataOut: r11 r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E600:
	__errno_location()
	word32 r12d_17 = (word32) (uint64) Mem0[r8:word32]
	branch rdi == 0x0000000000000000 l000000000040E61E
// DataOut: r11 r12d
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E61A_1:
// DataOut: r11 r12d
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:(uint64) Mem0[r8:word32] rdi:0x000000000061B320 rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040E61E:
	word64 rsp_25
	word64 rbp_26
	word64 rsi_27
	fn0000000000410E00(0x0000000000000038, out rsp_25, out rbp_26, out rsi_27)
	Mem29[r11:word32] = r12d_17
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:(uint64) Mem0[r8:word32] rdi:0x000000000061B320 rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040E600_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r12:(uint64) Mem0[r8:word32] rdi:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



void fn000000000040E630(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E630_entry:
// DataOut: rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E630:
	branch rdi == 0x0000000000000000 l000000000040E63C
// DataOut: rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E638_1:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E63C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E630_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn000000000040E640(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E640_entry:
// DataOut: esi rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E640:
	word64 rax_12 = 0x000000000061B320
	branch rdi == 0x0000000000000000 l000000000040E64C
// DataOut: esi rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E648_1:
	rax_12 = rdi
// DataOut: esi rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320

l000000000040E64C:
	Mem11[rax_12:word32] = esi
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>

fn000000000040E640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn000000000040E650(word32 edx, word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx esi rdi sil
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040E650_entry:
// DataOut: edx esi rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E650:
	word64 rax_12 = 0x000000000061B320
	word32 ecx_10 = (word32) (uint64) esi
	branch rdi == 0x0000000000000000 l000000000040E65E
// DataOut: cl edx rax rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E65A_1:
	rax_12 = rdi
// DataOut: cl edx rax sil
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rcx:(uint64) esi

l000000000040E65E:
	word64 rsi_20 = rax_12 + DPB(rsi, (word32) (sil >>u 0x05), 0) * 0x0000000000000004
	word32 edi_23 = (word32) (uint64) Mem0[rsi_20 + 0x0000000000000008:word32]
	byte cl_16 = (byte) (uint64) (ecx_10 & 0x0000001F)
	Mem40[rsi_20 + 0x0000000000000008:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) (edx ^ (word32) ((uint64) ((word32) ((uint64) edi_23) >>u cl_16))) & 0x00000001) << cl_16) ^ edi_23)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rcx:(uint64) esi

fn000000000040E650_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:(uint64) (eax & 0x00000001) rcx:(uint64) (ecx & 0x0000001F) sil:<invalid> esi:<invalid> rsi:<invalid> rdi:<invalid> rdx:(uint64) (edx ^ edi)



void fn000000000040E6B0(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi rax rdi
// Preserved: rsp
fn000000000040E6B0_entry:
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6B0:
	branch rdi != 0x0000000000000000 l000000000040E6C0
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6BC_1:
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6C0:
	Mem13[0x000000000061B320:word32] = 0x00000008
	branch rsi == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6CB:
	branch rdx == 0x0000000000000000 l000000000040E6DD
// DataOut: rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320
// LocalsOut: fp(64)

l000000000040E6DD:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

l000000000040E6D0:
	Mem21[0x000000000061B348:word64] = rsi
	Mem22[0x000000000061B350:word64] = rdx
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:0x000000000061B320 rdi:0x000000000061B320

fn000000000040E6B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:0x000000000061B320 rdi:0x000000000061B320



word64 fn000000000040E6F0(word64 rcx, word64 rdx, word32 ebx, word32 ebp, word64 rsi, word64 rdi, word64 r8, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx edi fs r11 r8 rcx rdi rdx rsi
// LiveOut: ebp r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rcx rdx
fn000000000040E6F0_entry:
// DataOut: ebp ebx fs r11 r8 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6F0:
	branch r8 != 0x0000000000000000 l000000000040E716
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0014(32) Local -0018(32)

l000000000040E712_1:
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0014(32) Local -0018(32)

l000000000040E716:
	__errno_location()
	word32 r12d_38 = (word32) (uint64) Mem0[r8:word32]
	word64 rsp_58
	word64 rbp_59
	word64 r8_60
	word64 r9_61
	word64 r11_62
	word64 r12_63
	word64 r13_64
	word64 r14_65
	word64 r15_66
	word64 rax_67 = fn000000000040D8A0(rcx, rdx, rsi, rdi, (uint64) Mem0[r11:word32], (word32) (uint64) Mem0[r11 + 0x0000000000000004:word32], fs, rdi, qwLoc20, qwLoc18, out rsp_58, out rbp_59, out r8_60, out r9_61, out r11_62, out r12_63, out r13_64, out r14_65, out r15_66)
	Mem69[r13_64:word32] = r12d_38
	word64 rsp_76 = Mem69[rsp_58 + 0x0000000000000038:word64]
	word64 rbp_78
	*rbpOut = Mem69[rsp_76 + 0x0000000000000008:word64]
	word64 rsi_81
	*rsiOut = Mem69[rsp_76 + 0x0000000000000010:word64]
	word64 rdi_83
	*rdiOut = Mem69[rsp_76 + 0x0000000000000018:word64]
	word64 rsp_84
	*rspOut = rsp_76 + 0x0000000000000020
	return rax_67
// DataOut: ebp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 rax:0x000000000061B320 r15:rcx r14:rdx r13:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040E6F0_exit:
// DataOut: ebp r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rbp:<invalid> r9:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> r11:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r10:<invalid> sil:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040E930(word64 rdi, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040E930_entry:
// DataOut: fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E930:
// DataOut: edi fs r11 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E941_thunk_fn000000000040E450:
	word64 rbp_13
	word64 r11_14
	word64 r12_15
	word64 r13_16
	word64 r14_17
	word64 r15_18
	fn000000000040E450(0x000000000061B320, 0xFFFFFFFFFFFFFFFF, rdi, 0x0000000000000000, r11, fs, out rbp_13, out r11_14, out r12_15, out r13_16, out r14_17, out r15_18)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061B320 rdx:0xFFFFFFFFFFFFFFFF rdi:0x0000000000000000

fn000000000040E930_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid>



word64 fn000000000040E970(word64 rdx, word32 esi, word32 edi, word64 r11, selector fs, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi fs r11 rdx
// LiveOut: r11 r15 rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040E970_entry:
// DataOut: edi esi fs r11 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E970:
	fn000000000040D740(esi, fp - 0x0000000000000050)
	word64 rbp_23
	word64 r11_24
	word64 r12_25
	word64 r13_26
	word64 r14_27
	word64 r15_28
	return fn000000000040E450(fp - 0x0000000000000050, 0xFFFFFFFFFFFFFFFF, rdx, (uint64) (word32) (uint64) edi, r11, fs, out rbp_23, out r11_24, out r12_25, out r13_26, out r14_27, out r15_28) + 0x0000000000000060
// DataOut: fs r11 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040E970_exit:
// DataOut: r11 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn000000000040EAB0(word64 rdi, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: r12 r12b r14 r15b rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040EAB0_entry:
	*r15bOut = r15b
// DataOut: fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EAB0:
// DataOut: dl fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EA00:
	word64 r8_8 = (uint64) edx
	word64 r8_15 = DPB(r8_8, (word32) ((byte) r8_8 >>u 0x05), 0)
	word32 r9d_32 = (word32) (uint64) Mem0[fp - 0x0000000000000040 + r8_15 * 0x00000004:word32]
	byte cl_17 = (byte) (uint64) ((word32) (uint64) edx & 0x0000001F)
	Mem51[fp - 0x0000000000000040 + r8_15 * 0x00000004:word32] = (word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) ((word32) (uint64) r9d_32 >>u cl_17) ^ 0x00000001) & 0x00000001) << cl_17) ^ r9d_32)
	word64 rbp_54
	word64 r11_55
	word64 r12_56
	word64 r13_57
	word64 r14_58
	word64 r15_59
	word64 rsp_62
	*rspOut = fn000000000040E450(fp - 0x0000000000000048, 0xFFFFFFFFFFFFFFFF, rdi, 0x0000000000000000, r11, fs, out rbp_54, out r11_55, out r12_56, out r13_57, out r14_58, out r15_59) + 0x0000000000000050
	return rbx
// DataOut: fs r12 r12b r14 r15b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:0x000000000000003A rsi:0xFFFFFFFFFFFFFFFF

fn000000000040EAB0_exit:
// DataOut: r12 r12b r14 r15b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r8b:<invalid> rcx:<invalid> r8d:(word32) (r8b >>u 0x0A) rdi:<invalid> r9:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r11:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):<invalid>



word64 fn000000000040EBF0(word64 rsi, word64 rdi, word64 r11, selector fs, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 rdi rsi
// LiveOut: r11 rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EBF0_entry:
// DataOut: edi fs r11 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBF0:
// DataOut: edi fs r11 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBFC_thunk_fn000000000040E450:
	word64 rbp_9
	word64 r11_10
	word64 r12_11
	word64 r13_12
	word64 r14_13
	word64 r15_14
	fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, rsi, rdi, r11, fs, out rbp_9, out r11_10, out r12_11, out r13_12, out r14_13, out r15_14)
	return rbx
// DataOut: fs r11 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF

fn000000000040EBF0_exit:
// DataOut: r11 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> rdx:<invalid> r15:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid>



word64 fn000000000040EC10(word64 rdi, word64 r11, selector fs, ptr64 & rbpOut, ptr64 & r11Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: r11 r13 r14 r15 rbp rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EC10_entry:
// DataOut: fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC10:
// DataOut: edi fs r11 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC1F_thunk_fn000000000040E450:
	word64 rbp_14
	word64 r11_15
	word64 r12_16
	word64 r13_17
	word64 r14_18
	word64 r15_19
	fn000000000040E450(0x000000000061A5A0, 0xFFFFFFFFFFFFFFFF, rdi, 0x0000000000000000, r11, fs, out rbp_14, out r11_15, out r12_16, out r13_17, out r14_18, out r15_19)
	return rbx
// DataOut: fs r11 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi rcx:0x000000000061A5A0 rdx:0xFFFFFFFFFFFFFFFF rdi:0x0000000000000000

fn000000000040EC10_exit:
// DataOut: r11 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r15:<invalid> rax:<invalid> r13:<invalid> r12:<invalid> rbp:<invalid> r8:<invalid> r11:<invalid> r14:<invalid> r9:<invalid> rbx:<invalid> ebp:<invalid> eax:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esi:<invalid> r11d:<invalid> ecx:<invalid> sil:<invalid>



word64 fn000000000040EC30(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 qwArg04, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi rdx rsi
// LiveOut: bpl ebp r12 rax rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esp r12 r12b r12d r12w rax rbp rcx rdx rsp sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn000000000040EC30_entry:
	*r12Out = r12
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC30:
	word64 rbp_13 = rdi
	branch rdx == 0x0000000000000000 l000000000040EC69
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC40:
	word64 rsp_54
	word64 rdx_55
	byte SZO_56
	byte C_57
	word64 rdi_59
	byte Z_61
	word64 r12_62
	word64 rsi_63
	word32 ecx_64
	word64 rax_65
	word32 edx_66
	byte dl_68
	byte SCZO_69
	word32 ebp_70
	word64 rcx_67
	word64 rbx_60
	call __ctype_tolower_loc (retsize: 8; depth: 20)
		uses: C_8,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_17,ebp_14,ecx,edx,qwLoc0C,r12_52,rax,rbp_13,rbx_18,rcx,rdi,rdx,rsi,rsp_15,SCZO,SZO_6,Z_7
		defs: C_57,dl_68,ebp_70,ecx_64,edx_66,r12_62,rax_65,rbp_58,rbx_60,rcx_67,rdi_59,rdx_55,rsi_63,rsp_54,SCZO_69,SZO_56,Z_61
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:rdx - 0x0000000000000001 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC50:
	rcx_67 = DPB(rcx_67, (word32) Mem0[r12_62 + rbx_60:byte], 0) (alias)
	Mem79[rbp_13 + rbx_60:byte] = (byte) (uint64) Mem0[Mem0[rax_65:word64] + rcx_67 * 0x00000004:word32]
	rbx_60 = rbx_60 - 0x0000000000000001
	branch rbx_60 != 0xFFFFFFFFFFFFFFFF l000000000040EC50
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC69:
	word32 ebp_44
	*ebpOut = (word32) fp
	word64 rsp_48
	*rspOut = qwArg04 + 0x0000000000000008
	return rbp_13
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040EC30_exit:
// DataOut: bpl ebp r12 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp rbx:rbx rax:rdi r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040EC80(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 qwArg04, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi rdx rsi
// LiveOut: bpl ebp r12 rax rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esp r12 r12b r12d r12w rax rbp rcx rdx rsp sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn000000000040EC80_entry:
	*r12Out = r12
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC80:
	word64 rbp_13 = rdi
	branch rdx == 0x0000000000000000 l000000000040ECB9
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC90:
	word64 rsp_54
	word64 rdx_55
	byte SZO_56
	byte C_57
	word64 rdi_59
	byte Z_61
	word64 r12_62
	word64 rsi_63
	word32 ecx_64
	word64 rax_65
	word32 edx_66
	byte dl_68
	byte SCZO_69
	word32 ebp_70
	word64 rcx_67
	word64 rbx_60
	call __ctype_toupper_loc (retsize: 8; depth: 20)
		uses: C_8,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_17,ebp_14,ecx,edx,qwLoc0C,r12_52,rax,rbp_13,rbx_18,rcx,rdi,rdx,rsi,rsp_15,SCZO,SZO_6,Z_7
		defs: C_57,dl_68,ebp_70,ecx_64,edx_66,r12_62,rax_65,rbp_58,rbx_60,rcx_67,rdi_59,rdx_55,rsi_63,rsp_54,SCZO_69,SZO_56,Z_61
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:rdx - 0x0000000000000001 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040ECA0:
	rcx_67 = DPB(rcx_67, (word32) Mem0[r12_62 + rbx_60:byte], 0) (alias)
	Mem79[rbp_13 + rbx_60:byte] = (byte) (uint64) Mem0[Mem0[rax_65:word64] + rcx_67 * 0x00000004:word32]
	rbx_60 = rbx_60 - 0x0000000000000001
	branch rbx_60 != 0xFFFFFFFFFFFFFFFF l000000000040ECA0
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040ECB9:
	word32 ebp_44
	*ebpOut = (word32) fp
	word64 rsp_48
	*rspOut = qwArg04 + 0x0000000000000008
	return rbp_13
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040EC80_exit:
// DataOut: bpl ebp r12 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp rbx:rbx rax:rdi r12:rsi ecx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040ECD0(word64 rax, word64 rcx, word64 rdx, word32 ebp, word64 rsi, word64 rdi, word32 r9d, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & esiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl cl ebp fs r11d r14 r15b r9d rax rcx rdi rdx rsi
// LiveOut: edi esi r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdx
fn000000000040ECD0_entry:
	*r8Out = r8
	*r15Out = r15
	*r14Out = r14
	*r9Out = r9
	*r11Out = r11
// DataOut: bpl cl ebp fs r11 r11d r14 r14d r15 r15b r8 r9 r9d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ECD0:
	word64 rax_1043 = Mem0[rax + 0x0000000000000030:word64]
	word64 r10_456 = rdx
	word64 r12_1027
	*r12Out = rsi
	word64 rbx_1000 = rcx
	word64 rsp_138 = fp - 0x00000000000004F0
	word32 esi_33 = (word32) (uint64) Mem0[rax_1043 + 0x0000000000000008:word32]
	branch esi_33 <= 0x0000000C l000000000040EEE0
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(0) Local -0008(0) Local -04B0(32)

l000000000040EEE0:
	rax_1043 = 0x000000000000000C
	branch (word32) (uint64) esi_33 == 0x00000000 l000000000040EEEE
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040EEEB_1:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:0x000000000000000C rsi:(uint64) esi -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040EEEE:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:(uint64) esi eax:esi -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED26:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):esi -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED2B:
	word64 r14_1036
	word64 rax_108
	word32 eax_49 = (word32) Mem0[rcx:byte]
	word64 rax_215 = DPB(rax_1043, eax_49, 0)
	byte al_308 = (byte) eax_49
	word64 r13_1028
	*r13Out = 0x0000000000000000
	branch al_308 == 0x00 l000000000040F053
// DataOut: al bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:esi -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED39:
	*r14Out = rdx
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> eax:(word32) Mem0[rcx:byte] r13:0x0000000000000000 -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED85:
	branch al_308 != 0x25 l000000000040ED50
	branch al_308 != 0x25 l000000000040ED50
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED50:
	branch r14_1036 - r13_1028 <=u 0x0000000000000001 l000000000040EE98
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED60:
	branch r12_1027 == 0x0000000000000000 l000000000040ED6D
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED65:
	Mem1032[r12_1027:byte] = al_308
	*r12Out = r12_1027 + 0x0000000000000001
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED6D:
	*r13Out = r13_1028 + 0x0000000000000001
	word64 r8_1031
	*r8Out = rbx_1000
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED89:
	r9d = (word32) Mem0[rsp_138 + 0x000000000000000F:byte]
	r9 = DPB(r9, r9d, 0) (alias)
	*r9Out = r9
	byte r9b_634 = (byte) r9d
	word64 r11_1019
	*r11Out = 0x0000000000000000
	r11d = 0x00000000 (alias)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED94:
	rbx_1000 = rbx_1000 + 0x0000000000000001
	byte dil_1002 = (byte) (word32) Mem0[rbx_1000:byte]
	byte SZO_1006 = cond(dil_1002 - 0x30)
	branch dil_1002 == 0x30 l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDA1:
	branch SZO_1006 l000000000040EDD0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDD0:
	branch dil_1002 != 0x5E l000000000040EE70
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE70:
	branch dil_1002 != 0x5F l000000000040EDEE
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE7A:
	r11d = (int32) dil_1002
	*r11Out = DPB(r11_1019, r11d, 0)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDDA:
	rcx = 0x0000000000000001
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDA3:
	branch dil_1002 != 0x23 l000000000040EDE8
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDE8:
	branch dil_1002 == 0x2D l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDEE:
	word64 rdx_684 = (uint64) ((int32) dil_1002 - 0x00000030)
	word32 ebp_683 = 0xFFFFFFFF
	branch (word32) rdx_684 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDFF:
	word64 rbp_945 = 0x0000000000000000
	ebp_683 = 0x00000000 (alias)
// DataOut: ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:0x00000000FFFFFFFF rdx:(uint64) ((int32) dil - 0x00000030) r11d:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> ebp:0xFFFFFFFF -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE28:
	branch ebp_683 <= 0x0CCCCCCC l000000000040EE08
	branch ebp_683 <= 0x0CCCCCCC l000000000040EE08
// DataOut: ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE08:
	word32 edx_985 = (int32) Mem0[rbx_1000:byte]
	word64 rdx_986 = DPB(rdx_684, edx_985, 0)
	byte dl_987 = (byte) edx_985
	branch ebp_683 == 0x0CCCCCCC l000000000040EE88
// DataOut: dl ebp edx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE88:
	branch dl_987 <= 0x37 l000000000040EE0D
// DataOut: ebp edx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE8D:
	rbp_945 = 0x000000007FFFFFFF
	ebp_683 = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE0D:
	rcx = DPB(rcx, rbp_945 * 0x00000005, 0) (alias)
	ebp_683 = rdx_986 - 0x0000000000000030 + rcx * 0x00000002
	rbp_945 = DPB(rbp_945, ebp_683, 0) (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE30:
	rbp_945 = 0x000000007FFFFFFF
	ebp_683 = 0x7FFFFFFF (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE15:
	rbx_1000 = rbx_1000 + 0x0000000000000001
	dil_1002 = (byte) (word32) Mem0[rbx_1000:byte] (alias)
	rdx_684 = (uint64) ((int32) dil_1002 - 0x00000030)
	branch (word32) rdx_684 >u 0x00000009 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> ecx:<invalid> ebp:<invalid> r11d:<invalid> rcx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE40:
	branch dil_1002 == 0x45 l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE4A:
	branch dil_1002 == 0x4F l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) r11d:<invalid> rcx:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EEC8:
	rbx_1000 = rbx_1000 + 0x0000000000000001
	dil_1002 = (byte) (word32) Mem0[rbx_1000:byte] (alias)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) rcx:<invalid> r11d:<invalid> ecx:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE52:
	word64 r8_717
	branch dil_1002 >u 0x7A l000000000040FF4D
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) rcx:<invalid> ecx:<invalid> r11d:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> esi:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040FF4D:
	r8_717 = rbx_1000
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE60:
	switch (DPB(rdx_684, (word32) dil_1002, 0)) { l000000000040FEFB }
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:(uint64) ((int32) dil - 0x00000030) rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040FEFB:
	r8_717 = r11_1019 - 0x0000000000000001
	dil_1002 = (byte) (word32) Mem0[rbx_1000 - 0x0000000000000001:byte] (alias)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:(word32) dil rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r11d:<invalid> ebp:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F39F:
	word64 r15_724
	branch dil_1002 != 0x25 l000000000040F0B2
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0B2:
	word64 rax_903 = r8_717 - 0x0000000000000001
	word32 ecx_908 = 0x00000001
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0C1:
	*r15Out = rax_903
	rax_903 = rax_903 - 0x0000000000000001
	ecx_908 = (word32) (uint64) (ecx_908 + 0x00000001) (alias)
	branch Mem0[rax_903 + 0x0000000000000001:byte] != 0x25 l000000000040F0C1
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9b r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0D1:
	rcx = (int64) ecx_908
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F3A9:
	*r15Out = r8_717
	rcx = 0x0000000000000001
	cl = 0x01 (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0D7:
	word64 r8_725 = r8_717
	*r8Out = r8_725
	word64 rax_732 = 0x0000000000000000
	byte al_734 = 0x00
	branch ebp_683 < 0x00000000 l000000000040F0E1
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0DE_1:
	rax_732 = (uint64) ebp_683 (alias)
	al_734 = (byte) ebp_683 (alias)
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0E1:
	rax_215 = DPB(rax_732, (int16) al_734, 0) (alias)
	rbx_1000 = rax_215
	branch rcx <u rax_215 l000000000040F0ED
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0E9_2:
	rbx_1000 = rcx
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0ED:
	branch rbx_1000 >=u r14_1036 - r13_1028 l000000000040EE98
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:rdx rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0F9:
	branch r12_1027 == 0x0000000000000000 l000000000040F16E
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0FE:
	branch rax_215 <=u rcx l000000000040F144
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F103:
	Mem852[rsp_138 + 0x0000000000000030:word64] = rcx
	Mem853[rsp_138 + 0x0000000000000028:word32] = r9d
	Mem858[rsp_138 + 0x0000000000000018:word64] = r8_717
	word64 rbp_854 = (int64) ebp_683 - rcx
	branch r11d == 0x00000030 l000000000040F1C1
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F1C1:
	rax_215 = memset(r12_1027, 0x0000000000000030, rbp_854)
	r9 = (uint64) Mem858[rsp_138 + 0x0000000000000028:word32]
	*r9Out = r9
	r12_1027 = r12_1027 + rbp_854
	r8_725 = Mem858[rsp_138 + 0x0000000000000018:word64]
	r9d = (word32) r9 (alias)
	r9b_634 = (byte) r9 (alias)
	rcx = Mem858[rsp_138 + 0x0000000000000030:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F125:
	rax_215 = memset(r12_1027, 0x0000000000000020, rbp_854)
	r9 = (uint64) Mem858[rsp_138 + 0x0000000000000028:word32]
	*r9Out = r9
	r12_1027 = r12_1027 + rbp_854
	rcx = Mem858[rsp_138 + 0x0000000000000030:word64]
	r9d = (word32) r9 (alias)
	r9b_634 = (byte) r9 (alias)
	r8_725 = Mem858[rsp_138 + 0x0000000000000018:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:(int32) dil r8:<invalid> r15:<invalid> ax:(int16) al r11d:<invalid> ebp:<invalid> rdi:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F144:
	Mem809[rsp_138 + 0x0000000000000028:word64] = r8_725
	Mem813[rsp_138 + 0x0000000000000018:word64] = rcx
	branch r9b_634 == 0x00 l000000000040F180
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> rdi:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F180:
	rax_215 = memcpy(r12_1027, r15_724, rcx)
	rcx = Mem813[rsp_138 + 0x0000000000000018:word64]
	word64 r8_847
	*r8Out = Mem813[rsp_138 + 0x0000000000000028:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F15C:
	word32 ebp_833
	rax_215 = fn000000000040EC80(rax_215, rcx, r15_724, r12_1027, qwLoc04, out rsp_138, out ebp_833, out r12_1027)
	rcx = Mem813[rsp_138 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
	word64 r8_842
	*r8Out = Mem813[rsp_138 + 0x0000000000000028:word64]
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F16B:
	*r12Out = r12_1027 + rcx
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> rdi:<invalid> r11d:<invalid> r9:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F16E:
	*r13Out = r13_1028 + rbx_1000
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> ecx:<invalid> esi:<invalid> r8:<invalid> r15:<invalid> ax:<invalid> r11d:<invalid> rdi:<invalid> ebp:<invalid> r9:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED74:
	word32 eax_579 = (word32) Mem0[rax_215 + 0x0000000000000001:byte]
	rax_215 = DPB(rax_215, eax_579, 0) (alias)
	al_308 = (byte) eax_579 (alias)
	rbx_1000 = rax_215 + 0x0000000000000001
	branch al_308 == 0x00 l000000000040F050
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F050:
	r10_456 = r14_1036
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F053:
	branch r12_1027 == 0x0000000000000000 l000000000040F191
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F05C:
	branch r10_456 == 0x0000000000000000 l000000000040F191
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F191:
	rax_108 = r13_1028
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F065:
	Mem501[r12_1027:byte] = 0x00
	rax_108 = r13_1028
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE9A:
	word64 rsi_150 = Mem0[rsp_138 + 0x00000000000004C8:word64] ^ Mem0[fs:0x00000028:word64]
	word32 esi_151 = (word32) rsi_150
	branch rsi_150 != 0x0000000000000000 l00000000004105EA
// DataOut: bpl cl ebp esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004105EA:
	__stack_chk_fail()
	Mem184[rsp_138 + 0x0000000000000018:word32] = 0x00000000
// DataOut: bpl cl ebp esi fs r11d r12 r13 r14 r14d r15 r15b r9d rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F25D:
	Mem185[rsp_138 + 0x00000000000000B2:byte] = cl
	byte dil_187 = (byte) (uint64) esi_151
	word64 rax_190 = rsp_138 + 0x00000000000000B3
// DataOut: bpl dil ebp fs r11d r12 r13 r14 r14d r15 r15b r8 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF37:
	Mem197[rax_190:byte] = dil_187
	Mem200[rax_190 + 0x0000000000000001:byte] = 0x00
	Mem202[rsp_138 + 0x0000000000000038:word32] = r9d
	Mem203[rsp_138 + 0x0000000000000030:word32] = r11d
	Mem204[rsp_138 + 0x0000000000000028:word64] = rbx_1000
	word64 rdi_206
	word64 r10_207
	word64 rdx_208
	word64 rsi_209
	word64 rbp_210
	word64 rbx_212
	byte SCZO_214
	word32 esi_217
	byte SZO_218
	byte C_219
	word64 r8_220
	word32 r9d_221
	byte dil_222
	word32 eax_223
	word32 r13d_224
	byte al_226
	byte Z_227
	word32 r11d_229
	word64 r11_230
	word32 edi_231
	byte CZ_232
	word32 ecx_233
	word32 edx_234
	word32 ebp_235
	word64 r15_236
	byte S_237
	word16 ax_238
	word64 r9_239
	byte dl_240
	byte r9b_241
	byte r15b_243
	call strftime (retsize: 8; depth: 8)
		uses: al_192,ax_193,bLoc04E1_39,C_154,cl_196,CZ_145,dil_187,dl_125,dwLoc04_4,dwLoc04AC_37,dwLoc04B0_44,dwLoc08_9,dwLoc0C_12,dwLoc10_15,dwLoc14_18,dwLoc18_21,eax_191,ebp_137,ecx_195,edi_188,edx_124,esi_151,fs_118,qwLoc04A8_40,qwLoc04D0_114,qwLoc04E0_35,qwLoc28_30,r10_119,r11_148,r11d_147,r12_130,r13_134,r13d_135,r14_117,r15_116,r15b_115,r8_189,r9_120,r9b_122,r9d_121,rax_190,rbp_136,rbx_139,rcx_194,rdi_199,rdx_198,rsi_201,rsp_138,S_146,SCZO_144,SZO_152,Z_153
		defs: al_226,ax_238,C_219,cl_242,CZ_232,dil_222,dl_240,eax_223,ebp_235,ecx_233,edi_231,edx_234,esi_217,fs_216,r10_207,r11_230,r11d_229,r12_211,r13_225,r13d_224,r14_228,r15_236,r15b_243,r8_220,r9_239,r9b_241,r9d_221,rax_215,rbp_210,rbx_212,rcx_213,rdi_206,rdx_208,rsi_209,rsp_205,S_237,SCZO_214,SZO_218,Z_227
	word64 r11_248 = (uint64) Mem204[rsp_138 + 0x0000000000000030:word32]
	*r11Out = r11_248
	r9 = (uint64) Mem204[rsp_138 + 0x0000000000000038:word32]
	*r9Out = r9
	word64 r8_247 = Mem204[rsp_138 + 0x0000000000000028:word64]
	*r8Out = r8_247
	r11d = (word32) r11_248 (alias)
	r9d = (word32) r9 (alias)
	byte r9b_252 = (byte) r9
	branch rax_215 == 0x0000000000000000 l000000000040ED74
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> r14:rdx rdx:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF84:
	rbx_1000 = rax_215 - 0x0000000000000001
	word64 rax_254 = 0x0000000000000000
	byte al_256 = 0x00
	branch ebp_235 < 0x00000000 l000000000040EF8F
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF8C_1:
	rax_254 = (uint64) ebp_235 (alias)
	al_256 = (byte) ebp_235 (alias)
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF8F:
	word16 ax_267 = (int16) al_256
	word64 rax_269 = DPB(rax_254, ax_267, 0)
	rcx = rax_215 - 0x0000000000000001
	cl = (byte) (rax_215 - 0x0000000000000001) (alias)
	branch rax_269 <u rax_215 - 0x0000000000000001 l000000000040EF9E
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> r14:rdx ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF9A_2:
	rcx = rax_269
	cl = (byte) ax_267 (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF9E:
	branch rcx >=u r14_1036 - r13_1028 l000000000040EE98
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE98:
	rax_108 = 0x0000000000000000
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFAA:
	branch r12_1027 == 0x0000000000000000 l000000000040F03A
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFB3:
	branch rax_215 - 0x0000000000000001 >=u rax_269 l000000000040F001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFB8:
	rax_269 = (uint64) Mem204[rsp_138 + 0x0000000000000018:word32]
	branch (word32) rax_269 != 0x00000000 l000000000040F001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:(int16) al r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFC0:
	Mem404[rsp_138 + 0x0000000000000030:word64] = rcx
	Mem405[rsp_138 + 0x0000000000000028:word32] = r9d
	Mem410[rsp_138 + 0x0000000000000018:word64] = r8_247
	word64 rbp_406 = (int64) ebp_235 - (rax_215 - 0x0000000000000001)
	branch r11d == 0x00000030 l0000000000410239
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000410239:
	rax_269 = memset(r12_1027, 0x0000000000000030, rbp_406)
	r9 = (uint64) Mem410[rsp_138 + 0x0000000000000028:word32]
	*r9Out = r9
	r12_1027 = r12_1027 + rbp_406
	r8_247 = Mem410[rsp_138 + 0x0000000000000018:word64]
	r9d = (word32) r9 (alias)
	r9b_252 = (byte) r9 (alias)
	rcx = Mem410[rsp_138 + 0x0000000000000030:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFE2:
	rax_269 = memset(r12_1027, 0x0000000000000020, rbp_406)
	r9 = (uint64) Mem410[rsp_138 + 0x0000000000000028:word32]
	*r9Out = r9
	r12_1027 = r12_1027 + rbp_406
	rcx = Mem410[rsp_138 + 0x0000000000000030:word64]
	r9d = (word32) r9 (alias)
	r9b_252 = (byte) r9 (alias)
	r8_247 = Mem410[rsp_138 + 0x0000000000000018:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F001:
	Mem336[rsp_138 + 0x0000000000000028:word64] = rcx
	Mem337[rsp_138 + 0x0000000000000018:word64] = r8_247
	word64 rsi_341 = Mem337[rsp_138 + 0x0000000000000020:word64]
	branch r15b_243 != 0x00 l000000000040F1AD
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9b r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F1AD:
	word32 ebp_386
	rax_269 = fn000000000040EC30(rax_269, rax_215 - 0x0000000000000001, rsi_341, r12_1027, qwLoc04, out rsp_138, out ebp_386, out r12_1027)
	rcx = Mem337[rsp_138 + 0x0000000000000028:word64]
	word64 r8_392
	*r8Out = Mem337[rsp_138 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F01F:
	branch r9b_252 == 0x00 l000000000040F199
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F199:
	rax_269 = memcpy(r12_1027, rsi_341, rax_215 - 0x0000000000000001)
	rcx = Mem337[rsp_138 + 0x0000000000000028:word64]
	cl = (byte) rcx (alias)
	word64 r8_384
	*r8Out = Mem337[rsp_138 + 0x0000000000000018:word64]
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F028:
	word32 ebp_367
	rax_269 = fn000000000040EC80(rax_269, rax_215 - 0x0000000000000001, rsi_341, r12_1027, qwLoc04, out rsp_138, out ebp_367, out r12_1027)
	rcx = Mem337[rsp_138 + 0x0000000000000028:word64]
	word64 r8_373
	*r8Out = Mem337[rsp_138 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F037:
	*r12Out = r12_1027 + (rax_215 - 0x0000000000000001)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> r14:rdx r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F03A:
	word32 eax_306 = (word32) Mem204[rax_269 + 0x0000000000000001:byte]
	rax_215 = DPB(rax_269, eax_306, 0) (alias)
	al_308 = (byte) eax_306 (alias)
	*r13Out = r13_1028 + rcx
	rbx_1000 = rax_215 + 0x0000000000000001
	branch al_308 != 0x00 l000000000040ED85
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F04E:
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r14:rdx rbp:<invalid> ecx:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EEB1:
	word64 rsp_161 = Mem0[rsp_138 + 0x00000000000004E8:word64]
	word64 rbp_163
	*rbpOut = Mem0[rsp_161 + 0x0000000000000008:word64]
	word32 esi_167
	*esiOut = (word32) Mem0[rsp_161 + 0x0000000000000010:word64]
	word64 rdi_169
	*rdiOut = Mem0[rsp_161 + 0x0000000000000018:word64]
	word64 rsp_172
	*rspOut = rsp_161 + 0x0000000000000020
	return rax_108
// DataOut: edi esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rdi:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> rbp:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040ECD0_exit:
// DataOut: edi esi r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> rbp:<invalid> rdi:<invalid> r14:rdx rdx:<invalid> r8:<invalid> rcx:<invalid> r11:<invalid> r9:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> r11d:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040EDA9:
	rbx_1000 = rbx_1000 + 0x0000000000000001
	dil_1002 = (byte) (word32) Mem0[rbx_1000:byte] (alias)
	SZO_1006 = cond(dil_1002 - 0x30) (alias)
	branch dil_1002 != 0x30 l000000000040EDA1
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDBB:
// DataOut: dil fs r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:0x0000000000000001 rsi:<invalid> eax:0x00000001 r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:0x0001 rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDC0:
	r11d = (int32) dil_1002
	*r11Out = DPB(r11_1019, r11d, 0)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> eax:<invalid> r13:<invalid> r14:rdx r9d:<invalid> r11:<invalid> edi:<invalid> r11d:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> rdi:<invalid> r9:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> r15:<invalid> ebp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)



word64 fn0000000000410600(word64 rax, word64 rdx, word32 ebp, word64 rsi, word64 rdi, word32 r8d, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rbpOut, ptr64 & esiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl ebp fs r11d r14 r15b r8d rax rdi rdx rsi
// LiveOut: edi esi r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410600_entry:
// DataOut: bpl ebp fs r11d r14 r15b r8d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410600:
	word64 rsp_28
	word64 rbp_29
	word32 esi_30
	word64 rdi_31
	word64 r8_32
	word64 r9_33
	word64 r11_34
	word64 r12_35
	word64 r13_36
	word64 r14_37
	word64 r15_38
	return fn000000000040ECD0(rax, rdx, rsi, ebp, rdi, 0x0000000000000000, (word32) (uint64) r8d, r11d, r14, r15b, fs, out rsp_28, out rbp_29, out esi_30, out rdi_31, out r8_32, out r9_33, out r11_34, out r12_35, out r13_36, out r14_37, out r15_38)
// DataOut: edi esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410600_exit:
// DataOut: edi esi r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r10:<invalid> r12:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rbp:<invalid> r14:<invalid> r11:<invalid> ax:<invalid> r9d:<invalid> edi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> r15:<invalid> rbx:<invalid> r11d:<invalid> ebp:<invalid> -24(fp):r9d



word64 fn0000000000410630(word64 rsi, word64 rdi, word64 r8, word64 r9, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 r9 rdi rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000410630_entry:
// DataOut: r11 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410630:
	branch rsi == 0x0000000000000000 l0000000000410A30
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64)

l0000000000410A30:
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410650:
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041066A:
	dcgettext(0x0000000000000000, 0x00000000004168D3, 0x0000000000000005)
	word64 rax_47 = dcgettext(0x0000000000000000, 0x0000000000416930, 0x0000000000000005)
	word64 rax_50 = DPB(rax_47, fputs_unlocked(rax_47, rdi), 0)
	branch r9 >u 0x0000000000000009 l0000000000410A50
// DataOut: r11 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:0x0000000000000001 rax:0x0000000000000000 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410A50:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:0x00000000000007DD rdx:0x0000000000000005 rsi:0x0000000000000000 rax:<invalid> rdi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004107A1:
	dcgettext(0x0000000000000000, 0x0000000000416B08, 0x0000000000000005)
	return qwLoc08 + 0x0000000000000020
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:<invalid> rbp:rdi rbx:<invalid> r9:<invalid> r8:<invalid> rcx:0x00000000000007DD rdx:0x0000000000000005 rsi:0x0000000000416B08 rax:<invalid> rdi:<invalid> r10:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004106BE:
	word64 rsp_107
	word64 rdi_108
	word64 rsi_109
	word64 rbp_110
	word64 r12_111
	word64 r9_112
	word64 rbx_113
	word64 r8_114
	byte SCZO_115
	byte SZO_116
	byte C_117
	byte Z_118
	word64 rcx_119
	word64 rdx_120
	word32 edx_121
	word32 esi_122
	word32 eax_123
	word64 rax_124
	word32 edi_125
	byte CZ_126
	word64 r10_127
	word64 r11_128
	word64 r13_129
	word64 r15_130
	word64 r14_131
	call Mem0[0x00416B48:word32] (retsize: 4; depth: 116)
		uses: C_29,CZ_52,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_17,dwLoc18_21,eax_28,edi,edx,esi,qwLoc28,qwLoc30,qwLoc38,qwLoc40,qwLoc48,qwLoc50,qwLoc58,qwLoc60,qwLoc68,qwLoc70,r10,r11,r12_15,r13,r14,r15,r8_31,r9_32,rax_50,rbp_18,rbx_23,rcx_38,rdi_49,rdx_45,rsi_48,rsp_24,SCZO_51,SZO_30,Z_26
		defs: C_117,CZ_126,eax_123,edi_125,edx_121,esi_122,r10_127,r11_128,r12_111,r13_129,r14_131,r15_130,r8_114,r9_112,rax_124,rbp_110,rbx_113,rcx_119,rdi_108,rdx_120,rsi_109,rsp_107,SCZO_115,SZO_116,Z_118
	return rsp_107
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:0x00000000000007DD rdx:0x0000000000000005 rsi:0x0000000000000000 rax:<invalid> rdi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000410630_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> rdi:<invalid> r10:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000410AC0(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410AC0_entry:
// DataOut: r11 r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AC0:
	word64 r9_13 = 0x0000000000000000
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AF3:
	word64 rax_17 = (uint64) Mem0[rax:word32]
	branch (word32) rax_17 <u 0x00000030 l0000000000410AD0
	word32 eax_22 = (word32) (uint64) Mem0[rax_17:word32]
	branch eax_22 <u 0x00000030 l0000000000410AD0
// DataOut: eax r11 r8 r9 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid> -88(fp):<invalid>
// LocalsOut: fp(64)

l0000000000410AD0:
	word64 rax_69 = (uint64) (eax_22 + 0x00000008)
	Mem71[rax_69:word32] = (word32) rax_69
	rax = Mem71[rdx:word64]
	Mem77[fp - 0x0000000000000058 + r9_13 * 0x0000000000000008:word64] = rax
	branch rax == 0x0000000000000000 l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid> -88(fp):<invalid>
// LocalsOut: fp(64)

l0000000000410AFB:
	Mem53[rdx + 0x0000000000000010:word64] = rdx + 0x0000000000000008
	word64 rax_54 = Mem53[rdx:word64]
	Mem57[fp - 0x0000000000000058 + r9_13 * 0x0000000000000008:word64] = rax_54
	branch rax_54 != 0x0000000000000000 l0000000000410AE9
	Mem60[rdx + 0x0000000000000010:word64] = rdx + 0x0000000000000008
	rax = Mem60[rdx:word64]
	Mem66[fp - 0x0000000000000058 + r9_13 * 0x0000000000000008:word64] = rax
	branch rax != 0x0000000000000000 l0000000000410AE9
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid> -88(fp):<invalid>
// LocalsOut: fp(64)

l0000000000410AE9:
	r9_13 = r9_13 + 0x0000000000000001
	branch r9_13 == 0x000000000000000A l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid> -88(fp):<invalid>
// LocalsOut: fp(64)

l0000000000410B13:
// DataOut: r11 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid> -88(fp):<invalid>
// LocalsOut: fp(64)

l0000000000410B18:
	fn0000000000410630(rsi, rdi, fp - 0x0000000000000058, r9_13, r11)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9:<invalid> rax:<invalid> r10:<invalid> -88(fp):<invalid>

fn0000000000410AC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9:<invalid> rax:<invalid> r10:<invalid> r8:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -88(fp):<invalid>



word64 fn0000000000410C40(word64 rsi, word64 rdi, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: al eax rax rsp
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esp rax rdi rdx rsp sp spl
// Preserved: rbx
fn0000000000410C40_entry:
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C40:
	word64 rax_13 = malloc(rdi)
	branch rax_13 == 0x0000000000000000 l0000000000410C50
// DataOut: al eax ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:(uint64) (rdx_rax % rsi) rax:(uint64) (rdx_rax /u rsi) rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C50:
	branch rdi == 0x0000000000000000 l0000000000410C4E
// DataOut: al eax ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C55:
	fn0000000000410E50()
	word64 rax_34 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi)
	branch rax_34 <u rdi l0000000000410C7A
// DataOut: eax ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C7A:
	Mem40[fp - 0x0000000000000008:word32] = rax_34
	fn0000000000410E50()
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rdx:(uint64) (rdx_rax % rsi) rax:(uint64) (rdx_rax /u rsi) -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C71:
	rdi = rdi *s rsi
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rdx:(uint64) (rdx_rax % rsi) rax:(uint64) (rdx_rax /u rsi) -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C4E:
	word64 rsp_23
	*rspOut = fp + 0x0000000000000004
	return rax_13
// DataOut: al eax ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14d r15 r15d r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx

fn0000000000410C40_exit:
// DataOut: al eax rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx



word64 fn0000000000410C90(word64 rdx, word64 rsi, word64 rdi, ptr64 & rspOut, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: al r8 rax rsp
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi esp r10 r10b r10d r10w r8 r8b r8d r8w rax rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000410C90_entry:
	*r8Out = r8
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C90:
	branch rsi == 0x0000000000000000 l0000000000410CB0
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB0:
	branch rdi == 0x0000000000000000 l0000000000410C99
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB5:
	free(rdi)
	word64 rsp_239
	*rspOut = fp + 0x0000000000000004
	return 0x0000000000000000
// DataOut: al ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx

l0000000000410C99:
	word64 rax_63 = realloc(rdi, rsi)
	branch rax_63 == 0x0000000000000000 l0000000000410CBE
// DataOut: al ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CBE:
	branch rsi == 0x0000000000000000 l0000000000410CA6
// DataOut: al ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CC3:
	fn0000000000410E50()
	rdx = (uint64) (0xFFFFFFFFFFFFFFFF % rdx)
	word64 rax_87 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdx)
	branch rax_87 <u rsi l0000000000410CED
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410CED:
	Mem96[fp - 0x0000000000000008:word32] = rax_87
	fn0000000000410E50()
	word64 r8_100
	*r8Out = rdx
	word64 rcx_101 = Mem96[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410D40
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:(uint64) (rdx_rax /u rdx) rdx:(uint64) (rdx_rax % 0x0000000000000000) -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410D40:
	branch rcx_101 != 0x0000000000000000 l0000000000410D29
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D45:
	word64 rax_220 = (uint64) (0x0000000000000080 /u rdx)
	rdx = (uint64) (0x0000000000000080 % rdx)
	rcx_101 = (uint64) (rax_220 == 0x0000000000000000) + rax_220
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D0B:
	word128 rdx_rax_122 = (uint128) (uint64) rax_87
	r8_100 = 0x00000000AAAAAAAA
	*r8Out = r8_100
	rdx = (uint64) (rdx_rax_122 % 0x00000000AAAAAAAA)
	word64 rax_127 = (uint64) (rdx_rax_122 /u 0x00000000AAAAAAAA)
	branch rcx_101 >=u rax_127 l0000000000410D5C
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D5C:
	Mem140[fp - 0x000000000000000C:word32] = rax_127
	fn0000000000410E50()
	word64 rax_144 = Mem140[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410DA0
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: r8:0x00000000AAAAAAAA rcx:<invalid> rdx:(uint64) (rdx_rax % 0x00000000AAAAAAAA) rax:(uint64) (rdx_rax /u 0x00000000AAAAAAAA) -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410DA0:
	rdx = 0x0000000000000080
	branch rax_144 != 0x0000000000000000 l0000000000410DAC
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DA8_1:
	rax_144 = 0x0000000000000080
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DAC:
	Mem204[rsi:word64] = rax_144
	rsi = rax_144
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> rdx:0x0000000000000080 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D78:
	branch rax_144 >u rdx l0000000000410DB7
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DB7:
	Mem160[fp - 0x0000000000000010:word32] = rax_144
	fn0000000000410E50()
	Mem162[fp - 0x0000000000000014:word32] = rsi
	word64 rsp_164
	word64 rax_165 = fn0000000000410C40(rsi, rdi, out rsp_164)
// DataOut: al ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// Terminates process

l0000000000402480:
	word64 rsp_176
	word64 rsi_177
	byte SZO_178
	byte C_179
	word64 rbx_180
	byte Z_181
	word64 rax_182
	word64 rdi_183
	word32 eax_184
	word64 rcx_185
	word64 rdx_186
	word32 edx_187
	byte SCZO_188
	word64 r8_189
	word32 ecx_190
	byte cl_191
	word64 r10_192
	byte CZ_193
	word32 esi_194
	call Mem162[0x000000000061A188:word32] (retsize: 4; depth: 4)
		uses: C_172,cl_103,CZ_149,dwLoc04_36,eax_166,ecx_102,edx_126,esi_170,qwLoc04,r10_147,r8_123,rax_165,rbx_174,rcx_101,rdi_173,rdx_167,rsi_169,rsp_175,SCZO_148,SZO_171,Z_142
		defs: C_179,cl_191,CZ_193,eax_184,ecx_190,edx_187,esi_194,r10_192,r8_189,rax_182,rbx_180,rcx_185,rdi_183,rdx_186,rsi_177,rsp_176,SCZO_188,SZO_178,Z_181
	return rax_182
// DataOut: al ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdx:rdi rdi:<invalid> rsi:0x0000000000000000 -4(fp):rbx

l0000000000410D87:
	rdx = rax_144 + 0x0000000000000001 >>u 0x0000000000000001
	word64 rax_153 = rax_144 + rdx
	Mem156[rsi:word64] = rax_153
	rsi = rax_153
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D1F:
	rcx_101 = rcx_101 + (rcx_101 + 0x0000000000000001 >>u 0x0000000000000001)
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:0x00000000AAAAAAAA rcx:<invalid> rdx:(uint64) (rdx_rax % 0x00000000AAAAAAAA) rax:(uint64) (rdx_rax /u 0x00000000AAAAAAAA) -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D29:
	Mem116[rsi:word64] = rcx_101
	rsi = rcx_101 *s r8_100
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:<invalid> rcx:<invalid> rdx:<invalid> rax:<invalid> cl:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CE4:
	rsi = rsi *s rdx
// DataOut: ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:(uint64) (rdx_rax /u rdx) rdx:(uint64) (rdx_rax % 0x0000000000000000) -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CA6:
	word64 rsp_74
	*rspOut = fp + 0x0000000000000004
	return rax_63
// DataOut: al ebp fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx

fn0000000000410C90_exit:
// DataOut: al r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r8:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx



word64 fn0000000000410E00(word64 rsi, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: eax rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000410E00_entry:
// DataOut: fs r11 r12 r12d r13 r13b r14 r14d r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E00:
	word64 rsp_15
	word64 rax_16 = fn0000000000410C40(rsi, rsi, out rsp_15)
// DataOut: eax fs r11 r12 r12d r13 r13b r14 r14d r15 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004025C0:
	word64 rsp_27
	word64 rbp_28
	word64 rdi_29
	word64 rsi_30
	word64 rbx_31
	byte SCZO_32
	word64 rdx_33
	word64 rax_34
	call Mem0[0x000000000061A228:word32] (retsize: 4; depth: 4)
		uses: dwLoc04_4,dwLoc08_11,rax_16,rbp_24,rbx_22,rdi_26,rdx_19,rsi_20,rsp_25,SCZO_18
		defs: rax_34,rbp_28,rbx_31,rdi_29,rdx_33,rsi_30,rsp_27,SCZO_32
	return rax_34
// DataOut: eax fs r11 r12 r12d r13 r13b r14 r14d r15 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rdi:<invalid> rbx:<invalid> rdx:rsi rsi:<invalid> rax:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000410E00_exit:
// DataOut: eax rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rdi:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000410E30(word64 rax, word64 rdi, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: eax rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000410E30_entry:
// DataOut: fs r11 r12 r13 r13b r14 r14d r15 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E30:
	word64 rax_10 = DPB(rax, strlen(rdi), 0)
// DataOut: fs r11 r12 r13 r13b r14 r14d r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000410E40_thunk_fn0000000000410E00:
	word64 rsp_15
	word64 rbp_16
	word64 rsi_17
	return fn0000000000410E00(rax_10 + 0x0000000000000001, out rsp_15, out rbp_16, out rsi_17)
// DataOut: eax fs r11 r12 r13 r13b r14 r14d r15 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:DPB(rax, <invalid>, 0) rdi:rdi rsi:DPB(rax, <invalid>, 0) + 0x0000000000000001 -4(fp):rbx

fn0000000000410E30_exit:
// DataOut: eax rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rdx:<invalid> -4(fp):rbx



void fn0000000000410E50()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000410E50_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000410E50_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E50:
	dcgettext(0x0000000000000000, 0x0000000000416BCF, 0x0000000000000005)
	word64 rsp_16
	byte SCZO_17
	word32 edx_18
	word64 rdx_19
	word32 esi_20
	word64 rsi_21
	word32 edi_22
	word64 rdi_23
	byte SZO_24
	byte C_25
	word64 rax_26
	word64 rcx_27
	word32 eax_28
	call error (retsize: 8; depth: 16)
		uses: C_15,eax_13,rax_12,rcx_9,rdi_8,rdx_10,rsi_11,rsp_2,SZO_14
		defs: C_25,eax_28,edi_22,edx_18,esi_20,rax_26,rcx_27,rdi_23,rdx_19,rsi_21,rsp_16,SCZO_17,SZO_24
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000410E90(word32 edx, word64 rsi, word64 rdi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 r8d rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000410E90_entry:
// DataOut: edx r8 r8d rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0028(64)

l0000000000410E90:
	branch edx >u 0x00000024 l00000000004112B0
// DataOut: r14d r8 r8d rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l00000000004112B0:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416DC8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000410EAA:
	branch rsi != 0x0000000000000000 l0000000000410EC2
// DataOut: r12 r14d r15 r8d rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000410EBE_1:
// DataOut: r12 r14d r15 r8d rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:rsi r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000410EC2:
	word64 rsp_40
	word64 rdi_41
	word64 rsi_42
	word32 r14d_43
	word32 edx_44
	word64 r14_45
	word64 rbp_46
	word64 rbx_47
	byte SCZO_48
	byte CZ_49
	word64 rax_50
	word64 r15_51
	byte SZO_52
	byte C_53
	word64 r13_54
	word64 rcx_55
	word64 r12_56
	word64 r8_57
	byte Z_58
	word32 ebx_59
	word64 rdx_60
	word32 ecx_61
	word32 esi_62
	word32 edi_63
	word32 r9d_64
	word32 eax_67
	word32 ebp_68
	byte dl_69
	byte al_70
	byte S_72
	byte cl_73
	word64 r9_66
	byte bl_1005
	word32 r8d_396
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: bl_39,C_31,CZ_24,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_16,dwLoc14_18,dwLoc18_21,ebp_27,ebx_37,edx,r12_35,r13_33,r14_9,r14d_10,r15_28,r8,rax_25,rbp_26,rbx_38,rcx,rdi,rsi,rsp_22,SCZO_23,SZO_29,Z_30
		defs: al_70,bl_65,C_53,cl_73,CZ_49,dl_69,eax_67,ebp_68,ebx_59,ecx_61,edi_63,edx_44,esi_62,r12_56,r13_54,r14_45,r14d_43,r15_51,r8_57,r8d_71,r9_66,r9d_64,rax_50,rbp_46,rbx_47,rcx_55,rdi_41,rdx_60,rsi_42,rsp_40,S_72,SCZO_48,SZO_52,Z_58
	word64 rax_78 = rbp_46
// DataOut: bl r12 r14d r15 r8d rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:<invalid> r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410EDF:
	r9_66 = DPB(r9_66, (word32) bl_1005, 0) (alias)
	branch (Mem0[qwLoc28 + 0x0000000000000001 + r9_66 * 0x02:byte] & 0x20) != 0x00 l0000000000410ED8
// DataOut: bl r12 r14d r15 r8d rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410ED8:
	rax_78 = rax_78 + 0x0000000000000001
	bl_1005 = (byte) (word32) Mem0[rax_78:byte] (alias)
// DataOut: bl r12 r14d r15 r8d rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410EEB:
	branch bl_1005 != 0x2D l0000000000410F08
// DataOut: r12 r14d r15 r8d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F08:
	word64 rbp_239
	word32 ebp_288
	word32 edx_285
	word64 rax_197 = __errno_location()
	Mem199[rax_197:word32] = 0x00000000
	word64 rax_204 = DPB(rax_197, strtoul(rbp_46, r15_51, (uint64) r14d_43), 0)
	word64 r14_205 = Mem199[r15_51:word64]
	word64 rbx_207 = rax_204
	branch r14_205 == rbp_46 l0000000000410FE7
// DataOut: r12 r14 r15 r8d rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FE7:
	branch r12_56 == 0x0000000000000000 l0000000000410EF0
// DataOut: r12 r14 r15 r8d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FF0:
	word32 edx_974 = (word32) Mem199[rbp_46:byte]
	byte dl_977 = (byte) edx_974
	branch dl_977 == 0x00 l0000000000410EF0
// DataOut: dl edx r12 r14 r15 r8d
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FFC:
	rbp_239 = 0x0000000000000000
	ebp_288 = 0x00000000 (alias)
	rbx_207 = 0x0000000000000001
	edx_285 = (word32) (uint64) edx_974 (alias)
	branch strchr(r12_56, DPB(r15_51, (int32) dl_977, 0)) != 0x0000000000000000 l0000000000410F94
// DataOut: dl ebp edx r12 r14 r15 r8d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> edx:(word32) Mem0[rdi + 0x0000000000000000:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041101F:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:0x0000000000000000 r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:(uint64) (word32) Mem0[rdi + 0x0000000000000000:byte] r9d:(word32) bl rsi:<invalid> rdi:r8 rbx:0x0000000000000001 rcx:<invalid> edx:<invalid> esi:(int32) dl -56(fp):(word32) Mem0[rdi + 0x0000000000000000:byte] -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F3A:
	word32 eax_933 = (word32) (uint64) Mem199[rax_197:word32]
	branch eax_933 != 0x00000000 l0000000000410F68
// DataOut: eax r12 r14 r15 r8d rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F68:
	rbp_239 = 0x0000000000000001
	ebp_288 = 0x00000001 (alias)
	branch eax_933 != 0x00000022 l0000000000410EF0
// DataOut: ebp r12 r14 r15 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F76:
// DataOut: ebp r12 r14 r15 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F40:
	rbp_239 = 0x0000000000000000
	ebp_288 = 0x00000000 (alias)
// DataOut: ebp r12 r14 r15 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F42:
	branch r12_56 == 0x0000000000000000 l0000000000410F4F
// DataOut: ebp r12 r14 r15 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F47:
	word32 edx_944 = (word32) Mem199[r15_51:byte]
	byte dl_947 = (byte) edx_944
	branch dl_947 != 0x00 l0000000000410F78
// DataOut: dl ebp edx r12 r14 r15 r8d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) r14d r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F78:
	edx_285 = (word32) (uint64) edx_944 (alias)
	branch strchr(r12_56, DPB(r15_51, (int32) dl_947, 0)) == 0x0000000000000000 l0000000000411028
// DataOut: dl ebp edx r12 r14 r15 r8d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:rdi rbx:<invalid> rcx:<invalid> edx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F94:
	word64 rax_310
	word32 eax_307
	word32 ecx_304
	word64 rsi_292 = 0x0000000000000030
	word32 edx_301 = (word32) (uint64) edx_285
	branch strchr(r12_56, 0x0000000000000030) == 0x0000000000000000 l0000000000410FCB
// DataOut: dl ebp r14 r15 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FAE:
	byte al_903 = (byte) (word32) Mem199[0x0000000000000031:byte]
	branch al_903 == 0x44 l0000000000411262
// DataOut: al dl ebp r14 r15 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FBB:
	branch al_903 == 0x69 l000000000041124A
// DataOut: al dl ebp r14 r15 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041124A:
	word64 rcx_927 = (uint64) (Mem199[0x0000000000000032:byte] == 0x42)
	rax_310 = 0x0000000000000400
	eax_307 = 0x00000400 (alias)
	ecx_304 = rcx_927 + 0x0000000000000001 + rcx_927
// DataOut: dl eax ebp ecx r14 r15 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FC3:
	branch al_903 == 0x42 l0000000000411262
// DataOut: dl ebp r14 r15 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411262:
	ecx_304 = 0x00000002 (alias)
	rax_310 = 0x00000000000003E8
	eax_307 = 0x000003E8 (alias)
// DataOut: dl eax ebp ecx r14 r15 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FCB:
	ecx_304 = 0x00000001 (alias)
	rax_310 = 0x0000000000000400
	eax_307 = 0x00000400 (alias)
// DataOut: dl eax ebp ecx r14 r15 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FD5:
	word64 rdx_311 = (uint64) (edx_301 - 0x00000042)
	byte dl_314 = (byte) rdx_311
	branch dl_314 >u 0x35 l0000000000411028
// DataOut: dl eax ebp ecx r14 r15 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FDD:
	word32 edx_329
	word64 rdi_525
	switch (DPB(rdx_311, (word32) dl_314, 0)) { l0000000000411201 l0000000000411028 l0000000000411028 l00000000004111C2 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l000000000041112C l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110BA l000000000041107F l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411064 l0000000000411036 l0000000000411028 l0000000000411028 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411054 }
// DataOut: eax ebp ecx r14 r15 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411054:
	branch rbx_207 < 0x0000000000000000 l0000000000411283
// DataOut: ebp ecx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041105D:
	rbx_207 = rbx_207 * 0x0000000000000002
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411036:
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411064:
	branch rbx_207 >u rax_310 l0000000000411283
// DataOut: ebp ecx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411077:
	rbx_207 = rbx_207 << 0x0000000000000009
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041107F:
	word64 rdi_791 = (int64) eax_307
	word64 rax_798 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_791)
	word32 esi_802 = 0x00000007
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110A6:
	branch rax_798 >=u rbx_207 l0000000000411097
	branch rax_798 >=u rbx_207 l0000000000411097
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411097:
	rbx_207 = rbx_207 *s rdi_791
	r8d_396 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110AB:
	rbx_207 = 0xFFFFFFFFFFFFFFFF
	rax_798 = 0x0000000000000001
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041109E:
	rsi_292 = (uint64) (esi_802 - 0x00000001)
	edx_329 = (word32) (uint64) (edx_329 | r8d_396) (alias)
	esi_802 = (word32) rsi_292 (alias)
	branch esi_802 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:0x0000000000000000 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110BA:
	word64 rdi_721 = (int64) eax_307
	word64 rax_728 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_721)
	word32 esi_732 = 0x00000008
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110E5:
	branch rax_728 >=u rbx_207 l00000000004110D2
	branch rax_728 >=u rbx_207 l00000000004110D2
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110D2:
	rbx_207 = rbx_207 *s rdi_721
	r8d_396 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110EA:
	rbx_207 = 0xFFFFFFFFFFFFFFFF
	rax_728 = 0x0000000000000001
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110D9:
	rsi_292 = (uint64) (esi_732 - 0x00000001)
	edx_329 = (word32) (uint64) (edx_329 | r8d_396) (alias)
	esi_732 = (word32) rsi_292 (alias)
	branch esi_732 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:0x0000000000000000 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110F9:
	rsi_292 = (int64) eax_307
	word64 rax_660 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_292)
	word32 edi_664 = 0x00000004
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041110F:
	branch rax_660 <u rbx_207 l0000000000411271
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411271:
	rbx_207 = 0xFFFFFFFFFFFFFFFF
	rax_660 = 0x0000000000000001
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411118:
	rbx_207 = rbx_207 *s rsi_292
	r8d_396 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041111F:
	edx_329 = (word32) (uint64) (edx_329 | r8d_396) (alias)
	edi_664 = (word32) (uint64) (edi_664 - 0x00000001) (alias)
	branch edi_664 != 0x00000000 l000000000041110F
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:0x0000000000000000 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411127:
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:(uint64) (edi - 0x00000001) rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:0x0000000000000000 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041112C:
	rsi_292 = (int64) eax_307
	word64 rax_590 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_292)
	word32 edi_594 = 0x00000005
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411157:
	branch rax_590 >=u rbx_207 l0000000000411144
	branch rax_590 >=u rbx_207 l0000000000411144
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411144:
	rbx_207 = rbx_207 *s rsi_292
	r8d_396 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041115C:
	rbx_207 = 0xFFFFFFFFFFFFFFFF
	rax_590 = 0x0000000000000001
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041114B:
	edx_329 = (word32) (uint64) (edx_329 | r8d_396) (alias)
	edi_594 = (word32) (uint64) (edi_594 - 0x00000001) (alias)
	branch edi_594 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:0x0000000000000000 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041116B:
	rdi_525 = (int64) eax_307
	rsi_292 = 0xFFFFFFFFFFFFFFFF
	word64 rax_563 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_525)
	branch rbx_207 >u rax_563 l00000000004112A3
// DataOut: ebp ecx r14 r15 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411186:
	rbx_207 = rbx_207 *s rdi_525
	branch rax_563 <u rbx_207 l00000000004112A3
// DataOut: ebp ecx r14 r15 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004112A3:
	edx_329 = 0x00000001 (alias)
	rbx_207 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041119E:
	rdi_525 = (int64) eax_307
	rsi_292 = 0xFFFFFFFFFFFFFFFF
	branch rbx_207 <=u (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_525) l0000000000411193
// DataOut: ebp ecx r14 r15 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411193:
	rsi_292 = 0xFFFFFFFFFFFFFFFF
	rbx_207 = rbx_207 *s rdi_525
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111B5:
	rbx_207 = 0xFFFFFFFFFFFFFFFF
	edx_329 = 0x00000001 (alias)
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041121B:
	rsi_292 = (int64) eax_307
	word64 rax_455 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_292)
	word32 edi_459 = 0x00000003
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411231:
	branch rax_455 <u rbx_207 l0000000000411294
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411294:
	rbx_207 = 0xFFFFFFFFFFFFFFFF
	rax_455 = 0x0000000000000001
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411236:
	rbx_207 = rbx_207 *s rsi_292
	r8d_396 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041123D:
	edx_329 = (word32) (uint64) (edx_329 | r8d_396) (alias)
	edi_459 = (word32) (uint64) (edi_459 - 0x00000001) (alias)
	branch edi_459 != 0x00000000 l0000000000411231
// DataOut: ebp ecx edi edx r14 r15 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:0x0000000000000000 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411245:
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:(uint64) (edi - 0x00000001) rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:0x0000000000000000 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111C2:
	word64 rdi_378 = (int64) eax_307
	word64 rax_385 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_378)
	word32 esi_389 = 0x00000006
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111ED:
	branch rax_385 >=u rbx_207 l00000000004111DA
	branch rax_385 >=u rbx_207 l00000000004111DA
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111DA:
	rbx_207 = rbx_207 *s rdi_378
	r8d_396 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111F2:
	rbx_207 = 0xFFFFFFFFFFFFFFFF
	rax_385 = 0x0000000000000001
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:0x0000000000000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111E1:
	rsi_292 = (uint64) (esi_389 - 0x00000001)
	edx_329 = (word32) (uint64) (edx_329 | r8d_396) (alias)
	esi_389 = (word32) rsi_292 (alias)
	branch esi_389 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi r14 r15 r8d rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:0x0000000000000000 cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411028:
	Mem278[rbp_239:word64] = rbx_207
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:r8 rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411201:
	branch rbx_207 >u rax_310 l0000000000411283
// DataOut: ebp ecx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411283:
	rbx_207 = 0xFFFFFFFFFFFFFFFF
	edx_329 = 0x00000001 (alias)
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411210:
	rbx_207 = rbx_207 << 0x000000000000000A
	edx_329 = 0x00000000 (alias)
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:0x0000000000000030 rdi:r8 rbx:<invalid> rcx:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411038:
	Mem346[r15_51:word64] = r14_205 + (int64) ecx_304
	rbp_239 = (uint64) (ebp_288 | edx_329)
	word32 eax_344 = (word32) (uint64) ((word32) (uint64) (word32) rbp_239 | 0x00000002)
	branch Mem346[rsi_292:byte] == 0x00 l000000000041104F
// DataOut: eax ebp rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041104C_1:
	rbp_239 = DPB(rbp_239, eax_344, 0) (alias)
// DataOut: ebp rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041104F:
// DataOut: ebp rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F4F:
	Mem240[rbp_239:word64] = rbx_207
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> r8:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000410EF0:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410EF5:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rsi:<invalid> rdi:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000410E90_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl rbx:rbx rsi:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn00000000004112D0(word64 rcx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi rcx
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004112D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004112D0_entry:
// DataOut: edi esi rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004112D0:
	word64 rsi_129
	word64 r10_6 = (int64) esi
	word32 r10d_7 = (word32) r10_6
	branch edi >u 0x00000003 l000000000041133B
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000041133B:
	rsi_129 = 0x0000000000416DD1
	branch edi == 0x00000004 l00000000004112FA
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l0000000000411345:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] rsi:0x0000000000416DD1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l00000000004112EB:
	branch edi >=u 0x00000002 l0000000000411334
// DataOut: ebp edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l0000000000411334:
	rsi_129 = 0x0000000000416E10
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l00000000004112F0:
	rsi_129 = 0x0000000000416DEC
	branch (word32) (uint64) (edi - 0x00000001) != 0x00000000 l000000000041132F
// DataOut: ebp r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l00000000004112FA:
	branch r10d_7 < 0x00000000 l0000000000411347
// DataOut: ebp r10 rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] rsi:<invalid> rdi:(uint64) (edi - 0x00000001) -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l0000000000411347:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] rsi:<invalid> rdi:(uint64) (edi - 0x00000001) -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l00000000004112FF:
// DataOut: ebp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] rsi:<invalid> rdi:(uint64) (edi - 0x00000001) -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000041130C:
	dcgettext(0x0000000000000000, rsi_129, 0x0000000000000005)
	word64 rsp_83
	word64 rbp_84
	word64 r10_85
	word32 esi_86
	word64 r12_87
	word64 r8_88
	word64 rbx_89
	byte SCZO_90
	word32 edi_91
	word32 ebp_92
	byte CZ_93
	byte C_94
	word64 rdi_95
	word64 rsi_96
	byte Z_97
	word32 r10d_98
	byte SZO_99
	byte S_100
	word32 ebx_101
	word64 r13_102
	word64 rcx_103
	word32 edx_104
	word64 rdx_105
	word64 rax_106
	word64 r9_107
	word32 eax_108
	byte dl_109
	call error (retsize: 8; depth: 48)
		uses: bLoc27_64,bLoc28_63,C_79,CZ_21,dl,dwLoc04_4,dwLoc08_10,dwLoc0C_14,dwLoc10_17,eax_77,ebp_24,ebx,edi_57,edx,esi_59,r10_6,r10d_7,r12_12,r13_65,r8_72,r9_70,rax_76,rbp_23,rbx_66,rcx_73,rdi_75,rdx_71,rsi_74,rsp_18,S_61,SCZO_58,SZO_78,Z_54
		defs: C_94,CZ_93,dl_109,eax_108,ebp_92,ebx_101,edi_91,edx_104,esi_86,r10_85,r10d_98,r12_87,r13_102,r8_88,r9_107,rax_106,rbp_84,rbx_89,rcx_103,rdi_95,rdx_105,rsi_96,rsp_83,S_100,SCZO_90,SZO_99,Z_97
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:<invalid> r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] rsi:<invalid> rdi:(uint64) (edi - 0x00000001) rbx:<invalid> r13:<invalid> -40(fp):dl -39(fp):0x00 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000041132F:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:<invalid> r12:r8 rbp:(uint64) Mem0[0x000000000061A580:word32] rdi:<invalid> rsi:<invalid> rbx:<invalid> r13:<invalid> rdx:<invalid> rax:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> -40(fp):dl -39(fp):0x00 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word32 fn0000000000411360(word32 edx, word64 rsi, word64 rdi, word64 r8, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rdi rsi
// LiveOut: eax ebp r12 r8 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411360_entry:
// DataOut: edx r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0028(64)

l0000000000411360:
	branch edx >u 0x00000024 l0000000000411788
// DataOut: r14d r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000411788:
	__assert_fail(0x0000000000416BF0, 0x0000000000416BE0, 0x0000000000000060, 0x0000000000416FE8)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041137A:
	branch rsi != 0x0000000000000000 l0000000000411392
// DataOut: r12 r14d r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l000000000041138E_1:
// DataOut: r12 r14d r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:rsi r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000411392:
	word64 rsp_40
	word64 rdi_41
	word64 rsi_42
	word32 r14d_43
	word32 edx_44
	word64 r14_45
	word64 rbp_46
	word64 rbx_47
	byte SCZO_48
	byte CZ_49
	word64 rax_50
	word64 r15_51
	byte SZO_52
	byte C_53
	word64 r13_54
	word64 rcx_55
	word64 r12_56
	word64 r8_57
	byte Z_58
	word32 ebx_59
	word64 rdx_60
	word32 ecx_61
	word32 esi_62
	word32 edi_63
	word32 r9d_64
	word32 eax_67
	word32 ebp_68
	byte dl_69
	byte al_70
	word32 r8d_71
	byte S_72
	byte cl_73
	word64 r9_66
	byte bl_1077
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: bl_39,C_31,CZ_24,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_16,dwLoc14_18,dwLoc18_21,ebp_27,ebx_37,edx,r12_35,r13_33,r14_9,r14d_10,r15_28,r8,rax_25,rbp_26,rbx_38,rcx,rdi,rsi,rsp_22,SCZO_23,SZO_29,Z_30
		defs: al_70,bl_65,C_53,cl_73,CZ_49,dl_69,eax_67,ebp_68,ebx_59,ecx_61,edi_63,edx_44,esi_62,r12_56,r13_54,r14_45,r14d_43,r15_51,r8_57,r8d_71,r9_66,r9d_64,rax_50,rbp_46,rbx_47,rcx_55,rdi_41,rdx_60,rsi_42,rsp_40,S_72,SCZO_48,SZO_52,Z_58
	word64 rax_1070 = rbp_46
// DataOut: bl r12 r14d r15 r8 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:fp - 0x0000000000000028 rbp:rdi r15:<invalid> r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113AF:
	word32 r9d_91 = (word32) bl_1077
	r9_66 = DPB(r9_66, r9d_91, 0) (alias)
	branch (Mem0[qwLoc28 + 0x0000000000000001 + r9_66 * 0x02:byte] & 0x20) != 0x00 l00000000004113A8
// DataOut: bl r12 r14d r15 r8 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113A8:
	rax_1070 = rax_1070 + 0x0000000000000001
	bl_1077 = (byte) (word32) Mem0[rax_1070:byte] (alias)
// DataOut: bl r12 r14d r15 r8 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113BB:
	word32 eax_169
	branch bl_1077 != 0x2D l00000000004113D8
// DataOut: r12 r14d r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113D8:
	word32 ebp_1012
	word64 rbp_1011
	word32 edx_1032
	word64 rax_226 = __errno_location()
	Mem235[rax_226:word32] = 0x00000000
	word64 rsp_240
	word64 rdi_241
	word64 rsi_242
	word32 r14d_243
	word32 edx_244
	word64 r14_245
	word64 rbp_246
	word64 rbx_247
	byte SCZO_248
	byte CZ_249
	word64 rax_250
	word64 r15_251
	byte SZO_252
	byte C_253
	word64 r13_254
	word64 rcx_255
	word64 r12_256
	word64 r8_257
	byte Z_258
	word32 ebx_259
	word64 rdx_260
	word32 ecx_261
	word32 esi_262
	word32 edi_263
	word32 r9d_264
	byte bl_265
	word64 r9_266
	word32 eax_267
	word32 ebp_268
	byte dl_269
	byte al_270
	word32 r8d_271
	byte S_272
	byte cl_273
	call __strtoul_internal (retsize: 8; depth: 72)
		uses: al_228,bl_84,C_232,cl_73,CZ_49,dl_77,dwLoc04_4,dwLoc08_7,dwLoc0C_13,dwLoc10_16,dwLoc14_18,dwLoc18_21,dwLoc38,eax_227,ebp_68,ebx_83,ecx_230,edi_63,edx_76,esi_237,qwLoc08,qwLoc10,qwLoc18,qwLoc28,qwLoc38_239,r12_56,r13_54,r14_45,r14d_43,r15_51,r8_57,r8d_71,r9_92,r9d_91,rax_226,rbp_46,rbx_90,rcx_229,rdi_238,rdx_233,rsi_236,rsp_40,S_72,SCZO_96,SZO_231,Z_97
		defs: al_270,bl_265,C_253,cl_273,CZ_249,dl_269,eax_267,ebp_268,ebx_259,ecx_261,edi_263,edx_244,esi_262,r12_256,r13_254,r14_245,r14d_243,r15_251,r8_257,r8d_271,r9_266,r9d_264,rax_250,rbp_246,rbx_247,rcx_255,rdi_241,rdx_260,rsi_242,rsp_240,S_272,SCZO_248,SZO_252,Z_258
	word64 r14_274 = Mem235[r15_251:word64]
	word64 rbx_1059 = rax_250
	word64 r8_279 = rax_226
	*r8Out = r8_279
	word32 r8d_280 = (word32) rax_226
	branch r14_274 == rbp_246 l00000000004114BF
// DataOut: r12 r14 r15 r8 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:(uint64) edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114BF:
	branch r12_256 == 0x0000000000000000 l00000000004113C0
// DataOut: r12 r14 r15 r8 r8d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114C8:
	word32 edx_1046 = (word32) Mem235[rbp_246:byte]
	byte dl_1049 = (byte) edx_1046
	branch dl_1049 == 0x00 l00000000004113C0
// DataOut: dl edx r12 r14 r15 r8 r8d
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114D4:
	rbp_1011 = 0x0000000000000000
	ebp_1012 = 0x00000000 (alias)
	rbx_1059 = 0x0000000000000001
	edx_1032 = (word32) (uint64) edx_1046 (alias)
	branch strchr(r12_256, DPB(rsi_242, (int32) dl_1049, 0)) != 0x0000000000000000 l000000000041146C
// DataOut: dl ebp edx r12 r14 r15 r8 r8d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:(word32) Mem0[rdi + 0x0000000000000000:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114F7:
// DataOut: r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:0x0000000000000000 r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:(uint64) (word32) Mem0[rdi + 0x0000000000000000:byte] r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:0x0000000000000001 r8:<invalid> edx:<invalid> esi:(int32) dl -56(fp):(word32) Mem0[rdi + 0x0000000000000000:byte] -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041140C:
	word32 eax_1005 = (word32) (uint64) Mem235[rax_250:word32]
	branch eax_1005 != 0x00000000 l0000000000411440
// DataOut: eax r12 r14 r15 r8 r8d rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411440:
	rbp_1011 = 0x0000000000000001
	ebp_1012 = 0x00000001 (alias)
	branch eax_1005 != 0x00000022 l00000000004113C0
// DataOut: ebp r12 r14 r15 r8 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041144E:
// DataOut: ebp r12 r14 r15 r8 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:0x0000000000000001 r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411413:
	rbp_1011 = 0x0000000000000000
	ebp_1012 = 0x00000000 (alias)
// DataOut: ebp r12 r14 r15 r8 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411415:
	branch r12_256 == 0x0000000000000000 l0000000000411422
// DataOut: ebp r12 r14 r15 r8 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041141A:
	word32 edx_1016 = (word32) Mem235[rsi_242:byte]
	byte dl_1019 = (byte) edx_1016
	branch dl_1019 != 0x00 l0000000000411450
// DataOut: dl ebp edx r12 r14 r15 r8 r8d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411450:
	edx_1032 = (word32) (uint64) edx_1016 (alias)
	branch strchr(r12_256, DPB(rsi_242, (int32) dl_1019, 0)) == 0x0000000000000000 l0000000000411500
// DataOut: dl ebp edx r12 r14 r15 r8 r8d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041146C:
	word32 eax_378
	word64 rax_377
	word32 ecx_1000
	word64 rsi_361 = 0x0000000000000030
	word32 edx_370 = (word32) (uint64) edx_1032
	branch strchr(r12_256, 0x0000000000000030) == 0x0000000000000000 l00000000004114A3
// DataOut: dl ebp r12 r14 r15 r8 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411486:
	byte al_975 = (byte) (word32) Mem235[0x0000000000000031:byte]
	branch al_975 == 0x44 l000000000041173A
// DataOut: al dl ebp r12 r14 r15 r8 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411493:
	branch al_975 == 0x69 l0000000000411722
// DataOut: al dl ebp r12 r14 r15 r8 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411722:
	word64 rcx_999 = (uint64) (Mem235[0x0000000000000032:byte] == 0x42)
	rax_377 = 0x0000000000000400
	eax_378 = 0x00000400 (alias)
	ecx_1000 = rcx_999 + 0x0000000000000001 + rcx_999
// DataOut: dl eax ebp ecx r12 r14 r15 r8 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041149B:
	branch al_975 == 0x42 l000000000041173A
// DataOut: dl ebp r12 r14 r15 r8 r8d rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041173A:
	ecx_1000 = 0x00000002 (alias)
	rax_377 = 0x00000000000003E8
	eax_378 = 0x000003E8 (alias)
// DataOut: dl eax ebp ecx r12 r14 r15 r8 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114A3:
	ecx_1000 = 0x00000001 (alias)
	rax_377 = 0x0000000000000400
	eax_378 = 0x00000400 (alias)
// DataOut: dl eax ebp ecx r12 r14 r15 r8 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:(word32) Mem0[0x0000000000000030 + 0x0000000000000001:byte] -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114AD:
	word64 rdx_380 = (uint64) (edx_370 - 0x00000042)
	byte dl_383 = (byte) rdx_380
	branch dl_383 >u 0x35 l0000000000411500
// DataOut: dl eax ebp ecx r12 r14 r15 r8 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:(uint64) Mem0[fp - 0x0000000000000040 + 0x0000000000000008:word32] r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114B5:
	word32 edx_398
	word64 rdi_596
	switch (DPB(rdx_380, (word32) dl_383, 0)) { l00000000004116D9 l0000000000411500 l0000000000411500 l000000000041169A l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411604 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411592 l0000000000411557 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l000000000041153C l000000000041150E l0000000000411500 l0000000000411500 l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l000000000041152C }
// DataOut: eax ebp ecx r12 r14 r15 r8 r8d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041152C:
	branch rbx_1059 < 0x0000000000000000 l000000000041175B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411535:
	rbx_1059 = rbx_1059 * 0x0000000000000002
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041150E:
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041153C:
	word64 r8_932 = 0x00000000FFFFFFFF
	*r8Out = r8_932
	branch rbx_1059 >u rax_377 l000000000041175B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041154F:
	rbx_1059 = rbx_1059 << 0x0000000000000009
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:0x00000000FFFFFFFF edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411557:
	word64 rdi_862 = (int64) eax_378
	word64 rax_869 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_862)
	word32 esi_873 = 0x00000007
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041157E:
	branch rax_869 >=u rbx_1059 l000000000041156F
	branch rax_869 >=u rbx_1059 l000000000041156F
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041156F:
	rbx_1059 = rbx_1059 *s rdi_862
	word64 r8_928
	*r8Out = 0x0000000000000000
	r8d_280 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411583:
	rbx_1059 = 0xFFFFFFFFFFFFFFFF
	rax_869 = 0x0000000000000001
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411576:
	rsi_361 = (uint64) (esi_873 - 0x00000001)
	edx_398 = (word32) (uint64) (edx_398 | r8d_280) (alias)
	esi_873 = (word32) rsi_361 (alias)
	branch esi_873 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411592:
	word64 rdi_792 = (int64) eax_378
	word64 rax_799 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_792)
	word32 esi_803 = 0x00000008
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115BD:
	branch rax_799 >=u rbx_1059 l00000000004115AA
	branch rax_799 >=u rbx_1059 l00000000004115AA
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115AA:
	rbx_1059 = rbx_1059 *s rdi_792
	word64 r8_858
	*r8Out = 0x0000000000000000
	r8d_280 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115C2:
	rbx_1059 = 0xFFFFFFFFFFFFFFFF
	rax_799 = 0x0000000000000001
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115B1:
	rsi_361 = (uint64) (esi_803 - 0x00000001)
	edx_398 = (word32) (uint64) (edx_398 | r8d_280) (alias)
	esi_803 = (word32) rsi_361 (alias)
	branch esi_803 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115D1:
	rsi_361 = (int64) eax_378
	word64 rax_731 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_361)
	word32 edi_735 = 0x00000004
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115E7:
	branch rax_731 <u rbx_1059 l0000000000411749
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411749:
	rbx_1059 = 0xFFFFFFFFFFFFFFFF
	rax_731 = 0x0000000000000001
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115F0:
	rbx_1059 = rbx_1059 *s rsi_361
	word64 r8_781
	*r8Out = 0x0000000000000000
	r8d_280 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115F7:
	edx_398 = (word32) (uint64) (edx_398 | r8d_280) (alias)
	edi_735 = (word32) (uint64) (edi_735 - 0x00000001) (alias)
	branch edi_735 != 0x00000000 l00000000004115E7
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115FF:
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:(uint64) (edi - 0x00000001) rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411604:
	rsi_361 = (int64) eax_378
	word64 rax_661 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_361)
	word32 edi_665 = 0x00000005
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041162F:
	branch rax_661 >=u rbx_1059 l000000000041161C
	branch rax_661 >=u rbx_1059 l000000000041161C
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041161C:
	rbx_1059 = rbx_1059 *s rsi_361
	word64 r8_720
	*r8Out = 0x0000000000000000
	r8d_280 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411634:
	rbx_1059 = 0xFFFFFFFFFFFFFFFF
	rax_661 = 0x0000000000000001
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411623:
	edx_398 = (word32) (uint64) (edx_398 | r8d_280) (alias)
	edi_665 = (word32) (uint64) (edi_665 - 0x00000001) (alias)
	branch edi_665 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411643:
	rdi_596 = (int64) eax_378
	rsi_361 = 0xFFFFFFFFFFFFFFFF
	word64 rax_634 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_596)
	branch rbx_1059 >u rax_634 l000000000041177B
// DataOut: ebp ecx r12 r14 r15 r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041165E:
	rbx_1059 = rbx_1059 *s rdi_596
	branch rax_634 <u rbx_1059 l000000000041177B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041177B:
	edx_398 = 0x00000001 (alias)
	rbx_1059 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411676:
	rdi_596 = (int64) eax_378
	rsi_361 = 0xFFFFFFFFFFFFFFFF
	branch rbx_1059 <=u (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_596) l000000000041166B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041166B:
	rsi_361 = 0xFFFFFFFFFFFFFFFF
	rbx_1059 = rbx_1059 *s rdi_596
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041168D:
	rbx_1059 = 0xFFFFFFFFFFFFFFFF
	edx_398 = 0x00000001 (alias)
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:0xFFFFFFFF eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116F3:
	rsi_361 = (int64) eax_378
	word64 rax_526 = (uint64) (0xFFFFFFFFFFFFFFFF /u rsi_361)
	word32 edi_530 = 0x00000003
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411709:
	branch rax_526 <u rbx_1059 l000000000041176C
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041176C:
	rbx_1059 = 0xFFFFFFFFFFFFFFFF
	rax_526 = 0x0000000000000001
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041170E:
	rbx_1059 = rbx_1059 *s rsi_361
	word64 r8_576
	*r8Out = 0x0000000000000000
	r8d_280 = 0x00000000 (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411715:
	edx_398 = (word32) (uint64) (edx_398 | r8d_280) (alias)
	edi_530 = (word32) (uint64) (edi_530 - 0x00000001) (alias)
	branch edi_530 != 0x00000000 l0000000000411709
// DataOut: ebp ecx edi edx r12 r14 r15 r8 r8d rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041171D:
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:(uint64) (edi - 0x00000001) rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041169A:
	word64 rdi_449 = (int64) eax_378
	word64 rax_456 = (uint64) (0xFFFFFFFFFFFFFFFF /u rdi_449)
	word32 esi_460 = 0x00000006
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116C5:
	branch rax_456 >=u rbx_1059 l00000000004116B2
	branch rax_456 >=u rbx_1059 l00000000004116B2
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116B2:
	rbx_1059 = rbx_1059 *s rdi_449
	word64 r8_515
	*r8Out = 0x0000000000000000
	r8d_280 = 0x00000000 (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116CA:
	rbx_1059 = 0xFFFFFFFFFFFFFFFF
	rax_456 = 0x0000000000000001
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116B9:
	rsi_361 = (uint64) (esi_460 - 0x00000001)
	edx_398 = (word32) (uint64) (edx_398 | r8d_280) (alias)
	esi_460 = (word32) rsi_361 (alias)
	branch esi_460 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi r12 r14 r15 r8 r8d rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411500:
	Mem345[rbp_1011:word64] = rbx_1059
	eax_169 = (word32) (uint64) ((word32) (uint64) ebp_1012 | 0x00000002) (alias)
// DataOut: eax r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:r8 rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116D9:
	word64 r8_436
	*r8Out = 0x00000000FFFFFFFF
	branch rbx_1059 >u rax_377 l000000000041175B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041175B:
	rbx_1059 = 0xFFFFFFFFFFFFFFFF
	edx_398 = 0x00000001 (alias)
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:<invalid> edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116E8:
	rbx_1059 = rbx_1059 << 0x000000000000000A
	edx_398 = 0x00000000 (alias)
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:0x0000000000000030 rdi:r8 rbx:<invalid> r8:0x00000000FFFFFFFF edx:(word32) dl esi:0x00000030 eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411510:
	rbp_1011 = (uint64) (ebp_1012 | edx_398)
	Mem415[r15_251:word64] = r14_274 + (int64) ecx_1000
	ebp_1012 = (word32) rbp_1011 (alias)
	word32 eax_413 = (word32) (uint64) ((word32) (uint64) ebp_1012 | 0x00000002)
	branch Mem415[rsi_361:byte] == 0x00 l0000000000411527
// DataOut: eax ebp r12 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411524_1:
	ebp_1012 = eax_413
	rbp_1011 = DPB(rbp_1011, eax_413, 0) (alias)
// DataOut: ebp r12 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411527:
// DataOut: ebp r12 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411422:
	Mem305[rbp_1011:word64] = rbx_1059
	word64 rbp_318
	*rbpOut = Mem305[qwLoc08 + 0x0000000000000008:word64]
	return (word32) (uint64) ebp_1012
// DataOut: eax ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> ebp:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004113C0:
	eax_169 = 0x00000004 (alias)
// DataOut: eax r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113C5:
	word64 rbp_182
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	return eax_169
// DataOut: eax ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000411360_exit:
// DataOut: eax ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 r14:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> rcx:<invalid> r8:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word32 fn00000000004117B0(word64 rsi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn00000000004117B0_entry:
// DataOut: edi fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004117B0:
	word32 eax_16
	branch edi == 0x00000000 l0000000000411800
// DataOut: edi fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411800:
	Mem77[__errno_location():word32] = 0x0000005F
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax fs r11 r12 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008
// LocalsOut: fp(64)

l00000000004117B8:
	word64 rax_23 = (uint64) edi
	byte Z_21 = cond(edi - 0x0000000A)
	eax_16 = (word32) rax_23 (alias)
	branch edi == 0x0000000A l00000000004117C8
// DataOut: eax fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008
// LocalsOut: fp(64)

l00000000004117C8:
	word64 rdx_30 = Mem0[rsi:word64]
	word64 rdi_31 = 0x00000000004137B1
	word64 rcx_33 = 0x000000000000000A
	word64 rsi_34 = rdx_30
// DataOut: eax fs r11 r12 r14 r15 rbp rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:(uint64) edi
// LocalsOut: fp(64)

l00000000004117D8:
	branch rcx_33 == 0x0000000000000000 l00000000004117DA
// DataOut: eax fs r11 r12 r14 r15 rbp rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>
// LocalsOut: fp(64)

l00000000004117D8_1:
	Z_21 = cond(Mem0[rsi_81:byte] - Mem0[rdi_80:byte]) (alias)
	rsi_34 = rsi_81 + 0x0000000000000001
	rdi_31 = rdi_80 + 0x0000000000000001
	rcx_33 = rcx_33 - 0x0000000000000001
	word64 rdi_80 = rdi_31
	word64 rsi_81 = rsi_34
	branch Mem0[rsi_81:byte] != Mem0[rdi_80:byte] l00000000004117D8
// DataOut: eax fs r11 r12 r14 r15 rbp rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>
// LocalsOut: fp(64)

l00000000004117DA:
	branch Z_21 l00000000004117BF
// DataOut: eax fs r11 r12 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>
// LocalsOut: fp(64)

l00000000004117DC:
	word64 rsp_52
	byte SCZO_53
	word32 edi_54
	byte SZO_55
	byte C_56
	byte Z_57
	word64 rax_58
	word64 rsi_59
	word64 rdx_60
	word64 rdi_61
	word64 rcx_62
	word32 eax_63
	call freecon (retsize: 8; depth: 16)
		uses: C_47,eax_24,edi_49,rax_23,rcx_43,rdi_51,rdx_30,rsi_45,rsp_2,SCZO_50,SZO_48,Z_46
		defs: C_56,eax_63,edi_54,rax_58,rcx_62,rdi_61,rdx_60,rsi_59,rsp_52,SCZO_53,SZO_55,Z_57
	Mem65[__errno_location():word32] = 0x0000003D
	eax_16 = 0xFFFFFFFF (alias)
// DataOut: eax fs r11 r12 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:(uint64) edi rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>
// LocalsOut: fp(64)

l00000000004117BF:
	return eax_16
// DataOut: eax fs r11 r12 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>

fn00000000004117B0_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid>



word32 fn0000000000411820(word32 eax, word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000411820_entry:
// DataOut: eax fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411820:
	word64 rsp_9
	word64 rbx_10
	word64 rsi_11
	word32 edi_12
	word32 eax_13
	word64 rdi_14
	call getfilecon (retsize: 8; depth: 12)
		uses: dwLoc04_4,qwLoc04_6,rbx_8,rsi,rsp_2
		defs: eax_13,edi_12,rbx_10,rdi_14,rsi_11,rsp_9
	word32 edi_17 = (word32) (uint64) eax_13
// DataOut: edi fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041182F_thunk_fn00000000004117B0:
	return fn00000000004117B0(rbx_10, edi_17)
// DataOut: eax fs r11 r12 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:rsi rdi:(uint64) eax -4(fp):rbx

fn0000000000411820_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -4(fp):rbx



word32 fn0000000000411840(word32 eax, word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000411840_entry:
// DataOut: eax fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411840:
	word64 rsp_9
	word64 rbx_10
	word64 rsi_11
	word32 edi_12
	word32 eax_13
	word64 rdi_14
	byte SCZO_15
	byte SZO_16
	byte C_17
	byte Z_18
	word64 rax_19
	word64 rdx_20
	word32 ecx_21
	word64 rcx_22
	call lgetfilecon (retsize: 8; depth: 12)
		uses: dwLoc04_4,qwLoc04_6,rbx_8,rsi,rsp_2
		defs: C_17,eax_13,ecx_21,edi_12,rax_19,rbx_10,rcx_22,rdi_14,rdx_20,rsi_11,rsp_9,SCZO_15,SZO_16,Z_18
	word32 edi_25 = (word32) (uint64) eax_13
// DataOut: edi fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041184E_thunk_fn00000000004117B0:
	return fn00000000004117B0(rbx_10, edi_25)
// DataOut: eax fs r11 r12 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:rsi rdi:(uint64) eax -4(fp):rbx

fn0000000000411840_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> -4(fp):rbx



void fn0000000000411880(word64 rax, word64 rdi, word64 r8, word64 r13)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r13 r8 rax rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000411880_entry:
// DataOut: eax r13 r8 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411880:
	word64 rsp_13
	word64 rbp_14
	word64 rdi_15
	word64 rbx_16
	word32 ebx_17
	word64 r12_18
	word64 rax_19
	byte SZO_20
	byte C_21
	word32 eax_22
	byte dl_23
	byte Z_24
	byte SCZO_25
	byte bl_26
	word64 r8_27
	word64 r13_28
	word64 rsi_29
	call __fpending (retsize: 8; depth: 20)
		uses: dwLoc04_4,dwLoc08_7,dwLoc0C_12,rbp_9,rbx,rdi,rsp_10
		defs: bl_26,C_21,dl_23,eax_22,ebx_17,r12_18,r13_28,r8_27,rax_19,rbp_14,rbx_16,rdi_15,rsi_29,rsp_13,SCZO_25,SZO_20,Z_24
	word32 ebx_35
	word64 rsp_36
	word64 rbp_37
	word64 rsi_38
	word64 r12_39
	word32 eax_41 = (word32) fn0000000000411D30(rax_19, rbp_14, r8_27, r13_28, out ebx_35, out rsp_36, out rbp_37, out rsi_38, out r12_39)
	branch (word32) (uint64) (ebx_35 & 0x00000020) != 0x00000000 l00000000004118C0
// DataOut: dl ebx r12 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004118C0:
	branch eax_41 != 0x00000000 != 0x00 l00000000004118B4
// DataOut: ebx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:(uint64) (ebx & 0x00000020) rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118C9:
	Mem106[__errno_location():word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118A6:
	branch eax_41 != 0x00000000 == 0x00 l00000000004118B4
// DataOut: ebx r12 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:(uint64) (ebx & 0x00000020) rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118AA:
	branch r12_39 == 0x0000000000000000 l00000000004118E0
// DataOut: ebx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:(uint64) (ebx & 0x00000020) rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118E0:
	__errno_location()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:0x00000000FFFFFFFF rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118B4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000411880_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> r12:<invalid> dl:Test(NE,Z) rax:(uint64) ebx bl:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn0000000000411900(word64 rsi, word64 r8, word64 r12, word64 r13, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r12 r13 r15 r8 rsi
// LiveOut: r12 r12b r12d r13 r15 r15b r8 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411900_entry:
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411900:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	rdi = 0x000000000000000E
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v7 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rsp = fp - 0x00000000000000C0
	rax = Mem0[fs:0x00000028:word64]
	qwLoc28 = rax
	rax = 0x0000000000000000
	SZO = cond(eax)
	C = false
	call nl_langinfo (retsize: 8; depth: 200)
	r14 = Mem0[0x000000000061B358:word64]
	SZO = cond(0x0000000000000000)
	C = false
	rbx = 0x0000000000000000
	rax = 0x0000000000416919
	branch Test(NE,Z) l0000000000411944
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411940_1:
	rbx = 0x0000000000416919
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411944:
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000041196A
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411949:
// DataOut: fs r12 r12b r12d r14 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119D4:
	rdi = 0x0000000000417002
	rax = getenv(0x0000000000417002)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l00000000004119EF
// DataOut: fs r12 r12b r12d r14 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:0x0000000000416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119E6:
	SCZO = cond(Mem0[rax:byte] - 0x00)
	branch Test(NE,Z) l0000000000411C52
// DataOut: fs r12 r12b r12d r14 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C52:
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	SZO = cond(rax & rax)
	C = false
	r12 = rax
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r12 r12b r12d r14 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C62:
	rax = rax - 0x0000000000000001
// DataOut: fs r12 r12b r12d r14 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119EF:
	rax = 0x0000000000000007
	rsp = 0x0000000000000008
	rdi = 0x0000000000416FF3
// DataOut: fs r12 r12b r12d r14 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 rdi:0x0000000000417002 rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A00:
	SCZO = cond(Mem0[r15 + rax:byte] - 0x2F)
	rbp = 0x0000000000000001
	Mem0[rsp + 0x0000000000000008:word32] = 0x00000001
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r12 r12b r12d r14 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C42:
	r13 = 0x0000000000000000
	SZO = cond(r13d)
	C = false
	Mem0[rsp + 0x0000000000000008:word32] = 0x00000000
// DataOut: fs r12 r12b r12d r14 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> r12:<invalid> rbp:0x0000000000000001 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A19:
	r13 = 0x0000000000000000 + r12
	rdi = 0x000000000000000F
	rax = malloc(0x000000000000000F)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l0000000000411CF2
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:0x0000000000000001 r12:<invalid> r13:0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CF2:
	rsi = 0x0000000000416919
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:0x000000000000000F rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A31:
	rdx = r12
	rsi = r15
	rdi = rax
	rax = memcpy(rdi, rsi, rdx)
	rdx = (uint64) Mem0[rsp + 0x0000000000000008:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000411A4D
// DataOut: fs r13 r14 r15 r15b rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:0x000000000000000F rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A47:
	Mem0[rbp + 0x0000000000000000:byte] = 0x2F
// DataOut: fs r13 r14 r15 r15b rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A4D:
	r13 = r13 + rbp
	r8 = 0x0000000072616863
	rsi = 0x0000000000020000
	Mem0[rbp + 0x0000000000000000:word64] = rax
	rax = 0x0000000000000073
	Mem0[rbp + 0x0000000000000008:word32] = 0x61696C61
	Mem0[rbp + 0x000000000000000C:word16] = ax
	rdi = rbp
	rax = 0x0000000000000000
	rax = 0x0000000000000000
	SZO = cond(eax & eax)
	C = false
	r12 = (uint64) eax
	branch Test(SG,S) l0000000000411C28
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A8A:
	rsi = 0x0000000000413A21
	rdi = (uint64) eax
	rax = fdopen(rdi, 0x0000000000413A21)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l0000000000411C20
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:(uint64) eax r13:<invalid> rdx:<invalid> rsi:0x0000000000020000 r8:0x0000000072616863 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C20:
	rdi = (uint64) r12d
	rax = DPB(rax, close(rdi), 0)
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:(uint64) eax rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:(uint64) eax r13:<invalid> rdx:<invalid> rsi:0x0000000000413A21 r8:0x0000000072616863 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AA2:
	r12 = rsp + 0x0000000000000020
	Mem0[rsp + 0x0000000000000008:word64] = 0x0000000000000000
// DataOut: fs r12 r13 r14 r15 r15b r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:(uint64) eax rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:(uint64) eax r13:<invalid> rdx:<invalid> rsi:0x0000000000413A21 r8:0x0000000072616863 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AB0:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411C01
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ABE:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	edi = (word32) Mem0[rax:byte]
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AC9:
	SCZO = cond(edi - 0x00000020)
	branch Test(EQ,Z) l0000000000411AB0
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ACE:
	eax = rdi - 0x0000000000000009
	SCZO = cond(eax - 0x00000001)
	branch Test(ULE,CZ) l0000000000411AB0
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AD6:
	SCZO = cond(edi - 0x00000023)
	branch Test(EQ,Z) l0000000000411C75
// DataOut: fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C75:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411D1D
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411D1D
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411D1D:
	rdi = r15
	call __uflow (retsize: 8; depth: 8)
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C83:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	eax = (word32) Mem0[rax:byte]
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	eax = (word32) Mem0[rax:byte]
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C8E:
	SCZO = cond(eax - 0x0000000A)
	branch Test(NE,Z) l0000000000411C70
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C70:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(EQ,Z) l0000000000411C93
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C93:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(NE,Z) l0000000000411AB0
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ADF:
	rsi = r15
	rax = DPB(rax, ungetc(rdi, rsi), 0)
	rcx = rsp + 0x0000000000000060
	rax = 0x0000000000000000
	SZO = cond(0x00000000)
	C = false
	rdx = r12
	rsi = 0x0000000000417012
	rdi = r15
	call fscanf (retsize: 8; depth: 8)
	SCZO = cond(0xFFFFFFFF)
	branch Test(LE,SZO) l0000000000411C9C
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B07:
	rdx = r12
// DataOut: fs r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B0A:
	rcx = (uint64) Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B0A
// DataOut: al eax fs r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B21:
	rcx = (uint64) eax
	r10 = rsp + 0x0000000000000060
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B33
// DataOut: al cl fs r10 r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:(uint64) ~ecx r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B30_1:
	eax = ecx
// DataOut: al fs r10 r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:(uint64) (ecx >>u 0x00000010) r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B33:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B3B
// DataOut: al fs r10 r12 r14 r15 r15b r8 rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:(uint64) (ecx >>u 0x00000010) r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B37_2:
	rdx = rcx
// DataOut: al fs r10 r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B3B:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = rdx - r12
	SCZO = cond(rdx)
// DataOut: fs r10 r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B44:
	rcx = (uint64) Mem0[rdx:word32]
	r10 = r10 + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	rcx = (uint64) ~ecx
	rax = (uint64) (eax & ecx)
	rax = (uint64) (eax & 0x80808080)
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B44
// DataOut: al eax fs r10 r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B5C:
	rcx = (uint64) eax
	rcx = (uint64) (ecx >>u 0x00000010)
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B69
// DataOut: al cl fs r10 r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:(uint64) ~ecx r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B66_3:
	eax = ecx
// DataOut: al fs r10 r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:(uint64) (ecx >>u 0x00000010) r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B69:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B71
// DataOut: al fs r10 r12 r14 r15 r15b r8 rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:(uint64) (ecx >>u 0x00000010) r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B6D_4:
	r10 = rcx
// DataOut: al fs r10 r12 r14 r15 r15b r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B71:
	al = al + al
	SCZO = cond(al)
	rax = rsp + 0x0000000000000060
	r10 = r10 - 0x03 - C
	r10 = r10 - rax
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - 0x0000000000000000)
	rax = r10 + rdx
	branch Test(NE,Z) l0000000000411CBC
// DataOut: fs r10 r12 r14 r15 r15b r8 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CBC:
	rax = rax + Mem0[rsp + 0x0000000000000008:word64]
	SCZO = cond(rax)
	rdi = r14
	Mem0[rsp + 0x0000000000000018:word64] = r10
	Mem0[rsp + 0x0000000000000010:word64] = rdx
	rcx = rax + 0x0000000000000002
	rsi = rax + 0x0000000000000003
	Mem0[rsp + 0x0000000000000008:word64] = rcx
	rax = realloc(rdi, rsi)
	r10 = Mem0[rsp + 0x0000000000000018:word64]
	r13 = rax
	rdx = Mem0[rsp + 0x0000000000000010:word64]
// DataOut: eax fs r10 r12 r13 r14 r15 r15b r8 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B8F:
	rcx = rax + 0x0000000000000002
	rdi = rax + 0x0000000000000003
	Mem0[rsp + 0x0000000000000018:word64] = rdx
	Mem0[rsp + 0x0000000000000010:word64] = r10
	Mem0[rsp + 0x0000000000000008:word64] = rcx
	rax = malloc(rdi)
	r10 = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000018:word64]
	r13 = rax
// DataOut: eax fs r10 r12 r13 r14 r15 r15b r8 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411BB8:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000411D02
// DataOut: eax fs r10 r12 r13 r14 r15 r15b r8 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411BC1:
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	rdi = 0xFFFFFFFFFFFFFFFE
	rsi = r12
	rdi = 0xFFFFFFFFFFFFFFFE - rdx
	r14 = r14 - r10
	rdi = rdi + r14
	rdi = rdi + r13
	rax = strcpy(rdi, rsi)
	rdi = r13 - 0x0000000000000001 + r14
	rsi = rsp + 0x0000000000000060
	r14 = r13
	rax = strcpy(rdi, rsi)
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(ULT,C) l0000000000411ABE
// DataOut: eax fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C01:
	rdi = r15
	call __uflow (retsize: 8; depth: 8)
	SCZO = cond(eax - 0xFFFFFFFF)
	rdi = (uint64) eax
	branch Test(EQ,Z) l0000000000411C9C
// DataOut: eax edi fs r12 r13 r14 r15 r15b r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C9C:
	rdi = r15
	rax = fn0000000000411D30(rax, rdi, r8, r13, out ebx, out rsp, out rbp, out rsi, out r12)
	rax = Mem0[rsp + 0x0000000000000008:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411C28
	rdi = r15
	rax = fn0000000000411D30(rax, rdi, r8, r13, out ebx, out rsp, out rbp, out rsi, out r12)
	rax = Mem0[rsp + 0x0000000000000008:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411C28
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C28:
	rsi = 0x0000000000416919
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CB2:
	Mem0[r14 + rax:byte] = 0x00
	Mem0[r14 + rax:byte] = 0x00
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C2E:
	rdi = rbp
	free(rdi)
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> rbp:<invalid> r12:<invalid> rdx:<invalid> r15:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C36:
	Mem0[0x000000000061B358:word64] = r14
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rsi:<invalid> ebp:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041196A:
	ebp = (word32) Mem0[rsi:byte]
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l000000000041199C
// DataOut: bpl eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411973:
	rsi = r14
	rdi = rbx
	rax = DPB(rax, strcmp(rdi, rsi), 0)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041198F
// DataOut: bpl fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411982:
	SCZO = cond(bpl - 0x2A)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411988:
	SCZO = cond(Mem0[rsi + 0x0000000000000001:byte] - 0x00)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411950:
	rdi = r14
	rax = DPB(rax, strlen(rdi), 0)
	rbp = r14 + 0x0000000000000001 + rax
	rdi = rbp
	rax = DPB(rax, strlen(rdi), 0)
	r14 = rbp + 0x0000000000000001 + rax
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041198F:
	rdi = r14
	rax = DPB(rax, strlen(rdi), 0)
	rbx = r14 + 0x0000000000000001 + rax
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041199C:
	SCZO = cond(Mem0[rbx:byte] - 0x00)
	rax = 0x0000000000416FFC
	branch Test(NE,Z) l00000000004119A8
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119A4_1:
	rbx = 0x0000000000416FFC
// DataOut: fs r12 r12b r12d r13 r14 r15 r15b r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:0x00416FFC r10:<invalid> al:0xFC -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119A8:
	rcx = Mem0[rsp + 0x0000000000000098:word64]
	rcx = rcx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rcx)
	C = false
	rax = rbx
	branch Test(NE,Z) l0000000000411CFD
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:0x0000000000416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rcx:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:0x00416FFC r10:<invalid> al:0xFC -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CFD:
	__stack_chk_fail()
// DataOut: eax fs r13 r14 r15 r15b r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411D02:
	rdi = r14
	rsi = 0x0000000000416919
	free(rdi)
	rdi = r15
	rax = fn0000000000411D30(rax, rdi, r8, r13, out ebx, out rsp, out rbp, out rsi, out r12)
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119C2:
	rsp = rsp + 168
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: fs r12 r12b r12d r13 r15 r15b r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> rbp:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000411900_exit:
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use r8 (=> r8Out)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r15 (=> r15Out)
// DataOut: r12 r12b r12d r13 r15 r15b r8 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rbp:<invalid> rsi:<invalid> r15:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C14:
// DataOut: edi fs r12 r13 r14 r15 r15b r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rbp:<invalid> r12:<invalid> r13:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000411D30(word64 rax, word64 rdi, word64 r8, word64 r13, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r13 r8 rax rdi
// LiveOut: eax ebx r12 r12b r12d rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411D30_entry:
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411D30:
	word64 rax_15 = DPB(rax, fileno(rdi), 0)
	word32 eax_16 = fileno(rdi)
	branch eax_16 < 0x00000000 l0000000000411D9F
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411D43:
	word64 rsp_105
	word64 rbp_106
	word64 rdi_108
	word64 rax_109
	byte SZO_111
	byte C_112
	byte S_113
	byte Z_114
	word32 r12d_115
	word64 r12_117
	word32 esi_119
	word64 rsi_120
	word32 edx_121
	word64 rdx_122
	word32 edi_123
	byte SCZO_124
	word32 ebx_125
	word64 r13_118
	word64 r8_116
	word32 eax_110
	word64 rbx_107
	call __freading (retsize: 8; depth: 20)
		uses: C_19,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_16,ebx_13,edi,edx,esi,r12,r12d,r13,r8,rax_15,rbp,rbx_12,rdi_20,rdx,rsi,rsp_8,S_18,SCZO,SZO_17,Z
		defs: C_112,eax_110,ebx_125,edi_123,edx_121,esi_119,r12_117,r12d_115,r13_118,r8_116,rax_109,rbp_106,rbx_107,rdi_108,rdx_122,rsi_120,rsp_105,S_113,SCZO_124,SZO_111,Z_114
	branch eax_110 != 0x00000000 l0000000000411D80
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi rax:DPB(rax, <invalid>, 0) rdi:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D80:
	word64 rax_195 = DPB(rax_109, fileno(rbx_107), 0)
	word64 rsp_203
	word64 rbp_204
	word64 rdi_206
	word64 rax_207
	byte SZO_209
	byte C_210
	byte S_211
	byte Z_212
	word32 r12d_213
	word64 r12_215
	word32 esi_217
	word64 rsi_218
	word32 edx_219
	word64 rdx_220
	word32 edi_221
	byte SCZO_222
	word32 ebx_223
	call lseek (retsize: 8; depth: 20)
		uses: C_200,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_196,ebx_125,edi_123,edx_121,esi_198,r12_117,r12d_115,r13_118,r8_116,rax_195,rbp_106,rbx_107,rdi_202,rdx_201,rsi_197,rsp_105,S_113,SCZO_124,SZO_199,Z_127
		defs: C_210,eax_208,ebx_223,edi_221,edx_219,esi_217,r12_215,r12d_213,r13_216,r8_214,rax_207,rbp_204,rbx_205,rdi_206,rdx_220,rsi_218,rsp_203,S_211,SCZO_222,SZO_209,Z_212
	branch rax_207 != 0xFFFFFFFFFFFFFFFF l0000000000411D4C
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi rax:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D4C:
	word64 rsp_165
	word64 rsi_166
	branch (word32) fn0000000000411DB0(eax_110, rbx_107, out rsp_165, out rsi_166) == 0x00000000 l0000000000411D9C
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D9C:
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D9F:
// DataOut: eax ebx fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000402310:
	word64 rsp_84
	word64 rbp_85
	word64 rbx_86
	word64 rdi_87
	word64 rax_88
	word32 eax_89
	byte SZO_90
	byte C_91
	byte S_92
	byte Z_93
	word32 r12d_94
	word64 r8_95
	word64 r12_96
	word64 r13_97
	word32 esi_98
	word64 rsi_99
	word32 edx_100
	word64 rdx_101
	word32 edi_102
	byte SCZO_103
	word32 ebx_104
	call Mem0[0x000000000061A0D0:word32] (retsize: 4; depth: 4)
		uses: C_72,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_74,ebx_78,edi_59,edx_61,esi_63,r12_67,r12d_68,r13_64,r8_65,rax_73,rbp_80,rbx_77,rdi_69,rdx_60,rsi_62,rsp_83,S_66,SCZO_58,SZO_70,Z_71
		defs: C_91,eax_89,ebx_104,edi_102,edx_100,esi_98,r12_96,r12d_94,r13_97,r8_95,rax_88,rbp_85,rbx_86,rdi_87,rdx_101,rsi_99,rsp_84,S_92,SCZO_103,SZO_90,Z_93
	return rax_88
// DataOut: eax ebx fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D58:
	word64 rax_172 = __errno_location()
	word64 r12_173 = (uint64) Mem0[r8_116:word32]
	*r12Out = r12_173
	word32 r12d_174 = (word32) r12_173
	word64 rax_177 = DPB(rax_172, fclose(rbx_107), 0)
	branch r12d_174 == 0x00000000 l0000000000411D79
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D70:
	Mem191[r13_118:word32] = r12d_174
	rax_177 = 0x00000000FFFFFFFF
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r12:(uint64) Mem0[r8:word32] rbp:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D79:
	word32 ebx_185
	*ebxOut = (word32) Mem0[rsp_165:word64]
	word64 rbp_187
	*rbpOut = Mem0[rsp_165 + 0x0000000000000008:word64]
	word64 rsp_190
	*rspOut = Mem0[rsp_165 + 0x0000000000000010:word64] + 0x0000000000000008
	return rax_177
// DataOut: eax ebx fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r12:(uint64) Mem0[r8:word32] rbp:<invalid> rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000411D30_exit:
// DataOut: eax ebx r12 r12b r12d rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rbp:<invalid> r12:(uint64) Mem0[r8:word32] rsi:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn0000000000411DB0(word32 eax, word64 rdi, ptr64 & rspOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rdi
// LiveOut: eax rax rsi rsp
// Trashed: SCZO ah al ax bh bl bx dh di dil dl dx eax ebx edi edx esi esp rax rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411DB0_entry:
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB0:
	branch rdi == 0x0000000000000000 l0000000000411DC2
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB9:
	word64 rsp_45
	word64 rdi_46
	byte SZO_47
	byte C_48
	word64 rbx_49
	byte Z_50
	word32 eax_51
	word32 edx_52
	word64 rdx_53
	word32 esi_54
	word64 rsi_55
	word64 rax_56
	call __freading (retsize: 8; depth: 12)
		uses: C_5,dwLoc04_8,eax,edx,esi,qwLoc04,rax,rbx_9,rdi,rdx,rsi,rsp_6,SZO_3,Z_4
		defs: C_48,eax_51,edx_52,esi_54,rax_56,rbx_49,rdi_46,rdx_53,rsi_55,rsp_45,SZO_47,Z_50
	branch eax_51 != 0x00000000 l0000000000411DD0
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411DD0:
	branch (Mem0[rbx_49:word32] & 0x00000100) == 0x00000000 l0000000000411DC2
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411DD8:
	word64 rsp_70
	word64 rsi_71
	fn0000000000411DF0(0x00000001, rbx_49, out rsp_70, out rsi_71)
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

l0000000000411DC2:
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

l0000000000402650:
	word64 rsp_17
	word64 rdi_18
	byte SZO_19
	byte C_20
	word64 rbx_21
	byte Z_22
	word32 eax_23
	word32 edx_24
	word64 rdx_25
	word32 esi_26
	word64 rsi_27
	word64 rax_28
	call Mem0[0x000000000061A270:word32] (retsize: 4; depth: 4)
		uses: C_5,dwLoc04_8,eax,edx,esi,rax,rbx_9,rdi,rdx,rsi,rsp_6,SZO_3,Z_4
		defs: C_20,eax_23,edx_24,esi_26,rax_28,rbx_21,rdi_18,rdx_25,rsi_27,rsp_17,SZO_19,Z_22
	return rax_28
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdi:rdi rdx:<invalid> rsi:<invalid> rax:<invalid> -4(fp):rbx

fn0000000000411DB0_exit:
// DataOut: eax rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> -4(fp):rbx



word64 fn0000000000411DF0(word32 edx, word64 rdi, ptr64 & rspOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx rdi
// LiveOut: eax rax rsi rsp
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi esp rax rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411DF0_entry:
// DataOut: edx fs r12 r12b r12d r13 r14 r15 r15b r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DF0:
	branch Mem0[rdi + 0x0000000000000010:word64] == Mem0[rdi + 0x0000000000000008:word64] l0000000000411E10
// DataOut: eax edx fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411E10:
	word64 rax_60 = Mem0[rdi + 0x0000000000000020:word64]
	branch Mem0[rdi + 0x0000000000000028:word64] != rax_60 l0000000000411E02
// DataOut: eax edx fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E1A:
	branch Mem0[rdi + 0x0000000000000048:word64] != 0x0000000000000000 l0000000000411E02
// DataOut: eax edx fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E21:
	word64 rax_68 = DPB(rax_60, fileno(rdi), 0)
	word64 rsp_73
	word64 rbx_74
	word64 rdi_75
	byte SCZO_76
	byte Z_78
	word32 edx_79
	word64 rsi_80
	word64 rdx_81
	word32 edi_82
	word32 eax_83
	byte SZO_84
	byte C_85
	word64 rax_100
	call lseek (retsize: 8; depth: 28)
		uses: C,dwLoc04_4,dwLoc08_66,eax_69,edi,edx,qwLoc04,qwLoc14_67,rax_68,rbx_6,rdi_72,rdx_70,rsi_71,rsp_7,SCZO_64,SZO,Z_65
		defs: C_85,eax_83,edi_82,edx_79,rax_77,rbx_74,rdi_75,rdx_81,rsi_80,rsp_73,SCZO_76,SZO_84,Z_78
	branch rax_100 == 0xFFFFFFFFFFFFFFFF l0000000000411E4F
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E43:
	Mem97[rbx_74:word32] = Mem0[rbx_74:word32] & 0xFFFFFFEF
	Mem99[rbx_74 + 0x0000000000000090:word64] = rax_100
	rax_100 = 0x0000000000000000
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> -20(fp):rsi -8(fp):edx -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E4F:
	word64 rsp_95
	*rspOut = fp + 0x0000000000000004
	return rax_100
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> -20(fp):rsi -8(fp):edx -4(fp):rbx

l0000000000411E02:
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx

l0000000000402790:
	word64 rsp_47
	word64 rbx_48
	word64 rdi_49
	byte SCZO_50
	word64 rax_51
	byte Z_52
	word32 edx_53
	word64 rsi_54
	word64 rdx_55
	word32 edi_56
	word32 eax_57
	byte SZO_58
	byte C_59
	call Mem0[0x000000000061A310:word32] (retsize: 4;)
		uses: C,dwLoc04_4,dwLoc08,eax_30,edi,edx,qwLoc04,qwLoc14,rax_32,rbx_37,rdi_35,rdx,rsi,rsp_38,SCZO_34,SZO,Z_31
		defs: C_59,eax_57,edi_56,edx_53,rax_51,rbx_48,rdi_49,rdx_55,rsi_54,rsp_47,SCZO_50,SZO_58,Z_52
	return rax_51
// DataOut: eax fs r12 r12b r12d r13 r14 r15 r15b r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdi:rdi -4(fp):rbx

fn0000000000411DF0_exit:
// DataOut: eax rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> -20(fp):rsi -8(fp):edx -4(fp):rbx



void fn0000000000411EE0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: rsp
fn0000000000411EE0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EE0:
	branch 0x000000000061A3A8 == 0x0000000000000000 l0000000000411EF6
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EF6:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEC:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEF:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8 rdx:<invalid>

l00000000004027B0:
	word64 rsp_13
	word64 rax_14
	byte SZO_15
	byte C_16
	byte Z_17
	word64 rdx_18
	word32 esi_19
	word64 rsi_20
	word32 edx_21
	call Mem0[0x000000000061A320:word32] (retsize: 4; depth: 4)
		uses: C_11,edx_6,esi_9,rax_2,rdx_7,rsi_8,rsp_1,SZO_10,Z_4
		defs: C_16,edx_21,esi_19,rax_14,rdx_18,rsi_20,rsp_13,SZO_15,Z_17
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8 rdx:<invalid> rsi:0x0000000000000000

fn0000000000411EE0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:<invalid> rsi:<invalid>



void _fini()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO
// Preserved: rsp
fn0000000000411EFC_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411EFC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000411EFC_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



