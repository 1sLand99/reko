void _init()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
_init_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402168:
	word64 rax_4 = Mem0[0x0000000000619FF8:word64]
	branch rax_4 == 0x0000000000000000 l000000000040217D
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402178:
	word64 rsp_15
	byte SCZO_16
	word64 rax_17
	byte SZO_18
	byte C_19
	byte Z_20
	call __gmon_start__ (retsize: 8; depth: 16)
		uses: C_7,rax_4,rsp_2,SCZO,SZO_5,Z_6
		defs: C_19,rax_17,rsp_15,SCZO_16,SZO_18,Z_20
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l000000000040217D:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

_init_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn0000000000404890(word64 rax, word64 rdx, word64 qwArg00, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdx
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0000(64)
// Terminates process
fn0000000000404890_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000404890_entry:
// DataOut: rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404890:
	__align(fp + 0x0000000000000008)
	word64 rax_21 = DPB(rax, __libc_start_main(0x00000000004028C0, qwArg00, fp + 0x0000000000000008, 0x0000000000411E60, 0x0000000000411ED0, rdx, DPB(qwArg00, fp + 0x0000000000000004, 0)), 0)
	__hlt()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004048C0(word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi esp r8 r8b r8d r8w rax rdi rsp sp spl
// Preserved: rbp
fn00000000004048C0_entry:
// DataOut: r8
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048C0:
	branch DPB(rax, 0x0061A5FF, 0) >u 0x000000000000000E l00000000004048D7
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048D7:
	word64 rax_37 = DPB(rax, 0x00000000, 0)
	branch rax_37 == 0x0000000000000000 l00000000004048D5
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 eax:0x0061A5FF r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l00000000004048E1:
	word64 rsp_44
	word32 eax_45
	word64 rbp_46
	word64 r8_47
	byte SCZO_48
	word64 rax_49
	byte CZ_50
	byte SZO_51
	byte C_52
	byte Z_53
	word32 edi_54
	call 0x00000000 (retsize: 4;)
		uses: C_40,CZ_11,dwLoc04_7,eax_36,edi_43,qwLoc04,r8_9,rax_37,rbp_41,rsp_42,SCZO_10,SZO_38,Z_39
		defs: C_52,CZ_50,eax_45,edi_54,r8_47,rax_49,rbp_46,rsp_44,SCZO_48,SZO_51,Z_53
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 eax:0x00000000 r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp

l00000000004048D5:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 eax:<invalid> r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp

fn00000000004048C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 eax:<invalid> r8:<invalid> rbp:rbp edi:<invalid> -4(fp):rbp



void fn00000000004049E0(word64 rcx, byte dl, word64 r13, word64 r14, word64 r15, word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl r13 r14 r15 rcx
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx eax ebp ebx ecx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0000(64)
fn00000000004049E0_entry:
// DataOut: dl r13 r14 r15 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l00000000004049E0:
	word64 r8_107 = Mem0[r14:word64]
	word32 eax_227 = 0x00000000
	word64 rax_10 = DPB(rax, 0x00000000, 0)
	word64 r9_109 = Mem0[r15:word64]
	word64 r10_108 = DPB(r10, 0x00000000, 0)
	word32 r11d_121 = 0x00000000
	byte r11b_122 = 0x00
	word64 r11_123 = DPB(r11, 0x00000000, 0)
	word64 rbx_36 = DPB(rbx, 0x00000001, 0)
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A06:
	byte al_283
	byte SZO_167
	byte al_104
	word32 eax_153
	branch eax_227 == 0x00000002 l0000000000404A59
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A59:
	rax_10 = DPB(rax_10, (word32) Mem0[rax_10:byte], 0) (alias)
	rcx = DPB(rcx, rax_10 - 0x0000000000000030, 0) (alias)
	branch (byte) (rax_10 - 0x0000000000000030) <=u 0x07 l0000000000404A50
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A50:
	r11d_121 = rax_10 - 0x0000000000000030 + r11_123 * 0x00000008
	r11b_122 = (byte) r11d_121 (alias)
	r11_123 = DPB(r11_123, r11d_121, 0) (alias)
	r8_107 = r8_107 + 0x0000000000000001
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A0B:
	branch eax_227 <=u 0x00000002 l0000000000404B20
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B20:
	branch eax_227 != 0x00000001 l0000000000404A70
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A11:
	branch eax_227 == 0x00000003 l0000000000404AE0
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AE0:
	rax_10 = DPB(rax_10, (word32) Mem0[rax_10:byte], 0) (alias)
	rcx = DPB(rcx, rax_10 - 0x0000000000000030, 0) (alias)
	byte cl_399 = (byte) (rax_10 - 0x0000000000000030)
	branch cl_399 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AF0:
	r14 = rbx_36 << cl_399
	word32 r14d_416 = (word32) r14
	branch (r14d_416 & 0x007E0000) != 0x00000000 l0000000000404B78
// DataOut: al dl eax ebx r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B78:
	r11d_121 = rax_10 - 0x0000000000000037 + DPB(r11_123, r11d_121 << 0x00000004, 0)
	rax_10 = DPB(rax_10, (word32) Mem0[rax_10:byte], 0) (alias)
	r8_107 = r8_107 + 0x0000000000000001
	r11b_122 = (byte) r11d_121 (alias)
	r11_123 = DPB(r11_123, r11d_121, 0) (alias)
	rcx = DPB(rcx, rax_10 - 0x0000000000000030, 0) (alias)
	cl_399 = (byte) (rax_10 - 0x0000000000000030) (alias)
	branch cl_399 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B95:
// DataOut: al cl dl eax ebx r10 r11 r11b r11d r13 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:rax - 0x0000000000000037 + r11 r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AFF:
	branch (r14 & 0x0000000000000000) != 0x0000000000000000 l0000000000404AD0
// DataOut: al dl eax ebx r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AD0:
	r11d_121 = rax_10 - 0x0000000000000057 + DPB(r11_123, r11d_121 << 0x00000004, 0)
	r8_107 = r8_107 + 0x0000000000000001
	r11b_122 = (byte) r11d_121 (alias)
	r11_123 = DPB(r11_123, r11d_121, 0) (alias)
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B04:
	branch (r14d_416 & 0x000003FF) == 0x00000000 l0000000000404A65
// DataOut: al dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A65:
	Mem366[r9_109:byte] = r11b_122
	r10_108 = r10_108 + 0x0000000000000001
	r9_109 = r9_109 + 0x0000000000000001
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B11:
	r11d_121 = rax_10 - 0x0000000000000030 + DPB(r11_123, r11d_121 << 0x00000004, 0)
	r8_107 = r8_107 + 0x0000000000000001
	r11b_122 = (byte) r11d_121 (alias)
	r11_123 = DPB(r11_123, r11d_121, 0) (alias)
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A1A:
	branch eax_227 != 0x00000004 l0000000000404A70
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A22:
	eax_153 = (word32) Mem0[rax_10:byte]
	rax_10 = DPB(rax_10, eax_153, 0) (alias)
	al_283 = (byte) eax_153 (alias)
	rcx = DPB(rcx, rax_10 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_10 - 0x0000000000000040) <=u 0x3E l0000000000404AA0
// DataOut: al dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A2E:
	branch al_283 == 0x3F l0000000000404CB0
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000040 r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404CB0:
	Mem345[rcx:byte] = 0x7F
	r10_108 = r10_108 + 0x0000000000000001
	r9_109 = r9_109 + 0x0000000000000001
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000040 r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A70:
	word32 eax_314 = (word32) Mem0[rax_10:byte]
	al_104 = (byte) eax_314 (alias)
	rax_10 = DPB(rax_10, eax_314, 0) (alias)
	SZO_167 = cond(al_104 - 0x3D) (alias)
	branch al_104 == 0x3D l0000000000404ABA
// DataOut: al dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A78:
	branch SZO_167 l0000000000404B40
// DataOut: al dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B40:
	branch al_104 == 0x00 l0000000000404B48
// DataOut: al dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B44:
	branch al_104 != 0x3A l0000000000404B60
// DataOut: al dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B48:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A7E:
	branch al_104 == 0x5C l0000000000404CA0
// DataOut: al dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404CA0:
	r8_107 = r8_107 + 0x0000000000000001
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B29:
	word32 eax_206 = (word32) Mem0[rax_10:byte]
	word64 rax_207 = DPB(rax_10, eax_206, 0)
	branch (byte) eax_206 >u 0x78 l0000000000404C90
	word32 eax_211 = (word32) Mem0[rax_207:byte]
	byte al_213 = (byte) eax_211
	branch al_213 >u 0x78 l0000000000404C90
// DataOut: al dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B35:
	switch (DPB(rcx, (word32) al_213, 0)) { l0000000000404BF0 }
	rcx = DPB(rcx, (word32) al_213, 0) (alias)
	switch (rcx) { l0000000000404BF0 l0000000000404BF0 l0000000000404C90 }
// DataOut: al dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404C90:
	r11d_121 = eax_211
	r11b_122 = (byte) eax_211 (alias)
	r11_123 = DPB(r11_123, eax_211, 0) (alias)
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BD0:
	Mem239[r9_109:byte] = r11b_122
	r10_108 = r10_108 + 0x0000000000000001
	r9_109 = r9_109 + 0x0000000000000001
	eax_227 = 0x00000000
	rax_10 = DPB(rax_10, 0x00000000, 0) (alias)
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:(word32) Mem0[rax:byte] r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BF0:
	eax_227 = 0x00000006
	rax_10 = DPB(rax_10, 0x00000006, 0) (alias)
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:(word32) al r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BB0:
	r8_107 = r8_107 + 0x0000000000000001
	branch eax_227 <=u 0x00000004 l0000000000404A06
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BBD:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B4D:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A86:
	branch al_104 != 0x5E l0000000000404B60
// DataOut: al dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A8E:
	eax_153 = (word32) Mem0[rax_10:byte]
	rax_10 = DPB(rax_10, eax_153, 0) (alias)
	r8_107 = r8_107 + 0x0000000000000001
	al_283 = (byte) eax_153 (alias)
	rcx = DPB(rcx, rax_10 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_10 - 0x0000000000000040) >u 0x3E l0000000000404A2E
// DataOut: al dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A9E:
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000040 r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AA0:
	word32 eax_154 = eax_153 & 0x0000001F
	Mem160[rcx:byte] = (byte) eax_154
	word32 eax_161 = (word32) Mem160[DPB(rax_10, eax_154, 0):byte]
	al_104 = (byte) eax_161 (alias)
	r8_107 = r8_107 + 0x0000000000000001
	r10_108 = r10_108 + 0x0000000000000001
	rax_10 = DPB(rax_10, eax_161, 0) (alias)
	r9_109 = r9_109 + 0x0000000000000001
	SZO_167 = cond(al_104 - 0x3D) (alias)
	branch al_104 != 0x3D l0000000000404A78
// DataOut: al dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000040 r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404ABA:
	branch dl == 0x00 l0000000000404B60
// DataOut: al dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B60:
	Mem113[rcx:byte] = al_104
	r8_107 = r8_107 + 0x0000000000000001
	r10_108 = r10_108 + 0x0000000000000001
	r9_109 = r9_109 + 0x0000000000000001
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AC2:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A36:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000040 r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A38:
	Mem80[r15:word64] = r9_109
	Mem81[r14:word64] = r8_107
	Mem82[r13:word64] = r10_108
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> al:Test(NE,Z) r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi

fn00000000004049E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:SLICE(rsi, word64, 32) + 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:fp - 0x0000000000000004 ebx:<invalid> ecx:<invalid> r10:<invalid> rbx:rbx rsi:<invalid> al:Test(NE,Z) r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi



word64 fn0000000000404CD0(word32 edi, ptr64 & esiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut: al esi rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000404CD0_entry:
// DataOut: ebx edi fs r11 r11d r12 r14 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CD0:
	word64 rdi_5 = DPB(rdi, edi, 0)
	word64 rsi_13 = Mem0[(rdi_5 << 0x0000000000000004) + 0x000000000061A3E8:word64]
	word64 rax_39 = DPB(rax, 0x00000000, 0)
	word64 rdx_12 = Mem0[(rdi_5 << 0x0000000000000004) + 0x000000000061A3E0:word64]
	word32 esi_14 = (word32) rsi_13
	*esiOut = esi_14
	branch rdx_12 == 0x0000000000000000 l0000000000404CFC
// DataOut: al ebx esi fs r11 r11d r12 r14 r14b r14d r15b r15d rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CEB:
	branch rdx_12 == 0x0000000000000001 l0000000000404D10
// DataOut: ebx esi fs r11 r11d r12 r14 r14b r14d r15b r15d rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:0x00000000 rdi:rdi << 0x0000000000000004 rdx:<invalid> rsi:<invalid>

l0000000000404D10:
	return DPB(rax, Mem0[rsi_13:byte] != 0x30, 0)
// DataOut: al ebx esi fs r11 r11d r12 r14 r14b r14d r15b r15d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:0x00000000 rdi:rdi << 0x0000000000000004 rdx:<invalid> rsi:<invalid>

l0000000000404CF1:
	byte Z_47 = cond(rdx_12 - 0x0000000000000002)
	rax_39 = DPB(rax, 0x00000001, 0) (alias)
	branch rdx_12 == 0x0000000000000002 l0000000000404D00
// DataOut: al ebx esi fs r11 r11d r12 r14 r14b r14d r15b r15d rax rbp rbx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp edi:<invalid> eax:0x00000000 rdi:rdi << 0x0000000000000004 rdx:<invalid> rsi:<invalid>

l0000000000404D00:
	word64 rdi_52 = DPB(rdi_5 << 0x0000000000000004, 0x00413733, 0)
	word64 rcx_54 = DPB(rcx, 0x00000002, 0)
// DataOut: ebx esi fs r11 r11d r12 r14 r14b r14d r15b r15d rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp edi:<invalid> eax:0x00000001 rdi:rdi << 0x0000000000000004 rdx:<invalid> rsi:<invalid>

l0000000000404D0A:
	branch rcx_54 == 0x0000000000000000 l0000000000404D0C
// DataOut: ebx esi fs r11 r11d r12 r14 r14b r14d r15b r15d rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp edi:<invalid> eax:0x00000001 rdi:<invalid> rdx:<invalid> rsi:<invalid> ecx:<invalid> rcx:<invalid>

l0000000000404D0A_1:
	rsi_13 = rsi_93 + 0x0000000000000001
	Z_47 = cond(Mem0[rsi_93:byte] - Mem0[rdi_94:byte]) (alias)
	word32 esi_83
	*esiOut = (word32) rsi_13
	rdi_52 = rdi_94 + 0x0000000000000001
	rcx_54 = rcx_54 - 0x0000000000000001
	word64 rsi_93 = rsi_13
	word64 rdi_94 = rdi_52
	branch Mem0[rsi_93:byte] != Mem0[rdi_94:byte] l0000000000404D0A
// DataOut: ebx esi fs r11 r11d r12 r14 r14b r14d r15b r15d rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp edi:<invalid> eax:0x00000001 rdi:<invalid> rdx:<invalid> rsi:<invalid> ecx:<invalid> rcx:<invalid>

l0000000000404D0C:
	return DPB(rax, Z_47, 0)
// DataOut: al ebx esi fs r11 r11d r12 r14 r14b r14d r15b r15d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:0x00000001 rdi:<invalid> rdx:<invalid> rsi:<invalid> ecx:<invalid> rcx:<invalid>

l0000000000404CFC:
	return rax_39
// DataOut: al ebx esi fs r11 r11d r12 r14 r14b r14d r15b r15d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> rdi:rdi << 0x0000000000000004 rdx:<invalid> rsi:<invalid>

fn0000000000404CD0_exit:
// DataOut: al esi rax
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> al:Test(NE,Z) ecx:<invalid> rcx:<invalid>



word64 fn0000000000404D20(byte dl, word64 rsi, word64 rdi, word64 r11, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl r11 rdi rsi
// LiveOut: r12 r13 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000404D20_entry:
// DataOut: dl edx r11 r14b r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D20:
	word64 rsp_26
	word64 rax_27 = fn0000000000410C40(rsi, DPB(rdi, 0x00000020, 0), out rsp_26)
	byte r13b_7 = (byte) edx
	word64 r13_9
	*r13Out = DPB(r13, edx, 0)
	word64 r12_14
	*r12Out = rsi
	word64 rbp_18 = rdi
	word64 rax_30 = DPB(rax_27, 0x00000000, 0)
	branch rsi == 0x0000000000000000 l0000000000404D4F
// DataOut: r11 r12 r13 r13b r14b r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404D47:
	rax_30 = fn0000000000410E30(rax_30, rsi, out rsp_26, out rbp_18)
// DataOut: r11 r12 r13 r13b r14b r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:edx r12:rsi rbp:rdi edi:0x00000020 rbx:<invalid> eax:0x00000000 rax:<invalid> edx:<invalid> rdx:<invalid> rdi:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D4F:
	Mem38[rax_27 + 0x0000000000000008:word64] = rax_30
	word64 rax_40 = DPB(rax_30, 0x00000000, 0)
	branch rbp_18 == 0x0000000000000000 l0000000000404D62
// DataOut: r11 r12 r13 r13b r14b r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:edx r12:rsi rbp:<invalid> edi:<invalid> rbx:<invalid> eax:0x00000000 rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D5A:
	word64 rbp_69
	rax_40 = fn0000000000410E30(rax_40, rbp_18, out rsp_26, out rbp_69)
// DataOut: r11 r12 r13 r13b r14b r15 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:edx r12:rsi rbp:<invalid> edi:<invalid> rbx:<invalid> eax:0x00000000 rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D62:
	Mem48[rax_27:word64] = rax_40
	word64 rax_49 = Mem48[0x000000000061B190:word64]
	Mem50[r11 + 0x0000000000000010:byte] = r13b_7
	Mem52[0x000000000061B190:word64] = rax_27
	Mem53[rax_27 + 0x0000000000000018:word64] = rax_49
	word64 rsp_60 = Mem53[rsp_26 + 0x0000000000000018:word64]
	word64 rbp_62
	*rbpOut = Mem53[rsp_60 + 0x0000000000000008:word64]
	return rsp_60 + 0x0000000000000010
// DataOut: r11 r12 r13 r14b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:edx r12:rsi rbp:<invalid> edi:<invalid> rbx:<invalid> eax:0x00000000 rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn0000000000404D20_exit:
// DataOut: r12 r13 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:edx r12:rsi rbp:<invalid> edi:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn0000000000404D90(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rsp
// Trashed: SCZO di dil edi esp rdi rsp sp spl
// Preserved: rbx
fn0000000000404D90_entry:
// DataOut: r11 r12 r13 r14b rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D90:
	free(Mem0[rdi:word64])
	free(Mem0[rdi + 0x0000000000000008:word64])
	word64 rdi_10 = Mem0[rdi + 0x00000000000000A8:word64]
	branch rdi_10 == 0x000000000061A56A l0000000000404DC0
// DataOut: r11 r12 r13 r14b rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DC0:
	return fp + 0x0000000000000004
// DataOut: r11 r12 r13 r14b rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> -4(fp):rbx

l0000000000404DB5:
// DataOut: r11 r12 r13 r14b rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> -4(fp):rbx

l00000000004027D0:
	word64 rsp_21
	word64 rbx_22
	word64 rdi_23
	byte SCZO_24
	byte Z_25
	call Mem0[0x000000000061A330:word32] (retsize: 4;)
		uses: dwLoc04_4,qwLoc04,rbx_19,rdi_10,rsp_20,SCZO_11,Z_12
		defs: rbx_22,rdi_23,rsp_21,SCZO_24,Z_25
	return rsp_21
// DataOut: r11 r12 r13 r14b rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rdi:<invalid> -4(fp):rbx

fn0000000000404D90_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rdi:<invalid> -4(fp):rbx



void fn0000000000404DD0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx di dil eax ebx edi esp rax rbx rdi rsp sp spl
// Preserved: rbx
fn0000000000404DD0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DD0:
	word64 rbx_33 = DPB(rbx, 0x00000000, 0)
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000404DFD
// DataOut: rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404DDD:
// DataOut: rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 ebx:0x00000000 -4(fp):rbx

l0000000000404DE0:
	fn0000000000404D90(Mem0[Mem0[0x000000000061B1A8:word64] + rbx_33 * 0x0000000000000008:word64])
	rbx_33 = rbx_33 + 0x0000000000000001
	branch Mem0[0x000000000061B1B0:word64] >u rbx_33 l0000000000404DE0
// DataOut: rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebx:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -4(fp):rbx

l0000000000404DFD:
	Mem19[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem20[0x000000000061B17C:byte] = 0x00
	Mem21[0x000000000061B178:word32] = 0x00000000
	Mem22[0x000000000061B174:word32] = 0x00000000
	Mem23[0x000000000061B170:word32] = 0x00000000
	Mem24[0x000000000061B168:word32] = 0x00000000
	Mem25[0x000000000061B164:word32] = 0x00000000
	Mem26[0x000000000061B160:word32] = 0x00000000
	Mem27[0x000000000061B16C:word32] = 0x00000000
	Mem28[0x000000000061B15C:word32] = 0x00000000
	Mem29[0x000000000061B158:word32] = 0x00000000
	Mem30[0x000000000061B154:word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebx:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -4(fp):rbx

fn0000000000404DD0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebx:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -4(fp):rbx



void fn0000000000404E80(word64 rsi, word64 r11, word64 r15)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r15 rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000404E80_entry:
// DataOut: r11 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404E80:
	word64 rbx_10 = Mem0[0x000000000061B1B0:word64]
	word64 rbp_106 = rbx_10
	word64 rax_14 = (rbx_10 >>u 0x0000000000000001) + rbx_10
	branch rax_14 >u Mem0[0x000000000061B1A0:word64] l0000000000404F98
// DataOut: al eax r11 r15 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404F98:
	free(Mem0[0x000000000061B1A8:word64])
	branch rbx_10 >u rax_14 l0000000000404FF8
// DataOut: r11 r15 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404FB3:
	word64 rsp_307
	word64 rax_308 = fn0000000000410C40(rsi, rbx_10 * 0x0000000000000018, out rsp_307)
	rbp_106 = Mem0[0x000000000061B1B0:word64]
	Mem310[0x000000000061B1A8:word64] = rax_308
	Mem315[0x000000000061B1A0:word64] = rbp_106 * 0x0000000000000003
// DataOut: al eax r11 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404EA6:
	branch rbp_106 == 0x0000000000000000 l0000000000404ED3
// DataOut: al eax r11 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA edx:<invalid> rdx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EAB:
	word64 rax_277 = Mem0[0x000000000061B1A8:word64]
	word64 rdx_281 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_283 = rax_277 + rbp_106 * 0x0000000000000008
// DataOut: r11 r15 rax rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA edx:<invalid> rdx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EC0:
	Mem287[rax_277:word64] = rdx_281
	rax_277 = rax_277 + 0x0000000000000008
	rdx_281 = rdx_281 + 192
	branch rax_277 != rcx_283 l0000000000404EC0
// DataOut: al eax r11 r15 rax rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404ED3:
	branch Mem0[0x000000000061B148:word32] == 0xFFFFFFFF l0000000000404F8C
// DataOut: al eax r11 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EE0:
	word32 ecx_191
	word64 rdi_187
	word64 rsi_185
	word64 rsp_158
	word64 rbp_159
	word64 rbx_160
	byte SCZO_161
	word64 rax_162
	byte CZ_163
	byte SZO_164
	byte C_165
	byte Z_166
	word64 rdx_167
	word64 rcx_168
	word32 edi_169
	word32 eax_170
	word32 r8d_171
	word64 rsi_172
	word64 rdi_173
	word32 ecx_174
	word32 edx_176
	word16 ax_177
	byte al_178
	word32 esi_179
	word64 r11_180
	word64 r15_181
	word64 r8_175
	call _setjmp (retsize: 8; depth: 8)
		uses: al_117,ax_118,C_110,CZ_97,dwLoc04_4,dwLoc08_7,eax_120,ecx_115,edi_157,edx_119,esi,r11,r15,r8_102,r8d,rax_121,rbp_106,rbx_10,rcx_116,rdi_98,rdx_122,rsi,rsp_107,SCZO_123,SZO_108,Z_124
		defs: al_178,ax_177,C_165,CZ_163,eax_170,ecx_174,edi_169,edx_176,esi_179,r11_180,r15_181,r8_175,r8d_171,rax_162,rbp_159,rbx_160,rcx_168,rdi_173,rdx_167,rsi_172,rsp_158,SCZO_161,SZO_164,Z_166
	branch eax_170 == 0x00000000 l0000000000404F40
// DataOut: al r11 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F40:
	ecx_191 = Mem0[0x000000000061B148:word32]
	rsi_185 = Mem0[0x000000000061B1B0:word64]
	rdi_187 = Mem0[0x000000000061B1A8:word64]
// DataOut: al ecx edi r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EEE:
	word32 r8d_221 = Mem0[0x000000000061B148:word32]
	r8_175 = DPB(r8_175, r8d_221, 0) (alias)
	branch r8d_221 == 0x00000003 l0000000000404FDF
// DataOut: r11 r15 r8d
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404FDF:
	__assert_fail(DPB(rdi_173, 0x0041373F, 0), DPB(rsi_172, 0x00413736, 0), DPB(rdx_167, 0x00000DDB, 0), DPB(rcx_168, 0x00412C95, 0))
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> r8d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404FF8:
	fn0000000000410E50()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:<invalid> edi:0x0041373F r8d:<invalid> ecx:0x00412C95 edx:0x00000DDB esi:0x00413736 rdx:<invalid> rcx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000402550_in_fn0000000000404E80:
	word64 rsp_73
	word64 rbp_74
	word64 rbx_75
	byte SCZO_76
	word64 rax_77
	byte CZ_78
	byte SZO_79
	byte C_80
	byte Z_81
	word64 rdx_82
	word64 rcx_83
	word32 edi_84
	word32 eax_85
	word32 r8d_86
	word64 rsi_87
	word64 rdi_88
	word32 ecx_89
	word64 r8_90
	word32 edx_91
	word16 ax_92
	byte al_93
	word32 esi_94
	word64 r11_95
	word64 r15_96
	call Mem0[0x000000000061A1F0:word32] (retsize: 4;)
		uses: al_58,ax_60,C_55,CZ_49,dwLoc04_4,dwLoc08_7,eax_64,ecx_56,edi_53,edx_63,esi_51,r11_48,r15_47,r8_62,r8d_61,rax_65,rbp_69,rbx_68,rcx_57,rdi_72,rdx_66,rsi_71,rsp_70,SCZO_67,SZO_54,Z_59
		defs: al_93,ax_92,C_80,CZ_78,eax_85,ecx_89,edi_84,edx_91,esi_94,r11_95,r15_96,r8_90,r8d_86,rax_77,rbp_74,rbx_75,rcx_83,rdi_88,rdx_82,rsi_87,rsp_73,SCZO_76,SZO_79,Z_81
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EFF:
	rsi_185 = Mem0[0x000000000061B1B0:word64]
	rdi_187 = Mem0[0x000000000061B1A8:word64]
	branch rsi_185 == 0x0000000000000000 l0000000000404F33
// DataOut: edi r11 r15 r8d rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> r8d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F12:
	word64 rdx_244 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_246 = rdi_187 + rsi_185 * 0x0000000000000008
	word64 rax_248 = rdi_187
// DataOut: edi r11 r15 r8d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> r8d:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F20:
	Mem254[rax_248:word64] = rdx_244
	rax_248 = rax_248 + 0x0000000000000008
	rdx_244 = rdx_244 + 192
	branch rax_248 != rcx_246 l0000000000404F20
// DataOut: edi r11 r15 r8d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> r8d:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F33:
	ecx_191 = r8d_221
// DataOut: al ecx edi r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> r8d:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F54:
	branch ecx_191 != 0x00000004 l0000000000404F60
// DataOut: al ecx edi edx r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> r8d:<invalid> eax:0x00000001 edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F59_1:
// DataOut: al ecx edi edx r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> edx:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> r8d:<invalid> eax:0x00000001 -8(fp):rbx -4(fp):rbp

l0000000000404F60:
	fn000000000040D690(rsi_185, rdi_187, DPB(r8_175, (word32) Mem0[0x000000000061B10C:byte], 0), r11_180, r15_181)
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> edx:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> r8d:<invalid> eax:0x00000001 -8(fp):rbx -4(fp):rbp

l0000000000404F8C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> edx:<invalid> ax:<invalid> r8d:(word32) Mem0[0x000000000061B10C:byte] eax:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000404E80_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> ax:<invalid> r8d:(word32) Mem0[0x000000000061B10C:byte] eax:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -8(fp):rbx -4(fp):rbp



void fn0000000000405020(word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax bp bpl di dil eax ebp edi esi esp rax rbp rdi rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405020_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405020:
	word64 rax_15 = __errno_location()
	Mem16[rax_15:word32] = 0x00000000
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000402690:
	word64 rsp_26
	word64 rbp_27
	word64 rsi_28
	word64 rbx_29
	word64 rdi_30
	byte SCZO_31
	word64 rax_32
	call Mem16[0x000000000061A290:word32] (retsize: 4;)
		uses: dwLoc04_4,dwLoc08_9,qwLoc08_11,rax_15,rbp_24,rbx_20,rdi_19,rsi_22,rsp_25,SCZO_18
		defs: rax_32,rbp_27,rbx_29,rdi_30,rsi_28,rsp_26,SCZO_31
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx rax:<invalid> rdi:rdi rsi:rsi -8(fp):rbx -4(fp):rbp

fn0000000000405020_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx rax:<invalid> rdi:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp



void fn0000000000405090(byte sil, word64 rdi, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 rdi sil
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405090_entry:
// DataOut: r11 rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405090:
	word32 r14d_9 = (word32) sil
	word64 r13_117 = rdi
	branch rdi == 0x0000000000000000 l00000000004050C0
// DataOut: r11 r13 r14b rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004050AA:
	branch Mem0[0x000000000061B1C8:word64] == 0x0000000000000000 l00000000004050C0
// DataOut: r11 r13 r14b rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r14d:(word32) sil r13:rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050B4:
	word64 rbp_273
	word64 r12_274
	fn0000000000404D20(0x00, rdi, DPB(rdi, 0x00000000, 0), r11, out rbp_273, out r12_274, out r13_117)
// DataOut: r11 r13 r14b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r14d:(word32) sil r13:rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050C0:
	word64 rbx_44 = Mem0[0x000000000061B1B0:word64]
// DataOut: r11 r12 r13 r14b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:rdi rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> rdx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405108:
	branch rbx_44 == 0x0000000000000000 l00000000004051A8
// DataOut: r11 r12 r13 r14b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> rbp:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051A8:
	word64 rdx_207
	word64 rdi_196 = Mem0[0x000000000061B1B0:word64]
	branch rdi_196 == 0x0000000000000000 l00000000004051F7
// DataOut: rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> rbp:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051F7:
	rdx_207 = DPB(rdx, 0x00000000, 0) (alias)
// DataOut: rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> rbp:<invalid> eax:<invalid> rax:<invalid> r15:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051B4:
	word64 rsi_229 = Mem0[0x000000000061B1A8:word64]
	rdx_207 = DPB(rdx, 0x00000000, 0) (alias)
	word64 rax_235 = DPB(rax, 0x00000000, 0)
// DataOut: rax rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> rbp:<invalid> eax:<invalid> rax:<invalid> r15:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051C0:
	word64 rcx_241 = Mem0[rsi_229 + rax_235 * 0x0000000000000008:word64]
	Mem244[rsi_229 + rdx_207 * 0x0000000000000008:word64] = rcx_241
	rax_235 = rax_235 + 0x0000000000000001
	rdx_207 = rdx_207 + DPB(rcx_241, (word32) (Mem0[rcx_241 + 0x00000000000000A0:word32] != 0x00000009), 0)
	branch rax_235 != rdi_196 l00000000004051C0
// DataOut: rax rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> rcx:<invalid> cl:<invalid> rax:<invalid> ecx:<invalid> rdx:<invalid> edi:<invalid> r13d:<invalid> rbp:<invalid> r15:<invalid> esi:<invalid> dl:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051E1:
	Mem214[0x000000000061B1B0:word64] = rdx_207
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> edx:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> cl:<invalid> rax:<invalid> ecx:<invalid> rdx:<invalid> edi:<invalid> r13d:<invalid> rbp:<invalid> r15:<invalid> esi:<invalid> dl:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000405090_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> edx:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> cl:<invalid> rax:<invalid> ecx:<invalid> rdx:<invalid> rbp:<invalid> edi:<invalid> r13d:<invalid> r15:<invalid> esi:<invalid> dl:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405111:
	word64 rax_71 = Mem0[0x000000000061B1A8:word64]
	word64 rbp_72 = Mem0[rax_71:word64]
	word32 eax_73 = Mem0[rbp_72 + 0x00000000000000A0:word32]
	rax = DPB(rax_71, eax_73, 0) (alias)
	branch eax_73 == 0x00000009 l000000000040512C
// DataOut: eax r11 r12 r13 r14b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> rbp:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405127:
	branch eax_73 != 0x00000003 l0000000000405100
// DataOut: r11 r12 r13 r14b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> rdi:<invalid> r15:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040512C:
	word64 rbp_116
	word64 r15_103 = Mem0[r13_117:word64]
	branch r13_117 == 0x0000000000000000 l00000000004050E2
// DataOut: r11 r12 r13 r14b r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> rdi:<invalid> r15:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405135:
	rax = fn000000000040A390(r15_103)
	branch Mem0[rax:byte] != 0x2E l00000000004050D8
// DataOut: r11 r12 r13 r14b r15 rax rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> rdi:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405142:
	rdx = DPB(rdx, Mem0[rax + 0x0000000000000001:byte] == 0x2E, 0) (alias)
	word32 eax_186 = (word32) Mem0[rax + 0x0000000000000001 + rdx:byte]
	rax = DPB(rax, eax_186, 0) (alias)
	byte al_188 = (byte) eax_186
	branch al_188 == 0x2F l0000000000405100
// DataOut: al r11 r12 r13 r14b r15 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> r13d:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405154:
	branch al_188 == 0x00 l0000000000405100
// DataOut: r11 r12 r13 r14b r15 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:Test(EQ,Z) rsi:<invalid> edi:<invalid> r13d:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405158:
// DataOut: r11 r13 r14b r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:Test(EQ,Z) rsi:<invalid> edi:<invalid> r13d:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050D8:
	branch Mem0[r15_103:byte] != 0x2F l0000000000405160
// DataOut: r11 r13 r14b r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> dl:<invalid> r13d:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405160:
	rdx = DPB(rdx, 0x00000000, 0) (alias)
	word64 rbp_166
	byte r14b_167
	rax = fn000000000040A610(rdx, r15_103, r13_117, out rbp_166, out r14b_167)
	word64 r12_175
	fn0000000000404D20((byte) r14d_9, Mem0[rbp_166 + 0x0000000000000008:word64], rax, r11, out rbp_116, out r12_175, out r13_117)
	free(rax)
	branch Mem0[rbp_116 + 0x00000000000000A0:word32] != 0x00000009 l0000000000405100
// DataOut: r11 r12 r13 r14b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> dl:<invalid> r13d:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050E2:
	word64 r12_138
	fn0000000000404D20((byte) r14d_9, Mem0[rbp_72 + 0x0000000000000008:word64], r15_103, r11, out rbp_116, out r12_138, out r13_117)
	branch Mem0[rbp_116 + 0x00000000000000A0:word32] == 0x00000009 l0000000000405194
// DataOut: r11 r12 r13 r14b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> r13d:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405194:
	fn0000000000404D90(rbp_116)
	fn0000000000404D90(rbp_116)
// DataOut: r11 r12 r13 r14b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> r13d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050FE:
// DataOut: r11 r12 r13 r14b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> r13d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405100:
	rbx_44 = rbx_44 - 0x0000000000000001
// DataOut: r11 r12 r13 r14b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r13d:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000405200(word64 rsi, word64 rdi, word64 qwArg00, word64 qwArg10, word64 qwArg18)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000405200_entry:
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405200:
	word64 rbp_114 = rsi
	word64 rbx_11 = rdi
	branch rdi <u rsi l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040526B:
	branch Mem0[0x000000000061B0D8:word64] != 0x0000000000000000 l0000000000405220
	word64 rcx_156 = Mem0[0x000000000061B0D8:word64]
	branch rcx_156 != 0x0000000000000000 l0000000000405220
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405220:
	word128 rdx_rax_133 = SEQ(rdx, rbp_114)
	word64 rsi_134 = rbx_11 + 0x0000000000000001
	word128 rdx_rax_142 = SEQ((uint64) (rdx_rax_133 % rcx_156), rsi_134)
	word64 rdx_144 = (uint64) (rdx_rax_142 % rcx_156)
	branch (uint64) (rdx_rax_133 /u rcx_156) <=u (uint64) (rdx_rax_142 /u rcx_156) l00000000004052A8
// DataOut: rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052A8:
	rbx_11 = rsi_134
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040523C:
	word64 rdi_148 = Mem0[0x000000000061A610:word64]
	word64 rax_149 = Mem0[rdi_148 + 0x0000000000000028:word64]
	word128 rdx_rax_150 = SEQ(rdx_144, rax_149)
	branch rax_149 >=u Mem0[rdi_148 + 0x0000000000000030:word64] l00000000004052B9
// DataOut: rax rbp rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052B9:
	word64 rsp_177
	word64 rsi_179
	word64 rdi_181
	byte SCZO_182
	byte C_183
	word64 rcx_184
	byte SZO_185
	byte Z_186
	word64 rdx_187
	word64 rax_188
	byte CZ_189
	word32 esi_190
	word32 edx_191
	call __overflow (retsize: 8; depth: 24)
		uses: C_152,CZ_147,dwLoc04_4,dwLoc08_9,edx_139,esi_176,qwLoc08,rax_149,rbp_61,rbx_60,rcx_67,rdi_148,rdx_144,rsi_134,rsp_62,SCZO_151,SZO_68,Z_69
		defs: C_183,CZ_189,edx_191,esi_190,rax_188,rbp_178,rbx_180,rcx_184,rdi_181,rdx_187,rsi_179,rsp_177,SCZO_182,SZO_185,Z_186
	rcx_156 = Mem0[0x000000000061B0D8:word64]
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040524D:
	Mem174[rdi_148 + 0x0000000000000028:word64] = rax_149 + 0x0000000000000001
	Mem175[rax_149:byte] = 0x09
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405258:
	rdx = (uint64) (DPB(rdx_rax_150, 0x00000000, 64) % rcx_156)
	rbx_11 = rbx_11 + rcx_156 - rdx
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405277:
	rbx_11 = rbx_11 + 0x0000000000000002
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040527B:
	word64 rdi_92 = Mem0[0x000000000061A610:word64]
	branch Mem0[rdi_92 + 0x0000000000000028:word64] >=u Mem0[rdi_92 + 0x0000000000000030:word64] l00000000004052AD
	word64 rdi_96 = Mem0[0x000000000061A610:word64]
	rdx = Mem0[rdi_96 + 0x0000000000000028:word64]
	branch rdx >=u Mem0[rdi_96 + 0x0000000000000030:word64] l00000000004052AD
// DataOut: rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052AD:
	word64 rsp_113
	word64 rsi_115
	word64 rdi_117
	byte SCZO_118
	byte C_119
	word64 rcx_120
	byte SZO_121
	byte Z_122
	word64 rax_124
	byte CZ_125
	word32 esi_126
	word32 edx_127
	call __overflow (retsize: 8; depth: 24)
		uses: C_101,CZ_90,dwLoc04_4,dwLoc08_9,edx_99,esi_112,qwLoc08,rax_89,rbp_61,rbx_91,rcx_67,rdi_96,rdx_97,rsi_88,rsp_62,SCZO_100,SZO_68,Z_69
		defs: C_119,CZ_125,edx_127,esi_126,rax_124,rbp_114,rbx_116,rcx_120,rdi_117,rdx_123,rsi_115,rsp_113,SCZO_118,SZO_121,Z_122
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405266:
	branch rbp_114 <=u rbx_11 l000000000040529C
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040528C:
	Mem105[rdi_96 + 0x0000000000000028:word64] = rdx + 0x0000000000000001
	Mem106[rdx:byte] = 0x20
	branch rbp_114 >u rbx_11 l000000000040526B
	Mem110[rdi_96 + 0x0000000000000028:word64] = rdx + 0x0000000000000001
	Mem111[rdx:byte] = 0x20
	branch rbp_114 >u rbx_11 l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405211:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:rdi -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040529C:
	return
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405200_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000020 rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn00000000004052D0(word64 rdx, word32 ebx, word64 rsi, word64 r11, selector fs, ptr64 & rbxOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebx fs r11 rdx rsi
// LiveOut: r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004052D0_entry:
// DataOut: ebx fs r11 rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004052D0:
	word32 ebp_8 = (word32) (fp - 0x0000000000000004)
	word64 rdi_47
	word64 r9_49
	word64 r11_50
	word64 r13_52
	word64 r14_53
	word64 r15_54
	word64 r12_109
	word64 r8_106
	word64 rbp_118
	word64 rsp_119
	word64 rsi_116
	word64 rax_55 = fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, rsi, ebx, ebp_8, DPB(rsi, 0x00002000, 0), fp + 0xFFFFFFFFFFFFDFBC, rdx, r11, fs, out rsp_119, out rbp_118, out rsi_116, out rdi_47, out r8_106, out r9_49, out r11_50, out r12_109, out r13_52, out r14_53, out r15_54)
	Mem64[rbp_118 + 0xFFFFFFFFFFFFDF98:word64] = rbp_118 + 0xFFFFFFFFFFFFDFC0
	word64 rbx_114 = rax_55
	word32 ebx_57 = (word32) rax_55
	branch rax_55 >u 0x0000000000001FFF l0000000000405590
// DataOut: ebp ebx esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405590:
	Mem893[rbp_118 + 0xFFFFFFFFFFFFDF98:word64] = rsp_119 - (rax_55 + 0x000000000000001F & 0xFFFFFFFFFFFFFFF0) + 0x000000000000000F
	Mem895[rbp_118 + 0xFFFFFFFFFFFFDF98:word64] = Mem893[rbp_118 + 0xFFFFFFFFFFFFDF98:word64] & 0xFFFFFFFFFFFFFFF0
	word64 rdi_903
	word64 r9_905
	word64 r11_906
	word64 r13_908
	word64 r14_909
	word64 r15_910
	fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, r14_53, ebx_57, ebp_8, rax_55 + 0x0000000000000001, Mem895[rbp_118 + 0xFFFFFFFFFFFFDF98:word64], r13_52, r11_50, fs, out rsp_119, out rbp_118, out rsi_116, out rdi_903, out r8_106, out r9_905, out r11_906, out r12_109, out r13_908, out r14_909, out r15_910)
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> rsi:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):fp + 0xFFFFFFFFFFFFDFBC -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405343:
	branch Mem64[0x000000000061B0F0:byte] != 0x00 l0000000000405412
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405412:
	word64 rdx_425
	word64 r14_428
	word64 r13_429
	word32 esi_430
	byte SCZO_432
	word64 rcx_433
	word32 eax_436
	byte SZO_437
	byte C_438
	byte CZ_439
	byte Z_440
	word32 edx_441
	word64 r12_442
	word32 r12d_443
	word16 dx_444
	word64 r15_445
	byte al_446
	byte SO_447
	byte dl_448
	word32 edi_449
	byte S_450
	word32 ecx_451
	byte cl_452
	word16 ax_453
	word32 ebx_454
	word64 r11_455
	word64 r9_456
	word32 ebp_457
	word64 rax_434
	word64 rdi_426
	call __ctype_get_mb_cur_max (retsize: 8; depth: 8)
		uses: al_80,ax_81,C_77,cl,CZ_63,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx,eax_79,ebp_8,ebx_57,ecx,edi_67,edx,esi_70,fs,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_66,r12_75,r12d,r13_71,r14_72,r15_68,r8_74,r9_65,rax_78,rbp_84,rbx_56,rcx_69,rdi_83,rdx_73,rsi_82,rsp_85,S,SCZO_86,SO,SZO_76,Z_87
		defs: al_446,ax_453,C_438,cl_452,CZ_439,dl_448,dx_444,eax_436,ebp_457,ebx_454,ecx_451,edi_449,edx_441,esi_430,fs_435,r11_455,r12_442,r12d_443,r13_429,r14_428,r15_445,r8_424,r9_456,rax_434,rbp_423,rbx_431,rcx_433,rdi_426,rdx_425,rsi_427,rsp_422,S_450,SCZO_432,SO_447,SZO_437,Z_440
	branch rax_434 <=u 0x0000000000000001 l00000000004055D1
// DataOut: ebp esp fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055D1:
	word64 r14_784 = Mem64[r13_429 + 0xFFFFFFFFFFFFDF98:word64]
	*r14Out = r14_784
	word64 r12_785 = r14_784 + rbx_114
	branch r14_784 >=u r12_785 l0000000000405602
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055E1:
	word64 rdx_828
	word64 rdi_829
	word64 r14_831
	word64 r13_832
	word32 esi_833
	byte SCZO_835
	word64 rcx_836
	word64 rax_837
	word32 eax_839
	byte SZO_840
	byte C_841
	byte CZ_842
	byte Z_843
	word32 edx_844
	word64 r12_845
	word32 r12d_846
	word16 dx_847
	word64 r15_848
	byte al_849
	byte SO_850
	byte dl_851
	word32 edi_852
	byte S_853
	word32 ecx_854
	byte cl_855
	word16 ax_856
	word32 ebx_857
	word64 r11_858
	word64 r9_859
	word32 ebp_860
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_446,ax_453,C_788,cl_452,CZ_459,dl_448,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_444,eax_436,ebp_457,ebx_454,ecx_451,edi_449,edx_441,esi_430,fs_435,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_455,r12_785,r12d_786,r13_429,r14_784,r15_445,r8_424,r9_456,rax_434,rbp_423,rbx_431,rcx_433,rdi_426,rdx_425,rsi_427,rsp_422,S_450,SCZO_787,SO_447,SZO_437,Z_440
		defs: al_849,ax_856,C_841,cl_855,CZ_842,dl_851,dx_847,eax_839,ebp_860,ebx_857,ecx_854,edi_852,edx_844,esi_833,fs_838,r11_858,r12_845,r12d_846,r13_832,r14_831,r15_848,r8_827,r9_859,rax_837,rbp_826,rbx_834,rcx_836,rdi_829,rdx_828,rsi_830,rsp_825,S_853,SCZO_835,SO_850,SZO_840,Z_843
	word64 rdx_861 = r14_831
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055E9:
	rsi_116 = DPB(rsi_116, (word32) Mem64[rdx_861:byte], 0) (alias)
	branch (Mem64[Mem64[rax_837:word64] + 0x0000000000000001 + rsi_116 * 0x02:byte] & 0x40) != 0x00 l00000000004055F9
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055F6:
	Mem883[rdx_861:byte] = 0x3F
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004055F9:
	rdx_861 = rdx_861 + 0x0000000000000001
	branch rdx_861 != r12_845 l00000000004055E9
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405602:
	*r12Out = rbx_114
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405421:
	word64 r15_460 = Mem64[r13_429 + 0xFFFFFFFFFFFFDF98:word64]
	*r15Out = r15_460
	word64 r13_461 = r15_460 + rbx_114
	*r13Out = r13_461
	branch r15_460 >=u r13_461 l0000000000405612
// DataOut: ebp esp fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405612:
	rbx_114 = DPB(rbx_114, 0x00000000, 0) (alias)
	*r12Out = DPB(r12_442, 0x00000000, 0)
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> rsi:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405435:
	word64 rbx_464 = r15_460
	r12_109 = DPB(r12_442, 0x00000000, 0) (alias)
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> rsi:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405440:
	word32 eax_501 = (word32) Mem64[rdi_426:byte]
	rax_434 = DPB(rax_434, eax_501, 0) (alias)
	byte al_503 = (byte) eax_501
	branch al_503 > 0x3F l0000000000405520
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405520:
	branch al_503 < 0x41 l0000000000405460
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405528:
	branch al_503 <= 0x5F l0000000000405538
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040552C:
	branch (byte) (rax_434 - 0x0000000000000061) >u 0x1D l0000000000405460
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040544C:
	branch al_503 >= 0x25 l0000000000405538
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405454:
	branch (byte) (rax_434 - 0x0000000000000020) <=u 0x03 l0000000000405538
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405538:
	Mem751[rbx_464:byte] = al_503
	word64 r15_750 = r15_460 + 0x0000000000000001
	word64 r12_752 = r12_109 + 0x0000000000000001
	word64 rbx_753 = rbx_464 + 0x0000000000000001
	branch r15_750 <u r13_461 l0000000000405440
	Mem757[rbx_753:byte] = al_503
	r15_460 = r15_750 + 0x0000000000000001
	*r15Out = r15_460
	r12_109 = r12_752 + 0x0000000000000001
	*r12Out = r12_109
	rbx_464 = rbx_753 + 0x0000000000000001
	branch r15_750 + 0x0000000000000001 <u r13_461 l0000000000405440
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040554F:
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> r12:<invalid> rsi:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405460:
	Mem550[rbp_118 + 0xFFFFFFFFFFFFDFB0:word64] = 0x0000000000000000
// DataOut: ebp esp fs r11 r11d r12 r13 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405470:
	word64 rdx_565
	word64 r14_568
	word32 esi_570
	word64 rbx_571
	byte SCZO_572
	word64 rcx_573
	word32 eax_576
	byte SZO_577
	byte C_578
	byte CZ_579
	byte Z_580
	word32 edx_581
	word64 r12_582
	word32 r12d_583
	word16 dx_584
	word64 r15_585
	byte al_586
	byte SO_587
	byte dl_588
	word32 edi_589
	byte S_590
	word32 ecx_591
	byte cl_592
	word16 ax_593
	word32 ebx_594
	word64 r11_595
	word64 r9_596
	word32 ebp_597
	call mbrtowc (retsize: 8; depth: 8)
		uses: al_503,ax_504,C_493,cl_472,CZ_547,dl_544,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_479,eax_501,ebp_489,ebx_496,ecx_473,edi_557,edx_546,esi_561,fs_482,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_471,r12_491,r12d_490,r13_552,r14_486,r15_551,r8_488,r9_470,rax_502,rbp_553,rbx_495,rcx_555,rdi_556,rdx_558,rsi_560,rsp_500,S_474,SCZO_559,SO_545,SZO_549,Z_492
		defs: al_586,ax_593,C_578,cl_592,CZ_579,dl_588,dx_584,eax_576,ebp_597,ebx_594,ecx_591,edi_589,edx_581,esi_570,fs_575,r11_595,r12_582,r12d_583,r13_569,r14_568,r15_585,r8_564,r9_596,rax_574,rbp_563,rbx_571,rcx_573,rdi_566,rdx_565,rsi_567,rsp_562,S_590,SCZO_572,SO_587,SZO_577,Z_580
	word64 r14_600 = rax_434
	*r14Out = r14_600
	branch rax_434 == 0xFFFFFFFFFFFFFFFF l0000000000405551
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405551:
	Mem738[rbx_571:byte] = 0x3F
	r15_460 = r15_585 + 0x0000000000000001
	*r15Out = r15_460
	r12_109 = r12_582 + 0x0000000000000001
	*r12Out = r12_109
	rbx_464 = rbx_571 + 0x0000000000000001
	branch r15_585 + 0x0000000000000001 <u r13_461 l0000000000405440
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405569:
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405499:
	branch rax_434 == 0xFFFFFFFFFFFFFFFE l000000000040556B
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040556B:
	Mem730[rbx_571:byte] = 0x3F
	r15_460 = r13_461
	*r15Out = r15_460
	r12_109 = r12_582 + 0x0000000000000001
	*r12Out = r12_109
	rbx_464 = rbx_571 + 0x0000000000000001
	branch r13_461 <u r13_461 l0000000000405440
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405582:
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054A3:
	branch rax_434 != 0x0000000000000000 l00000000004054B5
// DataOut: al eax ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054B1_1:
// DataOut: al eax ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:0x00000001 rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> ecx:<invalid> ax:0x0001 r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:0x01 cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054B5:
	word64 rsp_612
	word64 rbp_613
	word64 r8_614
	word64 rdx_615
	word64 rdi_616
	word64 rsi_617
	word64 r14_618
	word64 r13_619
	word32 esi_620
	word64 rbx_621
	byte SCZO_622
	word64 rcx_623
	word64 rax_624
	selector fs_625
	word32 eax_626
	byte SZO_627
	byte C_628
	byte CZ_629
	byte Z_630
	word32 edx_631
	word64 r12_632
	word32 r12d_633
	word16 dx_634
	word64 r15_635
	byte al_636
	byte SO_637
	byte dl_638
	word32 edi_639
	byte S_640
	word32 ecx_641
	byte cl_642
	word16 ax_643
	word32 ebx_644
	word64 r11_645
	word64 r9_646
	word32 ebp_647
	call wcwidth (retsize: 8; depth: 8)
		uses: al_610,ax_611,C_607,cl_592,CZ_579,dl_588,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_584,eax_608,ebp_597,ebx_594,ecx_591,edi_603,edx_581,esi_570,fs_575,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_595,r12_582,r12d_583,r13_569,r14_600,r15_585,r8_564,r9_596,rax_609,rbp_563,rbx_571,rcx_573,rdi_604,rdx_565,rsi_567,rsp_562,S_590,SCZO_601,SO_587,SZO_605,Z_606
		defs: al_636,ax_643,C_628,cl_642,CZ_629,dl_638,dx_634,eax_626,ebp_647,ebx_644,ecx_641,edi_639,edx_631,esi_620,fs_625,r11_645,r12_632,r12d_633,r13_619,r14_618,r15_635,r8_614,r9_646,rax_624,rbp_613,rbx_621,rcx_623,rdi_616,rdx_615,rsi_617,rsp_612,S_640,SCZO_622,SO_637,SZO_627,Z_630
	branch false l0000000000405510
// DataOut: al eax ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:0x00000001 rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> ecx:<invalid> ax:0x0001 r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:0x01 cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405510:
	Mem721[rbx_621:byte] = 0x3F
// DataOut: eax ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054BE:
	word64 rsi_694 = r15_635 + r14_618
	word64 rdx_696 = rbx_621
	r15_700 = r15_635
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054C8:
	word64 r15_700
	rdx_696 = rdx_696 + 0x0000000000000001
	Mem711[rdx_696 - 0x0000000000000001:byte] = (byte) (word32) Mem550[rdi_616 - 0x0000000000000001:byte]
	r15_700 = r15_700 + 0x0000000000000001
	branch r15_700 != rsi_694 l00000000004054C8
// DataOut: al ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054DD:
// DataOut: eax ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054E5:
	word64 rdx_656
	word64 r14_659
	word32 esi_661
	byte SCZO_663
	word64 rcx_664
	word32 eax_667
	byte SZO_668
	byte C_669
	byte CZ_670
	byte Z_671
	word32 edx_672
	word32 r12d_674
	word16 dx_675
	byte al_677
	byte SO_678
	byte dl_679
	word32 edi_680
	byte S_681
	word32 ecx_682
	byte cl_683
	word16 ax_684
	word32 ebx_685
	word64 r11_686
	word64 r9_687
	word32 ebp_688
	call mbsinit (retsize: 8; depth: 8)
		uses: al_636,ax_643,C_650,cl_642,CZ_629,dl_638,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_634,eax_626,ebp_647,ebx_644,ecx_641,edi_652,edx_631,esi_620,fs_625,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_645,r12_632,r12d_633,r13_619,r14_618,r15_635,r8_614,r9_646,rax_624,rbp_613,rbx_621,rcx_623,rdi_651,rdx_615,rsi_617,rsp_612,S_649,SCZO_622,SO_637,SZO_648,Z_630
		defs: al_677,ax_684,C_669,cl_683,CZ_670,dl_679,dx_675,eax_667,ebp_688,ebx_685,ecx_682,edi_680,edx_672,esi_661,fs_666,r11_686,r12_673,r12d_674,r13_660,r14_659,r15_676,r8_655,r9_687,rax_665,rbp_654,rbx_662,rcx_664,rdi_657,rdx_656,rsi_658,rsp_653,S_681,SCZO_663,SO_678,SZO_668,Z_671
	branch eax_667 == 0x00000000 l0000000000405470
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> r12:<invalid> ecx:<invalid> ax:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004054F9:
	branch r15_460 <u r13_461 l0000000000405440
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> r12:<invalid> ecx:<invalid> ax:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405502:
	rbx_114 = rbx_464 - Mem64[rbp_118 + 0xFFFFFFFFFFFFDF98:word64]
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> r12:<invalid> rsi:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405350:
	branch Mem64[rbp_118 + 0xFFFFFFFFFFFFDF90:word64] == 0x0000000000000000 l0000000000405379
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040535A:
	word64 rdx_297
	word64 rdi_298
	word64 r14_300
	word64 r13_301
	word32 esi_302
	byte SCZO_304
	word64 rcx_305
	word64 rax_306
	word32 eax_308
	byte SZO_309
	byte C_310
	byte CZ_311
	byte Z_312
	word32 edx_313
	word64 r12_314
	word32 r12d_315
	word16 dx_316
	word64 r15_317
	byte al_318
	byte SO_319
	byte dl_320
	word32 edi_321
	byte S_322
	word32 ecx_323
	byte cl_324
	word16 ax_325
	word32 ebx_326
	word64 r11_327
	word64 r9_328
	word32 ebp_329
	call __ctype_get_mb_cur_max (retsize: 8; depth: 8)
		uses: al_80,ax_81,C_77,cl,CZ_63,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx,eax_79,ebp_8,ebx_57,ecx,edi_67,edx,esi_70,fs,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_66,r12_75,r12d,r13_71,r14_72,r15_68,r8_74,r9_65,rax_78,rbp_84,rbx_56,rcx_69,rdi_83,rdx_73,rsi_82,rsp_85,S,SCZO_284,SO,SZO_76,Z_285
		defs: al_318,ax_325,C_310,cl_324,CZ_311,dl_320,dx_316,eax_308,ebp_329,ebx_326,ecx_323,edi_321,edx_313,esi_302,fs_307,r11_327,r12_314,r12d_315,r13_301,r14_300,r15_317,r8_296,r9_328,rax_306,rbp_295,rbx_303,rcx_305,rdi_298,rdx_297,rsi_299,rsp_294,S_322,SCZO_304,SO_319,SZO_309,Z_312
	branch rax_306 <=u 0x0000000000000001 l00000000004053CD
// DataOut: ebp esp fs r11 r11d r13 r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053CD:
	word64 r14_349 = Mem64[r13_301 + 0xFFFFFFFFFFFFDF98:word64]
	*r14Out = r14_349
	word64 r13_350 = r14_349 + rbx_114
	*r13Out = r13_350
	branch r14_349 >=u r13_350 l000000000040560A
// DataOut: ebp esp fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040560A:
	*r12Out = DPB(r12_314, 0x00000000, 0)
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053E1:
	word64 rdi_357
	word64 r14_359
	word64 r13_360
	word32 esi_361
	byte SCZO_363
	word64 rcx_364
	word64 rax_365
	word32 eax_367
	byte SZO_368
	byte C_369
	byte CZ_370
	byte Z_371
	word32 edx_372
	word64 r12_373
	word32 r12d_374
	word16 dx_375
	word64 r15_376
	byte al_377
	byte SO_378
	byte dl_379
	word32 edi_380
	byte S_381
	word32 ecx_382
	byte cl_383
	word16 ax_384
	word32 ebx_385
	word64 r11_386
	word64 r9_387
	word32 ebp_388
	word64 rdx_356
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_318,ax_325,C_352,cl_324,CZ_331,dl_320,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_316,eax_308,ebp_329,ebx_326,ecx_323,edi_321,edx_313,esi_302,fs_307,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_327,r12_314,r12d_315,r13_350,r14_349,r15_317,r8_296,r9_328,rax_306,rbp_295,rbx_303,rcx_305,rdi_298,rdx_297,rsi_299,rsp_294,S_322,SCZO_351,SO_319,SZO_309,Z_312
		defs: al_377,ax_384,C_369,cl_383,CZ_370,dl_379,dx_375,eax_367,ebp_388,ebx_385,ecx_382,edi_380,edx_372,esi_361,fs_366,r11_386,r12_373,r12d_374,r13_360,r14_359,r15_376,r8_355,r9_387,rax_365,rbp_354,rbx_362,rcx_364,rdi_357,rdx_356,rsi_358,rsp_353,S_381,SCZO_363,SO_378,SZO_368,Z_371
	r12_109 = DPB(r12_373, 0x00000000, 0) (alias)
	word64 rcx_393 = Mem64[rax_365:word64]
	word64 rax_396 = r14_359
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053F0:
	rdx_356 = DPB(rdx_356, (word32) Mem64[rax_396:byte], 0) (alias)
	r12_109 = r12_109 - 0xFF - (((word16) ((word32) Mem64[rcx_393 + rdx_356 * 0x0002:word16]) & 0x4000) <u 0x0001)
	*r12Out = r12_109
	rax_396 = rax_396 + 0x0000000000000001
	branch rax_396 != r13_360 l00000000004053F0
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r12:<invalid> rsi:<invalid> r15:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040540D:
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r12:<invalid> rsi:<invalid> r15:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405365:
	word32 ebx_338
	word64 r12_342
	word64 r13_343
	word64 r14_344
	word64 r15_345
	*r12Out = (int64) fn000000000040D240(0x00000000, rbx_114, Mem64[rbp_118 + 0xFFFFFFFFFFFFDF98:word64], fs, out ebx_338, out rsp_119, out rbp_118, out rsi_116, out r12_342, out r13_343, out r14_344, out r15_345)
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405379:
	word64 rcx_120 = Mem64[rbp_118 + 0xFFFFFFFFFFFFDF88:word64]
	branch rcx_120 == 0x0000000000000000 l0000000000405399
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15:<invalid> ebx:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405385:
	word64 rdx_251
	word64 rdi_252
	word64 r14_254
	word64 r13_255
	word32 esi_256
	byte SCZO_258
	word64 rcx_259
	word64 rax_260
	word32 eax_262
	byte SZO_263
	byte C_264
	byte CZ_265
	byte Z_266
	word32 edx_267
	word32 r12d_269
	word16 dx_270
	word64 r15_271
	byte al_272
	byte SO_273
	byte dl_274
	word32 edi_275
	byte S_276
	word32 ecx_277
	byte cl_278
	word16 ax_279
	word32 ebx_280
	word64 r11_281
	word64 r9_282
	word32 ebp_283
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: al_112,ax_113,C_123,cl_90,CZ_99,dl_94,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_97,eax_111,ebp_107,ebx_115,ecx_91,edi_93,edx_98,esi_246,fs_100,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_89,r12_109,r12d_108,r13_103,r14_104,r15_96,r8_106,r9_88,rax_110,rbp_118,rbx_114,rcx_120,rdi_244,rdx_245,rsi_247,rsp_119,S_92,SCZO_101,SO_95,SZO_121,Z_122
		defs: al_272,ax_279,C_264,cl_278,CZ_265,dl_274,dx_270,eax_262,ebp_283,ebx_280,ecx_277,edi_275,edx_267,esi_256,fs_261,r11_281,r12_268,r12d_269,r13_255,r14_254,r15_271,r8_250,r9_282,rax_260,rbp_249,rbx_257,rcx_259,rdi_252,rdx_251,rsi_253,rsp_248,S_276,SCZO_258,SO_273,SZO_263,Z_266
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15:<invalid> ebx:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405399:
	branch Mem64[rbp_118 + 0xFFFFFFFFFFFFDF90:word64] == 0x0000000000000000 l00000000004053A8
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15:<invalid> ebx:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053A5:
	Mem243[r8_106:word64] = r12_109
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15:<invalid> ebx:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053A8:
	word64 rbx_165 = Mem64[rbp_118 - 0x0000000000000038:word64] ^ Mem64[fs:0x00000028:word64]
	branch rbx_165 != 0x0000000000000000 l000000000040561C
// DataOut: ebp ebx esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15:<invalid> ebx:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040561C:
	__stack_chk_fail()
	word64 rsp_209 = rsp_119 - 0x0000000000000004
	Mem210[rsp_209:word32] = rsp_119
	Mem212[rsp_209 - 0x0000000000000004:word32] = rbp_118
	Mem214[rsp_209 - 0x0000000000000008:word32] = rbx_165
	word64 rax_215 = Mem214[rsi_116 + 0x0000000000000018:word64]
	word64 rbp_219 = Mem214[rsi_116 + 0x0000000000000010:word64]
	word64 r12_222 = rax_215 - rbp_219
	word64 r12_225 = DPB(r12_222, (word32) r12_222 >>u 0x00000003, 0)
	*r12Out = r12_225
	branch r12_225 == 0x0000000000000000 l00000000004056DB
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15:<invalid> ebx:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405649_thunk_fn000000000040564F:
	word64 rbx_236
	word64 rbp_237
	word64 rsi_238
	return fn000000000040564F(rax_215, rbp_219, rsi_116, r12_225, out rbx_236, out rbp_237, out rsi_238)
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):<invalid> -8312(fp):fp - 0x0000000000000004 -8308(fp):<invalid> -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000405649_thunk_fn000000000040564F:
	word64 rbx_229
	word64 rbp_230
	word64 rsi_231
	return fn000000000040564F(rax_215, rbp_219, rsi_116, r12_225, out rbx_229, out rbp_230, out rsi_231)
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):<invalid> -8312(fp):fp - 0x0000000000000004 -8308(fp):<invalid> -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053BE:
	word64 rbx_195
	*rbxOut = Mem64[rbp_118 - 0x0000000000000028:word64]
	return rbx_114
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15:<invalid> ebx:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

fn00000000004052D0_exit:
// DataOut: r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> r12d:<invalid> edx:<invalid> r15:<invalid> ebx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):<invalid> -8312(fp):fp - 0x0000000000000004 -8308(fp):<invalid> -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp



void fn0000000000405630(word64 rsi, word64 qwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn0000000000405630_entry:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l0000000000405630:
	word64 rax_13 = Mem0[rsi + 0x0000000000000018:word64]
	word64 rbp_14 = Mem0[rsi + 0x0000000000000010:word64]
	word64 r12_16 = rax_13 - rbp_14
	word64 r12_19 = DPB(r12_16, (word32) r12_16 >>u 0x00000003, 0)
	branch r12_19 == 0x0000000000000000 l00000000004056DB_in_fn0000000000405630
// DataOut: r12 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l00000000004056DB_in_fn0000000000405630:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> r12d:r12d >>u 0x00000003 -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000405649_thunk_fn000000000040564F:
	word64 rbx_28
	word64 rbp_29
	word64 rsi_30
	word64 rax_31 = fn000000000040564F(rax_13, rbp_14, rsi, r12_19, out rbx_28, out rbp_29, out rsi_30)
	return
// DataOut: r12 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> r12d:r12d >>u 0x00000003 -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000405649_thunk_fn000000000040564F:
	word64 rbx_32
	word64 rbp_33
	word64 rsi_34
	fn000000000040564F(rax_31, rbp_29, rsi_30, r12_19, out rbx_32, out rbp_33, out rsi_34)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> r12d:r12d >>u 0x00000003 rcx:<invalid> edx:<invalid> rdx:<invalid> rbx:<invalid> ebx:<invalid> rsi:<invalid> eax:<invalid> esi:<invalid> edi:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000405630_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbp:<invalid> r12:<invalid> r12d:r12d >>u 0x00000003 rbx:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> ebx:<invalid> rsi:<invalid> eax:<invalid> esi:<invalid> edi:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040564F(word64 rax, word64 rbp, word64 rsi, word64 r12, ptr64 & rbxOut, ptr64 & rbpOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r12 rax rbp rsi
// LiveOut: rax rbp rbx rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040564F_entry:
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l000000000040564F:
	branch rax == rbp l00000000004056E6
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004056E6:
	Mem139[rsi + 0x0000000000000050:byte] = Mem0[rsi + 0x0000000000000050:byte] | 0x02
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3

l0000000000405658:
	word64 rcx_10 = (int64) Mem0[rsi + 0x0000000000000030:word32]
	word32 edx_16 = ~(word32) rcx_10
	word64 rcx_14 = Mem0[rsi + 0x0000000000000020:word64]
	word64 rdx_18 = (int64) edx_16 & rax + rcx_10
	word64 rax_19 = Mem0[rsi + 0x0000000000000008:word64]
	Mem21[rsi + 0x0000000000000018:word64] = rdx_18
	word64 rdx_23 = rdx_18 - rax_19
	branch rdx_23 > rcx_14 - rax_19 l00000000004056E0
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rcx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3

l00000000004056E0:
	Mem137[rsi + 0x0000000000000018:word64] = rcx_14
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> edx:<invalid> rax:<invalid> rdx:<invalid> rbx:<invalid>

l0000000000405683:
	word64 rax_26 = Mem21[rsi + 0x0000000000000018:word64]
	Mem31[rsi + 0x0000000000000010:word64] = rax_26
	word64 rsp_33
	word64 rbp_35
	byte SCZO_36
	byte Z_37
	word64 rcx_39
	word32 ecx_40
	word32 edx_41
	word64 rdx_42
	byte SZO_43
	byte C_44
	word32 ebx_46
	word32 eax_47
	word32 esi_48
	word32 edi_49
	word64 r12_51
	byte CZ_52
	word64 rdi_50
	word64 rsi_38
	word64 rax_34
	word64 rbx_45
	call fputs_unlocked (retsize: 8; depth: 8)
		uses: C_30,ebx_27,ecx_15,edx_16,rax_26,rbp,rbx_28,rcx_14,rdx_23,rsi_32,rsp_1,SCZO_24,SZO_29,Z_5
		defs: C_44,CZ_52,eax_47,ebx_46,ecx_40,edi_49,edx_41,esi_48,r12_51,rax_34,rbp_35,rbx_45,rcx_39,rdi_50,rdx_42,rsi_38,rsp_33,SCZO_36,SZO_43,Z_37
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> edx:<invalid> rax:<invalid> rdx:<invalid> rbx:<invalid>

l00000000004056A0:
	rsi_38 = DPB(rsi_38, 0x00413759, 0) (alias)
	*rsiOut = rsi_38
	rdi_50 = DPB(rdi_50, 0x00000001, 0) (alias)
	rbx_45 = rbx_45 + 0x0000000000000001
	rax_34 = DPB(rax_34, __printf_chk(rdi_50, rsi_38), 0)
	branch r12_51 >u rbx_45 l00000000004056A0
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> edx:<invalid> rax:<invalid> rdx:<invalid> rbx:<invalid> ebx:<invalid> rsi:<invalid> eax:<invalid> esi:0x00413759 edi:0x00000001

l00000000004056BF:
	word64 rdi_69 = Mem31[0x000000000061A610:word64]
	word64 rax_71 = Mem31[rdi_69 + 0x0000000000000028:word64]
	branch rax_71 >=u Mem31[rdi_69 + 0x0000000000000030:word64] l00000000004056EF
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> edx:<invalid> rax:<invalid> rdx:<invalid> rbx:<invalid> ebx:<invalid> rsi:<invalid> eax:<invalid> esi:0x00413759 edi:0x00000001

l00000000004056EF:
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> edx:<invalid> rax:<invalid> rdx:<invalid> rbx:<invalid> ebx:<invalid> rsi:<invalid> eax:<invalid> esi:0x00413759 edi:<invalid> rdi:<invalid>

l0000000000402400_in_fn00000000004052D0:
	word64 rsp_117
	word64 rax_118
	word64 rbp_119
	byte SCZO_120
	byte Z_121
	word64 rsi_122
	word64 rcx_123
	word32 ecx_124
	word32 edx_125
	word64 rdx_126
	byte SZO_127
	byte C_128
	word64 rbx_129
	word32 ebx_130
	word32 eax_131
	word32 esi_132
	word32 edi_133
	word64 rdi_134
	word64 r12_135
	byte CZ_136
	call Mem31[0x000000000061A148:word32] (retsize: 4; depth: 4)
		uses: C_74,CZ_68,eax_72,ebx_109,ecx_40,edi_70,edx_41,esi_115,r12_51,rax_71,rbp_111,rbx_108,rcx_39,rdi_69,rdx_57,rsi_116,rsp_114,SCZO_73,SZO_43,Z_37
		defs: C_128,CZ_136,eax_131,ebx_130,ecx_124,edi_133,edx_125,esi_132,r12_135,rax_118,rbp_119,rbx_129,rcx_123,rdi_134,rdx_126,rsi_122,rsp_117,SCZO_120,SZO_127,Z_121
	return rax_118
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> rdx:<invalid> rbx:<invalid> ebx:<invalid> rsi:<invalid> eax:<invalid> esi:0x0000000A edi:<invalid> rdi:<invalid> rbp:<invalid>

l00000000004056D0:
	Mem99[rdi_69 + 0x0000000000000028:word64] = rax_71 + 0x0000000000000001
	Mem100[rax_71:byte] = 0x0A
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> edx:<invalid> rax:<invalid> rdx:<invalid> rbx:<invalid> ebx:<invalid> rsi:<invalid> eax:<invalid> esi:0x00413759 edi:<invalid> rdi:<invalid>

l00000000004056DB:
	word64 rbx_101
	*rbxOut = Mem100[rsp_33:word64]
	word64 rbp_104
	*rbpOut = Mem100[rsp_33 + 0x0000000000000008:word64]
	return rax_71
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:v3 rcx:<invalid> edx:<invalid> rax:<invalid> rdx:<invalid> rbx:<invalid> ebx:<invalid> rsi:<invalid> eax:<invalid> esi:0x00413759 edi:<invalid> rdi:<invalid>

fn000000000040564F_exit:
// DataOut: rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> rdx:<invalid> rbx:<invalid> ebx:<invalid> rsi:<invalid> eax:<invalid> esi:<invalid> edi:<invalid> rdi:<invalid> rbp:<invalid>



word64 fn0000000000405700(word64 rax, word32 edx, word64 rdi, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13dOut, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rax rdi
// LiveOut: r12 r13d r14 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405700_entry:
	*r13dOut = r13d
	*r14Out = r14
	*r12Out = r12
// DataOut: edx fs r11 r11d r12 r13d r14 r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405700:
	word64 rbp_109
	word64 rsp_129 = fp - 0x0000000000000010
	branch rdi == 0x0000000000000000 l0000000000405780
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405780:
	rbp_109 = (int64) edx
	word64 rax_201 = DPB(rax, __printf_chk(DPB(rdi, 0x00000001, 0), DPB(rsi, 0x0041375E, 0)), 0)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rdi ebx:edx -8(fp):rbx -4(fp):rbp

l0000000000405710:
	word32 ebx_61
	word64 rsp_62
	word64 rbp_63
	word64 rsi_64
	word64 r12_65
	word64 r13_66
	word64 r14_67
	word64 r15_68
	word32 eax_69 = fn000000000040D420(rax, 0x00000000, rdi, fs, qwLoc18, out ebx_61, out rsp_62, out rbp_63, out rsi_64, out r12_65, out r13_66, out r14_67, out r15_68)
	word32 ebx_71 = ebx_61 - eax_69
	branch ebx_71 >= 0x00000000 l0000000000405728
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rdi ebx:edx -8(fp):rbx -4(fp):rbp

l0000000000405725_1:
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> esi:<invalid> rsi:<invalid> eax:0x00000000 ebp:<invalid> rax:<invalid> edx:<invalid> rdi:<invalid> r15d:<invalid> r13:<invalid> rcx:<invalid> rbx:<invalid> r14d:<invalid> r12d:<invalid> rdx:<invalid> edi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405728:
	word64 rbp_83
	word64 rdi_84
	word64 rbx_85
	word32 edx_87
	byte SCZO_88
	byte SZO_89
	byte C_90
	byte Z_91
	word32 esi_92
	word64 rsi_93
	word32 eax_94
	byte S_95
	word64 rax_96
	word64 rcx_97
	word64 rdx_98
	word32 edi_99
	selector fs_100
	word64 r12_101
	word32 r13d_102
	word64 r14_103
	word64 r13_104
	word64 r15_105
	word32 ebx_123
	call fputs_unlocked (retsize: 8; depth: 8)
		uses: C_57,dwLoc04_4,dwLoc08_9,eax_75,ebx_71,edi,edx,esi_53,fs,qwLoc18,r12_65,r13_66,r13d,r14_67,r15_68,rax_76,rbp_63,rbx_72,rcx,rdi_77,rdx,rsi_70,rsp_62,S_74,SCZO_73,SZO_56,Z_15
		defs: C_90,eax_94,ebx_86,edi_99,edx_87,esi_92,fs_100,r12_101,r13_104,r13d_102,r14_103,r15_105,rax_96,rbp_83,rbx_85,rcx_97,rdi_84,rdx_98,rsi_93,rsp_82,S_95,SCZO_88,SZO_89,Z_91
	rbp_109 = (int64) ebx_123 + DPB(rax_96, strlen(rbp_83), 0)
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> esi:<invalid> rsi:<invalid> eax:0x00000000 ebp:<invalid> rax:<invalid> edx:<invalid> rdi:<invalid> r15d:<invalid> r13:<invalid> rcx:<invalid> rbx:<invalid> r14d:<invalid> r12d:<invalid> rdx:<invalid> edi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405740:
	word64 rdi_130 = Mem0[0x000000000061A610:word64]
	word64 rcx_132 = Mem0[rdi_130 + 0x0000000000000028:word64]
	branch rcx_132 >=u Mem0[rdi_130 + 0x0000000000000030:word64] l0000000000405799
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> esi:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> ebp:<invalid> edx:<invalid> rcx:<invalid> rdx:<invalid> r15d:<invalid> r13:<invalid> rbx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405799:
	word64 rdi_167
	word64 rbx_168
	word32 edx_170
	byte SCZO_171
	byte SZO_172
	byte C_173
	byte Z_174
	word32 esi_175
	word64 rsi_176
	word32 eax_177
	byte S_178
	word64 rax_179
	word64 rcx_180
	word64 rdx_181
	word32 edi_182
	selector fs_183
	word64 r12_184
	word32 r13d_185
	word64 r14_186
	word64 r13_187
	word64 r15_188
	call __overflow (retsize: 8; depth: 8)
		uses: C_134,dwLoc04_4,dwLoc08_9,eax_126,ebx_123,edi_131,edx_121,esi_164,fs_116,qwLoc18,r12_115,r13_112,r13d_114,r14_113,r15_111,rax_125,rbp_128,rbx_127,rcx_132,rdi_130,rdx_122,rsi_118,rsp_129,S_117,SCZO_133,SZO_120,Z_124
		defs: C_173,eax_177,ebx_169,edi_182,edx_170,esi_175,fs_183,r12_184,r13_187,r13d_185,r14_186,r15_188,rax_179,rbp_166,rbx_168,rcx_180,rdi_167,rdx_181,rsi_176,rsp_165,S_178,SCZO_171,SZO_172,Z_174
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> esi:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> rcx:<invalid> ebp:<invalid> edx:<invalid> rdx:<invalid> r15d:<invalid> r13:<invalid> rbx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405751:
	Mem162[rdi_130 + 0x0000000000000028:word64] = rcx_132 + 0x0000000000000001
	Mem163[rcx_132:byte] = 0x20
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> esi:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> rcx:<invalid> ebp:<invalid> edx:<invalid> rdx:<invalid> r15d:<invalid> r13:<invalid> rbx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> -8(fp):rbx -4(fp):rbp

l000000000040575C:
	ebx_123 = ebx_123 - 0x00000001
	branch ebx_123 != 0xFFFFFFFF l0000000000405740
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> esi:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> ebp:<invalid> edx:<invalid> r15d:<invalid> r13:<invalid> rbx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405764:
	word64 rax_39 = rbp_109 + 0x0000000000000001 + Mem0[0x000000000061B018:word64]
	Mem41[0x000000000061B018:word64] = rax_39
	word64 rsp_42 = rsp_129 + 0x0000000000000008
	word64 rbp_46
	*rbpOut = Mem41[rsp_42 + 0x0000000000000008:word64]
	word64 rsp_47
	*rspOut = rsp_42 + 0x0000000000000010
	return rax_39
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rcx:<invalid> edi:<invalid> esi:<invalid> eax:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> ebp:<invalid> edx:<invalid> r15d:<invalid> r13:<invalid> rbx:<invalid> r14d:<invalid> r12d:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405700_exit:
// DataOut: r12 r13d r14 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rcx:<invalid> edi:<invalid> esi:<invalid> eax:<invalid> rax:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> ebp:<invalid> edx:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn00000000004057B0(byte dl, word64 rsi, word32 edi, word64 r8, word64 r12, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13dOut, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edi esi fs r12 r8 rsi
// LiveOut: r12 r13d r14 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn00000000004057B0_entry:
// DataOut: dl edi esi fs r11 r11d r12 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004057B0:
	word64 rax_23 = DPB(rax, 0x00413764, 0)
	branch dl == 0x00 l00000000004057CB
// DataOut: edi esi fs r11 r11d r12 r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004057C0:
	rax_23 = DPB(rax, 0x00000000, 0) (alias)
	branch Mem0[0x000000000061B145:byte] == 0x00 l00000000004057E0
// DataOut: edi esi fs r11 r11d r12 r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 eax:0x00413764 ebx:edi -4(fp):rbx

l00000000004057E0:
	word64 rsp_56
	word32 ebp_57
	rax_23 = fn000000000040C9B0(rsi, edi, r8, r12, out rsp_56, out ebp_57)
	esi = Mem0[rsp_56 + 0x000000000000000C:word32]
// DataOut: esi fs r11 r11d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 eax:0x00000000 ebx:edi -4(fp):rbx

l00000000004057CB:
// DataOut: edx fs r11 r11d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> eax:<invalid> ebx:edi esi:<invalid> ebp:<invalid> rbx:<invalid> rbp:<invalid> rdx:<invalid> rax:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> -8(fp):esi -4(fp):rbx

l00000000004057D8_thunk_fn0000000000405700:
	word64 rsp_36
	word64 rbp_37
	word64 r12_38
	word32 r13d_39
	word64 r14_40
	return fn0000000000405700(rax_23, esi, rax_23, fs, out rsp_36, out rbp_37, out r12_38, out r13d_39, out r14_40)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> eax:<invalid> ebx:<invalid> edx:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> esi:<invalid> ebp:<invalid> rbp:<invalid> rdx:<invalid> rax:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> -8(fp):esi -4(fp):rbx

fn00000000004057B0_exit:
// DataOut: r12 r13d r14 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> eax:<invalid> ebx:<invalid> edx:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> esi:<invalid> rbp:<invalid> rcx:<invalid> edi:<invalid> rax:<invalid> ebp:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -8(fp):esi -4(fp):rbx



void fn0000000000405810(word64 rdx, word32 ebp, word32 esi, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp esi fs r11 rdx
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405810_entry:
// DataOut: ebp esi fs r11 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405810:
	word32 ebx_17 = (word32) rsi
	byte r12b_21 = fn000000000040EAB0(ebx_17, ebp, rdx, r11, fs)
	word64 rax_24 = __errno_location()
	word64 rsp_33
	word32 r12d_34
	word32 edi_35
	word64 rdi_36
	word64 rdx_37
	word64 rbp_38
	word64 rbx_39
	word64 rsi_40
	word64 rax_41
	word32 esi_42
	byte SZO_43
	byte C_44
	word32 eax_45
	word64 rcx_46
	byte r12b_47
	byte Z_48
	word32 ebp_49
	word64 r11_50
	selector fs_51
	word32 ebx_52
	call error (retsize: 8; depth: 8)
		uses: C_30,dwLoc04_4,dwLoc08_11,dwLoc0C_14,eax_28,ebp,ebx_17,edi_27,esi_26,fs,r11,r12b_21,r12d_6,rax_24,rbp_23,rbx_16,rcx_31,rdi_8,rdx_32,rsi,rsp_12,SZO_29
		defs: C_44,eax_45,ebp_49,ebx_52,edi_35,esi_42,fs_51,r11_50,r12b_47,r12d_34,rax_41,rbp_38,rbx_39,rcx_46,rdi_36,rdx_37,rsi_40,rsp_33,SZO_43,Z_48
	branch r12b_47 == 0x00 l0000000000405850
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405850:
	branch Mem0[0x000000000061B030:word32] != 0x00000000 l000000000040584A
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12d:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> esi:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r8b:<invalid> ecx:<invalid> r9d:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> ebp:<invalid> r11:<invalid> r14:<invalid> r14d:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040585A:
	Mem82[0x000000000061B030:word32] = 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12d:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> esi:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r8b:<invalid> ecx:<invalid> r9d:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> ebp:<invalid> r11:<invalid> r14:<invalid> r14d:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000405840:
	Mem73[0x000000000061B030:word32] = 0x00000002
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12d:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> esi:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r8b:<invalid> ecx:<invalid> r9d:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> ebp:<invalid> r11:<invalid> r14:<invalid> r14d:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040584A:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12d:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> esi:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r8b:<invalid> ecx:<invalid> r9d:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> ebp:<invalid> r11:<invalid> r14:<invalid> r14d:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000405810_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12d:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> esi:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r8b:<invalid> ecx:<invalid> r9d:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> ebp:<invalid> r11:<invalid> r14:<invalid> r14d:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



byte fn0000000000405C20(word32 edx, word32 esi, byte dil, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al rsi
// Trashed: SCZO ah al ax ch cl cx eax ecx esi rax rcx rsi si sil
// Preserved: rsp
fn0000000000405C20_entry:
	*rsiOut = rsi
// DataOut: dil edx esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C20:
	byte cl_107
	byte al_110
	branch dil == 0x00 l0000000000405C40
// DataOut: dil edx esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C40:
	al_110 = 0x00 (alias)
	branch edx == 0x00000005 l0000000000405C3E
// DataOut: al dil edx esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C47:
	cl_107 = (byte) (DPB(ecx, edx == 0x00000009, 0) | (word32) (edx == 0x00000003)) (alias)
// DataOut: cl dil edx esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x00000000

l0000000000405C25:
	branch (esi & 0x0000F000) != 0x00008000 l0000000000405CA0
// DataOut: dil eax edx esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405CA0:
	cl_107 = (esi & 0x0000F000) == 0x00004000
// DataOut: cl dil edx esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:esi & 0x0000F000

l0000000000405C55:
	al_110 = 0x2F (alias)
	branch cl_107 != 0x00 l0000000000405C3E
// DataOut: al dil edx esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> cl:<invalid> al:Test(EQ,Z) ecx:<invalid>

l0000000000405C5E:
	branch Mem0[0x000000000061B12C:word32] == 0x00000001 l0000000000405CF0
// DataOut: dil edx esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0000002F cl:<invalid> al:0x2F ecx:<invalid>

l0000000000405CF0:
	return 0x00
// DataOut: al fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0000002F cl:<invalid> al:0x2F ecx:<invalid>

l0000000000405C6B:
	word32 eax_47
	branch dil == 0x00 l0000000000405CC0
// DataOut: edx esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0000002F cl:<invalid> al:0x2F ecx:<invalid>

l0000000000405CC0:
	al_110 = 0x40 (alias)
	branch edx == 0x00000006 l0000000000405C3E
// DataOut: al edx fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0000002F cl:<invalid> al:0x2F ecx:<invalid>

l0000000000405CCE:
	al_110 = 0x7C (alias)
	branch edx == 0x00000001 l0000000000405C3E
// DataOut: al edx fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x00000040 cl:<invalid> al:0x40 ecx:<invalid>

l0000000000405CDC:
	eax_47 = DPB(0x0000007C, edx == 0x00000007, 0) (alias)
// DataOut: eax fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0000007C cl:<invalid> al:0x7C ecx:<invalid>

l0000000000405C70:
	word64 rsi_54
	*rsiOut = DPB(rsi, esi & 0x0000F000, 0)
	al_110 = 0x40 (alias)
	branch (esi & 0x0000F000) == 0x0000A000 l0000000000405C3E
// DataOut: al esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0000002F cl:<invalid> al:0x2F ecx:<invalid>

l0000000000405C83:
	al_110 = 0x7C (alias)
	branch (esi & 0x0000F000) == 0x00001000 l0000000000405C3E
// DataOut: al esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x00000040 cl:<invalid> al:0x40 ecx:<invalid> esi:esi & 0x0000F000

l0000000000405C90:
	eax_47 = DPB(0x0000007C, (esi & 0x0000F000) == 0x0000C000, 0) (alias)
// DataOut: eax fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0000007C cl:<invalid> al:0x7C ecx:<invalid> esi:esi & 0x0000F000

l0000000000405CE2:
	return (byte) (-eax_47 & 0x0000003D)
// DataOut: al fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> cl:<invalid> al:Test(EQ,Z) ecx:<invalid> esi:esi & 0x0000F000

l0000000000405C33:
	al_110 = 0x00 (alias)
	branch Mem0[0x000000000061B12C:word32] == 0x00000003 l0000000000405CB0
// DataOut: al esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:esi & 0x0000F000

l0000000000405CB0:
	word64 rsi_96
	*rsiOut = DPB(rsi, esi & 0x00000049, 0)
	return (byte) (~(0x00000000 - ((esi & 0x00000049) <u 0x00000001)) & 0x0000002A)
// DataOut: al fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:esi & 0x0000F000 ^ esi & 0x0000F000

l0000000000405C3E:
	return al_110
// DataOut: al fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> cl:<invalid> al:<invalid> ecx:<invalid> esi:esi & 0x0000F000

fn0000000000405C20_exit:
// DataOut: al rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> esi:<invalid> cl:<invalid> al:<invalid> ecx:<invalid>



word64 fn0000000000405D00(word32 edx, word32 esi, byte dil, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi esp rax rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405D00_entry:
// DataOut: dil edx esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D00:
	word32 edi_6 = (word32) dil
	word64 rdi_8
	*rdiOut = DPB(rdi, edi_6, 0)
	word64 rsi_12
	byte al_13 = fn0000000000405C20(edx, esi, (byte) edi_6, out rsi_12)
	branch al_13 == 0x00 l0000000000405D33
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D10:
	word64 rdi_47 = Mem0[0x000000000061A610:word64]
	*rdiOut = rdi_47
	word64 rax_50 = Mem0[rdi_47 + 0x0000000000000028:word64]
	branch rax_50 >=u Mem0[rdi_47 + 0x0000000000000030:word64] l0000000000405D3A
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:(word32) dil ebx:<invalid> eax:<invalid> esi:<invalid> cl:<invalid> al:<invalid> ecx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D3A:
	word64 rsp_80
	word64 rbx_81
	word32 edi_82
	byte dil_83
	byte al_84
	byte SZO_85
	byte C_86
	word32 ebx_87
	word32 eax_88
	byte Z_89
	word64 rdi_90
	word64 rax_91
	byte SCZO_92
	word64 rdx_93
	byte bl_94
	word32 esi_95
	word32 edx_96
	word64 rsi_97
	call __overflow (retsize: 8; depth: 12)
		uses: al_51,bl_21,C_54,dil_49,dwLoc04_4,eax_52,ebx_19,edi_48,edx,esi_78,qwLoc04,rax_50,rbx_20,rdi_47,rdx,rsi_79,rsp_2,SCZO_53,SZO_16,Z_17
		defs: al_84,bl_94,C_86,dil_83,eax_88,ebx_87,edi_82,edx_96,esi_95,rax_91,rbx_81,rdi_90,rdx_93,rsi_97,rsp_80,SCZO_92,SZO_85,Z_89
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> ebx:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> esi:<invalid> cl:<invalid> al:<invalid> ecx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D21:
	Mem76[rdi_47 + 0x0000000000000028:word64] = rax_50 + 0x0000000000000001
	Mem77[rax_50:byte] = al_13
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> ebx:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> esi:<invalid> cl:<invalid> al:<invalid> ecx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D2B:
	Mem73[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> ebx:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> al:<invalid> ecx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D33:
	return fp + 0x0000000000000004
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> ebx:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> al:<invalid> ecx:<invalid> -4(fp):rbx

fn0000000000405D00_exit:
// DataOut: rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 edi:<invalid> ebx:<invalid> al:Test(NE,Z) rbx:rbx rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -4(fp):rbx



void fn00000000004061B0(word32 ebx, word32 ebp, word64 rsi, word32 edi, word64 r8, word32 r11d, word64 r12, word64 r14, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx edi fs r11d r12 r14 r14d r8 rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn00000000004061B0_entry:
// DataOut: ebp ebx edi fs r11d r12 r14 r14d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004061B0:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	ebp = edi
	rbp = DPB(rbp, ebp, 0) (alias)
	rsp = fp - 0x0000000000000008
	dwLoc08 = rbx
	rsp = fp - 0x0000000000000030
	rax = Mem0[fs:0x00000028:word64]
	qwLoc18 = rax
	eax = 0x00000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000406248
// DataOut: ebp edi esp fs r11d r12 r14 r14d r8 rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406248:
	rax = fn000000000040C9B0(rsi, edi, r8, r12, out rsp, out ebp)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	rdi = rax
	edi = (word32) rdi (alias)
	branch Test(EQ,Z) l00000000004061D1
// DataOut: ebp esp fs r11d r14 r14d rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 ebp:edi rax:<invalid> eax:0x00000000 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406259:
	esi = 0x00000000
	SZO = cond(0x00000000)
	C = false
	eax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	edx = 0x00000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000406267
// DataOut: ebp ebx fs r11d r14 r14d rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rsi:<invalid> edx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406264_1:
	edx = eax
// DataOut: ebp ebx fs r11d r14 r14d rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406267:
// DataOut: ebp ebx fs r11d r14 r14d rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004061D1:
	r8d = ebp
	ecx = 0x0041375A
	edx = 0x00000015
	esi = 0x00000001
	rdi = rsp
	eax = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rax = DPB(rax, __sprintf_chk(rdi, rsi, rdx, rcx), 0)
	rbx = rsp
	rax = rsp
// DataOut: ebp ebx fs r11d r14 r14d rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rsi:<invalid> edx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004061F3:
	ecx = Mem0[rax:word32]
	rax = rax + 0x0000000000000004
	edx = rcx + 0xFFFFFFFFFEFEFEFF
	ecx = ~ecx
	edx = edx & ecx
	edx = edx & 0x80808080
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l00000000004061F3
// DataOut: dl eax ebp ebx edx fs r11d r14 r14d rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> r8d:<invalid> ecx:<invalid> edx:<invalid> esi:0x00000001 rdi:<invalid> rbx:<invalid> rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040620B:
	ecx = edx
	ecx = ecx >>u 0x00000010
	SZO = cond(edx & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000406219
// DataOut: cl dl eax ebp ebx fs r11d r14 r14d rax rdi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> r8d:<invalid> ecx:<invalid> edx:<invalid> esi:0x00000001 rdi:<invalid> rbx:<invalid> rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406216_1:
	edx = ecx
// DataOut: dl eax ebp ebx fs r11d r14 r14d rax rdi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> r8d:<invalid> ecx:<invalid> edx:<invalid> esi:0x00000001 rdi:<invalid> rbx:<invalid> rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406219:
	rcx = rax + 0x0000000000000002
	branch Test(NE,Z) l0000000000406221
// DataOut: dl eax ebp ebx ecx fs r11d r14 r14d rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> r8d:<invalid> ecx:<invalid> edx:<invalid> esi:0x00000001 rdi:<invalid> rbx:<invalid> rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040621D_2:
	rax = rcx
// DataOut: dl eax ebp ebx fs r11d r14 r14d rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> r8d:<invalid> ecx:<invalid> edx:<invalid> esi:0x00000001 rdi:<invalid> rbx:<invalid> rcx:<invalid> rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406221:
	dl = dl + dl
	SCZO = cond(dl)
	rax = rax - 0x03 - C
	edx = eax
	edx = edx - ebx
	SCZO = cond(edx)
// DataOut: ebp ebx fs r11d r14 r14d rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> r8d:<invalid> ecx:<invalid> edx:<invalid> esi:0x00000001 rdi:<invalid> rbx:<invalid> rcx:<invalid> rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040622B:
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rsi = rsi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rsi)
	C = false
	eax = edx
	branch Test(NE,Z) l0000000000406269
// DataOut: ebp ebx r11d r14 r14d rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rbp:<invalid> rsi:<invalid> r8d:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> dl:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406269:
	__stack_chk_fail()
	eax = Mem0[rdi + 0x00000000000000A0:word32]
	r8d = Mem0[r14 + 0x00000000000000A0:word32]
	r9 = rsi
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	sil = Test(EQ,Z)
	edx = edx | esi
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l00000000004062C8
// DataOut: al dl eax ebp ebx r11d r14d rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> rbp:<invalid> r8d:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> dl:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062C8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l00000000004062A1
// DataOut: al dl eax ebp ebx r11d r14d rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rbp:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062CC:
	eax = 0xFFFFFFFF
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rbp:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062A1:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004062B8
// DataOut: dl eax ebp ebx r11d r14d rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rbp:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062A5:
	SZO = cond(dl & dl)
	C = false
	eax = 0x00000001
	branch Test(EQ,Z) l00000000004062B8
// DataOut: eax ebp ebx r11d r14d rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rbp:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062B8:
	rsi = Mem0[rdi:word64]
	rdi = Mem0[rcx:word64]
// DataOut: eax ebp ebx esi r11d r14d rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:Test(EQ,Z) rbp:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7D0:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	v30 = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = v30
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000010
	rax = DPB(rax, strcmp(rdi, rsi), 0)
	r13d = eax
	eax = 0x00000000
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: r11d r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7F1:
	edx = (word32) Mem0[rbx:byte]
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000040AAE7
// DataOut: dl r11d r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7FC:
	ecx = (word32) Mem0[rbp + 0x0000000000000000:byte]
	al = 0x01
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl r11d r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A806:
	eax = (word32) dl
	esi = 0x0000002E
	esi = 0x0000002E - eax
	SCZO = cond(esi)
	branch Test(NE,Z) l000000000040A81D
// DataOut: cl dl esi r11d r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A812:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x00)
	eax = 0xFFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl esi r11d r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A81D:
	eax = (word32) cl
	edi = 0x0000002E
	edi = 0x0000002E - eax
	SCZO = cond(edi)
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl edi esi r11d r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A829:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x00)
	eax = 0x00000001
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl edi esi r11d r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A848:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi r11d r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A84C:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi r11d r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A852:
	SCZO = cond(Mem0[rbx + 0x0000000000000002:byte] - 0x00)
	eax = 0xFFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl edi r11d r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A85D:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000040A9A0
// DataOut: cl dl r11d r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9A0:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl r11d r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9AA:
	SCZO = cond(Mem0[rbp + 0x0000000000000002:byte] - 0x00)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl r11d r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A865:
	SCZO = cond(dl - 0x2E)
	branch Test(EQ,Z) l000000000040AAC0
// DataOut: cl r11d r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAC0:
	rbx = rbx + 0x0000000000000001
	rbp = rbp + 0x0000000000000001
	SCZO = cond(cl - 0x2E)
	eax = 0xFFFFFFFF
	branch Test(EQ,Z) l000000000040A877
// DataOut: r11d r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAD6:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:0xFFFFFFFF rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:0xFF dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A86E:
	SCZO = cond(cl - 0x2E)
	branch Test(EQ,Z) l000000000040A9B4
// DataOut: r11d r14d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A877:
	rdi = rsp
	Mem0[rsp:word64] = rbx
	Mem0[rsp + 0x0000000000000008:word64] = rbp
	rax = fn000000000040A730(rdi, r14d)
	rdi = rsp + 0x0000000000000008
	r14 = rax
	r12 = r14
	rax = fn000000000040A730(rdi, r14d)
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000040A8A0
// DataOut: eax r11d r12 r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A89B_1:
	r12 = Mem0[rsp:word64]
// DataOut: eax r11d r12 r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:0x00000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:0x00000000 r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8A0:
	r10 = rax
	r10 = r10 - rbp
	r12 = r12 - rbx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040AAF1
// DataOut: eax r10 r11d r12 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:0x00000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:0x00000000 r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAF1:
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r10 = r10 - rbp
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l000000000040A8BB
// DataOut: eax r10 r11d r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:0x00000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB02:
// DataOut: eax r10 r11d r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:0x00000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8B2:
	SCZO = cond(r12 - r10)
	branch Test(EQ,Z) l000000000040AA8B
// DataOut: eax r10 r11d r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:0x00000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA8B:
	rdx = r12
	rsi = rbp
	rdi = rbx
	rax = DPB(rax, strncmp(rdi, rsi, rdx), 0)
	SZO = cond(eax & eax)
	C = false
	r10 = r12
	branch Test(NE,Z) l000000000040A8BB
// DataOut: r10 r11d r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:0x00000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAA4:
	r12 = Mem0[rsp:word64]
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r12 = r12 - rbx
	r10 = r10 - rbp
	SCZO = cond(r10)
// DataOut: r10 r11d r12 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:0x00000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8BB:
	ecx = 0x00000000
	r8d = 0x00000000
	SZO = cond(0x00000000)
	C = false
	ebx = 0xFFFFFFFF
// DataOut: r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:0x00000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8C6:
	SCZO = cond(r10 - rcx)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8CF:
// DataOut: r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB07:
	SCZO = cond(r12 - r8)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A971:
	SCZO = cond(r12 - r8)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A97A:
	esi = (word32) Mem0[rbx + r8:byte]
	eax = (int32) sil
	eax = eax - 0x00000030
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: r10 r11d r12 r8 rbp rbx rcx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8D8:
	SCZO = cond(r10 - rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: r10 r11d r12 r8 r9b r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8E7:
	eax = (int32) r9b
	eax = eax - 0x00000030
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: r10 r11d r12 r8 r9b r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9D4:
	edx = (word32) Mem0[rbx + r8:byte]
	SCZO = cond(dl - 0x30)
	branch Test(EQ,Z) l000000000040A9D0
// DataOut: dl r10 r11d r12 r8 r9b r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9D0:
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
// DataOut: r10 r11d r12 r8 r9b r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9DE:
// DataOut: dl r10 r11d r12 r8 r9b r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9EA:
	SCZO = cond(r9b - 0x30)
	branch Test(EQ,Z) l000000000040A9E0
// DataOut: dl r10 r11d r12 r8 r9b r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9E0:
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: dl r10 r11d r12 r8 r9b r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9F0:
	eax = (int32) dl
	eax = eax - 0x00000030
	SCZO = cond(eax - 0x00000009)
	eax = (int32) r9b
	branch Test(UGT,CZ) l000000000040AADB
// DataOut: dl eax r10 r11d r12 r8 r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AADB:
	eax = eax - 0x00000030
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A8C6
// DataOut: r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:(int32) r9b rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA03:
	eax = eax - 0x00000030
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl r10 r11d r12 r8 r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:(int32) r9b rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA0B:
	eax = 0x00000000
	SZO = cond(0x00000000)
	C = false
// DataOut: dl eax r10 r11d r12 r8 r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:(int32) r9b - 0x00000030 rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA22:
	SZO = cond(eax & eax)
	branch Test(NE,Z) l000000000040AA2C
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040AA2C
// DataOut: dl eax r10 r11d r12 r8 r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA26:
	eax = (int32) dl
	eax = eax - r9d
	eax = (int32) dl
	eax = eax - r9d
	SCZO = cond(eax)
// DataOut: eax r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA2C:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	edx = (word32) Mem0[rbx + r8:byte]
	esi = (int32) dl
	esi = esi - 0x00000030
	SCZO = cond(esi - 0x00000009)
	branch Test(ULE,CZ) l000000000040AA10
// DataOut: dl eax r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA10:
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	esi = (int32) r9b
	esi = esi - 0x00000030
	SCZO = cond(esi - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl eax r10 r11d r12 r8 r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF r8:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9B4:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	eax = 0x00000001
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r10:<invalid> ebx:0xFFFFFFFF r8:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA44:
	edx = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	edx = edx - 0x00000030
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040AAE7
// DataOut: eax r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF r8:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAE7:
	eax = 0xFFFFFFFF
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r10:<invalid> ebx:0xFFFFFFFF r8:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA55:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040A8C6
// DataOut: r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF r8:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA5D:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF r8:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8F7:
	SCZO = cond(r12 - r8)
	branch Test(EQ,Z) l000000000040AB18
// DataOut: r10 r11d r12 r8 r9b rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:(int32) r9b - 0x00000030 rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB18:
	eax = 0x00000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax r10 r11d r12 r8 r9b rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:(int32) r9b - 0x00000030 rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A900:
	edx = (word32) Mem0[rbx + r8:byte]
// DataOut: dl r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:(int32) r9b - 0x00000030 rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A98F:
	edx = esi
// DataOut: dl r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A905:
	esi = (word32) dl
	eax = 0x00000000
	edi = rsi - 0x0000000000000030
	SCZO = cond(edi - 0x00000009)
	branch Test(ULE,CZ) l000000000040A925
// DataOut: dl eax esi r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A912:
	eax = esi
	eax = eax & 0xFFFFFFDF
	eax = eax - 0x00000041
	SCZO = cond(eax - 0x00000019)
	branch Test(UGT,CZ) l000000000040AA68
// DataOut: dl esi r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA68:
	esi = esi + 0x00000100
	SCZO = cond(dl - 0x7E)
	eax = esi
	branch Test(NE,Z) l000000000040AA77
// DataOut: eax r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA73_1:
	eax = r11d
// DataOut: eax r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA77:
// DataOut: eax r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A923:
	eax = esi
// DataOut: eax r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A925:
	SCZO = cond(r10 - rcx)
	branch Test(EQ,Z) l000000000040AB1F
// DataOut: eax r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB1F:
	edi = 0x00000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax edi r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A92E:
	r9d = (word32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: eax r10 r11d r12 r8 r9b rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A934:
	esi = (word32) r9b
	edi = 0x00000000
	edx = rsi - 0x0000000000000030
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi r10 r11d r12 r8 r9b rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A942:
	edx = esi
	edi = esi
	edx = edx & 0xFFFFFFDF
	edx = edx - 0x00000041
	SCZO = cond(edx - 0x00000019)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi r10 r11d r12 r8 r9b rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:(word32) r9b edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A951:
	esi = esi + 0x00000100
	SCZO = cond(r9b - 0x7E)
	edi = esi
	branch Test(NE,Z) l000000000040A961
// DataOut: eax edi r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:(word32) r9b edx:((word32) r9b & 0xFFFFFFDF) - 0x00000041 rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:(word32) r9b rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A95D_1:
	edi = r11d
// DataOut: eax edi r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:(word32) r9b + 0x00000100 edx:((word32) r9b & 0xFFFFFFDF) - 0x00000041 rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:(word32) r9b + 0x00000100 rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A961:
	SCZO = cond(eax - edi)
	branch Test(NE,Z) l000000000040AA80
// DataOut: eax edi r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA80:
	eax = eax - edi
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000040AA86
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA82_1:
	eax = r13d
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA86:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A969:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
// DataOut: r10 r11d r12 r8 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB10:
	eax = r13d
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A834:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:0x00000001 rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A838:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r10:<invalid> ebx:0xFFFFFFFF r8:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062AE:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:0x00000001 rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> sil:Test(EQ,Z) rbp:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040623D:
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> rbp:<invalid> r8d:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> dl:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn00000000004061B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> rbx:<invalid> rbp:<invalid> r8d:<invalid> ecx:<invalid> rcx:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r13d:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r10:<invalid> ebx:<invalid> r8:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



void fn0000000000406400()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ch cl cx dh di dil dl dx ecx edi edx esi rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406400_entry:
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406400:
	branch Mem0[0x000000000061A408:word64] == 0x0000000000000000 l0000000000406418
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406418:
	fn0000000000406440(DPB(rdi, 0x0061A3E0, 0))
	fn0000000000406440(DPB(rdi, 0x0061A410, 0))
	word64 rdi_23 = DPB(rdi, 0x0061A3F0, 0)
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000406439_thunk_fn0000000000406440:
	fn0000000000406440(rdi_23)
	return
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:0x0061A3F0 rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid>

l000000000040640A:
	word64 rdi_12 = DPB(rdi, 0x0061A400, 0)
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040640F_thunk_fn0000000000406440:
	fn0000000000406440(rdi_12)
	return
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:0x0061A400

fn0000000000406400_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid>



word32 fn0000000000406440(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: esi
// Trashed: SCZO ch cl cx dh di dil dl dx ecx edi edx esi rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406440_entry:
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406440:
	branch Mem0[0x000000000061B128:byte] == 0x00 l0000000000406470
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406470:
	Mem26[0x000000000061B128:byte] = 0x01
	fn0000000000406400()
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018
// LocalsOut: fp(64)

l000000000040644D:
// DataOut: ebx esi fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdi:rdi edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> -16(fp):rdi

l00000000004026C0:
	word64 rsp_17
	byte SCZO_18
	byte Z_19
	word64 rsi_20
	word64 rdi_21
	word64 rcx_22
	word32 edx_23
	word32 esi_24
	call Mem0[0x000000000061A2A8:word32] (retsize: 4; depth: 4)
		uses: edx_13,esi_11,qwLoc10_8,rcx_12,rdi_14,rsi_10,rsp_15,SCZO_16,Z_5
		defs: edx_23,esi_24,rcx_22,rdi_21,rsi_20,rsp_17,SCZO_18,Z_19
	return esi_24
// DataOut: ebx esi fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rcx:<invalid> edx:0x00000001 rdi:<invalid> edi:<invalid> -16(fp):rdi

fn0000000000406440_exit:
// DataOut: esi
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> edi:<invalid> -16(fp):rdi



word64 fn0000000000406490()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi esp rax rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000406490_entry:
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406490:
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004064EF:
	branch Mem0[0x000000000061B038:word32] != 0x00000000 l0000000000406503
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064F9:
	branch Mem0[0x000000000061B034:word32] == 0x00000000 l0000000000406538
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000406538:
	return fp + 0x0000000000000004
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx

fn0000000000406490_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 eax:<invalid> rbx:rbx edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx

l0000000000406503:
	branch Mem0[0x000000000061B128:byte] == 0x00 l00000000004064A0
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040650C:
	fn0000000000406440(DPB(rdi, 0x0061A3E0, 0))
	fn0000000000406440(DPB(rdi, 0x0061A3F0, 0))
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064A0:
	word64 rsp_37
	word64 rbx_38
	byte SCZO_39
	word32 eax_40
	byte SZO_41
	byte C_42
	byte Z_43
	word32 edi_44
	word64 rdi_45
	word64 rdx_46
	word32 esi_47
	word32 ebx_48
	word32 edx_49
	word64 rsi_50
	word64 rax_51
	call fflush_unlocked (retsize: 8; depth: 140)
		uses: C_31,dwLoc04_4,eax_33,ebx_18,edi_22,edx_17,esi_19,rax_15,rbx_24,rdi_36,rdx_20,rsi_16,rsp_25,SCZO_34,SZO_32,Z_35
		defs: C_42,eax_40,ebx_48,edi_44,edx_49,esi_47,rax_51,rbx_38,rdi_45,rdx_46,rsi_50,rsp_37,SCZO_39,SZO_41,Z_43
	word64 rsp_57
	word64 rbx_58
	byte SCZO_59
	word32 eax_60
	byte SZO_61
	byte C_62
	byte Z_63
	word32 edi_64
	word64 rdi_65
	word64 rdx_66
	word32 esi_67
	word32 ebx_68
	word32 edx_69
	word64 rsi_70
	word64 rax_71
	call sigprocmask (retsize: 8; depth: 140)
		uses: C_54,dwLoc04_4,eax_40,ebx_48,edi_52,edx_49,esi_56,rax_51,rbx_38,rdi_45,rdx_55,rsi_50,rsp_37,SCZO_39,SZO_53,Z_43
		defs: C_62,eax_60,ebx_68,edi_64,edx_69,esi_67,rax_71,rbx_58,rdi_65,rdx_66,rsi_70,rsp_57,SCZO_59,SZO_61,Z_63
	word32 ebx_72 = Mem0[0x000000000061B038:word32]
	word32 eax_74 = Mem0[0x000000000061B034:word32]
	branch eax_74 == 0x00000000 l0000000000406528
// DataOut: eax ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000406528:
	signal(DPB(rdi_65, ebx_72, 0), DPB(rsi_70, 0x00000000, 0))
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064CB:
	Mem119[0x000000000061B034:word32] = eax_74 - 0x00000001
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064D9:
	word64 rsp_81
	word64 rbx_82
	byte SCZO_83
	word32 eax_84
	byte SZO_85
	byte C_86
	byte Z_87
	word32 edi_88
	word64 rdi_89
	word64 rdx_90
	word32 esi_91
	word32 ebx_92
	word32 edx_93
	word64 rsi_94
	word64 rax_95
	call raise (retsize: 8; depth: 140)
		uses: C_78,dwLoc04_4,eax_74,ebx_79,edi_80,edx_69,esi_67,rax_75,rbx_73,rdi_65,rdx_66,rsi_70,rsp_57,SCZO_59,SZO_76,Z_77
		defs: C_86,eax_84,ebx_92,edi_88,edx_93,esi_91,rax_95,rbx_82,rdi_89,rdx_90,rsi_94,rsp_81,SCZO_83,SZO_85,Z_87
	word64 rsp_101
	word64 rbx_102
	byte SCZO_103
	word32 eax_104
	byte SZO_105
	byte C_106
	byte Z_107
	word32 edi_108
	word64 rdx_110
	word32 esi_111
	word32 ebx_112
	word32 edx_113
	word64 rsi_114
	word64 rax_115
	call sigprocmask (retsize: 8; depth: 140)
		uses: C_98,dwLoc04_4,eax_84,ebx_92,edi_100,edx_96,esi_91,rax_95,rbx_82,rdi_89,rdx_90,rsi_99,rsp_81,SCZO_83,SZO_97,Z_87
		defs: C_106,eax_104,ebx_112,edi_108,edx_113,esi_111,rax_115,rbx_102,rdi_109,rdx_110,rsi_114,rsp_101,SCZO_103,SZO_105,Z_107
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)



word64 fn0000000000406540(word64 rcx, word64 rdx, byte sil, word64 rdi, word64 r11, word32 r14d, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r14d r15 rcx rdi rdx sil
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rax
fn0000000000406540_entry:
// DataOut: fs r11 r14d r15 rcx rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406540:
	word32 r15d_484
	byte r15b_481
	word32 edx_465
	word32 r14d_485
	word64 rbp_417
	word64 rbp_18 = rdi
	word64 rbx_24 = rdx
	word32 ebx_170 = (word32) rdx
	word64 rdx_32 = Mem0[rdi:word64]
	word64 r12_166 = Mem0[r15 + 0x0000000000000008:word64]
	branch sil == 0x00 l00000000004069BD
// DataOut: ebx fs r11 r12 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004069BD:
	branch Mem0[0x000000000061B129:byte] != 0x00 l00000000004069D8
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069D8:
	branch Mem0[0x000000000061B198:byte] == 0x00 l0000000000406A08
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A08:
	r14d = (word32) Mem0[rcx + 0x00000000000000B1:byte]
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069E1:
	branch Mem0[rdi + 0x00000000000000B1:byte] == 0x00 l0000000000406A20
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A20:
	r14d = 0x00000000
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A10:
	r15d_484 = Mem0[rcx + 0x0000000000000028:word32]
	r15b_481 = (byte) r15d_484 (alias)
// DataOut: ebx fs r11 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069EA:
	r15d_484 = Mem0[rcx + 0x00000000000000A4:word32]
	r15b_481 = (byte) r15d_484 (alias)
// DataOut: ebx fs r11 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069F7:
	r14d_485 = r14d ^ 0x00000001
	r14b = (byte) r14d_485 (alias)
	r12_166 = rdx_32
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r15d:<invalid> esi:0x00000001 r14d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069C6:
	r12_166 = rdx_32
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406567:
	branch Mem0[0x000000000061B129:byte] != 0x00 l0000000000406580
// DataOut: ebx fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406580:
	r14d_485 = (word32) Mem0[rcx + 0x00000000000000B1:byte]
	r15d_484 = Mem0[rcx + 0x00000000000000A4:word32]
	r14b = (byte) r14d_485 (alias)
	r15b_481 = (byte) r15d_484 (alias)
	branch r14b != 0x00 l00000000004065B0
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406594:
	word32 esi_854
	rax = fn0000000000404CD0(0x0000000C, out esi_854)
	edx_465 = 0x0000000C
	rdx_32 = DPB(rdx_32, 0x0000000C, 0) (alias)
	branch (byte) rax != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:(word32) Mem0[rcx + 0x00000000000000B1:byte] r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065AB:
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:(word32) Mem0[rcx + 0x00000000000000B1:byte] r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065B0:
	word64 rax_505
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l0000000000406628
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406628:
	word32 eax_637 = r15d_484 & 0x0000F000
	branch eax_637 == 0x00008000 l0000000000406868
// DataOut: eax ebx fs r11 r12 r14b r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406868:
	branch (r15d_484 & 0x00000800) == 0x00000000 l00000000004068B8
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406871:
	word32 esi_821
	branch (byte) fn0000000000404CD0(0x00000010, out esi_821) == 0x00 l00000000004068B8
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068B8:
	branch (r15d_484 & 0x00000400) == 0x00000000 l000000000040693B
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068C1:
	word32 esi_810
	branch (byte) fn0000000000404CD0(0x00000011, out esi_810) == 0x00 l000000000040693B
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040693B:
	word32 esi_753
	rax_505 = fn0000000000404CD0(0x00000015, out esi_753)
	branch (byte) rax_505 == 0x00 l000000000040695C
// DataOut: ebx fs r11 r12 r15d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406949:
	branch Mem0[rdi + 0x00000000000000B8:byte] == 0x00 l000000000040695C
// DataOut: ebx fs r11 r12 r15d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040695C:
	branch (r15d_484 & 0x00000049) == 0x00000000 l000000000040697A
// DataOut: ebx fs r11 r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406962:
	word32 esi_791
	rax_505 = fn0000000000404CD0(0x0000000E, out esi_791)
	branch (byte) rax_505 == 0x00 l000000000040697A
// DataOut: ebx fs r11 r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040697A:
	branch Mem0[rdi + 0x0000000000000020:word64] <=u 0x0000000000000001 l00000000004065CF
// DataOut: ebx fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406985:
	word32 esi_778
	rax_505 = fn0000000000404CD0(0x00000016, out esi_778)
	branch (byte) rax_505 == 0x00 l00000000004065CF
// DataOut: ebx fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406997:
	edx_465 = 0x00000016
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406970:
	edx_465 = 0x0000000E
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406952:
	edx_465 = 0x00000015
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068CF:
	edx_465 = 0x00000011
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040687F:
	edx_465 = 0x00000010
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040663B:
	branch eax_637 == 0x00004000 l00000000004068E0
// DataOut: eax ebx fs r11 r12 r14b r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068E0:
	branch (r15d_484 & 0x00000202) == 0x00000202 l00000000004069A1
// DataOut: ebx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069A1:
	edx_465 = 0x00000014
	word32 esi_732
	branch (byte) fn0000000000404CD0(0x00000014, out esi_732) != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069B8:
// DataOut: ebx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x00000014 esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068F3:
	branch (r15b_481 & 0x02) == 0x00 l0000000000406910
// DataOut: ebx fs r11 r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> rcx:<invalid> esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068F9:
	edx_465 = 0x00000013
	word32 esi_721
	branch (byte) fn0000000000404CD0(0x00000013, out esi_721) != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> rcx:<invalid> esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406910:
	edx_465 = 0x00000006
	branch (r15d_484 & 0x00000200) == 0x00000000 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406922:
	word32 esi_708
	edx_465 = (0x00000000 - ((byte) fn0000000000404CD0(0x00000012, out esi_708) <u 0x01) & 0xFFFFFFF4) + 0x00000012
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x00000006 esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406646:
	branch eax_637 == 0x0000A000 l0000000000406859
// DataOut: eax ebx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406859:
	edx_465 = 0x00000007
// DataOut: ebx edx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406651:
	edx_465 = 0x00000008
	branch eax_637 == 0x00001000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040665D:
	edx_465 = 0x00000009 (alias)
	branch eax_637 == 0x0000C000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:0x00000008 edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406666:
	edx_465 = 0x0000000A (alias)
	branch eax_637 == 0x00006000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> dl:0x09 edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040666F:
	word64 rdx_669 = DPB(rdx_32, eax_637 != 0x00002000, 0)
	edx_465 = rdx_669 + 0x000000000000000B + rdx_669
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> dl:0x0A edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065B9:
	word32 eax_617 = Mem0[rdi + 0x00000000000000A0:word32]
	rax_505 = DPB(rax, eax_617, 0) (alias)
	edx_465 = Mem0[rax_505 * 0x00000004 + 0x00412C60:word32]
	branch edx_465 != 0x00000005 l0000000000406680
// DataOut: ebx edx fs r11 r12 r14d rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406680:
	r14b = (byte) (r14d_485 & DPB(eax_617, edx_465 == 0x00000007, 0)) (alias)
// DataOut: ebx edx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406689:
	branch r14b == 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> al:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040668E:
	edx_465 = 0x0000000D
	branch Mem0[0x000000000061B198:byte] != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> al:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040669C:
	word32 esi_605
	edx_465 = (0x00000000 - ((byte) fn0000000000404CD0(0x0000000D, out esi_605) <u 0x01) & 0xFFFFFFFA) + 0x0000000D
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:0x0000000D al:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065CF:
	word64 rax_509 = DPB(rax_505, strlen(r12_166), 0)
	rdi = r12_166
	rbp_18 = Mem0[0x000000000061B120:word64]
	r14b = (byte) rax_509 (alias)
	word64 r15_518 = r12_166 + rax_509
	branch rbp_18 == 0x0000000000000000 l0000000000406619
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065EA:
	rax_545 = rax_509
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> edi:<invalid> rsi:<invalid> al:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065F0:
	word64 rax_545
	word64 rdx_550 = Mem0[rbp_18:word64]
	branch rax_509 <u rdx_550 l0000000000406610
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> edi:<invalid> rsi:<invalid> al:<invalid> esi:<invalid> ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065F9:
	word64 rsi_567 = Mem0[rbp_18 + 0x0000000000000008:word64]
	rdi = r15_518 - rdx_550
	rax_545 = DPB(rax_545, strncmp(rdi, rsi_567, rdx_550), 0)
	branch strncmp(rdi, rsi_567, rdx_550) == 0x00000000 l00000000004068A0
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> edi:<invalid> rsi:<invalid> al:<invalid> esi:<invalid> ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068A0:
	branch rbp_18 == 0x0000000000000000 l0000000000406619
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> esi:<invalid> ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068A9:
	rbp_417 = rbp_18 + 0x0000000000000010
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> esi:<invalid> ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406610:
	rbp_18 = Mem0[rbp_18 + 0x0000000000000020:word64]
	branch rbp_18 != 0x0000000000000000 l00000000004065F0
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> esi:<invalid> ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406619:
	edx_465 = 0x00000005
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> edi:<invalid> rsi:<invalid> al:<invalid> esi:<invalid> ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066B0:
	rbp_417 = (DPB(rbp_18, edx_465, 0) << 0x0000000000000004) + 6398944
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> ecx:<invalid> rcx:<invalid> dl:<invalid> esi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066C0:
	word64 rdi_425 = DPB(rdi, 0x00000004, 0)
	branch Mem0[rbp_417 + 0x0000000000000008:word64] == 0x0000000000000000 l0000000000406890
// DataOut: ebx edi fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> ecx:<invalid> rcx:<invalid> dl:<invalid> esi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406890:
	word32 esi_448
	fn0000000000404CD0(0x00000004, out esi_448)
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:0x00000004 eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> ecx:<invalid> rcx:<invalid> dl:<invalid> esi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066D0:
	word32 esi_426
	branch (byte) fn0000000000404CD0(0x00000004, out esi_426) != 0x00 l0000000000406840
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:0x00000004 eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> ecx:<invalid> rcx:<invalid> dl:<invalid> esi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406840:
	fn0000000000406440(DPB(rdi, 0x0061A3E0, 0))
	rdi_425 = DPB(rdi, 0x0061A3F0, 0) (alias)
	fn0000000000406440(rdi_425)
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> esi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066DD:
	fn0000000000406440(DPB(rdi_425, 0x0061A3E0, 0))
	fn0000000000406440(rbp_417)
	fn0000000000406440(DPB(rbp_417, 0x0061A3F0, 0))
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> esi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406570:
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066FF:
	word64 rdi_176
	word64 rbp_197
	word64 rdx_191
	word64 r13_186
	branch rdx == 0x0000000000000000 l00000000004067D8
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> esi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067D8:
	rdx_191 = Mem0[0x000000000061B0E8:word64]
	rdi_176 = Mem0[0x000000000061A610:word64]
	word64 rbx_386
	word64 r8_387
	word64 r9_388
	word64 r11_389
	word64 r12_390
	word64 r14_392
	word64 r15_393
	word64 rax_394 = fn00000000004052D0(rdx_191, ebx_170, r12_166, r11, fs, out rbx_386, out r8_387, out r9_388, out r11_389, out r12_390, out r13_186, out r14_392, out r15_393)
	Mem398[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + rax_394
	rbp_197 = rax_394
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> esi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406708:
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406732
// DataOut: ebx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> esi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406711:
	word64 rax_290 = Mem0[rdx + 0x0000000000000018:word64]
	branch Mem0[rdx + 0x0000000000000020:word64] <u rax_290 + 0x0000000000000008 l0000000000406820
// DataOut: ebx fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> esi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406820:
	word64 rsp_341
	word64 rdi_342
	word64 rsi_343
	word64 rbp_344
	word64 r13_345
	word64 rcx_346
	word64 rdx_348
	byte SCZO_349
	byte sil_350
	byte SZO_351
	byte C_352
	word64 r15_354
	byte Z_355
	word32 r14d_356
	word64 rax_357
	word32 r15d_358
	word32 esi_359
	word32 ecx_360
	word32 eax_361
	word32 edx_362
	word64 r14_363
	word32 ebp_365
	word32 edi_366
	byte al_367
	byte dl_368
	byte r15b_369
	byte CZ_370
	word64 r8_373
	word64 r9_374
	call _obstack_newchunk (retsize: 8; depth: 40)
		uses: al_292,C_296,CZ_39,dl_49,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_15,dwLoc14_17,dwLoc18_22,eax_291,ebp_56,ebx_25,ecx,edi_60,edx_50,esi_339,fs,r11,r12_46,r13_12,r14_42,r14b_41,r14d_44,r15_45,r15b_40,r15d_43,r8,r9,rax_290,rbp_55,rbx_24,rcx,rdi_340,rdx_293,rsi_57,rsp_26,SCZO_295,sil,SZO_61,Z_156
		defs: al_367,C_352,CZ_370,dl_368,eax_361,ebp_365,ebx_375,ecx_360,edi_366,edx_362,esi_359,fs_372,r11_371,r12_353,r13_345,r14_363,r14b_364,r14d_356,r15_354,r15b_369,r15d_358,r8_373,r9_374,rax_357,rbp_344,rbx_347,rcx_346,rdi_342,rdx_348,rsi_343,rsp_341,SCZO_349,sil_350,SZO_351,Z_355
	rax_290 = Mem0[rbx_24 + 0x0000000000000018:word64]
// DataOut: ebx fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> rax:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406723:
	Mem335[rax_290:word64] = Mem0[0x000000000061B018:word64]
	Mem337[rbx_24 + 0x0000000000000018:word64] = Mem335[rbx_24 + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: ebx fs r11 r12
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> rax:<invalid> esi:<invalid> rdi:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406732:
	rdi_176 = Mem0[0x000000000061A610:word64]
	word64 r8_182
	word64 r9_183
	word64 r11_184
	word64 r12_185
	word64 r14_187
	word64 r15_188
	word64 rbx_181
	word64 rax_189 = fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_170, r12_166, r11, fs, out rbx_181, out r8_182, out r9_183, out r11_184, out r12_185, out r13_186, out r14_187, out r15_188)
	rdx_191 = rax_189 + Mem0[0x000000000061B018:word64]
	Mem199[0x000000000061B018:word64] = rdx_191
	rbp_197 = rax_189
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406781
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> rax:<invalid> esi:<invalid> rdi:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406767:
	word64 rax_200 = Mem199[rbx_181 + 0x0000000000000018:word64]
	branch Mem199[rbx_181 + 0x0000000000000020:word64] <u rax_200 + 0x0000000000000008 l0000000000406800
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14d:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14:<invalid> esi:<invalid> rcx:<invalid> eax:<invalid> r12d:<invalid> edx:<invalid> r15:<invalid> ebx:<invalid> r15d:<invalid> edi:<invalid> al:<invalid> ebp:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406800:
	word64 rsp_248
	word64 rsi_250
	word64 rcx_253
	word64 rdx_255
	byte SCZO_256
	byte sil_257
	byte SZO_258
	byte C_259
	word64 r12_260
	word64 r15_261
	byte Z_262
	word32 r14d_263
	word64 rax_264
	word32 r15d_265
	word32 esi_266
	word32 ecx_267
	word32 eax_268
	word32 edx_269
	word64 r14_270
	word32 ebp_272
	word32 edi_273
	byte al_274
	byte dl_275
	byte r15b_276
	byte CZ_277
	word64 r11_278
	selector fs_279
	word64 r8_280
	word64 r9_281
	word32 ebx_282
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_203,C_206,CZ_161,dl_194,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_15,dwLoc14_17,dwLoc18_22,eax_202,ebp_198,ebx_170,ecx_177,edi_173,edx_193,esi_246,fs_159,r11_184,r12_185,r13_186,r14_187,r14b_163,r14d_165,r15_188,r15b_162,r15d_164,r8_182,r9_183,rax_200,rbp_197,rbx_181,rcx_204,rdi_247,rdx_191,rsi_180,rsp_174,SCZO_205,sil_171,SZO_178,Z_196
		defs: al_274,C_259,CZ_277,dl_275,eax_268,ebp_272,ebx_282,ecx_267,edi_273,edx_269,esi_266,fs_279,r11_278,r12_260,r13_252,r14_270,r14b_271,r14d_263,r15_261,r15b_276,r15d_265,r8_280,r9_281,rax_264,rbp_251,rbx_254,rcx_253,rdi_249,rdx_255,rsi_250,rsp_248,SCZO_256,sil_257,SZO_258,Z_262
	rax_200 = Mem199[rbx_181 + 0x0000000000000018:word64]
	rdx_191 = Mem199[0x000000000061B018:word64]
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14d:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> r8:<invalid> r14:<invalid> esi:<invalid> eax:<invalid> r12d:<invalid> edx:<invalid> r15:<invalid> ebx:<invalid> r15d:<invalid> edi:<invalid> al:<invalid> ebp:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406779:
	Mem242[rax_200:word64] = rdx_191
	Mem244[rbx_181 + 0x0000000000000018:word64] = Mem242[rbx_181 + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14d:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> esi:<invalid> r8:<invalid> r14:<invalid> eax:<invalid> r12d:<invalid> edx:<invalid> r15:<invalid> ebx:<invalid> r15d:<invalid> edi:<invalid> al:<invalid> ebp:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406781:
	word64 rsp_96 = fn0000000000406490()
	branch r14b != 0x00 l00000000004067A0
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14d:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14:<invalid> esi:<invalid> rcx:<invalid> eax:<invalid> r15d:<invalid> edi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> r12d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> r8d:<invalid> dl:<invalid> dx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067A0:
	fn0000000000406400()
	word64 rcx_136 = Mem0[0x000000000061B0C8:word64]
	word128 rdx_rax_139 = SEQ(rdx_191, r13_186)
	branch (uint64) (rdx_rax_139 /u rcx_136) == (uint64) (SEQ((uint64) (rdx_rax_139 % rcx_136), (rbp_197 - 0x0000000000000001) + r13_186) /u rcx_136) l000000000040678B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14d:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> eax:<invalid> rax:<invalid> r8:<invalid> r14:<invalid> esi:<invalid> rcx:<invalid> r15d:<invalid> edi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> r12d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> r8d:<invalid> dl:<invalid> dx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067C6:
	fn0000000000406440(DPB(rdi_176, 0x0061A550, 0))
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14d:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> eax:<invalid> edi:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r14:<invalid> esi:<invalid> r15d:<invalid> al:<invalid> ebp:<invalid> r12d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> r8d:<invalid> dl:<invalid> dx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040678B:
	word64 rsp_113 = Mem0[rsp_96 + 0x0000000000000018:word64]
	word64 rbp_115
	*rbpOut = Mem0[rsp_113 + 0x0000000000000008:word64]
	word64 rsi_118
	*rsiOut = Mem0[rsp_113 + 0x0000000000000010:word64]
	word64 rdi_122
	*rdiOut = Mem0[rsp_113 + 0x0000000000000018:word64]
	word64 rsp_124
	*rspOut = rsp_113 + 0x0000000000000020
	return Mem0[rsp_96 + 0x0000000000000008:word64]
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14d:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> eax:<invalid> edi:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r14:<invalid> esi:<invalid> r15d:<invalid> al:<invalid> ebp:<invalid> r12d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> r8d:<invalid> dl:<invalid> dx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000406540_exit:
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14d:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> eax:<invalid> rax:<invalid> edi:<invalid> rcx:<invalid> edx:<invalid> r8:<invalid> r14:<invalid> esi:<invalid> r15d:<invalid> al:<invalid> ebp:<invalid> r12d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> r8d:<invalid> dl:<invalid> dx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word32 fn0000000000406A30()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: esi
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406A30_entry:
// DataOut: esi fs r11 r11d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A30:
	branch Mem0[0x000000000061B129:byte] == 0x00 l0000000000406A4F
// DataOut: esi fs r11 r11d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A39:
	branch (byte) fn0000000000404CD0(0x00000004, out esi) != 0x00 l0000000000406A58
// DataOut: esi fs r11 r11d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A58:
	fn0000000000406440(DPB(rdi, 0x0061A3E0, 0))
	fn0000000000406440(DPB(rdi, 0x0061A420, 0))
	word64 rdi_49 = DPB(rdi, 0x0061A3F0, 0)
// DataOut: fs r11 r11d r14 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:<invalid> eax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid>

l0000000000406A75_thunk_fn0000000000406440:
	return fn0000000000406440(rdi_49)
// DataOut: esi fs r11 r11d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:0x0061A3F0 eax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid>

l0000000000406A4B:
// DataOut: esi fs r11 r11d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:<invalid> eax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid>

l0000000000406A4F:
	return esi
// DataOut: esi fs r11 r11d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid>

fn0000000000406A30_exit:
// DataOut: esi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> rdx:<invalid> al:<invalid> ecx:<invalid>



word64 fn0000000000406A80(word64 rdx, word64 rsi, word64 rdi, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11d r14 r15b rdi rdx rsi
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000406A80_entry:
// DataOut: edx fs r11d r14 r15b rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A80:
	word64 r12_14 = rdi
	word32 ebp_19 = (word32) rdx
	word64 rbx_204 = rsi
	word64 rsp_196 = fp - 0x0000000000000124
	word64 rax_136 = DPB(Mem0[fs:0x00000028:word64], 0x00000000, 0)
	branch Mem0[0x000000000061A748:word64] == 0x0000000000000000 l0000000000406ADB
// DataOut: bpl ebp fs r11d r12 r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406AB8:
	rsi = DPB(rsi, 0x00413766, 0) (alias)
	rax_136 = strstr(rsi, rsi)
	r14 = rax_136
	branch rax_136 == 0x0000000000000000 l0000000000406ADB
// DataOut: bpl ebp fs r11d r12 r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13d:ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> eax:0x00000000 -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi
// LocalsOut: fp(64)

l0000000000406ACD:
	rax_136 = DPB(rax_136, strlen(rsi), 0)
	branch rax_136 <=u 0x0000000000000065 l0000000000406B20
// DataOut: bpl ebp fs r11d r12 r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13d:ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> eax:<invalid> esi:0x00413766 rdi:rsi r14:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi
// LocalsOut: fp(64)

l0000000000406B20:
	word64 rsp_160
	word64 rsi_161
	word64 rbp_162
	word32 r13d_163
	word32 ecx_164
	word64 r12_165
	word64 rdi_166
	word64 rdx_167
	word64 rbx_168
	byte SCZO_169
	word64 rax_170
	selector fs_171
	word32 eax_172
	byte SZO_173
	byte C_174
	byte Z_175
	word32 esi_176
	word64 r14_177
	byte CZ_178
	word32 r8d_179
	word64 rcx_180
	word32 r9d_181
	word32 r11d_182
	byte r15b_183
	word64 r8_184
	word64 r9_185
	word64 r11_186
	word64 r13_187
	word64 r15_188
	word32 ebp_189
	call __mempcpy_chk (retsize: 8; depth: 300)
		uses: C_140,CZ_146,dwLoc04_4,dwLoc08_7,dwLoc0C_12,dwLoc10_16,dwLoc14_22,eax_144,ebp_19,ecx_149,esi_133,fs,qwLoc1C_28,r11,r11d,r12_14,r13,r13d_9,r14_141,r15,r15b,r8,r8d,r9,r9d,rax_143,rbp_18,rbx_153,rcx,rdi_152,rdx_150,rsi_148,rsp_24,SCZO_151,SZO_138,Z_139
		defs: C_174,CZ_178,eax_172,ebp_189,ecx_164,esi_176,fs_171,r11_186,r11d_182,r12_165,r13_187,r13d_163,r14_177,r15_188,r15b_183,r8_184,r8d_179,r9_185,r9d_181,rax_170,rbp_162,rbx_168,rcx_180,rdi_166,rdx_167,rsi_161,rsp_160,SCZO_169,SZO_173,Z_175
	word64 rsi_197
	word64 rbp_198
	word32 r13d_199
	word32 ecx_200
	word64 rdi_202
	word64 rdx_203
	byte SCZO_205
	word64 rax_206
	word32 eax_208
	byte SZO_209
	byte C_210
	byte Z_211
	word32 esi_212
	byte CZ_214
	word32 r8d_215
	word64 rcx_216
	word32 r9d_217
	word64 r8_220
	word64 r9_221
	word64 r11_222
	word64 r13_223
	word64 r15_224
	call stpcpy (retsize: 8; depth: 300)
		uses: C_174,CZ_178,dwLoc04_4,dwLoc08_7,dwLoc0C_12,dwLoc10_16,dwLoc14_22,eax_172,ebp_189,ecx_164,esi_176,fs_171,qwLoc1C_28,r11_186,r11d_182,r12_165,r13_187,r13d_163,r14_177,r15_188,r15b_183,r8_184,r8d_179,r9_185,r9d_181,rax_170,rbp_162,rbx_168,rcx_190,rdi_191,rdx_193,rsi_195,rsp_160,SCZO_194,SZO_173,Z_175
		defs: C_210,CZ_214,eax_208,ebp_225,ecx_200,esi_212,fs_207,r11_222,r11d_218,r12_201,r13_223,r13d_199,r14_213,r15_224,r15b_219,r8_220,r8d_215,r9_221,r9d_217,rax_206,rbp_198,rbx_204,rcx_216,rdi_202,rdx_203,rsi_197,rsp_196,SCZO_205,SZO_209,Z_211
	rsi = rsi_197 + 0x0000000000000002
	rax_136 = strcpy(rax_206, rsi_197 + 0x0000000000000002)
// DataOut: bpl ebp fs r11d r12 r14 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13d:ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> eax:<invalid> esi:0x00413766 rdi:rsi r14:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406ADB:
	word64 rbp_67
	word32 esi_68
	word64 rdi_69
	word64 r8_70
	word64 r9_71
	word64 r11_72
	word64 r12_73
	word64 r13_74
	word64 r14_75
	word64 r15_76
	word64 rax_77 = fn0000000000410600(rax_136, rbx_204, ebp_19, DPB(rsi, 0x000003E9, 0), r12_14, 0x00000000, r11d, r14, r15b, fs, out rbp_67, out esi_68, out rdi_69, out r8_70, out r9_71, out r11_72, out r12_73, out r13_74, out r14_75, out r15_76)
	branch (Mem0[rsp_196 + 0x0000000000000108:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000406B66
// DataOut: edi esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13d:ecx r12:rdi rbp:rdx rbx:<invalid> rax:<invalid> eax:<invalid> esi:<invalid> rdi:<invalid> r14:<invalid> rdx:<invalid> rsi:<invalid> ecx:<invalid> rcx:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B66:
	__stack_chk_fail()
// DataOut: edi esi fs r11 r11d r14 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> esi:<invalid> rdi:<invalid> r14:<invalid> r8d:0x00000000 rcx:<invalid> r9d:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> r10:<invalid> r13:<invalid> ax:<invalid> r11d:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B6B_thunk_fn0000000000406B70:
	word64 rbx_121
	word64 rsp_122
	word64 rbp_123
	word64 r8_124
	word64 r9_125
	word64 r11_126
	word64 r12_127
	word64 r13_128
	word64 r14_129
	word64 r15_130
	return fn0000000000406B70(rbp_67, esi_68, rdi_69, r11_72, r14_75, fs, out rbx_121, out rsp_122, out rbp_123, out r8_124, out r9_125, out r11_126, out r12_127, out r13_128, out r14_129, out r15_130)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> esi:<invalid> rdi:<invalid> r14:<invalid> r8d:0x00000000 rcx:<invalid> r9d:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> r10:<invalid> r13:<invalid> ax:<invalid> r11d:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B07:
	word64 rsp_114 = Mem0[rsp_196 + 0x0000000000000120:word64]
	word64 rbp_116
	*rbpOut = Mem0[rsp_114 + 0x0000000000000008:word64]
	word64 rsp_120
	*rspOut = rsp_114 + 0x0000000000000018
	return rax_77
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> esi:<invalid> rdi:<invalid> r14:<invalid> r8d:0x00000000 rcx:<invalid> r9d:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> r10:<invalid> r13:<invalid> ax:<invalid> r11d:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

fn0000000000406A80_exit:
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> esi:<invalid> rdi:<invalid> r14:<invalid> r8d:<invalid> rcx:<invalid> r9d:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> ecx:<invalid> r10:<invalid> r13:<invalid> ax:<invalid> ebp:<invalid> dil:<invalid> r15:<invalid> r14d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r8b:<invalid> r11:<invalid> r10d:<invalid> sil:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi



word64 fn0000000000406B70(word64 rbp, word32 esi, word64 rdi, word64 r11, word64 r14, selector fs, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi fs r11 r11d r14 rbp rdi
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000406B70_entry:
// DataOut: edi esi fs r11 r11d r14 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406B70:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v6 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x00000000000012D0
	rax = Mem0[fs:0x00000028:word64]
	qwLoc28 = rax
	eax = 0x00000000
	SCZO = cond(Mem0[rdi + 0x00000000000000B0:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000406E00
// DataOut: fs r11 r11d r14 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E00:
	eax = Mem0[rdi + 0x00000000000000A0:word32]
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	r13 = fp - 0x0000000000001290
	ecx = 0x00003F3F
	eax = (word32) Mem0[rax + 0x0000000000413728:byte]
	bLoc1290 = al
	r8 = 0x000000003F3F3F3F
	qwLoc128F = rax
	Mem0[rbp + 0x0000000000000009:word16] = cx
	bLoc1285 = 0x00
	branch Test(EQ,Z) l0000000000406BC2
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:0x00000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BA4:
	r13 = fp - 0x0000000000001290
	rdi = rdi + 0x0000000000000010
	rsi = fp - 0x0000000000001290
	fn000000000040A600(rsi, rdi)
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	branch Test(NE,Z) l0000000000406E41
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:0x00000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E41:
	eax = Mem0[rbx + 0x00000000000000B4:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000407138
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407138:
	bLoc1286 = 0x2E
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E50:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406BC7
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E59:
	eax = Mem0[0x000000000061B14C:word32]
	bLoc1286 = 0x2B
	SCZO = cond(eax - 0x00000001)
	branch Test(NE,Z) l0000000000406BD6
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E6D:
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):0x2B -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BC2:
	bLoc1286 = 0x00
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BC7:
	eax = Mem0[0x000000000061B14C:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000406E70
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E70:
	rax = Mem0[rbx + 0x0000000000000080:word64]
	rdx = Mem0[rbx + 0x0000000000000078:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BD6:
	branch Test(ULT,C) l0000000000407040
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407040:
	rax = Mem0[rbx + 0x0000000000000070:word64]
	rdx = Mem0[rbx + 0x0000000000000068:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BDC:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406E90
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E90:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406BE5:
	rax = Mem0[rbx + 0x0000000000000060:word64]
	rdx = Mem0[rbx + 0x0000000000000058:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BF7:
	SCZO = cond(Mem0[0x000000000061B114:byte] - 0x00)
	r12 = fp - 0x0000000000000E70
	rbp = fp - 0x0000000000000E70
	branch Test(NE,Z) l0000000000407060
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F rdx:<invalid> edi:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407060:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	ecx = 0x00413764
	branch Test(EQ,Z) l0000000000407085
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edi:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l000000000040706F:
	rdi = Mem0[rbx + 0x0000000000000018:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000407085
// DataOut: dil fs r11 r11d r13 r13d r14 rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00413764 r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edi:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407078:
	rsi = fp - 0x0000000000001260
	rax = fn000000000040CD70(rsi, rdi, out r14)
	r9 = rax
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 ecx:0x00413764 r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edi:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407085:
	r12 = fp - 0x0000000000000E70
	r8d = Mem0[0x000000000061B178:word32]
	edx = 0x00000E3B
	ecx = 0x00413779
	esi = 0x00000001
	eax = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rdi = fp - 0x0000000000000E70
	rax = DPB(rax, __sprintf_chk(fp - 0x0000000000000E70, rsi, rdx, rcx), 0)
	rdx = fp - 0x0000000000000E70
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> ecx:0x00413764 r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070B0:
	ecx = Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	ecx = ~ecx
	eax = eax & ecx
	eax = eax & 0x80808080
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00000000004070B0
// DataOut: al eax fs r11 r11d r12 r13 r13d r14 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r8d:<invalid> edx:<invalid> esi:0x00000001 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070C7:
	ecx = eax
	rbp = rdx + 0x0000000000000002
	ecx = ecx >>u 0x00000010
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l00000000004070D8
// DataOut: al cl fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r8d:<invalid> edx:<invalid> esi:0x00000001 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D5_1:
	eax = ecx
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r8d:<invalid> edx:<invalid> esi:0x00000001 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D8:
	branch Test(EQ,Z) l00000000004070DC
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r8d:<invalid> edx:<invalid> esi:0x00000001 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D8_2:
	rbp = rdx
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r8d:<invalid> edx:<invalid> esi:0x00000001 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070DC:
	al = al + al
	SCZO = cond(al)
	rbp = rbp - 0x03 - C
	SCZO = cond(rbp)
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r8d:<invalid> edx:<invalid> esi:0x00000001 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406C0F:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406C8F
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r8d:<invalid> edx:<invalid> esi:0x00000001 al:al * 0x02 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406C18:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	esi = 0x00413764
	branch Test(NE,Z) l0000000000407288
// DataOut: fs r11 r11d r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r8d:<invalid> edx:<invalid> esi:0x00000001 al:al * 0x02 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407288:
	rdi = Mem0[rbx + 0x0000000000000050:word64]
	r8 = Mem0[0x000000000061B138:word64]
	rsi = fp - 0x0000000000001260
	edx = Mem0[0x000000000061B140:word32]
	ecx = 0x00000200
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r9, out r11)
	r14 = rax
// DataOut: fs r11 r11d r14 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> esi:0x00413764 r8d:<invalid> edx:<invalid> al:al * 0x02 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C2B:
	r15d = Mem0[0x000000000061B174:word32]
	esi = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rdi = r14
	eax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	r15d = r15d - eax
	SZO = cond(r15d & r15d)
	C = false
	eax = r15d
	branch Test(LE,SZO) l0000000000406F50
// DataOut: eax fs r11 r11d r12 r13 r13d r14 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> edx:<invalid> r14:<invalid> r8d:<invalid> al:<invalid> rcx:<invalid> edi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C4B:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	edx = eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> r14:<invalid> rcx:<invalid> r8d:<invalid> al:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C60:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406C60
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> rcx:<invalid> r14:<invalid> r8d:<invalid> al:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C6D:
	ax = (int16) al
	rdx = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> rcx:<invalid> r14:<invalid> r8d:<invalid> al:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C74:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	rbp = rdx + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(NE,Z) l0000000000406F50
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> r14:<invalid> rcx:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406F50:
	rdx = rbp
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> r14:<invalid> rcx:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C8C:
	Mem0[rdx:byte] = 0x20
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> r14:<invalid> rcx:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C8F:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	eax = 0x00413764
	branch Test(NE,Z) l0000000000407120
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> r14:<invalid> rcx:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> edi:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000407120:
	rdi = Mem0[rbx + 0x0000000000000020:word64]
	rsi = rsp + 0x0000000000000070
	rax = fn000000000040CD70(rsi, rdi, out r14)
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:0x00413764 r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> r14:<invalid> rcx:<invalid> ax:0x3764 r8d:<invalid> al:0x64 edi:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406CA1:
	r9d = Mem0[0x000000000061B170:word32]
	rdi = rbp
	Mem0[rsp:word64] = rax
	r8 = r13
	ecx = 0x00413769
	rdx = 0xFFFFFFFFFFFFFFFF
	esi = 0x00000001
	eax = 0x00000000
	rax = DPB(rax, __sprintf_chk(rdi, rsi, 0xFFFFFFFFFFFFFFFF, rcx), 0)
	rdi = rbp
	rax = DPB(rax, strlen(rdi), 0)
	rbp = rbp + rax
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(NE,Z) l00000000004070F0
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:0x00413764 r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> rcx:<invalid> r14:<invalid> edi:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> ax:0x3764 r8d:<invalid> al:0x64 r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l00000000004070F0:
	rcx = Mem0[0x000000000061A610:word64]
	edx = 0x00000002
	esi = 0x00000001
	edi = 0x00413771
	call fwrite_unlocked (retsize: 8; depth: 8)
	v34 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v34
	SCZO = cond(v34)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:0x00413769 r8:<invalid> rdx:0xFFFFFFFFFFFFFFFF r12:<invalid> rbp:<invalid> r9d:<invalid> esi:0x00000001 rcx:<invalid> r14:<invalid> edi:<invalid> r15d:<invalid> ebp:<invalid> edx:0xFFFFFFFF ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:0x69 dl:0xFF sil:0x01 -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406CE2:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406CEB:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406CF4:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407148
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000407148:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000407155:
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406D01:
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406D08:
	rsi = Mem0[0x000000000061A610:word64]
	rdi = r12
	rbp = rbp - r12
	SCZO = cond(rbp)
	call fputs_unlocked (retsize: 8; depth: 8)
	v32 = Mem0[0x000000000061B018:word64] + rbp
	Mem0[0x000000000061B018:word64] = v32
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000407248
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000407248:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	edi = Mem0[rbx + 0x000000000000002C:word32]
	esi = Mem0[0x000000000061B168:word32]
	rax = fn00000000004057B0(dl, rsi, edi, r8, r12, fs, out rsp, out rbp, out r12, out r13d, out r14)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406D2E:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000407210
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000407210:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	eax = Mem0[rbx + 0x0000000000000030:word32]
	edi = 0x00413764
	edx = Mem0[0x000000000061B164:word32]
	esi = eax
	branch Test(EQ,Z) l0000000000407238
// DataOut: eax edx fs r11 r11d r12 r8 r9 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000407229:
	edi = 0x00000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407415
// DataOut: eax edx fs r11 r11d r12 r8 r9 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edi:0x00413764 edx:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000407415:
	edi = eax
	Mem0[rsp + 0x0000000000000018:word64] = rsi
	Mem0[rsp + 0x0000000000000010:word32] = edx
	rax = fn000000000040CB40(rax, rsi, edi, r8, r12, out rsp)
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rdi = rax
	edx = Mem0[rsp + 0x0000000000000010:word32]
// DataOut: edx fs r11 r11d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edi:0x00000000 edx:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000407238:
	rax = fn0000000000405700(rax, edx, rdi, fs, out rsp, out rbp, out r12, out r13d, out r14)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edi:<invalid> edx:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406D3B:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l00000000004071D0
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l00000000004071D0:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	edi = Mem0[rbx + 0x000000000000002C:word32]
	rbp = r12
	esi = Mem0[0x000000000061B160:word32]
	rax = fn00000000004057B0(dl, rsi, edi, r8, r12, fs, out rsp, out rbp, out r12, out r13d, out r14)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r11d r12 r13d r14 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406D48:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	rbp = r12
	branch Test(NE,Z) l00000000004071F5
// DataOut: fs r11 r11d r12 r13d r14 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l00000000004071F5:
	rdi = Mem0[rbx + 0x00000000000000A8:word64]
	edx = Mem0[0x000000000061B16C:word32]
	esi = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rax = fn0000000000405700(rax, edx, rdi, fs, out rsp, out rbp, out r12, out r13d, out r14)
	rdi = Mem0[rbx + 0x00000000000000A8:word64]
	edx = Mem0[0x000000000061B16C:word32]
	esi = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rax = fn0000000000405700(rax, edx, rdi, fs, out rsp, out rbp, out r12, out r13d, out r14)
// DataOut: fs r11 r11d r12 r13d r14 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406D58:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F60
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F60
// DataOut: fs r11 r11d r12 r13d r14 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406F60:
	esi = 0x00413764
// DataOut: fs r11 r11d r14 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406D65:
	eax = Mem0[rbx + 0x0000000000000028:word32]
	eax = eax & 0x0000B000
	SCZO = cond(eax - 0x00002000)
	branch Test(EQ,Z) l00000000004072B0
	eax = Mem0[rbx + 0x0000000000000028:word32]
	eax = eax & 0x0000B000
	SCZO = cond(eax - 0x00002000)
	branch Test(EQ,Z) l00000000004072B0
// DataOut: fs r11 r11d r12 r13d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l00000000004072B0:
	rax = Mem0[rbx + 0x0000000000000038:word64]
	rsi = rsp + 0x0000000000000070
	ebp = 0xFFFFFFFE
	r13d = r13d - Mem0[0x000000000061B15C:word32]
	r13d = r13d - Mem0[0x000000000061B158:word32]
	rdi = rax
	eax = (word32) al
	r13d = r13d + Mem0[0x000000000061B154:word32]
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	edi = edi | eax
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdx = Mem0[rbx + 0x0000000000000038:word64]
	r15 = rax
	rsi = rsp + 0x0000000000000050
	r14d = Mem0[0x000000000061B158:word32]
	rdi = rdx
	rdx = rdx >>u 0x0000000000000008
	eax = edx
	rdi = rdi >>u 0x0000000000000020
	eax = eax & 0x00000FFF
	edi = edi & 0xFFFFF000
	edi = edi | eax
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	r8d = 0x00000000
	SZO = cond(r13d & r13d)
	C = false
	r9 = rax
	branch Test(SG,S) l0000000000407328
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15b r8d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407324_1:
	r8d = r13d
// DataOut: fs r11 r11d r12 r14 r14d r15 r15b r8d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:0xFFFFFFFE r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> esp:<invalid> r15d:<invalid> ax:<invalid> al:<invalid> r12d:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407328:
	r8d = r8d + Mem0[0x000000000061B15C:word32]
	Mem0[rsp + 0x0000000000000008:word64] = r15
	Mem0[rsp:word32] = r14d
	ecx = 0x00413774
	rdx = 0xFFFFFFFFFFFFFFFF
	esi = 0x00000001
	rdi = rbp
	eax = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rax = DPB(rax, __sprintf_chk(rdi, rsi, 0xFFFFFFFFFFFFFFFF, rcx), 0)
	rax = (int64) Mem0[0x000000000061B154:word32]
	r13 = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:0xFFFFFFFE r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> esp:<invalid> r15d:<invalid> ax:<invalid> al:<invalid> r12d:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406D78:
	rdi = Mem0[rbx + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rsp + 0x0000000000000070
	edx = Mem0[0x000000000061B134:word32]
	ecx = 0x00000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r9, out r11)
	r14 = rax
	rdi = Mem0[rbx + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rsp + 0x0000000000000070
	edx = Mem0[0x000000000061B134:word32]
	ecx = 0x00000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r9, out r11)
	r14 = rax
// DataOut: fs r11 r11d r14 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406D9B:
	r13d = Mem0[0x000000000061B154:word32]
	esi = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rdi = r14
	eax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	r13d = r13d - eax
	SZO = cond(r13d & r13d)
	eax = r13d
	branch Test(LE,SZO) l0000000000406DDC
	r13d = Mem0[0x000000000061B154:word32]
	esi = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rdi = r14
	eax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	r13d = r13d - eax
	SZO = cond(r13d & r13d)
	C = false
	eax = r13d
	branch Test(LE,SZO) l0000000000406DDC
// DataOut: eax fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> r14:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r14d:<invalid> r10:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> ax:<invalid> r8d:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DB7:
	eax = eax - 0x00000001
	edx = eax
	rdx = rbp
	eax = eax - 0x00000001
	SCZO = cond(eax)
	edx = eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> r14:<invalid> r13d:<invalid> ebp:<invalid> r15d:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> ebx:<invalid> esp:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> ax:<invalid> r8d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DC8:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406DC8
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> r14:<invalid> r13d:<invalid> ebp:<invalid> r15d:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> ebx:<invalid> esp:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> ax:<invalid> r8d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DD5:
	ax = (int16) al
	rbp = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> r14:<invalid> r13d:<invalid> ebp:<invalid> r15d:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> ebx:<invalid> esp:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> ax:<invalid> r8d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DDC:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	r13 = r13 + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(EQ,Z) l0000000000406E98
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> r14:<invalid> r13d:<invalid> ebp:<invalid> r15d:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> r8d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406E98:
	Mem0[rbp + 0x0000000000000000:byte] = 0x20
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> r14:<invalid> r13d:<invalid> ebp:<invalid> r15d:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> r8d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406E9C:
	rdi = rsp + 0x0000000000000030
	rax = localtime(rdi)
	Mem0[rbp + 0x0000000000000000:byte] = 0x01
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F80
// DataOut: eax fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EB8:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000407364
// DataOut: eax fs r11 r11d r12 r13 r14 r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EC1:
	rdx = Mem0[0x000000000061B180:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rdi = Mem0[0x000000000061B188:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	SCZO = cond(rsi - rdx)
	branch Test(GT,SZO) l0000000000407380
// DataOut: eax ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EE2:
	branch Test(LT,SO) l0000000000406EEC
// DataOut: eax ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EE4:
	SCZO = cond(edi - ecx)
	branch Test(SG,S) l0000000000407380
// DataOut: eax ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407380:
	edi = 0x0061B180
	Mem0[rsp + 0x0000000000000010:word64] = rax
	rsp = fn000000000040AB30(eax, rdi)
	rdx = Mem0[0x000000000061B180:word64]
	r8 = Mem0[0x000000000061B188:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	rax = Mem0[rsp + 0x0000000000000010:word64]
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EEC:
	r8 = rdi
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EEF:
	rdi = rdx + 0xFFFFFFFFFF0F3D54
	SCZO = cond(rdi - rsi)
	branch Test(GE,SO) l0000000000407268
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407268:
	edi = 0x00000000
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407273:
	SCZO = cond(r8d - ecx)
	branch Test(NS,S) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:0x00 edi:0x00000000 rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040727C:
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:0x00 edi:0x00000000 rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EFF:
	SCZO = cond(rdx - rsi)
	edi = 0x00000001
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F09:
	dil = 0x00
	branch Test(LT,SO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:0x01 edi:0x00000001 rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F0E:
	edi = ecx
	edi = edi - r8d
	edi = edi >>u 0x0000001F
	SCZO = cond(edi)
// DataOut: edi fs r11d r13 r14 r15b rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:0x00 edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F20:
	rdi = (int64) edi
	rdx = rax
	rsi = Mem0[0x0061A3D0 + rdi * 0x0000000000000008:word64]
	rdi = r13
	rax = fn0000000000406A80(rdx, rsi, rdi, r11d, r14, r15b, fs, out rsp, out rbp, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000406F6B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F6B:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F3B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r10:<invalid> ax:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r11:<invalid> al:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> r11d:<invalid> r10d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F72:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(NE,Z) l0000000000407364
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r10:<invalid> ax:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r11:<invalid> al:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> r11d:<invalid> r10d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407364:
	rdi = Mem0[rsp + 0x0000000000000030:word64]
	rsi = rsp + 0x0000000000000050
	rax = fn000000000040CCD0(rsi, rdi, out r14)
	r9 = rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> dx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F7F:
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r10:<invalid> ax:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r11:<invalid> al:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> r11d:<invalid> r10d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F80:
	ecx = 0x00413764
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> dx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F86:
	r8d = Mem0[0x000000000061A3C4:word32]
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l00000000004073B1
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> dx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073B1:
	rdi = rsp + 0x0000000000000028
	Mem0[rsp + 0x0000000000000010:word64] = r9
	Mem0[rsp + 0x0000000000000028:word64] = 0x0000000000000000
	rax = localtime(rdi)
	SZO = cond(rax & rax)
	C = false
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(EQ,Z) l0000000000407403
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> dx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073D3:
	rsi = Mem0[0x000000000061A3D0:word64]
	rdi = rsp + 0x0000000000000070
	ecx = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rdx = rax
	rax = fn0000000000406A80(rdx, rsi, rdi, r11d, r14, r15b, fs, out rsp, out rbp, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	SZO = cond(rax & rax)
	C = false
	r8d = Mem0[0x000000000061A3C4:word32]
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(NE,Z) l0000000000407436
// DataOut: fs r11 r12 r13 r14d r15 r8d r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> dx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407436:
	rdi = rsp + 0x0000000000000070
	edx = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rsi = rax
	Mem0[rsp + 0x0000000000000010:word64] = r9
	eax = fn000000000040D240(edx, rsi, rdi, fs, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	Mem0[0x000000000061A3C4:word32] = eax
	r8d = eax
// DataOut: fs r11 r12 r13 r14d r15 r8d rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r10:<invalid> ax:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r11:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> dx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073FA:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NS,S) l0000000000406F96
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r10:<invalid> ax:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r11:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> dx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407403:
	Mem0[0x000000000061A3C4:word32] = 0x00000000
	r8d = 0x00000000
	SZO = cond(0x00000000)
	C = false
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> dx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F96:
	rdi = r13
	ecx = 0x00413779
	rdx = 0xFFFFFFFFFFFFFFFF
	esi = 0x00000001
	eax = 0x00000000
	rax = DPB(rax, __sprintf_chk(rdi, rsi, 0xFFFFFFFFFFFFFFFF, rcx), 0)
	rdi = r13
	rax = DPB(rax, strlen(rdi), 0)
	r13 = r13 + rax
	SCZO = cond(r13)
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> dx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F3B:
	rax = rax + r13
	SCZO = cond(rax)
	r13 = r8 + 0x0000000000000001
	Mem0[rax:byte] = 0x20
	Mem0[rax + 0x0000000000000001:byte] = 0x00
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r10:<invalid> ax:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r11:<invalid> al:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> r11d:<invalid> r10d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406FBC:
	rsi = Mem0[0x000000000061A610:word64]
	r13 = r13 - r12
	SCZO = cond(r13)
	rdi = r12
	call fputs_unlocked (retsize: 8; depth: 8)
	edx = 0x0061AFC0
	esi = 0x00000000
	rcx = r13
	rdi = rbx
	v41 = Mem0[0x000000000061B018:word64] + r13
	Mem0[0x000000000061B018:word64] = v41
	SCZO = cond(v41)
	rbx = fn0000000000406540(rcx, rdx, sil, rdi, r11, r14d, r15, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	edx = Mem0[rbx + 0x00000000000000A0:word32]
	rbp = rax
	SCZO = cond(edx - 0x00000006)
	branch Test(EQ,Z) l0000000000407160
// DataOut: edx fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dl:<invalid> dx:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407160:
	SCZO = cond(Mem0[rbx + 0x0000000000000008:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:<invalid> dx:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> cl:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040716B:
	rcx = Mem0[0x000000000061A610:word64]
	edx = 0x00000004
	esi = 0x00000001
	edi = 0x0041377E
	call fwrite_unlocked (retsize: 8; depth: 8)
	rcx = r13 + 0x0000000000000004 + rbp
	edx = 0x00000000
	esi = 0x00000001
	rdi = rbx
	v45 = Mem0[0x000000000061B018:word64] + 0x0000000000000004
	Mem0[0x000000000061B018:word64] = v45
	SCZO = cond(v45)
	rbx = fn0000000000406540(rcx, rdx, sil, rdi, r11, r14d, r15, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	edx = Mem0[0x000000000061B12C:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:<invalid> dx:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> cl:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004071B0:
	esi = Mem0[rbx + 0x00000000000000A4:word32]
	edx = 0x00000000
	SZO = cond(0x00000000)
	C = false
	edi = 0x00000001
	rsp = fn0000000000405D00(edx, esi, dil, out rsi, out rdi)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:<invalid> dx:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> cl:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406FF9:
	eax = Mem0[0x000000000061B12C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: edx fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:<invalid> dx:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> cl:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407003:
	edi = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	esi = Mem0[rbx + 0x0000000000000028:word32]
	rsp = fn0000000000405D00(edx, esi, dil, out rsi, out rdi)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:<invalid> dx:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> cl:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407012:
	rax = Mem0[rsp + 0x00000000000012A8:word64]
	rax = rax ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rax)
	C = false
	branch Test(NE,Z) l000000000040745A
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040745A:
	__stack_chk_fail()
	eax = Mem0[rdi + 0x00000000000000A0:word32]
	r8d = Mem0[r14 + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	eax = eax | r8d
	dl = dl | cl
	SZO = cond(dl)
	C = false
	branch Test(NE,Z) l00000000004074B0
// DataOut: al dl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B0:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000040748F
// DataOut: al dl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) dx:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B4:
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) dx:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040748F:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l00000000004074C0
// DataOut: al fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) dx:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074C0:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000407493
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) dx:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407493:
	rcx = Mem0[rdi + 0x0000000000000040:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000040:word64] - rcx)
	rax = Mem0[rsi:word64]
	rdx = Mem0[rdi:word64]
	branch Test(GT,SZO) l00000000004074B8
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) dx:<invalid> cl:Test(EQ,Z) r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B8:
	eax = 0xFFFFFFFF
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074A3:
	branch Test(LT,SO) l00000000004074C4
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074C4:
	return rax
	eax = 0x00000001
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074A5:
	rsi = rdx
	rdi = rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000402550:
	call Mem0[0x000000000061A1F0:word32] (retsize: 4; depth: 4)
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407029:
	rsp = rsp + 4792
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000406B70_exit:
	use rbx (=> rbxOut)
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r11 (=> r11Out)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> esp:<invalid> r8b:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DF5:
	rbp = r13
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> r14:<invalid> r13d:<invalid> ebp:<invalid> r15d:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> r8d:<invalid> cl:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn00000000004079F0(word64 rbp, word64 rsi, word64 r11, word64 r14, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r11d r14 rbp rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsp
fn00000000004079F0_entry:
// DataOut: fs r11 r11d r14 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004079F0:
	branch Mem0[0x000000000061B150:word32] >u 0x00000004 l0000000000407A46
// DataOut: fs r11 r11d r14 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004079F9:
	switch (Mem0[0x000000000061B150:word32]) { l0000000000407C01 }
// DataOut: fs r11 r11d r14 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64)

l0000000000407C01:
	word64 rbx_136 = DPB(rbx, 0x00000000, 0)
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000407A38
// DataOut: fs r11 r11d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 eax:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000407A38:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 eax:<invalid> ebx:0x00000000 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407C11:
// DataOut: fs r11 r11d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 eax:<invalid> ebx:0x00000000 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407C18:
	word64 rsp_98
	word64 r8_100
	word64 r9_101
	word64 r12_103
	word64 r13_104
	word64 r15_106
	word64 rbx_129
	fn0000000000406B70(rbp, fn0000000000406A30(), Mem0[Mem0[0x000000000061B1A8:word64] + rbx_136 * 0x0000000000000008:word64], r11, r14, fs, out rbx_129, out rsp_98, out rbp, out r8_100, out r9_101, out r11, out r12_103, out r13_104, out r14, out r15_106)
	word64 rdi_108 = Mem0[0x000000000061A610:word64]
	word64 rax_109 = Mem0[rdi_108 + 0x0000000000000028:word64]
	branch rax_109 >=u Mem0[rdi_108 + 0x0000000000000030:word64] l0000000000407E6F
// DataOut: fs r11 r11d r14 rax rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> eax:<invalid> ebx:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rbx:<invalid> al:<invalid> ecx:<invalid> r13:<invalid> r8:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> esp:<invalid> r8b:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407E6F:
	word64 rsp_158
	byte SCZO_159
	byte CZ_160
	word64 rdi_161
	word64 rsi_162
	word32 eax_165
	word64 rax_166
	bcuiposr0 None_167
	word32 ebx_168
	byte SZO_169
	byte C_170
	byte Z_171
	word64 rdx_172
	word32 esi_173
	word64 r8_177
	word64 r9_178
	word64 r12_179
	word64 r13_180
	word64 r15_181
	call __overflow (retsize: 8; depth: 8)
		uses: C_112,CZ_90,dwLoc04_63,dwLoc08_65,dwLoc0C_67,dwLoc10_70,dwLoc14_72,dwLoc18_74,eax_110,ebx_89,esi_157,fs_82,None_87,r11_102,r12_103,r13_104,r14_105,r15_106,r8_100,r9_101,rax_109,rbp_99,rbx_97,rdi_108,rdx_88,rsi_93,rsp_98,SCZO_111,SZO_86,Z_85
		defs: C_170,CZ_160,eax_165,ebx_168,esi_173,fs_176,None_167,r11_174,r12_179,r13_180,r14_175,r15_181,r8_177,r9_178,rax_166,rbp_163,rbx_164,rdi_161,rdx_172,rsi_162,rsp_158,SCZO_159,SZO_169,Z_171
// DataOut: fs r11 r11d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> eax:<invalid> ebx:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rbx:<invalid> al:<invalid> ecx:<invalid> r13:<invalid> r8:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> esp:<invalid> r8b:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407C42:
	Mem155[rdi_108 + 0x0000000000000028:word64] = rax_109 + 0x0000000000000001
	Mem156[rax_109:byte] = 0x0A
// DataOut: fs r11 r11d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> eax:<invalid> ebx:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rbx:<invalid> al:<invalid> ecx:<invalid> r13:<invalid> r8:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> esp:<invalid> r8b:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407C4D:
	Mem135[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + 0x0000000000000001
	rbx_136 = rbx_129 + 0x0000000000000001
	branch Mem135[0x000000000061B1B0:word64] >u rbx_136 l0000000000407C18
// DataOut: fs r11 r11d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> eax:<invalid> ebx:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rbx:<invalid> al:<invalid> ecx:<invalid> r13:<invalid> r8:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> esp:<invalid> r8b:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407C62:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> eax:<invalid> ebx:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> rbx:<invalid> al:<invalid> ecx:<invalid> r13:<invalid> r8:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> esp:<invalid> r8b:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407A46:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> eax:<invalid> ebx:<invalid> rbx:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> al:<invalid> ecx:<invalid> r13:<invalid> r8:<invalid> r12:<invalid> r9d:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> esp:<invalid> r8b:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn00000000004079F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> eax:<invalid> ebx:<invalid> rbx:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> edi:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> al:<invalid> ecx:<invalid> r13:<invalid> r8:<invalid> r12:<invalid> r9d:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> dx:<invalid> cl:<invalid> esp:<invalid> r8b:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000409750(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000409750_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000409750_entry:
// DataOut: edi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409750:
	word64 rdi_36
	word64 rdx_7 = DPB(rdx, 0x00000005, 0)
	word32 ebx_12 = edi
	word64 rbp_19 = Mem0[0x000000000061B200:word64]
	branch edi == 0x00000000 l0000000000409794
// DataOut: ebx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409794:
	word64 rax_62 = dcgettext(DPB(rdi, 0x00000000, 0), DPB(rsi, 0x00413D88, 0), rdx_7)
	word64 rax_69 = DPB(rax_62, __printf_chk(DPB(rdi, 0x00000001, 0), rax_62), 0)
	word64 rdx_72 = DPB(rbp_19, 0x00000005, 0)
	word64 rax_79 = dcgettext(DPB(rdi, 0x00000000, 0), DPB(rax_62, 0x00413DB0, 0), rdx_72)
	word64 rsp_83
	word64 rbp_84
	word32 edx_85
	word64 rbx_86
	word32 ebx_87
	word32 edi_88
	byte SCZO_89
	byte SZO_90
	byte C_91
	byte Z_92
	word32 esi_93
	word64 rax_94
	word64 rdi_95
	word64 rsi_96
	word64 rdx_97
	word64 rcx_98
	word32 eax_99
	word32 ecx_100
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_76,dwLoc04_4,dwLoc08_10,eax_67,ebx_12,ecx,edi_73,edx_71,esi_77,rax_79,rbp_70,rbx_13,rcx,rdi_81,rdx_72,rsi_80,rsp_14,SCZO,SZO_75,Z_16
		defs: C_91,eax_99,ebx_87,ecx_100,edi_88,edx_85,esi_93,rax_94,rbp_84,rbx_86,rcx_98,rdi_95,rdx_97,rsi_96,rsp_83,SCZO_89,SZO_90,Z_92
	word64 rdx_103 = DPB(rdx_97, 0x00000005, 0)
	word64 rax_110 = dcgettext(DPB(rdi_95, 0x00000000, 0), DPB(rsi_96, 0x00413E40, 0), rdx_103)
	word64 rsp_113
	word64 rbp_114
	word32 edx_115
	word64 rbx_116
	word32 ebx_117
	word32 edi_118
	byte SCZO_119
	byte SZO_120
	byte C_121
	byte Z_122
	word32 esi_123
	word64 rax_124
	word64 rdi_125
	word64 rsi_126
	word64 rdx_127
	word64 rcx_128
	word32 eax_129
	word32 ecx_130
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_107,dwLoc04_4,dwLoc08_10,eax_99,ebx_87,ecx_100,edi_104,edx_102,esi_108,rax_110,rbp_101,rbx_86,rcx_98,rdi_112,rdx_103,rsi_111,rsp_83,SCZO_89,SZO_106,Z_92
		defs: C_121,eax_129,ebx_117,ecx_130,edi_118,edx_115,esi_123,rax_124,rbp_114,rbx_116,rcx_128,rdi_125,rdx_127,rsi_126,rsp_113,SCZO_119,SZO_120,Z_122
	word64 rdx_133 = DPB(rdx_127, 0x00000005, 0)
	word64 rax_140 = dcgettext(DPB(rdi_125, 0x00000000, 0), DPB(rsi_126, 0x00413E90, 0), rdx_133)
	word64 rsp_143
	word64 rbp_144
	word32 edx_145
	word64 rbx_146
	word32 ebx_147
	word32 edi_148
	byte SCZO_149
	byte SZO_150
	byte C_151
	byte Z_152
	word32 esi_153
	word64 rax_154
	word64 rdi_155
	word64 rsi_156
	word64 rdx_157
	word64 rcx_158
	word32 eax_159
	word32 ecx_160
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_137,dwLoc04_4,dwLoc08_10,eax_129,ebx_117,ecx_130,edi_134,edx_132,esi_138,rax_140,rbp_131,rbx_116,rcx_128,rdi_142,rdx_133,rsi_141,rsp_113,SCZO_119,SZO_136,Z_122
		defs: C_151,eax_159,ebx_147,ecx_160,edi_148,edx_145,esi_153,rax_154,rbp_144,rbx_146,rcx_158,rdi_155,rdx_157,rsi_156,rsp_143,SCZO_149,SZO_150,Z_152
	word64 rdx_163 = DPB(rdx_157, 0x00000005, 0)
	word64 rax_170 = dcgettext(DPB(rdi_155, 0x00000000, 0), DPB(rsi_156, 0x00413FA0, 0), rdx_163)
	word64 rsp_173
	word64 rbp_174
	word32 edx_175
	word64 rbx_176
	word32 ebx_177
	word32 edi_178
	byte SCZO_179
	byte SZO_180
	byte C_181
	byte Z_182
	word32 esi_183
	word64 rax_184
	word64 rdi_185
	word64 rsi_186
	word64 rdx_187
	word64 rcx_188
	word32 eax_189
	word32 ecx_190
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_167,dwLoc04_4,dwLoc08_10,eax_159,ebx_147,ecx_160,edi_164,edx_162,esi_168,rax_170,rbp_161,rbx_146,rcx_158,rdi_172,rdx_163,rsi_171,rsp_143,SCZO_149,SZO_166,Z_152
		defs: C_181,eax_189,ebx_177,ecx_190,edi_178,edx_175,esi_183,rax_184,rbp_174,rbx_176,rcx_188,rdi_185,rdx_187,rsi_186,rsp_173,SCZO_179,SZO_180,Z_182
	word64 rdx_193 = DPB(rdx_187, 0x00000005, 0)
	word64 rax_200 = dcgettext(DPB(rdi_185, 0x00000000, 0), DPB(rsi_186, 0x004141E8, 0), rdx_193)
	word64 rsp_203
	word64 rbp_204
	word32 edx_205
	word64 rbx_206
	word32 ebx_207
	word32 edi_208
	byte SCZO_209
	byte SZO_210
	byte C_211
	byte Z_212
	word32 esi_213
	word64 rax_214
	word64 rdi_215
	word64 rsi_216
	word64 rdx_217
	word64 rcx_218
	word32 eax_219
	word32 ecx_220
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_197,dwLoc04_4,dwLoc08_10,eax_189,ebx_177,ecx_190,edi_194,edx_192,esi_198,rax_200,rbp_191,rbx_176,rcx_188,rdi_202,rdx_193,rsi_201,rsp_173,SCZO_179,SZO_196,Z_182
		defs: C_211,eax_219,ebx_207,ecx_220,edi_208,edx_205,esi_213,rax_214,rbp_204,rbx_206,rcx_218,rdi_215,rdx_217,rsi_216,rsp_203,SCZO_209,SZO_210,Z_212
	word64 rdx_223 = DPB(rdx_217, 0x00000005, 0)
	word64 rax_230 = dcgettext(DPB(rdi_215, 0x00000000, 0), DPB(rsi_216, 0x00414398, 0), rdx_223)
	word64 rsp_233
	word64 rbp_234
	word32 edx_235
	word64 rbx_236
	word32 ebx_237
	word32 edi_238
	byte SCZO_239
	byte SZO_240
	byte C_241
	byte Z_242
	word32 esi_243
	word64 rax_244
	word64 rdi_245
	word64 rsi_246
	word64 rdx_247
	word64 rcx_248
	word32 eax_249
	word32 ecx_250
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_227,dwLoc04_4,dwLoc08_10,eax_219,ebx_207,ecx_220,edi_224,edx_222,esi_228,rax_230,rbp_221,rbx_206,rcx_218,rdi_232,rdx_223,rsi_231,rsp_203,SCZO_209,SZO_226,Z_212
		defs: C_241,eax_249,ebx_237,ecx_250,edi_238,edx_235,esi_243,rax_244,rbp_234,rbx_236,rcx_248,rdi_245,rdx_247,rsi_246,rsp_233,SCZO_239,SZO_240,Z_242
	word64 rdx_253 = DPB(rdx_247, 0x00000005, 0)
	word64 rax_260 = dcgettext(DPB(rdi_245, 0x00000000, 0), DPB(rsi_246, 0x00414540, 0), rdx_253)
	word64 rsp_263
	word64 rbp_264
	word32 edx_265
	word64 rbx_266
	word32 ebx_267
	word32 edi_268
	byte SCZO_269
	byte SZO_270
	byte C_271
	byte Z_272
	word32 esi_273
	word64 rax_274
	word64 rdi_275
	word64 rsi_276
	word64 rdx_277
	word64 rcx_278
	word32 eax_279
	word32 ecx_280
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_257,dwLoc04_4,dwLoc08_10,eax_249,ebx_237,ecx_250,edi_254,edx_252,esi_258,rax_260,rbp_251,rbx_236,rcx_248,rdi_262,rdx_253,rsi_261,rsp_233,SCZO_239,SZO_256,Z_242
		defs: C_271,eax_279,ebx_267,ecx_280,edi_268,edx_265,esi_273,rax_274,rbp_264,rbx_266,rcx_278,rdi_275,rdx_277,rsi_276,rsp_263,SCZO_269,SZO_270,Z_272
	word64 rdx_283 = DPB(rdx_277, 0x00000005, 0)
	word64 rax_290 = dcgettext(DPB(rdi_275, 0x00000000, 0), DPB(rsi_276, 0x00414580, 0), rdx_283)
	word64 rsp_293
	word64 rbp_294
	word32 edx_295
	word64 rbx_296
	word32 ebx_297
	word32 edi_298
	byte SCZO_299
	byte SZO_300
	byte C_301
	byte Z_302
	word32 esi_303
	word64 rax_304
	word64 rdi_305
	word64 rsi_306
	word64 rdx_307
	word64 rcx_308
	word32 eax_309
	word32 ecx_310
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_287,dwLoc04_4,dwLoc08_10,eax_279,ebx_267,ecx_280,edi_284,edx_282,esi_288,rax_290,rbp_281,rbx_266,rcx_278,rdi_292,rdx_283,rsi_291,rsp_263,SCZO_269,SZO_286,Z_272
		defs: C_301,eax_309,ebx_297,ecx_310,edi_298,edx_295,esi_303,rax_304,rbp_294,rbx_296,rcx_308,rdi_305,rdx_307,rsi_306,rsp_293,SCZO_299,SZO_300,Z_302
	word64 rdx_313 = DPB(rdx_307, 0x00000005, 0)
	word64 rax_320 = dcgettext(DPB(rdi_305, 0x00000000, 0), DPB(rsi_306, 0x00414670, 0), rdx_313)
	word64 rsp_323
	word64 rbp_324
	word32 edx_325
	word64 rbx_326
	word32 ebx_327
	word32 edi_328
	byte SCZO_329
	byte SZO_330
	byte C_331
	byte Z_332
	word32 esi_333
	word64 rax_334
	word64 rdi_335
	word64 rsi_336
	word64 rdx_337
	word64 rcx_338
	word32 eax_339
	word32 ecx_340
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_317,dwLoc04_4,dwLoc08_10,eax_309,ebx_297,ecx_310,edi_314,edx_312,esi_318,rax_320,rbp_311,rbx_296,rcx_308,rdi_322,rdx_313,rsi_321,rsp_293,SCZO_299,SZO_316,Z_302
		defs: C_331,eax_339,ebx_327,ecx_340,edi_328,edx_325,esi_333,rax_334,rbp_324,rbx_326,rcx_338,rdi_335,rdx_337,rsi_336,rsp_323,SCZO_329,SZO_330,Z_332
	word64 rdx_343 = DPB(rdx_337, 0x00000005, 0)
	word64 rax_350 = dcgettext(DPB(rdi_335, 0x00000000, 0), DPB(rsi_336, 0x00414780, 0), rdx_343)
	word64 rsp_353
	word64 rbp_354
	word32 edx_355
	word64 rbx_356
	word32 ebx_357
	word32 edi_358
	byte SCZO_359
	byte SZO_360
	byte C_361
	byte Z_362
	word32 esi_363
	word64 rax_364
	word64 rdi_365
	word64 rsi_366
	word64 rdx_367
	word64 rcx_368
	word32 eax_369
	word32 ecx_370
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_347,dwLoc04_4,dwLoc08_10,eax_339,ebx_327,ecx_340,edi_344,edx_342,esi_348,rax_350,rbp_341,rbx_326,rcx_338,rdi_352,rdx_343,rsi_351,rsp_323,SCZO_329,SZO_346,Z_332
		defs: C_361,eax_369,ebx_357,ecx_370,edi_358,edx_355,esi_363,rax_364,rbp_354,rbx_356,rcx_368,rdi_365,rdx_367,rsi_366,rsp_353,SCZO_359,SZO_360,Z_362
	word64 rdx_373 = DPB(rdx_367, 0x00000005, 0)
	word64 rax_380 = dcgettext(DPB(rdi_365, 0x00000000, 0), DPB(rsi_366, 0x00414928, 0), rdx_373)
	word64 rsp_383
	word64 rbp_384
	word32 edx_385
	word64 rbx_386
	word32 ebx_387
	word32 edi_388
	byte SCZO_389
	byte SZO_390
	byte C_391
	byte Z_392
	word32 esi_393
	word64 rax_394
	word64 rdi_395
	word64 rsi_396
	word64 rdx_397
	word64 rcx_398
	word32 eax_399
	word32 ecx_400
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_377,dwLoc04_4,dwLoc08_10,eax_369,ebx_357,ecx_370,edi_374,edx_372,esi_378,rax_380,rbp_371,rbx_356,rcx_368,rdi_382,rdx_373,rsi_381,rsp_353,SCZO_359,SZO_376,Z_362
		defs: C_391,eax_399,ebx_387,ecx_400,edi_388,edx_385,esi_393,rax_394,rbp_384,rbx_386,rcx_398,rdi_395,rdx_397,rsi_396,rsp_383,SCZO_389,SZO_390,Z_392
	word64 rdx_403 = DPB(rdx_397, 0x00000005, 0)
	word64 rax_410 = dcgettext(DPB(rdi_395, 0x00000000, 0), DPB(rsi_396, 0x00414AC0, 0), rdx_403)
	word64 rsp_413
	word64 rbp_414
	word32 edx_415
	word64 rbx_416
	word32 ebx_417
	word32 edi_418
	byte SCZO_419
	byte SZO_420
	byte C_421
	byte Z_422
	word32 esi_423
	word64 rax_424
	word64 rdi_425
	word64 rsi_426
	word64 rdx_427
	word64 rcx_428
	word32 eax_429
	word32 ecx_430
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_407,dwLoc04_4,dwLoc08_10,eax_399,ebx_387,ecx_400,edi_404,edx_402,esi_408,rax_410,rbp_401,rbx_386,rcx_398,rdi_412,rdx_403,rsi_411,rsp_383,SCZO_389,SZO_406,Z_392
		defs: C_421,eax_429,ebx_417,ecx_430,edi_418,edx_415,esi_423,rax_424,rbp_414,rbx_416,rcx_428,rdi_425,rdx_427,rsi_426,rsp_413,SCZO_419,SZO_420,Z_422
	word64 rdx_433 = DPB(rdx_427, 0x00000005, 0)
	word64 rax_440 = dcgettext(DPB(rdi_425, 0x00000000, 0), DPB(rsi_426, 0x00414C28, 0), rdx_433)
	word64 rsp_443
	word64 rbp_444
	word32 edx_445
	word64 rbx_446
	word32 ebx_447
	word32 edi_448
	byte SCZO_449
	byte SZO_450
	byte C_451
	byte Z_452
	word32 esi_453
	word64 rax_454
	word64 rdi_455
	word64 rsi_456
	word64 rdx_457
	word64 rcx_458
	word32 eax_459
	word32 ecx_460
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_437,dwLoc04_4,dwLoc08_10,eax_429,ebx_417,ecx_430,edi_434,edx_432,esi_438,rax_440,rbp_431,rbx_416,rcx_428,rdi_442,rdx_433,rsi_441,rsp_413,SCZO_419,SZO_436,Z_422
		defs: C_451,eax_459,ebx_447,ecx_460,edi_448,edx_445,esi_453,rax_454,rbp_444,rbx_446,rcx_458,rdi_455,rdx_457,rsi_456,rsp_443,SCZO_449,SZO_450,Z_452
	word64 rdx_463 = DPB(rdx_457, 0x00000005, 0)
	word64 rax_470 = dcgettext(DPB(rdi_455, 0x00000000, 0), DPB(rsi_456, 0x00414DA0, 0), rdx_463)
	word64 rsp_473
	word64 rbp_474
	word32 edx_475
	word64 rbx_476
	word32 ebx_477
	word32 edi_478
	byte SCZO_479
	byte SZO_480
	byte C_481
	byte Z_482
	word32 esi_483
	word64 rax_484
	word64 rdi_485
	word64 rsi_486
	word64 rdx_487
	word64 rcx_488
	word32 eax_489
	word32 ecx_490
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_467,dwLoc04_4,dwLoc08_10,eax_459,ebx_447,ecx_460,edi_464,edx_462,esi_468,rax_470,rbp_461,rbx_446,rcx_458,rdi_472,rdx_463,rsi_471,rsp_443,SCZO_449,SZO_466,Z_452
		defs: C_481,eax_489,ebx_477,ecx_490,edi_478,edx_475,esi_483,rax_484,rbp_474,rbx_476,rcx_488,rdi_485,rdx_487,rsi_486,rsp_473,SCZO_479,SZO_480,Z_482
	word64 rdx_493 = DPB(rdx_487, 0x00000005, 0)
	word64 rax_500 = dcgettext(DPB(rdi_485, 0x00000000, 0), DPB(rsi_486, 0x00414F58, 0), rdx_493)
	word64 rsp_503
	word64 rbp_504
	word32 edx_505
	word64 rbx_506
	word32 ebx_507
	word32 edi_508
	byte SCZO_509
	byte SZO_510
	byte C_511
	byte Z_512
	word32 esi_513
	word64 rax_514
	word64 rdi_515
	word64 rsi_516
	word64 rdx_517
	word64 rcx_518
	word32 eax_519
	word32 ecx_520
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_497,dwLoc04_4,dwLoc08_10,eax_489,ebx_477,ecx_490,edi_494,edx_492,esi_498,rax_500,rbp_491,rbx_476,rcx_488,rdi_502,rdx_493,rsi_501,rsp_473,SCZO_479,SZO_496,Z_482
		defs: C_511,eax_519,ebx_507,ecx_520,edi_508,edx_505,esi_513,rax_514,rbp_504,rbx_506,rcx_518,rdi_515,rdx_517,rsi_516,rsp_503,SCZO_509,SZO_510,Z_512
	word64 rdx_523 = DPB(rdx_517, 0x00000005, 0)
	word64 rax_530 = dcgettext(DPB(rdi_515, 0x00000000, 0), DPB(rsi_516, 0x00415020, 0), rdx_523)
	word64 rsp_533
	word64 rbp_534
	word32 edx_535
	word64 rbx_536
	word32 ebx_537
	word32 edi_538
	byte SCZO_539
	byte SZO_540
	byte C_541
	byte Z_542
	word32 esi_543
	word64 rax_544
	word64 rdi_545
	word64 rsi_546
	word64 rdx_547
	word64 rcx_548
	word32 eax_549
	word32 ecx_550
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_527,dwLoc04_4,dwLoc08_10,eax_519,ebx_507,ecx_520,edi_524,edx_522,esi_528,rax_530,rbp_521,rbx_506,rcx_518,rdi_532,rdx_523,rsi_531,rsp_503,SCZO_509,SZO_526,Z_512
		defs: C_541,eax_549,ebx_537,ecx_550,edi_538,edx_535,esi_543,rax_544,rbp_534,rbx_536,rcx_548,rdi_545,rdx_547,rsi_546,rsp_533,SCZO_539,SZO_540,Z_542
	word64 rdx_553 = DPB(rdx_547, 0x00000005, 0)
	word64 rax_560 = dcgettext(DPB(rdi_545, 0x00000000, 0), DPB(rsi_546, 0x004151F0, 0), rdx_553)
	word64 rsp_563
	word64 rbp_564
	word32 edx_565
	word64 rbx_566
	word32 ebx_567
	word32 edi_568
	byte SCZO_569
	byte SZO_570
	byte C_571
	byte Z_572
	word32 esi_573
	word64 rax_574
	word64 rdi_575
	word64 rsi_576
	word64 rdx_577
	word64 rcx_578
	word32 eax_579
	word32 ecx_580
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_557,dwLoc04_4,dwLoc08_10,eax_549,ebx_537,ecx_550,edi_554,edx_552,esi_558,rax_560,rbp_551,rbx_536,rcx_548,rdi_562,rdx_553,rsi_561,rsp_533,SCZO_539,SZO_556,Z_542
		defs: C_571,eax_579,ebx_567,ecx_580,edi_568,edx_565,esi_573,rax_574,rbp_564,rbx_566,rcx_578,rdi_575,rdx_577,rsi_576,rsp_563,SCZO_569,SZO_570,Z_572
	word64 rdx_583 = DPB(rdx_577, 0x00000005, 0)
	word64 rax_590 = dcgettext(DPB(rdi_575, 0x00000000, 0), DPB(rsi_576, 0x004153F0, 0), rdx_583)
	word64 rsp_593
	word64 rbp_594
	word32 edx_595
	word64 rbx_596
	word32 ebx_597
	word32 edi_598
	byte SCZO_599
	byte SZO_600
	byte C_601
	byte Z_602
	word32 esi_603
	word64 rax_604
	word64 rdi_605
	word64 rsi_606
	word64 rdx_607
	word64 rcx_608
	word32 eax_609
	word32 ecx_610
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_587,dwLoc04_4,dwLoc08_10,eax_579,ebx_567,ecx_580,edi_584,edx_582,esi_588,rax_590,rbp_581,rbx_566,rcx_578,rdi_592,rdx_583,rsi_591,rsp_563,SCZO_569,SZO_586,Z_572
		defs: C_601,eax_609,ebx_597,ecx_610,edi_598,edx_595,esi_603,rax_604,rbp_594,rbx_596,rcx_608,rdi_605,rdx_607,rsi_606,rsp_593,SCZO_599,SZO_600,Z_602
	word64 rdx_613 = DPB(rdx_607, 0x00000005, 0)
	word64 rax_620 = dcgettext(DPB(rdi_605, 0x00000000, 0), DPB(rsi_606, 0x00415480, 0), rdx_613)
	word64 rsp_623
	word64 rbp_624
	word32 edx_625
	word64 rbx_626
	word32 ebx_627
	word32 edi_628
	byte SCZO_629
	byte SZO_630
	byte C_631
	byte Z_632
	word32 esi_633
	word64 rax_634
	word64 rdi_635
	word64 rsi_636
	word64 rdx_637
	word64 rcx_638
	word32 eax_639
	word32 ecx_640
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_617,dwLoc04_4,dwLoc08_10,eax_609,ebx_597,ecx_610,edi_614,edx_612,esi_618,rax_620,rbp_611,rbx_596,rcx_608,rdi_622,rdx_613,rsi_621,rsp_593,SCZO_599,SZO_616,Z_602
		defs: C_631,eax_639,ebx_627,ecx_640,edi_628,edx_625,esi_633,rax_634,rbp_624,rbx_626,rcx_638,rdi_635,rdx_637,rsi_636,rsp_623,SCZO_629,SZO_630,Z_632
	word64 rdx_643 = DPB(rdx_637, 0x00000005, 0)
	word64 rax_650 = dcgettext(DPB(rdi_635, 0x00000000, 0), DPB(rsi_636, 0x004155E8, 0), rdx_643)
	word64 rsp_653
	word64 rbp_654
	word32 edx_655
	word64 rbx_656
	word32 ebx_657
	word32 edi_658
	byte SCZO_659
	byte SZO_660
	byte C_661
	byte Z_662
	word32 esi_663
	word64 rax_664
	word64 rdi_665
	word64 rsi_666
	word64 rdx_667
	word64 rcx_668
	word32 eax_669
	word32 ecx_670
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_647,dwLoc04_4,dwLoc08_10,eax_639,ebx_627,ecx_640,edi_644,edx_642,esi_648,rax_650,rbp_641,rbx_626,rcx_638,rdi_652,rdx_643,rsi_651,rsp_623,SCZO_629,SZO_646,Z_632
		defs: C_661,eax_669,ebx_657,ecx_670,edi_658,edx_655,esi_663,rax_664,rbp_654,rbx_656,rcx_668,rdi_665,rdx_667,rsi_666,rsp_653,SCZO_659,SZO_660,Z_662
	word64 rdx_673 = DPB(rdx_667, 0x00000005, 0)
	word64 rax_680 = dcgettext(DPB(rdi_665, 0x00000000, 0), DPB(rsi_666, 0x00415748, 0), rdx_673)
	word64 rsp_683
	word64 rbp_684
	word32 edx_685
	word64 rbx_686
	word32 ebx_687
	word32 edi_688
	byte SCZO_689
	byte SZO_690
	byte C_691
	byte Z_692
	word32 esi_693
	word64 rax_694
	word64 rdi_695
	word64 rsi_696
	word64 rdx_697
	word64 rcx_698
	word32 eax_699
	word32 ecx_700
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_677,dwLoc04_4,dwLoc08_10,eax_669,ebx_657,ecx_670,edi_674,edx_672,esi_678,rax_680,rbp_671,rbx_656,rcx_668,rdi_682,rdx_673,rsi_681,rsp_653,SCZO_659,SZO_676,Z_662
		defs: C_691,eax_699,ebx_687,ecx_700,edi_688,edx_685,esi_693,rax_694,rbp_684,rbx_686,rcx_698,rdi_695,rdx_697,rsi_696,rsp_683,SCZO_689,SZO_690,Z_692
	word64 rdx_703 = DPB(rdx_697, 0x00000005, 0)
	word64 rax_710 = dcgettext(DPB(rdi_695, 0x00000000, 0), DPB(rsi_696, 0x00415778, 0), rdx_703)
	word64 rsp_713
	word64 rbp_714
	word32 edx_715
	word64 rbx_716
	word32 ebx_717
	word32 edi_718
	byte SCZO_719
	byte SZO_720
	byte C_721
	byte Z_722
	word32 esi_723
	word64 rax_724
	word64 rdi_725
	word64 rsi_726
	word64 rdx_727
	word64 rcx_728
	word32 eax_729
	word32 ecx_730
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_707,dwLoc04_4,dwLoc08_10,eax_699,ebx_687,ecx_700,edi_704,edx_702,esi_708,rax_710,rbp_701,rbx_686,rcx_698,rdi_712,rdx_703,rsi_711,rsp_683,SCZO_689,SZO_706,Z_692
		defs: C_721,eax_729,ebx_717,ecx_730,edi_718,edx_715,esi_723,rax_724,rbp_714,rbx_716,rcx_728,rdi_725,rdx_727,rsi_726,rsp_713,SCZO_719,SZO_720,Z_722
	word64 rdx_733 = DPB(rdx_727, 0x00000005, 0)
	word64 rax_740 = dcgettext(DPB(rdi_725, 0x00000000, 0), DPB(rsi_726, 0x004157B0, 0), rdx_733)
	word64 rsp_743
	word64 rbp_744
	word32 edx_745
	word64 rbx_746
	word32 ebx_747
	word32 edi_748
	byte SCZO_749
	byte SZO_750
	byte C_751
	byte Z_752
	word32 esi_753
	word64 rax_754
	word64 rdi_755
	word64 rsi_756
	word64 rdx_757
	word64 rcx_758
	word32 eax_759
	word32 ecx_760
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_737,dwLoc04_4,dwLoc08_10,eax_729,ebx_717,ecx_730,edi_734,edx_732,esi_738,rax_740,rbp_731,rbx_716,rcx_728,rdi_742,rdx_733,rsi_741,rsp_713,SCZO_719,SZO_736,Z_722
		defs: C_751,eax_759,ebx_747,ecx_760,edi_748,edx_745,esi_753,rax_754,rbp_744,rbx_746,rcx_758,rdi_755,rdx_757,rsi_756,rsp_743,SCZO_749,SZO_750,Z_752
	word64 rdx_763 = DPB(rdx_757, 0x00000005, 0)
	word64 rax_770 = dcgettext(DPB(rdi_755, 0x00000000, 0), DPB(rsi_756, 0x00415850, 0), rdx_763)
	word64 rsp_773
	word64 rbp_774
	word32 edx_775
	word64 rbx_776
	word32 ebx_777
	word32 edi_778
	byte SCZO_779
	byte SZO_780
	byte C_781
	byte Z_782
	word32 esi_783
	word64 rax_784
	word64 rdi_785
	word64 rsi_786
	word64 rdx_787
	word64 rcx_788
	word32 eax_789
	word32 ecx_790
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_767,dwLoc04_4,dwLoc08_10,eax_759,ebx_747,ecx_760,edi_764,edx_762,esi_768,rax_770,rbp_761,rbx_746,rcx_758,rdi_772,rdx_763,rsi_771,rsp_743,SCZO_749,SZO_766,Z_752
		defs: C_781,eax_789,ebx_777,ecx_790,edi_778,edx_775,esi_783,rax_784,rbp_774,rbx_776,rcx_788,rdi_785,rdx_787,rsi_786,rsp_773,SCZO_779,SZO_780,Z_782
	word64 rdx_793 = DPB(rdx_787, 0x00000005, 0)
	word64 rax_800 = dcgettext(DPB(rdi_785, 0x00000000, 0), DPB(rsi_786, 0x00415970, 0), rdx_793)
	word64 rsp_803
	word64 rbp_804
	word32 edx_805
	word64 rbx_806
	word32 ebx_807
	word32 edi_808
	byte SCZO_809
	byte SZO_810
	byte C_811
	byte Z_812
	word32 esi_813
	word64 rax_814
	word64 rdi_815
	word64 rsi_816
	word64 rdx_817
	word64 rcx_818
	word32 eax_819
	word32 ecx_820
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_797,dwLoc04_4,dwLoc08_10,eax_789,ebx_777,ecx_790,edi_794,edx_792,esi_798,rax_800,rbp_791,rbx_776,rcx_788,rdi_802,rdx_793,rsi_801,rsp_773,SCZO_779,SZO_796,Z_782
		defs: C_811,eax_819,ebx_807,ecx_820,edi_808,edx_805,esi_813,rax_814,rbp_804,rbx_806,rcx_818,rdi_815,rdx_817,rsi_816,rsp_803,SCZO_809,SZO_810,Z_812
	word64 rdi_821 = Mem0[0x000000000061B200:word64]
	word64 rax_822 = fn000000000040A390(rdi_821)
	word64 rax_830 = dcgettext(DPB(rdi_821, 0x00000000, 0), DPB(rsi_816, 0x004137BB, 0), DPB(rdx_817, 0x00000005, 0))
	word64 rax_837 = DPB(rax_830, __printf_chk(DPB(rdi_821, 0x00000001, 0), rax_830), 0)
	word64 rax_844 = dcgettext(DPB(rdi_821, 0x00000000, 0), DPB(rax_830, 0x004137E8, 0), DPB(rax_822, 0x00000005, 0))
	word64 rax_851 = DPB(rax_844, __printf_chk(DPB(rdi_821, 0x00000001, 0), rax_844), 0)
	word64 rdx_854 = DPB(rax_822, 0x00000005, 0)
	word64 rax_861 = dcgettext(DPB(rdi_821, 0x00000000, 0), DPB(rax_844, 0x00415A30, 0), rdx_854)
	word64 rsp_865
	word64 rbp_866
	word32 edx_867
	word64 rbx_868
	word32 ebx_869
	word32 edi_870
	byte SCZO_871
	byte SZO_872
	byte C_873
	byte Z_874
	word32 esi_875
	word64 rax_876
	word64 rdi_877
	word64 rsi_878
	word64 rdx_879
	word64 rcx_880
	word32 eax_881
	word32 ecx_882
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_858,dwLoc04_4,dwLoc08_10,eax_862,ebx_807,ecx_845,edi_855,edx_853,esi_859,rax_861,rbp_852,rbx_806,rcx_818,rdi_864,rdx_854,rsi_863,rsp_803,SCZO_809,SZO_857,Z_812
		defs: C_873,eax_881,ebx_869,ecx_882,edi_870,edx_867,esi_875,rax_876,rbp_866,rbx_868,rcx_880,rdi_877,rdx_879,rsi_878,rsp_865,SCZO_871,SZO_872,Z_874
	word64 rsp_887
	word64 rbp_888
	word32 edx_889
	word64 rbx_890
	word32 edi_892
	byte SCZO_893
	byte SZO_894
	byte C_895
	byte Z_896
	word32 esi_897
	word64 rax_898
	word64 rdi_899
	word64 rcx_902
	word32 eax_903
	word32 ecx_904
	word64 rdx_901
	word64 rsi_900
	call setlocale (retsize: 8; depth: 24)
		uses: C_885,dwLoc04_4,dwLoc08_10,eax_881,ebx_869,ecx_882,edi_886,edx_867,esi_883,rax_876,rbp_866,rbx_868,rcx_880,rdi_877,rdx_879,rsi_878,rsp_865,SCZO_871,SZO_884,Z_874
		defs: C_895,eax_903,ebx_891,ecx_904,edi_892,edx_889,esi_897,rax_898,rbp_888,rbx_890,rcx_902,rdi_899,rdx_901,rsi_900,rsp_887,SCZO_893,SZO_894,Z_896
	branch rax_898 == 0x0000000000000000 l0000000000409BC8
// DataOut: eax ebx rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 edx:0x00000005 ebx:edi rbp:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BB2:
	rdx_901 = DPB(rdx_901, 0x00000003, 0) (alias)
	rsi_900 = DPB(rsi_900, 0x0041380A, 0) (alias)
	word64 rax_935 = DPB(rax_898, strncmp(rax_898, rsi_900, rdx_901), 0)
	branch strncmp(rax_898, rsi_900, rdx_901) != 0x00000000 l0000000000409BFF
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 edx:<invalid> ebx:edi rbp:<invalid> edi:<invalid> esi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BFF:
	word64 rdi_940 = Mem0[0x000000000061B200:word64]
	word64 rax_941 = fn000000000040A390(rdi_940)
	word64 rax_949 = dcgettext(DPB(rdi_940, 0x00000000, 0), DPB(rsi_900, 0x00415A70, 0), DPB(rdx_901, 0x00000005, 0))
	rdx_901 = rax_941
	rsi_900 = rax_949
	word64 rax_958 = DPB(rax_949, __printf_chk(DPB(rdi_940, 0x00000001, 0), rax_949), 0)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 edx:0x00000003 ebx:edi rbp:<invalid> edi:<invalid> esi:0x0041380A rax:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BC8:
	word64 rdi_911 = Mem0[0x000000000061B200:word64]
	fn000000000040A390(rdi_911)
	word64 rax_920 = dcgettext(DPB(rdi_911, 0x00000000, 0), DPB(rsi_900, 0x00415AB8, 0), DPB(rdx_901, 0x00000005, 0))
	rdi_36 = DPB(rdi_911, 0x00000001, 0) (alias)
	word64 rax_929 = DPB(rax_920, __printf_chk(rdi_36, rax_920), 0)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 edx:<invalid> ebx:edi rbp:<invalid> edi:<invalid> esi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409768:
	word64 rax_45 = dcgettext(DPB(rdi, 0x00000000, 0), DPB(rsi, 0x00413D60, 0), rdx_7)
	rdi_36 = Mem0[0x000000000061A650:word64]
	word64 rax_55 = DPB(rax_45, __fprintf_chk(rdi_36, DPB(rsi, 0x00000001, 0), rax_45), 0)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 edx:0x00000005 ebx:edi rbp:<invalid> -8(fp):rbx -4(fp):rbp

l000000000040978D:
	exit(DPB(rdi_36, ebx_12, 0))
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 edx:<invalid> ebx:edi rbp:<invalid> esi:<invalid> edi:<invalid> rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp



void fn0000000000409CC0(word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn0000000000409CC0_entry:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409CC0:
	branch (Mem0[rsi + 0x0000000000000018:word32] & 0x0000F000) == 0x0000A000 l0000000000409D10
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D10:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid>

l0000000000409CCF:
	word64 rsp_26
	word32 eax_27
	word64 rsi_28
	byte SZO_29
	byte C_30
	byte SCZO_31
	byte Z_32
	byte S_33
	word64 rax_34
	byte al_35
	call acl_extended_file (retsize: 8; depth: 16)
		uses: al_8,C,eax_5,rax_7,rsi,rsp_21,S,SCZO_22,SZO,Z_10
		defs: al_35,C_30,eax_27,rax_34,rsi_28,rsp_26,S_33,SCZO_31,SZO_29,Z_32
	branch eax_27 < 0x00000000 l0000000000409CE8
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid>
// LocalsOut: fp(64)

l0000000000409CE8:
	word32 eax_47 = Mem0[__errno_location():word32]
	branch eax_47 == 0x0000005F l0000000000409D18
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF4:
	branch eax_47 == 0x00000026 l0000000000409D18
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:<invalid> rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF9:
	branch eax_47 == 0x00000016 l0000000000409D18
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:<invalid> rax:<invalid>
// LocalsOut: fp(64)

l0000000000409D18:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:<invalid> rax:<invalid>

l0000000000409CFE:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:<invalid> rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CDC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:<invalid> rax:<invalid> al:<invalid>

fn0000000000409CC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> rax:<invalid> al:<invalid>



void fn0000000000409D20(word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000409D20_entry:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D20:
	word64 rbx_152 = DPB(rbx, 0x00000401, 0)
	branch rsi >u 0x0000000000000400 l0000000000409D59
// DataOut: rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D55_1:
	rbx_152 = rsi + 0x0000000000000001
// DataOut: rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:0x00000401 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D59:
// DataOut: rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:rsi + 0x0000000000000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D60:
	branch malloc(rbx_152) == 0x0000000000000000 l0000000000409DAB
// DataOut: rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D70:
	word64 rsp_144
	word64 rdi_145
	word64 rsi_146
	word64 rax_147
	word64 r15_148
	word64 r14_149
	word64 rbp_150
	word64 r13_151
	word32 ebx_153
	byte SCZO_154
	byte CZ_155
	byte SZO_156
	byte C_157
	byte Z_158
	word64 rdx_159
	word64 r12_160
	byte S_161
	word32 eax_162
	word32 edx_163
	word64 r11_164
	call readlink (retsize: 8; depth: 56)
		uses: C_55,CZ_43,dwLoc04_4,dwLoc08_10,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_23,dwLoc24,eax_52,ebx_45,edx_42,qwLoc08,qwLoc10,qwLoc18,qwLoc30,r11_44,r12_40,r13_138,r14_37,r15_38,rax_139,rbp_56,rbx_140,rdi_143,rdx_141,rsi_142,rsp_49,S_39,SCZO_46,SZO_53,Z_54
		defs: C_157,CZ_155,eax_162,ebx_153,edx_163,r11_164,r12_160,r13_151,r14_149,r15_148,rax_147,rbp_150,rbx_152,rdi_145,rdx_159,rsi_146,rsp_144,S_161,SCZO_154,SZO_156,Z_158
	branch rax_147 < 0x0000000000000000 l0000000000409DD8
// DataOut: r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DD8:
	word64 rax_225 = __errno_location()
	word32 edx_227 = Mem0[rax_225:word32]
	branch edx_227 == 0x00000022 l0000000000409D86
// DataOut: edx r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DE4:
	free(rbp_150)
	Mem236[rax_225:word32] = edx_227
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D86:
	branch rbx_152 >u rax_147 l0000000000409E08
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409E08:
	Mem209[rbp_150:byte] = 0x00
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409D8B:
	free(rbp_150)
	branch rbx_152 >u 0x00000000FFFFFFFF l0000000000409DC0
// DataOut: rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DC0:
	branch rbx_152 >u 0x00000000FFFFFFFE l0000000000409E20
// DataOut: rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409E20:
	Mem192[__errno_location():word32] = 0x0000000C
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409DC5:
// DataOut: rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D98:
	branch malloc(rbx_152 * 0x0000000000000002) != 0x0000000000000000 l0000000000409D70
// DataOut: rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DAB:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DAD:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> eax:0x00000000 rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -48(fp):<invalid> -36(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000409D20_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:rbx rdi:<invalid> rbp:<invalid> eax:0x00000000 rsi:<invalid> rdx:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -48(fp):<invalid> -36(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000409E50(word64 rax, word64 rcx, word64 rdx, word64 rsi, word64 rdi, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rcx rdi rdx rsi
// LiveOut: al eax ebp r12 r12d r14 rax rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000409E50_entry:
// DataOut: fs r11 r8 rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409E50:
	word64 qwLoc38_115
	word64 rax_111
	word64 rax_29 = DPB(rax, strlen(rdi), 0)
	word64 r12_16
	*r12Out = rcx
	word64 rbp_133 = rdx
	word64 r14_129 = Mem0[rsi:word64]
	*r14Out = r14_129
	branch r14_129 == 0x0000000000000000 l0000000000409F72
// DataOut: eax fs r11 r12 r12d r14 r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0040(64)

l0000000000409F72:
	qwLoc38_115 = 0xFFFFFFFFFFFFFFFF
// DataOut: fs r11 r12 r12d r14 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:rdx rax:DPB(rax, <invalid>, 0) r14:<invalid> -64(fp):rdi -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64)

l0000000000409E81:
	byte bLoc29_114 = 0x00
	qwLoc38_115 = 0xFFFFFFFFFFFFFFFF
	word64 rbx_117 = DPB(rbx, 0x00000000, 0)
	rax_130 = rax_29
// DataOut: eax fs r11 r12 r12d r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:rdx rax:DPB(rax, <invalid>, 0) r14:<invalid> -64(fp):rdi -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EE8:
	word64 rax_130
	word64 rax_138 = DPB(rax_130, strncmp(r14_129, rdi, rax_29), 0)
	branch strncmp(r14_129, rdi, rax_29) != 0x00000000 l0000000000409ED8
	rax_130 = DPB(rax_130, strncmp(r14_129, rdi, rax_29), 0)
	branch strncmp(r14_129, rdi, rax_29) != 0x00000000 l0000000000409ED8
// DataOut: eax fs r11 r12 r12d r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EFB:
	branch DPB(rax_130, strlen(r14_129), 0) == rax_29 l0000000000409F60
	rax_130 = DPB(rax_130, strlen(r14_129), 0)
	branch rax_130 == rax_29 l0000000000409F60
// DataOut: eax fs r11 r12 r12d r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(32) Local -0038(0) Local -0040(64)

l0000000000409F60:
	word32 ebp_254
	*ebpOut = (word32) Mem0[qwLoc08 + 0x0000000000000008:word64]
	return rbx_117
// DataOut: al eax ebp fs r11 r12 r12d r14 r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409F08:
	branch qwLoc38_115 != 0xFFFFFFFFFFFFFFFF l0000000000409EA0
	branch qwLoc38_115 != 0xFFFFFFFFFFFFFFFF l0000000000409EA0
// DataOut: eax fs r11 r12 r12d r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(32) Local -0038(64) Local -0040(64)

l0000000000409EA0:
	rax_130 = rdx
	branch rdx == 0x0000000000000000 l0000000000409F50
// DataOut: eax fs r11 r12 r12d r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(32) Local -0038(64) Local -0040(64)

l0000000000409F50:
	bLoc29_114 = 0x01
// DataOut: eax fs r11 r12 r12d r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:rdx r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EAE:
	word64 rdi_224 = qwLoc38_115 *s rcx + rdx
	word64 rax_225 = DPB(rdx, memcmp(rdi_224, rbp_133, rcx), 0)
	byte cl_229 = (byte) (word32) bLoc29_114
	rax_130 = DPB(rdx, 0x00000001, 0) (alias)
	branch memcmp(rdi_224, rbp_133, rcx) == 0x00000000 l0000000000409ED4
// DataOut: cl eax fs r11 r12 r12d r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:rdx r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0038(0) Local -0040(64)

l0000000000409ED1_1:
	cl_229 = 0x01 (alias)
// DataOut: cl eax fs r11 r12 r12d r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> ecx:<invalid> eax:0x00000001 rbx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0038(0) Local -0040(64)

l0000000000409ED4:
	bLoc29_114 = cl_229
// DataOut: eax fs r11 r12 r12d r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> ecx:<invalid> eax:0x00000001 rbx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409ED8:
	rbx_117 = rbx_117 + 0x0000000000000001
	rbp_133 = rbp_133 + rcx
	r14_129 = Mem0[rsi + rbx_117 * 0x0000000000000008:word64]
	*r14Out = r14_129
	branch r14_129 == 0x0000000000000000 l0000000000409F28
// DataOut: eax fs r11 r12 r12d r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409F10:
	word64 rbx_201 = rbx_117 + 0x0000000000000001
	word64 rbp_202 = rbp_133 + rcx
	branch Mem0[rsi + rbx_201 * 0x0000000000000008:word64] != 0x0000000000000000 l0000000000409EE8
	qwLoc38_115 = rbx_201
	rbx_117 = rbx_201 + 0x0000000000000001
	rbp_133 = rbp_202 + rcx
	r14_129 = Mem0[rsi + (rbx_201 + 0x0000000000000001) * 0x0000000000000008:word64]
	*r14Out = r14_129
	branch r14_129 != 0x0000000000000000 l0000000000409EE8
// DataOut: eax fs r11 r12 r12d r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409F25:
// DataOut: fs r11 r12 r12d r14 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0029(0) Local -0038(64)

l0000000000409F28:
	rax_111 = 0xFFFFFFFFFFFFFFFE
	branch bLoc29_114 != 0x00 l0000000000409F3B
// DataOut: al eax fs r11 r12 r12d r14 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64)

l0000000000409F36:
	rax_111 = qwLoc38_115
// DataOut: al eax fs r11 r12 r12d r14 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:0xFFFFFFFE -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409F3B:
	word32 ebp_87
	*ebpOut = (word32) Mem0[qwLoc08 + 0x0000000000000008:word64]
	return rax_111
// DataOut: al eax ebp fs r11 r12 r12d r14 r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000409E50_exit:
// DataOut: al eax ebp r12 r12d r14 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rdx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000409F80(word64 rdx, word32 esi, word64 rdi, word64 r11, selector fs, ptr64 & rbpOut, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs r11 rdi rdx
// LiveOut: r11 r15 rbp rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000409F80_entry:
// DataOut: esi fs r11 rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409F80:
	word64 rdx_9 = DPB(rdx, 0x00000005, 0)
	word32 ebp_15 = (word32) rdi
	word32 ebx_21 = (word32) rsi
	branch rdx == 0xFFFFFFFFFFFFFFFF l0000000000409FE0
// DataOut: ebp ebx fs r11 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409FE0:
	dcgettext(DPB(rdi, 0x00000000, 0), DPB(rsi, 0x00415DFD, 0), rdx_9)
// DataOut: ebp ebx fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C edx:0x00000005 rbp:rdi rbx:rsi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000409F95:
	dcgettext(DPB(rdi, 0x00000000, 0), DPB(rsi, 0x00415E18, 0), rdx_9)
// DataOut: ebp ebx fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C edx:0x00000005 rbp:rdi rbx:rsi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000409FA4:
	word64 r11_29
	word64 rbx_30 = fn000000000040EBF0(ebx_21, ebp_15, rdi, 0x00000001, r11, fs, out r11_29)
	word64 r11_37
	word64 r15_38
	fn000000000040E970(rbx_30, 0x00000006, 0x00000000, r11_29, fs, out r11_37, out r15_38)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C edx:0x00000005 rbp:rdi rbx:rsi esi:<invalid> edi:0x00000000 rax:<invalid> r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000402770:
	word64 rsp_57
	word64 rdx_58
	byte SCZO_59
	word32 edx_60
	word64 rbp_61
	word64 rdi_62
	word64 rbx_63
	word64 rsi_64
	byte Z_65
	word32 esi_66
	word32 edi_67
	byte SZO_68
	byte C_69
	word64 rax_70
	word64 r12_71
	word64 r8_72
	word64 rcx_73
	word32 eax_74
	word64 r11_75
	selector fs_76
	word64 r15_77
	word32 ebx_78
	word32 ebp_79
	call Mem0[0x000000000061A300:word32] (retsize: 4; depth: 4)
		uses: C_56,dwLoc04_4,dwLoc08_12,dwLoc0C_18,eax_54,ebp_48,ebx_42,edi_53,edx_8,esi_52,fs,r11_37,r12_22,r15_38,r8_44,rax_23,rbp_47,rbx_41,rcx_46,rdi_24,rdx_45,rsi_25,rsp_51,SCZO_6,SZO_55,Z_7
		defs: C_69,eax_74,ebp_79,ebx_78,edi_67,edx_60,esi_66,fs_76,r11_75,r12_71,r15_77,r8_72,rax_70,rbp_61,rbx_63,rcx_73,rdi_62,rdx_58,rsi_64,rsp_57,SCZO_59,SZO_68,Z_65
	return rbx_63
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> esi:<invalid> edi:<invalid> rax:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> ebx:<invalid> rdi:<invalid> rcx:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> r9d:<invalid> r14d:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000409F80_exit:
// DataOut: r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> esi:<invalid> edi:<invalid> rax:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> ebx:<invalid> rdi:<invalid> rcx:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> r9d:<invalid> r14d:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040A000(word64 rdx, word64 rsi, word64 rdi, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi rdx rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040A000_entry:
// DataOut: fs r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A000:
	word64 rdx_20 = DPB(rdx, 0x00000005, 0)
	word64 rax_36 = dcgettext(DPB(rdi, 0x00000000, 0), DPB(rsi, 0x00415E35, 0), rdx_20)
	word64 rsp_44
	word64 rdi_45
	word64 r15_46
	word32 edi_47
	byte SZO_48
	byte C_49
	word32 r14d_51
	word32 edx_55
	word32 esi_56
	byte SCZO_58
	word32 ebx_60
	word64 r12_61
	byte Z_62
	word32 eax_64
	word64 rcx_65
	selector fs_67
	word32 ebp_199
	word64 r11_200
	word64 r14_203
	word64 r13_209
	word64 rbx_214
	word64 rbp_215
	word64 rax_206
	word64 rdx_212
	word64 rsi_216
	call fputs_unlocked (retsize: 8; depth: 40)
		uses: C_43,dwLoc04_4,dwLoc08_10,dwLoc0C_16,dwLoc10_23,dwLoc14_25,dwLoc18_32,eax_37,ebp_27,ebx_40,edi_6,edx_19,esi_28,r13_18,r14_13,r14d_11,r15_5,rax_36,rbp_26,rbx_41,rdi_38,rdx_20,rsi_39,rsp_33,SZO_42
		defs: C_49,eax_64,ebp_68,ebx_60,edi_47,edx_55,esi_56,fs_67,r11_66,r12_61,r13_53,r14_63,r14d_51,r15_46,rax_59,rbp_52,rbx_57,rcx_65,rdi_45,rdx_54,rsi_50,rsp_44,SCZO_58,SZO_48,Z_62
	word64 r12_204 = Mem0[r15_46:word64]
	branch r12_204 != 0x0000000000000000 l000000000040A086
// DataOut: eax ebp ebx fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A086:
	branch rbx_214 == 0x0000000000000000 l000000000040A050
	branch rbx_214 == 0x0000000000000000 l000000000040A050
// DataOut: eax ebp ebx fs r11 r12 r13 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A08B:
	word64 rax_258 = DPB(rax_206, memcmp(r14_203, rbp_215, r13_209), 0)
	branch memcmp(r14_203, rbp_215, r13_209) != 0x00000000 l000000000040A050
	rax_206 = DPB(rax_206, memcmp(r14_203, rbp_215, r13_209), 0)
	rdx_212 = r13_209
	rsi_216 = rbp_215
	branch memcmp(r14_203, rbp_215, r13_209) != 0x00000000 l000000000040A050
// DataOut: ebp ebx fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A050:
	word64 rbp_232
	word64 r15_236
	rbx_214 = fn000000000040EC10((word32) (rbx_214 + 0x0000000000000001), ebp_199, r12_204, r11_200, fs_67, out rbp_232, out r11_200, out r13_209, out r14_203, out r15_236)
	rdx_212 = DPB(rdx_212, 0x00415E4A, 0) (alias)
	rsi_216 = DPB(rsi_216, 0x00000001, 0) (alias)
	rbp_215 = rbp_232 + r13_209
	rax_206 = DPB(rax_206, __fprintf_chk(Mem0[0x000000000061A650:word64], rsi_216, rdx_212), 0)
	ebp_199 = (word32) rbp_215 (alias)
	r12_204 = Mem0[r15_236 + rbx_214 * 0x0000000000000008:word64]
	branch r12_204 == 0x0000000000000000 l000000000040A0D0
// DataOut: eax ebp ebx fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A09D:
	word64 rbp_276
	word64 r11_277
	word64 r13_278
	word64 r14_279
	word64 r15_280
	word64 rbx_281 = fn000000000040EC10((word32) (rbx_214 + 0x0000000000000001), (word32) (rbp_215 + r13_209), r12_204, r11_200, fs_67, out rbp_276, out r11_277, out r13_278, out r14_279, out r15_280)
	word64 rax_290 = DPB(rax_206, __fprintf_chk(Mem0[0x000000000061A650:word64], DPB(rbp_215, 0x00000001, 0), DPB(r13_209, 0x00415E52, 0)), 0)
	word64 r12_291 = Mem0[r15_280 + rbx_281 * 0x0000000000000008:word64]
	branch r12_291 != 0x0000000000000000 l000000000040A086
	ebp_199 = (word32) (rbp_276 + r13_278) (alias)
	word64 r15_304
	rbx_214 = fn000000000040EC10((word32) (rbx_281 + 0x0000000000000001), ebp_199, r12_291, r11_277, fs_67, out rbp_215, out r11_200, out r13_209, out r14_203, out r15_304)
	rdx_212 = DPB(r13_209, 0x00415E52, 0) (alias)
	rsi_216 = DPB(rbp_215, 0x00000001, 0) (alias)
	rax_206 = DPB(rax_206, __fprintf_chk(Mem0[0x000000000061A650:word64], rsi_216, rdx_212), 0)
	r12_204 = Mem0[r15_304 + rbx_214 * 0x0000000000000008:word64]
	branch r12_204 != 0x0000000000000000 l000000000040A086
// DataOut: eax ebp ebx fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A047:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r15:rdi edi:<invalid> r14d:0x00000000 r13:rdx edx:<invalid> rbp:rsi esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:0x00000000 r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0D0:
	word64 rdi_90 = Mem0[0x000000000061A650:word64]
	branch Mem0[rdi_90 + 0x0000000000000028:word64] >=u Mem0[rdi_90 + 0x0000000000000030:word64] l000000000040A0FB
	word64 rdi_94 = Mem0[0x000000000061A650:word64]
	word64 rax_96 = Mem0[rdi_94 + 0x0000000000000028:word64]
	branch rax_96 >=u Mem0[rdi_94 + 0x0000000000000030:word64] l000000000040A0FB
// DataOut: rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0FB:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000402400:
	word64 rsp_174
	word64 rdi_175
	word64 r15_176
	word32 edi_177
	byte SZO_178
	byte C_179
	word64 rsi_180
	word32 r14d_181
	word64 rbp_182
	word64 r13_183
	word64 rdx_184
	word32 edx_185
	word32 esi_186
	word64 rbx_187
	byte SCZO_188
	word64 rax_189
	word32 ebx_190
	word64 r12_191
	byte Z_192
	word64 r14_193
	word32 eax_194
	word64 rcx_195
	word64 r11_196
	selector fs_197
	word32 ebp_198
	call Mem0[0x000000000061A148:word32] (retsize: 4; depth: 4)
		uses: C_99,dwLoc04_4,dwLoc08_10,dwLoc0C_16,dwLoc10_23,dwLoc14_25,dwLoc18_32,eax_97,ebp_73,ebx_79,edi_95,edx_81,esi_160,fs_67,r11_74,r12_78,r13_82,r14_76,r14d_83,r15_85,rax_96,rbp_167,rbx_161,rcx_75,rdi_171,rdx_86,rsi_169,rsp_172,SCZO_159,SZO_84,Z_77
		defs: C_179,eax_194,ebp_198,ebx_190,edi_177,edx_185,esi_186,fs_197,r11_196,r12_191,r13_183,r14_193,r14d_181,r15_176,rax_189,rbp_182,rbx_187,rcx_195,rdi_175,rdx_184,rsi_180,rsp_174,SCZO_188,SZO_178,Z_192
	return rsp_174
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0E1:
	Mem126[rdi_94 + 0x0000000000000028:word64] = rax_96 + 0x0000000000000001
	Mem127[rax_96:byte] = 0x0A
	word64 rsp_133 = Mem127[rsp_44 + 0x0000000000000018:word64]
	word64 rdi_139 = Mem127[rsp_133 + 0x0000000000000018:word64]
	return rsp_133 + 0x0000000000000020
	Mem142[rdi_139 + 0x0000000000000028:word64] = rax_96 + 0x0000000000000001
	Mem143[rax_96:byte] = 0x0A
	return Mem143[rsp_133 + 0x0000000000000038:word64] + 0x0000000000000020
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A000_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040A120(word64 rax, word64 rcx, word64 rdx, word64 rsi, word64 r8, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r8 rax rcx rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A120_entry:
// DataOut: fs r11 r8 rax rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A120:
	word64 rsp_37
	word32 ebp_38
	word64 r12_39
	word64 r14_40
	word64 rax_41 = fn0000000000409E50(rax, r8, rcx, rdx, rsi, out rsp_37, out ebp_38, out r12_39, out r14_40)
	branch rax_41 < 0x0000000000000000 l000000000040A165
// DataOut: fs r11 r12d r14 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A165:
	word32 esi_84 = (word32) r12_39
	word64 rbp_86
	word64 r11_87
	word64 r15_88
	word64 rbx_89 = fn0000000000409F80(rax_41, esi_84, r14_40, r11, fs, out rbp_86, out r11_87, out r15_88)
	word64 rsp_93 = fn000000000040A000(r15_88, rbp_86, rbx_89, r11_87, fs)
	word64 rsp_94
	word64 rdi_95
	word64 r15_96
	word64 r8_97
	word64 rsi_98
	word64 r14_99
	word64 rbp_100
	word64 r13_101
	word64 r9_102
	word64 r12_103
	word64 rcx_104
	word64 rbx_105
	word64 rdx_106
	byte SCZO_107
	word64 rax_108
	byte SZO_109
	byte C_110
	byte S_111
	word32 r13d_112
	word64 r11_113
	selector fs_114
	word32 ebp_115
	word32 esi_116
	call r13d (retsize: 4; depth: 4)
		uses: C_44,dwLoc04_4,dwLoc08_9,dwLoc0C_13,dwLoc10_18,dwLoc14_22,dwLoc18_29,ebp_38,esi_84,fs,r11_87,r12_39,r13_15,r13d,r14_40,r15_88,r8,r9,rax_41,rbp_86,rbx_89,rcx_26,rdi_92,rdx_90,rsi_91,rsp_93,S_43,SCZO_35,SZO_42
		defs: C_110,ebp_115,esi_116,fs_114,r11_113,r12_103,r13_101,r13d_112,r14_99,r15_96,r8_97,r9_102,rax_108,rbp_100,rbx_105,rcx_104,rdi_95,rdx_106,rsi_98,rsp_94,S_111,SCZO_107,SZO_109
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:r8 rbx:rdx rdx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> ecx:<invalid> eax:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A156:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> edx:<invalid> esi:<invalid> edi:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> al:0xFF cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A120_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> edx:<invalid> esi:<invalid> edi:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> al:0xFF cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040A2B0(word64 rdi, word64 qwArg00, word64 qwArg10, word64 qwArg18)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh dl dx eax ebp ebx ecx edx esi esp rax rbp rbx rcx rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040A2B0_entry:
// DataOut: rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A2B0:
	word64 rbp_16 = DPB(rbp, Mem0[rdi:byte] == 0x2F, 0)
	word64 rax_18 = fn000000000040A390(rdi)
	word64 rcx_20 = rax_18 - rdi
	branch rcx_20 <=u rbp_16 l000000000040A2FD
// DataOut: rax rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A2D2:
	word64 rdx_48 = rcx_20 - 0x0000000000000001
	branch Mem0[rax_18 - 0x0000000000000001:byte] == 0x2F l000000000040A2EE
// DataOut: rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 ebp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040A2EE:
	branch rbp_16 <u rdx_48 l000000000040A2E0
// DataOut: rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 ebp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040A2E0:
	word64 rax_56 = rdx_48 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rdx_48:byte] != 0x2F l000000000040A2F3
// DataOut: rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 ebp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040A2EB:
	rdx_48 = rax_56
// DataOut: rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 ebp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040A2DC:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 ebp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040A2FD:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 ebp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040A2F3:
	return
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 ebp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp

fn000000000040A2B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000020 ebp:<invalid> rbx:<invalid> bpl:<invalid> rcx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn000000000040A390(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A390_entry:
// DataOut: ebx r11 r12 r13 r14 r14b r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A390:
	word32 edx_13 = (word32) Mem0[rdi:byte]
	word64 rax_12 = rdi
	branch (byte) edx_13 != 0x2F l000000000040A3AC
// DataOut: dl ebx r11 r12 r13 r14 r14b r15 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A39B:
// DataOut: ebx r11 r12 r13 r14 r14b r15 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:(word32) Mem0[rdi:byte] rax:rdi

l000000000040A3A0:
	rax_12 = rax_12 + 0x0000000000000001
	edx_13 = (word32) Mem0[rax_12:byte]
	branch (byte) edx_13 == 0x2F l000000000040A3A0
// DataOut: dl ebx r11 r12 r13 r14 r14b r15 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3AC:
	byte sil_17 = 0x00
	word64 rdx_18 = rax_12
	branch (byte) edx_13 == 0x00 l000000000040A3F7
// DataOut: ebx r11 r12 r13 r14 r14b r15 rax rbp rbx rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3F7:
	return rax_12
// DataOut: ebx r11 r12 r13 r14 r14b r15 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:0x00000000 rdx:<invalid>

l000000000040A3B7:
// DataOut: ebx r11 r12 r13 r14 r14b r15 rax rbp rbx rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:0x00000000 rdx:<invalid>

l000000000040A3C0:
	rdx_18 = rdx_18 + 0x0000000000000001
	byte cl_45 = (byte) (word32) Mem0[rdx_18:byte]
	branch cl_45 == 0x00 l000000000040A3E5
// DataOut: cl ebx r11 r12 r13 r14 r14b r15 rax rbp rbx rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid>

l000000000040A3CB:
	branch cl_45 == 0x2F l000000000040A3F0
// DataOut: ebx r11 r12 r13 r14 r14b r15 rax rbp rbx rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid>

l000000000040A3F0:
	sil_17 = 0x01 (alias)
// DataOut: ebx r11 r12 r13 r14 r14b r15 rax rbp rbx rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid>

l000000000040A3D0:
	branch sil_17 == 0x00 l000000000040A3C0
// DataOut: ebx r11 r12 r13 r14 r14b r15 rax rbp rbx rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid>

l000000000040A3D5:
	rdx_18 = rdx_18 + 0x0000000000000001
	rax_12 = rdx_18
	cl_45 = (byte) (word32) Mem0[rdx_18:byte] (alias)
	sil_17 = 0x00 (alias)
	branch cl_45 != 0x00 l000000000040A3CB
// DataOut: cl ebx r11 r12 r13 r14 r14b r15 rax rbp rbx rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid>

l000000000040A3E5:
	return rax_12
// DataOut: ebx r11 r12 r13 r14 r14b r15 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid>

fn000000000040A390_exit:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid>



word64 fn000000000040A400(word64 rax, word64 rdi, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: rax rsp
// Trashed: SCZO ah al ax dh dl dx eax edx esp rax rdx rsp sp spl
// Preserved: rbx
fn000000000040A400_entry:
// DataOut: r11 r12 r14 r14b r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A400:
	word64 rax_23 = DPB(rax, strlen(rdi), 0)
	branch rax_23 <=u 0x0000000000000001 l000000000040A41A
// DataOut: r11 r12 r14 r14b r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A40F:
	word64 rdx_31 = rax_23 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rax_23:byte] == 0x2F l000000000040A420
// DataOut: r11 r12 r14 r14b r15 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rax:<invalid> rdx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040A420:
	rax_23 = rdx_31
	branch rdx_31 != 0x0000000000000001 l000000000040A40F
// DataOut: r11 r12 r14 r14b r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rax:<invalid> rdx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040A429:
	return rdx_31
// DataOut: r11 r12 r14 r14b r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rax:<invalid> rdx:<invalid> -4(fp):rbx

l000000000040A41A:
	return rax_23
// DataOut: r11 r12 r14 r14b r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rax:<invalid> rdx:<invalid> -4(fp):rbx

fn000000000040A400_exit:
// DataOut: rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdx:<invalid> -4(fp):rbx



void fn000000000040A600(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx rax rdi rdx
// Preserved: rsp
fn000000000040A600_entry:
// DataOut: fs r11 r11d r13 r13d r14 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A600:
	word32 edi_4 = Mem0[rdi + 0x0000000000000018:word32]
// DataOut: edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A430:
	byte dl_12
	branch (edi_4 & 0x0000F000) == 0x00008000 l000000000040A5B0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid>

l000000000040A5B0:
	dl_12 = 0x2D (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A442:
	branch (edi_4 & 0x0000F000) == 0x00004000 l000000000040A5C0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A5C0:
	dl_12 = 0x64 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A44D:
	branch (edi_4 & 0x0000F000) == 0x00006000 l000000000040A5D0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A5D0:
	dl_12 = 0x62 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A458:
	branch (edi_4 & 0x0000F000) == 0x00002000 l000000000040A5A0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A5A0:
	dl_12 = 0x63 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A463:
	branch (edi_4 & 0x0000F000) == 0x0000A000 l000000000040A5E0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A5E0:
	dl_12 = 0x6C (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A46E:
	branch (edi_4 & 0x0000F000) == 0x00001000 l000000000040A5F0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A5F0:
	dl_12 = 0x70 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A479:
	dl_12 = 0x73 (alias)
	branch (edi_4 & 0x0000F000) == 0x0000C000 l000000000040A48B
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A488_1:
	dl_12 = 0x3F (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:0x0000003F edx:0x00000073

l000000000040A48B:
	byte al_131
	Mem14[rsi:byte] = dl_12
	Mem23[rsi + 0x0000000000000001:byte] = (byte) ((0x00000000 - ((edi_4 & 0x00000100) <u 0x00000001) & 0xFFFFFFBB) + 0x00000072)
	Mem32[rsi + 0x0000000000000002:byte] = (byte) ((0x00000000 - ((edi_4 & 0x00000080) <u 0x00000001) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_37 = 0x00000000 - ((edi_4 & 0x00000040) <u 0x00000001)
	branch (edi_4 & 0x00000800) == 0x00000000 l000000000040A590
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

l000000000040A590:
	al_131 = (byte) ((eax_37 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

l000000000040A4CD:
	al_131 = (byte) ((eax_37 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

l000000000040A4D3:
	byte al_123
	Mem43[rsi + 0x0000000000000003:byte] = al_131
	Mem52[rsi + 0x0000000000000004:byte] = (byte) ((0x00000000 - ((edi_4 & 0x00000020) <u 0x00000001) & 0xFFFFFFBB) + 0x00000072)
	Mem61[rsi + 0x0000000000000005:byte] = (byte) ((0x00000000 - ((edi_4 & 0x00000010) <u 0x00000001) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_66 = 0x00000000 - ((edi_4 & 0x00000008) <u 0x00000001)
	branch (edi_4 & 0x00000400) == 0x00000000 l000000000040A580
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

l000000000040A580:
	al_123 = (byte) ((eax_66 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

l000000000040A50E:
	al_123 = (byte) ((eax_66 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

l000000000040A514:
	Mem72[rsi + 0x0000000000000006:byte] = al_123
	Mem81[rsi + 0x0000000000000007:byte] = (byte) ((0x00000000 - ((edi_4 & 0x00000004) <u 0x00000001) & 0xFFFFFFBB) + 0x00000072)
	Mem93[rsi + 0x0000000000000008:byte] = (byte) ((0x00000000 - ((edi_4 & 0x00000002) <u 0x00000001) & 0xFFFFFFB6) + 0x00000077)
	branch (edi_4 & 0x00000200) == 0x00000000 l000000000040A560
// DataOut: edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

l000000000040A560:
	Mem111[rsi + 0x000000000000000A:byte] = 0x20
	Mem112[rsi + 0x000000000000000B:byte] = 0x00
	Mem120[rsi + 0x0000000000000009:byte] = (byte) ((0x00000000 - ((edi_4 & 0x00000001) <u 0x00000001) & 0xFFFFFFB5) + 0x00000078)
	return
// DataOut: fs r11 r11d r13 r13d r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

l000000000040A545:
	Mem100[rsi + 0x000000000000000A:byte] = 0x20
	Mem101[rsi + 0x000000000000000B:byte] = 0x00
	Mem109[rsi + 0x0000000000000009:byte] = (byte) ((0x00000000 - ((edi_4 & 0x00000001) <u 0x00000001) & 0xFFFFFFE0) + 0x00000074)
	return
// DataOut: fs r11 r11d r13 r13d r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

fn000000000040A600_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>



word64 fn000000000040A610(word64 rdx, word64 rsi, word64 rdi, ptr64 & rbpOut, ptr64 & r14bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14b rax rbp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040A610_entry:
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A610:
	word64 rdx_7
	word64 rsp_8
	word64 rbp_9
	word64 rsi_10
	word64 rdi_11
	byte r14b_12
	word64 rax_13 = fn000000000040A630(rdx, rsi, rdi, out rdx_7, out rsp_8, out rbp_9, out rsi_10, out rdi_11, out r14b_12)
	branch rax_13 == 0x0000000000000000 l000000000040A623
// DataOut: r11 r14b rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A623:
	fn0000000000410E50()
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> rax:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid>
// Terminates process

l000000000040A628_thunk_fn000000000040A630:
	word64 rdx_29
	word64 rsp_30
	word64 rbp_31
	word64 rsi_32
	word64 rdi_33
	byte r14b_34
	return fn000000000040A630(rdx_7, rsi_10, rdi_11, out rdx_29, out rsp_30, out rbp_31, out rsi_32, out rdi_33, out r14b_34)
// DataOut: r11 r14b rax rbp
// DataOut (flags): 
// SymbolicIn:

l000000000040A61E:
	return rax_13
// DataOut: r11 r14b rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> rax:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid>

fn000000000040A610_exit:
// DataOut: r14b rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> rax:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid>



word64 fn000000000040A630(word64 rdx, word64 rsi, word64 rdi, ptr64 & rdxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r14bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14b rax rbp rdi rdx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A630_entry:
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A630:
	word64 rax_29 = fn000000000040A390(rdi)
	word64 rsp_129
	word64 rax_33 = fn000000000040A400(rax_29, rax_29, out rsp_129)
	word64 rdx_37 = rax_29 - rdi
	*rdxOut = rdx_37
	Mem42[rsp_129:word64] = rdx_37 + rax_33
	byte r14b_11
	*r14bOut = 0x00
	word64 r14_13 = DPB(r14, 0x00000000, 0)
	branch rax_33 == 0x0000000000000000 l000000000040A679
// DataOut: r11 r14 r14b r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A66D:
	byte r14b_178 = Mem42[rax_29 - 0x0000000000000001 + rax_33:byte] != 0x2F
	*r14bOut = r14b_178
	r14_13 = DPB(r14, r14b_178, 0) (alias)
// DataOut: r11 r14 r14b r15 rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:0x00000000 r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A679:
	word64 rbx_168 = rsi + 0x0000000000000001
	branch Mem42[rsi:byte] == 0x2F l000000000040A700
// DataOut: r11 r14 r14b r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A700:
	rbx_168 = rbx_168 + 0x0000000000000000
	branch Mem42[rbx_168:byte] != 0x2F l000000000040A682
// DataOut: r11 r14 r14b r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A70D:
	rbx_168 = rbx_168 + 0x0000000000000001
	branch Mem42[rbx_168 + 0x0000000000000001:byte] != 0x2F l000000000040A682
// DataOut: r11 r14 r14b r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A71A:
// DataOut: r11 r14 r14b r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A682:
	word64 rax_150
	word64 rax_52 = DPB(rax_33, strlen(rbx_168), 0)
	word64 rcx_53 = Mem42[rsp_129:word64]
	Mem54[rsp_129 + 0x0000000000000008:word64] = rax_52
	word64 rax_57 = malloc(rcx_53 + 0x0000000000000001 + r14_13 + rax_52)
	branch rax_57 == 0x0000000000000000 l000000000040A720
// DataOut: r11 r13 r14 r14b r15 rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A720:
	rax_150 = DPB(rax_57, 0x00000000, 0) (alias)
// DataOut: r11 r14b rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6A8:
	word64 rsp_102
	word64 rdi_103
	word64 r15_104
	word64 rdx_105
	word64 rsi_106
	word32 r14d_107
	byte SZO_108
	byte C_109
	word64 rbp_110
	word64 r12_111
	word64 rbx_112
	byte SCZO_113
	word64 rax_114
	byte Z_115
	byte r14b_116
	word64 rcx_117
	word64 r14_118
	word64 r13_119
	word32 eax_120
	byte al_121
	call mempcpy (retsize: 8; depth: 8)
		uses: al_59,C_62,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_19,dwLoc14_22,dwLoc18_26,eax_58,r12_20,r13_63,r14_43,r14b_44,r14d_45,r15_6,rax_57,rbp_23,rbx_50,rcx_53,rdi_100,rdx_99,rsi_101,rsp_32,SCZO_49,SZO_60,Z_61
		defs: al_121,C_109,eax_120,r12_111,r13_119,r14_118,r14b_116,r14d_107,r15_104,rax_114,rbp_110,rbx_112,rcx_117,rdi_103,rdx_105,rsi_106,rsp_102,SCZO_113,SZO_108,Z_115
	Mem125[rax_114:byte] = 0x2F
	word64 rdi_126 = rax_114 + r14_118
	branch r15_104 == 0x0000000000000000 l000000000040A6D5
// DataOut: r11 r13 r14b rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6C3:
	Mem162[rdi_126:word64] = rdi_126 - DPB(rax_114, Mem125[rbp_110:byte] == 0x2F, 0)
// DataOut: r11 r13 r14b rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6D5:
	word64 rdi_130
	word64 r15_131
	word64 rdx_132
	word64 rsi_133
	word32 r14d_134
	byte SZO_135
	byte C_136
	word64 rbp_137
	word64 r12_138
	word64 rbx_139
	byte SCZO_140
	word64 rax_141
	byte Z_142
	byte r14b_143
	word64 rcx_144
	word64 r14_145
	word64 r13_146
	word32 eax_147
	byte al_148
	call mempcpy (retsize: 8; depth: 8)
		uses: al_121,C_124,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_19,dwLoc14_22,dwLoc18_26,eax_120,r12_111,r13_119,r14_118,r14b_116,r14d_107,r15_104,rax_114,rbp_110,rbx_112,rcx_117,rdi_126,rdx_127,rsi_128,rsp_102,SCZO_113,SZO_122,Z_123
		defs: al_148,C_136,eax_147,r12_138,r13_146,r14_145,r14b_143,r14d_134,r15_131,rax_141,rbp_137,rbx_139,rcx_144,rdi_130,rdx_132,rsi_133,rsp_129,SCZO_140,SZO_135,Z_142
	Mem149[rax_141:byte] = 0x00
	rax_150 = r13_146
// DataOut: r11 r14b rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> al:Test(EQ,Z) edx:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6E8:
	word64 rsp_85 = Mem54[rsp_129 + 0x0000000000000028:word64]
	word64 rbp_87
	*rbpOut = Mem54[rsp_85 + 0x0000000000000008:word64]
	word64 rsi_89
	*rsiOut = Mem54[rsp_85 + 0x0000000000000010:word64]
	word64 rdi_91
	*rdiOut = Mem54[rsp_85 + 0x0000000000000018:word64]
	word64 rsp_92
	*rspOut = rsp_85 + 0x0000000000000020
	return rax_150
// DataOut: r11 r14b rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A630_exit:
// DataOut: r14b rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040A730(word64 rdi, word32 r14d)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r14d rdi
// LiveOut: eax rax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A730_entry:
// DataOut: r11d r12 r14 r14d rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A730:
	word64 rdx_120 = Mem0[rdi:word64]
	byte cl_123 = (byte) (word32) Mem0[rdx_120:byte]
	branch cl_123 == 0x00 l000000000040A7CD
// DataOut: cl r11d r12 r14 r14d rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A7CD:
	return DPB(rax, 0x00000000, 0)
// DataOut: eax r11d r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A73E:
	byte r8b_136 = 0x00
	word64 rax_130 = DPB(rax, 0x00000000, 0)
	word64 r10_33 = DPB(r10, 0x00000000, 0)
// DataOut: cl eax r10 r11d r12 r14 r14d r8b rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A776:
	branch r8b_136 != 0x00 l000000000040A750
	branch r8b_136 != 0x00 l000000000040A750
// DataOut: cl eax r10 r11d r12 r14 r14d r8b rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A750:
	r8b_136 = 0x00 (alias)
	branch ((int32) cl_123 & 0xFFFFFFDF) <=u 0x0000005A l000000000040A768
// DataOut: cl eax r10 r11d r12 r14 r14d r8b rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A77B:
	branch cl_123 == 0x2E l000000000040A7B8
	branch cl_123 == 0x2E l000000000040A7B8
// DataOut: cl eax r10 r11d r12 r14 r14d r8b rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A7B8:
	branch rax_130 == 0x0000000000000000 l000000000040A7C8
// DataOut: r10 r11d r12 r14 r14d r8b rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A7C8:
	rax_130 = rdx_120
// DataOut: r10 r11d r12 r14 r14d r8b rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A7BD:
	rax_130 = DPB(rax_130, 0x00000001, 0) (alias)
// DataOut: eax r10 r11d r12 r14 r14d r8b rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 rax:<invalid> esi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A780:
	branch r14 <=u 0x0000000000000039 l000000000040A768
	word32 esi_102 = (int32) cl_123
	branch r14 <=u 0x0000000000000039 l000000000040A768
// DataOut: cl eax esi r10 r11d r12 r14 r14d r8b rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A78D:
	word32 esi_107 = (esi_102 & 0xFFFFFFDF) - 0x00000041
	branch esi_107 >u 0x00000019 l000000000040A761
	branch (esi_107 & 0xFFFFFFDF) >u 0x0000005A l000000000040A761
// DataOut: cl eax r10 r11d r12 r14 r14d r8b rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 r9d:r14 - 0x0000000000000030 esi:(int32) cl rax:<invalid>

l000000000040A761:
	branch cl_123 == 0x7E l000000000040A768
// DataOut: eax r10 r11d r12 r14 r14d r8b rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A764_1:
	rax_130 = r10_33
// DataOut: eax r10 r11d r12 r14 r14d r8b rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A768:
	rdx_120 = rdx_120 + 0x0000000000000001
	Mem79[rdi:word64] = rdx_120
	cl_123 = (byte) (word32) Mem79[rdx_120:byte] (alias)
	branch cl_123 == 0x00 l000000000040A7B0
// DataOut: cl eax r10 r11d r12 r14 r14d r8b rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A798:
	word64 rdx_114 = rdx_120 + 0x0000000000000001
	Mem115[rdi:word64] = rdx_114
	branch (byte) (word32) Mem115[rdx_114:byte] != 0x00 l000000000040A776
	Mem121[rdi:word64] = rdx_114 + 0x0000000000000001
	rdx_120 = rdx_114 + 0x0000000000000001
	cl_123 = (byte) (word32) Mem121[rdx_114 + 0x0000000000000001:byte] (alias)
	branch cl_123 != 0x00 l000000000040A776
// DataOut: cl eax r10 r11d r12 r14 r14d r8b rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 r9d:r14 - 0x0000000000000030 esi:(((int32) cl & 0xFFFFFFDF) - 0x00000041 & 0xFFFFFFDF) - 0x00000041 rax:<invalid>

l000000000040A7A6:
// DataOut: eax r11d r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 r9d:r14 - 0x0000000000000030 esi:(((int32) cl & 0xFFFFFFDF) - 0x00000041 & 0xFFFFFFDF) - 0x00000041 rax:<invalid>

l000000000040A7B0:
	return rax_130
// DataOut: eax r11d r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

fn000000000040A730_exit:
// DataOut: eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> eax:<invalid> r8d:0x00000000 r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>



word64 fn000000000040AB30(word32 eax, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rdi
// LiveOut: rsp
// Trashed: SCZO ah al ax di dil eax edi esi esp rax rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AB30_entry:
// DataOut: eax fs r11d r13 r14 r15b rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -000C(64) Local -0014(64)

l000000000040AB30:
	word64 rdi_9 = DPB(rdi, 0x00000000, 0)
	word64 rax_12 = DPB(rax, clock_gettime(rdi_9, rdi), 0)
	word32 eax_13 = clock_gettime(rdi_9, rdi)
	branch eax_13 == 0x00000000 l000000000040AB67
// DataOut: fs r11d r13 r14 r15b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -000C(64) Local -0014(64)

l000000000040AB46:
	word64 rsp_37
	word64 rbx_38
	word64 rsi_39
	word64 rdi_40
	word32 edi_41
	byte SZO_42
	byte C_43
	byte SCZO_44
	word64 rax_45
	word32 eax_46
	byte Z_47
	word32 esi_48
	call gettimeofday (retsize: 8; depth: 28)
		uses: C_34,dwLoc04_4,eax_13,edi_8,esi_32,qwLoc04,rax_12,rbx_7,rdi_35,rsi_6,rsp_10,SCZO,SZO_33,Z_15
		defs: C_43,eax_46,edi_41,esi_48,rax_45,rbx_38,rdi_40,rsi_39,rsp_37,SCZO_44,SZO_42,Z_47
	Mem51[rbx_38:word64] = qwLoc14
	Mem56[rbx_38 + 0x0000000000000008:word64] = qwLoc0C *s 1000
// DataOut: fs r11d r13 r14 r15b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rsi:rdi rbx:rdi edi:0x00000000 rax:DPB(rax, <invalid>, 0) -4(fp):rbx
// LocalsOut: fp(64)

l000000000040AB67:
	return fp + 0x0000000000000004
// DataOut: fs r11d r13 r14 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rsi:<invalid> rbx:rdi edi:<invalid> rax:<invalid> esi:<invalid> rdi:<invalid> -4(fp):rbx

fn000000000040AB30_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rsi:<invalid> rbx:rbx edi:<invalid> rax:<invalid> esi:<invalid> rdi:<invalid> -4(fp):rbx



void fn000000000040AB70(word64 rax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx di dil eax ecx edi esi rax rcx rdi rsi si sil
// Preserved: rsp
fn000000000040AB70_entry:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AB70:
	word64 rsp_6
	byte SCZO_7
	word32 esi_8
	byte SZO_9
	byte C_10
	word64 rax_11
	byte Z_12
	word32 eax_13
	word64 rsi_14
	word32 edi_15
	word32 ecx_16
	word64 rcx_17
	word64 rdi_18
	byte al_19
	call setlocale (retsize: 8; depth: 16)
		uses: C_5,esi_3,rsp_2,SZO_4
		defs: al_19,C_10,eax_13,ecx_16,edi_15,esi_8,rax_11,rcx_17,rdi_18,rsi_14,rsp_6,SCZO_7,SZO_9,Z_12
	branch rax_11 == 0x0000000000000000 l000000000040ABB0
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ABB0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 esi:<invalid>

l000000000040AB80:
	branch Mem0[rax_11:byte] != 0x43 l000000000040AB98
// DataOut: rax
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 esi:<invalid>
// LocalsOut: fp(64)

l000000000040AB85:
	branch Mem0[rax_11 + 0x0000000000000001:byte] != 0x00 l000000000040AB98
// DataOut: rax
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 esi:<invalid>
// LocalsOut: fp(64)

l000000000040AB98:
	word64 rsi_45 = rax_11
	word64 rdi_48 = DPB(rdi_18, 0x00415E6A, 0)
	word64 rcx_50 = DPB(rcx_17, 0x00000006, 0)
// DataOut: rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 esi:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5:
	branch rcx_50 == 0x0000000000000000 l000000000040ABA7
// DataOut: rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 esi:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5_1:
	rsi_45 = rsi_93 + 0x0000000000000001
	rdi_48 = rdi_94 + 0x0000000000000001
	rcx_50 = rcx_50 - 0x0000000000000001
	word64 rsi_93 = rsi_45
	word64 rdi_94 = rdi_48
	branch Mem0[rsi_93:byte] != Mem0[rdi_94:byte] l000000000040ABA5
// DataOut: rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 esi:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA7:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 esi:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> rcx:<invalid>

l000000000040AB8B:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 esi:<invalid>

fn000000000040AB70_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp esi:<invalid> eax:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> rcx:<invalid> al:Test(NE,Z)



void fn000000000040ABC0(word64 rdi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040ABC0_entry:
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABC0:
	word64 rdi_144
	branch rdi >u 0x0000000000000009 l000000000040AC4F
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC4F:
	rdi_144 = rdi | 0x0000000000000001
	branch (rdi | 0x0000000000000001) != 0xFFFFFFFFFFFFFFFF l000000000040ABCF
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC5D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:rdi | 0x0000000000000001

l000000000040ABCA:
	rdi_144 = DPB(rdi, 0x0000000B, 0) (alias)
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABCF:
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:0x0000000B rdi:rdi | 0x0000000000000001

l000000000040ABE0:
	branch rdi_144 <=u 0x0000000000000009 l000000000040AC48
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> ecx:<invalid> edx:<invalid> eax:<invalid> esi:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040AC48:
	rcx = DPB(rcx, 0x00000003, 0) (alias)
// DataOut: r8 rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> ecx:<invalid> edx:<invalid> eax:<invalid> esi:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040ABE6:
	word64 rdx_rax_101 = rdi_144 *u 0x00000000AAAAAAAB
	branch rdi_144 == (rdx_rax_101 >>u 0x0000000000000001) + (rdx_rax_101 >>u 0x0000000000000001) * 0x0000000000000002 l000000000040AC3A
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> ecx:<invalid> edx:<invalid> eax:<invalid> esi:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040ABF8:
	rsi = DPB(rsi, 0x00000009, 0) (alias)
	rcx = DPB(rcx, 0x00000003, 0) (alias)
// DataOut: r8 rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> ecx:<invalid> edx:<invalid> eax:<invalid> esi:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040AC21:
	word64 rsi_121 = rsi + r8
	word64 rcx_122 = rcx + 0x0000000000000002
	branch rsi_121 <u rdi_144 l000000000040AC10
	rsi = rsi_121 + r8
	rcx = rcx_122 + 0x0000000000000002
	branch rsi <u rdi_144 l000000000040AC10
// DataOut: r8 rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> esi:<invalid> ecx:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> r8:<invalid>

l000000000040AC10:
	r8 = r8 + 0x0000000000000008
	branch (uint64) (rdi_144 % (rcx_122 + 0x0000000000000002)) == 0x0000000000000000 l000000000040AC3A
// DataOut: r8 rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> esi:<invalid> ecx:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> r8:<invalid>

l000000000040AC2D:
	branch (uint64) (rdi_144 % rcx) != 0x0000000000000000 l000000000040AC44
	branch (uint64) (rdi_144 % rcx) != 0x0000000000000000 l000000000040AC44
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rdi:<invalid> r9:0x00000000AAAAAAAB ecx:<invalid> rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> esi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> r8:<invalid>

l000000000040AC3A:
	word64 rdi_69 = rdi_144 + 0x0000000000000002
	branch rdi_69 != 0xFFFFFFFFFFFFFFFF l000000000040ABE0
	rdi_144 = rdi_69 + 0x0000000000000002
	branch rdi_69 != 0x0000000000000003 l000000000040ABE0
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> ecx:<invalid> edx:<invalid> eax:<invalid> esi:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040AC44:
	return
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> edi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> ecx:<invalid> edx:<invalid> eax:<invalid> esi:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

fn000000000040ABC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> edi:<invalid> r9:0x00000000AAAAAAAB Sequence rdx:rax:<invalid> rdx:<invalid> ecx:<invalid> edx:<invalid> eax:<invalid> esi:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>



word64 fn000000000040AC80(word64 rax, word64 rdi, ptr64 & rspOut, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: al rax rdi rsi rsp
// Trashed: SCZO ah al ax di dil eax edi esi esp rax rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AC80_entry:
// DataOut: cl r11 r12 r13 r13b r14 r15b r8 rax rbp rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC80:
	word64 rsp_11
	word64 rbx_12
	word64 rdi_13
	word64 rsi_14
	word64 rax_15
	byte SCZO_16
	byte C_17
	call Mem0[rdi + 0x0000000000000030:word32] (retsize: 4; depth: 8)
		uses: dwLoc04_4,rbx_6,rdi_8,rsi_10,rsp_2
		defs: C_17,rax_15,rbx_12,rdi_13,rsi_14,rsp_11,SCZO_16
	branch rax_15 >=u Mem0[rbx_12 + 0x0000000000000010:word64] l000000000040AC9D
// DataOut: cl r11 r12 r13 r13b r14 r15b r8 rax rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC9D:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> rsi:<invalid> -4(fp):rbx

l000000000040AC94:
	word64 rsp_25
	*rspOut = fp + 0x0000000000000004
	return (rax_15 << 0x0000000000000004) + Mem0[rbx_12:word64]
// DataOut: al cl r11 r12 r13 r13b r14 r15b r8 rax rbp rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> rsi:<invalid> -4(fp):rbx

fn000000000040AC80_exit:
// DataOut: al rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rdi:<invalid> rsi:<invalid> rax:<invalid> -4(fp):rbx



word64 fn000000000040ACB0(word64 rax, byte cl, word64 rsi, word64 rdi, word64 r8, word64 r11, ptr64 & rcxOut, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cl r11 r8 rax rdi rsi
// LiveOut: cl eax ebx rax rbx rcx rdi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r9 r9b r9d r9w rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved:
fn000000000040ACB0_entry:
	*rcxOut = rcx
// DataOut: cl r11 r8 rax rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ACB0:
	word64 rsi_26
	word64 rdi_27
	word64 rsp_137
	word64 rax_239 = fn000000000040AC80(rax, rdi, out rsp_137, out rsi_26, out rdi_27)
	Mem30[rsi_26:word64] = rax_239
	byte r13b_12 = (byte) ecx
	word64 rbp_166 = rdi
	word64 rsi_136 = Mem30[rax_239:word64]
	word64 rbx_165 = rax_239
	branch rsi_136 == 0x0000000000000000 l000000000040AD4F
// DataOut: al cl r11 r12 r13b r8 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ACD7:
	branch rsi == rsi_136 l000000000040ACE9
// DataOut: al cl r11 r12 r13b r8 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACDC:
	word64 rsi_192
	word64 r14_193
	word64 rdx_194
	word32 r13d_196
	word32 ecx_197
	word64 rdi_199
	word64 rax_201
	byte SZO_202
	byte C_203
	byte Z_204
	byte SCZO_205
	byte al_206
	word32 esi_207
	word64 r9_209
	word64 r10_211
	word64 rcx_213
	byte cl_214
	word64 r12_198
	call Mem30[rdi + 0x0000000000000038:word32] (retsize: 4; depth: 4)
		uses: al_29,C_36,cl,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_18,dwLoc14_23,ecx,esi_32,r10,r11,r12_16,r13b_12,r13d_11,r14_6,r8,r9,rax_28,rbp_20,rbx_33,rcx,rdi_190,rdx,rsi_31,rsp_25,SCZO_116,SZO_34,Z_117
		defs: al_206,C_203,cl_214,ecx_197,esi_207,r10_211,r11_212,r12_198,r13b_208,r13d_196,r14_193,r8_210,r9_209,rax_201,rbp_195,rbx_200,rcx_213,rdi_199,rdx_194,rsi_192,rsp_191,SCZO_205,SZO_202,Z_204
	branch al_206 == 0x00 l000000000040AD46
// DataOut: cl r11 r12 r13b r8 rbp rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD46:
	rax_239 = Mem30[rbx_165 + 0x0000000000000008:word64]
	branch rax_239 != 0x0000000000000000 l000000000040AD30
// DataOut: al cl r12 r13b rax rbp rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD30:
	rsi_136 = Mem30[rax_239:word64]
	branch rsi_136 == r12_198 l000000000040AD67
// DataOut: al cl r12 r13b rax rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD38:
	word64 rsi_294
	word64 r14_295
	word64 rdx_296
	word32 r13d_298
	word32 ecx_299
	word64 rdi_301
	word64 rax_303
	byte SZO_304
	byte C_305
	byte Z_306
	byte SCZO_307
	byte al_308
	word32 esi_309
	word64 r9_311
	word64 r8_312
	word64 r10_313
	word64 r11_314
	word64 rcx_315
	byte cl_316
	call Mem30[rbp_166 + 0x0000000000000038:word32] (retsize: 4; depth: 4)
		uses: al_240,C_243,cl_234,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_18,dwLoc14_23,ecx_233,esi_245,r10_231,r11_220,r12_225,r13b_222,r13d_226,r14_228,r8_221,r9_230,rax_239,rbp_236,rbx_235,rcx_232,rdi_292,rdx_227,rsi_244,rsp_238,SCZO_246,SZO_241,Z_247
		defs: al_308,C_305,cl_316,ecx_299,esi_309,r10_313,r11_314,r12_300,r13b_310,r13d_298,r14_295,r8_312,r9_311,rax_303,rbp_297,rbx_302,rcx_315,rdi_301,rdx_296,rsi_294,rsp_293,SCZO_307,SZO_304,Z_306
	branch al_308 != 0x00 l000000000040AD60
// DataOut: cl r12 r13b rbp rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD60:
	rax_239 = Mem30[rbx_165 + 0x0000000000000008:word64]
	rsi_136 = Mem30[rax_239:word64]
// DataOut: cl r13b rax rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD67:
	branch r13b_12 == 0x00 l000000000040AD1C
// DataOut: cl rax rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD6C:
	Mem273[rbx_165 + 0x0000000000000008:word64] = Mem30[rax_239 + 0x0000000000000008:word64]
	Mem274[rax_239:word64] = 0x0000000000000000
	word64 rcx_275 = Mem274[rbp_166 + 0x0000000000000048:word64]
	*rcxOut = rcx_275
	Mem278[rax_239 + 0x0000000000000008:word64] = rcx_275
	Mem279[rbp_166 + 0x0000000000000048:word64] = rax_239
	word64 rbx_282
	*rbxOut = Mem279[rsp_137:word64]
	word64 rsp_291
	*rspOut = Mem279[rsp_137 + 0x0000000000000010:word64] + 0x0000000000000018
	return rsi_136
// DataOut: cl eax ebx rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD42:
	rbx_165 = Mem30[rbx_165 + 0x0000000000000008:word64]
// DataOut: cl r12 r13b rbp rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD4F:
	word64 rsp_93 = Mem30[rsp_137 + 0x0000000000000010:word64]
	word64 rsi_98 = Mem30[rsp_93 + 0x0000000000000010:word64]
	return rax_239
	word64 rbx_100
	*rbxOut = Mem30[rsp_93 + 0x0000000000000018:word64]
	word64 rsp_115
	*rspOut = Mem30[rsp_93 + 0x0000000000000028:word64] + 0x0000000000000018
	return DPB(rsi_98, 0x00000000, 0)
// DataOut: cl eax ebx rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACE6:
	rsi_136 = Mem30[rbx_165:word64]
// DataOut: cl r11 r13b r8 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACE9:
	branch r13b_12 == 0x00 l000000000040AD1C
// DataOut: cl r11 r8 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACEE:
	word64 rax_174 = Mem30[rbx_165 + 0x0000000000000008:word64]
	branch rax_174 == 0x0000000000000000 l000000000040AD98
// DataOut: cl r11 r8 rax rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD98:
	Mem189[rbx_165:word64] = 0x0000000000000000
// DataOut: cl rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACFB:
	word64 r10_180 = Mem30[r8 + 0x0000000000000008:word64]
	Mem181[r11:word64] = Mem30[r8:word64]
	Mem182[r11 + 0x0000000000000008:word64] = r10_180
	Mem183[rax_174:word64] = 0x0000000000000000
	word64 rcx_184 = Mem183[rbp_166 + 0x0000000000000048:word64]
	*rcxOut = rcx_184
	Mem187[rax_174 + 0x0000000000000008:word64] = rcx_184
	Mem188[rbp_166 + 0x0000000000000048:word64] = rax_174
// DataOut: cl rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD1C:
	word64 rbx_138
	*rbxOut = Mem30[rsp_137:word64]
	word64 rsp_149
	*rspOut = Mem30[rsp_137 + 0x0000000000000010:word64] + 0x0000000000000018
	return rsi_136
// DataOut: cl eax ebx rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

fn000000000040ACB0_exit:
// DataOut: cl eax ebx rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:<invalid> rsi:<invalid> rbx:<invalid> esi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi



void fn000000000040AE40(word64 rax, byte dl, word64 rbp, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl rax rbp rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040AE40_entry:
// DataOut: dl rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AE40:
	byte r15b_7 = (byte) edx
	word64 r13_102 = Mem0[rsi:word64]
	branch r13_102 >=u Mem0[rsi + 0x0000000000000008:word64] l000000000040AEEF
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AE64:
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r15d:edx r14:rsi r12:rdi r13:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE68:
	rbp = Mem0[rbp:word64]
	branch rbp == 0x0000000000000000 l000000000040AEE1
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE71:
	word64 rbx_132 = Mem0[rbp + 0x0000000000000008:word64]
	branch rbx_132 != 0x0000000000000000 l000000000040AE94
// DataOut: r12 r13 r14 r15b rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE94:
	word64 rbp_226 = Mem0[rbx_132:word64]
	word64 rsp_229
	word64 rsi_230
	word64 rdi_231
	rax = fn000000000040AC80(rax, rdi, out rsp_229, out rsi_230, out rdi_231)
	word64 rdx_236 = Mem0[rbx_132 + 0x0000000000000008:word64]
	branch Mem0[rax:word64] != 0x0000000000000000 l000000000040AE80
// DataOut: r12 r13 r14 r15b rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE80:
	Mem268[rbx_132 + 0x0000000000000008:word64] = Mem0[rax + 0x0000000000000008:word64]
	Mem269[rax + 0x0000000000000008:word64] = rbx_132
	branch rdx_236 == 0x0000000000000000 l000000000040AED0
// DataOut: r12 r13 r14 r15b rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEAC:
	Mem253[rax:word64] = rbp_226
	Mem255[rdi + 0x0000000000000018:word64] = Mem253[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	Mem259[rbx_132:word64] = 0x0000000000000000
	rax = Mem259[rdi + 0x0000000000000048:word64]
	Mem262[rbx_132 + 0x0000000000000008:word64] = rax
	Mem263[rdi + 0x0000000000000048:word64] = rbx_132
	branch rdx_236 != 0x0000000000000000 l000000000040AE91
// DataOut: r12 r13 r14 r15b rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE91:
	rbx_132 = rdx_236
// DataOut: r12 r13 r14 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AECF:
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AED0:
	rbp = Mem0[rbp_226:word64]
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE7A:
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AED4:
	Mem151[rbp + 0x0000000000000008:word64] = 0x0000000000000000
	branch r15b_7 == 0x00 l000000000040AF08
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF08:
	word64 rsp_154
	word64 rsi_155
	word64 rdi_156
	rax = fn000000000040AC80(rax, rdi, out rsp_154, out rsi_155, out rdi_156)
	branch Mem151[rax:word64] == 0x0000000000000000 l000000000040AF5B
// DataOut: r12 r13 r14 r15b rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF5B:
	Mem217[rax:word64] = rbp
	Mem219[rdi + 0x0000000000000018:word64] = Mem217[rdi + 0x0000000000000018:word64] + 0x0000000000000001
// DataOut: r12 r13 r14 r15b rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF1C:
	rax = Mem151[rdi + 0x0000000000000048:word64]
	branch rax == 0x0000000000000000 l000000000040AF66
// DataOut: r12 r13 r14 r15b rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF66:
	rax = malloc(DPB(rdi_156, 0x00000010, 0))
	branch rax != 0x0000000000000000 l000000000040AF2F
// DataOut: r12 r13 r14 r15b rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF75:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> edi:0x00000010 rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF26:
	Mem193[rdi + 0x0000000000000048:word64] = Mem151[rax + 0x0000000000000008:word64]
// DataOut: r12 r13 r14 r15b rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF2F:
	word64 rdx_188 = Mem151[rax + 0x0000000000000008:word64]
	Mem189[rax:word64] = rbp
	Mem190[rax + 0x0000000000000008:word64] = rdx_188
	Mem191[rax + 0x0000000000000008:word64] = rax
// DataOut: r12 r13 r14 r15b rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF3E:
	Mem170[rbp:word64] = 0x0000000000000000
	Mem172[rsi_155 + 0x0000000000000018:word64] = Mem170[rsi_155 + 0x0000000000000018:word64] - 0x0000000000000001
	r13_102 = r13_102 + 0x0000000000000010
	branch Mem172[rsi + 0x0000000000000008:word64] >u r13_102 l000000000040AE68
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF59:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEE1:
	r13_102 = r13_102 + 0x0000000000000010
	branch Mem0[rsi + 0x0000000000000008:word64] >u r13_102 l000000000040AE68
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEEF:
	return
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040AE40_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbx:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rax:<invalid> edi:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040AFB0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: ah al ax eax rax
// Preserved: rsp
fn000000000040AFB0_entry:
// DataOut: rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AFB0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040AFB0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn000000000040B640(word64 rdi, word64 r13, word64 r15, word64 qwArg00, word64 qwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r15 rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx di dil eax ebp ebx edi esp r12 r12b r12d r12w rax rbp rbx rdi rsp sp spl
// Preserved:
// Stack args: Stack +0000(64) Stack +0004(64)
fn000000000040B640_entry:
// DataOut: r13 r15 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B640:
	word64 rax_115
	word64 rbp_132 = rdi
	branch Mem0[rdi + 0x0000000000000040:word64] == 0x0000000000000000 l000000000040B655
// DataOut: r13 r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B64E:
	branch Mem0[rdi + 0x0000000000000020:word64] != 0x0000000000000000 l000000000040B6C6
// DataOut: r13 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6C6:
	word64 r12_122 = Mem0[r15:word64]
	branch r12_122 >=u Mem0[r15 + 0x0000000000000008:word64] l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6CF:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6D0:
	word64 rdi_134 = Mem0[r12_122:word64]
	branch rdi_134 != 0x0000000000000000 l000000000040B6E3
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6E3:
	word64 rsp_157
	word64 rdi_159
	word64 rbx_160
	byte SCZO_161
	byte Z_162
	word64 rax_163
	byte C_166
	byte SZO_167
	byte CZ_168
	word64 r15_169
	call Mem0[rbp_132 + 0x0000000000000040:word32] (retsize: 4; depth: 16)
		uses: C_138,CZ_127,dwLoc04_4,dwLoc08_7,dwLoc0C_12,qwLoc0C,r12_129,r13_128,r15_126,rax_130,rbp_132,rbx_135,rdi_134,rsp_133,SCZO_131,SZO_136,Z_137
		defs: C_166,CZ_168,r12_164,r13_165,r15_169,rax_163,rbp_158,rbx_160,rdi_159,rsp_157,SCZO_161,SZO_167,Z_162
	branch Mem0[rbx_160 + 0x0000000000000008:word64] != 0x0000000000000000 l000000000040B6E0
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6E0:
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6DC:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6EF:
	word64 r12_150 = r12_122 + 0x0000000000000010
	branch Mem0[rbp_132 + 0x0000000000000008:word64] >u r12_150 l000000000040B6D0
	rax_115 = Mem0[rbp_132 + 0x0000000000000008:word64]
	r12_122 = r12_150 + 0x0000000000000010
	branch rax_115 >u r12_150 + 0x0000000000000010 l000000000040B6D0
// DataOut: r12 r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6FC:
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B655:
	rax_115 = Mem0[rdi + 0x0000000000000008:word64]
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B659:
	word64 r12_104 = Mem0[r13:word64] + 0x0000000000000008
	branch r12_104 >=u rax_115 l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B662:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B668:
	word64 rdi_107 = Mem0[r12_104 + 0x0000000000000000:word64]
	branch rdi_107 != 0x0000000000000000 l000000000040B67B
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B67B:
	word64 rbx_108 = Mem0[rdi_107 + 0x0000000000000008:word64]
	free(rdi_107)
	branch rbx_108 != 0x0000000000000000 l000000000040B678
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B678:
	rdi_107 = rbx_108
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B672:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B689:
	word64 r12_101 = r12_104 + 0x0000000000000010
	branch Mem0[r13 + 0x0000000000000008:word64] >u r12_101 l000000000040B668
	r12_104 = r12_101 + 0x0000000000000010
	branch Mem0[r13 + 0x0000000000000008:word64] >u r12_101 + 0x0000000000000010 l000000000040B668
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B693:
	branch Mem0[rbp_132 + 0x0000000000000048:word64] != 0x0000000000000000 l000000000040B6A3
	branch Mem0[rbp_132 + 0x0000000000000048:word64] != 0x0000000000000000 l000000000040B6A3
	word64 rdi_31 = Mem0[rbp_132 + 0x0000000000000048:word64]
	branch rdi_31 != 0x0000000000000000 l000000000040B6A3
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6A3:
	word64 rbx_70 = Mem0[rdi_31 + 0x0000000000000008:word64]
	free(rdi_31)
	branch rbx_70 != 0x0000000000000000 l000000000040B6A0
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6A0:
	rdi_31 = rbx_70
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B69C:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6B1:
	free(Mem0[rbp_132:word64])
	free(qwArg00)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004021F0:
	word64 rsp_56
	word64 rbp_57
	word64 rdi_58
	word64 rbx_59
	byte SCZO_60
	byte Z_61
	word64 rax_62
	word64 r12_63
	word64 r13_64
	byte C_65
	byte SZO_66
	byte CZ_67
	word64 r15_68
	call Mem0[0x000000000061A040:word32] (retsize: 4; depth: 4)
		uses: C_36,CZ_17,dwLoc04_4,dwLoc08_7,dwLoc0C_12,qwLoc0C,r12_19,r13_18,r15_16,rax_20,rbp_52,rbx_49,rdi_51,rsp_55,SCZO_21,SZO_35,Z_37
		defs: C_65,CZ_67,r12_63,r13_64,r15_68,rax_62,rbp_57,rbx_59,rdi_58,rsp_56,SCZO_60,SZO_66,Z_61
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rax:<invalid> rdi:fp rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040B640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



void fn000000000040BB90(word64 rax, word64 rsi, word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040BB90_entry:
// DataOut: r11 r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BB90:
	word64 rcx_25
	word64 rbx_26
	word64 rsp_27
	word64 rdi_28
	word64 rax_29 = fn000000000040ACB0(rax, 0x01, rsi, rdi, r8, r11, out rcx_25, out rbx_26, out rsp_27, out rdi_28)
	word32 ebp_34 = (word32) rax_29
	branch rax_29 == 0x0000000000000000 l000000000040BD08
// DataOut: cl ebp ebx rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040BD08:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:fp - 0x0000000000000014 rbp:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBB6:
	word64 rdx_66 = Mem0[rsp_27 + 0x0000000000000008:word64]
	Mem68[rbx_26 + 0x0000000000000020:word64] = Mem0[rbx_26 + 0x0000000000000020:word64] - 0x0000000000000001
	branch Mem68[rdx_66:word64] == 0x0000000000000000 l000000000040BBD0
// DataOut: cl ebp ebx rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:fp - 0x0000000000000014 rbp:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBD0:
	word64 rax_72 = Mem68[rbx_26 + 0x0000000000000018:word64]
	Mem79[rbx_26 + 0x0000000000000018:word64] = rax_72 - 0x0000000000000001
	byte al_75 = (byte) (rax_72 - 0x0000000000000001)
	branch rax_72 < 0x0000000000000001 l000000000040BCE8
// DataOut: al cl eax ebp ebx rax rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BCE8:
	branch rcx_25 == 0x0000000000000000 l000000000040BCF8
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BCF4_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> eax:eax & 0x00000001 r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BCF8:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> eax:eax & 0x00000001 r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBE5:
	branch rcx_25 == 0x0000000000000000 l000000000040BBE9
// DataOut: al cl ebp ebx rax rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBE5_1:
// DataOut: al cl ebp ebx rax rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBE9:
	Mem81[rax_72 - 0x0000000000000076:byte] = __ror(Mem79[rax_72 - 0x0000000000000076:byte], 0x43)
	Mem84[rax_72 - 0x0000000000000076:byte] = Mem81[rax_72 - 0x0000000000000076:byte] + 0x01 + ((Mem79[rax_72 - 0x0000000000000076:byte] & 0x08) != 0x00)
	Mem87[rsp_27 - 0x0000000000000004:word32] = rbx_26
	Mem89[rax_72 - 0x000000000000007C:byte] = Mem87[rax_72 - 0x000000000000007C:byte] - 0x01
	Mem91[rdi_28:byte] = __ror(Mem89[rdi_28:byte], 0x88)
	__syscall(0x00)
	Mem93[rax_72 - 0x0000000000000001:byte] = Mem91[rax_72 - 0x0000000000000001:byte] + al_75
	branch rcx_25 == 0x0000000000000000 l000000000040BBFF
// DataOut: cl ebp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBFB_1:
// DataOut: cl ebp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -32(fp):rdi -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBFF:
	Mem96[rsp_27 - 0x0000000000000008:word32] = ebp_34
	Mem101[rsp_27 - 0x0000000000001163:word32] = rsp_27 - 0x0000000000000008
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -32(fp):rdi -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBC6:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> eax:0x00000000 r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040BB90_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> eax:<invalid> rax:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> ebp:<invalid> cl:<invalid> esp:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -4479(fp):fp - 0x0000000000000024 -36(fp):ebp -32(fp):rdi -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040BD70(word64 rcx, word32 edx, word64 rbp, word64 rsi, word64 rdi, word64 r8, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs r8 rbp rcx rdi rsi
// LiveOut: r11 r11d r9 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040BD70_entry:
// DataOut: edx fs r8 r9 rbp rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BD70:
	word32 eax_45 = 0x00000000 - ((edx & 0x00000020) <u 0x00000001)
	word64 rcx_39 = Mem0[fs:0x00000028:word64]
	word64 rsp_55
	word64 rdi_56
	word32 eax_57
	word32 edx_58
	byte SZO_59
	byte C_60
	word64 rbp_63
	word64 r12_64
	word64 rbx_65
	byte SCZO_67
	word64 r8_68
	word32 ecx_70
	word64 r15_71
	word64 r13_72
	word64 rax_73
	word64 r11_74
	word64 rdx_75
	byte CZ_76
	byte Z_77
	byte S_78
	word32 ebx_79
	word64 r10_80
	word32 edi_81
	byte cl_82
	word32 r9d_83
	word32 esi_84
	word32 r12d_85
	word32 r14d_86
	byte al_87
	byte dl_88
	byte sil_89
	byte dil_90
	word64 r9_91
	word32 r10d_92
	byte r10b_93
	word32 r15d_94
	selector fs_156
	word64 r14_166
	word64 rcx_1213
	word64 rsi_1248
	call localeconv (retsize: 8; depth: 216)
		uses: C_43,dwLoc04_4,dwLoc08_10,dwLoc0C_15,dwLoc10_18,dwLoc14_22,dwLoc18_25,dwLoc78_44,dwLoc98_30,dwLocAC_53,dwLocB0_34,eax_45,ebx_28,ecx_41,edx,fs,qwLoc28_40,qwLocA0_32,qwLocA8_36,r12_19,r12d_20,r14_11,r14d_12,r8,rax_47,rbp,rbx_27,rcx_39,rdi,rsi,rsp_29,SCZO_54,SZO_51
		defs: al_87,C_60,cl_82,CZ_76,dil_90,dl_88,eax_57,ebx_79,ecx_70,edi_81,edx_58,esi_84,fs_69,r10_80,r10b_93,r10d_92,r11_74,r12_64,r12d_85,r13_72,r14_62,r14d_86,r15_71,r15d_94,r8_68,r9_91,r9d_83,rax_73,rbp_63,rbx_65,rcx_66,rdi_56,rdx_75,rsi_61,rsp_55,S_78,SCZO_67,sil_89,SZO_59,Z_77
	word64 r15_123 = Mem0[r8_68:word64]
	word64 rax_99 = DPB(rax_73, strlen(r15_123), 0)
	word32 v20_52 = (eax_45 & 0xFFFFFFE8) + 0x00000400
	word64 r11_101 = rax_99
	word64 r13_102 = Mem0[rax_73 + 0x0000000000000008:word64]
	word64 rdx_105 = DPB(rdx_75, 0x00000001, 0)
	word64 rax_117 = DPB(rax_99 - 0x0000000000000001, 0x00413990, 0)
	branch rax_99 <u 0x0000000000000011 l000000000040BE0A
// DataOut: bl fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rdi rdx
// DataOut (flags): C
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(32) Local -00B0(32)

l000000000040BE06_1:
	r11_101 = rdx_105
// DataOut: bl fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rdi
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:0x00413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:0x00000001 -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(32) Local -00B0(32)

l000000000040BE0A:
	branch rax_99 <u 0x0000000000000011 l000000000040BE0E
// DataOut: bl fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:0x00413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:0x00000001 -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(32) Local -00B0(32)

l000000000040BE0A_2:
	r15_123 = rax_117
// DataOut: bl fs r11 r12 r12d r13 r14 r15 r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:0x00413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:0x00000001 -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(32) Local -00B0(32)

l000000000040BE0E:
	word64 r13_1295
	word64 rax_130 = DPB(rax_117, 0x00416919, 0)
	word128 rdx_rax_131 = DPB(rdx_rax, 0x00416919, 0)
	r13_1295 = r13_102
	branch DPB(rax_117, strlen(r13_102), 0) <u 0x0000000000000011 l000000000040BE2A
// DataOut: bl fs r11 r11d r12 r12d r13 r14 r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:0x00413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:0x00000001 -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(32) Local -00B0(32)

l000000000040BE26_3:
	r13_1295 = rax_130
// DataOut: bl fs r11 r11d r12 r12d r13 r14 r15 r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:0x00416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:0x00000001 -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(32) Local -00B0(32)

l000000000040BE2A:
	word64 rcx_1032
	word32 ecx_1031
	word64 r10_1006
	word32 edi_1023
	word32 ebx_1037
	word64 rdi_1024
	word128 rdx_rax_1019
	word64 r12_163
	word64 rax_1018
	word64 rax_171
	word64 qwLocB8_140 = r14_166
	branch r8 >u rbx_65 l000000000040C0E0
// DataOut: bl fs r11 r11d r12 r12d r13 r15 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:0x00416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:0x00000001 -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C0E0:
	branch rbx_65 == 0x0000000000000000 l000000000040BE59
// DataOut: bl fs r11 r11d r12 r12d r13 r15 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:rsi rbp:<invalid> r11:<invalid> edx:0x00000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C0E9:
	word128 rdx_rax_1241 = DPB(rdx_rax_131, 0x00000000, 64)
	word64 rax_1244 = (uint64) (rdx_rax_1241 /u rbx_65)
	word64 rdx_1243 = (uint64) (rdx_rax_1241 % rbx_65)
	rsi_1248 = rax_1244
	branch rdx_1243 != 0x0000000000000000 l000000000040BE59
// DataOut: bl fs r11 r11d r12 r12d r13 r15 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:rsi rbp:<invalid> r11:<invalid> edx:0x00000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C0FF:
	word128 rdx_rax_1253 = SEQ(rdx_1243, r12_64)
	word64 rdx_1255 = (uint64) (rdx_rax_1253 % rax_1244)
	word128 rdx_rax_1263 = SEQ(rdx_1255, rdx_1255 * 0x0000000000000005 * 0x0000000000000002)
	rax_1018 = (uint64) (rdx_rax_1263 /u rax_1244)
	word64 rdx_1265 = (uint64) (rdx_rax_1263 % rax_1244)
	word32 eax_1267 = (word32) rax_1018
	r10_1006 = (uint64) (rdx_rax_1253 /u rax_1244)
	rdx_rax_1019 = SEQ(rdx_1265 * 0x0000000000000002, rax_1018) (alias)
	edi_1023 = eax_1267
	rdi_1024 = DPB(rdx_1255 * 0x0000000000000005, eax_1267, 0) (alias)
	branch rax_1244 <=u rdx_1265 * 0x0000000000000002 l000000000040C6E0
// DataOut: edi fs r10 r10b r10d r11 r11d r13 r15 rbp rdx
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:(uint64) (rdx_rax /u rcx) rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:(uint64) (rdx_rax % rcx) rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C6E0:
	word32 ecx_1290 = ~(0x00000000 - (rax_1244 <u rdx_1265 * 0x0000000000000002))
	ecx_1031 = ecx_1290 + 0x00000003
	rcx_1032 = DPB(rcx_1213, ecx_1290 + 0x00000003, 0) (alias)
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r15 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:(uint64) (rdx_rax /u (uint64) (rdx_rax /u rcx)) rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:(uint64) (rdx_rax % (uint64) (rdx_rax /u rcx)) + (uint64) (rdx_rax % (uint64) (rdx_rax /u rcx)) rsi:(uint64) (rdx_rax /u rcx) r10:(uint64) (rdx_rax /u (uint64) (rdx_rax /u rcx)) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C125:
	byte cl_1286 = rdx_1265 * 0x0000000000000002 != 0x0000000000000000
	rcx_1032 = DPB(rcx_1213, cl_1286, 0) (alias)
	ecx_1031 = (word32) cl_1286 (alias)
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r15 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:(uint64) (rdx_rax /u (uint64) (rdx_rax /u rcx)) rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:(uint64) (rdx_rax % (uint64) (rdx_rax /u rcx)) + (uint64) (rdx_rax % (uint64) (rdx_rax /u rcx)) rsi:(uint64) (rdx_rax /u rcx) r10:(uint64) (rdx_rax /u (uint64) (rdx_rax /u rcx)) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040BE43:
	word128 rdx_rax_1202 = SEQ(rdx_105, rbx_65)
	word64 rax_1205 = (uint64) (rdx_rax_1202 /u r8)
	word64 rdx_1204 = (uint64) (rdx_rax_1202 % r8)
	rcx_1213 = rax_1205
	branch rdx_1204 == 0x0000000000000000 l000000000040C2F0
// DataOut: bl fs r11 r11d r12 r12d r13 r15 r9 rax rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:rsi rbp:<invalid> r11:<invalid> edx:0x00000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C2F0:
	r10_1006 = rax_1205 *s r12_64
	rdx_rax_1019 = SEQ(rdx_1204, r10_1006) (alias)
	rax_1018 = (uint64) (rdx_rax_1019 /u rax_1205)
	branch rax_1018 != r12_64 l000000000040BE59
// DataOut: bl fs r10 r10b r10d r11 r11d r12 r12d r13 r15 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:(uint64) (rdx_rax /u (r8 + 648)) ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:(uint64) (rdx_rax /u r8) rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:(uint64) (rdx_rax % r8) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C308:
	ecx_1031 = 0x00000000
	rcx_1032 = DPB(rax_1205, 0x00000000, 0) (alias)
	edi_1023 = 0x00000000
	rdi_1024 = DPB(r13_102, 0x00000000, 0) (alias)
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r15 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:(uint64) (rdx_rax /u (r8 + 648)) ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:(uint64) (rdx_rax /u (uint64) (rdx_rax /u (r8 + 1296))) rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:(uint64) (rdx_rax % (uint64) (rdx_rax /u (r8 + 1296))) r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C12D:
	word64 r8_1044 = r14_166
	ebx_1037 = 0xFFFFFFFF
	branch (edx & 0x00000010) == 0x00000000 l000000000040C530
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:<invalid> edi:<invalid> rsi:(uint64) (rdx_rax /u rcx) cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C146:
	word64 rsi_950 = DPB(rsi_1248, v20_52, 0)
	branch r10_1006 <u rsi_950 l000000000040C710
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r15 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:rsi rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:0xFFFFFFFF rsi:(uint64) (rdx_rax /u rcx) cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C710:
	r8_1044 = r14_166
	ebx_1037 = 0x00000000
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:rsi rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:0xFFFFFFFF esi:<invalid> rsi:<invalid> cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C153:
	ebx_1037 = 0x00000000
// DataOut: ebx ecx edi fs r10 r11 r11d r12d r13 r15 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:rsi rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:0xFFFFFFFF esi:<invalid> rsi:<invalid> cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C17D:
	word128 rdx_rax_972 = DPB(rdx_rax_1019, 0x00000000, 64)
	word64 rdx_974 = (uint64) (rdx_rax_972 % rsi_950)
	word64 edx_eax_982 = (uint64) (uint32) (rdi_1024 + DPB((uint64) (rdx_rax_972 /u rsi_950), rdx_974 * 0x00000005, 0) * 0x00000002)
	word32 r14d_990 = DPB(rdi_1024, ecx_1031 >> 0x00000001, 0) + DPB(rdx_974, (uint32) (edx_eax_982 % v20_52), 0) * 0x00000002
	word64 rdi_992 = DPB(rdi_1024, (uint32) (edx_eax_982 /u v20_52), 0)
	word32 ecx_993 = ecx_1031 + r14d_990
	branch v20_52 >u r14d_990 l000000000040C160
	word128 rdx_rax_998 = DPB(rdx_rax_1019, 0x00000000, 64)
	word64 rdx_1000 = (uint64) (rdx_rax_998 % rsi_950)
	word64 rax_1001 = (uint64) (rdx_rax_998 /u rsi_950)
	word64 edx_eax_1010 = (uint64) (uint32) (rdi_992 + DPB(rax_1001, rdx_1000 * 0x00000005, 0) * 0x00000002)
	word32 edx_1015 = (uint32) (edx_eax_1010 % v20_52)
	word32 eax_1017 = (uint32) (edx_eax_1010 /u v20_52)
	word32 r14d_1022 = DPB(rdi_1024, ecx_993 >> 0x00000001, 0) + DPB(rdx_1000, edx_1015, 0) * 0x00000002
	r10_1006 = rax_1001
	rax_1018 = DPB(rax_1001, eax_1017, 0) (alias)
	rdx_rax_1019 = DPB(rdx_rax_998, eax_1017, 0) (alias)
	edi_1023 = eax_1017
	rdi_1024 = DPB(rdi_1024, eax_1017, 0) (alias)
	word32 ecx_1026 = ecx_993 + r14d_1022
	branch v20_52 >u r14d_1022 l000000000040C160
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r15 r8 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> rsi:<invalid> cl:<invalid> r14d:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C160:
	ecx_1031 = (word32) (ecx_1026 != 0x00000000)
	rcx_1032 = DPB(rcx_1032, ecx_1031, 0) (alias)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r15 r8 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> rsi:<invalid> cl:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C1A8:
	word32 ecx_1183 = ~(0x00000000 - (v20_52 <u ~(0x00000000 - (v20_52 <u ecx_1026)) + 0x00000003))
	ecx_1031 = ecx_1183 + 0x00000003
	rcx_1032 = DPB(rcx_1032, ecx_1183 + 0x00000003, 0) (alias)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r15 r8 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> rsi:<invalid> cl:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C168:
	ebx_1037 = ebx_1037 + 0x00000001
	branch rsi_950 >u rax_1001 l000000000040C49F
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r15 r8 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C49F:
	branch rax_1001 >u 0x0000000000000009 l000000000040C768
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C4A9:
	byte dl_1058
	branch (edx & 0x00000003) == 0x00000001 l000000000040C7B0
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C7B0:
	dl_1058 = (eax_1017 & 0x00000001) + ecx_1031 > 0x00000002
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C4B4:
	dl_1058 = (byte) (DPB(edx_1015, ecx_1031 > 0x00000000, 0) & DPB(v20_52, (edx & 0x00000003) == 0x00000000, 0)) (alias)
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C4C7:
	branch dl_1058 == 0x00 l000000000040C788
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C788:
	branch eax_1017 != 0x00000000 l000000000040C4DB
// DataOut: dil ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C4CF:
	edi_1023 = rax_1018 + 0x0000000000000001
	branch rax_1018 == 0xFFFFFFFFFFFFFFF7 l000000000040C7CE
// DataOut: dil ebx fs r10 r10d r11 r11d r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C7CE:
	r10_1006 = rax_1001 + 0x0000000000000001
	branch rax_1001 != 0xFFFFFFFFFFFFFFF7 l000000000040C7FF
// DataOut: ebx fs r10 r10b r10d r11 r11d r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C7FF:
	ecx_1031 = 0x00000000
	rcx_1032 = DPB(rcx_1032, 0x00000000, 0) (alias)
// DataOut: ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C790:
	branch (bLocB0 & 0x08) != 0x00 l000000000040C7C2
	branch (bLocB0 & 0x08) != 0x00 l000000000040C7C2
// DataOut: ebx ecx fs r10 r10b r10d r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C7C2:
	r8_1044 = r14_166
	edi_1023 = 0x00000000
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C797:
	edi_1023 = 0x00000000
// DataOut: dil ebx fs r10 r10d r11 r13 r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C7D8:
	r8_1044 = r14_166
	ecx_1031 = 0x00000000
	rcx_1032 = DPB(rcx_1032, 0x00000000, 0) (alias)
	edi_1023 = 0x00000000
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C4DB:
	Mem1077[rsi + 0x0000000000000287:byte] = (byte) (edi_1023 + 0x00000030)
	rax_1018 = memcpy(rax_1001 + 0x0000000000000287 - r11_101, r15_123, r11_101)
	r8_1044 = rax_1018
	ecx_1031 = 0x00000000
	rcx_1032 = DPB(rcx_1032, 0x00000000, 0) (alias)
	edi_1023 = 0x00000000
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C174:
	branch ebx_1037 == 0x00000008 l000000000040C768
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r15 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C768:
	r8_1044 = r14_166
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C530:
	byte al_813
	word64 rax_811
	word64 r11_779
	*r11Out = r11_101
	branch (edx & 0x00000003) == 0x00000001 l000000000040C6F0
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> rsi:<invalid> cl:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C6F0:
	rcx_1032 = (int64) ecx_1031
	word64 rax_936 = DPB(r10_1006, (word32) r10_1006 & 0x00000001, 0) + rcx_1032
	word32 edi_941 = edi_1023 + (word32) (rax_936 != 0x0000000000000000)
	al_813 = edi_941 > 0x00000005
	rax_811 = DPB(rax_936, edi_941 > 0x00000005, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> rsi:<invalid> cl:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C53B:
	rax_811 = DPB(rax_1018, 0x00000000, 0) (alias)
	al_813 = 0x00 (alias)
	branch (edx & 0x00000003) != 0x00000000 l000000000040C54C
// DataOut: al ebx ecx edi fs r10 r10b r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> rsi:<invalid> cl:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C545:
	word32 ecx_919 = ecx_1031 + edi_1023
	rcx_1032 = DPB(rcx_1032, ecx_919, 0) (alias)
	al_813 = ecx_919 > 0x00000000
	rax_811 = DPB(rax_1018, ecx_919 > 0x00000000, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:edx & 0x00000003 rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C54C:
	branch al_813 == 0x00 l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> al:Test(GT,SZO) rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C550:
	r10_1006 = r10_1006 + 0x0000000000000001
	branch (edx & 0x00000010) == 0x00000000 l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r15 r8 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> al:Test(GT,SZO) rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C559:
	word64 rax_881 = DPB(rax_811, v20_52, 0)
	branch rax_881 != r10_1006 l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r15 r8 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> al:Test(GT,SZO) rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C562:
	branch ebx_1037 == 0x00000008 l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r15 r8 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> al:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C567:
	ebx_1037 = ebx_1037 + 0x00000001
	branch (bLocB0 & 0x08) != 0x00 l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r15 r8 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> al:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C577:
	Mem898[rax_881 - 0x0000000000000002:byte] = 0x30
	r8_1044 = memcpy(rax_881 - 0x0000000000000001 - r11_101, r15_123, r11_101)
// DataOut: ebx fs r10 r10b r11 r11d r13 r8 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:0x00000001 r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> al:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:0x01 sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5A0:
	r12_163 = r8_1044
	word64 r9_842
	*r9Out = 0x00000000CCCCCCCD
// DataOut: ebx fs r10 r10b r11 r11d r12 r13 r8 r9 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> al:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5B0:
	word64 rdx_850 = SLICE(rcx_1032 *u r10_1006, word64, 64)
	word64 rax_852 = (rdx_850 >>u 0x0000000000000003) + (rdx_850 >>u 0x0000000000000003) * 0x0000000000000004
	r12_163 = r12_163 - 0x0000000000000001
	Mem865[r12_163:byte] = (byte) ((word32) (r10_1006 - rax_852 * 0x0000000000000002) + 0x00000030)
	rax_171 = rax_852 * 0x0000000000000002
	r10_1006 = rdx_850 >>u 0x0000000000000003
	branch rdx_850 >>u 0x0000000000000003 != 0x0000000000000000 l000000000040C5B0
// DataOut: ebx fs r10 r10b r11 r11d r12 r13 r8 r9 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:0xCCCCCCCD ebx:<invalid> esi:<invalid> al:<invalid> r9:0x00000000CCCCCCCD Sequence rdx:rax:<invalid> r10d:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5D8:
// DataOut: ebx fs r11 r11d r12 r13 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:0xCCCCCCCD ebx:<invalid> esi:<invalid> al:<invalid> r9:0x00000000CCCCCCCD Sequence rdx:rax:<invalid> r10d:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE59:
	branch r12_64 < 0x0000000000000000 l000000000040C5F0
// DataOut: bl fs r11 r11d r13 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5F0:
	branch rbx_65 >= 0x0000000000000000 l000000000040BE7D
// DataOut: fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):rdi -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE6B:
	branch rbx_65 < 0x0000000000000000 l000000000040C608
// DataOut: fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):rdi -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C608:
// DataOut: fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):rcx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE7D:
	branch r8 < 0x0000000000000000 l000000000040C5E0
// DataOut: fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):rcx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5E0:
// DataOut: fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE94:
	branch (bLocB0 & 0x10) == 0x00 l000000000040C1B8
// DataOut: fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C1B8:
	branch (edx & 0x00000003) == 0x00000001 l000000000040C1CD
// DataOut: fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C1CD:
	word64 rcx_642 = DPB(rcx_1213, 0x00415F18, 0)
	word64 rax_653 = DPB(r8, __sprintf_chk(rsi, DPB(rsi_1248, 0x00000001, 0), 0xFFFFFFFFFFFFFFFF, rcx_642), 0)
	word64 rax_657 = DPB(r8, strlen(rsi), 0)
// DataOut: ebx fs r11 r11d r13 r14 r15 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C218:
	word64 rsp_677
	word64 rdi_678
	word32 eax_679
	word32 edx_680
	byte SZO_681
	byte C_682
	word64 rsi_683
	word64 rbp_685
	word64 rbx_687
	word64 rcx_688
	byte SCZO_689
	word64 r8_690
	word32 ecx_692
	word64 r15_693
	word64 r11_696
	word64 rdx_697
	byte CZ_698
	byte Z_699
	byte S_700
	word64 r10_702
	word32 edi_703
	byte cl_704
	word32 r9d_705
	word32 esi_706
	word32 r12d_707
	word32 r14d_708
	byte al_709
	byte dl_710
	byte sil_711
	byte dil_712
	word64 r9_713
	word32 r10d_714
	byte r10b_715
	word32 r15d_716
	call memmove (retsize: 8; depth: 216)
		uses: al_661,bLocB0,C_651,cl_593,CZ_139,dil_115,dl_106,dwLoc04_4,dwLoc08_10,dwLoc0C_15,dwLoc10_18,dwLoc14_22,dwLoc18_25,dwLoc74,dwLoc78_44,dwLoc98_30,dwLocAC_53,dwLocB0_34,eax_658,ebx_655,ecx_641,edi_114,edx_599,esi_644,fs_69,qwLoc08,qwLoc10,qwLoc18,qwLoc28_40,qwLoc68_612,qwLoc80_125,qwLoc90,qwLoc98,qwLocA0_32,qwLocA8_36,qwLocB8_140,r10_590,r10b_586,r10d_587,r11_134,r12_669,r12d_670,r13_135,r14_649,r14d_648,r15_671,r15d_663,r8_137,r9_91,r9d_83,rax_657,rbp_100,rbx_656,rcx_642,rdi_673,rdx_666,rLocD0_639,rsi_665,rsp_55,S_614,SCZO_672,sil_588,SZO_650,Z_637
		defs: al_709,C_682,cl_704,CZ_698,dil_712,dl_710,eax_679,ebx_701,ecx_692,edi_703,edx_680,esi_706,fs_691,r10_702,r10b_715,r10d_714,r11_696,r12_686,r12d_707,r13_694,r14_684,r14d_708,r15_693,r15d_716,r8_690,r9_713,r9d_705,rax_695,rbp_685,rbx_687,rcx_688,rdi_678,rdx_697,rsi_683,rsp_677,S_700,SCZO_689,sil_711,SZO_681,Z_699
// DataOut: ebx fs r11 r11d r12 r13 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:0x00415F18 r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:0xFFFFFFFF r8:r8 + 648 rdx:0xFFFFFFFFFFFFFFFF esi:0x00000001 r14d:0x00000000 ebx:0xFFFFFFFF r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C237:
	branch (bLocB0 & 0x04) != 0x00 l000000000040C318
// DataOut: ebx fs r11 r11d r12 r13 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:0xCCCCCCCD al:<invalid> r9:0x00000000CCCCCCCD Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C318:
	word64 rax_465 = DPB(rax_171, strlen(r13_1295), 0)
	word64 rsp_471
	word64 rdi_472
	word32 eax_473
	word32 edx_474
	byte SZO_475
	byte C_476
	word64 rsi_477
	word64 r12_480
	word64 rbx_481
	word64 rcx_482
	byte SCZO_483
	word64 r8_484
	word32 ecx_486
	word64 r13_488
	word64 rax_489
	word64 r11_490
	word64 rdx_491
	byte CZ_492
	byte Z_493
	byte S_494
	word64 r10_496
	word32 edi_497
	byte cl_498
	word32 r9d_499
	word32 esi_500
	word32 r12d_501
	word32 r14d_502
	byte al_503
	byte dl_504
	byte sil_505
	byte dil_506
	word64 r9_507
	word32 r10d_508
	byte r10b_509
	word32 r15d_510
	word64 rbp_479
	word64 r15_487
	call __memcpy_chk (retsize: 8; depth: 216)
		uses: al_173,bLocB0,C_192,cl_170,CZ_167,dil_149,dl_178,dwLoc04_4,dwLoc08_10,dwLoc0C_15,dwLoc10_18,dwLoc14_22,dwLoc18_25,dwLoc74_141,dwLoc78_44,dwLoc98_30,dwLocAC_53,dwLocB0_34,eax_172,ebx_186,ecx_468,edi_152,edx_175,esi_151,fs_156,qwLoc08,qwLoc10,qwLoc18,qwLoc28_40,qwLoc68_144,qwLoc80_143,qwLoc90_142,qwLoc98_470,qwLocA0_32,qwLocA8_36,qwLocB8_140,r10_153,r10b_147,r10d_148,r11_155,r12_163,r12d_164,r13_158,r14_463,r14d_464,r15_461,r15d_462,r8_458,r9_161,r9d_162,rax_465,rbp_180,rbx_179,rcx_169,rdi_466,rdx_469,rLocD0_145,rsi_467,rsp_183,S_154,SCZO_459,sil_150,SZO_190,Z_191
		defs: al_503,C_476,cl_498,CZ_492,dil_506,dl_504,eax_473,ebx_495,ecx_486,edi_497,edx_474,esi_500,fs_485,r10_496,r10b_509,r10d_508,r11_490,r12_480,r12d_501,r13_488,r14_478,r14d_502,r15_487,r15d_510,r8_484,r9_507,r9d_499,rax_489,rbp_479,rbx_481,rcx_482,rdi_472,rdx_491,rsi_477,rsp_471,S_494,SCZO_483,sil_505,SZO_475,Z_493
	word64 r9_511 = r12_480 + r14_166
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:0xCCCCCCCD al:<invalid> r9:0x00000000CCCCCCCD Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C36C:
	byte dl_536 = (byte) (word32) Mem0[rbp_479:byte]
	branch dl_536 == 0x00 l000000000040C383
// DataOut: dl ebx fs r11 r11d r12 r13 r14 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C374:
	r15_487 = DPB(r15_487, (word32) dl_536, 0) (alias)
	branch dl_536 <=u 0x7E l000000000040C37F
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C37B_1:
	r15_487 = r14_166
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r15d:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C37F:
	rbp_479 = rbp_479 + 0x0000000000000001
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r15d:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C383:
	branch r15_487 <=u r14_166 l000000000040C38F
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> r15d:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C38B_1:
	r15_487 = r14_166
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:fp - 0x0000000000000060 rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> r15d:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C38F:
	r14_166 = r14_166 - r15_487
	rax_171 = memcpy(r9_511 - r15_487, fp - 0x0000000000000060 + r14_166, r15_487)
	word64 r9_562
	*r9Out = rax_171
	branch r14_166 != 0x0000000000000000 l000000000040C358
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:fp - 0x0000000000000060 rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> r15d:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C358:
	r9_511 = memcpy(rax_171 - rax_465, r13_488, rax_465)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> r15d:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C3AC:
	r12_163 = rax_171
// DataOut: ebx fs r11 r11d r12 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> r15d:<invalid> cl:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C242:
	word64 rdx_254
	word32 eax_245
	branch (bLocB0 & 0x80) == 0x00 l000000000040C2BA
// DataOut: ebx fs r11 r11d r12 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C249:
	branch ebx_1037 == 0xFFFFFFFF l000000000040C618
// DataOut: ebx fs r11 r11d r12 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C618:
	branch r8 <=u 0x0000000000000001 l000000000040C7A9
// DataOut: fs r11 r11d r12 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C7A9:
	ebx_1037 = 0x00000000
// DataOut: ebx fs r11 r11d r12 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:r8 esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C627:
	word64 r14_431 = DPB(r14_166, v20_52, 0)
	ebx_1037 = 0x00000001
	word64 rax_435 = DPB(rax_171, 0x00000001, 0)
// DataOut: ebx fs r11 r11d r12 r14 r9 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:r8 esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C640:
	rax_435 = rax_435 *s r14_431
	branch r8 <=u rax_435 l000000000040C252
// DataOut: ebx fs r11 r11d r12 r14 r9 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:r8 esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C64D:
	ebx_1037 = ebx_1037 + 0x00000001
	branch ebx_1037 != 0x00000008 l000000000040C640
// DataOut: ebx fs r11 r11d r12 r14 r9 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:r8 esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C655:
// DataOut: ebx fs r11 r11d r12 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:r8 esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C252:
	eax_245 = edx & 0x00000100
	branch (ebx_1037 | edx & 0x00000100) == 0x00000000 l000000000040C2BA
// DataOut: eax ebx fs r11 r11d r12 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(0) Local -00B8(64)

l000000000040C261:
	branch (bLocB0 & 0x40) != 0x00 l000000000040C3E8
// DataOut: eax ebx fs r11 r11d r12 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000100 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B8(64)

l000000000040C3E8:
	Mem421[rsi + 0x0000000000000288:byte] = 0x20
	qwLocB8_140 = rsi + 0x0000000000000289
// DataOut: eax ebx fs r11 r11d r12 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000100 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C26C:
	branch ebx_1037 == 0x00000000 l000000000040C7EB
// DataOut: eax ebx fs r11 r11d r12 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000100 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C274:
	byte cl_403
	rdx_254 = qwLocB8_140 + 0x0000000000000001
	branch (edx & 0x00000020) == 0x00000000 l000000000040C3D0
// DataOut: eax ebx fs r11 r11d r12 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000100 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C3D0:
	cl_403 = 0x6B (alias)
	branch ebx_1037 != 0x00000001 l000000000040C289
// DataOut: cl eax ebx fs r11 r11d r12 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000100 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:edx & 0x00000020 r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C3DE:
// DataOut: cl eax ebx fs r11 r11d r12 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000100 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:0x0000006B r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:0x6B r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C289:
	cl_403 = (byte) (word32) Mem0[(int64) ebx_1037 + 0x0000000000415F78:byte] (alias)
// DataOut: cl eax ebx fs r11 r11d r12 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000100 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C293:
	Mem407[qwLocB8_140:byte] = cl_403
// DataOut: eax ebx fs r11 r11d r12 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000100 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C29A:
	branch eax_245 == 0x00000000 l000000000040C7F5
// DataOut: ebx fs r11 r11d r12 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C7F5:
	qwLocB8_140 = rdx_254
// DataOut: ebx fs r11 r11d r12 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C2A2:
	branch (edx & 0x00000020) != 0x00000000 l000000000040C3B8
// DataOut: ebx fs r11 r11d r12 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C3B8:
	branch ebx_1037 == 0x00000000 l000000000040C2AE
// DataOut: ebx fs r11 r11d r12 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000020 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C3C0:
	Mem350[rdx_254:byte] = 0x69
	rdx_254 = rdx_254 + 0x0000000000000001
// DataOut: ebx fs r11 r11d r12 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000020 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C2AE:
	Mem345[rdx_254:byte] = 0x42
	qwLocB8_140 = rdx_254 + 0x0000000000000001
// DataOut: ebx fs r11 r11d r12 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000020 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C2BA:
	word64 rdi_275 = rcx_39 ^ Mem0[fs_156:0x00000028:word64]
	Mem279[qwLocB8_140:byte] = 0x00
	eax_245 = (word32) r12_163 (alias)
	branch rdi_275 != 0x0000000000000000 l000000000040C7E6
// DataOut: eax ebx fs r11 r11d r12 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C7E6:
	__stack_chk_fail()
// DataOut: eax ebx fs r11 r11d r12 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C7EB:
	rdx_254 = qwLocB8_140
// DataOut: eax ebx fs r11 r11d r12 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C2DC:
	word64 rbp_296
	*rbpOut = Mem279[qwLoc08 + 0x0000000000000008:word64]
	word64 rsp_301
	*rspOut = qwLoc08 + 0x0000000000000020
	return r12_163
// DataOut: fs r11 r11d r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040BD70_exit:
// DataOut: r11 r11d r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 eax:<invalid> r14:<invalid> r12:<invalid> rbx:rbx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040C1BF:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040BEA3:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040BEB4:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:0x00000000 r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040C810(word64 rax, word64 rdx, word64 rdi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rax rdi rdx
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040C810_entry:
// DataOut: r8 rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C810:
	word64 rbp_105
	word32 ebp_136
	word64 rdi_100
	word64 rdx_150
	word64 r12_11 = rdx
	word64 rbx_119 = rdi
	branch rdi == 0x0000000000000000 l000000000040C910
// DataOut: r12 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040C910:
	rax = getenv(DPB(rdi, 0x004138E4, 0))
	rbx_119 = rax
	branch rax != 0x0000000000000000 l000000000040C82C
// DataOut: r12 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:rdi -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C926:
	rax = getenv(DPB(rdi, 0x00415F24, 0))
	rbx_119 = rax
	branch rax != 0x0000000000000000 l000000000040C82C
// DataOut: r12 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> edi:0x004138E4 rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C93C:
	rdi_100 = DPB(rdi, 0x00415F2E, 0) (alias)
	word64 rdx_270 = 0x0000000000000000 - (getenv(rdi_100) <u 0x0000000000000001)
	word64 rdx_276 = DPB(rdx_270, (word32) rdx_270 & 0x00000200, 0)
	Mem280[rdx:word64] = rdx_276 + 512
	ebp_136 = 0x00000000
	rbp_105 = DPB(rbp, 0x00000000, 0) (alias)
	rdx_150 = rdx_276 + 512
// DataOut: ebp r12 r8 rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> edi:0x00415F24 rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C82C:
	branch Mem0[rbx_119:byte] == 0x27 l000000000040C8A0
// DataOut: r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> edi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8A0:
	rbx_119 = rbx_119 + 0x0000000000000001
// DataOut: r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> ebp:0x00000000 edi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C833:
	word64 rsp_135
	word64 r14_138
	word64 rax_139 = fn0000000000409E50(rax, DPB(rcx, 0x00000004, 0), DPB(rdx, 0x00415F50, 0), DPB(rsi, 0x00415F60, 0), rbx_119, out rsp_135, out ebp_136, out r12_11, out r14_138)
	rdi_100 = rbx_119
	byte al_142 = (byte) rax_139
	branch (word32) rax_139 < 0x00000000 l000000000040C8B0
// DataOut: al ebp r12 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> ebp:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8B0:
	rdi_100 = rbx_119
	word64 rsp_165
	word64 r8_167
	branch fn0000000000411360(0x00000000, rsp_135 + 0x0000000000000008, rbx_119, r8, out rsp_165, out rbp_105, out r8_167, out r12_11) != 0x00000000 l000000000040C968
// DataOut: ebp r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:0x00415F50 esi:0x00415F60 rdi:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> rsi:<invalid> ebx:<invalid> rdx:<invalid> eax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C968:
	Mem239[rbp_105:word32] = 0x00000000
	rdx_150 = Mem239[r12_11:word64]
// DataOut: r12 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> rdx:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8D0:
	branch (byte) ((word32) Mem0[rbx_119:byte] - 0x00000030) <=u 0x09 l000000000040C907
// DataOut: ebp r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> rdx:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8DA:
	word64 rdx_194 = Mem0[rsp_165 + 0x0000000000000010:word64]
	branch rbx_119 != rdx_194 l000000000040C8F9
// DataOut: ebp r12 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> rdx:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8F9:
	word64 rbx_225 = rbx_119 + 0x0000000000000001
	branch (byte) ((word32) Mem0[rbx_225:byte] - 0x00000030) >u 0x09 l000000000040C8F0
	rbx_119 = rbx_225 + 0x0000000000000001
	branch (byte) ((word32) Mem0[rbx_225 + 0x0000000000000001:byte] - 0x00000030) >u 0x09 l000000000040C8F0
// DataOut: ebp r12 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8F0:
	branch rbx_225 + 0x0000000000000001 == rdx_194 l000000000040C980
// DataOut: ebp r12 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8E4:
// DataOut: ebp r12 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C980:
	branch Mem0[rdx_194 - 0x0000000000000001:byte] == 0x42 l000000000040C998
// DataOut: ebp r12 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C998:
	ebp_136 = ebp_136 | 0x00000180
	rbp_105 = DPB(rbp_105, ebp_136 | 0x00000180, 0) (alias)
	branch Mem0[rdx_194 - 0x0000000000000002:byte] != 0x69 l000000000040C907
// DataOut: ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C9A8:
// DataOut: ebp r12 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> bpl:<invalid> edi:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C986:
	rbp_105 = DPB(rbp_105, 0x84, 0) (alias)
	ebp_136 = DPB(ebp_136, 0x84, 0) (alias)
// DataOut: ebp r12 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C98A:
	ebp_136 = ebp_136 | 0x00000020
	rbp_105 = DPB(rbp_105, ebp_136, 0) (alias)
// DataOut: ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> bpl:<invalid> edi:<invalid> rax:<invalid> r14d:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C907:
	rdx_150 = Mem0[r12_11:word64]
// DataOut: ebp r12 r8 rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> bpl:<invalid> edi:<invalid> rax:<invalid> r14d:<invalid> rdx:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C84E:
	Mem148[r12_11:word64] = 0x0000000000000001
	ebp_136 = ebp_136 | Mem148[DPB(rax_139, (int16) al_142, 0) * 0x00000004 + 0x00415F50:word32]
	rdx_150 = DPB(rdx, 0x00000001, 0) (alias)
	rbp_105 = DPB(rbp, ebp_136, 0) (alias)
// DataOut: ebp r12 r8 rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:0x00415F50 esi:0x00415F60 rdi:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> rsi:<invalid> ebx:<invalid> rdx:<invalid> eax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C864:
	Mem107[rbp_105:word32] = ebp_136
// DataOut: r12 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> ax:(int16) al edi:<invalid> rax:<invalid> rdx:<invalid> bpl:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r14d:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C86A:
	branch rdx_150 != 0x0000000000000000 l000000000040C894
// DataOut: r12 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> ax:<invalid> edi:<invalid> rax:<invalid> rdx:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> bpl:<invalid> r14d:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C86F:
	word64 rax_76 = 0x0000000000000000 - (getenv(DPB(rdi_100, 0x00415F2E, 0)) <u 0x0000000000000001)
	Mem82[r12_11:word64] = DPB(rax_76, (word32) rax_76 & 0x00000200, 0)
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> ax:<invalid> edi:<invalid> rax:<invalid> rdx:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> bpl:<invalid> r14d:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C894:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> ax:<invalid> edi:<invalid> rax:<invalid> rdx:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid> bpl:<invalid> r14d:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> cl:<invalid> r8d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn000000000040C810_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> ax:<invalid> edi:<invalid> rax:<invalid> rdx:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid> rbp:<invalid> bpl:<invalid> r14d:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r9d:<invalid> cl:<invalid> r8d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn000000000040C9B0(word64 rsi, word32 edi, word64 r8, word64 r12, ptr64 & rspOut, ptr64 & ebpOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r12 r8 rsi
// LiveOut: ebp esp rax rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040C9B0_entry:
// DataOut: edi fs r11 r11d r12 r14 r14d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C9B0:
	word64 rsp_11 = fp - 0x000000000000000C
	word64 rbx_102 = Mem0[0x000000000061B1F8:word64]
	branch rbx_102 != 0x0000000000000000 l000000000040C9D1
// DataOut: ebp fs r11 r11d r12 r14 r14d r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040C9D1:
	branch Mem0[rbx_102:word32] != edi l000000000040C9C8
	branch Mem0[rbx_102:word32] != edi l000000000040C9C8
// DataOut: ebp fs r11 r11d r12 r14 r14d r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C ebp:edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9C8:
	rbx_102 = Mem0[rbx_102 + 0x0000000000000008:word64]
	branch rbx_102 == 0x0000000000000000 l000000000040C9F0
// DataOut: ebp fs r11 r11d r12 r14 r14d r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C ebp:edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9C2:
// DataOut: ebp fs r11 r11d r12 r14 r14d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C ebp:edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9F0:
	word64 rax_65 = getpwuid(DPB(rdi, edi, 0))
	word64 rdi_71 = DPB(rdi, 0x00000011, 0)
	branch rax_65 == 0x0000000000000000 l000000000040CA16
// DataOut: ebp fs r11 r11d r12 r14 r14d r8 r9 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C ebp:edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CA07:
	r12 = Mem0[r8:word64]
	rdi_71 = DPB(rax_65, strlen(r12), 0) + 0x0000000000000011
// DataOut: ebp fs r11 r11d r12 r14 r14d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:edi rbx:<invalid> edi:0x00000011 esp:0x00416919 rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CA16:
	word64 rax_78 = fn0000000000410C40(rsi, rdi_71, out rsp_11)
	Mem80[rax_78:word32] = edi
	strcpy(rax_78 + 0x0000000000000010, r12)
	rax = Mem80[0x000000000061B1F8:word64]
	Mem85[0x000000000061B1F8:word64] = rax_78
	Mem86[rax_78 + 0x0000000000000008:word64] = rax
	rbx_102 = rax_78
// DataOut: fs r11 r11d r14 r14d r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:edi rbx:<invalid> edi:<invalid> esp:0x00416919 rax:<invalid> r12:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9D5:
	word64 rbx_32 = Mem0[rsp_11:word64]
	word64 rsp_36 = Mem0[rsp_11 + 0x0000000000000010:word64]
	branch Mem0[rbx_102 + 0x0000000000000010:byte] == 0x00 l000000000040C9E7
	word64 rax_39 = DPB(rax, 0x00000000, 0)
	word32 ebp_46
	*ebpOut = (word32) Mem0[rsp_36 + 0x0000000000000010:word64]
	word64 rsp_49
	*rspOut = Mem0[rsp_36 + 0x0000000000000018:word64] + 0x0000000000000008
	branch Mem0[rbx_32 + 0x0000000000000010:byte] == 0x00 l000000000040C9E7
// DataOut: ebp esp fs r11 r11d r14 r14d r8 r9 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:edi rbx:<invalid> edi:<invalid> esp:0x00416919 rax:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9E3_1:
	rax_39 = rbx_32 + 0x0000000000000010
// DataOut: ebp esp fs r11 r11d r14 r14d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> eax:0x00000000 rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> rax:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9E3_1:
	rax_39 = rbx_32 + 0x0000000000000010
// DataOut: ebp esp fs r11 r11d r14 r14d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> eax:0x00000000 rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> rax:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9E7:
	return rax_39
	return rax_39
// DataOut: ebp esp fs r11 r11d r14 r14d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rax:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040C9B0_exit:
// DataOut: ebp esp rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rax:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040CB40(word64 rax, word64 rsi, word32 edi, word64 r8, word64 r12, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r12 r8 rax rsi
// LiveOut: rax rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040CB40_entry:
// DataOut: edi fs r11 r11d r12 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CB40:
	word64 rbx_111
	word64 rsp_11 = fp - 0x000000000000000C
	word64 rbx_16 = Mem0[0x000000000061B1E8:word64]
	rbx_111 = rbx_16
	branch rbx_16 != 0x0000000000000000 l000000000040CB61
// DataOut: ebp fs r11 r11d r12 r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CB61:
	branch Mem0[rbx_111:word32] != edi l000000000040CB58
	branch Mem0[rbx_111:word32] != edi l000000000040CB58
// DataOut: ebp fs r11 r11d r12 r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C ebp:edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB58:
	rbx_111 = Mem0[rbx_111 + 0x0000000000000008:word64]
	branch rbx_111 == 0x0000000000000000 l000000000040CB80
// DataOut: ebp fs r11 r11d r12 r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C ebp:edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB52:
// DataOut: ebp fs r11 r11d r12 r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C ebp:edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB80:
	word64 rsp_69
	word64 rbp_70
	word32 ebp_71
	word32 edi_72
	word64 rbx_73
	byte SZO_74
	byte C_75
	byte Z_76
	byte SCZO_77
	word32 eax_78
	word64 rdx_79
	word64 rax_80
	word32 esp_81
	word64 r8_83
	word64 rdi_84
	word64 rsi_85
	word64 r12_104
	call getgrgid (retsize: 8; depth: 8)
		uses: C_19,dwLoc04_4,dwLoc08_7,dwLoc0C_14,eax,ebp_9,edi_59,esp_60,r12,r8,rax,rbp_10,rbx_16,rdi,rdx,rsi,rsp_11,SCZO,SZO_17,Z_18
		defs: C_75,eax_78,ebp_71,edi_72,esp_81,r12_82,r8_83,rax_80,rbp_70,rbx_73,rdi_84,rdx_79,rsi_85,rsp_69,SCZO_77,SZO_74,Z_76
	word64 rdi_107 = DPB(rdi_84, 0x00000011, 0)
	branch rax_80 == 0x0000000000000000 l000000000040CBA6
// DataOut: ebp fs r11 r11d r12 r8 r9 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C ebp:edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB97:
	r12_104 = Mem0[r8_83:word64]
	rdi_107 = DPB(rax_80, strlen(r12_104), 0) + 0x0000000000000011
// DataOut: ebp fs r11 r11d r12 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:edi rbx:<invalid> edi:0x00000011 esp:0x00416919 -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CBA6:
	word64 rax_95 = fn0000000000410C40(rsi_85, rdi_107, out rsp_11)
	Mem97[rax_95:word32] = ebp_71
	strcpy(rax_95 + 0x0000000000000010, r12_104)
	rax = Mem97[0x000000000061B1E8:word64]
	Mem102[0x000000000061B1E8:word64] = rax_95
	Mem103[rax_95 + 0x0000000000000008:word64] = rax
	rbx_111 = rax_95
// DataOut: fs r11 r11d r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:edi rbx:<invalid> edi:<invalid> esp:0x00416919 r12:<invalid> rdi:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB65:
	word64 rbx_34 = Mem0[rsp_11:word64]
	word64 rsp_38 = Mem0[rsp_11 + 0x0000000000000010:word64]
	branch Mem0[rbx_111 + 0x0000000000000010:byte] == 0x00 l000000000040CB77
	word64 rax_41 = DPB(rax, 0x00000000, 0)
	word64 rsp_50
	*rspOut = Mem0[rsp_38 + 0x0000000000000018:word64] + 0x0000000000000008
	branch Mem0[rbx_34 + 0x0000000000000010:byte] == 0x00 l000000000040CB77
// DataOut: fs r11 r11d r8 r9 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:edi rbx:<invalid> edi:<invalid> esp:0x00416919 r12:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> edx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB73_1:
	rax_41 = rbx_34 + 0x0000000000000010
// DataOut: fs r11 r11d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> eax:0x00000000 rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB73_1:
	rax_41 = rbx_34 + 0x0000000000000010
// DataOut: fs r11 r11d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> eax:0x00000000 rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB77:
	return rax_41
	return rax_41
// DataOut: fs r11 r11d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rax:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040CB40_exit:
// DataOut: rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rax:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040CCD0(word64 rsi, word64 rdi, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: r14 r14d rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040CCD0_entry:
// DataOut: dil fs r11 r11d r12 r13 r15 r15b rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CCD0:
	Mem8[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_26 = rsi + 0x0000000000000014
	word64 r14_9
	*r14Out = 0x0000000066666667
	branch rdi < 0x0000000000000000 l000000000040CD28
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD28:
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b r8 rbx rcx rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 r14:0x0000000066666667

l000000000040CD30:
	word64 rdx_69 = (rsi *s rdi >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_26 = rcx_26 - 0x0000000000000001
	Mem80[rcx_26:byte] = (byte) (rsi + (rdx_69 * 0x0000000000000005) * 0x00000002 - edi)
	rdi = rdx_69
	edi = (word32) rdx_69 (alias)
	branch rdx_69 != 0x0000000000000000 l000000000040CD30
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b r8 rbx rcx rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 r8:rsi esi:0x00000030 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CD5B:
	Mem84[rcx_26 - 0x0000000000000001:byte] = 0x2D
	return rcx_26 - 0x0000000000000001
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 r8:rsi esi:0x00000030 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CCE7:
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 r14:0x0000000066666667

l000000000040CCF0:
	word64 rdx_35 = (rsi *s rdi >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_26 = rcx_26 - 0x0000000000000001
	Mem45[rcx_26:byte] = (byte) ((word32) (rdi - (rdx_35 * 0x0000000000000005) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_35
	branch rdx_35 != 0x0000000000000000 l000000000040CCF0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> edi:<invalid>

l000000000040CD20:
	return rcx_26
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> edi:<invalid>

fn000000000040CCD0_exit:
// DataOut: r14 r14d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> edi:<invalid> r8:rsi esi:0x00000030 eax:<invalid>



word64 fn000000000040CD70(word64 rsi, word64 rdi, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: r14 r14d rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx r14 r14b r14d r14w rax rcx rdi rdx
// Preserved: rsp
fn000000000040CD70_entry:
// DataOut: dil fs r11 r11d r12 r13 r13d r15 r15b rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD70:
	Mem4[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_10 = rsi + 0x0000000000000014
	word64 r14_5
	*r14Out = 0x00000000CCCCCCCD
// DataOut: dil fs r11 r11d r12 r13 r13d r14 r14d r15 r15b rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD88:
	word64 rdx_rax_11 = rsi *u rdi
	rcx_10 = rcx_10 - 0x0000000000000001
	Mem23[rcx_10:byte] = (byte) ((word32) (rdi - ((rdx_rax_11 >>u 0x0000000000000003) + (rdx_rax_11 >>u 0x0000000000000003) * 0x0000000000000004) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_rax_11 >>u 0x0000000000000003
	branch rdx_rax_11 >>u 0x0000000000000003 != 0x0000000000000000 l000000000040CD88
// DataOut: dil fs r11 r11d r12 r13 r13d r14 r14d r15 r15b rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> edi:<invalid>

l000000000040CDAE:
	return rcx_10
// DataOut: fs r11 r11d r12 r13 r13d r14 r14d r15 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> edi:<invalid>

fn000000000040CD70_exit:
// DataOut: r14 r14d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> edi:<invalid>



void fn000000000040CDC0(word64 rax, word64 rcx, word64 rdx, word64 rsi, word64 rdi, word32 r8d, word32 r9d)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8d r9b r9d rax rcx rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040CDC0_entry:
// DataOut: r8d r9b r9d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CDC0:
	word64 r15_1033
	word64 qwLoc40_104
	word64 rbp_1062
	word64 rax_1053
	word64 rcx_120
	word64 rax_123
	word64 rax_34 = DPB(rax, strlen(rdi), 0)
	word64 r13_1039 = rsi
	word64 r12_1047 = rcx
	word32 ebx_1038 = r9d
	byte bl_1035 = (byte) r9d
	word64 r14_1034 = rax_34
	word64 rbp_42 = rax_34
	branch (bl_1035 & 0x02) == 0x00 l000000000040CF60
// DataOut: bl ebx r12 r13 r14 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0)

l000000000040CF60:
	word64 rsp_641
	word64 rdi_642
	word64 rsi_643
	word64 rbx_648
	word32 r9d_650
	byte SCZO_651
	word64 rdx_652
	word32 r8d_653
	word64 rax_654
	byte SZO_656
	byte C_657
	byte Z_659
	word64 r15_660
	word32 ebp_661
	byte CZ_662
	word32 ecx_663
	word32 eax_664
	word32 r12d_665
	word32 edx_666
	word32 edi_667
	word32 r15d_668
	word16 ax_669
	byte al_670
	call __ctype_get_mb_cur_max (retsize: 8; depth: 88)
		uses: al_37,ax_36,bl_26,bLoc21,C_40,CZ,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_35,ebp_43,ebx_24,ecx,edi,edx,qwLoc08,qwLoc10,qwLoc18,qwLoc30,qwLoc38_30,qwLoc40,qwLoc48_28,r12_16,r12d_17,r13_11,r14_41,r15,r15d,r8d,r9d,rax_34,rbp_42,rbx_25,rcx,rdi,rdx,rsi,rsp_27,SCZO,SZO_38,Z_39
		defs: al_670,ax_669,bl_655,C_657,CZ_662,eax_664,ebp_661,ebx_649,ecx_663,edi_667,edx_666,r12_646,r12d_665,r13_645,r14_658,r15_660,r15d_668,r8d_653,r9d_650,rax_654,rbp_644,rbx_648,rcx_647,rdi_642,rdx_652,rsi_643,rsp_641,SCZO_651,SZO_656,Z_659
	branch rax_654 <=u 0x0000000000000001 l000000000040CDFA
// DataOut: bl ebx r12 r13 r14 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:DPB(rax, <invalid>, 0) r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0)

l000000000040CF6F:
	word64 rsp_678
	word64 rdi_679
	word64 rsi_680
	word64 rbp_681
	word64 rbx_685
	word32 r9d_687
	byte SCZO_688
	word64 rdx_689
	word32 r8d_690
	word64 rax_691
	byte SZO_693
	byte C_694
	byte Z_696
	word64 r15_697
	word32 ebp_698
	byte CZ_699
	word32 ecx_700
	word32 eax_701
	word32 r12d_702
	word32 edx_703
	word32 edi_704
	word32 r15d_705
	word16 ax_706
	byte al_707
	call mbstowcs (retsize: 8; depth: 88)
		uses: al_670,ax_669,bl_655,bLoc21,C_677,CZ_672,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_664,ebp_661,ebx_649,ecx_663,edi_675,edx_674,qwLoc08,qwLoc10,qwLoc18,qwLoc30,qwLoc38_30,qwLoc40,qwLoc48_28,r12_646,r12d_665,r13_645,r14_658,r15_660,r15d_668,r8d_653,r9d_650,rax_654,rbp_644,rbx_648,rcx_647,rdi_642,rdx_652,rsi_673,rsp_641,SCZO_671,SZO_676,Z_659
		defs: al_707,ax_706,bl_692,C_694,CZ_699,eax_701,ebp_698,ebx_686,ecx_700,edi_704,edx_703,r12_683,r12d_702,r13_682,r14_695,r15_697,r15d_705,r8d_690,r9d_687,rax_691,rbp_681,rbx_685,rcx_684,rdi_679,rdx_689,rsi_680,rsp_678,SCZO_688,SZO_693,Z_696
	branch rax_691 != 0xFFFFFFFFFFFFFFFF l000000000040CFA8
// DataOut: bl ebx r12 r13 r14 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0)

l000000000040CFA8:
	word64 r15_736 = (rax_691 + 0x0000000000000001) * 0x0000000000000004
	word64 rax_740 = malloc(r15_736)
	qwLoc40_104 = rax_740
	branch rax_740 == 0x0000000000000000 l000000000040D160
// DataOut: bl ebx r12 r13 r14 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D160:
	branch (bl_1035 & 0x01) == 0x00 l000000000040CF8C
// DataOut: bl ebx r12 r13 r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D169:
	r15_1033 = r14_1034
	rbp_1062 = DPB(rbp_681, 0x00000000, 0) (alias)
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CFCF:
	word64 rsp_751
	word64 rdi_752
	word64 rsi_753
	word64 rbx_758
	word32 r9d_760
	byte SCZO_761
	word64 rdx_762
	word32 r8d_763
	word64 rax_764
	byte SZO_766
	byte C_767
	byte Z_769
	word64 r15_770
	word32 ebp_771
	byte CZ_772
	word32 ecx_773
	word32 eax_774
	word32 r12d_775
	word32 edx_776
	word32 edi_777
	word32 r15d_778
	word16 ax_779
	byte al_780
	call mbstowcs (retsize: 8; depth: 88)
		uses: al_743,ax_742,bl_692,bLoc21,C_746,CZ_699,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_741,ebp_698,ebx_686,ecx_700,edi_704,edx_703,qwLoc08,qwLoc10,qwLoc18,qwLoc30_738,qwLoc38_30,qwLoc40_747,qwLoc48_28,r12_683,r12d_702,r13_682,r14_695,r15_736,r15d_737,r8d_690,r9d_687,rax_740,rbp_681,rbx_685,rcx_684,rdi_750,rdx_748,rsi_749,rsp_678,SCZO_708,SZO_744,Z_745
		defs: al_780,ax_779,bl_765,C_767,CZ_772,eax_774,ebp_771,ebx_759,ecx_773,edi_777,edx_776,r12_756,r12d_775,r13_755,r14_768,r15_770,r15d_778,r8d_763,r9d_760,rax_764,rbp_754,rbx_758,rcx_757,rdi_752,rdx_762,rsi_753,rsp_751,SCZO_761,SZO_766,Z_769
	branch rax_764 == 0x0000000000000000 l000000000040CE03
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040CFEC:
	word64 rbp_1049
	word64 qwLoc30_1060
	Mem788[rax_740 - 0x0000000000000004 + r15_770:word32] = 0x00000000
	word32 edi_789 = Mem788[rax_740:word32]
	branch edi_789 == 0x00000000 l000000000040D106
// DataOut: bl eax ebx r12 r13 r14 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D106:
	word64 rsp_1188
	word64 rdi_1189
	word64 rsi_1190
	word64 rbx_1195
	word32 r9d_1197
	byte SCZO_1198
	word64 rdx_1199
	word32 r8d_1200
	word64 rax_1201
	byte SZO_1203
	byte C_1204
	byte Z_1206
	word64 r15_1207
	word32 ebp_1208
	byte CZ_1209
	word32 ecx_1210
	word32 eax_1211
	word32 r12d_1212
	word32 edx_1213
	word32 edi_1214
	word32 r15d_1215
	word16 ax_1216
	byte al_1217
	call wcswidth (retsize: 8; depth: 88)
		uses: al_787,ax_786,bl_765,bLoc21,C_793,CZ_772,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_785,ebp_771,ebx_759,ecx_773,edi_789,edx_776,qwLoc08,qwLoc10,qwLoc18,qwLoc30_738,qwLoc38_30,qwLoc40_747,qwLoc48_28,r12_756,r12d_775,r13_755,r14_768,r15_770,r15d_778,r8d_763,r9d_760,rax_784,rbp_754,rbx_758,rcx_757,rdi_1187,rdx_762,rsi_1186,rsp_751,SCZO_761,SZO_791,Z_792
		defs: al_1217,ax_1216,bl_1202,C_1204,CZ_1209,eax_1211,ebp_1208,ebx_1196,ecx_1210,edi_1214,edx_1213,r12_1193,r12d_1212,r13_1192,r14_1205,r15_1207,r15d_1215,r8d_1200,r9d_1197,rax_1201,rbp_1191,rbx_1195,rcx_1194,rdi_1189,rdx_1199,rsi_1190,rsp_1188,SCZO_1198,SZO_1203,Z_1206
	r15_1033 = (int64) eax_1211
// DataOut: bl ebx r12 r13 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D004:
	byte bLoc21_1067 = 0x00
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D010:
	word64 rsp_1069
	word64 rdi_1070
	word64 rsi_1071
	word64 rbp_1072
	word64 r13_1073
	word64 r12_1074
	word64 rcx_1075
	word64 rbx_1076
	word32 ebx_1077
	word32 r9d_1078
	byte SCZO_1079
	word64 rdx_1080
	word32 r8d_1081
	word64 rax_1082
	byte bl_1083
	byte SZO_1084
	byte C_1085
	word64 r14_1086
	byte Z_1087
	word64 r15_1088
	word32 ebp_1089
	byte CZ_1090
	word32 ecx_1091
	word32 eax_1092
	word32 r12d_1093
	word32 edx_1094
	word32 edi_1095
	word32 r15d_1096
	word16 ax_1097
	byte al_1098
	call iswprint (retsize: 8; depth: 88)
		uses: al_787,ax_786,bl_765,bLoc21_1068,C_793,CZ_772,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_785,ebp_771,ebx_759,ecx_773,edi_789,edx_776,qwLoc08,qwLoc10,qwLoc18,qwLoc30_738,qwLoc38_30,qwLoc40_747,qwLoc48_28,r12_756,r12d_775,r13_755,r14_768,r15_1065,r15d_1066,r8d_763,r9d_760,rax_784,rbp_754,rbx_758,rcx_757,rdi_790,rdx_762,rsi_753,rsp_751,SCZO_761,SZO_791,Z_792
		defs: al_1098,ax_1097,bl_1083,C_1085,CZ_1090,eax_1092,ebp_1089,ebx_1077,ecx_1091,edi_1095,edx_1094,r12_1074,r12d_1093,r13_1073,r14_1086,r15_1088,r15d_1096,r8d_1081,r9d_1078,rax_1082,rbp_1072,rbx_1076,rcx_1075,rdi_1070,rdx_1080,rsi_1071,rsp_1069,SCZO_1079,SZO_1084,Z_1087
	branch eax_1092 != 0x00000000 l000000000040D025
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D019:
	Mem1184[rdi_1070:word32] = 0x0000FFFD
	bLoc21_1067 = 0x01
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D025:
	word32 edi_1105 = Mem788[rdi_1070:word32]
	branch edi_1105 != 0x00000000 l000000000040D010
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D030:
	word64 rsp_1112
	word64 rdi_1113
	word64 rsi_1114
	word64 rbx_1119
	word32 r9d_1121
	byte SCZO_1122
	word64 rdx_1123
	word32 r8d_1124
	word64 rax_1125
	byte SZO_1127
	byte C_1128
	byte Z_1130
	word64 r15_1131
	word32 ebp_1132
	byte CZ_1133
	word32 ecx_1134
	word32 eax_1135
	word32 r12d_1136
	word32 edx_1137
	word32 edi_1138
	word32 r15d_1139
	word16 ax_1140
	byte al_1141
	call wcswidth (retsize: 8; depth: 88)
		uses: al_1098,ax_1097,bl_1083,bLoc21_1102,C_1109,CZ_1090,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_1092,ebp_1089,ebx_1077,ecx_1091,edi_1105,edx_1094,qwLoc08,qwLoc10,qwLoc18,qwLoc30_738,qwLoc38_30,qwLoc40_747,qwLoc48_28,r12_1074,r12d_1093,r13_1073,r14_1086,r15_1103,r15d_1104,r8d_1081,r9d_1078,rax_1082,rbp_1072,rbx_1076,rcx_1075,rdi_1111,rdx_1080,rsi_1110,rsp_1069,SCZO_1079,SZO_1107,Z_1108
		defs: al_1141,ax_1140,bl_1126,C_1128,CZ_1133,eax_1135,ebp_1132,ebx_1120,ecx_1134,edi_1138,edx_1137,r12_1117,r12d_1136,r13_1116,r14_1129,r15_1131,r15d_1139,r8d_1124,r9d_1121,rax_1125,rbp_1115,rbx_1119,rcx_1118,rdi_1113,rdx_1123,rsi_1114,rsp_1112,SCZO_1122,SZO_1127,Z_1130
	r15_1033 = (int64) eax_1135
	branch bLoc21_1067 == 0x00 l000000000040D118
// DataOut: bl ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D118:
	rax_1053 = Mem788[r12_1047:word64]
	branch r15_1033 <=u rax_1053 l000000000040CF28
// DataOut: bl ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CF28:
	rbp_1062 = DPB(rbp_1049, 0x00000000, 0) (alias)
// DataOut: bl ebx r12 r13 r14 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D125:
	qwLoc30_1060 = rbp_1049 + 0x0000000000000001
// DataOut: bl ebx r12 r13 r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D04D:
	word64 rsp_1151
	word64 rdi_1152
	word64 rsi_1153
	word64 rbp_1154
	word64 rbx_1158
	word32 r9d_1160
	byte SCZO_1161
	word64 rdx_1162
	word32 r8d_1163
	word64 rax_1164
	byte SZO_1166
	byte C_1167
	byte Z_1169
	word32 ebp_1171
	byte CZ_1172
	word32 ecx_1173
	word32 eax_1174
	word32 r12d_1175
	word32 edx_1176
	word32 edi_1177
	word32 r15d_1178
	word16 ax_1179
	byte al_1180
	call wcstombs (retsize: 8; depth: 88)
		uses: al_1141,ax_1140,bl_1126,bLoc21_1102,C_1150,CZ_1133,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_1135,ebp_1132,ebx_1120,ecx_1134,edi_1148,edx_1147,qwLoc08,qwLoc10,qwLoc18,qwLoc30_738,qwLoc38_30,qwLoc40_747,qwLoc48_28,r12_1117,r12d_1136,r13_1116,r14_1129,r15_1144,r15d_1145,r8d_1124,r9d_1121,rax_1125,rbp_1115,rbx_1119,rcx_1118,rdi_1113,rdx_1123,rsi_1146,rsp_1112,SCZO_1142,SZO_1149,Z_1143
		defs: al_1180,ax_1179,bl_1165,C_1167,CZ_1172,eax_1174,ebp_1171,ebx_1159,ecx_1173,edi_1177,edx_1176,r12_1156,r12d_1175,r13_1155,r14_1168,r15_1170,r15d_1178,r8d_1163,r9d_1160,rax_1164,rbp_1154,rbx_1158,rcx_1157,rdi_1152,rdx_1162,rsi_1153,rsp_1151,SCZO_1161,SZO_1166,Z_1169
	qwLoc30_1060 = rax_1164 + 0x0000000000000001
// DataOut: bl ebx r12 r13 r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D064:
	word64 rax_820 = malloc(qwLoc30_1060)
	rbp_1062 = rax_820
	branch rax_820 == 0x0000000000000000 l000000000040D138
// DataOut: bl ebx r12 r13 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D138:
	branch (bl_1035 & 0x01) != 0x00 l000000000040CE08
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D141:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040D07A:
	word64 rax_826 = Mem788[r12_1047:word64]
	word32 edi_832 = Mem788[rax_740:word32]
	branch edi_832 == 0x00000000 l000000000040D173
// DataOut: al bl eax ebx r12 r13 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D173:
// DataOut: bl ebx r12 r13 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D092:
// DataOut: al bl eax ebx r12 r13 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0BA:
	word64 rsp_878
	word64 rdi_879
	word64 rsi_880
	word64 rbp_881
	word64 r13_882
	word64 r12_883
	word64 rcx_884
	word64 rbx_885
	word32 ebx_886
	word32 r9d_887
	byte SCZO_888
	word64 rdx_889
	word32 r8d_890
	word64 rax_891
	byte bl_892
	byte SZO_893
	byte C_894
	word64 r14_895
	byte Z_896
	word64 r15_897
	word32 ebp_898
	byte CZ_899
	word32 ecx_900
	word32 eax_901
	word32 r12d_902
	word32 edx_903
	word32 edi_904
	word32 r15d_905
	word16 ax_906
	byte al_907
	call wcwidth (retsize: 8; depth: 88)
		uses: al_831,ax_830,bl_801,bLoc21_794,C_877,CZ_807,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_829,ebp_825,ebx_804,ecx_806,edi_832,edx_809,qwLoc08,qwLoc10,qwLoc18,qwLoc30_795,qwLoc38_30,qwLoc40_747,qwLoc48_827,r12_814,r12d_798,r13_805,r14_873,r15_875,r15d_874,r8d_802,r9d_803,rax_828,rbp_824,rbx_816,rcx_813,rdi_819,rdx_808,rsi_817,rsp_818,SCZO_815,SZO_876,Z_834
		defs: al_907,ax_906,bl_892,C_894,CZ_899,eax_901,ebp_898,ebx_886,ecx_900,edi_904,edx_903,r12_883,r12d_902,r13_882,r14_895,r15_897,r15d_905,r8d_890,r9d_887,rax_891,rbp_881,rbx_885,rcx_884,rdi_879,rdx_889,rsi_880,rsp_878,SCZO_888,SZO_893,Z_896
	branch eax_901 != 0xFFFFFFFF l000000000040D0A0
	word64 rsp_910
	word64 rdi_911
	word64 rsi_912
	word64 rbp_913
	word64 r13_914
	word64 r12_915
	word64 rcx_916
	word64 rbx_917
	word32 ebx_918
	word32 r9d_919
	byte SCZO_920
	word64 rdx_921
	word32 r8d_922
	word64 rax_923
	byte bl_924
	byte SZO_925
	byte C_926
	word64 r14_927
	byte Z_928
	word64 r15_929
	word32 ebp_930
	byte CZ_931
	word32 ecx_932
	word32 eax_933
	word32 r12d_934
	word32 edx_935
	word32 edi_936
	word32 r15d_937
	word16 ax_938
	byte al_939
	call wcwidth (retsize: 8; depth: 88)
		uses: al_907,ax_906,bl_892,bLoc21_794,C_894,CZ_899,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_901,ebp_898,ebx_886,ecx_900,edi_904,edx_903,qwLoc08,qwLoc10,qwLoc18,qwLoc30_795,qwLoc38_30,qwLoc40_747,qwLoc48_827,r12_883,r12d_902,r13_882,r14_895,r15_897,r15d_905,r8d_890,r9d_887,rax_891,rbp_881,rbx_885,rcx_884,rdi_879,rdx_889,rsi_880,rsp_878,SCZO_908,SZO_893,Z_909
		defs: al_939,ax_938,bl_924,C_926,CZ_931,eax_933,ebp_930,ebx_918,ecx_932,edi_936,edx_935,r12_915,r12d_934,r13_914,r14_927,r15_929,r15d_937,r8d_922,r9d_919,rax_923,rbp_913,rbx_917,rcx_916,rdi_911,rdx_921,rsi_912,rsp_910,SCZO_920,SZO_925,Z_928
	branch eax_933 != 0xFFFFFFFF l000000000040D0A0
	word64 rsp_942
	word64 rdi_943
	word64 rsi_944
	word64 rbp_945
	word64 r13_946
	word64 r12_947
	word64 rcx_948
	word64 rbx_949
	word32 ebx_950
	word32 r9d_951
	byte SCZO_952
	word64 rdx_953
	word32 r8d_954
	word64 rax_955
	byte bl_956
	byte SZO_957
	byte C_958
	word64 r14_959
	byte Z_960
	word64 r15_961
	word32 ebp_962
	byte CZ_963
	word32 ecx_964
	word32 eax_965
	word32 r12d_966
	word32 edx_967
	word32 edi_968
	word32 r15d_969
	word16 ax_970
	byte al_971
	call wcwidth (retsize: 8; depth: 88)
		uses: al_939,ax_938,bl_924,bLoc21_794,C_926,CZ_931,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_933,ebp_930,ebx_918,ecx_932,edi_936,edx_935,qwLoc08,qwLoc10,qwLoc18,qwLoc30_795,qwLoc38_30,qwLoc40_747,qwLoc48_827,r12_915,r12d_934,r13_914,r14_927,r15_929,r15d_937,r8d_922,r9d_919,rax_923,rbp_913,rbx_917,rcx_916,rdi_911,rdx_921,rsi_912,rsp_910,SCZO_940,SZO_925,Z_941
		defs: al_971,ax_970,bl_956,C_958,CZ_963,eax_965,ebp_962,ebx_950,ecx_964,edi_968,edx_967,r12_947,r12d_966,r13_946,r14_959,r15_961,r15d_969,r8d_954,r9d_951,rax_955,rbp_945,rbx_949,rcx_948,rdi_943,rdx_953,rsi_944,rsp_942,SCZO_952,SZO_957,Z_960
	branch eax_965 != 0xFFFFFFFF l000000000040D0A0
// DataOut: al bl ebx r12 r13 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> eax:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0A0:
	branch rax_826 <u DPB(rax_955, (int16) al_971, 0) + r15_961 l000000000040D0E0
// DataOut: al bl eax ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> eax:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0C4:
	Mem992[rsi_944:word32] = 0x0000FFFD
	word64 rax_993 = DPB(rax_955, 0x00000001, 0) + r15_961
	branch rax_826 >=u rax_993 l000000000040D0AC
	Mem998[rsi_944:word32] = 0x0000FFFD
	word64 rax_999 = DPB(rax_993, 0x00000001, 0) + r15_961
	branch rax_826 >=u rax_999 l000000000040D0AC
	Mem1004[rsi_944:word32] = 0x0000FFFD
	branch rax_826 >=u DPB(rax_999, 0x00000001, 0) + r15_961 l000000000040D0AC
// DataOut: al bl eax ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> eax:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0AC:
	branch Mem788[rsi_944:word32] == 0x00000000 l000000000040D0E0
	branch Mem788[rsi_944:word32] == 0x00000000 l000000000040D0E0
// DataOut: al bl eax ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> eax:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0DA:
// DataOut: bl ebx r12 r13 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> eax:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D0E0:
	Mem840[rax_740:word32] = 0x00000000
	word64 rsp_841
	word64 rdi_842
	word64 rsi_843
	word64 rbx_848
	word32 r9d_850
	byte SCZO_851
	word64 rdx_852
	word32 r8d_853
	word64 rax_854
	byte SZO_856
	byte C_857
	word64 r14_858
	byte Z_859
	word32 ebp_861
	byte CZ_862
	word32 ecx_863
	word32 eax_864
	word32 r12d_865
	word32 edx_866
	word32 edi_867
	word32 r15d_868
	word16 ax_869
	byte al_870
	call wcstombs (retsize: 8; depth: 88)
		uses: al_831,ax_830,bl_801,bLoc21_794,C_835,CZ_807,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_829,ebp_825,ebx_804,ecx_806,edi_832,edx_809,qwLoc08,qwLoc10,qwLoc18,qwLoc30_795,qwLoc38_30,qwLoc40_747,qwLoc48_827,r12_814,r12d_798,r13_805,r14_800,r15_799,r15d_796,r8d_802,r9d_803,rax_828,rbp_836,rbx_816,rcx_813,rdi_839,rdx_837,rsi_838,rsp_818,SCZO_815,SZO_833,Z_834
		defs: al_870,ax_869,bl_855,C_857,CZ_862,eax_864,ebp_861,ebx_849,ecx_863,edi_867,edx_866,r12_846,r12d_865,r13_845,r14_858,r15_860,r15d_868,r8d_853,r9d_850,rax_854,rbp_844,rbx_848,rcx_847,rdi_842,rdx_852,rsi_843,rsp_841,SCZO_851,SZO_856,Z_859
	r14_1034 = rax_854
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> eax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CF83:
	branch (bl_1035 & 0x01) != 0x00 l000000000040D14D
// DataOut: bl ebx r12 r13 r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0)

l000000000040D14D:
	r15_1033 = r14_1034
	qwLoc40_104 = 0x0000000000000000
	rbp_1062 = DPB(rbp_681, 0x00000000, 0) (alias)
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CF8C:
	qwLoc40_104 = 0x0000000000000000
	rbp_1062 = DPB(rbp_681, 0x00000000, 0) (alias)
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CDFA:
	qwLoc40_104 = 0x0000000000000000
// DataOut: bl ebx r12 r13 r14 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CE03:
	r15_1033 = rbp_42
	rbp_1062 = DPB(rbp_42, 0x00000000, 0) (alias)
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CE08:
	rax_1053 = Mem0[r12_1047:word64]
	branch r15_1033 <=u rax_1053 l000000000040CF2A
// DataOut: bl ebx r12 r13 r14 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> eax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CF2A:
	branch r15_1033 >=u rax_1053 l000000000040D180
// DataOut: bl ebx r12 r13 r14 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> eax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D180:
	rax_1053 = r15_1033
	rcx_120 = DPB(rcx, 0x00000000, 0) (alias)
// DataOut: bl ebx r12 r13 r14 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> eax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CF33:
	Mem519[r12_1047:word64] = r15_1033
	rcx_120 = rax_1053 - r15_1033
	rax_123 = DPB(r15_1033, r8d, 0) (alias)
	branch r8d != 0x00000000 l000000000040CE2A
// DataOut: bl eax ebx r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> eax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CE15:
	r14_1034 = rax_1053
	rcx_120 = DPB(rcx, 0x00000000, 0) (alias)
// DataOut: bl ebx r12 r13 r14 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> eax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CE1A:
	Mem473[r12_1047:word64] = rax_1053
	rax_123 = DPB(rax_1053, r8d, 0) (alias)
	branch r8d == 0x00000000 l000000000040CF4C
// DataOut: bl eax ebx r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:0x00000000 rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> eax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CF4C:
	rcx_120 = DPB(rcx_120, 0x00000000, 0) (alias)
// DataOut: bl ebx r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:0x00000000 eax:r8d rcx:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CE2A:
	branch r8d == 0x00000001 l000000000040CE3E
// DataOut: bl ebx r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:0x00000000 eax:r8d rcx:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CE32:
	rcx_120 = DPB(rcx_120, 0x00000000, 0) + (rcx_120 >>u 0x0000000000000001)
// DataOut: bl ebx r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:0x00000000 eax:r8d rcx:<invalid> r12d:0x00000000 rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CE3E:
	word64 rax_130 = DPB(rax_123, 0x00000000, 0)
	branch (bl_1035 & 0x04) == 0x00 l000000000040CE47
// DataOut: ebx r12 r13 r14 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:r8d rcx:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CE43_1:
	rcx_120 = rax_130
// DataOut: ebx r12 r13 r14 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:0x00000000 rcx:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CE47:
	branch (ebx_1038 & 0x00000008) == 0x00000000 l000000000040CE4E
// DataOut: r12 r13 r14 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:0x00000000 rcx:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CE4A_2:
// DataOut: r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:r9d & 0x00000008 rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:0x00000000 rcx:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CE4E:
	branch rdx == 0x0000000000000000 l000000000040CEF9
// DataOut: r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:r9d & 0x00000008 rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:0x00000000 rcx:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64) Local -0040(64)

l000000000040CE5A:
	word64 rdx_186 = rcx_120 - 0x0000000000000001
	word64 rbx_188 = r13_1039 - 0x0000000000000001 + rdx
	branch rcx_120 == 0x0000000000000000 l000000000040CE97
// DataOut: r12 r13 r14 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:r9d & 0x00000008 rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:0x00000000 rcx:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CE6D:
	branch r13_1039 >=u rbx_188 l000000000040CE97
// DataOut: r12 r13 r14 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:<invalid> rax:rdx r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CE72:
	word64 rax_337 = DPB(rdx, 0x00000000, 0)
// DataOut: r12 r13 r14 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:<invalid> rax:rdx r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CE89:
	Mem350[rbp_1062 - 0x0000000000000001:byte] = 0x20
	word64 r13_347 = r13_1039 + 0x0000000000000001
	branch rdx_186 != rax_337 l000000000040CE80
	Mem354[rbp_1062 - 0x0000000000000001:byte] = 0x20
	r13_1039 = r13_347 + 0x0000000000000001
	branch rdx_186 != rax_337 l000000000040CE80
// DataOut: r12 r13 r14 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CE80:
	rax_337 = rax_337 + 0x0000000000000001
	branch r13_347 + 0x0000000000000001 == rbx_188 l000000000040CE97
// DataOut: r12 r13 r14 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CE97:
	Mem201[rbp_1062:byte] = 0x00
	branch rbx_188 - r13_1039 <=u r14_1034 l000000000040CEB6
	Mem208[rbp_1062:byte] = 0x00
	word64 rdx_209 = rbx_188 - r13_1039
	branch rdx_209 <=u r14_1034 l000000000040CEB6
// DataOut: r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64) Local -0040(64)

l000000000040CEB2_1:
// DataOut: r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64) Local -0040(64)

l000000000040CEB2_1:
// DataOut: r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64) Local -0040(64)

l000000000040CEB6:
	word64 rsp_214
	word64 rdi_215
	word64 rsi_216
	word64 rbp_217
	word64 r13_218
	word64 r12_219
	word64 rcx_220
	word64 rbx_221
	word32 ebx_222
	word32 r9d_223
	byte SCZO_224
	word64 rdx_225
	word32 r8d_226
	word64 rax_227
	byte bl_228
	byte SZO_229
	byte C_230
	word64 r14_231
	byte Z_232
	word64 r15_233
	word32 ebp_234
	byte CZ_235
	word32 ecx_236
	word32 eax_237
	word32 r12d_238
	word32 edx_239
	word32 edi_240
	word32 r15d_241
	word16 ax_242
	byte al_243
	call mempcpy (retsize: 8; depth: 88)
		uses: al_196,ax_195,bl_190,bLoc21_101,C_193,CZ_213,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_194,ebp_108,ebx_189,ecx_136,edi_106,edx_187,qwLoc08,qwLoc10,qwLoc18,qwLoc30_102,qwLoc38_211,qwLoc40_104,qwLoc48_103,r12_143,r12d_142,r13_191,r14_110,r15_109,r15d_105,r8d_112,r9d_113,rax_198,rbp_125,rbx_188,rcx_137,rdi_210,rdx_209,rsi_207,rsp_128,SCZO_212,SZO_192,Z_197
		defs: al_243,ax_242,bl_228,C_230,CZ_235,eax_237,ebp_234,ebx_222,ecx_236,edi_240,edx_239,r12_219,r12d_238,r13_218,r14_231,r15_233,r15d_241,r8d_226,r9d_223,rax_227,rbp_217,rbx_221,rcx_220,rdi_215,rdx_225,rsi_216,rsp_214,SCZO_224,SZO_229,Z_232
	branch r12_219 == 0x0000000000000000 l000000000040CEF6
	word64 rsp_250
	word64 rdi_251
	word64 rsi_252
	word64 r13_254
	word64 r12_255
	word64 rcx_256
	word64 rbx_257
	word32 ebx_258
	word32 r9d_259
	byte SCZO_260
	word64 rdx_261
	word32 r8d_262
	word64 rax_263
	byte bl_264
	byte SZO_265
	byte C_266
	word64 r14_267
	byte Z_268
	word64 r15_269
	word32 ebp_270
	byte CZ_271
	word32 ecx_272
	word32 eax_273
	word32 r12d_274
	word32 edx_275
	word32 edi_276
	word32 r15d_277
	word16 ax_278
	byte al_279
	call mempcpy (retsize: 8; depth: 88)
		uses: al_243,ax_242,bl_228,bLoc21_101,C_246,CZ_235,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_237,ebp_234,ebx_222,ecx_236,edi_240,edx_239,qwLoc08,qwLoc10,qwLoc18,qwLoc30_102,qwLoc38_211,qwLoc40_104,qwLoc48_103,r12_219,r12d_238,r13_218,r14_231,r15_233,r15d_241,r8d_226,r9d_223,rax_227,rbp_217,rbx_221,rcx_249,rdi_215,rdx_247,rsi_248,rsp_214,SCZO_224,SZO_244,Z_245
		defs: al_279,ax_278,bl_264,C_266,CZ_271,eax_273,ebp_270,ebx_258,ecx_272,edi_276,edx_275,r12_255,r12d_274,r13_254,r14_267,r15_269,r15d_277,r8d_262,r9d_259,rax_263,rbp_253,rbx_257,rcx_256,rdi_251,rdx_261,rsi_252,rsp_250,SCZO_260,SZO_265,Z_268
	word64 rdx_283 = rax_263
	branch r12_255 == 0x0000000000000000 l000000000040CEF6
// DataOut: r12 r14 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CECD:
	branch rbx_257 <=u rax_263 l000000000040CEF6
	branch rbx_257 <=u rax_263 l000000000040CEF6
// DataOut: r12 r14 rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CED2:
	word64 rax_307 = DPB(rax_263, 0x00000000, 0)
// DataOut: r12 r14 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEE9:
	word64 rdx_317 = rdx_283 + 0x0000000000000001
	Mem320[rdx_317 - 0x0000000000000001:byte] = 0x20
	branch r12_255 - 0x0000000000000001 != rax_307 l000000000040CEE0
	Mem325[rdx_317:byte] = 0x20
	rdx_283 = rdx_317 + 0x0000000000000001
	branch r12_255 - 0x0000000000000001 != rax_307 l000000000040CEE0
// DataOut: r12 r14 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEE0:
	rax_307 = rax_307 + 0x0000000000000001
	branch rdx_317 + 0x0000000000000001 == rbx_257 l000000000040CEF6
// DataOut: r12 r14 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEF6:
	Mem299[rdx_283:byte] = 0x00
	Mem300[rdx_283:byte] = 0x00
// DataOut: r12 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEF9:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEFF:
	free(qwLoc40_104)
	free(rbp_1062)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> ebp:0x00000000 r15:<invalid> rdi:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040CDC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> ebp:<invalid> rdi:<invalid> rbx:rbx r15:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word32 fn000000000040D240(word32 edx, word64 rsi, word64 rdi, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi rsi
// LiveOut: eax ebp ebx esp r12 r13 r13d r14 r14b r14d r15 r15b r15d rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D240_entry:
	def fp
	def rdi
	def edx
	def r15
	def rsi
	def rbp
	def rbx
	def fs
	def Mem0
	def qwLoc18
	def qwLoc10
	def qwLoc08
	def ebxOut
	def rspOut
	def rbpOut
	def rsiOut
	def r12Out
	def r13Out
	def r14Out
	def r15Out
	def qwLoc30
	def dwLoc34
// DataOut: ebx edx fs r11 r11d r12 r14 r14b r14d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0034(32)

l000000000040D240:
	rsp_1 = fp
	rsp_2 = fp - 0x0000000000000004
	dwLoc04_4 = rdi
	r15d_6 = edx
	r15_8 = DPB(r15, r15d_6, 0) (alias)
	rsp_9 = fp - 0x0000000000000008
	dwLoc08_11 = rsi
	rsp_12 = fp - 0x000000000000000C
	dwLoc0C_14 = rbp
	r13_15 = rdi + rsi
	v9_16 = fp - 0x000000000000000C
	rsp_17 = fp - 0x0000000000000010
	dwLoc10_18 = fp - 0x000000000000000C
	rsp_19 = fp - 0x0000000000000014
	dwLoc14_20 = rbp
	rbp_21 = rdi
	rsp_22 = fp - 0x0000000000000018
	dwLoc18_24 = rbx
	rsp_25 = fp - 0x0000000000000040
	rax_28 = Mem0[fs:0x00000028:word64]
	qwLoc28_29 = rax_28
	eax_30 = 0x00000000
	rax_31 = DPB(rax_28, eax_30, 0) (alias)
	al_32 = (byte) eax_30 (alias)
	SZO_33 = cond(0x00000000)
	C_34 = false
	call __ctype_get_mb_cur_max (retsize: 8; depth: 72)
		uses: al_32,C_34,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,eax_30,edx,fs,qwLoc28_29,r13_15,r15_8,r15d_6,rax_31,rbp_21,rbx,rdi,rsi,rsp_25,SZO_33
		defs: al_52,C_48,CZ_49,dh_60,eax_46,ebx_61,edi_57,edx_37,esi_59,fs_44,r12_62,r12d_51,r13_41,r14_63,r14d_50,r15_64,r15d_38,rax_45,rbp_40,rbx_42,rcx_55,rdi_36,rdx_54,rsi_39,rsp_35,S_58,SCZO_43,SO_53,SZO_47,Z_56
	SCZO_65 = cond(rax_45 - 0x0000000000000001)
	CZ_66 = SCZO_65 (alias)
	branch rax_45 <=u 0x0000000000000001 l000000000040D370
// DataOut: fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D370:
	SCZO_694 = cond(rbp_40 - r13_41)
	C_695 = SCZO_694 (alias)
	branch rbp_40 >=u r13_41 l000000000040D406
// DataOut: fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D379:
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: al_52,C_695,CZ_66,dh_60,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,dwLoc34,eax_46,ebx_61,edi_57,edx_37,esi_59,fs_44,qwLoc08,qwLoc10,qwLoc18,qwLoc28_29,qwLoc30,r12_62,r12d_51,r13_41,r14_63,r14d_50,r15_64,r15d_38,rax_45,rbp_40,rbx_42,rcx_55,rdi_36,rdx_54,rsi_39,rsp_35,S_58,SCZO_694,SO_53,SZO_47,Z_56
		defs: al_713,C_709,CZ_710,dh_721,eax_707,ebx_722,edi_718,edx_698,esi_720,fs_705,r12_723,r12d_712,r13_702,r14_724,r14d_711,r15_725,r15d_699,rax_706,rbp_701,rbx_703,rcx_716,rdi_697,rdx_715,rsi_700,rsp_696,S_719,SCZO_704,SO_714,SZO_708,Z_717
	esi_726 = r15d_699
	rcx_727 = Mem0[rax_706:word64]
	eax_728 = 0x00000000
	rax_729 = DPB(rax_706, eax_728, 0) (alias)
	al_730 = (byte) eax_728 (alias)
	esi_731 = esi_726 & 0x00000002
	rsi_732 = DPB(rsi_700, esi_731, 0) (alias)
	SZO_733 = cond(esi_731)
	C_734 = false
// DataOut: eax esi fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D398:
	rdx_735 = PHI(rdx_715, rdx_752)
	eax_736 = PHI(eax_728, eax_760)
	rax_737 = PHI(rax_729, rax_761)
	al_738 = PHI(al_730, al_762)
	SCZO_739 = PHI(SCZO_704, SCZO_763)
	rbp_740 = PHI(rbp_701, rbp_748)
	rbp_741 = rbp_740 + 0x0000000000000001
	edx_742 = (word32) Mem0[rbp_741 - 0x0000000000000001:byte]
	rdx_743 = DPB(rdx_735, edx_742, 0) (alias)
	edx_744 = (word32) Mem0[rcx_727 + rdx_743 * 0x0002:word16]
	dh_745 = SLICE(edx_744, byte, 8) (alias)
	SZO_746 = cond(dh_745 & 0x40)
	Z_747 = SZO_746 (alias)
	branch (dh_745 & 0x40) != 0x00 l000000000040D3B2
	rbp_748 = rbp_741 + 0x0000000000000001
	edx_749 = (word32) Mem0[rbp_748 - 0x0000000000000001:byte]
	rdx_750 = DPB(rdx_743, edx_749, 0) (alias)
	edx_751 = (word32) Mem0[rcx_727 + rdx_750 * 0x0002:word16]
	rdx_752 = DPB(rdx_750, edx_751, 0) (alias)
	dh_753 = SLICE(edx_751, byte, 8) (alias)
	SZO_754 = cond(dh_753 & 0x40)
	Z_755 = SZO_754 (alias)
	C_756 = false
	branch (dh_753 & 0x40) != 0x00 l000000000040D3B2
// DataOut: eax edx esi fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3A9:
	SZO_776 = cond(esi_731 & esi_731)
	Z_777 = SZO_776 (alias)
	branch (esi_731 & esi_731) != 0x00000000 l000000000040D369
	SZO_778 = cond(esi_731 & esi_731)
	Z_779 = SZO_778 (alias)
	C_780 = false
	branch (esi_731 & esi_731) != 0x00000000 l000000000040D369
// DataOut: eax edx esi fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3AD:
	edx_781 = edx_751 & 0x00000002
	SZO_782 = cond(edx_781)
	Z_783 = SZO_782 (alias)
	branch edx_781 != 0x00000000 l000000000040D393
	edx_784 = edx_781 & 0x00000002
	SZO_785 = cond(edx_784)
	Z_786 = SZO_785 (alias)
	C_787 = false
	branch edx_784 != 0x00000000 l000000000040D393
// DataOut: eax esi fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3B2:
	edx_765 = PHI(edx_751, edx_784)
	SZO_766 = PHI(SZO_754, SZO_785)
	C_767 = PHI(C_756, C_787)
	SCZO_768 = cond(eax_736 - 0x7FFFFFFF)
	Z_769 = SCZO_768 (alias)
	branch eax_736 != 0x7FFFFFFF l000000000040D390
	SCZO_770 = cond(eax_736 - 0x7FFFFFFF)
	Z_771 = SCZO_770 (alias)
	branch eax_736 != 0x7FFFFFFF l000000000040D390
// DataOut: eax esi fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D390:
	eax_772 = eax_736 + 0x00000001
	rax_773 = DPB(rax_737, eax_772, 0) (alias)
	al_774 = (byte) eax_772 (alias)
	SCZO_775 = cond(eax_772)
// DataOut: eax esi fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D393:
	edx_757 = PHI(edx_784, edx_765)
	SZO_758 = PHI(SZO_785, SZO_766)
	C_759 = PHI(C_787, C_767)
	eax_760 = PHI(eax_736, eax_772)
	rax_761 = PHI(rax_737, rax_773)
	al_762 = PHI(al_738, al_774)
	SCZO_763 = cond(rbp_748 - r13_702)
	Z_764 = SCZO_763 (alias)
	branch rbp_748 == r13_702 l000000000040D3C5
// DataOut: eax esi fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3B9:
// DataOut: fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D277:
	SCZO_208 = cond(rbp_40 - r13_41)
	C_209 = SCZO_208 (alias)
	branch rbp_40 >=u r13_41 l000000000040D406
// DataOut: fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D406:
	SCZO_201 = PHI(SCZO_208, SCZO_694)
	eax_202 = 0x00000000
	rax_203 = DPB(rax_45, eax_202, 0) (alias)
	al_204 = (byte) eax_202 (alias)
	SZO_205 = cond(0x00000000)
	C_206 = false
// DataOut: eax fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D280:
	r14d_210 = r15d_38
	r12d_211 = 0x00000000
	r12_212 = DPB(r12_62, r12d_211, 0) (alias)
	r15d_213 = r15d_38 & 0x00000001
	r15_214 = DPB(r15_64, r15d_213, 0) (alias)
	r14d_215 = r14d_210 & 0x00000002
	r14_216 = DPB(r14_63, r14d_215, 0) (alias)
	SZO_217 = cond(r14d_215)
	C_218 = false
// DataOut: fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2AC:
	qwLoc30_219 = PHI(qwLoc30, qwLoc30_287, qwLoc30_360)
	dh_220 = PHI(dh_60, dh_288, dh_434)
	S_221 = PHI(S_58, S_289, S_432)
	edi_222 = PHI(edi_57, edi_290, edi_431)
	rcx_223 = PHI(rcx_55, rcx_291, rcx_429)
	rdx_224 = PHI(rdx_54, rdx_292, rdx_428)
	SO_225 = PHI(SO_53, SO_293, SO_427)
	r12d_226 = PHI(r12d_211, r12d_294, r12d_663)
	r14d_227 = PHI(r14d_215, r14d_295, r14d_424)
	fs_228 = PHI(fs_44, fs_296, fs_418)
	r15d_229 = PHI(r15d_213, r15d_297, r15d_412)
	edx_230 = PHI(edx_37, edx_298, edx_411)
	CZ_231 = PHI(CZ_66, CZ_317, CZ_666)
	Z_232 = PHI(Z_56, Z_300, Z_660)
	C_233 = PHI(C_218, C_301, C_661)
	r12_234 = PHI(r12_212, r12_302, r12_664)
	r13_235 = PHI(r13_41, r13_303, r13_415)
	r14_236 = PHI(r14_216, r14_304, r14_437)
	r15_237 = PHI(r15_214, r15_305, r15_438)
	rax_238 = PHI(rax_45, rax_307, rax_419)
	rbx_239 = PHI(rbx_42, rbx_309, rbx_441)
	ebx_240 = PHI(ebx_61, ebx_310, ebx_442)
	rbp_241 = PHI(rbp_40, rbp_311, rbp_662)
	rsi_242 = PHI(rsi_39, rsi_312, rsi_413)
	esi_243 = PHI(esi_59, esi_313, esi_433)
	rdi_244 = PHI(rdi_36, rdi_314, rdi_410)
	rsp_245 = PHI(rsp_35, rsp_315, rsp_409)
	eax_246 = (word32) Mem0[rbp_241 + 0x0000000000000000:byte]
	al_247 = (byte) eax_246 (alias)
	SCZO_248 = cond(al_247 - 0x3F)
	SZO_249 = SCZO_248 (alias)
	branch al_247 <= 0x3F l000000000040D290
	eax_250 = (word32) Mem0[rbp_241 + 0x0000000000000000:byte]
	rax_251 = DPB(rax_238, eax_250, 0) (alias)
	al_252 = (byte) eax_250 (alias)
	SCZO_253 = cond(al_252 - 0x3F)
	SZO_254 = SCZO_253 (alias)
	branch al_252 <= 0x3F l000000000040D290
// DataOut: al eax fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D290:
	SCZO_687 = cond(al_252 - 0x25)
	SO_688 = SCZO_687 (alias)
	branch al_252 >= 0x25 l000000000040D29B
// DataOut: al eax fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D294:
	eax_689 = eax_250 - 0x00000020
	rax_690 = DPB(rax_251, eax_689, 0) (alias)
	al_691 = (byte) eax_689 (alias)
	SCZO_692 = cond(al_691 - 0x03)
	CZ_693 = SCZO_692 (alias)
	branch al_691 >u 0x03 l000000000040D2C3
// DataOut: fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2B4:
	SCZO_670 = cond(al_252 - 0x41)
	SO_671 = SCZO_670 (alias)
	branch al_252 < 0x41 l000000000040D2C3
	SCZO_672 = cond(al_252 - 0x41)
	SO_673 = SCZO_672 (alias)
	branch al_252 < 0x41 l000000000040D2C3
// DataOut: al eax fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2B8:
	SCZO_674 = cond(al_252 - 0x5F)
	SZO_675 = SCZO_674 (alias)
	branch al_252 <= 0x5F l000000000040D29B
	SCZO_676 = cond(al_252 - 0x5F)
	SZO_677 = SCZO_676 (alias)
	branch al_252 <= 0x5F l000000000040D29B
// DataOut: al eax fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2BC:
	eax_678 = eax_250 - 0x00000061
	al_679 = (byte) eax_678 (alias)
	SCZO_680 = cond(al_679 - 0x1D)
	CZ_681 = SCZO_680 (alias)
	branch al_679 <=u 0x1D l000000000040D29B
	eax_682 = eax_678 - 0x00000061
	rax_683 = DPB(rax_251, eax_682, 0) (alias)
	al_684 = (byte) eax_682 (alias)
	SCZO_685 = cond(al_684 - 0x1D)
	CZ_686 = SCZO_685 (alias)
	branch al_684 <=u 0x1D l000000000040D29B
// DataOut: fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2C3:
	SO_352 = PHI(SO_673, SO_673, SO_688)
	CZ_353 = PHI(CZ_231, CZ_686, CZ_693)
	SZO_354 = PHI(SZO_254, SZO_677, SZO_254)
	eax_355 = PHI(eax_250, eax_682, eax_689)
	rax_356 = PHI(rax_251, rax_683, rax_690)
	al_357 = PHI(al_252, al_684, al_691)
	SCZO_358 = PHI(SCZO_672, SCZO_685, SCZO_692)
	qwLoc30_359 = 0x0000000000000000
	qwLoc30_360 = 0x0000000000000000
// DataOut: fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2F4:
	r13_361 = PHI(r13_235, r13_539)
	rbp_362 = PHI(rbp_241, rbp_538)
	rdx_363 = r13_361
	rcx_364 = fp - 0x0000000000000030
	rdi_365 = fp - 0x0000000000000034
	rdx_366 = rdx_363 - rbp_362
	SCZO_367 = cond(rdx_366)
	rsi_368 = rbp_362
	call mbrtowc (retsize: 8; depth: 72)
		uses: al_357,C_233,CZ_353,dh_220,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,eax_355,ebx_240,edi_222,edx_230,esi_243,fs_228,qwLoc08,qwLoc10,qwLoc18,qwLoc28_29,qwLoc30_360,r12_234,r12d_226,r13_361,r14_236,r14d_227,r15_237,r15d_229,rax_356,rbp_362,rbx_239,rcx_364,rdi_365,rdx_366,rsi_368,rsp_245,S_221,SCZO_367,SO_352,SZO_354,Z_232
		defs: al_386,C_382,CZ_383,dh_394,eax_380,ebx_395,edi_391,edx_371,esi_393,fs_378,r12_396,r12d_385,r13_375,r14_397,r14d_384,r15_398,r15d_372,rax_379,rbp_374,rbx_376,rcx_389,rdi_370,rdx_388,rsi_373,rsp_369,S_392,SCZO_377,SO_387,SZO_381,Z_390
	SCZO_399 = cond(rax_379 - 0xFFFFFFFFFFFFFFFF)
	Z_400 = SCZO_399 (alias)
	rbx_401 = rax_379
	branch rax_379 == 0xFFFFFFFFFFFFFFFF l000000000040D360
	rdx_402 = r13_375
	rcx_403 = fp - 0x0000000000000030
	rdi_404 = fp - 0x0000000000000034
	edi_405 = (word32) rdi_404 (alias)
	rdx_406 = rdx_402 - rbp_374
	SCZO_407 = cond(rdx_406)
	rsi_408 = rbp_374
	call mbrtowc (retsize: 8; depth: 72)
		uses: al_386,C_382,CZ_383,dh_394,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,eax_380,ebx_395,edi_405,edx_371,esi_393,fs_378,qwLoc08,qwLoc10,qwLoc18,qwLoc28_29,qwLoc30_360,r12_396,r12d_385,r13_375,r14_397,r14d_384,r15_398,r15d_372,rax_379,rbp_374,rbx_401,rcx_403,rdi_404,rdx_406,rsi_408,rsp_369,S_392,SCZO_407,SO_387,SZO_381,Z_400
		defs: al_426,C_422,CZ_423,dh_434,eax_420,ebx_435,edi_431,edx_411,esi_433,fs_418,r12_436,r12d_425,r13_415,r14_437,r14d_424,r15_438,r15d_412,rax_419,rbp_414,rbx_416,rcx_429,rdi_410,rdx_428,rsi_413,rsp_409,S_432,SCZO_417,SO_427,SZO_421,Z_430
	SCZO_439 = cond(rax_419 - 0xFFFFFFFFFFFFFFFF)
	Z_440 = SCZO_439 (alias)
	rbx_441 = rax_419
	ebx_442 = (word32) rbx_441 (alias)
	branch rax_419 == 0xFFFFFFFFFFFFFFFF l000000000040D360
// DataOut: fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D360:
	SZO_667 = cond(r15d_412 & r15d_412)
	Z_668 = SZO_667 (alias)
	C_669 = false
	branch (r15d_412 & r15d_412) == 0x00000000 l000000000040D29B
// DataOut: fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D29B:
	qwLoc30_318 = PHI(qwLoc30_219, qwLoc30_219, qwLoc30_219, qwLoc30_219, qwLoc30_360)
	dh_319 = PHI(dh_220, dh_220, dh_220, dh_220, dh_434)
	S_320 = PHI(S_221, S_221, S_221, S_221, S_432)
	edi_321 = PHI(edi_222, edi_222, edi_222, edi_222, edi_431)
	rcx_322 = PHI(rcx_223, rcx_223, rcx_223, rcx_223, rcx_429)
	rdx_323 = PHI(rdx_224, rdx_224, rdx_224, rdx_224, rdx_428)
	SO_324 = PHI(SO_673, SO_673, SO_688, SO_688, SO_427)
	r12d_325 = PHI(r12d_226, r12d_226, r12d_226, r12d_226, r12d_425)
	r14d_326 = PHI(r14d_227, r14d_227, r14d_227, r14d_227, r14d_424)
	fs_327 = PHI(fs_228, fs_228, fs_228, fs_228, fs_418)
	r15d_328 = PHI(r15d_229, r15d_229, r15d_229, r15d_229, r15d_412)
	edx_329 = PHI(edx_230, edx_230, edx_230, edx_230, edx_411)
	CZ_330 = PHI(CZ_231, CZ_686, CZ_231, CZ_693, CZ_423)
	SZO_331 = PHI(SZO_677, SZO_677, SZO_254, SZO_254, SZO_667)
	Z_332 = PHI(Z_232, Z_232, Z_232, Z_232, Z_668)
	C_333 = PHI(C_233, C_233, C_233, C_233, C_669)
	r12_334 = PHI(r12_234, r12_234, r12_234, r12_234, r12_436)
	r13_335 = PHI(r13_235, r13_235, r13_235, r13_235, r13_415)
	r14_336 = PHI(r14_236, r14_236, r14_236, r14_236, r14_437)
	r15_337 = PHI(r15_237, r15_237, r15_237, r15_237, r15_438)
	eax_338 = PHI(eax_250, eax_682, eax_250, eax_689, eax_420)
	rax_339 = PHI(rax_251, rax_683, rax_251, rax_690, rax_419)
	al_340 = PHI(al_252, al_684, al_252, al_691, al_426)
	rbx_341 = PHI(rbx_239, rbx_239, rbx_239, rbx_239, rbx_441)
	ebx_342 = PHI(ebx_240, ebx_240, ebx_240, ebx_240, ebx_442)
	rbp_343 = PHI(rbp_241, rbp_241, rbp_241, rbp_241, rbp_414)
	rsi_344 = PHI(rsi_242, rsi_242, rsi_242, rsi_242, rsi_413)
	esi_345 = PHI(esi_243, esi_243, esi_243, esi_243, esi_433)
	rdi_346 = PHI(rdi_244, rdi_244, rdi_244, rdi_244, rdi_410)
	rsp_347 = PHI(rsp_245, rsp_245, rsp_245, rsp_245, rsp_409)
	rbp_348 = rbp_343 + 0x0000000000000001
	r12d_349 = r12d_325 + 0x00000001
	r12_350 = DPB(r12_334, r12d_349, 0) (alias)
	SCZO_351 = cond(r12d_349)
// DataOut: fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D315:
	SCZO_443 = cond(rax_419 - 0xFFFFFFFFFFFFFFFE)
	Z_444 = SCZO_443 (alias)
	branch rax_419 == 0xFFFFFFFFFFFFFFFE l000000000040D3E8
	SCZO_445 = cond(rax_419 - 0xFFFFFFFFFFFFFFFE)
	Z_446 = SCZO_445 (alias)
	branch rax_419 == 0xFFFFFFFFFFFFFFFE l000000000040D3E8
// DataOut: fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D3E8:
	SZO_659 = cond(r15d_412 & r15d_412)
	Z_660 = SZO_659 (alias)
	C_661 = false
	branch (r15d_412 & r15d_412) != 0x00000000 l000000000040D369
// DataOut: fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D3F1:
	rbp_662 = r13_415
	r12d_663 = r12d_425 + 0x00000001
	r12_664 = DPB(r12_436, r12d_663, 0) (alias)
	SCZO_665 = cond(r13_415 - rbp_662)
	CZ_666 = SCZO_665 (alias)
	branch r13_415 >u rbp_662 l000000000040D2AC
// DataOut: fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D31F:
	edi_448 = dwLoc34
	SZO_449 = cond(rax_419 & rax_419)
	Z_450 = SZO_449 (alias)
	eax_451 = 0x00000001
	rax_452 = DPB(rax_419, eax_451, 0) (alias)
	branch (rax_419 & rax_419) != 0x0000000000000000 l000000000040D32F
	edi_453 = dwLoc34
	rdi_454 = DPB(rdi_410, edi_453, 0) (alias)
	SZO_455 = cond(rax_452 & rax_452)
	Z_456 = SZO_455 (alias)
	C_457 = false
	eax_458 = 0x00000001
	rax_459 = DPB(rax_452, eax_458, 0) (alias)
	al_460 = (byte) eax_458 (alias)
	branch (rax_452 & rax_452) != 0x0000000000000000 l000000000040D32F
// DataOut: eax fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D32B_1:
	rbx_657 = rax_459
	ebx_658 = (word32) rbx_657 (alias)
// DataOut: eax fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:0x00000001 r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D32B_1:
	rbx_655 = rax_459
	ebx_656 = (word32) rbx_655 (alias)
// DataOut: eax fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:0x00000001 r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D32F:
	call wcwidth (retsize: 8; depth: 72)
		uses: al_460,C_457,CZ_423,dh_434,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,dwLoc34,eax_458,ebx_442,edi_453,edx_411,esi_433,fs_418,qwLoc08,qwLoc10,qwLoc18,qwLoc28_29,qwLoc30_360,r12_436,r12d_425,r13_415,r14_437,r14d_424,r15_438,r15d_412,rax_459,rbp_414,rbx_441,rcx_429,rdi_454,rdx_428,rsi_413,rsp_409,S_432,SCZO_445,SO_427,SZO_455,Z_456
		defs: al_478,C_474,CZ_475,dh_486,eax_472,ebx_487,edi_483,edx_463,esi_485,fs_470,r12_488,r12d_477,r13_467,r14_489,r14d_476,r15_490,r15d_464,rax_471,rbp_466,rbx_468,rcx_481,rdi_462,rdx_480,rsi_465,rsp_461,S_484,SCZO_469,SO_479,SZO_473,Z_482
	SZO_491 = cond(0x00000001)
	S_492 = SZO_491 (alias)
	C_493 = false
	branch 0x00000001 >= 0x00000000 l000000000040D2D0
	call wcwidth (retsize: 8; depth: 72)
		uses: al_478,C_493,CZ_475,dh_486,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,dwLoc34,eax_472,ebx_487,edi_483,edx_463,esi_485,fs_470,qwLoc08,qwLoc10,qwLoc18,qwLoc28_29,qwLoc30_360,r12_488,r12d_477,r13_467,r14_489,r14d_476,r15_490,r15d_464,rax_471,rbp_466,rbx_468,rcx_481,rdi_462,rdx_480,rsi_465,rsp_461,S_492,SCZO_469,SO_479,SZO_491,Z_482
		defs: al_511,C_507,CZ_508,dh_519,eax_505,ebx_520,edi_516,edx_496,esi_518,fs_503,r12_521,r12d_510,r13_500,r14_522,r14d_509,r15_523,r15d_497,rax_504,rbp_499,rbx_501,rcx_514,rdi_495,rdx_513,rsi_498,rsp_494,S_517,SCZO_502,SO_512,SZO_506,Z_515
	SZO_524 = cond(0x00000001)
	S_525 = SZO_524 (alias)
	C_526 = false
	branch 0x00000001 >= 0x00000000 l000000000040D2D0
// DataOut: eax fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:0x00000001 r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2D0:
	edx_648 = 0x7FFFFFFF
	edx_649 = 0x7FFFFFFF - r12d_510
	SCZO_650 = cond(eax_505 - edx_649)
	SZO_651 = SCZO_650 (alias)
	branch eax_505 > edx_649 l000000000040D3C0
// DataOut: eax fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2E0:
	r12d_652 = r12d_510 + eax_505
	r12_653 = DPB(r12_521, r12d_652, 0) (alias)
	SCZO_654 = cond(r12d_652)
// DataOut: eax fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D338:
	SZO_566 = cond(r14d_509 & r14d_509)
	Z_567 = SZO_566 (alias)
	branch (r14d_509 & r14d_509) != 0x00000000 l000000000040D369
	SZO_568 = cond(r14d_509 & r14d_509)
	Z_569 = SZO_568 (alias)
	C_570 = false
	branch (r14d_509 & r14d_509) != 0x00000000 l000000000040D369
// DataOut: eax fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D369:
	qwLoc30_169 = PHI(qwLoc30, qwLoc30_360, qwLoc30_360, qwLoc30_360)
	dh_170 = PHI(dh_753, dh_519, dh_434, dh_434)
	S_171 = PHI(S_719, S_525, S_432, S_432)
	edi_172 = PHI(edi_718, edi_516, edi_431, edi_431)
	rcx_173 = PHI(rcx_727, rcx_514, rcx_429, rcx_429)
	rdx_174 = PHI(rdx_752, rdx_513, rdx_428, rdx_428)
	SO_175 = PHI(SO_714, SO_512, SO_427, SO_427)
	r12d_176 = PHI(r12d_712, r12d_510, r12d_425, r12d_425)
	r14d_177 = PHI(r14d_711, r14d_509, r14d_424, r14d_424)
	fs_178 = PHI(fs_705, fs_503, fs_418, fs_418)
	r15d_179 = PHI(r15d_699, r15d_497, r15d_412, r15d_412)
	edx_180 = PHI(edx_751, edx_496, edx_411, edx_411)
	CZ_181 = PHI(CZ_710, CZ_508, CZ_423, CZ_423)
	SZO_182 = PHI(SZO_778, SZO_568, SZO_659, SZO_667)
	Z_183 = PHI(Z_779, Z_569, Z_660, Z_668)
	C_184 = PHI(C_780, C_570, C_661, C_669)
	r12_185 = PHI(r12_723, r12_521, r12_436, r12_436)
	r13_186 = PHI(r13_702, r13_500, r13_415, r13_415)
	r14_187 = PHI(r14_724, r14_522, r14_437, r14_437)
	r15_188 = PHI(r15_725, r15_523, r15_438, r15_438)
	rax_189 = PHI(rax_737, rax_504, rax_419, rax_419)
	SCZO_190 = PHI(SCZO_739, SCZO_502, SCZO_445, SCZO_439)
	rbx_191 = PHI(rbx_703, rbx_501, rbx_441, rbx_441)
	ebx_192 = PHI(ebx_722, ebx_520, ebx_442, ebx_442)
	rbp_193 = PHI(rbp_748, rbp_499, rbp_414, rbp_414)
	rsi_194 = PHI(rsi_732, rsi_498, rsi_413, rsi_413)
	esi_195 = PHI(esi_731, esi_518, esi_433, esi_433)
	rdi_196 = PHI(rdi_697, rdi_495, rdi_410, rdi_410)
	rsp_197 = PHI(rsp_696, rsp_494, rsp_409, rsp_409)
	eax_198 = 0xFFFFFFFF
	rax_199 = DPB(rax_189, eax_198, 0) (alias)
	al_200 = (byte) eax_198 (alias)
// DataOut: eax fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D33D:
	edi_571 = dwLoc34
	call iswcntrl (retsize: 8; depth: 72)
		uses: al_511,C_570,CZ_508,dh_519,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,dwLoc34,eax_505,ebx_520,edi_571,edx_496,esi_518,fs_503,qwLoc08,qwLoc10,qwLoc18,qwLoc28_29,qwLoc30_360,r12_521,r12d_510,r13_500,r14_522,r14d_509,r15_523,r15d_497,rax_504,rbp_499,rbx_501,rcx_514,rdi_495,rdx_513,rsi_498,rsp_494,S_525,SCZO_502,SO_512,SZO_568,Z_569
		defs: al_589,C_585,CZ_586,dh_597,eax_583,ebx_598,edi_594,edx_574,esi_596,fs_581,r12_599,r12d_588,r13_578,r14_600,r14d_587,r15_601,r15d_575,rax_582,rbp_577,rbx_579,rcx_592,rdi_573,rdx_591,rsi_576,rsp_572,S_595,SCZO_580,SO_590,SZO_584,Z_593
	SZO_602 = cond(eax_583 & eax_583)
	Z_603 = SZO_602 (alias)
	C_604 = false
	branch (eax_583 & eax_583) != 0x00000000 l000000000040D2E3
	edi_605 = dwLoc34
	rdi_606 = DPB(rdi_573, edi_605, 0) (alias)
	call iswcntrl (retsize: 8; depth: 72)
		uses: al_589,C_604,CZ_586,dh_597,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,dwLoc34,eax_583,ebx_598,edi_605,edx_574,esi_596,fs_581,qwLoc08,qwLoc10,qwLoc18,qwLoc28_29,qwLoc30_360,r12_599,r12d_588,r13_578,r14_600,r14d_587,r15_601,r15d_575,rax_582,rbp_577,rbx_579,rcx_592,rdi_606,rdx_591,rsi_576,rsp_572,S_595,SCZO_580,SO_590,SZO_602,Z_603
		defs: al_624,C_620,CZ_621,dh_632,eax_618,ebx_633,edi_629,edx_609,esi_631,fs_616,r12_634,r12d_623,r13_613,r14_635,r14d_622,r15_636,r15d_610,rax_617,rbp_612,rbx_614,rcx_627,rdi_608,rdx_626,rsi_611,rsp_607,S_630,SCZO_615,SO_625,SZO_619,Z_628
	SZO_637 = cond(eax_618 & eax_618)
	Z_638 = SZO_637 (alias)
	C_639 = false
	branch (eax_618 & eax_618) != 0x00000000 l000000000040D2E3
// DataOut: eax fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D34A:
	SCZO_640 = cond(r12d_623 - 0x7FFFFFFF)
	Z_641 = SCZO_640 (alias)
	branch r12d_623 == 0x7FFFFFFF l000000000040D3C0
	SCZO_642 = cond(r12d_623 - 0x7FFFFFFF)
	Z_643 = SCZO_642 (alias)
	branch r12d_623 == 0x7FFFFFFF l000000000040D3C0
// DataOut: eax fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D3C0:
	qwLoc30_137 = PHI(qwLoc30, qwLoc30_360, qwLoc30_360)
	dh_138 = PHI(dh_753, dh_632, dh_519)
	S_139 = PHI(S_719, S_630, S_525)
	edi_140 = PHI(edi_718, edi_629, edi_516)
	rcx_141 = PHI(rcx_727, rcx_627, rcx_514)
	rdx_142 = PHI(rdx_752, rdx_626, rdx_513)
	SO_143 = PHI(SO_714, SO_625, SO_512)
	r12d_144 = PHI(r12d_712, r12d_623, r12d_510)
	r14d_145 = PHI(r14d_711, r14d_622, r14d_509)
	fs_146 = PHI(fs_705, fs_616, fs_503)
	r15d_147 = PHI(r15d_699, r15d_610, r15d_497)
	edx_148 = PHI(edx_765, edx_609, edx_649)
	CZ_149 = PHI(CZ_710, CZ_621, CZ_508)
	SZO_150 = PHI(SZO_766, SZO_637, SZO_651)
	Z_151 = PHI(Z_771, Z_643, Z_515)
	C_152 = PHI(C_767, C_639, C_526)
	r12_153 = PHI(r12_723, r12_634, r12_521)
	r13_154 = PHI(r13_702, r13_613, r13_500)
	r14_155 = PHI(r14_724, r14_635, r14_522)
	r15_156 = PHI(r15_725, r15_636, r15_523)
	rax_157 = PHI(rax_737, rax_617, rax_504)
	SCZO_158 = PHI(SCZO_770, SCZO_642, SCZO_650)
	rbx_159 = PHI(rbx_703, rbx_614, rbx_501)
	ebx_160 = PHI(ebx_722, ebx_633, ebx_520)
	rbp_161 = PHI(rbp_748, rbp_612, rbp_499)
	rsi_162 = PHI(rsi_732, rsi_611, rsi_498)
	esi_163 = PHI(esi_731, esi_631, esi_518)
	rdi_164 = PHI(rdi_697, rdi_608, rdi_495)
	rsp_165 = PHI(rsp_696, rsp_607, rsp_494)
	eax_166 = 0x7FFFFFFF
	rax_167 = DPB(rax_157, eax_166, 0) (alias)
	al_168 = (byte) eax_166 (alias)
// DataOut: eax fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D353:
	r12d_644 = r12d_623 + 0x00000001
	r12d_645 = r12d_644 + 0x00000001
	r12_646 = DPB(r12_634, r12d_645, 0) (alias)
	SCZO_647 = cond(r12d_645)
// DataOut: eax fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2E3:
	rbx_527 = PHI(rbx_614, rbx_614, rbx_501)
	rbp_528 = PHI(rbp_612, rbp_612, rbp_499)
	rdi_529 = fp - 0x0000000000000030
	edi_530 = (word32) rdi_529 (alias)
	rbp_531 = rbp_528 + rbx_527
	SCZO_532 = cond(rbp_531)
	call mbsinit (retsize: 8; depth: 72)
		uses: al_511,C_526,CZ_508,dh_519,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,dwLoc34,eax_505,ebx_520,edi_530,edx_496,esi_518,fs_503,qwLoc08,qwLoc10,qwLoc18,qwLoc28_29,qwLoc30_360,r12_521,r12d_510,r13_500,r14_522,r14d_509,r15_523,r15d_497,rax_504,rbp_531,rbx_527,rcx_514,rdi_529,rdx_513,rsi_498,rsp_494,S_525,SCZO_532,SO_512,SZO_524,Z_515
		defs: al_550,C_546,CZ_547,dh_558,eax_544,ebx_559,edi_555,edx_535,esi_557,fs_542,r12_560,r12d_549,r13_539,r14_561,r14d_548,r15_562,r15d_536,rax_543,rbp_538,rbx_540,rcx_553,rdi_534,rdx_552,rsi_537,rsp_533,S_556,SCZO_541,SO_551,SZO_545,Z_554
	SZO_563 = cond(eax_544 & eax_544)
	Z_564 = SZO_563 (alias)
	C_565 = false
	branch (eax_544 & eax_544) != 0x00000000 l000000000040D2A3
// DataOut: fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2A3:
	qwLoc30_287 = PHI(qwLoc30_318, qwLoc30_360)
	dh_288 = PHI(dh_319, dh_558)
	S_289 = PHI(S_320, S_556)
	edi_290 = PHI(edi_321, edi_555)
	rcx_291 = PHI(rcx_322, rcx_553)
	rdx_292 = PHI(rdx_323, rdx_552)
	SO_293 = PHI(SO_324, SO_551)
	r12d_294 = PHI(r12d_349, r12d_549)
	r14d_295 = PHI(r14d_326, r14d_548)
	fs_296 = PHI(fs_327, fs_542)
	r15d_297 = PHI(r15d_328, r15d_536)
	edx_298 = PHI(edx_329, edx_535)
	SZO_299 = PHI(SZO_331, SZO_563)
	Z_300 = PHI(Z_332, Z_564)
	C_301 = PHI(C_333, C_565)
	r12_302 = PHI(r12_350, r12_560)
	r13_303 = PHI(r13_335, r13_539)
	r14_304 = PHI(r14_336, r14_561)
	r15_305 = PHI(r15_337, r15_562)
	eax_306 = PHI(eax_338, eax_544)
	rax_307 = PHI(rax_339, rax_543)
	al_308 = PHI(al_340, al_550)
	rbx_309 = PHI(rbx_341, rbx_540)
	ebx_310 = PHI(ebx_342, ebx_559)
	rbp_311 = PHI(rbp_348, rbp_538)
	rsi_312 = PHI(rsi_344, rsi_537)
	esi_313 = PHI(esi_345, esi_557)
	rdi_314 = PHI(rdi_346, rdi_534)
	rsp_315 = PHI(rsp_347, rsp_533)
	SCZO_316 = cond(r13_303 - rbp_311)
	CZ_317 = SCZO_316 (alias)
	branch r13_303 <=u rbp_311 l000000000040D401
// DataOut: fs r11 r11d r12 r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D401:
	qwLoc30_255 = PHI(qwLoc30_287, qwLoc30_360)
	dh_256 = PHI(dh_288, dh_434)
	S_257 = PHI(S_289, S_432)
	edi_258 = PHI(edi_290, edi_431)
	rcx_259 = PHI(rcx_291, rcx_429)
	rdx_260 = PHI(rdx_292, rdx_428)
	SO_261 = PHI(SO_293, SO_427)
	r12d_262 = PHI(r12d_294, r12d_663)
	r14d_263 = PHI(r14d_295, r14d_424)
	fs_264 = PHI(fs_296, fs_418)
	r15d_265 = PHI(r15d_297, r15d_412)
	edx_266 = PHI(edx_298, edx_411)
	CZ_267 = PHI(CZ_317, CZ_666)
	SZO_268 = PHI(SZO_299, SZO_659)
	Z_269 = PHI(Z_300, Z_660)
	C_270 = PHI(C_301, C_661)
	r12_271 = PHI(r12_302, r12_664)
	r13_272 = PHI(r13_303, r13_415)
	r14_273 = PHI(r14_304, r14_437)
	r15_274 = PHI(r15_305, r15_438)
	rax_275 = PHI(rax_307, rax_419)
	SCZO_276 = PHI(SCZO_316, SCZO_665)
	rbx_277 = PHI(rbx_309, rbx_441)
	ebx_278 = PHI(ebx_310, ebx_442)
	rbp_279 = PHI(rbp_311, rbp_662)
	rsi_280 = PHI(rsi_312, rsi_413)
	esi_281 = PHI(esi_313, esi_433)
	rdi_282 = PHI(rdi_314, rdi_410)
	rsp_283 = PHI(rsp_315, rsp_409)
	eax_284 = r12d_262
	rax_285 = DPB(rax_275, eax_284, 0) (alias)
	al_286 = (byte) eax_284 (alias)
// DataOut: eax fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3C5:
	qwLoc30_67 = PHI(qwLoc30_137, qwLoc30_255, qwLoc30_169, qwLoc30, qwLoc30)
	dh_68 = PHI(dh_138, dh_256, dh_170, dh_753, dh_60)
	S_69 = PHI(S_139, S_257, S_171, S_719, S_58)
	edi_70 = PHI(edi_140, edi_258, edi_172, edi_718, edi_57)
	rcx_71 = PHI(rcx_141, rcx_259, rcx_173, rcx_727, rcx_55)
	rdx_72 = PHI(rdx_142, rdx_260, rdx_174, rdx_752, rdx_54)
	SO_73 = PHI(SO_143, SO_261, SO_175, SO_714, SO_53)
	r12d_74 = PHI(r12d_144, r12d_262, r12d_176, r12d_712, r12d_51)
	r14d_75 = PHI(r14d_145, r14d_263, r14d_177, r14d_711, r14d_50)
	fs_76 = PHI(fs_146, fs_264, fs_178, fs_705, fs_44)
	r15d_77 = PHI(r15d_147, r15d_265, r15d_179, r15d_699, r15d_38)
	edx_78 = PHI(edx_148, edx_266, edx_180, edx_757, edx_37)
	CZ_79 = PHI(CZ_149, CZ_267, CZ_181, CZ_710, CZ_66)
	r12_80 = PHI(r12_153, r12_271, r12_185, r12_723, r12_62)
	r13_81 = PHI(r13_154, r13_272, r13_186, r13_702, r13_41)
	r14_82 = PHI(r14_155, r14_273, r14_187, r14_724, r14_63)
	r15_83 = PHI(r15_156, r15_274, r15_188, r15_725, r15_64)
	eax_84 = PHI(eax_166, eax_284, eax_198, eax_760, eax_202)
	rax_85 = PHI(rax_167, rax_285, rax_199, rax_761, rax_203)
	al_86 = PHI(al_168, al_286, al_200, al_762, al_204)
	SCZO_87 = PHI(SCZO_158, SCZO_276, SCZO_190, SCZO_763, SCZO_201)
	rbx_88 = PHI(rbx_159, rbx_277, rbx_191, rbx_703, rbx_42)
	ebx_89 = PHI(ebx_160, ebx_278, ebx_192, ebx_722, ebx_61)
	rbp_90 = PHI(rbp_161, rbp_279, rbp_193, rbp_748, rbp_40)
	rdi_91 = PHI(rdi_164, rdi_282, rdi_196, rdi_697, rdi_36)
	rsp_92 = PHI(rsp_165, rsp_283, rsp_197, rsp_696, rsp_35)
	rsi_93 = qwLoc28_29
	rsi_94 = rsi_93 ^ Mem0[fs_76:0x00000028:word64]
	esi_95 = (word32) rsi_94 (alias)
	SZO_96 = cond(rsi_94)
	Z_97 = SZO_96 (alias)
	C_98 = false
	branch rsi_94 != 0x0000000000000000 l000000000040D40A
// DataOut: eax esi fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040D40A:
	__stack_chk_fail()
// DataOut: esi fs r11 r11d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> edi:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64)

l000000000040D40A_thunk_fn000000000040D420:
	eax = fn000000000040D420(rax, esi, rdi, fs, qwLoc48, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	rax = DPB(rax, eax, 0) (alias)
	al = (byte) eax (alias)
	return eax
// DataOut: eax ebp ebx esp fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> edi:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D3D5:
	rsp_99 = fp - 0x0000000000000018
	SCZO_100 = cond(fp - 0x0000000000000018)
	rbx_102 = qwLoc18
	ebx_103 = (word32) rbx_102 (alias)
	rsp_104 = fp - 0x0000000000000010
	rbp_106 = qwLoc10
	rsp_107 = fp - 0x0000000000000008
	rsp_109 = qwLoc08
	rsp_110 = rsp_109 + 0x0000000000000008
	rbp_111 = Mem0[rsp_110:word64]
	rsp_112 = rsp_110 + 0x0000000000000008
	rsi_113 = Mem0[rsp_112:word64]
	esi_114 = (word32) rsi_113 (alias)
	rsp_115 = rsp_112 + 0x0000000000000008
	rdi_116 = Mem0[rsp_115:word64]
	rsp_117 = rsp_115 + 0x0000000000000008
	return eax_84
// DataOut: eax ebp ebx esp fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> edi:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040D240_exit:
	r12_118 = PHI(r12_80, r12)
	r13_119 = PHI(r13_81, r13)
	r14_120 = PHI(r14_82, r14)
	r15_121 = PHI(r15_83, r15)
	eax_122 = PHI(eax_84, eax)
	rax_123 = PHI(rax_85, rax)
	al_124 = PHI(al_86, al)
	ebx_125 = PHI(ebx_103, ebx)
	rbp_126 = PHI(rbp_111, rbp)
	rsi_127 = PHI(rsi_113, rsi)
	rsp_128 = PHI(rsp_117, rsp)
	use ebx_125 (=> ebxOut)
	use rsp_128 (=> rspOut)
	use rbp_126 (=> rbpOut)
	use rsi_127 (=> rsiOut)
	use r12_118 (=> r12Out)
	use r13_119 (=> r13Out)
	use r14_120 (=> r14Out)
	use r15_121 (=> r15Out)
// DataOut: eax ebp ebx esp r12 r13 r13d r14 r14b r14d r15 r15b r15d rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> rdx:<invalid> edi:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word32 fn000000000040D420(word64 rax, word32 esi, word64 rdi, selector fs, word64 qwArg00, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs rax rdi
// LiveOut: eax ebp ebx esp r12 r13 r13d r14 r14b r14d r15 r15b r15d rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn000000000040D420_entry:
// DataOut: esi fs r11 r11d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D420:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	ebp = esi
	rsp = fp - 0x0000000000000008
	dwLoc08 = rbx
	qwLoc08 = DPB(qwLoc08, dwLoc08, 0) (alias)
	rbx = rdi
	rsp = fp - 0x0000000000000010
	rax = DPB(rax, strlen(rdi), 0)
	rsp = fp - 0x0000000000000008
	SCZO = cond(fp - 0x0000000000000008)
	rdi = rbx
	edi = (word32) rdi (alias)
	edx = ebp
	rdx = DPB(rdx, edx, 0) (alias)
	dh = SLICE(edx, byte, 8) (alias)
	rbx = qwLoc08
	rsp = fp
	rbp = qwArg00
	rsp = fp + 0x0000000000000008
	rsi = rax
	esi = (word32) rsi (alias)
// DataOut: edx fs r11 r11d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D43B_thunk_fn000000000040D240:
	eax = fn000000000040D240(edx, rsi, rdi, fs, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	rax = DPB(rax, eax, 0) (alias)
	al = (byte) eax (alias)
	return eax
// DataOut: eax ebp ebx esp fs r11 r11d r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 ebp:<invalid> rbx:rbx rax:DPB(rax, <invalid>, 0) rdi:rdi edx:esi rbp:SLICE(rbp, word64, 32) rsi:DPB(rax, <invalid>, 0) -8(fp):rbx -4(fp):rbp

fn000000000040D420_exit:
	use ebx (=> ebxOut)
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax ebp ebx esp r12 r13 r13d r14 r14b r14d r15 r15b r15d rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> edx:<invalid> rbp:<invalid> rsi:<invalid> r15d:<invalid> r13:<invalid> eax:<invalid> esi:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> rdx:<invalid> edi:<invalid> -8(fp):rbx -4(fp):rbp



word32 fn000000000040D450(word32 eax, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15, ptr64 & rspOut, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r11 r15 r8 rdi rsi
// LiveOut: eax r13 r14 r15 rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D450_entry:
// DataOut: eax r11 r13 r14 r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D450:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v6 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rbp = rcx
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000050
	SCZO = cond(rsi - 0x0000000000000002)
	Z = SCZO (alias)
	SZO = SCZO (alias)
	CZ = SCZO (alias)
	C = SCZO (alias)
	qwLoc50 = rsi
	qwLoc38 = rdx
	branch Test(UGT,CZ) l000000000040D490
// DataOut: eax r11 r13 r14 r15 r8 rdi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0050(64)

l000000000040D490:
	rsi = qwLoc50
	rdx = qwLoc38
	rax = rsi
	rax = rax >>u 0x0000000000000001
	r15 = rax
	qwLoc48 = rax
	rax = rdi + rax * 0x0000000000000008
	rsi = rsi - r15
	SCZO = cond(rsi)
	rdi = rax
	qwLoc28 = rax
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(r15 - 0x0000000000000001)
	branch Test(EQ,Z) l000000000040D570
// DataOut: r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D570:
	r12 = Mem0[r11:word64]
	rax = Mem0[rsp + 0x0000000000000018:word64]
	Mem0[r8:word64] = r12
// DataOut: r11 r12 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D4C5:
	rax = Mem0[rsp:word64]
	r15 = Mem0[rsp + 0x0000000000000018:word64]
	rcx = rbp
	rsi = Mem0[rsp + 0x0000000000000008:word64]
	rax = rax >>u 0x0000000000000002
	rdx = r15
	r13 = rbx + rax * 0x0000000000000008
	r14 = rax
	rsi = rsi - rax
	SCZO = cond(rsi)
	Mem0[rsp + 0x0000000000000020:word64] = rax
	rdi = r13
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	rdx = r15
	rcx = rbp
	rsi = r14
	rdi = rbx
	r15 = r15 + 0x0000000000000008
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[r11:word64]
	r13 = Mem0[r13 + 0x0000000000000000:word64]
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D53B:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4; depth: 4)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D520
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D520:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - r14)
	Mem0[r15 - 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D634
// DataOut: eax r11 r12 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D533:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D547:
	v25 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v25
	Mem0[r15 - 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000020:word64] - rax)
	branch Test(EQ,Z) l000000000040D625
// DataOut: eax r11 r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D625:
	rax = Mem0[rsp + 0x0000000000000008:word64]
	Mem0[rsp + 0x0000000000000010:word64] = r14
	Mem0[rsp + 0x0000000000000020:word64] = rax
// DataOut: r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D634:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rdi = r15
	rdx = rdx - rax
	rsi = rbx + rax * 0x0000000000000008
	rdx = rdx << 0x0000000000000003
	SCZO = cond(rdx)
	rax = memcpy(rdi, rsi, rdx)
	rax = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[r8:word64]
// DataOut: r11 r12 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D57B:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	edi = 0x00000001
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	r13 = Mem0[r8:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5B7:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4; depth: 4)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D5A0
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5A0:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp:word64] - r14)
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D5F0
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5F0:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r15 = Mem0[rsp + 0x0000000000000008:word64]
	rsp = rsp + 0x0000000000000038
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = r15 - rax
	SCZO = cond(r15)
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdx = 0x00000000 + r15 * 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004025C0_in_fn000000000040D450:
	call Mem0[0x000000000061A228:word32] (retsize: 4; depth: 4)
	return eax
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5AF:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5C3:
	v26 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v26
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - rax)
	branch Test(EQ,Z) l000000000040D479
// DataOut: eax r11 r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5DE:
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[rcx + rax * 0x0000000000000008:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5B3:
	r15 = r15 + 0x0000000000000001
	SCZO = cond(r15)
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D561:
	r12 = Mem0[rbx + rax * 0x0000000000000008:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D537:
	r15 = r15 + 0x0000000000000008
	SCZO = cond(r15)
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D473:
	branch Test(EQ,Z) l000000000040D660
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040D660:
	r13 = Mem0[r15 + 0x0000000000000008:word64]
	r12 = Mem0[r15:word64]
	rsi = r13
	rdi = r12
	call ecx (retsize: 4; depth: 84)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000040D479
// DataOut: eax r11 r12 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040D677:
	Mem0[r11:word64] = r13
	Mem0[r11 + 0x0000000000000008:word64] = r12
	rsp = fp - 0x0000000000000018
	SCZO = cond(fp - 0x0000000000000018)
	rbx = qwLoc18
	rsp = fp - 0x0000000000000010
	rbp = qwLoc10
	rsp = fp - 0x0000000000000008
	rsp = qwLoc08
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return eax
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D479:
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return eax
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> edi:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040D450_exit:
	use rsp (=> rspOut)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax r13 r14 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> edi:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040D690(word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r11 r15 r8 rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040D690_entry:
// DataOut: edi r11 r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D690:
	word32 eax_5 = (word32) (rdi + rsi * 0x0000000000000008)
// DataOut: eax r11 r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D697_thunk_fn000000000040D450:
	word64 rsp_12
	word64 r13_13
	word64 r14_14
	word64 r15_15
	fn000000000040D450(eax_5, rsi, rdi, r8, r11, r15, out rsp_12, out r13_13, out r14_14, out r15_15)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:rdi + rsi * 0x0000000000000008 rcx:rdx rdx:rdi + rsi * 0x0000000000000008

fn000000000040D690_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> r15:<invalid> r14:<invalid> edi:<invalid>



void fn000000000040D6A0(word64 rax, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D6A0_entry:
// DataOut: rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D6A0:
	word64 rbx_120 = rdi
	branch rdi == 0x0000000000000000 l000000000040D713
// DataOut: rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D713:
	word64 rax_162 = DPB(rax, fwrite(DPB(rdi, 0x00415FA0, 0), DPB(rsi, 0x00000001, 0), DPB(rdx, 0x00000037, 0), Mem0[0x000000000061A650:word64]), 0)
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

l000000000040D6A9:
	word64 rax_13 = strrchr(rdi, DPB(rsi, 0x0000002F, 0))
	branch rax_13 == 0x0000000000000000 l000000000040D703
// DataOut: rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6B8:
	word64 rcx_50 = rax_13 + 0x0000000000000001 - rdi
	byte SCZO_51 = cond(rcx_50 - 0x0000000000000006)
	byte C_111 = SCZO_51
	byte Z_144 = SCZO_51
	byte CZ_100 = SCZO_51
	branch rcx_50 <= 0x0000000000000006 l000000000040D703
// DataOut: rax rbx rdx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:0x0000002F rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6C8:
	word64 rsi_146 = rax_13 - 0x0000000000000006
	word64 rdi_149 = DPB(rdi, 0x00415FD8, 0)
	word64 rcx_151 = DPB(rcx_50, 0x00000007, 0)
// DataOut: rax rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:0x0000002F rax:<invalid> rdx:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6D6:
	branch rcx_151 == 0x0000000000000000 l000000000040D6D8
// DataOut: rax rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6D6_1:
	byte SCZO_141 = cond(Mem0[rsi_163:byte] - Mem0[rdi_149:byte])
	C_111 = SCZO_141 (alias)
	Z_144 = SCZO_141 (alias)
	CZ_100 = SCZO_141 (alias)
	rsi_146 = rsi_163 + 0x0000000000000001
	rdi_149 = rdi_149 + 0x0000000000000001
	rcx_151 = rcx_151 - 0x0000000000000001
	word64 rsi_163 = rsi_146
	branch Mem0[rsi_163:byte] != Mem0[rdi_149:byte] l000000000040D6D6
// DataOut: rax rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6D8:
	branch Z_144 l000000000040D703
// DataOut: rax rbx rdx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6DA:
	word64 rcx_105 = DPB(rcx_151, 0x00000003, 0)
	word64 rsi_101 = rax_13 + 0x0000000000000001
	word64 rdi_103 = DPB(rdi_149, 0x00415FE0, 0)
// DataOut: rax rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6E7:
	branch rcx_105 == 0x0000000000000000 l000000000040D6E9
// DataOut: rax rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6E7_2:
	byte SCZO_128 = cond(Mem0[rsi_165:byte] - Mem0[rdi_166:byte])
	C_111 = SCZO_128 (alias)
	CZ_100 = SCZO_128 (alias)
	rsi_101 = rsi_165 + 0x0000000000000001
	rdi_103 = rdi_166 + 0x0000000000000001
	rcx_105 = rcx_105 - 0x0000000000000001
	word64 rsi_165 = rsi_101
	word64 rdi_166 = rdi_103
	branch Mem0[rsi_165:byte] != Mem0[rdi_166:byte] l000000000040D6E7
// DataOut: rax rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6E9:
	rbx_120 = rax_13 + 0x0000000000000001
	branch CZ_100 != C_111 l000000000040D703
// DataOut: rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6F8:
	Mem126[0x000000000061A600:word64] = rax_13 + 0x0000000000000004
	rbx_120 = rax_13 + 0x0000000000000004
// DataOut: rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D703:
	Mem42[0x000000000061B200:word64] = rbx_120
	Mem43[0x000000000061A648:word64] = rbx_120
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx

fn000000000040D6A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx



void fn000000000040D740(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx rax rcx rdi rdx
// Preserved: rsp
fn000000000040D740_entry:
// DataOut: ebp ebx esi fs r11 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D740:
	word64 rax_5 = DPB(rax, 0x00000000, 0)
	word64 rcx_10 = DPB(rcx, 0x00000007, 0)
	word64 rdi_11 = fp - 0x0000000000000048
// DataOut: ebp ebx esi fs r11 rax rbp rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D754:
	branch rcx_10 == 0x0000000000000000 l000000000040D757
// DataOut: ebp ebx esi fs r11 rax rbp rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 eax:0x00000000 rdx:rdi ecx:<invalid> rdi:<invalid> rcx:<invalid> -72(fp):rax
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D757:
	branch esi == 0x00000008 l000000000040D7A1
// DataOut: ebp ebx esi fs r11 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 eax:0x00000000 rdx:rdi ecx:<invalid> rdi:<invalid> rcx:<invalid> -72(fp):rax
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D7A1:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 eax:0x00000000 rdx:rdi ecx:<invalid> rdi:<invalid> rcx:<invalid> -72(fp):rax

l000000000040D759:
	Mem28[rdi:word64] = DPB(qwLoc48, esi, 0)
	Mem31[rdi + 0x0000000000000008:word64] = qwLoc40
	Mem34[rdi + 0x0000000000000010:word64] = qwLoc38
	Mem37[rdi + 0x0000000000000018:word64] = qwLoc30
	Mem40[rdi + 0x0000000000000020:word64] = qwLoc28
	Mem43[rdi + 0x0000000000000028:word64] = qwLoc20
	Mem46[rdi + 0x0000000000000030:word64] = qwLoc18
	return
// DataOut: ebp ebx fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 eax:0x00000000 rdx:rdi ecx:<invalid> rdi:<invalid> rcx:<invalid> -72(fp):rax

fn000000000040D740_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> rdx:rdi ecx:<invalid> rdi:<invalid> rax:<invalid> rcx:<invalid> -72(fp):esi

l000000000040D754_1:
	Mem20[rdi_11:word64] = rax_5
	rdi_11 = rdi_11 + 0x0000000000000008
	rcx_10 = rcx_10 - 0x0000000000000001
// DataOut: ebp ebx esi fs r11 rax rbp rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 eax:0x00000000 rdx:rdi ecx:<invalid> rdi:<invalid> rcx:<invalid> -72(fp):rax
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)



void fn000000000040D7B0(word32 esi, word64 rdi, word64 r8, word64 r13, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs r13 r15 r8 rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D7B0_entry:
// DataOut: esi fs r13 r15 r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D7B0:
	word64 r12_14 = DPB(r12, esi, 0)
	word64 rax_27 = dcgettext(DPB(rdi, 0x00000000, 0), rdi, DPB(rdx, 0x00000005, 0))
	branch rax_27 == rdi l000000000040D7E8
// DataOut: fs r12 r13 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D7E8:
	word64 rsp_60
	word64 rbp_61
	word32 r12d_62
	word64 rax_63 = fn0000000000411900(rdi, rdi, r8, r12_14, r13, r15, fs, out rsp_60, out rbp_61, out r12d_62)
	byte dl_68 = (byte) ((word32) Mem0[rax_63:byte] & 0xFFFFFFDF)
	branch dl_68 != 0x55 l000000000040D850
// DataOut: dl r12d rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 edx:0x00000005 r12d:esi rsi:rdi rbp:rdi edi:0x00000000 rax:<invalid> rbx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D850:
	branch dl_68 != 0x47 l000000000040D838
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D855:
	branch (byte) ((word32) Mem0[rax_63 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x42 l000000000040D838
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D861:
	branch Mem0[rax_63 + 0x0000000000000002:byte] != 0x31 l000000000040D838
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D867:
	branch Mem0[rax_63 + 0x0000000000000003:byte] != 0x38 l000000000040D838
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D86D:
	branch Mem0[rax_63 + 0x0000000000000004:byte] != 0x30 l000000000040D838
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D873:
	branch Mem0[rax_63 + 0x0000000000000005:byte] != 0x33 l000000000040D838
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D879:
	branch Mem0[rax_63 + 0x0000000000000006:byte] != 0x30 l000000000040D838
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D87F:
	branch Mem0[rax_63 + 0x0000000000000007:byte] != 0x00 l000000000040D838
// DataOut: r12d rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D885:
	branch Mem0[rbp_61:byte] == 0x60 l000000000040D89B
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D897_1:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> r13:<invalid> eax:0x00415FE8 ebx:0x00415FED r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:0xE8 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D89B:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> r13:<invalid> eax:0x00415FE8 ebx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:0xE8 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D7F8:
	branch (byte) ((word32) Mem0[rax_63 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x54 l000000000040D838
// DataOut: r12d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D804:
	branch (byte) ((word32) Mem0[rax_63 + 0x0000000000000002:byte] & 0xFFFFFFDF) != 0x46 l000000000040D838
// DataOut: r12d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D810:
	branch Mem0[rax_63 + 0x0000000000000003:byte] != 0x2D l000000000040D838
// DataOut: r12d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D816:
	branch Mem0[rax_63 + 0x0000000000000004:byte] != 0x38 l000000000040D838
// DataOut: r12d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D81C:
	branch Mem0[rax_63 + 0x0000000000000005:byte] != 0x00 l000000000040D838
// DataOut: r12d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D838:
	branch r12d_62 == 0x00000007 l000000000040D84A
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D846_1:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> ebx:0x00415FEB eax:0x00416DEA r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:0xEA -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D84A:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> ebx:<invalid> eax:0x00416DEA r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:0xEA -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D822:
	branch Mem0[rax_27:byte] != 0x60 l000000000040D833
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D82F_1:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:0x00415FF1 ebx:0x00415FE4 r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:0xF1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D833:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:0x00415FF1 ebx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:0xF1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D7D7:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> ebx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r13:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn000000000040D7B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> ebx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r13:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn000000000040D8A0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word32 r8d, word32 r9d, selector fs, word64 qwArg20, word64 qwArg28, word64 qwArg30, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r8d r9b r9d rcx rdi rdx rsi
// LiveOut: ebp r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rcx rdx
fn000000000040D8A0_entry:
// DataOut: fs r12 r12b r12d r8d r9b rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D8A0:
	word64 rdi_53
	word64 rcx_55
	word32 r14d_57
	word32 r8d_58
	word64 rbx_62
	word32 ebx_63
	word32 r9d_64
	byte SCZO_65
	word32 eax_68
	byte SZO_69
	byte C_70
	byte al_71
	byte CZ_72
	word64 r11_73
	word32 esi_74
	byte Z_75
	word64 r9_76
	word32 ebp_78
	word64 r8_79
	byte cl_80
	word32 r12d_82
	byte r12b_83
	word32 r11d_84
	word32 edx_85
	word16 dx_86
	byte dl_87
	word32 edi_88
	byte r11b_89
	byte dil_90
	byte sil_91
	word32 esp_92
	word64 r10_93
	word64 r13_122
	word64 rax_1129
	selector fs_1103
	word64 r12_1010
	word64 r14_1119
	word64 r15_1120
	word32 ecx_1003
	word64 rdx_1143
	word64 rbp_1016
	word64 rsi_1018
	word64 rsp_1140
	call __ctype_get_mb_cur_max (retsize: 8; depth: 232)
		uses: C_51,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_21,dwLoc14_23,dwLoc18_26,dwLoc50_36,dwLocAC_35,eax_48,ebx_28,esp_30,fs,qwLoc28_47,qwLoc70_40,qwLoc78_43,qwLoc88_37,qwLocB8_33,qwLocC0_34,r13_18,r14_13,r14d_11,r15_6,r8d,r9d,rax_49,rbp,rbx,rcx,rdi,rdx,rsi,rsp_29,SZO_50
		defs: al_71,C_70,cl_80,CZ_72,dil_90,dl_87,dx_86,eax_68,ebp_78,ebx_63,ecx_81,edi_88,edx_85,esi_74,esp_92,fs_67,r10_93,r11_73,r11b_89,r11d_84,r12_94,r12b_83,r12d_82,r13_60,r14_77,r14d_57,r15_54,r8_79,r8d_58,r9_76,r9d_64,rax_66,rbp_59,rbx_62,rcx_55,rdi_53,rdx_61,rsi_56,rsp_52,SCZO_65,sil_91,SZO_69,Z_75
	byte al_99 = (byte) (ebx_63 >>u 0x00000001 & 0x00000001)
	branch r14d_57 >u 0x00000008 l000000000040E280
// DataOut: fs r12 r12b r12d r13 r14 r14d r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AD(0) Local -00B8(64) Local -00C0(64)

l000000000040E280:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r9d >>u 0x00000001 & 0x00000001 -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D92D:
	word64 rbx_1015
	word64 r11_104 = rsi
	word32 r11d_1007 = (word32) rsi
	byte r11b_1008 = (byte) rsi
	switch (r14d_57) { l000000000040D940 l000000000040E070 l000000000040DF10 }
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r9d >>u 0x00000001 & 0x00000001 -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AD(0) Local -00B8(64)

l000000000040DF10:
	branch al_99 != 0x00 l000000000040E408
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r8d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E408:
	rbx_1015 = DPB(rbx_62, 0x00000000, 0) (alias)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r8d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF1B:
	branch rsi == 0x0000000000000000 l000000000040E2D1
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r8d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E2D1:
	rbx_1015 = DPB(rbx_62, 0x00000001, 0) (alias)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r8d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF24:
	Mem1784[rdi:byte] = 0x27
	rax_1129 = rdi
	rbx_1015 = DPB(rbx_62, 0x00000001, 0) (alias)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r8d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E070:
	rbx_1015 = DPB(rbx_62, 0x00000000, 0) (alias)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r8d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D940:
	r14_1119 = DPB(r14_1119, 0x00000000, 0) (alias)
	rbx_1015 = DPB(rbx_62, 0x00000000, 0) (alias)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r8d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D960:
	Mem155[rsp_1140 + 0x0000000000000038:byte] = (byte) ((word32) Mem0[rsp_1140 + 0x0000000000000033:byte] ^ 0x00000001)
	Mem161[rsp_1140 + 0x0000000000000095:byte] = (byte) ((word32) Mem155[rsp_1140 + 0x0000000000000020:byte] ^ 0x00000001)
	word64 r9_1115
	*r9Out = r14_1119
	rbp_1016 = DPB(rbp_1016, 0x00000000, 0) (alias)
	*r14Out = r11_104
	word64 r8_1114
	*r8Out = r13_122
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:0x00000001 r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> rbx:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:0x01 -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D986:
	byte al_1741 = rbp_1016 != r15_1120
	word64 rax_1667 = DPB(rax_1129, al_1741, 0)
	branch r15_1120 == 0xFFFFFFFFFFFFFFFF l000000000040DB76
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D996:
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9A0:
	branch al_1741 == 0x00 l000000000040DB86
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rbx:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9A8:
	word64 r13_1672
	byte cl_538 = r9_1115 != 0x0000000000000000
	ecx_1003 = DPB(ecx_1003, cl_538, 0) (alias)
	branch r9_1115 == 0x0000000000000000 l000000000040E0A0
// DataOut: ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9B4:
	branch Mem161[rsp_1140 + 0x0000000000000020:byte] == 0x00 l000000000040E0A0
// DataOut: ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) cl:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9BF:
	rax_1667 = rbp_1016 + r9_1115
	branch r15_1120 <u rax_1667 l000000000040E0A0
// DataOut: eax ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) cl:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0A0:
	r13_1672 = r8_1114 + rbp_1016
	r11d_1007 = 0x00000000
	r11b_1008 = 0x00 (alias)
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9CD:
	rsi_1018 = Mem161[rsp_1140 + 0x0000000000000060:word64]
	Mem1688[rsp_1140 + 0x0000000000000050:word32] = ecx_1003
	Mem1689[rsp_1140 + 0x0000000000000048:word64] = r8_1114
	Mem1691[rsp_1140 + 0x0000000000000040:word64] = r9_1115
	r13_1672 = r8_1114 + rbp_1016
	rax_1667 = DPB(rax_1667, memcmp(r13_1672, rsi_1018, r9_1115), 0)
	word32 eax_1693 = memcmp(r13_1672, rsi_1018, r9_1115)
	rdx_1143 = r9_1115
	*r9Out = Mem1691[rsp_1140 + 0x0000000000000040:word64]
	r8_1114 = Mem1691[rsp_1140 + 0x0000000000000048:word64]
	*r8Out = r8_1114
	ecx_1003 = Mem1691[rsp_1140 + 0x0000000000000050:word32]
	branch eax_1693 != 0x00000000 l000000000040E0B0
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0B0:
	r11d_1007 = 0x00000000
	r11b_1008 = 0x00 (alias)
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA05:
	branch Mem1691[rsp_1140 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA10:
	rbx_1015 = DPB(rbx_1015, 0x00000001, 0) (alias)
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA20:
	word32 r12d_1005 = (word32) Mem161[r13_1672:byte]
	byte r12b_1006 = (byte) r12d_1005
	r12_1010 = DPB(r12_1010, r12d_1005, 0) (alias)
	*r12Out = r12_1010
	branch r12b_1006 >u 0x7E l000000000040DE18
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> r12d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE18:
	byte dl_1127
	word64 rdx_1124
	byte dl_1142
	branch Mem161[rsp_1140 + 0x0000000000000078:word64] != 0x0000000000000001 l000000000040E0C0
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0C0:
	Mem1221[rsp_1140 + 0x00000000000000B0:word64] = 0x0000000000000000
	branch r15_1120 == 0xFFFFFFFFFFFFFFFF l000000000040E285
// DataOut: fs r11b r11d r12b r13 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E285:
	Mem1655[rsp_1140 + 0x0000000000000050:word64] = r9_1115
	Mem1656[rsp_1140 + 0x0000000000000048:word32] = r11d_1007
	Mem1657[rsp_1140 + 0x0000000000000040:word64] = r8_1114
	word64 rax_1658 = DPB(rax_1667, strlen(r8_1114), 0)
	r9_1115 = Mem1657[rsp_1140 + 0x0000000000000050:word64]
	r15_1120 = rax_1658
	r11b_1008 = (byte) Mem1657[rsp_1140 + 0x0000000000000048:word32] (alias)
// DataOut: fs r11b r12b r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0D6:
	Mem1237[rsp_1140 + 0x0000000000000080:word64] = rbx_1015
	Mem1238[rsp_1140 + 0x0000000000000096:byte] = r12b_1006
	Mem1239[rsp_1140 + 0x0000000000000098:word64] = r13_1672
	Mem1242[rsp_1140 + 0x0000000000000048:word64] = rbp_1016
	Mem1243[rsp_1140 + 0x0000000000000088:word64] = r9_1115
	Mem1247[rsp_1140 + 0x0000000000000097:byte] = r11b_1008
	Mem1248[rsp_1140 + 0x0000000000000050:word64] = r14_1119
	Mem1250[rsp_1140 + 0x0000000000000040:word64] = r15_1120
// DataOut: fs r12d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E11D:
	word64 rdi_1270
	word64 r15_1271
	word64 rcx_1272
	word32 r14d_1274
	word32 r8d_1275
	word64 rbp_1276
	word32 ebx_1280
	word32 r9d_1281
	byte SCZO_1282
	word64 rax_1283
	word32 eax_1285
	byte SZO_1286
	byte C_1287
	byte al_1288
	byte CZ_1289
	word64 r11_1290
	word32 esi_1291
	byte Z_1292
	word64 r9_1293
	word64 r14_1294
	word32 ebp_1295
	word64 r8_1296
	byte cl_1297
	word32 r12d_1299
	byte r12b_1300
	word32 r11d_1301
	word32 edx_1302
	word16 dx_1303
	byte dl_1304
	word32 edi_1305
	byte r11b_1306
	byte dil_1307
	byte sil_1308
	word32 esp_1309
	word64 r10_1310
	word64 r12_1311
	word64 rdx_1278
	call mbrtowc (retsize: 8; depth: 8)
		uses: al_1256,bLocAD_108,bLocC0_109,C_1236,cl_538,CZ_608,dil_503,dl_1266,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_21,dwLoc14_23,dwLoc18_26,dwLoc50_36,dwLocAC_107,dx_1265,eax_1255,ebp_530,ebx_1241,ecx_592,edi_502,edx_1264,esi_1232,esp_534,fs_497,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_110,qwLoc88_37,qwLocB8_33,qwLocC0_34,r10_496,r11_1228,r11b_1223,r11d_1222,r12_1246,r12b_1245,r12d_1244,r13_1251,r14_1260,r14d_1261,r15_1262,r8_1226,r8d_1224,r9_1227,r9d_1225,rax_1254,rbp_529,rbx_1252,rcx_1258,rdi_1259,rdx_1263,rsi_1268,rsp_1253,SCZO_1267,sil_499,SZO_1235,Z_1220
		defs: al_1288,C_1287,cl_1297,CZ_1289,dil_1307,dl_1304,dx_1303,eax_1285,ebp_1295,ebx_1280,ecx_1298,edi_1305,edx_1302,esi_1291,esp_1309,fs_1284,r10_1310,r11_1290,r11b_1306,r11d_1301,r12_1311,r12b_1300,r12d_1299,r13_1277,r14_1294,r14d_1274,r15_1271,r8_1296,r8d_1275,r9_1293,r9d_1281,rax_1283,rbp_1276,rbx_1279,rcx_1272,rdi_1270,rdx_1278,rsi_1273,rsp_1269,SCZO_1282,sil_1308,SZO_1286,Z_1292
	branch rax_1283 == 0x0000000000000000 l000000000040E30E
// DataOut: eax fs r12d r13 r14 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> rcx:<invalid> rbp:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E30E:
	r11d_1007 = (word32) Mem1250[rsp_1140 + 0x0000000000000097:byte]
	r12d_1005 = (word32) Mem1250[rsp_1140 + 0x0000000000000096:byte]
	rax_1129 = rbx_1015
	rbp_1016 = Mem1250[rsp_1140 + 0x0000000000000048:word64]
	*r9Out = Mem1250[rsp_1140 + 0x0000000000000088:word64]
	r11b_1008 = (byte) r11d_1007 (alias)
	*r8Out = r13_122
	rbx_1015 = Mem1250[rsp_1140 + 0x0000000000000080:word64]
	r12b_1006 = (byte) r12d_1005 (alias)
	*r12Out = DPB(r12_1311, r12d_1005, 0)
	rdx_1124 = DPB(rdx_1278, r12d_1299 ^ 0x00000001, 0) (alias)
	dl_1127 = (byte) (r12d_1299 ^ 0x00000001) (alias)
	*r14Out = Mem1250[rsp_1140 + 0x0000000000000050:word64]
	*r15Out = Mem1250[rsp_1140 + 0x0000000000000040:word64]
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E157:
	branch rax_1283 == 0xFFFFFFFFFFFFFFFF l000000000040E350
// DataOut: eax fs r12d r13 r14 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E350:
	r12d_1005 = (word32) Mem1250[rsp_1140 + 0x0000000000000096:byte]
	r11d_1007 = (word32) Mem1250[rsp_1140 + 0x0000000000000097:byte]
	rax_1129 = rbx_1015
	rbp_1016 = Mem1250[rsp_1140 + 0x0000000000000048:word64]
	*r9Out = Mem1250[rsp_1140 + 0x0000000000000088:word64]
	r12b_1006 = (byte) r12d_1005 (alias)
	*r12Out = DPB(r12_1311, r12d_1005, 0)
	r11b_1008 = (byte) r11d_1007 (alias)
	*r8Out = r13_122
	rbx_1015 = Mem1250[rsp_1140 + 0x0000000000000080:word64]
	*r14Out = Mem1250[rsp_1140 + 0x0000000000000050:word64]
	rdx_1124 = DPB(rdx_1278, 0x00000001, 0) (alias)
	dl_1127 = 0x01 (alias)
	*r15Out = Mem1250[rsp_1140 + 0x0000000000000040:word64]
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E161:
	branch rax_1283 == 0xFFFFFFFFFFFFFFFE l000000000040E391
// DataOut: eax fs r12d r13 r14 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E391:
	r12d_1005 = (word32) Mem1250[rsp_1140 + 0x0000000000000096:byte]
	r11d_1007 = (word32) Mem1250[rsp_1140 + 0x0000000000000097:byte]
	r15_1120 = Mem1250[rsp_1140 + 0x0000000000000040:word64]
	*r15Out = r15_1120
	rsi_1018 = r14_1294
	rax_1129 = rbx_1015 + 0x0000000000000001
	*r8Out = r13_122
	rbp_1016 = Mem1250[rsp_1140 + 0x0000000000000048:word64]
	*r9Out = Mem1250[rsp_1140 + 0x0000000000000088:word64]
	r12b_1006 = (byte) r12d_1005 (alias)
	*r12Out = DPB(r12_1311, r12d_1005, 0)
	r11b_1008 = (byte) r11d_1007 (alias)
	rbx_1015 = Mem1250[rsp_1140 + 0x0000000000000080:word64]
	*r14Out = Mem1250[rsp_1140 + 0x0000000000000050:word64]
	word64 r13_1575 = Mem1250[rsp_1140 + 0x0000000000000098:word64]
	branch r15_1120 <=u r14_1294 l000000000040E3FE
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3DB:
	branch Mem1250[rdx_1278:byte] != 0x00 l000000000040E3F0
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> r10:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3F0:
	word64 rax_1591 = rax_1129 + 0x0000000000000000
	branch r15_1120 >u rbp_1016 + rax_1591 l000000000040E3E8
	rax_1129 = rax_1591 + 0x0000000000000001
	rdx_1278 = rbp_1016 + (rax_1591 + 0x0000000000000001)
	branch r15_1120 >u rdx_1278 l000000000040E3E8
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> r10:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3E8:
	branch Mem1250[r13_1575 + (rax_1591 + 0x0000000000000001):byte] == 0x00 l000000000040E3FE
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> r10:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3E1:
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> r10:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3FE:
	rdx_1124 = DPB(rdx_1278, 0x00000001, 0) (alias)
	dl_1127 = 0x01 (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> r10:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E16B:
	branch Mem1250[rsp_1140 + 0x0000000000000033:byte] == 0x00 l000000000040E1BF
// DataOut: eax fs r12d r13 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E172:
	branch Mem1250[rsp_1140 + 0x0000000000000034:word32] != 0x00000002 l000000000040E1BF
// DataOut: eax fs r12d r13 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E179:
	branch rax_1283 == 0x0000000000000001 l000000000040E1BF
// DataOut: eax fs r12d r13 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E17F:
	word64 rdx_1506 = DPB(rdx_1278, 0x00000001, 0)
	word64 rax_1510 = DPB(rax_1283, 0x00000001, 0)
	r15_1512 = r15_1271
	rdi_1522 = rdi_1270
// DataOut: eax fs r12d r13 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E190:
	word64 r15_1512
	word64 rdi_1522
	rdi_1522 = DPB(rdi_1522, (word32) Mem1250[r15_1512 + rdx_1506:byte], 0) (alias)
	ecx_1003 = rdi_1522 - 0x000000000000005B
	byte cl_1527 = (byte) (rdi_1522 - 0x000000000000005B)
	branch cl_1527 >u 0x21 l000000000040E1B6
// DataOut: cl eax fs r12d r13 r15 rax rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:0x00000001 r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:0x01 cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E19D:
	r15_1512 = 0x000000000000002B
	branch (rax_1510 << cl_1527 & rdi_1522) != 0x0000000000000000 l000000000040E260
// DataOut: eax fs r12d r13 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:0x00000001 r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:0x01 cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E260:
	r11_104 = Mem1250[rsp_1140 + 0x0000000000000050:word64]
	r11d_1007 = (word32) r11_104 (alias)
	r11b_1008 = (byte) r11_104 (alias)
	r15_1120 = Mem1250[rsp_1140 + 0x0000000000000040:word64]
// DataOut: fs r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:0x000000000000002B r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:0x00000001 r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:0x01 cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1B6:
	rdx_1506 = rdx_1506 + 0x0000000000000001
	branch rdx_1506 != rax_1283 l000000000040E190
// DataOut: eax fs r12d r13 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:0x00000001 r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:0x01 cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1BF:
	word64 rsp_1373
	word64 rdi_1374
	word64 r15_1375
	word64 rcx_1376
	word64 rsi_1377
	word32 r14d_1378
	word32 r8d_1379
	word64 rbp_1380
	word64 r13_1381
	word64 rdx_1382
	word64 rbx_1383
	word32 ebx_1384
	word32 r9d_1385
	byte SCZO_1386
	word64 rax_1387
	selector fs_1388
	word32 eax_1389
	byte SZO_1390
	byte C_1391
	byte al_1392
	byte CZ_1393
	word64 r11_1394
	word32 esi_1395
	byte Z_1396
	word64 r9_1397
	word64 r14_1398
	word32 ebp_1399
	word64 r8_1400
	byte cl_1401
	word32 ecx_1402
	word32 r12d_1403
	byte r12b_1404
	word32 r11d_1405
	word32 edx_1406
	word16 dx_1407
	byte dl_1408
	word32 edi_1409
	byte r11b_1410
	byte dil_1411
	byte sil_1412
	word32 esp_1413
	word64 r10_1414
	word64 r12_1415
	call iswprint (retsize: 8; depth: 8)
		uses: al_1288,bLocAD_108,bLocC0_109,C_1314,cl_1297,CZ_1289,dil_1307,dl_1304,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_21,dwLoc14_23,dwLoc18_26,dwLoc50_36,dwLocAC_107,dx_1303,eax_1285,ebp_1316,ebx_1280,ecx_1298,edi_1372,edx_1302,esi_1291,esp_1309,fs_1284,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_110,qwLoc88_37,qwLocB8_33,qwLocC0_34,r10_1310,r11_1290,r11b_1306,r11d_1301,r12_1311,r12b_1300,r12d_1299,r13_1277,r14_1294,r14d_1274,r15_1271,r8_1296,r8d_1275,r9_1293,r9d_1281,rax_1283,rbp_1315,rbx_1279,rcx_1272,rdi_1270,rdx_1278,rsi_1273,rsp_1269,SCZO_1370,sil_1308,SZO_1312,Z_1371
		defs: al_1392,C_1391,cl_1401,CZ_1393,dil_1411,dl_1408,dx_1407,eax_1389,ebp_1399,ebx_1384,ecx_1402,edi_1409,edx_1406,esi_1395,esp_1413,fs_1388,r10_1414,r11_1394,r11b_1410,r11d_1405,r12_1415,r12b_1404,r12d_1403,r13_1381,r14_1398,r14d_1378,r15_1375,r8_1400,r8d_1379,r9_1397,r9d_1385,rax_1387,rbp_1380,rbx_1383,rcx_1376,rdi_1374,rdx_1382,rsi_1377,rsp_1373,SCZO_1386,sil_1412,SZO_1390,Z_1396
	branch eax_1389 != 0x00000000 l000000000040E1DE
// DataOut: fs r12d r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1DA_1:
// DataOut: fs r12d r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:0x00000000 r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:0x00 cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1DE:
	word64 rdi_1425
	word64 r15_1426
	word64 rcx_1427
	word32 r14d_1429
	word32 r8d_1430
	word64 rbp_1431
	word64 r13_1432
	word64 rdx_1433
	word64 rbx_1434
	word32 ebx_1435
	word32 r9d_1436
	byte SCZO_1437
	word64 rax_1438
	word32 eax_1440
	byte SZO_1441
	byte C_1442
	byte al_1443
	byte CZ_1444
	word64 r11_1445
	word32 esi_1446
	byte Z_1447
	word64 r9_1448
	word64 r14_1449
	word32 ebp_1450
	word64 r8_1451
	byte cl_1452
	word32 r12d_1454
	byte r12b_1455
	word32 r11d_1456
	word32 edx_1457
	word16 dx_1458
	byte dl_1459
	word32 edi_1460
	byte r11b_1461
	byte dil_1462
	byte sil_1463
	word32 esp_1464
	word64 r10_1465
	word64 r12_1466
	call mbsinit (retsize: 8; depth: 8)
		uses: al_1392,bLocAD_108,bLocC0_109,C_1419,cl_1401,CZ_1393,dil_1411,dl_1408,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_21,dwLoc14_23,dwLoc18_26,dwLoc50_36,dwLocAC_107,dx_1407,eax_1420,ebp_1399,ebx_1422,ecx_1402,edi_1409,edx_1406,esi_1395,esp_1413,fs_1388,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_110,qwLoc88_37,qwLocB8_33,qwLocC0_34,r10_1414,r11_1394,r11b_1410,r11d_1405,r12_1415,r12b_1404,r12d_1403,r13_1381,r14_1398,r14d_1378,r15_1375,r8_1400,r8d_1379,r9_1397,r9d_1385,rax_1387,rbp_1380,rbx_1421,rcx_1376,rdi_1416,rdx_1382,rsi_1377,rsp_1373,SCZO_1423,sil_1412,SZO_1417,Z_1418
		defs: al_1443,C_1442,cl_1452,CZ_1444,dil_1462,dl_1459,dx_1458,eax_1440,ebp_1450,ebx_1435,ecx_1453,edi_1460,edx_1457,esi_1446,esp_1464,fs_1439,r10_1465,r11_1445,r11b_1461,r11d_1456,r12_1466,r12b_1455,r12d_1454,r13_1432,r14_1449,r14d_1429,r15_1426,r8_1451,r8d_1430,r9_1448,r9d_1436,rax_1438,rbp_1431,rbx_1434,rcx_1427,rdi_1425,rdx_1433,rsi_1428,rsp_1424,SCZO_1437,sil_1463,SZO_1441,Z_1447
	branch 0x00000000 == 0x00000000 l000000000040E11D
// DataOut: fs r12d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:0x00000000 r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:0x00 cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1EE:
	r11d_1007 = (word32) Mem1250[rsp_1140 + 0x0000000000000097:byte]
	r12d_1005 = (word32) Mem1250[rsp_1140 + 0x0000000000000096:byte]
	r11b_1008 = (byte) r11d_1007 (alias)
	r12b_1006 = (byte) r12d_1005 (alias)
	*r12Out = DPB(r12_1466, r12d_1005, 0)
	rax_1129 = rbx_1434
	rbp_1016 = Mem1250[rsp_1140 + 0x0000000000000048:word64]
	*r9Out = Mem1250[rsp_1140 + 0x0000000000000088:word64]
	rbx_1015 = Mem1250[rsp_1140 + 0x0000000000000080:word64]
	*r14Out = Mem1250[rsp_1140 + 0x0000000000000050:word64]
	*r15Out = Mem1250[rsp_1140 + 0x0000000000000040:word64]
	*r8Out = r13_1432
	rdx_1124 = DPB(rdx_1433, r12d_1454 ^ 0x00000001, 0) (alias)
	dl_1127 = (byte) (r12d_1454 ^ 0x00000001) (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E22D:
	branch rax_1129 <=u 0x0000000000000001 l000000000040DE61
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E237:
	dl_1142 = dl_1127 & Mem1250[rsp_1140 + 0x0000000000000020:byte]
	rdx_1143 = DPB(rdx_1124, dl_1142, 0) (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE24:
	Mem1149[rsp_1140 + 0x0000000000000050:word64] = r8_1114
	Mem1150[rsp_1140 + 0x0000000000000048:word64] = r9_1115
	Mem1151[rsp_1140 + 0x0000000000000040:word32] = r11d_1007
	word64 rdi_1153
	word64 rcx_1155
	word32 r14d_1157
	word32 r8d_1158
	word64 r13_1160
	word64 rdx_1161
	word32 ebx_1163
	word32 r9d_1164
	byte SCZO_1165
	word64 rax_1166
	word32 eax_1168
	byte SZO_1169
	byte C_1170
	byte al_1171
	byte CZ_1172
	word64 r11_1173
	word32 esi_1174
	byte Z_1175
	word64 r9_1176
	word32 ebp_1178
	word64 r8_1179
	byte cl_1180
	word32 r11d_1184
	word32 edx_1185
	word16 dx_1186
	byte dl_1187
	word32 edi_1188
	byte r11b_1189
	byte dil_1190
	byte sil_1191
	word32 esp_1192
	word64 r10_1193
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_596,bLocAD_108,bLocC0_109,C_600,cl_538,CZ_608,dil_503,dl_520,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_21,dwLoc14_23,dwLoc18_26,dwLoc50_36,dwLocAC_107,dx_519,eax_595,ebp_530,ebx_598,ecx_592,edi_502,edx_518,esi_525,esp_534,fs_497,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_110,qwLoc88_37,qwLocB8_33,qwLocC0_34,r10_496,r11_590,r11b_585,r11d_584,r12_606,r12b_605,r12d_604,r13_591,r14_513,r14d_498,r15_514,r8_588,r8d_586,r9_589,r9d_587,rax_594,rbp_529,rbx_601,rcx_539,rdi_603,rdx_593,rsi_602,rsp_533,SCZO_957,sil_499,SZO_599,Z_958
		defs: al_1171,C_1170,cl_1180,CZ_1172,dil_1190,dl_1187,dx_1186,eax_1168,ebp_1178,ebx_1163,ecx_1181,edi_1188,edx_1185,esi_1174,esp_1192,fs_1167,r10_1193,r11_1173,r11b_1189,r11d_1184,r12_1194,r12b_1183,r12d_1182,r13_1160,r14_1177,r14d_1157,r15_1154,r8_1179,r8d_1158,r9_1176,r9d_1164,rax_1166,rbp_1159,rbx_1162,rcx_1155,rdi_1153,rdx_1161,rsi_1156,rsp_1152,SCZO_1165,sil_1191,SZO_1169,Z_1175
	word64 rax_1195 = Mem1151[rax_1166:word64]
	word32 edx_1205 = (word32) Mem1151[rax_1195 + DPB(rdx_1161, (word32) r12b_1006, 0) * 0x0002:word16]
	r11d_1007 = Mem1151[rsp_1140 + 0x0000000000000040:word32]
	word32 edx_1213 = (DPB(edx_1205, (word16) edx_1205 >>u 0x000E, 0) ^ 0x00000001) & 0x00000001
	r11b_1008 = (byte) r11d_1007 (alias)
	*r9Out = Mem1151[rsp_1140 + 0x0000000000000048:word64]
	*r8Out = Mem1151[rsp_1140 + 0x0000000000000050:word64]
	rax_1129 = DPB(rax_1195, 0x00000001, 0) (alias)
	rdx_1124 = DPB(rdx_1161, edx_1213, 0) (alias)
	dl_1127 = (byte) edx_1213 (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE61:
	dl_1142 = dl_1127 & Mem161[rsp_1140 + 0x0000000000000020:byte]
	rdx_1143 = DPB(rdx_1124, dl_1142, 0) (alias)
	branch dl_1142 == 0x00 l000000000040DAF8
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE6B:
	word64 rcx_1001 = Mem161[rsp_1140 + 0x0000000000000028:word64]
	rax_1129 = rax_1129 + rbp_1016
	byte dil_1000 = (byte) (word32) Mem161[rsp_1140 + 0x0000000000000033:byte]
	ecx_1003 = (word32) rcx_1001 (alias)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF0:
	branch dl_1142 != 0x00 l000000000040DE80
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE80:
	branch dil_1000 != 0x00 l000000000040DC40
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE89:
	branch rbx_1015 >=u r14_1119 l000000000040DE92
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE8E:
	Mem1101[rcx_1001 + rbx_1015:byte] = 0x5C
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE92:
	branch r14_1119 <=u rbx_1015 + 0x0000000000000001 l000000000040DEAA
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE9B:
	Mem1100[rcx_1001 + 0x0000000000000001 + rbx_1015:byte] = (byte) (DPB(r12d_1005, (byte) r12d_1005 >>u 0x06, 0) + 0x00000030)
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEAA:
	rsi_1018 = rbx_1015 + 0x0000000000000002
	branch r14_1119 <=u rsi_1018 l000000000040DEC5
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> sil:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEB3:
	Mem1092[rcx_1001 + 0x0000000000000002 + rbx_1015:byte] = (byte) ((DPB(r12d_1005, (byte) r12d_1005 >>u 0x03, 0) & 0x00000007) + 0x00000030)
// DataOut: dil dl fs r11b r11d r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> sil:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEC5:
	word32 r12d_1077 = r12d_1005 & 0x00000007
	rbx_1015 = rbx_1015 + 0x0000000000000003
	r12b_1006 = (byte) (r12d_1077 + 0x00000030) (alias)
	*r12Out = DPB(r12_1010, r12d_1077 + 0x00000030, 0)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> sil:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF4:
	branch r11b_1008 == 0x00 l000000000040DED1
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF9:
	branch rbx_1015 >=u r14_1119 l000000000040DF02
// DataOut: dil dl fs r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEFE:
	Mem1061[rcx_1001 + rbx_1015:byte] = 0x5C
// DataOut: dil dl fs r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF02:
	rbx_1015 = rbx_1015 + 0x0000000000000001
	r11d_1007 = 0x00000000
	r11b_1008 = 0x00 (alias)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DED1:
	rbp_1016 = rbp_1016 + 0x0000000000000001
	branch rax_1129 <=u rbp_1016 l000000000040DB54
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> sil:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEDE:
	branch rbx_1015 >=u r14_1119 l000000000040DEE7
// DataOut: dil dl fs r11b r11d r12b r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> sil:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEE3:
	Mem1048[rcx_1001 + rbx_1015:byte] = r12b_1006
// DataOut: dil dl fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> sil:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEE7:
	r12d_1005 = (word32) Mem161[r8_1114 + rbp_1016:byte]
	r12b_1006 = (byte) r12d_1005 (alias)
	*r12Out = DPB(r12_1010, r12d_1005, 0)
	rbx_1015 = rbx_1015 + 0x0000000000000001
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> sil:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA2F:
	rax_1129 = DPB(rax_1667, (word32) r12b_1006, 0) (alias)
	switch (rax_1129) { l000000000040DD20 }
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD20:
	branch Mem161[rsp_1140 + 0x0000000000000020:byte] == 0x00 l000000000040E240
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E240:
	branch (Mem161[rsp_1140 + 0x0000000000000090:byte] & 0x01) == 0x00 l000000000040DAF8
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DAF8:
	branch Mem161[rsp_1140 + 0x0000000000000038:byte] == 0x00 l000000000040DB09
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DAFF:
	branch Mem161[rsp_1140 + 0x0000000000000095:byte] != 0x00 l000000000040DB2E
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E24E:
	rbp_1016 = rbp_1016 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD2B:
	branch Mem161[rsp_1140 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD36:
	branch rbx_1015 >=u r14_1119 l000000000040DD44
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD3B:
	Mem950[Mem161[rsp_1140 + 0x0000000000000028:word64] + rbx_1015:byte] = 0x5C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD44:
	rdx_1143 = rbp_1016 + 0x0000000000000001
	rax_1129 = rbx_1015 + 0x0000000000000001
	branch r15_1120 <=u rdx_1143 l000000000040DD80
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD51:
	rsi_1018 = DPB(rsi_1018, (word32) Mem161[r8_1114 + 0x0000000000000001 + rbp_1016:byte], 0) (alias)
	branch (byte) (rsi_1018 - 0x0000000000000030) >u 0x09 l000000000040DD80
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD5F:
	branch r14_1119 >u rax_1129 l000000000040E300
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E300:
	rsi_1018 = Mem161[rsp_1140 + 0x0000000000000028:word64]
	Mem948[rsi_1018 + rax_1129:byte] = 0x30
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD68:
	branch r14_1119 <=u rbx_1015 + 0x0000000000000002 l000000000040DD7B
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD71:
	Mem946[Mem161[rsp_1140 + 0x0000000000000028:word64] + 0x0000000000000002 + rbx_1015:byte] = 0x30
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD7B:
	rax_1129 = rbx_1015 + 0x0000000000000003
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD80:
	rbx_1015 = rax_1129
	rsp_1140 = DPB(rsp_1140, 0x00000030, 0) (alias)
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB09:
	word64 rdi_839 = Mem161[rsp_1140 + 0x0000000000000058:word64]
	branch rdi_839 == 0x0000000000000000 l000000000040DB2E
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> esp:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB13:
	ecx_1003 = r12d_1005 & 0x0000001F
	rdx_1143 = DPB(rdx_1143, (word32) ((byte) r12d_1005 >>u 0x05), 0) (alias)
	branch (Mem161[rdi_839 + rdx_1143 * 0x00000004:word32] & 0x00000001 << (byte) ecx_1003) != 0x00000000 l000000000040DB33
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> rbx:<invalid> esp:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB2E:
	branch r11b_1008 == 0x00 l000000000040DB50
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB33:
	branch Mem161[rsp_1140 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC40:
	r11_104 = r14_1119
	r11d_1007 = (word32) r14_1119 (alias)
	r11b_1008 = (byte) r14_1119 (alias)
	r13_122 = r8_1114
// DataOut: fs r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rbx:<invalid> esp:<invalid> r9d:<invalid> r8d:<invalid> rbp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB3E:
	branch rbx_1015 >=u r14_1119 l000000000040DB4C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB43:
	rax_1129 = Mem161[rsp_1140 + 0x0000000000000028:word64]
	Mem758[rax_1129 + rbx_1015:byte] = 0x5C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB4C:
	rbx_1015 = rbx_1015 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB50:
	rbp_1016 = rbp_1016 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB54:
	branch rbx_1015 >=u r14_1119 l000000000040DB62
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> rbp:<invalid> edi:<invalid> rcx:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB59:
	rax_1129 = Mem161[rsp_1140 + 0x0000000000000028:word64]
	Mem663[rax_1129 + rbx_1015:byte] = r12b_1006
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> rbp:<invalid> edi:<invalid> rcx:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB62:
	al_1741 = rbp_1016 != r15_1120
	rbx_1015 = rbx_1015 + 0x0000000000000001
	rax_1667 = DPB(rax_1129, al_1741, 0) (alias)
	branch r15_1120 != 0xFFFFFFFFFFFFFFFF l000000000040D9A0
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> rbp:<invalid> edi:<invalid> rcx:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB76:
	byte al_490 = Mem161[r8_1114 + rbp_1016:byte] != 0x00
	rax_1667 = DPB(rax_1667, al_490, 0) (alias)
	branch al_490 != 0x00 l000000000040D9A8
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB86:
	r11_104 = r14_1119
	*r11Out = r11_104
	r11d_1007 = (word32) r14_1119 (alias)
	r11b_1008 = (byte) r14_1119 (alias)
	r13_122 = r8_1114
	*r13Out = r13_122
	branch rbx_1015 != 0x0000000000000000 l000000000040DBA3
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB91:
	branch Mem161[rsp_1140 + 0x0000000000000034:word32] != 0x00000002 l000000000040DBA3
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB98:
	branch Mem161[rsp_1140 + 0x0000000000000033:byte] != 0x00 l000000000040DC46
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC46:
	word64 rax_314 = Mem161[rsp_1140 + 0x0000000000000068:word64]
	word32 r9d_315 = Mem161[rsp_1140 + 0x0000000000000090:word32]
	word32 r8d_317 = Mem161[rsp_1140 + 0x0000000000000034:word32]
	word64 rdi_319 = Mem161[rsp_1140 + 0x0000000000000028:word64]
	Mem321[rsp_1140:word64] = 0x0000000000000000
	Mem323[rsp_1140 + 0x0000000000000010:word64] = rax_314
	Mem329[rsp_1140 + 0x0000000000000008:word64] = Mem323[rsp_1140 + 0x0000000000000070:word64]
	rdx_1143 = r13_122
	word64 r8_333
	word64 r9_334
	rax_1129 = fn000000000040D8A0(r15_1120, r13_122, r11_104, rdi_319, r8d_317, r9d_315 & 0xFFFFFFFD, fs_1103, qwArg18, qwArg20, qwArg28, out rsp_1140, out rbp_1016, out r8_333, out r9_334, out r11_104, out r12_1010, out r13_122, out r14_1119, out r15_1120)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> r9d:<invalid> r8d:<invalid> rbx:<invalid> esp:<invalid> rbp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBA3:
	branch Mem161[rsp_1140 + 0x0000000000000033:byte] != 0x00 l000000000040DBE4
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBAA:
	branch Mem161[rsp_1140 + 0x0000000000000060:word64] == 0x0000000000000000 l000000000040DBE4
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBB2:
	rdx_1143 = Mem161[rsp_1140 + 0x0000000000000060:word64]
	byte al_415 = (byte) (word32) Mem161[rdx_1143:byte]
	branch al_415 == 0x00 l000000000040DBE4
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBBE:
	word64 rcx_419 = Mem161[rsp_1140 + 0x0000000000000028:word64]
	ecx_1003 = (word32) rcx_419 (alias)
	rdx_1143 = rdx_1143 - rbx_1015
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD0:
	branch r14_1119 <=u rbx_1015 l000000000040DBD8
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> r9d:<invalid> r8d:<invalid> rdi:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD5:
	Mem445[rcx_419 + rbx_1015:byte] = al_415
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> r9d:<invalid> r8d:<invalid> rdi:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD8:
	rbx_1015 = rbx_1015 + 0x0000000000000001
	al_415 = (byte) (word32) Mem161[rdx_1143 + rbx_1015:byte] (alias)
	branch al_415 != 0x00 l000000000040DBD0
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> r9d:<invalid> r8d:<invalid> rdi:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBE4:
	rax_1129 = rbx_1015
	branch rbx_1015 >=u r14_1119 l000000000040DC86
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> r9d:<invalid> r8d:<invalid> rdi:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBF0:
	Mem406[Mem161[rsp_1140 + 0x0000000000000028:word64] + rbx_1015:byte] = 0x00
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> r9d:<invalid> r8d:<invalid> rdi:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC86:
	rsi_1018 = Mem161[rsp_1140 + 0x00000000000000B8:word64] ^ Mem161[fs_1103:0x00000028:word64]
	branch rsi_1018 != 0x0000000000000000 l000000000040E423
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> rbx:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E423:
	__stack_chk_fail()
	Mem278[rsp_1140 + 0x0000000000000020:byte] = 0x01
	Mem280[rsp_1140 + 0x0000000000000060:word64] = 0x0000000000415FEB
	rbx_1015 = DPB(rbx_1015, 0x00000000, 0) (alias)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> rbx:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC9D:
	word64 rsp_259 = Mem161[rsp_1140 + 0x00000000000000D8:word64]
	word64 rbp_261
	*rbpOut = Mem161[rsp_259 + 0x0000000000000008:word64]
	word64 rsp_267
	*rspOut = rsp_259 + 0x0000000000000020
	return rax_1129
// DataOut: ebp fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> rbx:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040D8A0_exit:
// DataOut: ebp r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040E450(word64 rcx, word64 rdx, word32 ebx, word32 ebp, word64 rsi, word32 edi, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r11Out, ptr64 & r12bOut, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx edi esi fs r11 rcx rdx rsi
// LiveOut: ebp ebx r11 r12b r13 r14 r15 rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040E450_entry:
// DataOut: ebp ebx edi esi fs r11 rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l000000000040E450:
	Mem4[v3 - 0x0000000000000004:word32] = rdi
	Mem10[v3 - 0x0000000000000008:word32] = rsi
	Mem13[v3 - 0x000000000000000C:word32] = rbp
	Mem16[v3 - 0x0000000000000010:word32] = v3 - 0x000000000000000C
	Mem18[v3 - 0x0000000000000014:word32] = rbp
	Mem21[v3 - 0x0000000000000018:word32] = rbx
	Mem26[v3 - 0x0000000000000040:word64] = rsi
	Mem28[v3 - 0x0000000000000038:word64] = rdx
	word32 eax_31 = Mem28[__errno_location():word32]
	word64 r12_192 = Mem28[0x000000000061A5D8:word64]
	Mem37[v3 - 0x000000000000002C:word32] = eax_31
	word64 r15_6 = (int64) edi
	word32 r15d_7 = (word32) r15_6
	word64 rsp_195 = v3 - 0x0000000000000060
	branch r15d_7 < 0x00000000 l000000000040E5F7
// DataOut: edi fs r11 r12 r15 r15d rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E5F7:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid>

l000000000040E48C:
	branch r15d_7 <u Mem37[0x000000000061A5F0:word32] l000000000040E4FA
// DataOut: edi fs r11 r12 r15 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid>

l000000000040E495:
	word64 rdi_194
	word64 r14_183 = DPB(r14, rdi + 0x0000000000000001, 0)
	word64 rsi_185 = r14_183 << 0x0000000000000004
	branch r12_192 != 0x000000000061A5E0 l000000000040E5E0
// DataOut: ebp fs r11 r12 r14 r15 rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid>

l000000000040E5E0:
	word64 rax_223 = fn0000000000410C90(rdx, r14_183 << 0x0000000000000004, r12_192, out rsp_195)
	Mem226[0x000000000061A5D8:word64] = rax_223
	rdi_194 = r12_192
	r12_192 = rax_223
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14d:rdi + 0x0000000000000001 rsi:r14 << 0x0000000000000004

l000000000040E4B0:
	word64 rax_213 = fn0000000000410C90(rdx, r14_183 << 0x0000000000000004, DPB(rdi, 0x00000000, 0), out rsp_195)
	rsi_185 = Mem37[0x000000000061A5E0:word64]
	rdi_194 = Mem37[0x000000000061A5E8:word64]
	Mem218[0x000000000061A5D8:word64] = rax_213
	Mem219[rax_213:word64] = rsi_185
	Mem220[rax_213 + 0x0000000000000008:word64] = rdi_194
	r12_192 = rax_213
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14d:rdi + 0x0000000000000001 rsi:r14 << 0x0000000000000004

l000000000040E4D6:
	word64 rdi_197 = DPB(rdi_194, Mem37[0x000000000061A5F0:word32], 0)
	memset((rdi_197 << 0x0000000000000004) + r12_192, DPB(rsi_185, 0x00000000, 0), r14_183 - rdi_197 << 0x0000000000000004)
	Mem207[0x000000000061A5F0:word32] = rdi + 0x0000000000000001
// DataOut: fs r11 r12 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14d:rdi + 0x0000000000000001 rsi:<invalid> edi:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> esi:<invalid> r8:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9

l000000000040E4FA:
	word64 r12_51 = r12_192 + (r15_6 << 0x0000000000000004)
	word32 ebp_50 = Mem37[rcx + 0x0000000000000004:word32]
	word32 r8d_54 = Mem37[r11:word32]
	word64 r11_59 = Mem37[r12_51:word64]
	word64 r14_60 = Mem37[r12_51 + 0x0000000000000008:word64]
	Mem62[rsp_195 + 0x0000000000000010:word64] = Mem37[rcx + 0x0000000000000030:word64]
	word64 rax_63 = Mem62[rcx + 0x0000000000000028:word64]
	word64 rcx_68 = Mem62[rsp_195 + 0x0000000000000028:word64]
	word64 rdx_69 = Mem62[rsp_195 + 0x0000000000000020:word64]
	Mem74[rsp_195:word64] = r11 + 0x0000000000000008
	Mem76[rsp_195 + 0x0000000000000008:word64] = rax_63
	Mem77[rsp_195 + 0x0000000000000038:word64] = r11_59
	word64 r8_84
	word64 r9_85
	word64 r11_86
	word64 r12_87
	word64 r13_88
	word64 r14_89
	word64 r15_90
	word64 rbp_110
	word64 rsp_111
	word64 rax_91 = fn000000000040D8A0(rcx_68, rdx_69, r11_59, r14_60, r8d_54, ebp_50 | 0x00000001, fs, qwArg18, qwArg20, qwArg28, out rsp_111, out rbp_110, out r8_84, out r9_85, out r11_86, out r12_87, out r13_88, out r14_89, out r15_90)
	byte r12b_52
	*r12bOut = (byte) r12_51
	word64 r11_93 = Mem77[rsp_111 + 0x0000000000000038:word64]
	*r11Out = r11_93
	branch r11_93 >u rax_91 l000000000040E5BF
// DataOut: ebp fs r11 r12 r12b r13 r14 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14d:rdi + 0x0000000000000001 rsi:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> r8:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9

l000000000040E554:
	Mem142[r12_87:word64] = rax_91 + 0x0000000000000001
	word64 rsi_138 = rax_91 + 0x0000000000000001
	branch r14_89 == 0x000000000061B220 l000000000040E577
// DataOut: ebp fs r11 r12 r14 r15 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9d:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> edi:<invalid> esi:<invalid> edx:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> rbp:<invalid> ecx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid>

l000000000040E565:
	Mem176[rsp_111 + 0x0000000000000038:word64] = rax_91 + 0x0000000000000001
	free(r14_89)
	rsi_138 = Mem176[rsp_111 + 0x0000000000000038:word64]
// DataOut: ebp fs r11 r12 r15 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9d:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> edi:<invalid> esi:<invalid> edx:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> rbp:<invalid> ecx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid>

l000000000040E577:
	Mem146[rsp_111 + 0x0000000000000038:word64] = rsi_138
	word64 rsp_147
	word64 rax_148 = fn0000000000410C40(rsi_138, rsi_138, out rsp_147)
	Mem149[r12_87 + 0x0000000000000008:word64] = rax_148
	word32 r8d_153 = Mem149[r11_93:word32]
	word64 rcx_155 = Mem149[rsp_147 + 0x0000000000000028:word64]
	word64 rdx_158 = Mem149[rsp_147 + 0x0000000000000020:word64]
	word64 rsi_159 = Mem149[rsp_147 + 0x0000000000000038:word64]
	Mem161[rsp_147 + 0x0000000000000010:word64] = Mem149[rcx + 0x0000000000000030:word64]
	word64 rax_162 = Mem161[rcx + 0x0000000000000028:word64]
	Mem163[rsp_147:word64] = r15_90
	Mem164[rsp_147 + 0x0000000000000008:word64] = rax_162
	word64 r8_167
	word64 r9_168
	word64 r11_169
	word64 r12_170
	word64 r13_171
	word64 r14_172
	word64 r15_173
	fn000000000040D8A0(rcx_155, rdx_158, rsi_159, rax_148, r8d_153, ebp_50 | 0x00000001, fs, qwArg18, qwArg20, qwArg28, out rsp_111, out rbp_110, out r8_167, out r9_168, out r11_169, out r12_170, out r13_171, out r14_172, out r15_173)
// DataOut: fs r11 r12b r13 r14 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9d:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> edi:<invalid> esi:<invalid> edx:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> rbp:<invalid> ecx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid>

l000000000040E5BF:
	Mem113[rbp_110:word32] = Mem77[rsp_111 + 0x0000000000000034:word32]
	word64 rsp_114 = rsp_111 + 0x0000000000000048
	word64 rsp_122 = Mem113[rsp_114 + 0x0000000000000010:word64]
	word64 rbp_124
	*rbpOut = Mem113[rsp_122 + 0x0000000000000008:word64]
	word64 rsp_130
	*rspOut = rsp_122 + 0x0000000000000020
	return Mem113[rsp_114:word64]
// DataOut: ebp ebx fs r11 r12b r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9d:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> edi:<invalid> esi:<invalid> edx:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> rbp:<invalid> ecx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid>

fn000000000040E450_exit:
// DataOut: ebp ebx r11 r12b r13 r14 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9d:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r14d:<invalid> edi:<invalid> esi:<invalid> edx:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid>



void fn000000000040E600(word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn000000000040E600_entry:
// DataOut: r11 r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E600:
	__errno_location()
	word32 r12d_16 = Mem0[r8:word32]
	branch rdi == 0x0000000000000000 l000000000040E61E
// DataOut: r11 r12d
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E61A_1:
// DataOut: r11 r12d
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12d:<invalid> edi:0x0061B320 rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040E61E:
	word64 rsp_26
	word64 rbp_27
	fn0000000000410E00(DPB(rsi, 0x00000038, 0), out rsp_26, out rbp_27)
	Mem29[r11:word32] = r12d_16
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12d:<invalid> edi:<invalid> rbx:<invalid> rdi:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040E600_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r12d:<invalid> edi:<invalid> rbx:<invalid> rdi:<invalid> esi:0x00000038 rdx:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



void fn000000000040E630(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E630_entry:
// DataOut: rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E630:
	branch rdi == 0x0000000000000000 l000000000040E63C
// DataOut: rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E638_1:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0061B320

l000000000040E63C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> rax:rdi

fn000000000040E630_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> rax:<invalid>



void fn000000000040E640(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E640_entry:
// DataOut: esi rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E640:
	word64 rax_13 = DPB(rax, 0x0061B320, 0)
	branch rdi == 0x0000000000000000 l000000000040E64C
// DataOut: esi rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E648_1:
	rax_13 = rdi
// DataOut: esi rax
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0061B320

l000000000040E64C:
	Mem12[rax_13:word32] = esi
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> rax:rdi

fn000000000040E640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> rax:rdi



void fn000000000040E650(word32 edx, byte sil, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx rdi sil
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040E650_entry:
// DataOut: edx rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E650:
	word64 rax_12 = DPB(rax, 0x0061B320, 0)
	branch rdi == 0x0000000000000000 l000000000040E65E
// DataOut: cl edx rax rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E65A_1:
	rax_12 = rdi
// DataOut: cl edx rax sil
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0061B320 ecx:esi

l000000000040E65E:
	word64 rsi_20 = rax_12 + DPB(rsi, (word32) (sil >>u 0x05), 0) * 0x0000000000000004
	byte cl_16 = (byte) (esi & 0x0000001F)
	word32 edi_22 = Mem0[rsi_20 + 0x0000000000000008:word32]
	Mem33[rsi_20 + 0x0000000000000008:word32] = ((edx ^ edi_22 >>u cl_16) & 0x00000001) << cl_16 ^ edi_22
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> ecx:esi rax:rdi

fn000000000040E650_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> ecx:esi & 0x0000001F rax:<invalid> sil:<invalid> esi:<invalid> rsi:rdi + rsi * 0x0000000000000004 edi:<invalid> edx:<invalid>



void fn000000000040E6B0(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi rax rdi
// Preserved: rsp
fn000000000040E6B0_entry:
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6B0:
	word64 rax_5 = DPB(rax, 0x0061B320, 0)
	branch rdi != 0x0000000000000000 l000000000040E6C0
// DataOut: rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6BC_1:
	rdi = rax_5
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:0x0061B320
// LocalsOut: fp(64)

l000000000040E6C0:
	Mem15[rdi:word32] = 0x00000008
	branch rsi == 0x0000000000000000 l000000000040E6DD
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:0x0061B320 rdi:rax
// LocalsOut: fp(64)

l000000000040E6CB:
	branch rdx == 0x0000000000000000 l000000000040E6DD
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:0x0061B320 rdi:rax
// LocalsOut: fp(64)

l000000000040E6DD:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:0x0061B320 rdi:rax

l000000000040E6D0:
	Mem23[rdi + 0x0000000000000028:word64] = rsi
	Mem24[rdi + 0x0000000000000030:word64] = rdx
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:0x0061B320 rdi:rax

fn000000000040E6B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0061B320 rdi:rax



word64 fn000000000040E6F0(word64 rcx, word64 rdx, word32 ebx, word32 ebp, word64 rsi, word64 rdi, word64 r8, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx edi fs r11 r8 rcx rdi rdx rsi
// LiveOut: ebp esp r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rcx rdx
fn000000000040E6F0_entry:
// DataOut: ebp ebx fs r11 r8 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6F0:
	branch r8 != 0x0000000000000000 l000000000040E716
// DataOut: ebx fs r11 r13 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0014(32) Local -0018(32)

l000000000040E712_1:
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 eax:0x0061B320 r15:rcx r14:rdx r13:rsi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0014(32) Local -0018(32)

l000000000040E716:
	__errno_location()
	word32 r12d_39 = Mem0[r8:word32]
	word64 rsp_62
	word64 rbp_63
	word64 r8_64
	word64 r9_65
	word64 r11_66
	word64 r12_67
	word64 r13_68
	word64 r14_69
	word64 r15_70
	word64 rax_71 = fn000000000040D8A0(rcx, rdx, rsi, rdi, Mem0[r11:word32], Mem0[r11 + 0x0000000000000004:word32], fs, rdi, qwLoc20, qwLoc18, out rsp_62, out rbp_63, out r8_64, out r9_65, out r11_66, out r12_67, out r13_68, out r14_69, out r15_70)
	Mem73[r13_68:word32] = r12d_39
	word64 rsp_80 = Mem73[rsp_62 + 0x0000000000000038:word64]
	word64 rbp_82
	*rbpOut = Mem73[rsp_80 + 0x0000000000000008:word64]
	word64 rsi_85
	*rsiOut = Mem73[rsp_80 + 0x0000000000000010:word64]
	word64 rdi_87
	*rdiOut = Mem73[rsp_80 + 0x0000000000000018:word64]
	word64 rsp_88
	*rspOut = rsp_80 + 0x0000000000000020
	return rax_71
// DataOut: ebp esp fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 eax:0x0061B320 r15:rcx r14:rdx r13:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040E6F0_exit:
// DataOut: ebp esp r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r12d:<invalid> rbp:<invalid> r9d:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040E930(word32 ebx, word32 ebp, word64 rdi, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx fs r11 rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040E930_entry:
// DataOut: ebp ebx fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E930:
	word64 rcx_6 = DPB(rcx, 0x0061B320, 0)
// DataOut: ebp ebx edi esi fs r11 rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E941_thunk_fn000000000040E450:
	word64 rsp_16
	word64 rbp_17
	word64 r11_18
	byte r12b_19
	word64 r13_20
	word64 r14_21
	word64 r15_22
	fn000000000040E450(rcx_6, 0xFFFFFFFFFFFFFFFF, ebx, ebp, rdi, 0x00000000, r11, fs, out rsp_16, out rbp_17, out r11_18, out r12b_19, out r13_20, out r14_21, out r15_22)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi ecx:0x0061B320 rdx:0xFFFFFFFFFFFFFFFF edi:0x00000000

fn000000000040E930_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> ecx:<invalid> rdx:<invalid> edi:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> r9d:<invalid> rdi:<invalid> rbp:<invalid> r14d:<invalid> esi:<invalid> edx:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid>



word64 fn000000000040E970(word64 rdx, word32 esi, word32 edi, word64 r11, selector fs, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi fs r11 rdx
// LiveOut: r11 r15 rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: edi rbx
fn000000000040E970_entry:
// DataOut: edi esi fs r11 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E970:
	fn000000000040D740(esi, fp - 0x0000000000000050)
	word64 rsp_23
	word64 rbp_24
	word64 r11_25
	byte r12b_26
	word64 r13_27
	word64 r14_28
	word64 r15_29
	fn000000000040E450(fp - 0x0000000000000050, 0xFFFFFFFFFFFFFFFF, edi, (word32) rdx, rdx, edi, r11, fs, out rsp_23, out rbp_24, out r11_25, out r12b_26, out r13_27, out r14_28, out r15_29)
	return rsp_23 + 0x0000000000000058
// DataOut: fs r11 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040E970_exit:
// DataOut: r11 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> rdx:<invalid> rbx:<invalid> eax:<invalid> ecx:<invalid> rax:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> r9d:<invalid> r14d:<invalid> esi:<invalid> edx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -8(fp):rbx -4(fp):rbp



byte fn000000000040EAB0(word32 ebx, word32 ebp, word64 rdi, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx fs r11 rdi
// LiveOut: r12b
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EAB0_entry:
// DataOut: ebp ebx fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EAB0:
// DataOut: ebp ebx fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EA00:
	word64 r8_14 = DPB(r8, 0x00000001, 0)
	word32 r9d_30 = Mem0[fp - 0x0000000000000040 + r8_14 * 0x00000004:word32]
	Mem43[fp - 0x0000000000000040 + r8_14 * 0x00000004:word32] = ((r9d_30 >>u 0x1A ^ 0x00000001) & 0x00000001) << 0x1A ^ r9d_30
	word64 rsp_48
	word64 rbp_49
	word64 r11_50
	byte r12b_51
	word64 r13_52
	word64 r14_53
	word64 r15_54
	fn000000000040E450(fp - 0x0000000000000048, 0xFFFFFFFFFFFFFFFF, ebx, ebp, rdi, 0x00000000, r11, fs, out rsp_48, out rbp_49, out r11_50, out r12b_51, out r13_52, out r14_53, out r15_54)
	return r12b_51
// DataOut: r12b
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:0x0000003A rsi:0xFFFFFFFFFFFFFFFF

fn000000000040EAB0_exit:
// DataOut: r12b
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> rsi:<invalid> rax:<invalid> r8d:<invalid> r8b:<invalid> ecx:<invalid> rdx:<invalid> edi:<invalid> r9d:<invalid> eax:<invalid> rcx:<invalid> r15:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> ebp:<invalid> r11:<invalid> r14:<invalid> rdi:<invalid> rbp:<invalid> r14d:<invalid> esi:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):<invalid>



word64 fn000000000040EBF0(word32 ebx, word32 ebp, word64 rsi, word32 edi, word64 r11, selector fs, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx edi esi fs r11 rsi
// LiveOut: r11 rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EBF0_entry:
// DataOut: ebp ebx edi esi fs r11 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBF0:
	word64 rcx_4 = DPB(rcx, 0x0061A5A0, 0)
// DataOut: ebp ebx edi esi fs r11 rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBFC_thunk_fn000000000040E450:
	word64 rsp_12
	word64 rbp_13
	word64 r11_14
	byte r12b_15
	word64 r13_16
	word64 r14_17
	word64 r15_18
	return fn000000000040E450(rcx_4, 0xFFFFFFFFFFFFFFFF, ebx, ebp, rsi, edi, r11, fs, out rsp_12, out rbp_13, out r11_14, out r12b_15, out r13_16, out r14_17, out r15_18)
// DataOut: fs r11 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp ecx:0x0061A5A0 rdx:0xFFFFFFFFFFFFFFFF

fn000000000040EBF0_exit:
// DataOut: r11 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:<invalid> rdx:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> r9d:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r14d:<invalid> edi:<invalid> esi:<invalid> edx:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid>



word64 fn000000000040EC10(word32 ebx, word32 ebp, word64 rdi, word64 r11, selector fs, ptr64 & rbpOut, ptr64 & r11Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx fs r11 rdi
// LiveOut: ebp ebx r11 r13 r14 r15 rbp rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EC10_entry:
// DataOut: ebp ebx fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC10:
	word64 rcx_7 = DPB(rcx, 0x0061A5A0, 0)
// DataOut: ebp ebx edi esi fs r11 rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC1F_thunk_fn000000000040E450:
	word64 rsp_17
	word64 rbp_18
	word64 r11_19
	byte r12b_20
	word64 r13_21
	word64 r14_22
	word64 r15_23
	return fn000000000040E450(rcx_7, 0xFFFFFFFFFFFFFFFF, ebx, ebp, rdi, 0x00000000, r11, fs, out rsp_17, out rbp_18, out r11_19, out r12b_20, out r13_21, out r14_22, out r15_23)
// DataOut: ebp ebx fs r11 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi ecx:0x0061A5A0 rdx:0xFFFFFFFFFFFFFFFF edi:0x00000000

fn000000000040EC10_exit:
// DataOut: ebp ebx r11 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> ecx:<invalid> rdx:<invalid> edi:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> r9d:<invalid> rdi:<invalid> rbp:<invalid> r14d:<invalid> esi:<invalid> edx:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid>



word64 fn000000000040EC30(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 qwArg04, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi rdx rsi
// LiveOut: bpl ebp r12 rax rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esp r12 r12b r12d r12w rax rbp rcx rdx rsp sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn000000000040EC30_entry:
	*r12Out = r12
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC30:
	word64 rbp_13 = rdi
	branch rdx == 0x0000000000000000 l000000000040EC69
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC40:
	word64 rsp_54
	word64 rdx_55
	byte SZO_56
	byte C_57
	word64 rdi_59
	byte Z_61
	word64 r12_62
	word64 rsi_63
	word32 ecx_64
	word64 rax_65
	word32 edx_66
	byte dl_68
	byte SCZO_69
	word32 ebp_70
	word64 rcx_67
	word64 rbx_60
	call __ctype_tolower_loc (retsize: 8; depth: 20)
		uses: C_8,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_17,ebp_14,ecx,edx,qwLoc0C,r12_52,rax,rbp_13,rbx_18,rcx,rdi,rdx,rsi,rsp_15,SCZO,SZO_6,Z_7
		defs: C_57,dl_68,ebp_70,ecx_64,edx_66,r12_62,rax_65,rbp_58,rbx_60,rcx_67,rdi_59,rdx_55,rsi_63,rsp_54,SCZO_69,SZO_56,Z_61
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:rdx - 0x0000000000000001 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC50:
	rcx_67 = DPB(rcx_67, (word32) Mem0[r12_62 + rbx_60:byte], 0) (alias)
	Mem79[rbp_13 + rbx_60:byte] = (byte) Mem0[Mem0[rax_65:word64] + rcx_67 * 0x00000004:word32]
	rbx_60 = rbx_60 - 0x0000000000000001
	branch rbx_60 != 0xFFFFFFFFFFFFFFFF l000000000040EC50
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC69:
	word32 ebp_44
	*ebpOut = (word32) fp
	word64 rsp_48
	*rspOut = qwArg04 + 0x0000000000000008
	return rbp_13
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040EC30_exit:
// DataOut: bpl ebp r12 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp rbx:rbx rax:rdi r12:rsi ecx:<invalid> rdx:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040EC80(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 qwArg04, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi rdx rsi
// LiveOut: bpl ebp r12 rax rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esp r12 r12b r12d r12w rax rbp rcx rdx rsp sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn000000000040EC80_entry:
	*r12Out = r12
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC80:
	word64 rbp_13 = rdi
	branch rdx == 0x0000000000000000 l000000000040ECB9
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC90:
	word64 rsp_54
	word64 rdx_55
	byte SZO_56
	byte C_57
	word64 rdi_59
	byte Z_61
	word64 r12_62
	word64 rsi_63
	word32 ecx_64
	word64 rax_65
	word32 edx_66
	byte dl_68
	byte SCZO_69
	word32 ebp_70
	word64 rcx_67
	word64 rbx_60
	call __ctype_toupper_loc (retsize: 8; depth: 20)
		uses: C_8,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_17,ebp_14,ecx,edx,qwLoc0C,r12_52,rax,rbp_13,rbx_18,rcx,rdi,rdx,rsi,rsp_15,SCZO,SZO_6,Z_7
		defs: C_57,dl_68,ebp_70,ecx_64,edx_66,r12_62,rax_65,rbp_58,rbx_60,rcx_67,rdi_59,rdx_55,rsi_63,rsp_54,SCZO_69,SZO_56,Z_61
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:rdx - 0x0000000000000001 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040ECA0:
	rcx_67 = DPB(rcx_67, (word32) Mem0[r12_62 + rbx_60:byte], 0) (alias)
	Mem79[rbp_13 + rbx_60:byte] = (byte) Mem0[Mem0[rax_65:word64] + rcx_67 * 0x00000004:word32]
	rbx_60 = rbx_60 - 0x0000000000000001
	branch rbx_60 != 0xFFFFFFFFFFFFFFFF l000000000040ECA0
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040ECB9:
	word32 ebp_44
	*ebpOut = (word32) fp
	word64 rsp_48
	*rspOut = qwArg04 + 0x0000000000000008
	return rbp_13
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040EC80_exit:
// DataOut: bpl ebp r12 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp rbx:rbx rax:rdi r12:rsi ecx:<invalid> rdx:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040ECD0(word64 rax, word64 rcx, word64 rdx, word32 ebp, word64 rsi, word64 rdi, word32 r9d, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & esiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl cl ebp fs r11d r14 r15b r9d rax rcx rdi rdx rsi
// LiveOut: edi esi r11 r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r11d r9d rbx
fn000000000040ECD0_entry:
	*r8Out = r8
	*r15Out = r15
	*r14Out = r14
	*r9Out = r9
	*r11Out = r11
// DataOut: bpl cl ebp fs r11 r11d r14 r14d r15 r15b r8 r9 r9d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ECD0:
	word64 rax_27 = Mem0[rax + 0x0000000000000030:word64]
	word64 r10_457 = rdx
	word64 r12_1029
	*r12Out = rsi
	word64 rbx_1002 = rcx
	word64 rsp_138 = fp - 0x00000000000004F0
	word32 esi_32 = Mem0[rax_27 + 0x0000000000000008:word32]
	branch esi_32 <= 0x0000000C l000000000040EEE0
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(0) Local -0008(0) Local -04B0(32)

l000000000040EEE0:
	branch esi_32 == 0x00000000 l000000000040EEEE
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> esi:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040EEEB_1:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> esi:<invalid> eax:0x0000000C -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040EEEE:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED26:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> esi:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED2B:
	word64 rsi_1037
	word64 r14_1038
	word64 rax_108
	word32 eax_46 = (word32) Mem0[rcx:byte]
	word32 esi_137 = esi_32
	word64 rax_214 = DPB(rax_27, eax_46, 0)
	byte al_307 = (byte) eax_46
	word64 r13_1030
	*r13Out = DPB(r13, 0x00000000, 0)
	branch al_307 == 0x00 l000000000040F053
// DataOut: al bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED39:
	rsi_1037 = fp - 0x000000000000042F
	*r14Out = rdx
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> esi:<invalid> eax:(word32) Mem0[rcx:byte] r13d:0x00000000 -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED85:
	branch al_307 != 0x25 l000000000040ED50
	branch al_307 != 0x25 l000000000040ED50
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED50:
	rdx = r14_1038 - r13_1030
	branch rdx <=u 0x0000000000000001 l000000000040EE98
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED60:
	branch r12_1029 == 0x0000000000000000 l000000000040ED6D
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED65:
	Mem1034[r12_1029:byte] = al_307
	*r12Out = r12_1029 + 0x0000000000000001
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED6D:
	*r13Out = r13_1030 + 0x0000000000000001
	word64 r8_1033
	*r8Out = rbx_1002
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED89:
	r9d = (word32) Mem0[rsp_138 + 0x000000000000000F:byte]
	byte r9b_634 = (byte) r9d
	r9 = DPB(r9, r9d, 0) (alias)
	*r9Out = r9
	r11d = 0x00000000
	*r11Out = DPB(r11, 0x00000000, 0)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED94:
	rbx_1002 = rbx_1002 + 0x0000000000000001
	byte dil_1004 = (byte) (word32) Mem0[rbx_1002:byte]
	byte SZO_1008 = cond(dil_1004 - 0x30)
	branch dil_1004 == 0x30 l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDA1:
	branch SZO_1008 l000000000040EDD0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDD0:
	branch dil_1004 != 0x5E l000000000040EE70
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE70:
	branch dil_1004 != 0x5F l000000000040EDEE
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE7A:
	r11d = (int32) dil_1004
	*r11Out = DPB(r11, r11d, 0)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDDA:
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDA3:
	branch dil_1004 != 0x23 l000000000040EDE8
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDE8:
	branch dil_1004 == 0x2D l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDEE:
	word32 ebp_683 = 0xFFFFFFFF
	rbp = DPB(rbp, 0xFFFFFFFF, 0) (alias)
	branch (int32) dil_1004 >u 0x00000039 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDFF:
	ebp_683 = 0x00000000
	rbp = DPB(rbp, 0x00000000, 0) (alias)
// DataOut: ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:0xFFFFFFFF ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE28:
	branch ebp_683 <= 0x0CCCCCCC l000000000040EE08
	branch ebp_683 <= 0x0CCCCCCC l000000000040EE08
// DataOut: ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE08:
	word32 edx_987 = (int32) Mem0[rbx_1002:byte]
	rdx = DPB(rdx, edx_987, 0) (alias)
	byte dl_989 = (byte) edx_987
	branch ebp_683 == 0x0CCCCCCC l000000000040EE88
// DataOut: dl ebp edx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE88:
	branch dl_989 <= 0x37 l000000000040EE0D
// DataOut: ebp edx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE8D:
	ebp_683 = 0x7FFFFFFF
	rbp = DPB(rbp, 0x7FFFFFFF, 0) (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE0D:
	rcx = DPB(rcx, rbp * 0x00000005, 0) (alias)
	ebp_683 = rdx - 0x0000000000000030 + rcx * 0x00000002
	rbp = DPB(rbp, ebp_683, 0) (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE30:
	ebp_683 = 0x7FFFFFFF
	rbp = DPB(rbp, 0x7FFFFFFF, 0) (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE15:
	rbx_1002 = rbx_1002 + 0x0000000000000001
	dil_1004 = (byte) (word32) Mem0[rbx_1002:byte] (alias)
	branch (int32) dil_1004 >u 0x00000039 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE40:
	branch dil_1004 == 0x45 l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE4A:
	branch dil_1004 == 0x4F l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EEC8:
	rbx_1002 = rbx_1002 + 0x0000000000000001
	dil_1004 = (byte) (word32) Mem0[rbx_1002:byte] (alias)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE52:
	word64 r8_716
	esi_137 = (int32) dil_1004
	branch dil_1004 >u 0x7A l000000000040FF4D
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040FF4D:
	r8_716 = rbx_1002
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE60:
	switch (DPB(rdx, (word32) dil_1004, 0)) { l000000000040FEFB }
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040FEFB:
	r8_716 = r11 - 0x0000000000000001
	dil_1004 = (byte) (word32) Mem0[rbx_1002 - 0x0000000000000001:byte] (alias)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(word32) dil ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F39F:
	word64 r15_723
	branch dil_1004 != 0x25 l000000000040F0B2
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r13:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0B2:
	rax_214 = r8_716 - 0x0000000000000001
	word32 ecx_909 = 0x00000001
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r13:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0C1:
	*r15Out = rax_214
	rax_214 = rax_214 - 0x0000000000000001
	ecx_909 = ecx_909 + 0x00000001
	branch Mem0[rax_214 + 0x0000000000000001:byte] != 0x25 l000000000040F0C1
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9b r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0D1:
	rcx = (int64) ecx_909
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F3A9:
	*r15Out = r8_716
	rcx = DPB(rcx, 0x00000001, 0) (alias)
	cl = 0x01 (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r13:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0D7:
	word64 r8_724 = r8_716
	*r8Out = r8_724
	word64 rax_733 = DPB(rax_214, 0x00000000, 0)
	byte al_734 = 0x00
	branch ebp_683 < 0x00000000 l000000000040F0E1
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> r13:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0DE_1:
	rax_733 = DPB(rax_214, ebp_683, 0) (alias)
	al_734 = (byte) ebp_683 (alias)
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:rdx rcx:<invalid> r13:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0E1:
	rax_214 = DPB(rax_733, (int16) al_734, 0) (alias)
	rbx_1002 = rax_214
	branch rcx <u rax_214 l000000000040F0ED
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:rdx rcx:<invalid> r13:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0E9_2:
	rbx_1002 = rcx
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:rdx ax:(int16) al rcx:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0ED:
	rdx = r14_1038 - r13_1030
	branch rbx_1002 >=u rdx l000000000040EE98
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:rdx ax:(int16) al rcx:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0F9:
	branch r12_1029 == 0x0000000000000000 l000000000040F16E
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:(int16) al rcx:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0FE:
	branch rax_214 <=u rcx l000000000040F144
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:(int16) al rcx:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F103:
	Mem852[rsp_138 + 0x0000000000000030:word64] = rcx
	Mem853[rsp_138 + 0x0000000000000028:word32] = r9d
	Mem858[rsp_138 + 0x0000000000000018:word64] = r8_716
	rbp = (int64) ebp_683 - rcx
	branch r11d == 0x00000030 l000000000040F1C1
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:(int16) al rcx:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F1C1:
	rax_214 = memset(r12_1029, DPB(rsi_1037, 0x00000030, 0), rbp)
	r9d = Mem858[rsp_138 + 0x0000000000000028:word32]
	r12_1029 = r12_1029 + rbp
	r8_724 = Mem858[rsp_138 + 0x0000000000000018:word64]
	r9b_634 = (byte) r9d (alias)
	*r9Out = DPB(r9, r9d, 0)
	rcx = Mem858[rsp_138 + 0x0000000000000030:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:(int16) al rbp:<invalid> rcx:<invalid> r13:<invalid> rdi:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F125:
	rax_214 = memset(r12_1029, DPB(rsi_1037, 0x00000020, 0), rbp)
	r9d = Mem858[rsp_138 + 0x0000000000000028:word32]
	r12_1029 = r12_1029 + rbp
	rcx = Mem858[rsp_138 + 0x0000000000000030:word64]
	r9b_634 = (byte) r9d (alias)
	*r9Out = DPB(r9, r9d, 0)
	r8_724 = Mem858[rsp_138 + 0x0000000000000018:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:(int16) al rbp:<invalid> rcx:<invalid> r13:<invalid> rdi:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F144:
	Mem809[rsp_138 + 0x0000000000000028:word64] = r8_724
	Mem813[rsp_138 + 0x0000000000000018:word64] = rcx
	rdx = rcx
	rsi_1037 = r15_723
	esi_137 = (word32) r15_723 (alias)
	branch r9b_634 == 0x00 l000000000040F180
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F180:
	rax_214 = memcpy(r12_1029, r15_723, rcx)
	rcx = Mem813[rsp_138 + 0x0000000000000018:word64]
	word64 r8_847
	*r8Out = Mem813[rsp_138 + 0x0000000000000028:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> r13:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F15C:
	word32 ebp_833
	rax_214 = fn000000000040EC80(rax_214, rcx, r15_723, r12_1029, qwLoc04, out rsp_138, out ebp_833, out r12_1029)
	rcx = Mem813[rsp_138 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
	word64 r8_842
	*r8Out = Mem813[rsp_138 + 0x0000000000000028:word64]
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> r13:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F16B:
	*r12Out = r12_1029 + rcx
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> r13:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F16E:
	*r13Out = r13_1030 + rbx_1002
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:<invalid> rcx:<invalid> rdi:<invalid> rbp:<invalid> r13:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED74:
	word32 eax_580 = (word32) Mem0[rax_214 + 0x0000000000000001:byte]
	rax_214 = DPB(rax_214, eax_580, 0) (alias)
	al_307 = (byte) eax_580 (alias)
	rbx_1002 = rax_214 + 0x0000000000000001
	branch al_307 == 0x00 l000000000040F050
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F050:
	r10_457 = r14_1038
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F053:
	branch r12_1029 == 0x0000000000000000 l000000000040F191
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F05C:
	branch r10_457 == 0x0000000000000000 l000000000040F191
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F191:
	rax_108 = r13_1030
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F065:
	Mem502[r12_1029:byte] = 0x00
	rax_108 = r13_1030
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE9A:
	word64 rsi_150 = Mem0[rsp_138 + 0x00000000000004C8:word64] ^ Mem0[fs:0x00000028:word64]
	branch rsi_150 != 0x0000000000000000 l00000000004105EA
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004105EA:
	__stack_chk_fail()
	Mem183[rsp_138 + 0x0000000000000018:word32] = 0x00000000
// DataOut: bpl cl ebp fs r11d r12 r13 r14 r14d r15 r15b r9d rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F25D:
	Mem184[rsp_138 + 0x00000000000000B2:byte] = cl
	byte dil_186 = (byte) esi_137
	word64 rax_189 = rsp_138 + 0x00000000000000B3
// DataOut: bpl dil ebp fs r11d r12 r13 r14 r14d r15 r15b r8 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF37:
	Mem196[rax_189:byte] = dil_186
	Mem199[rax_189 + 0x0000000000000001:byte] = 0x00
	Mem201[rsp_138 + 0x0000000000000038:word32] = r9d
	Mem202[rsp_138 + 0x0000000000000030:word32] = r11d
	Mem203[rsp_138 + 0x0000000000000028:word64] = rbx_1002
	word64 rdi_205
	word64 r10_206
	word64 rbx_211
	byte SCZO_213
	byte SZO_217
	byte C_218
	word64 r8_219
	word32 r9d_220
	byte dil_221
	word32 eax_222
	word32 r13d_223
	byte al_224
	byte Z_225
	word32 r11d_227
	word32 edi_228
	byte CZ_230
	word32 ecx_231
	word32 edx_232
	word32 ebp_233
	word64 r11_234
	word64 r15_235
	byte S_236
	word16 ax_237
	byte dl_238
	byte r9b_239
	byte r15b_241
	word64 r9_242
	call strftime (retsize: 8; depth: 8)
		uses: al_191,ax_192,bLoc04E1_38,C_153,cl_195,CZ_145,dil_186,dl_124,dwLoc04_4,dwLoc04AC_36,dwLoc04B0_43,dwLoc08_9,dwLoc0C_12,dwLoc10_15,dwLoc14_18,dwLoc18_21,eax_190,ebp_136,ecx_194,edi_185,edx_123,esi_200,fs_117,qwLoc04A8_39,qwLoc04D0_113,qwLoc04E0_34,qwLoc28_30,r10_118,r11_148,r11d_147,r12_129,r13_133,r13d_134,r14_116,r15_115,r15b_114,r8_188,r9_121,r9b_120,r9d_119,rax_189,rbp_135,rbx_139,rcx_193,rdi_198,rdx_197,rsi_150,rsp_138,S_146,SCZO_144,SZO_151,Z_152
		defs: al_224,ax_237,C_218,cl_240,CZ_230,dil_221,dl_238,eax_222,ebp_233,ecx_231,edi_228,edx_232,esi_216,fs_215,r10_206,r11_234,r11d_227,r12_210,r13_229,r13d_223,r14_226,r15_235,r15b_241,r8_219,r9_242,r9b_239,r9d_220,rax_214,rbp_209,rbx_211,rcx_212,rdi_205,rdx_207,rsi_208,rsp_204,S_236,SCZO_213,SZO_217,Z_225
	r11d = Mem203[rsp_138 + 0x0000000000000030:word32]
	r9d = Mem203[rsp_138 + 0x0000000000000038:word32]
	word64 r8_246 = Mem203[rsp_138 + 0x0000000000000028:word64]
	*r8Out = r8_246
	r11 = DPB(r11_234, r11d, 0) (alias)
	*r11Out = r11
	byte r9b_250 = (byte) r9d
	r9 = DPB(r9_242, r9d, 0) (alias)
	*r9Out = r9
	branch rax_214 == 0x0000000000000000 l000000000040ED74
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> r14:rdx rdx:<invalid> r13:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF84:
	rbx_1002 = rax_214 - 0x0000000000000001
	word64 rax_254 = DPB(rax_214, 0x00000000, 0)
	byte al_255 = 0x00
	branch ebp_233 < 0x00000000 l000000000040EF8F
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> r14:rdx r13:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF8C_1:
	rax_254 = DPB(rax_214, ebp_233, 0) (alias)
	al_255 = (byte) ebp_233 (alias)
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> r14:rdx r13:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF8F:
	word16 ax_266 = (int16) al_255
	rax_214 = DPB(rax_254, ax_266, 0) (alias)
	rcx = rax_214 - 0x0000000000000001
	cl = (byte) (rax_214 - 0x0000000000000001) (alias)
	branch rax_214 <u rax_214 - 0x0000000000000001 l000000000040EF9E
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> r14:rdx r13:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF9A_2:
	rcx = rax_214
	cl = (byte) ax_266 (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:(int16) al r14:rdx r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF9E:
	rdx = r14_1038 - r13_1030
	branch rcx >=u rdx l000000000040EE98
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:(int16) al r14:rdx r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE98:
	rax_108 = DPB(rax_214, 0x00000000, 0) (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFAA:
	branch r12_1029 == 0x0000000000000000 l000000000040F03A
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:(int16) al r14:rdx r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFB3:
	branch rax_214 - 0x0000000000000001 >=u rax_214 l000000000040F001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:(int16) al r14:rdx r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFB8:
	word32 eax_395 = Mem203[rsp_138 + 0x0000000000000018:word32]
	rax_214 = DPB(rax_254, eax_395, 0) (alias)
	branch eax_395 != 0x00000000 l000000000040F001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:(int16) al r14:rdx r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFC0:
	Mem403[rsp_138 + 0x0000000000000030:word64] = rcx
	Mem404[rsp_138 + 0x0000000000000028:word32] = r9d
	Mem409[rsp_138 + 0x0000000000000018:word64] = r8_246
	rbp = (int64) ebp_233 - (rax_214 - 0x0000000000000001)
	branch r11d == 0x00000030 l0000000000410239
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> r14:rdx r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000410239:
	rax_214 = memset(r12_1029, DPB(rsi_1037, 0x00000030, 0), rbp)
	r9d = Mem409[rsp_138 + 0x0000000000000028:word32]
	r12_1029 = r12_1029 + rbp
	r8_246 = Mem409[rsp_138 + 0x0000000000000018:word64]
	r9b_250 = (byte) r9d (alias)
	*r9Out = DPB(r9_242, r9d, 0)
	rcx = Mem409[rsp_138 + 0x0000000000000030:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> r14:rdx r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFE2:
	rax_214 = memset(r12_1029, DPB(rsi_1037, 0x00000020, 0), rbp)
	r9d = Mem409[rsp_138 + 0x0000000000000028:word32]
	r12_1029 = r12_1029 + rbp
	rcx = Mem409[rsp_138 + 0x0000000000000030:word64]
	r9b_250 = (byte) r9d (alias)
	*r9Out = DPB(r9_242, r9d, 0)
	r8_246 = Mem409[rsp_138 + 0x0000000000000018:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> r14:rdx r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F001:
	Mem335[rsp_138 + 0x0000000000000028:word64] = rcx
	Mem336[rsp_138 + 0x0000000000000018:word64] = r8_246
	rsi_1037 = Mem336[rsp_138 + 0x0000000000000020:word64]
	rdx = rax_214 - 0x0000000000000001
	esi_137 = (word32) rsi_1037 (alias)
	branch r15b_241 != 0x00 l000000000040F1AD
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9b r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F1AD:
	word32 ebp_385
	rax_214 = fn000000000040EC30(rax_214, rax_214 - 0x0000000000000001, rsi_1037, r12_1029, qwLoc04, out rsp_138, out ebp_385, out r12_1029)
	rcx = Mem336[rsp_138 + 0x0000000000000028:word64]
	word64 r8_391
	*r8Out = Mem336[rsp_138 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F01F:
	branch r9b_250 == 0x00 l000000000040F199
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F199:
	rax_214 = memcpy(r12_1029, rsi_1037, rax_214 - 0x0000000000000001)
	rcx = Mem336[rsp_138 + 0x0000000000000028:word64]
	cl = (byte) rcx (alias)
	word64 r8_383
	*r8Out = Mem336[rsp_138 + 0x0000000000000018:word64]
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F028:
	word32 ebp_366
	rax_214 = fn000000000040EC80(rax_214, rax_214 - 0x0000000000000001, rsi_1037, r12_1029, qwLoc04, out rsp_138, out ebp_366, out r12_1029)
	rcx = Mem336[rsp_138 + 0x0000000000000028:word64]
	word64 r8_372
	*r8Out = Mem336[rsp_138 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F037:
	*r12Out = r12_1029 + (rax_214 - 0x0000000000000001)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> r14:rdx r13:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F03A:
	word32 eax_305 = (word32) Mem203[rax_214 + 0x0000000000000001:byte]
	rax_214 = DPB(rax_214, eax_305, 0) (alias)
	al_307 = (byte) eax_305 (alias)
	*r13Out = r13_1030 + rcx
	rbx_1002 = rax_214 + 0x0000000000000001
	branch al_307 != 0x00 l000000000040ED85
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> r14:rdx rbp:<invalid> ecx:<invalid> edx:<invalid> r13:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F04E:
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> r13:<invalid> r14:rdx rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EEB1:
	word64 rsp_160 = Mem0[rsp_138 + 0x00000000000004E8:word64]
	word64 rbp_162
	*rbpOut = Mem0[rsp_160 + 0x0000000000000008:word64]
	word32 esi_166
	*esiOut = (word32) Mem0[rsp_160 + 0x0000000000000010:word64]
	word64 rdi_168
	*rdiOut = Mem0[rsp_160 + 0x0000000000000018:word64]
	word64 rsp_171
	*rspOut = rsp_160 + 0x0000000000000020
	return rax_108
// DataOut: edi esi fs r11 r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040ECD0_exit:
// DataOut: edi esi r11 r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> rbp:<invalid> rdi:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040EDA9:
	rbx_1002 = rbx_1002 + 0x0000000000000001
	dil_1004 = (byte) (word32) Mem0[rbx_1002:byte] (alias)
	SZO_1008 = cond(dil_1004 - 0x30) (alias)
	branch dil_1004 != 0x30 l000000000040EDA1
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDBB:
// DataOut: dil fs r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:0x00000001 r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:0x0001 rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDC0:
	r11d = (int32) dil_1004
	*r11Out = DPB(r11, r11d, 0)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)



word64 fn0000000000410600(word64 rax, word64 rdx, word32 ebp, word64 rsi, word64 rdi, word32 r8d, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rbpOut, ptr64 & esiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl ebp fs r11d r14 r15b r8d rax rdi rdx rsi
// LiveOut: edi esi r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410600_entry:
// DataOut: bpl ebp fs r11d r14 r15b r8d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410600:
	word64 rsp_29
	word64 rbp_30
	word32 esi_31
	word64 rdi_32
	word64 r8_33
	word64 r9_34
	word64 r11_35
	word64 r12_36
	word64 r13_37
	word64 r14_38
	word64 r15_39
	return fn000000000040ECD0(rax, rdx, rsi, ebp, rdi, DPB(rdi, 0x00000000, 0), r8d, r11d, r14, r15b, fs, out rsp_29, out rbp_30, out esi_31, out rdi_32, out r8_33, out r9_34, out r11_35, out r12_36, out r13_37, out r14_38, out r15_39)
// DataOut: edi esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410600_exit:
// DataOut: edi esi r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9d:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> r10:<invalid> r12:<invalid> rax:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> rbp:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> ax:<invalid> r11d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbx:<invalid> -24(fp):r9d



word64 fn0000000000410630(word64 rsi, word64 rdi, word64 r8, word64 r9, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 r9 rdi rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000410630_entry:
// DataOut: r11 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410630:
	word64 rsi_220
	word64 rdx_218
	branch rsi == 0x0000000000000000 l0000000000410A30
// DataOut: r11 r12 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64)

l0000000000410A30:
	rsi_220 = DPB(rsi, 0x00000001, 0) (alias)
	rdx_218 = DPB(rdx, 0x004168CC, 0) (alias)
	word64 rax_237 = DPB(rax, __fprintf_chk(rdi, rsi_220, rdx_218), 0)
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410650:
	rdx_218 = DPB(rdx, 0x004168C0, 0) (alias)
	rsi_220 = DPB(rsi, 0x00000001, 0) (alias)
	word64 rax_226 = DPB(rax, __fprintf_chk(rdi, rsi_220, rdx_218), 0)
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041066A:
	word64 rax_47 = DPB(dcgettext(DPB(rdi, 0x00000000, 0), DPB(rsi_220, 0x004168D3, 0), DPB(rdx_218, 0x00000005, 0)), __fprintf_chk(rdi, DPB(rsi_220, 0x00000001, 0), DPB(rdx_218, 0x00416BA0, 0)), 0)
	word64 rdx_53 = DPB(rdx_218, 0x00000005, 0)
	word64 rax_56 = dcgettext(DPB(rdi, 0x00000000, 0), DPB(rsi_220, 0x00416930, 0), rdx_53)
	word64 rsp_59
	word64 rdi_60
	word64 rsi_61
	word64 rbp_62
	word64 r12_63
	word64 r9_64
	word64 rbx_65
	word64 r8_66
	byte SCZO_67
	byte SZO_68
	byte C_69
	byte Z_70
	word64 rcx_71
	word64 rdx_72
	word32 edx_73
	word32 esi_74
	word32 eax_75
	word64 rax_76
	word32 edi_77
	byte CZ_78
	word64 r10_79
	word64 r11_80
	word64 r13_81
	word64 r15_82
	word64 r14_83
	call fputs_unlocked (retsize: 8; depth: 120)
		uses: C_51,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_17,dwLoc18_21,eax_45,edi_48,edx_52,esi_54,r12_15,r8,r9,rax_56,rbp_18,rbx_23,rcx_39,rdi_58,rdx_53,rsi_57,rsp_24,SZO_50,Z_26
		defs: C_69,CZ_78,eax_75,edi_77,edx_73,esi_74,r10_79,r11_80,r12_63,r13_81,r14_83,r15_82,r8_66,r9_64,rax_76,rbp_62,rbx_65,rcx_71,rdi_60,rdx_72,rsi_61,rsp_59,SCZO_67,SZO_68,Z_70
	branch r12_63 >u 0x0000000000000009 l0000000000410A50
// DataOut: r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000001 eax:<invalid> rax:DPB(rax, <invalid>, 0) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410A50:
	word64 rdx_160 = DPB(rdx_72, 0x00000005, 0)
	word64 rsi_164 = DPB(rsi_61, 0x00416B08, 0)
// DataOut: rbp rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:<invalid> r8:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> rax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004107A1:
	word64 rax_176 = dcgettext(DPB(rdi_60, 0x00000000, 0), rsi_164, rdx_160)
	word64 rax_194 = DPB(rax_176, __fprintf_chk(rbp_62, DPB(rsi_61, 0x00000001, 0), rax_176), 0)
	return qwLoc08 + 0x0000000000000020
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:<invalid> rbp:rdi rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> edx:0x00000005 esi:0x00416B08 eax:<invalid> rax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> r10:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004106BE:
	word64 rsp_132
	word64 rdi_133
	word64 rsi_134
	word64 rbp_135
	word64 r12_136
	word64 r9_137
	word64 rbx_138
	word64 r8_139
	byte SCZO_140
	byte SZO_141
	byte C_142
	byte Z_143
	word64 rcx_144
	word64 rdx_145
	word32 edx_146
	word32 esi_147
	word32 eax_148
	word64 rax_149
	word32 edi_150
	byte CZ_151
	word64 r10_152
	word64 r11_153
	word64 r13_154
	word64 r15_155
	word64 r14_156
	call Mem0[0x00416B48:word32] (retsize: 4; depth: 116)
		uses: C_69,CZ_85,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_17,dwLoc18_21,eax_75,edi_77,edx_73,esi_74,qwLoc28,qwLoc30,qwLoc38,qwLoc40,qwLoc48,qwLoc50,qwLoc58,qwLoc60,qwLoc68,qwLoc70,r10_79,r11_80,r12_63,r13_81,r14_83,r15_82,r8_66,r9_64,rax_76,rbp_62,rbx_65,rcx_71,rdi_60,rdx_72,rsi_61,rsp_59,SCZO_84,SZO_68,Z_70
		defs: C_142,CZ_151,eax_148,edi_150,edx_146,esi_147,r10_152,r11_153,r12_136,r13_154,r14_156,r15_155,r8_139,r9_137,rax_149,rbp_135,rbx_138,rcx_144,rdi_133,rdx_145,rsi_134,rsp_132,SCZO_140,SZO_141,Z_143
	return rsp_132
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:<invalid> r8:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> rax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000410630_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> rax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> r10:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> rdx:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000410AC0(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410AC0_entry:
// DataOut: r11 r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AC0:
	word64 r9_16 = DPB(r9, 0x00000000, 0)
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AF3:
	word32 eax_20 = Mem0[rax:word32]
	word64 rax_21 = DPB(rax, eax_20, 0)
	branch eax_20 <u 0x00000030 l0000000000410AD0
	word32 eax_24 = Mem0[rax_21:word32]
	branch eax_24 <u 0x00000030 l0000000000410AD0
// DataOut: eax r11 r8 r9 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9d:<invalid> eax:<invalid> r10:<invalid> rax:<invalid> r10d:<invalid> r9:<invalid>
// LocalsOut: fp(64)

l0000000000410AD0:
	Mem77[DPB(rax, eax_24 + 0x00000008, 0):word32] = eax_24 + 0x00000008
	rax = Mem77[rdx:word64]
	Mem83[fp - 0x0000000000000058 + r9_16 * 0x0000000000000008:word64] = rax
	branch rax == 0x0000000000000000 l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9d:<invalid> eax:<invalid> r10:<invalid> rax:<invalid> r10d:<invalid> r9:<invalid>
// LocalsOut: fp(64)

l0000000000410AFB:
	Mem58[rdx + 0x0000000000000010:word64] = rdx + 0x0000000000000008
	word64 rax_59 = Mem58[rdx:word64]
	Mem62[fp - 0x0000000000000058 + r9_16 * 0x0000000000000008:word64] = rax_59
	branch rax_59 != 0x0000000000000000 l0000000000410AE9
	Mem65[rdx + 0x0000000000000010:word64] = rdx + 0x0000000000000008
	rax = Mem65[rdx:word64]
	Mem71[fp - 0x0000000000000058 + r9_16 * 0x0000000000000008:word64] = rax
	branch rax != 0x0000000000000000 l0000000000410AE9
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9d:<invalid> eax:<invalid> r10:<invalid> rax:<invalid> r10d:<invalid> r9:<invalid>
// LocalsOut: fp(64)

l0000000000410AE9:
	r9_16 = r9_16 + 0x0000000000000001
	branch r9_16 == 0x000000000000000A l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9d:<invalid> eax:<invalid> r10:<invalid> rax:<invalid> r10d:<invalid> r9:<invalid>
// LocalsOut: fp(64)

l0000000000410B13:
// DataOut: r11 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9d:<invalid> eax:<invalid> r10:<invalid> rax:<invalid> r10d:<invalid> r9:<invalid>
// LocalsOut: fp(64)

l0000000000410B18:
	fn0000000000410630(rsi, rdi, fp - 0x0000000000000058, r9_16, r11)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9d:<invalid> eax:<invalid> r10d:<invalid> r10:<invalid> rax:<invalid> r9:<invalid>

fn0000000000410AC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9d:<invalid> eax:<invalid> r10d:<invalid> r10:<invalid> rax:<invalid> r9:<invalid> r8:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> rdx:<invalid>



word64 fn0000000000410C40(word64 rsi, word64 rdi, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: rax rsp
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esp rax rdi rdx rsp sp spl
// Preserved: rbx
fn0000000000410C40_entry:
// DataOut: ebp fs r11 r11d r12 r12d r13 r13b r14 r14b r14d r15 r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C40:
	word64 rax_15 = malloc(rdi)
	branch rax_15 == 0x0000000000000000 l0000000000410C50
// DataOut: ebp fs r11 r11d r12 r12d r13 r13b r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:(uint64) (rdx_rax /u rsi) rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C50:
	branch rdi == 0x0000000000000000 l0000000000410C4E
// DataOut: ebp fs r11 r11d r12 r12d r13 r13b r14 r14b r14d r15 r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> edx:<invalid> rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C55:
	fn0000000000410E50()
	word128 rdx_rax_32 = SEQ(rdx, 0xFFFFFFFFFFFFFFFF)
	rdx = (uint64) (rdx_rax_32 % rsi)
	word64 rax_36 = (uint64) (rdx_rax_32 /u rsi)
	branch rax_36 <u rdi l0000000000410C7A
// DataOut: eax ebp fs r11 r11d r12 r12d r13 r13b r14 r14b r14d r15 r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> edx:<invalid> rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C7A:
	Mem42[fp - 0x0000000000000008:word32] = rax_36
	fn0000000000410E50()
// DataOut: ebp fs r11 r11d r12 r12d r13 r13b r14 r14b r14d r15 r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: edx:<invalid> rax:(uint64) (rdx_rax /u rsi) rdx:(uint64) (rdx_rax % rsi) -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C71:
	rdi = rdi *s rsi
// DataOut: ebp fs r11 r11d r12 r12d r13 r13b r14 r14b r14d r15 r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: edx:<invalid> rax:(uint64) (rdx_rax /u rsi) rdx:(uint64) (rdx_rax % rsi) -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C4E:
	word64 rsp_25
	*rspOut = fp + 0x0000000000000004
	return rax_15
// DataOut: ebp fs r11 r11d r12 r12d r13 r13b r14 r14b r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> edx:<invalid> rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx

fn0000000000410C40_exit:
// DataOut: rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> edx:<invalid> rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx



word64 fn0000000000410C90(word64 rdx, word64 rsi, word64 rdi, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: rax rsp
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi esp r10 r10b r10d r10w r8 r8b r8d r8w rax rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000410C90_entry:
// DataOut: ebp fs r11 r14 r15 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C90:
	branch rsi == 0x0000000000000000 l0000000000410CB0
// DataOut: ebp ebx fs r11 r14 r15 rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rax:<invalid> edx:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB0:
	branch rdi == 0x0000000000000000 l0000000000410C99
// DataOut: ebp ebx fs r11 r14 r15 rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> edx:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CB5:
	free(rdi)
	word64 rsp_237
	*rspOut = fp + 0x0000000000000004
	return DPB(rax, 0x00000000, 0)
// DataOut: ebp fs r11 r14 r15 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> edx:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx

l0000000000410C99:
	word64 rax_62 = realloc(rdi, rsi)
	word128 rdx_rax_63 = SEQ(rdx, rax_62)
	branch rax_62 == 0x0000000000000000 l0000000000410CBE
// DataOut: ebp ebx fs r11 r14 r15 rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> edx:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CBE:
	branch rsi == 0x0000000000000000 l0000000000410CA6
// DataOut: ebp ebx fs r11 r14 r15 rax rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CC3:
	fn0000000000410E50()
	word128 rdx_rax_82 = DPB(rdx_rax_63, 0x00000000, 64)
	rdx = (uint64) (rdx_rax_82 % rdx)
	rax = (uint64) (rdx_rax_82 /u rdx)
	word128 rdx_rax_87 = SEQ(rdx, rax)
	branch rax <u rsi l0000000000410CED
// DataOut: eax ebp ebx fs r11 r14 r15 rax rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410CED:
	Mem95[fp - 0x0000000000000008:word32] = rax
	fn0000000000410E50()
	word64 r8_103 = rdx
	word64 rcx_100 = Mem95[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410D40
// DataOut: ebp ebx fs r11 r14 r15 r8 rax rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:(uint64) (rdx_rax /u rdx) edx:<invalid> rdx:(uint64) (rdx_rax % rdx) -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410D40:
	branch rcx_100 != 0x0000000000000000 l0000000000410D29
// DataOut: ebp fs r11 r14 r15 r8 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D45:
	word128 rdx_rax_213 = DPB(rdx_rax_87, 0x00000080, 0)
	rax = (uint64) (rdx_rax_213 /u rdx)
	rdx = (uint64) (rdx_rax_213 % rdx)
	rcx_100 = DPB(rcx_100, rax == 0x0000000000000000, 0) + rax
// DataOut: ebp fs r11 r14 r15 r8 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D0B:
	word128 rdx_rax_121 = DPB(rdx_rax_87, 0x00000000, 64)
	r8_103 = 0x00000000AAAAAAAA
	rdx = (uint64) (rdx_rax_121 % 0x00000000AAAAAAAA)
	word64 rax_126 = (uint64) (rdx_rax_121 /u 0x00000000AAAAAAAA)
	branch rcx_100 >=u rax_126 l0000000000410D5C
// DataOut: eax ebp ebx fs r11 r14 r15 r8 rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D5C:
	Mem139[fp - 0x000000000000000C:word32] = rax_126
	fn0000000000410E50()
	rax = Mem139[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410DA0
// DataOut: eax ebp ebx fs r11 r14 r15 rax rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: r8:0x00000000AAAAAAAA rcx:<invalid> edx:<invalid> rdx:(uint64) (rdx_rax % 0x00000000AAAAAAAA) rax:(uint64) (rdx_rax /u 0x00000000AAAAAAAA) -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410DA0:
	rdx = DPB(rdx, 0x00000080, 0) (alias)
	branch rax != 0x0000000000000000 l0000000000410DAC
// DataOut: ebp fs r11 r14 r15 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DA8_1:
	rax = rdx
// DataOut: ebp fs r11 r14 r15 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> edx:0x00000080 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DAC:
	Mem202[rsi:word64] = rax
	rsi = rax
// DataOut: ebp fs r11 r14 r15 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> edx:0x00000080 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D78:
	branch rax >u rdx l0000000000410DB7
// DataOut: eax ebp ebx fs r11 r14 r15 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DB7:
	Mem159[fp - 0x0000000000000010:word32] = rax
	fn0000000000410E50()
	Mem161[fp - 0x0000000000000014:word32] = rsi
	word64 rsp_163
	word64 rax_164 = fn0000000000410C40(rsi, rdi, out rsp_163)
// DataOut: ebp fs r11 r14 r15 rax rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// Terminates process

l0000000000402480:
	word64 rsp_174
	word64 rsi_175
	byte SZO_176
	byte C_177
	word64 rbx_178
	byte Z_179
	word64 rax_180
	word64 rdi_181
	word32 eax_182
	word64 rcx_183
	word64 rdx_184
	word32 edx_185
	byte SCZO_186
	word64 r8_187
	word32 ecx_188
	byte cl_189
	word64 r10_190
	byte CZ_191
	word32 esi_192
	call Mem161[0x000000000061A188:word32] (retsize: 4; depth: 4)
		uses: C_170,cl_102,CZ_148,dwLoc04_36,eax_165,ecx_101,edx_125,esi_168,qwLoc04,r10_146,r8_122,rax_164,rbx_172,rcx_100,rdi_171,rdx_166,rsi_59,rsp_173,SCZO_147,SZO_169,Z_141
		defs: C_177,cl_189,CZ_191,eax_182,ecx_188,edx_185,esi_192,r10_190,r8_187,rax_180,rbx_178,rcx_183,rdi_181,rdx_184,rsi_175,rsp_174,SCZO_186,SZO_176,Z_179
	return rax_180
// DataOut: ebp fs r11 r14 r15 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> edx:<invalid> rdx:rdi rdi:<invalid> esi:0x00000000 -4(fp):rbx

l0000000000410D87:
	rdx = rax + 0x0000000000000001 >>u 0x0000000000000001
	rax = rax + rdx
	Mem155[rsi:word64] = rax
	rsi = rax
// DataOut: ebp fs r11 r14 r15 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D1F:
	rax = rcx_100 + 0x0000000000000001 >>u 0x0000000000000001
	rcx_100 = rcx_100 + rax
// DataOut: ebp fs r11 r14 r15 r8 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:0x00000000AAAAAAAA rcx:<invalid> edx:<invalid> rdx:(uint64) (rdx_rax % 0x00000000AAAAAAAA) rax:(uint64) (rdx_rax /u 0x00000000AAAAAAAA) -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D29:
	Mem115[rsi:word64] = rcx_100
	rsi = rcx_100 *s r8_103
// DataOut: ebp fs r11 r14 r15 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> ecx:<invalid> cl:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CE4:
	rsi = rsi *s rdx
// DataOut: ebp fs r11 r14 r15 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:(uint64) (rdx_rax /u rdx) edx:<invalid> rdx:(uint64) (rdx_rax % rdx) -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CA6:
	word64 rsp_73
	*rspOut = fp + 0x0000000000000004
	return rax_62
// DataOut: ebp fs r11 r14 r15 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx

fn0000000000410C90_exit:
// DataOut: rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> rdi:<invalid> esi:<invalid> r8:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx



word64 fn0000000000410E00(word64 rsi, ptr64 & rspOut, ptr64 & rbpOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000410E00_entry:
// DataOut: r11 r12 r12d r13 r13b r14b r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E00:
	word64 rsp_15
	word64 rax_16 = fn0000000000410C40(rsi, rsi, out rsp_15)
// DataOut: r11 r12 r12d r13 r13b r14b r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004025C0:
	word64 rsp_27
	word64 rbp_28
	word64 rdi_29
	word64 rsi_30
	word64 rbx_31
	byte SCZO_32
	word64 rdx_33
	word64 rax_34
	call Mem0[0x000000000061A228:word32] (retsize: 4; depth: 4)
		uses: dwLoc04_4,dwLoc08_11,rax_16,rbp_24,rbx_22,rdi_26,rdx_19,rsi_20,rsp_25,SCZO_18
		defs: rax_34,rbp_28,rbx_31,rdi_29,rdx_33,rsi_30,rsp_27,SCZO_32
	return rax_34
// DataOut: r11 r12 r12d r13 r13b r14b r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rdi:<invalid> rbx:<invalid> rdx:rsi rsi:<invalid> rax:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000410E00_exit:
// DataOut: rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rdi:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000410E30(word64 rax, word64 rdi, ptr64 & rspOut, ptr64 & rbpOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000410E30_entry:
// DataOut: r11 r12 r13 r13b r14b r15 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E30:
	word64 rax_10 = DPB(rax, strlen(rdi), 0)
// DataOut: r11 r12 r13 r13b r14b r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000410E40_thunk_fn0000000000410E00:
	word64 rsp_15
	word64 rbp_16
	return fn0000000000410E00(rax_10 + 0x0000000000000001, out rsp_15, out rbp_16)
// DataOut: r11 r12 r13 r13b r14b r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:DPB(rax, <invalid>, 0) rdi:rdi rsi:DPB(rax, <invalid>, 0) + 0x0000000000000001 -4(fp):rbx

fn0000000000410E30_exit:
// DataOut: rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rdx:<invalid> edx:<invalid> -4(fp):rbx



void fn0000000000410E50()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000410E50_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000410E50_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E50:
	word64 rdx_5 = DPB(rdx, 0x00000005, 0)
	word64 rsi_8 = DPB(rsi, 0x00416BCF, 0)
	word64 rdi_11 = DPB(rdi, 0x00000000, 0)
	word64 rax_12 = dcgettext(rdi_11, rsi_8, rdx_5)
	word64 rsp_21
	byte SCZO_22
	word32 edx_23
	word32 esi_24
	word32 edi_25
	byte SZO_26
	byte C_27
	word64 rax_28
	word64 rdi_29
	word64 rsi_30
	word64 rdx_31
	word64 rcx_32
	word32 eax_33
	call error (retsize: 8; depth: 16)
		uses: C_20,eax_18,edi_14,edx_16,esi_17,rax_12,rcx_15,rdi_11,rdx_5,rsi_8,rsp_2,SZO_19
		defs: C_27,eax_33,edi_25,edx_23,esi_24,rax_28,rcx_32,rdi_29,rdx_31,rsi_30,rsp_21,SCZO_22,SZO_26
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000410E90(word32 edx, word64 rsi, word64 rdi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000410E90_entry:
// DataOut: edx r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0028(64)

l0000000000410E90:
	branch edx >u 0x00000024 l00000000004112B0
// DataOut: r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l00000000004112B0:
	word64 rcx_1074 = DPB(rcx, 0x00416DC8, 0)
	__assert_fail(DPB(rdi, 0x00416BF0, 0), DPB(rsi, 0x00416BE0, 0), DPB(rdx, 0x00000060, 0), rcx_1074)
// DataOut: edi esi rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004112C9_thunk_fn00000000004112D0:
	fn00000000004112D0(rcx_1074, 0x00416BE0, 0x00416BF0)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx ecx:0x00416DC8 edx:0x00000060 esi:0x00416BE0 edi:0x00416BF0 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000410EAA:
	branch rsi != 0x0000000000000000 l0000000000410EC2
// DataOut: r12 r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000410EBE_1:
// DataOut: r12 r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:fp - 0x0000000000000028 rbp:rdi r15:rsi r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000410EC2:
	word64 rsp_91
	word64 rdi_92
	word64 rsi_93
	word32 r14d_94
	word32 edx_95
	word64 rbp_96
	word64 rbx_97
	byte SCZO_98
	byte CZ_99
	word64 rax_100
	word64 r15_101
	byte SZO_102
	byte C_103
	word64 r13_104
	word64 rcx_105
	word64 r12_106
	word64 r8_107
	byte Z_108
	word32 ebx_109
	word64 rdx_110
	word32 ecx_111
	word32 esi_112
	word32 edi_113
	word32 r9d_114
	word32 eax_117
	word64 r14_118
	word32 ebp_119
	byte dl_120
	byte al_121
	word32 r8d_122
	byte S_123
	byte cl_124
	word64 r9_116
	byte bl_1071
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: al,bl_75,C_67,cl,CZ_23,dl,dwLoc04_4,dwLoc08_7,dwLoc0C_12,dwLoc10_15,dwLoc14_17,dwLoc18_20,dwLoc38,eax,ebp_63,ebx_73,ecx,edi,edx,esi,qwLoc38,r12_71,r13_69,r14,r14d_9,r15_64,r8,r8d,r9,r9d,rax_61,rbp_62,rbx_74,rcx,rdi,rdx,rsi,rsp_21,S,SCZO_22,SZO_65,Z_66
		defs: al_121,bl_115,C_103,cl_124,CZ_99,dl_120,eax_117,ebp_119,ebx_109,ecx_111,edi_113,edx_95,esi_112,r12_106,r13_104,r14_118,r14d_94,r15_101,r8_107,r8d_122,r9_116,r9d_114,rax_100,rbp_96,rbx_97,rcx_105,rdi_92,rdx_110,rsi_93,rsp_91,S_123,SCZO_98,SZO_102,Z_108
	word64 rax_1064 = rbp_96
// DataOut: bl r12 r15 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:fp - 0x0000000000000028 rbp:rdi r15:<invalid> r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410EDF:
	word32 r9d_142 = (word32) bl_1071
	r9_116 = DPB(r9_116, r9d_142, 0) (alias)
	branch (Mem0[qwLoc28 + 0x0000000000000001 + r9_116 * 0x02:byte] & 0x20) != 0x00 l0000000000410ED8
// DataOut: bl r12 r15 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410ED8:
	rax_1064 = rax_1064 + 0x0000000000000001
	bl_1071 = (byte) (word32) Mem0[rax_1064:byte] (alias)
// DataOut: bl r12 r15 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410EEB:
	branch bl_1071 != 0x2D l0000000000410F08
// DataOut: r12 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F08:
	word64 rbp_1006
	word32 ebp_1004
	word64 rsi_1018
	word64 rdx_1026
	word32 edx_1025
	word64 rax_234 = __errno_location()
	Mem236[rax_234:word32] = 0x00000000
	word64 rsp_241
	word64 rdi_242
	word64 rsi_243
	word32 r14d_244
	word32 edx_245
	word64 rbp_246
	word64 rbx_247
	byte SCZO_248
	byte CZ_249
	word64 rax_250
	word64 r15_251
	byte SZO_252
	byte C_253
	word64 r13_254
	word64 rcx_255
	word64 r12_256
	word64 r8_257
	byte Z_258
	word32 ebx_259
	word64 rdx_260
	word32 ecx_261
	word32 esi_262
	word32 edi_263
	word32 r9d_264
	byte bl_265
	word64 r9_266
	word32 eax_267
	word64 r14_268
	word32 ebp_269
	byte dl_270
	byte al_271
	word32 r8d_272
	byte S_273
	byte cl_274
	call strtoul (retsize: 8; depth: 72)
		uses: al_138,bl_135,C_146,cl_124,CZ_99,dl_128,dwLoc04_4,dwLoc08_7,dwLoc0C_12,dwLoc10_15,dwLoc14_17,dwLoc18_20,dwLoc38,eax_139,ebp_119,ebx_134,ecx_111,edi_113,edx_235,esi_238,qwLoc08,qwLoc10,qwLoc18,qwLoc28,qwLoc38_240,r12_106,r13_104,r14_118,r14d_94,r15_101,r8_107,r8d_122,r9_143,r9d_142,rax_234,rbp_96,rbx_141,rcx_105,rdi_239,rdx_126,rsi_237,rsp_91,S_123,SCZO_147,SZO_144,Z_148
		defs: al_271,bl_265,C_253,cl_274,CZ_249,dl_270,eax_267,ebp_269,ebx_259,ecx_261,edi_263,edx_245,esi_262,r12_256,r13_254,r14_268,r14d_244,r15_251,r8_257,r8d_272,r9_266,r9d_264,rax_250,rbp_246,rbx_247,rcx_255,rdi_242,rdx_260,rsi_243,rsp_241,S_273,SCZO_248,SZO_252,Z_258
	word64 r14_275 = Mem236[r15_251:word64]
	word64 rbx_1054 = rax_250
	branch r14_275 == rbp_246 l0000000000410FE7
// DataOut: r12 r14 r15 rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FE7:
	branch r12_256 == 0x0000000000000000 l0000000000410EF0
// DataOut: r12 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FF0:
	word32 edx_1040 = (word32) Mem236[rbp_246:byte]
	byte dl_1043 = (byte) edx_1040
	branch dl_1043 == 0x00 l0000000000410EF0
// DataOut: dl r12 r14 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FFC:
	rsi_1018 = DPB(rsi_243, (int32) dl_1043, 0) (alias)
	ebp_1004 = 0x00000000
	rbp_1006 = DPB(rbp_246, 0x00000000, 0) (alias)
	rbx_1054 = DPB(rax_250, 0x00000001, 0) (alias)
	edx_1025 = edx_1040
	rdx_1026 = DPB(rdx_260, edx_1040, 0) (alias)
	branch strchr(r12_256, rsi_1018) != 0x0000000000000000 l0000000000410F94
// DataOut: dl ebp r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) Mem0[rdi + 0x0000000000000000:byte] rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041101F:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:<invalid> edx:(word32) Mem0[rdi + 0x0000000000000000:byte] rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:(int32) dl ebp:0x00000000 -56(fp):(word32) Mem0[rdi + 0x0000000000000000:byte] -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F3A:
	word32 eax_997 = Mem236[rax_234:word32]
	branch eax_997 != 0x00000000 l0000000000410F68
// DataOut: eax r12 r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F68:
	ebp_1004 = 0x00000001
	rbp_1006 = DPB(rbp_246, 0x00000001, 0) (alias)
	branch eax_997 != 0x00000022 l0000000000410EF0
// DataOut: ebp r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F76:
// DataOut: ebp r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> ebp:0x00000001 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F40:
	ebp_1004 = 0x00000000
	rbp_1006 = DPB(rbp_246, 0x00000000, 0) (alias)
// DataOut: ebp r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F42:
	branch r12_256 == 0x0000000000000000 l0000000000410F4F
// DataOut: ebp r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F47:
	word32 edx_1010 = (word32) Mem236[rsi_243:byte]
	byte dl_1013 = (byte) edx_1010
	branch dl_1013 != 0x00 l0000000000410F78
// DataOut: dl ebp r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F78:
	rsi_1018 = DPB(rsi_243, (int32) dl_1013, 0) (alias)
	edx_1025 = edx_1010
	rdx_1026 = DPB(rdx_260, edx_1010, 0) (alias)
	branch strchr(r12_256, rsi_1018) == 0x0000000000000000 l0000000000411028
// DataOut: dl ebp r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F94:
	word32 eax_383
	word64 rax_379
	word32 ecx_376
	word64 rsi_365 = DPB(rsi_1018, 0x00000030, 0)
	word64 rax_368 = strchr(r12_256, rsi_365)
	branch rax_368 == 0x0000000000000000 l0000000000410FCB
// DataOut: dl ebp r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:(int32) dl ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FAE:
	word32 eax_966 = (word32) Mem236[rsi_365 + 0x0000000000000001:byte]
	rax_368 = DPB(rax_368, eax_966, 0) (alias)
	byte al_969 = (byte) eax_966
	branch al_969 == 0x44 l0000000000411262
// DataOut: al dl ebp r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FBB:
	branch al_969 == 0x69 l000000000041124A
// DataOut: al dl ebp r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041124A:
	word64 rcx_993 = DPB(rax_234, Mem236[rsi_365 + 0x0000000000000002:byte] == 0x42, 0)
	eax_383 = 0x00000400
	rax_379 = DPB(rax_368, 0x00000400, 0) (alias)
	ecx_376 = rcx_993 + 0x0000000000000001 + rcx_993
// DataOut: dl eax ebp ecx r14 r15 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FC3:
	branch al_969 == 0x42 l0000000000411262
// DataOut: dl ebp r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411262:
	ecx_376 = 0x00000002
	eax_383 = 0x000003E8
	rax_379 = DPB(rax_368, 0x000003E8, 0) (alias)
// DataOut: dl eax ebp ecx r14 r15 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FCB:
	ecx_376 = 0x00000001
	eax_383 = 0x00000400
	rax_379 = DPB(rax_368, 0x00000400, 0) (alias)
// DataOut: dl eax ebp ecx r14 r15 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FD5:
	byte dl_387 = (byte) (edx_1025 - 0x00000042)
	branch dl_387 >u 0x35 l0000000000411028
// DataOut: dl eax ebp ecx r14 r15 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FDD:
	word64 rdi_597
	word32 edx_401
	word64 rdx_391 = DPB(rdx_1026, (word32) dl_387, 0)
	switch (rdx_391) { l0000000000411201 l0000000000411028 l0000000000411028 l00000000004111C2 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l000000000041112C l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110BA l000000000041107F l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411064 l0000000000411036 l0000000000411028 l0000000000411028 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411054 }
// DataOut: eax ebp ecx r14 r15 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411054:
	branch rbx_1054 < 0x0000000000000000 l0000000000411283
// DataOut: ebp ecx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041105D:
	rbx_1054 = rbx_1054 * 0x0000000000000002
	edx_401 = 0x00000000
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411036:
	edx_401 = 0x00000000
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411064:
	branch rbx_1054 >u rax_379 l0000000000411283
// DataOut: ebp ecx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411077:
	rbx_1054 = rbx_1054 << 0x0000000000000009
	edx_401 = 0x00000000
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041107F:
	word64 rdi_857 = (int64) eax_383
	word64 rax_864 = (uint64) (SEQ(rdx_391, 0xFFFFFFFFFFFFFFFF) /u rdi_857)
	word32 esi_867 = 0x00000007
	rsi_365 = DPB(rsi_1018, 0x00000007, 0) (alias)
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110A6:
	branch rax_864 >=u rbx_1054 l0000000000411097
	branch rax_864 >=u rbx_1054 l0000000000411097
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411097:
	rbx_1054 = rbx_1054 *s rdi_857
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110AB:
	rbx_1054 = 0xFFFFFFFFFFFFFFFF
	rax_864 = DPB(rax_864, 0x00000001, 0) (alias)
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041109E:
	esi_867 = esi_867 - 0x00000001
	edx_401 = 0x00000000
	rsi_365 = DPB(rsi_365, esi_867, 0) (alias)
	branch esi_867 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110BA:
	word64 rdi_789 = (int64) eax_383
	word64 rax_796 = (uint64) (SEQ(rdx_391, 0xFFFFFFFFFFFFFFFF) /u rdi_789)
	word32 esi_799 = 0x00000008
	rsi_365 = DPB(rsi_1018, 0x00000008, 0) (alias)
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110E5:
	branch rax_796 >=u rbx_1054 l00000000004110D2
	branch rax_796 >=u rbx_1054 l00000000004110D2
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110D2:
	rbx_1054 = rbx_1054 *s rdi_789
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110EA:
	rbx_1054 = 0xFFFFFFFFFFFFFFFF
	rax_796 = DPB(rax_796, 0x00000001, 0) (alias)
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110D9:
	esi_799 = esi_799 - 0x00000001
	edx_401 = 0x00000000
	rsi_365 = DPB(rsi_365, esi_799, 0) (alias)
	branch esi_799 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110F9:
	rsi_365 = (int64) eax_383
	word64 rax_730 = (uint64) (SEQ(rdx_391, 0xFFFFFFFFFFFFFFFF) /u rsi_365)
	word32 edi_733 = 0x00000004
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041110F:
	branch rax_730 <u rbx_1054 l0000000000411271
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411271:
	rbx_1054 = 0xFFFFFFFFFFFFFFFF
	rax_730 = DPB(rax_730, 0x00000001, 0) (alias)
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411118:
	rbx_1054 = rbx_1054 *s rsi_365
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041111F:
	edx_401 = 0x00000000
	edi_733 = edi_733 - 0x00000001
	branch edi_733 != 0x00000000 l000000000041110F
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411127:
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041112C:
	rsi_365 = (int64) eax_383
	word64 rax_662 = (uint64) (SEQ(rdx_391, 0xFFFFFFFFFFFFFFFF) /u rsi_365)
	word32 edi_665 = 0x00000005
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411157:
	branch rax_662 >=u rbx_1054 l0000000000411144
	branch rax_662 >=u rbx_1054 l0000000000411144
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411144:
	rbx_1054 = rbx_1054 *s rsi_365
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041115C:
	rbx_1054 = 0xFFFFFFFFFFFFFFFF
	rax_662 = DPB(rax_662, 0x00000001, 0) (alias)
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041114B:
	edx_401 = 0x00000000
	edi_665 = edi_665 - 0x00000001
	branch edi_665 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041116B:
	rdi_597 = (int64) eax_383
	rsi_365 = 0xFFFFFFFFFFFFFFFF
	word64 rax_635 = (uint64) (SEQ(rdx_391, 0xFFFFFFFFFFFFFFFF) /u rdi_597)
	branch rbx_1054 >u rax_635 l00000000004112A3
// DataOut: ebp ecx r14 r15 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411186:
	rbx_1054 = rbx_1054 *s rdi_597
	branch rax_635 <u rbx_1054 l00000000004112A3
// DataOut: ebp ecx r14 r15 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0xFFFFFFFF ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004112A3:
	edx_401 = 0x00000001
	rbx_1054 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0xFFFFFFFF ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041119E:
	rdi_597 = (int64) eax_383
	rsi_365 = 0xFFFFFFFFFFFFFFFF
	branch rbx_1054 <=u (uint64) (SEQ(rdx_391, 0xFFFFFFFFFFFFFFFF) /u rdi_597) l0000000000411193
// DataOut: ebp ecx r14 r15 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411193:
	rsi_365 = 0xFFFFFFFFFFFFFFFF
	rbx_1054 = rbx_1054 *s rdi_597
	edx_401 = 0x00000000
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0xFFFFFFFF ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111B5:
	rbx_1054 = 0xFFFFFFFFFFFFFFFF
	edx_401 = 0x00000001
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0xFFFFFFFF ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041121B:
	rsi_365 = (int64) eax_383
	word64 rax_527 = (uint64) (SEQ(rdx_391, 0xFFFFFFFFFFFFFFFF) /u rsi_365)
	word32 edi_530 = 0x00000003
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411231:
	branch rax_527 <u rbx_1054 l0000000000411294
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411294:
	rbx_1054 = 0xFFFFFFFFFFFFFFFF
	rax_527 = DPB(rax_527, 0x00000001, 0) (alias)
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411236:
	rbx_1054 = rbx_1054 *s rsi_365
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041123D:
	edx_401 = 0x00000000
	edi_530 = edi_530 - 0x00000001
	branch edi_530 != 0x00000000 l0000000000411231
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411245:
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111C2:
	word64 rdi_452 = (int64) eax_383
	word64 rax_459 = (uint64) (SEQ(rdx_391, 0xFFFFFFFFFFFFFFFF) /u rdi_452)
	word32 esi_462 = 0x00000006
	rsi_365 = DPB(rsi_1018, 0x00000006, 0) (alias)
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111ED:
	branch rax_459 >=u rbx_1054 l00000000004111DA
	branch rax_459 >=u rbx_1054 l00000000004111DA
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111DA:
	rbx_1054 = rbx_1054 *s rdi_452
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111F2:
	rbx_1054 = 0xFFFFFFFFFFFFFFFF
	rax_459 = DPB(rax_459, 0x00000001, 0) (alias)
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111E1:
	esi_462 = esi_462 - 0x00000001
	edx_401 = 0x00000000
	rsi_365 = DPB(rsi_365, esi_462, 0) (alias)
	branch esi_462 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411028:
	Mem348[rbp_1006:word64] = rbx_1054
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411201:
	branch rbx_1054 >u rax_379 l0000000000411283
// DataOut: ebp ecx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411283:
	rbx_1054 = 0xFFFFFFFFFFFFFFFF
	edx_401 = 0x00000001
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411210:
	rbx_1054 = rbx_1054 << 0x000000000000000A
	edx_401 = 0x00000000
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411038:
	Mem420[r15_251:word64] = r14_275 + (int64) ecx_376
	word32 ebp_411 = ebp_1004 | edx_401
	rbp_1006 = DPB(rbp_1006, ebp_411, 0) (alias)
	branch Mem420[rsi_365:byte] == 0x00 l000000000041104F
// DataOut: eax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041104C_1:
	rbp_1006 = DPB(rbp_1006, ebp_411 | 0x00000002, 0) (alias)
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041104F:
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F4F:
	Mem310[rbp_1006:word64] = rbx_1054
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000410EF0:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> ebp:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410EF5:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> eax:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000410E90_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> eax:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> edx:<invalid> r14:<invalid> rcx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> r8:0x00000000FFFFFFFF r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn00000000004112D0(word64 rcx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi rcx
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004112D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004112D0_entry:
// DataOut: edi esi rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004112D0:
	word64 rsi_131
	word64 r10_6 = (int64) esi
	word32 r10d_7 = (word32) r10_6
	branch edi >u 0x00000003 l000000000041133B
// DataOut: edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000041133B:
	rsi_131 = DPB(rsi, 0x00416DD1, 0) (alias)
	branch edi == 0x00000004 l00000000004112FA
// DataOut: r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l0000000000411345:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 ebp:<invalid> esi:0x00416DD1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l00000000004112EB:
	branch edi >=u 0x00000002 l0000000000411334
// DataOut: edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l0000000000411334:
	rsi_131 = DPB(rsi, 0x00416E10, 0) (alias)
// DataOut: r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l00000000004112F0:
	rsi_131 = DPB(rsi, 0x00416DEC, 0) (alias)
	branch edi != 0x00000001 l000000000041132F
// DataOut: r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l00000000004112FA:
	branch r10d_7 < 0x00000000 l0000000000411347
// DataOut: r10 rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 ebp:<invalid> esi:<invalid> edi:edi - 0x00000001 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l0000000000411347:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 ebp:<invalid> esi:<invalid> edi:edi - 0x00000001 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l00000000004112FF:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 ebp:<invalid> esi:<invalid> edi:edi - 0x00000001 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000041130C:
	word64 rdi_70 = DPB(rdi, 0x00000000, 0)
	word64 rax_71 = dcgettext(rdi_70, rsi_131, DPB(rdx, 0x00000005, 0))
	word64 rsp_83
	word64 rbp_84
	word64 r10_85
	word32 esi_86
	word64 r12_87
	word64 r8_88
	word64 rbx_89
	byte SCZO_90
	word32 edi_91
	word32 ebp_92
	byte CZ_93
	byte C_94
	byte Z_95
	word32 r10d_96
	byte SZO_97
	byte S_98
	word32 ebx_99
	word64 r13_100
	word64 rcx_101
	word32 edx_102
	word64 rax_103
	word64 rdi_104
	word64 rsi_105
	word64 rdx_106
	word64 r9_107
	word32 eax_108
	byte dl_109
	call error (retsize: 8; depth: 48)
		uses: bLoc27_62,bLoc28_61,C_80,CZ_21,dl,dwLoc04_4,dwLoc08_10,dwLoc0C_14,dwLoc10_17,eax_78,ebp_23,ebx,edi_77,edx_65,esi_76,r10_6,r10d_7,r12_12,r13_63,r8_74,r9_72,rax_71,rbp,rbx_64,rcx_75,rdi_70,rdx_73,rsi_53,rsp_18,S_59,SCZO_56,SZO_79,Z_54
		defs: C_94,CZ_93,dl_109,eax_108,ebp_92,ebx_99,edi_91,edx_102,esi_86,r10_85,r10d_96,r12_87,r13_100,r8_88,r9_107,rax_103,rbp_84,rbx_89,rcx_101,rdi_104,rdx_106,rsi_105,rsp_83,S_98,SCZO_90,SZO_97,Z_95
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:<invalid> r12:r8 ebp:<invalid> esi:<invalid> edi:edi - 0x00000001 ebx:<invalid> r13:<invalid> rbx:rbx - (int64) esi -40(fp):dl -39(fp):0x00 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000041132F:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:<invalid> r12:r8 ebp:<invalid> edi:<invalid> esi:<invalid> ebx:<invalid> r13:<invalid> rbx:rbx - (int64) esi edx:<invalid> rax:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rcx:<invalid> eax:<invalid> -40(fp):dl -39(fp):0x00 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word32 fn0000000000411360(word32 edx, word64 rsi, word64 rdi, word64 r8, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rdi rsi
// LiveOut: eax ebp r12 r8 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411360_entry:
	*rbpOut = rbp
	*r8Out = r8
	*r12Out = r12
// DataOut: ebp edx r12 r8 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0028(64)

l0000000000411360:
	branch edx >u 0x00000024 l0000000000411788
// DataOut: ebp r12 r8 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000411788:
	word64 rsi_1115 = DPB(rsi, 0x00416BE0, 0)
	__assert_fail(DPB(rdi, 0x00416BF0, 0), rsi_1115, DPB(rdx, 0x00000060, 0), DPB(rcx, 0x00416FE8, 0))
// DataOut: ebp edi r12 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004117AB_thunk_fn00000000004117B0:
	word64 rsp_1118
	return fn00000000004117B0(rsi_1115, 0x00416BF0, out rsp_1118)
// DataOut: eax ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx ecx:0x00416FE8 edx:0x00000060 esi:0x00416BE0 edi:0x00416BF0 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041137A:
	branch rsi != 0x0000000000000000 l0000000000411392
// DataOut: r12 r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l000000000041138E_1:
// DataOut: r12 r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:fp - 0x0000000000000028 rbp:rdi r15:rsi r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000411392:
	word64 rsp_95
	word64 rdi_96
	word64 rsi_97
	word32 r14d_98
	word32 edx_99
	word64 rbp_100
	word64 rbx_101
	byte SCZO_102
	byte CZ_103
	word64 rax_104
	word64 r15_105
	byte SZO_106
	byte C_107
	word64 r13_108
	word64 rcx_109
	word64 r12_110
	word64 r8_111
	byte Z_112
	word32 ebx_113
	word64 rdx_114
	word32 ecx_115
	word32 esi_116
	word32 edi_117
	word32 r9d_118
	word32 eax_121
	word64 r14_122
	word32 ebp_123
	byte dl_124
	byte al_125
	word32 r8d_126
	byte S_127
	byte cl_128
	word64 r9_120
	byte bl_1108
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: al,bl_79,C_71,cl,CZ_23,dl,dwLoc04_4,dwLoc08_7,dwLoc0C_12,dwLoc10_15,dwLoc14_17,dwLoc18_20,dwLoc38,eax,ebp_67,ebx_77,ecx,edi,edx,esi,qwLoc38,r12_75,r13_73,r14,r14d_9,r15_68,r8,r8d,r9,r9d,rax_65,rbp_66,rbx_78,rcx,rdi,rdx,rsi,rsp_21,S,SCZO_22,SZO_69,Z_70
		defs: al_125,bl_119,C_107,cl_128,CZ_103,dl_124,eax_121,ebp_123,ebx_113,ecx_115,edi_117,edx_99,esi_116,r12_110,r13_108,r14_122,r14d_98,r15_105,r8_111,r8d_126,r9_120,r9d_118,rax_104,rbp_100,rbx_101,rcx_109,rdi_96,rdx_114,rsi_97,rsp_95,S_127,SCZO_102,SZO_106,Z_112
	word64 rax_1101 = rbp_100
// DataOut: bl r12 r15 r8 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:fp - 0x0000000000000028 rbp:rdi r15:<invalid> r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113AF:
	word32 r9d_146 = (word32) bl_1108
	r9_120 = DPB(r9_120, r9d_146, 0) (alias)
	branch (Mem0[qwLoc28 + 0x0000000000000001 + r9_120 * 0x02:byte] & 0x20) != 0x00 l00000000004113A8
// DataOut: bl r12 r15 r8 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113A8:
	rax_1101 = rax_1101 + 0x0000000000000001
	bl_1108 = (byte) (word32) Mem0[rax_1101:byte] (alias)
// DataOut: bl r12 r15 r8 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113BB:
	word32 eax_179
	branch bl_1108 != 0x2D l00000000004113D8
// DataOut: r12 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113D8:
	word32 ebp_1043
	word64 rbp_1042
	word64 rsi_1055
	word64 rdx_1063
	word32 edx_1062
	word64 rax_240 = __errno_location()
	Mem248[rax_240:word32] = 0x00000000
	word64 rsp_253
	word64 rdi_254
	word64 rsi_255
	word32 r14d_256
	word32 edx_257
	word64 rbp_258
	word64 rbx_259
	byte SCZO_260
	byte CZ_261
	word64 rax_262
	word64 r15_263
	byte SZO_264
	byte C_265
	word64 r13_266
	word64 rcx_267
	word64 r12_268
	word64 r8_269
	byte Z_270
	word32 ebx_271
	word64 rdx_272
	word32 ecx_273
	word32 esi_274
	word32 edi_275
	word32 r9d_276
	byte bl_277
	word64 r9_278
	word32 eax_279
	word64 r14_280
	word32 ebp_281
	byte dl_282
	byte al_283
	word32 r8d_284
	byte S_285
	byte cl_286
	call __strtoul_internal (retsize: 8; depth: 72)
		uses: al_242,bl_139,C_245,cl_128,CZ_103,dl_132,dwLoc04_4,dwLoc08_7,dwLoc0C_12,dwLoc10_15,dwLoc14_17,dwLoc18_20,dwLoc38,eax_241,ebp_123,ebx_138,ecx_243,edi_117,edx_246,esi_250,qwLoc08,qwLoc10,qwLoc18,qwLoc28,qwLoc38_252,r12_110,r13_108,r14_122,r14d_98,r15_105,r8_111,r8d_126,r9_147,r9d_146,rax_240,rbp_100,rbx_145,rcx_109,rdi_251,rdx_130,rsi_249,rsp_95,S_127,SCZO_151,SZO_244,Z_152
		defs: al_283,bl_277,C_265,cl_286,CZ_261,dl_282,eax_279,ebp_281,ebx_271,ecx_273,edi_275,edx_257,esi_274,r12_268,r13_266,r14_280,r14d_256,r15_263,r8_269,r8d_284,r9_278,r9d_276,rax_262,rbp_258,rbx_259,rcx_267,rdi_254,rdx_272,rsi_255,rsp_253,S_285,SCZO_260,SZO_264,Z_270
	word64 r14_287 = Mem248[r15_263:word64]
	word64 rbx_1091 = rax_262
	word64 r8_292 = rax_240
	*r8Out = r8_292
	branch r14_287 == rbp_258 l00000000004114BF
// DataOut: r12 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114BF:
	branch r12_268 == 0x0000000000000000 l00000000004113C0
// DataOut: r12 r14 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114C8:
	word32 edx_1077 = (word32) Mem248[rbp_258:byte]
	byte dl_1080 = (byte) edx_1077
	branch dl_1080 == 0x00 l00000000004113C0
// DataOut: dl r12 r14 r15 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114D4:
	rsi_1055 = DPB(rsi_255, (int32) dl_1080, 0) (alias)
	ebp_1043 = 0x00000000
	rbp_1042 = DPB(rbp_258, 0x00000000, 0) (alias)
	rbx_1091 = DPB(rax_262, 0x00000001, 0) (alias)
	edx_1062 = edx_1077
	rdx_1063 = DPB(rdx_272, edx_1077, 0) (alias)
	branch strchr(r12_268, rsi_1055) != 0x0000000000000000 l000000000041146C
// DataOut: dl ebp r12 r14 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) Mem0[rdi + 0x0000000000000000:byte] rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114F7:
// DataOut: r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) Mem0[rdi + 0x0000000000000000:byte] rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:(int32) dl ebp:0x00000000 -56(fp):(word32) Mem0[rdi + 0x0000000000000000:byte] -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041140C:
	word32 eax_1034 = Mem248[rax_262:word32]
	branch eax_1034 != 0x00000000 l0000000000411440
// DataOut: eax r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411440:
	ebp_1043 = 0x00000001
	rbp_1042 = DPB(rbp_258, 0x00000001, 0) (alias)
	branch eax_1034 != 0x00000022 l00000000004113C0
// DataOut: ebp r12 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041144E:
// DataOut: ebp r12 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> ebp:0x00000001 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411413:
	ebp_1043 = 0x00000000
	rbp_1042 = DPB(rbp_258, 0x00000000, 0) (alias)
// DataOut: ebp r12 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411415:
	branch r12_268 == 0x0000000000000000 l0000000000411422
// DataOut: ebp r12 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041141A:
	word32 edx_1047 = (word32) Mem248[rsi_255:byte]
	byte dl_1050 = (byte) edx_1047
	branch dl_1050 != 0x00 l0000000000411450
// DataOut: dl ebp r12 r14 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411450:
	rsi_1055 = DPB(rsi_255, (int32) dl_1050, 0) (alias)
	edx_1062 = edx_1047
	rdx_1063 = DPB(rdx_272, edx_1047, 0) (alias)
	branch strchr(r12_268, rsi_1055) == 0x0000000000000000 l0000000000411500
// DataOut: dl ebp r12 r14 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041146C:
	word64 rax_1000
	word32 eax_1014
	word32 ecx_1011
	word64 rsi_381 = DPB(rsi_1055, 0x00000030, 0)
	word64 rax_1004 = strchr(r12_268, rsi_381)
	branch rax_1004 == 0x0000000000000000 l00000000004114A3
// DataOut: dl ebp r12 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:(int32) dl ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411486:
	word32 eax_1003 = (word32) Mem248[rsi_381 + 0x0000000000000001:byte]
	rax_1004 = DPB(rax_1004, eax_1003, 0) (alias)
	byte al_1006 = (byte) eax_1003
	branch al_1006 == 0x44 l000000000041173A
// DataOut: al dl ebp r12 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411493:
	branch al_1006 == 0x69 l0000000000411722
// DataOut: al dl ebp r12 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411722:
	word64 rcx_1030 = DPB(rcx_267, Mem248[rsi_381 + 0x0000000000000002:byte] == 0x42, 0)
	eax_1014 = 0x00000400
	rax_1000 = DPB(rax_1004, 0x00000400, 0) (alias)
	ecx_1011 = rcx_1030 + 0x0000000000000001 + rcx_1030
// DataOut: dl eax ebp ecx r12 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041149B:
	branch al_1006 == 0x42 l000000000041173A
// DataOut: dl ebp r12 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041173A:
	ecx_1011 = 0x00000002
	eax_1014 = 0x000003E8
	rax_1000 = DPB(rax_1004, 0x000003E8, 0) (alias)
// DataOut: dl eax ebp ecx r12 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114A3:
	ecx_1011 = 0x00000001
	eax_1014 = 0x00000400
	rax_1000 = DPB(rax_1004, 0x00000400, 0) (alias)
// DataOut: dl eax ebp ecx r12 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114AD:
	byte dl_403 = (byte) (edx_1062 - 0x00000042)
	branch dl_403 >u 0x35 l0000000000411500
// DataOut: dl eax ebp ecx r12 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114B5:
	word64 rdi_621
	word32 edx_417
	word64 rdx_407 = DPB(rdx_1063, (word32) dl_403, 0)
	switch (rdx_407) { l00000000004116D9 l0000000000411500 l0000000000411500 l000000000041169A l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411604 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411592 l0000000000411557 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l000000000041153C l000000000041150E l0000000000411500 l0000000000411500 l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l000000000041152C }
// DataOut: eax ebp ecx r12 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041152C:
	branch rbx_1091 < 0x0000000000000000 l000000000041175B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411535:
	rbx_1091 = rbx_1091 * 0x0000000000000002
	edx_417 = 0x00000000
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041150E:
	edx_417 = 0x00000000
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041153C:
	word64 r8_961 = 0x00000000FFFFFFFF
	*r8Out = r8_961
	branch rbx_1091 >u rax_1000 l000000000041175B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041154F:
	rbx_1091 = rbx_1091 << 0x0000000000000009
	edx_417 = 0x00000000
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:0x00000000FFFFFFFF esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411557:
	word64 rdi_890 = (int64) eax_1014
	word64 rax_897 = (uint64) (SEQ(rdx_407, 0xFFFFFFFFFFFFFFFF) /u rdi_890)
	word32 esi_900 = 0x00000007
	rsi_381 = DPB(rsi_1055, 0x00000007, 0) (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041157E:
	branch rax_897 >=u rbx_1091 l000000000041156F
	branch rax_897 >=u rbx_1091 l000000000041156F
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041156F:
	rbx_1091 = rbx_1091 *s rdi_890
	*r8Out = DPB(r8_292, 0x00000000, 0)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411583:
	rbx_1091 = 0xFFFFFFFFFFFFFFFF
	rax_897 = DPB(rax_897, 0x00000001, 0) (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411576:
	esi_900 = esi_900 - 0x00000001
	edx_417 = 0x00000000
	rsi_381 = DPB(rsi_381, esi_900, 0) (alias)
	branch esi_900 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411592:
	word64 rdi_819 = (int64) eax_1014
	word64 rax_826 = (uint64) (SEQ(rdx_407, 0xFFFFFFFFFFFFFFFF) /u rdi_819)
	word32 esi_829 = 0x00000008
	rsi_381 = DPB(rsi_1055, 0x00000008, 0) (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115BD:
	branch rax_826 >=u rbx_1091 l00000000004115AA
	branch rax_826 >=u rbx_1091 l00000000004115AA
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115AA:
	rbx_1091 = rbx_1091 *s rdi_819
	*r8Out = DPB(r8_292, 0x00000000, 0)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115C2:
	rbx_1091 = 0xFFFFFFFFFFFFFFFF
	rax_826 = DPB(rax_826, 0x00000001, 0) (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115B1:
	esi_829 = esi_829 - 0x00000001
	edx_417 = 0x00000000
	rsi_381 = DPB(rsi_381, esi_829, 0) (alias)
	branch esi_829 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115D1:
	rsi_381 = (int64) eax_1014
	word64 rax_757 = (uint64) (SEQ(rdx_407, 0xFFFFFFFFFFFFFFFF) /u rsi_381)
	word32 edi_760 = 0x00000004
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115E7:
	branch rax_757 <u rbx_1091 l0000000000411749
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411749:
	rbx_1091 = 0xFFFFFFFFFFFFFFFF
	rax_757 = DPB(rax_757, 0x00000001, 0) (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115F0:
	rbx_1091 = rbx_1091 *s rsi_381
	*r8Out = DPB(r8_292, 0x00000000, 0)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115F7:
	edx_417 = 0x00000000
	edi_760 = edi_760 - 0x00000001
	branch edi_760 != 0x00000000 l00000000004115E7
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115FF:
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411604:
	rsi_381 = (int64) eax_1014
	word64 rax_686 = (uint64) (SEQ(rdx_407, 0xFFFFFFFFFFFFFFFF) /u rsi_381)
	word32 edi_689 = 0x00000005
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041162F:
	branch rax_686 >=u rbx_1091 l000000000041161C
	branch rax_686 >=u rbx_1091 l000000000041161C
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041161C:
	rbx_1091 = rbx_1091 *s rsi_381
	*r8Out = DPB(r8_292, 0x00000000, 0)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411634:
	rbx_1091 = 0xFFFFFFFFFFFFFFFF
	rax_686 = DPB(rax_686, 0x00000001, 0) (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411623:
	edx_417 = 0x00000000
	edi_689 = edi_689 - 0x00000001
	branch edi_689 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411643:
	rdi_621 = (int64) eax_1014
	rsi_381 = 0xFFFFFFFFFFFFFFFF
	word64 rax_659 = (uint64) (SEQ(rdx_407, 0xFFFFFFFFFFFFFFFF) /u rdi_621)
	branch rbx_1091 >u rax_659 l000000000041177B
// DataOut: ebp ecx r12 r14 r15 r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041165E:
	rbx_1091 = rbx_1091 *s rdi_621
	branch rax_659 <u rbx_1091 l000000000041177B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:0xFFFFFFFF ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041177B:
	edx_417 = 0x00000001
	rbx_1091 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:0xFFFFFFFF ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411676:
	rdi_621 = (int64) eax_1014
	rsi_381 = 0xFFFFFFFFFFFFFFFF
	branch rbx_1091 <=u (uint64) (SEQ(rdx_407, 0xFFFFFFFFFFFFFFFF) /u rdi_621) l000000000041166B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041166B:
	rsi_381 = 0xFFFFFFFFFFFFFFFF
	rbx_1091 = rbx_1091 *s rdi_621
	edx_417 = 0x00000000
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:0xFFFFFFFF ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041168D:
	rbx_1091 = 0xFFFFFFFFFFFFFFFF
	edx_417 = 0x00000001
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:0xFFFFFFFF ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116F3:
	rsi_381 = (int64) eax_1014
	word64 rax_548 = (uint64) (SEQ(rdx_407, 0xFFFFFFFFFFFFFFFF) /u rsi_381)
	word32 edi_551 = 0x00000003
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411709:
	branch rax_548 <u rbx_1091 l000000000041176C
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041176C:
	rbx_1091 = 0xFFFFFFFFFFFFFFFF
	rax_548 = DPB(rax_548, 0x00000001, 0) (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041170E:
	rbx_1091 = rbx_1091 *s rsi_381
	*r8Out = DPB(r8_292, 0x00000000, 0)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411715:
	edx_417 = 0x00000000
	edi_551 = edi_551 - 0x00000001
	branch edi_551 != 0x00000000 l0000000000411709
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041171D:
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041169A:
	word64 rdi_470 = (int64) eax_1014
	word64 rax_477 = (uint64) (SEQ(rdx_407, 0xFFFFFFFFFFFFFFFF) /u rdi_470)
	word32 esi_480 = 0x00000006
	rsi_381 = DPB(rsi_1055, 0x00000006, 0) (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116C5:
	branch rax_477 >=u rbx_1091 l00000000004116B2
	branch rax_477 >=u rbx_1091 l00000000004116B2
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116B2:
	rbx_1091 = rbx_1091 *s rdi_470
	*r8Out = DPB(r8_292, 0x00000000, 0)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116CA:
	rbx_1091 = 0xFFFFFFFFFFFFFFFF
	rax_477 = DPB(rax_477, 0x00000001, 0) (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116B9:
	esi_480 = esi_480 - 0x00000001
	edx_417 = 0x00000000
	rsi_381 = DPB(rsi_381, esi_480, 0) (alias)
	branch esi_480 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411500:
	Mem361[rbp_1042:word64] = rbx_1091
	eax_179 = ebp_1043 | 0x00000002
// DataOut: eax r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> ebp:<invalid> esi:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116D9:
	word64 r8_457
	*r8Out = 0x00000000FFFFFFFF
	branch rbx_1091 >u rax_1000 l000000000041175B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041175B:
	rbx_1091 = 0xFFFFFFFFFFFFFFFF
	edx_417 = 0x00000001
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116E8:
	rbx_1091 = rbx_1091 << 0x000000000000000A
	edx_417 = 0x00000000
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:0x00000000FFFFFFFF esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411510:
	Mem436[r15_263:word64] = r14_287 + (int64) ecx_1011
	ebp_1043 = ebp_1043 | edx_417
	rbp_1042 = DPB(rbp_1042, ebp_1043, 0) (alias)
	branch Mem436[rsi_381:byte] == 0x00 l0000000000411527
// DataOut: eax ebp r12 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411524_1:
	ebp_1043 = ebp_1043 | 0x00000002
	rbp_1042 = DPB(rbp_1042, ebp_1043 | 0x00000002, 0) (alias)
// DataOut: ebp r12 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> rcx:<invalid> cl:<invalid> r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411527:
// DataOut: ebp r12 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> rcx:<invalid> cl:<invalid> r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411422:
	Mem320[rbp_1042:word64] = rbx_1091
	word64 rbp_333
	*rbpOut = Mem320[qwLoc08 + 0x0000000000000008:word64]
	word64 rsp_339
	*rspOut = qwLoc08 + 0x0000000000000020
	return ebp_1043
// DataOut: eax ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> ebp:<invalid> esi:<invalid> rcx:<invalid> cl:<invalid> r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004113C0:
	eax_179 = 0x00000004
// DataOut: eax r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> ebp:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113C5:
	word64 rbp_194
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	word64 rsp_200
	*rspOut = qwLoc08 + 0x0000000000000020
	return eax_179
// DataOut: eax ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> eax:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> ebp:<invalid> esi:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000411360_exit:
// DataOut: eax ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> edi:<invalid> eax:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> rcx:<invalid> r14:<invalid> r8:<invalid> ebp:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word32 fn00000000004117B0(word64 rsi, word32 edi, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi rsi
// LiveOut: eax rsp
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004117B0_entry:
// DataOut: ebp edi r12 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: v3(64)

l00000000004117B0:
	word32 eax_16
	word64 rsp_18 = v3 - 0x0000000000000008
	branch edi == 0x00000000 l0000000000411800
// DataOut: ebp edi r12 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411800:
	Mem87[__errno_location():word32] = 0x0000005F
	eax_16 = 0xFFFFFFFF
// DataOut: eax ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008

l00000000004117B8:
	byte Z_24 = cond(edi - 0x0000000A)
	eax_16 = edi
	branch edi == 0x0000000A l00000000004117C8
// DataOut: eax ebp r12 r8 rbp rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008

l00000000004117C8:
	word64 rdx_35 = Mem0[rsi:word64]
	word64 rdi_37 = DPB(rdi, 0x004137B1, 0)
	word64 rcx_39 = DPB(rcx, 0x0000000A, 0)
	word64 rsi_40 = rdx_35
// DataOut: eax ebp r12 r8 rbp rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 eax:edi

l00000000004117D8:
	branch rcx_39 == 0x0000000000000000 l00000000004117DA
// DataOut: eax ebp r12 r8 rbp rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 eax:edi rdx:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid>

l00000000004117D8_1:
	Z_24 = cond(Mem0[rsi_91:byte] - Mem0[rdi_90:byte]) (alias)
	rsi_40 = rsi_91 + 0x0000000000000001
	rdi_37 = rdi_90 + 0x0000000000000001
	rcx_39 = rcx_39 - 0x0000000000000001
	word64 rdi_90 = rdi_37
	word64 rsi_91 = rsi_40
	branch Mem0[rsi_91:byte] != Mem0[rdi_90:byte] l00000000004117D8
// DataOut: eax ebp r12 r8 rbp rcx rdi rsi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:v3 - 0x0000000000000008 eax:edi rdx:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid>

l00000000004117DA:
	branch Z_24 l00000000004117BF
// DataOut: eax ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 eax:edi rdx:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid>

l00000000004117DC:
	byte SCZO_61
	word32 edi_62
	byte SZO_63
	byte C_64
	byte Z_65
	word32 eax_66
	word64 rsi_67
	word64 rdx_68
	word32 ecx_69
	word64 rcx_70
	word64 rdi_71
	word64 rax_72
	call freecon (retsize: 8; depth: 8)
		uses: C_55,eax_26,ecx_52,edi_57,rax_28,rcx_51,rdi_59,rdx_35,rsi_53,rsp_2,SCZO_58,SZO_56,Z_54
		defs: C_64,eax_66,ecx_69,edi_62,rax_72,rcx_70,rdi_71,rdx_68,rsi_67,rsp_60,SCZO_61,SZO_63,Z_65
	Mem74[__errno_location():word32] = 0x0000003D
	eax_16 = 0xFFFFFFFF
// DataOut: eax ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 eax:edi rdx:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid>

l00000000004117BF:
	word64 rsp_19
	*rspOut = rsp_18 + 0x0000000000000008
	return eax_16
// DataOut: eax ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 - 0x0000000000000008 eax:<invalid> rax:<invalid> rdx:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid>

fn00000000004117B0_exit:
// DataOut: eax rsp
// DataOut (flags): 
// SymbolicIn: rsp:v3 eax:<invalid> rax:<invalid> rdx:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid>



void fn0000000000411820(word32 eax, word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rsi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000411820_entry:
// DataOut: eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411820:
	word64 rsp_9
	word64 rbx_10
	word64 rsi_11
	word32 edi_12
	word32 eax_13
	call getfilecon (retsize: 8; depth: 12)
		uses: dwLoc04_4,qwLoc04_6,rbx_8,rsi,rsp_2
		defs: eax_13,edi_12,rbx_10,rsi_11,rsp_9
// DataOut: edi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041182F_thunk_fn00000000004117B0:
	word64 rsp_18
	fn00000000004117B0(rbx_10, eax_13, out rsp_18)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:rsi edi:eax -4(fp):rbx

fn0000000000411820_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rbx rsi:<invalid> edi:<invalid> eax:<invalid> rax:<invalid> rdx:<invalid> ecx:<invalid> rdi:<invalid> rcx:<invalid> -4(fp):rbx



void fn0000000000411840(word32 eax, word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rsi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000411840_entry:
// DataOut: eax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411840:
	word64 rsp_9
	word64 rbx_10
	word64 rsi_11
	word32 edi_12
	word32 eax_13
	byte SCZO_14
	byte SZO_15
	byte C_16
	byte Z_17
	word64 rax_18
	word64 rdx_19
	word32 ecx_20
	word64 rcx_21
	word64 rdi_22
	call lgetfilecon (retsize: 8; depth: 12)
		uses: dwLoc04_4,qwLoc04_6,rbx_8,rsi,rsp_2
		defs: C_16,eax_13,ecx_20,edi_12,rax_18,rbx_10,rcx_21,rdi_22,rdx_19,rsi_11,rsp_9,SCZO_14,SZO_15,Z_17
// DataOut: edi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041184E_thunk_fn00000000004117B0:
	word64 rsp_28
	fn00000000004117B0(rbx_10, eax_13, out rsp_28)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:rsi edi:eax -4(fp):rbx

fn0000000000411840_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rbx rsi:<invalid> edi:<invalid> eax:<invalid> rax:<invalid> rdx:<invalid> ecx:<invalid> rdi:<invalid> rcx:<invalid> -4(fp):rbx



void fn0000000000411880(word64 rax, word64 rdi, word64 r8, word64 r13)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r13 r8 rax rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000411880_entry:
// DataOut: eax r13 r8 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411880:
	word64 rsp_13
	word64 rbp_14
	word64 rdi_15
	word64 rbx_16
	word32 ebx_17
	word64 r12_18
	word64 rax_19
	byte SZO_20
	byte C_21
	word32 eax_22
	byte dl_23
	byte Z_24
	byte SCZO_25
	byte bl_26
	word64 r8_27
	word64 r13_28
	word64 rsi_29
	call __fpending (retsize: 8; depth: 20)
		uses: dwLoc04_4,dwLoc08_7,dwLoc0C_12,rbp_9,rbx,rdi,rsp_10
		defs: bl_26,C_21,dl_23,eax_22,ebx_17,r12_18,r13_28,r8_27,rax_19,rbp_14,rbx_16,rdi_15,rsi_29,rsp_13,SCZO_25,SZO_20,Z_24
	word32 ebx_34
	word64 rsp_35
	word64 rbp_36
	word64 rsi_37
	word64 r12_38
	word32 eax_40 = (word32) fn0000000000411D30(rax_19, rbp_14, r8_27, r13_28, out ebx_34, out rsp_35, out rbp_36, out rsi_37, out r12_38)
	branch (ebx_34 & 0x00000020) != 0x00000000 l00000000004118C0
// DataOut: dl r12 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004118C0:
	branch eax_40 != 0x00000000 != 0x00 l00000000004118B4
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rdi:<invalid> r12:rax dl:Test(NE,Z) rax:<invalid> r12d:<invalid> eax:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rbx:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118C9:
	Mem98[__errno_location():word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:0xFFFFFFFF rdi:<invalid> r12:rax dl:Test(NE,Z) rax:<invalid> r12d:<invalid> eax:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rbx:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118A6:
	branch eax_40 != 0x00000000 == 0x00 l00000000004118B4
// DataOut: r12 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rdi:<invalid> r12:rax dl:Test(NE,Z) rax:<invalid> r12d:<invalid> eax:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rbx:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118AA:
	branch r12_38 == 0x0000000000000000 l00000000004118E0
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rdi:<invalid> r12:rax dl:Test(NE,Z) rax:<invalid> r12d:<invalid> eax:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rbx:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118E0:
	__errno_location()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:0xFFFFFFFF rdi:<invalid> r12:rax dl:Test(NE,Z) rax:<invalid> r12d:<invalid> eax:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rbx:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118B4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rdi:<invalid> r12:rax dl:Test(NE,Z) rax:<invalid> r12d:<invalid> eax:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rbx:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000411880_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rdi:<invalid> r12:rax dl:Test(NE,Z) eax:<invalid> rbx:<invalid> rax:<invalid> bl:<invalid> r12d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn0000000000411900(word64 rbp, word64 rsi, word64 r8, word64 r12, word64 r13, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r12 r13 r15 r8 rbp rsi
// LiveOut: r12d rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411900_entry:
// DataOut: fs r12 r12d r13 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411900:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	edi = 0x0000000E
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v7 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rsp = fp - 0x00000000000000C0
	rax = Mem0[fs:0x00000028:word64]
	qwLoc28 = rax
	eax = 0x00000000
	SZO = cond(0x00000000)
	C = false
	call nl_langinfo (retsize: 8; depth: 200)
	r14 = Mem0[0x000000000061B358:word64]
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	eax = 0x00416919
	rax = DPB(rax, eax, 0) (alias)
	branch Test(NE,Z) l0000000000411944
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411940_1:
	rbx = rax
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 edi:<invalid> rax:<invalid> eax:0x00416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411944:
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000041196A
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 edi:<invalid> rax:<invalid> eax:0x00416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411949:
// DataOut: fs r12 r12d r13 r14 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 edi:<invalid> rax:<invalid> eax:0x00416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119D4:
	edi = 0x00417002
	rax = getenv(rdi)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l00000000004119EF
// DataOut: fs r12 r12d r13 r14 r15 r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 edi:<invalid> rax:<invalid> eax:0x00416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119E6:
	SCZO = cond(Mem0[rax:byte] - 0x00)
	branch Test(NE,Z) l0000000000411C52
// DataOut: fs r12 r12d r13 r14 r15 r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 edi:0x00417002 rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C52:
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	SZO = cond(rax & rax)
	C = false
	r12 = rax
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r12 r12d r13 r14 r15 r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 edi:0x00417002 rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C62:
	rax = rax - 0x0000000000000001
// DataOut: fs r12 r12d r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119EF:
	eax = 0x00000007
	esp = 0x00000008
	edi = 0x00416FF3
// DataOut: fs r12 r12d r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 edi:0x00417002 rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A00:
	SCZO = cond(Mem0[r15 + rax:byte] - 0x2F)
	ebp = 0x00000001
	Mem0[rsp + 0x0000000000000008:word32] = 0x00000001
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r12 r12d r13 r14 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 rdi:<invalid> r12:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C42:
	r13d = 0x00000000
	SZO = cond(0x00000000)
	C = false
	Mem0[rsp + 0x0000000000000008:word32] = 0x00000000
// DataOut: fs r12 r12d r13 r14 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> esp:0x00000008 ebp:0x00000001 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A19:
	r13 = r13 + r12
	rdi = rbp + 0x000000000000000E
	rax = malloc(rdi)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l0000000000411CF2
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:0x00000001 rdi:<invalid> r12:<invalid> r13d:0x00000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CF2:
	esi = 0x00416919
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:rbp + 0x000000000000000E r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A31:
	rdx = r12
	rsi = r15
	rdi = rax
	rax = memcpy(rdi, rsi, rdx)
	edx = Mem0[rsp + 0x0000000000000008:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000411A4D
// DataOut: fs r13 r14 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:rbp + 0x000000000000000E r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A47:
	Mem0[rbp + 0x0000000000000000:byte] = 0x2F
// DataOut: fs r13 r14 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A4D:
	r13 = r13 + rbp
	r8 = 0x0000000072616863
	esi = 0x00020000
	Mem0[rbp + 0x0000000000000000:word64] = rax
	eax = 0x00000073
	Mem0[rbp + 0x0000000000000008:word32] = 0x61696C61
	Mem0[rbp + 0x000000000000000C:word16] = ax
	rdi = rbp
	eax = 0x00000000
	rax = DPB(rax, open(rdi, rsi), 0)
	SZO = cond(eax & eax)
	C = false
	r12d = eax
	branch Test(SG,S) l0000000000411C28
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A8A:
	esi = 0x00413A21
	edi = eax
	rax = fdopen(rdi, rsi)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l0000000000411C20
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:0x0000000072616863 esi:0x00020000 r12d:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C20:
	edi = r12d
	rax = DPB(rax, close(rdi), 0)
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:0x0000000072616863 esi:0x00413A21 r12d:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AA2:
	r12 = rsp + 0x0000000000000020
	Mem0[rsp + 0x0000000000000008:word64] = 0x0000000000000000
// DataOut: fs r12 r13 r14 r15 r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:0x0000000072616863 esi:0x00413A21 r12d:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AB0:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411C01
// DataOut: eax fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ABE:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	edi = (word32) Mem0[rax:byte]
// DataOut: edi fs r12 r13 r14 r15 r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AC9:
	SCZO = cond(edi - 0x00000020)
	branch Test(EQ,Z) l0000000000411AB0
// DataOut: edi fs r12 r13 r14 r15 r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ACE:
	eax = rdi - 0x0000000000000009
	SCZO = cond(eax - 0x00000001)
	branch Test(ULE,CZ) l0000000000411AB0
// DataOut: edi fs r12 r13 r14 r15 r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AD6:
	SCZO = cond(edi - 0x00000023)
	branch Test(EQ,Z) l0000000000411C75
// DataOut: fs r12 r13 r14 r15 r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C75:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411D1D
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411D1D
// DataOut: eax fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411D1D:
	rdi = r15
	call __uflow (retsize: 8; depth: 8)
// DataOut: eax fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C83:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	eax = (word32) Mem0[rax:byte]
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	eax = (word32) Mem0[rax:byte]
// DataOut: eax fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C8E:
	SCZO = cond(eax - 0x0000000A)
	branch Test(NE,Z) l0000000000411C70
// DataOut: eax fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C70:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(EQ,Z) l0000000000411C93
// DataOut: eax fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C93:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(NE,Z) l0000000000411AB0
// DataOut: eax fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ADF:
	rsi = r15
	call ungetc (retsize: 8; depth: 8)
	rcx = rsp + 0x0000000000000060
	eax = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rdx = r12
	esi = 0x00417012
	rdi = r15
	call fscanf (retsize: 8; depth: 8)
	SCZO = cond(0xFFFFFFFF)
	branch Test(LE,SZO) l0000000000411C9C
// DataOut: eax fs r12 r13 r14 r15 r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B07:
	rdx = r12
// DataOut: fs r12 r14 r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B0A:
	ecx = Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	ecx = ~ecx
	eax = eax & ecx
	eax = eax & 0x80808080
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B0A
// DataOut: al eax fs r12 r14 r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B21:
	ecx = eax
	r10 = rsp + 0x0000000000000060
	ecx = ecx >>u 0x00000010
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B33
// DataOut: al cl fs r10 r12 r14 r15 r8 rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B30_1:
	eax = ecx
// DataOut: al fs r10 r12 r14 r15 r8 rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B33:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B3B
// DataOut: al fs r10 r12 r14 r15 r8 rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B37_2:
	rdx = rcx
// DataOut: al fs r10 r12 r14 r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B3B:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = rdx - r12
	SCZO = cond(rdx)
// DataOut: fs r10 r12 r14 r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B44:
	ecx = Mem0[rdx:word32]
	r10 = r10 + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	ecx = ~ecx
	eax = eax & ecx
	eax = eax & 0x80808080
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B44
// DataOut: al eax fs r10 r12 r14 r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B5C:
	ecx = eax
	ecx = ecx >>u 0x00000010
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B69
// DataOut: al cl fs r10 r12 r14 r15 r8 rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B66_3:
	eax = ecx
// DataOut: al fs r10 r12 r14 r15 r8 rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B69:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B71
// DataOut: al fs r10 r12 r14 r15 r8 rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B6D_4:
	r10 = rcx
// DataOut: al fs r10 r12 r14 r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B71:
	al = al + al
	SCZO = cond(al)
	rax = rsp + 0x0000000000000060
	r10 = r10 - 0x03 - C
	r10 = r10 - rax
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - 0x0000000000000000)
	rax = r10 + rdx
	branch Test(NE,Z) l0000000000411CBC
// DataOut: fs r10 r12 r14 r15 r8 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CBC:
	rax = rax + Mem0[rsp + 0x0000000000000008:word64]
	SCZO = cond(rax)
	rdi = r14
	Mem0[rsp + 0x0000000000000018:word64] = r10
	Mem0[rsp + 0x0000000000000010:word64] = rdx
	rcx = rax + 0x0000000000000002
	rsi = rax + 0x0000000000000003
	Mem0[rsp + 0x0000000000000008:word64] = rcx
	rax = realloc(rdi, rsi)
	r10 = Mem0[rsp + 0x0000000000000018:word64]
	r13 = rax
	rdx = Mem0[rsp + 0x0000000000000010:word64]
// DataOut: eax fs r10 r12 r13 r14 r15 r8 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B8F:
	rcx = rax + 0x0000000000000002
	rdi = rax + 0x0000000000000003
	Mem0[rsp + 0x0000000000000018:word64] = rdx
	Mem0[rsp + 0x0000000000000010:word64] = r10
	Mem0[rsp + 0x0000000000000008:word64] = rcx
	rax = malloc(rdi)
	r10 = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000018:word64]
	r13 = rax
// DataOut: eax fs r10 r12 r13 r14 r15 r8 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411BB8:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000411D02
// DataOut: eax fs r10 r12 r13 r14 r15 r8 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411BC1:
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	rdi = 0xFFFFFFFFFFFFFFFE
	rsi = r12
	rdi = 0xFFFFFFFFFFFFFFFE - rdx
	r14 = r14 - r10
	rdi = rdi + r14
	rdi = rdi + r13
	rax = strcpy(rdi, rsi)
	rdi = r13 - 0x0000000000000001 + r14
	rsi = rsp + 0x0000000000000060
	r14 = r13
	rax = strcpy(rdi, rsi)
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(ULT,C) l0000000000411ABE
// DataOut: eax fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C01:
	rdi = r15
	call __uflow (retsize: 8; depth: 8)
	SCZO = cond(eax - 0xFFFFFFFF)
	edi = eax
	branch Test(EQ,Z) l0000000000411C9C
// DataOut: eax edi fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C9C:
	rdi = r15
	rax = fn0000000000411D30(rax, rdi, r8, r13, out ebx, out rsp, out rbp, out rsi, out r12)
	rax = Mem0[rsp + 0x0000000000000008:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411C28
	rdi = r15
	rax = fn0000000000411D30(rax, rdi, r8, r13, out ebx, out rsp, out rbp, out rsi, out r12)
	rax = Mem0[rsp + 0x0000000000000008:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411C28
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C28:
	esi = 0x00416919
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CB2:
	Mem0[r14 + rax:byte] = 0x00
	Mem0[r14 + rax:byte] = 0x00
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C2E:
	rdi = rbp
	free(rdi)
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> esi:<invalid> rbp:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C36:
	Mem0[0x000000000061B358:word64] = r14
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041196A:
	ebp = (word32) Mem0[rsi:byte]
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l000000000041199C
// DataOut: bpl eax fs r12d r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411973:
	rsi = r14
	rdi = rbx
	rax = DPB(rax, strcmp(rdi, rsi), 0)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041198F
// DataOut: bpl fs r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411982:
	SCZO = cond(bpl - 0x2A)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411988:
	SCZO = cond(Mem0[rsi + 0x0000000000000001:byte] - 0x00)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411950:
	rdi = r14
	rax = DPB(rax, strlen(rdi), 0)
	rbp = r14 + 0x0000000000000001 + rax
	rdi = rbp
	rax = DPB(rax, strlen(rdi), 0)
	r14 = rbp + 0x0000000000000001 + rax
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041198F:
	rdi = r14
	rax = DPB(rax, strlen(rdi), 0)
	rbx = r14 + 0x0000000000000001 + rax
// DataOut: fs r12d r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041199C:
	SCZO = cond(Mem0[rbx:byte] - 0x00)
	eax = 0x00416FFC
	branch Test(NE,Z) l00000000004119A8
// DataOut: fs r12d r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119A4_1:
	rbx = rax
// DataOut: fs r12d r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:0x00416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:0xFC -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119A8:
	rcx = Mem0[rsp + 0x0000000000000098:word64]
	rcx = rcx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rcx)
	C = false
	rax = rbx
	branch Test(NE,Z) l0000000000411CFD
// DataOut: eax fs r12d r13 r14 r15 r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:0x00416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:0xFC -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CFD:
	__stack_chk_fail()
// DataOut: eax fs r13 r14 r15 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411D02:
	rdi = r14
	esi = 0x00416919
	free(rdi)
	rdi = r15
	rax = fn0000000000411D30(rax, rdi, r8, r13, out ebx, out rsp, out rbp, out rsi, out r12)
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119C2:
	rsp = rsp + 168
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000411900_exit:
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use r12d (=> r12dOut)
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C14:
// DataOut: edi fs r12 r13 r14 r15 r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000411D30(word64 rax, word64 rdi, word64 r8, word64 r13, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r13 r8 rax rdi
// LiveOut: eax ebx r12 r12d rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411D30_entry:
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411D30:
	word64 rax_15 = DPB(rax, fileno(rdi), 0)
	word32 eax_16 = fileno(rdi)
	branch eax_16 < 0x00000000 l0000000000411D9F
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411D43:
	word64 rsp_101
	word64 rbp_102
	word64 rdi_104
	word64 rax_105
	byte SZO_107
	byte C_108
	byte S_109
	byte Z_110
	word32 r12d_111
	word32 esi_114
	word32 edx_115
	word32 edi_116
	byte SCZO_117
	word32 ebx_118
	word64 rsi_119
	word64 r13_113
	word64 r8_112
	word64 r12_120
	word32 eax_106
	word64 rbx_103
	call __freading (retsize: 8; depth: 20)
		uses: C_19,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_16,ebx_13,edi,edx,esi,r12,r12d,r13,r8,rax_15,rbp,rbx_12,rdi_20,rsi,rsp_8,S_18,SCZO,SZO_17,Z
		defs: C_108,eax_106,ebx_118,edi_116,edx_115,esi_114,r12_120,r12d_111,r13_113,r8_112,rax_105,rbp_102,rbx_103,rdi_104,rsi_119,rsp_101,S_109,SCZO_117,SZO_107,Z_110
	branch eax_106 != 0x00000000 l0000000000411D80
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi rax:DPB(rax, <invalid>, 0) rdi:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D80:
	word64 rax_188 = DPB(rax_105, fileno(rbx_103), 0)
	word64 rsp_196
	word64 rbp_197
	word64 rdi_199
	word64 rax_200
	byte SZO_202
	byte C_203
	byte S_204
	byte Z_205
	word32 r12d_206
	word32 esi_209
	word32 edx_210
	word32 edi_211
	byte SCZO_212
	word32 ebx_213
	word64 rsi_214
	call lseek (retsize: 8; depth: 20)
		uses: C_193,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_189,ebx_118,edi_195,edx_194,esi_190,r12_120,r12d_111,r13_113,r8_112,rax_188,rbp_102,rbx_103,rdi_187,rsi_191,rsp_101,S_109,SCZO_117,SZO_192,Z_122
		defs: C_203,eax_201,ebx_213,edi_211,edx_210,esi_209,r12_215,r12d_206,r13_208,r8_207,rax_200,rbp_197,rbx_198,rdi_199,rsi_214,rsp_196,S_204,SCZO_212,SZO_202,Z_205
	branch rax_200 != 0xFFFFFFFFFFFFFFFF l0000000000411D4C
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi rax:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D4C:
	word64 rsp_158
	word64 rsi_159
	branch (word32) fn0000000000411DB0(eax_106, rbx_103, out rsp_158, out rsi_159) == 0x00000000 l0000000000411D9C
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi rax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D9C:
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rsi:<invalid> eax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D9F:
// DataOut: eax ebx fs r12 r12d r13 r14 r15 r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rsi:<invalid> eax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000402310:
	word64 rsp_81
	word64 rbp_82
	word64 rbx_83
	word64 rdi_84
	word64 rax_85
	word32 eax_86
	byte SZO_87
	byte C_88
	byte S_89
	byte Z_90
	word32 r12d_91
	word64 r8_92
	word64 r13_93
	word32 esi_94
	word32 edx_95
	word32 edi_96
	byte SCZO_97
	word32 ebx_98
	word64 rsi_99
	word64 r12_100
	call Mem0[0x000000000061A0D0:word32] (retsize: 4; depth: 4)
		uses: C_69,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_70,ebx_75,edi_58,edx_59,esi_60,r12_65,r12d_64,r13_61,r8_62,rax_71,rbp_77,rbx_74,rdi_66,rsi_56,rsp_80,S_63,SCZO_57,SZO_67,Z_68
		defs: C_88,eax_86,ebx_98,edi_96,edx_95,esi_94,r12_100,r12d_91,r13_93,r8_92,rax_85,rbp_82,rbx_83,rdi_84,rsi_99,rsp_81,S_89,SCZO_97,SZO_87,Z_90
	return rax_85
// DataOut: eax ebx fs r12 r12d r13 r14 r15 r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rbp:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rsi:<invalid> eax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D58:
	word64 rax_165 = __errno_location()
	word32 r12d_166 = Mem0[r8_112:word32]
	word64 r12_167
	*r12Out = DPB(r12_120, r12d_166, 0)
	word64 rax_170 = DPB(rax_165, fclose(rbx_103), 0)
	branch r12d_166 == 0x00000000 l0000000000411D79
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rsi:<invalid> eax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D70:
	Mem184[r13_113:word32] = r12d_166
	rax_170 = DPB(rax_165, 0xFFFFFFFF, 0) (alias)
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r12d:<invalid> rbp:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rsi:<invalid> eax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D79:
	word32 ebx_178
	*ebxOut = (word32) Mem0[rsp_158:word64]
	word64 rbp_180
	*rbpOut = Mem0[rsp_158 + 0x0000000000000008:word64]
	word64 rsp_183
	*rspOut = Mem0[rsp_158 + 0x0000000000000010:word64] + 0x0000000000000008
	return rax_170
// DataOut: eax ebx fs r12 r12d r13 r14 r15 r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r12d:<invalid> rbp:<invalid> eax:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000411D30_exit:
// DataOut: eax ebx r12 r12d rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rbp:<invalid> r12d:<invalid> eax:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn0000000000411DB0(word32 eax, word64 rdi, ptr64 & rspOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rdi
// LiveOut: eax rax rsi rsp
// Trashed: SCZO ah al ax bh bl bx dh di dil dl dx eax ebx edi edx esi esp rax rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411DB0_entry:
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB0:
	branch rdi == 0x0000000000000000 l0000000000411DC2
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB9:
	word64 rsp_42
	word64 rdi_43
	byte SZO_44
	byte C_45
	word64 rbx_46
	byte Z_47
	word32 eax_48
	word32 edx_49
	word32 esi_50
	word64 rax_51
	word64 rsi_52
	call __freading (retsize: 8; depth: 12)
		uses: C_5,dwLoc04_8,eax,edx,esi,qwLoc04,rax,rbx_9,rdi,rsi,rsp_6,SZO_3,Z_4
		defs: C_45,eax_48,edx_49,esi_50,rax_51,rbx_46,rdi_43,rsi_52,rsp_42,SZO_44,Z_47
	branch eax_48 != 0x00000000 l0000000000411DD0
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411DD0:
	branch (Mem0[rbx_46:word32] & 0x00000100) == 0x00000000 l0000000000411DC2
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411DD8:
	word64 rsp_65
	word64 rsi_66
	fn0000000000411DF0(rbx_46, out rsp_65, out rsi_66)
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

l0000000000411DC2:
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

l0000000000402650:
	word64 rsp_16
	word64 rdi_17
	byte SZO_18
	byte C_19
	word64 rbx_20
	byte Z_21
	word32 eax_22
	word32 edx_23
	word32 esi_24
	word64 rax_25
	word64 rsi_26
	call Mem0[0x000000000061A270:word32] (retsize: 4; depth: 4)
		uses: C_5,dwLoc04_8,eax,edx,esi,rax,rbx_9,rdi,rsi,rsp_6,SZO_3,Z_4
		defs: C_19,eax_22,edx_23,esi_24,rax_25,rbx_20,rdi_17,rsi_26,rsp_16,SZO_18,Z_21
	return rax_25
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdi:rdi edx:<invalid> esi:0x00000000 rax:<invalid> rsi:<invalid> edi:<invalid> eax:0x00000000 -4(fp):rbx

fn0000000000411DB0_exit:
// DataOut: eax rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdi:<invalid> edx:<invalid> esi:<invalid> rax:<invalid> rsi:<invalid> edi:<invalid> eax:<invalid> -4(fp):rbx



word64 fn0000000000411DF0(word64 rdi, ptr64 & rspOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: eax rax rsi rsp
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi esp rax rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411DF0_entry:
// DataOut: fs r12 r12d r13 r14 r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DF0:
	branch Mem0[rdi + 0x0000000000000010:word64] == Mem0[rdi + 0x0000000000000008:word64] l0000000000411E10
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411E10:
	word64 rax_57 = Mem0[rdi + 0x0000000000000020:word64]
	branch Mem0[rdi + 0x0000000000000028:word64] != rax_57 l0000000000411E02
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E1A:
	branch Mem0[rdi + 0x0000000000000048:word64] != 0x0000000000000000 l0000000000411E02
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E21:
	word64 rax_65 = DPB(rax_57, fileno(rdi), 0)
	word64 rsp_70
	word64 rbx_71
	word64 rdi_72
	byte SCZO_73
	byte Z_75
	word32 edx_76
	word64 rsi_77
	word32 edi_78
	word32 eax_79
	byte SZO_80
	byte C_81
	word64 rax_74
	call lseek (retsize: 8; depth: 28)
		uses: C,dwLoc04_4,dwLoc08_63,eax_66,edi_69,edx_67,qwLoc04,qwLoc14_64,rax_65,rbx_6,rdi,rsi_68,rsp_7,SCZO_61,SZO,Z_62
		defs: C_81,eax_79,edi_78,edx_76,rax_74,rbx_71,rdi_72,rsi_77,rsp_70,SCZO_73,SZO_80,Z_75
	branch rax_74 == 0xFFFFFFFFFFFFFFFF l0000000000411E4F
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E43:
	Mem93[rbx_71:word32] = Mem0[rbx_71:word32] & 0xFFFFFFEF
	Mem95[rbx_71 + 0x0000000000000090:word64] = rax_74
	rax_74 = DPB(rax_74, 0x00000000, 0) (alias)
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> -20(fp):rsi -8(fp):edx -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E4F:
	word64 rsp_91
	*rspOut = fp + 0x0000000000000004
	return rax_74
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> eax:0x00000000 -20(fp):rsi -8(fp):edx -4(fp):rbx

l0000000000411E02:
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx

l0000000000402790:
	word64 rsp_45
	word64 rbx_46
	word64 rdi_47
	byte SCZO_48
	word64 rax_49
	byte Z_50
	word32 edx_51
	word64 rsi_52
	word32 edi_53
	word32 eax_54
	byte SZO_55
	byte C_56
	call Mem0[0x000000000061A310:word32] (retsize: 4;)
		uses: C,dwLoc04_4,dwLoc08,eax_29,edi,edx,qwLoc04,qwLoc14,rax_31,rbx_36,rdi_34,rsi,rsp_37,SCZO_33,SZO,Z_30
		defs: C_56,eax_54,edi_53,edx_51,rax_49,rbx_46,rdi_47,rsi_52,rsp_45,SCZO_48,SZO_55,Z_50
	return rax_49
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdi:rdi -4(fp):rbx

fn0000000000411DF0_exit:
// DataOut: eax rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdi:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> eax:0x00000000 -20(fp):rsi -8(fp):edx -4(fp):rbx



void fn0000000000411EE0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: rsp
fn0000000000411EE0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EE0:
	branch 0x000000000061A3A8 == 0x0000000000000000 l0000000000411EF6
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EF6:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEC:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEF:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8 rdx:<invalid> edx:0x00000000

l00000000004027B0:
	word64 rsp_12
	word64 rax_13
	byte SZO_14
	byte C_15
	byte Z_16
	word64 rdx_17
	word32 esi_18
	word32 edx_19
	call Mem0[0x000000000061A320:word32] (retsize: 4; depth: 4)
		uses: C_10,edx_6,esi_8,rax_2,rdx_7,rsp_1,SZO_9,Z_4
		defs: C_15,edx_19,esi_18,rax_13,rdx_17,rsp_12,SZO_14,Z_16
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8 rdx:<invalid> edx:0x00000000 esi:0x00000000

fn0000000000411EE0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:<invalid> edx:<invalid> esi:<invalid>



void _fini()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO
// Preserved: rsp
_fini_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411EFC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

_fini_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



