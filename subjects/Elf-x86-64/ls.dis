void _init()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn0000000000402168_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402168:
	word64 rax_4 = Mem0[0x0000000000619FF8:word64]
	branch rax_4 == 0x0000000000000000 l000000000040217D
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000402178:
	word64 rsp_15
	byte SCZO_16
	word64 rax_17
	byte SZO_18
	byte C_19
	byte Z_20
	call __gmon_start__ (retsize: 8; depth: 16)
		uses: C_7,rax_4,rsp_2,SCZO,SZO_5,Z_6
		defs: C_19,rax_17,rsp_15,SCZO_16,SZO_18,Z_20
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>
// LocalsOut: fp(64)

l000000000040217D:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 rax:<invalid>

fn0000000000402168_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn00000000004021A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004021A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004021A0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004021B0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004021B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004021B0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004021C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004021C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004021C0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004021D0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004021D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004021D0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004021E0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004021E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004021E0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void free()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004021F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004021F0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402200()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402200_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402200_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402210()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402210_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402210_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402220()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402220_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402220_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402230()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402230_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402230_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402240()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402240_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402240_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402250()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402250_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402250_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402260()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402260_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402260_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402270()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402270_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402270_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402280()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402280_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402280_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402290()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402290_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402290_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004022A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004022A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004022A0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004022B0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004022B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004022B0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004022C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004022C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004022C0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004022D0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004022D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004022D0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004022E0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004022E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004022E0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004022F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004022F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004022F0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402300()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402300_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402300_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402310()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402310_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402310_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402320()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402320_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402320_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402330()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402330_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402330_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402340()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402340_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402340_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402350()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402350_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402350_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402360()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402360_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402360_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402370()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402370_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402370_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402380()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402380_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402380_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402390()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402390_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402390_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004023A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004023A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004023A0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004023B0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004023B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004023B0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004023C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004023C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004023C0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004023D0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004023D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004023D0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004023E0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004023E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004023E0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004023F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004023F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004023F0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402400()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402400_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402400_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402410()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402410_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402410_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402420()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402420_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402420_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402430()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402430_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402430_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402440()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402440_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402440_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402450()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402450_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402450_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402460()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402460_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402460_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402470()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402470_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402470_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402480()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402480_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402480_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402490()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402490_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402490_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004024A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004024A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004024A0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004024B0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004024B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004024B0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004024C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004024C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004024C0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004024D0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004024D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004024D0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004024E0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004024E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004024E0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004024F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004024F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004024F0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402500()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402500_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402500_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402510()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402510_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402510_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402520()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402520_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402520_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402530()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402530_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402530_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402540()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402540_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402540_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402550()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402550_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402550_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402560()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402560_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402560_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402570()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402570_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402570_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402580()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402580_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402580_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402590()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402590_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402590_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004025A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004025A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004025A0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004025B0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004025B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004025B0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004025C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004025C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004025C0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004025D0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004025D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004025D0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004025E0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004025E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004025E0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004025F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004025F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004025F0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402600()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402600_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402600_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402610()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402610_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402610_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402620()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402620_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402620_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402630()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402630_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402630_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void malloc()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402640_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402660()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402660_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402660_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402670()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402670_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402670_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402680()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402680_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402680_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004026A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004026A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004026A0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004026B0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004026B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004026B0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004026C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004026C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004026C0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004026D0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004026D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004026D0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004026E0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004026E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004026E0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004026F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004026F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004026F0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402700()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402700_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402700_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402710()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402710_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402710_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402720()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402720_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402720_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402730()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402730_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402730_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402740()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402740_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402740_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402750()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402750_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402750_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402760()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402760_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402760_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402770()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402770_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402770_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402780()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402780_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402780_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004027A0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004027A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004027A0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004027C0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004027C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004027C0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004027D0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004027D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004027D0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004027E0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004027E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004027E0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004027F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004027F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004027F0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402800()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402800_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402800_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402810()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402810_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402810_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402820()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402820_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402820_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402830()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402830_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402830_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402840()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402840_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402840_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402850()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402850_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402850_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402860()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402860_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402860_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402870()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402870_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402870_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402880()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402880_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402880_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000402890()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000402890_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000402890_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000404890(word64 rax, word64 rdx, word64 qwArg00, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdx
// LiveOut:
// Trashed:
// Preserved:
// Stack args: Stack +0000(64)
// Terminates process
fn0000000000404890_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000404890_entry:
// DataOut: rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404890:
	__align(fp + 0x0000000000000008)
	word64 rax_21 = DPB(rax, __libc_start_main(0x00000000004028C0, qwArg00, fp + 0x0000000000000008, 0x0000000000411E60, 0x0000000000411ED0, rdx, DPB(qwArg00, fp + 0x0000000000000004, 0)), 0)
	__hlt()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn00000000004048C0(word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi esp r8 r8b r8d r8w rax rdi rsp sp spl
// Preserved: rbp
fn00000000004048C0_entry:
// DataOut: r8
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048C0:
	branch DPB(rax, 0x0061A5FF, 0) >u 0x000000000000000E l00000000004048D7
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004048D7:
	word64 rax_37 = DPB(rax, 0x00000000, 0)
	branch rax_37 == 0x0000000000000000 l00000000004048D5
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 eax:0x0061A5FF r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l00000000004048E1:
	word64 rsp_44
	word32 eax_45
	word64 rbp_46
	word64 r8_47
	byte SCZO_48
	word64 rax_49
	byte CZ_50
	byte SZO_51
	byte C_52
	byte Z_53
	word32 edi_54
	call 0x00000000 (retsize: 4;)
		uses: C_40,CZ_11,dwLoc04_7,eax_36,edi_43,qwLoc04,r8_9,rax_37,rbp_41,rsp_42,SCZO_10,SZO_38,Z_39
		defs: C_52,CZ_50,eax_45,edi_54,r8_47,rax_49,rbp_46,rsp_44,SCZO_48,SZO_51,Z_53
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 eax:0x00000000 r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp

l00000000004048D5:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 eax:<invalid> r8:r8 - 6399480 rbp:fp - 0x0000000000000004 -4(fp):rbp

fn00000000004048C0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 eax:<invalid> r8:<invalid> rbp:rbp edi:<invalid> -4(fp):rbp



void fn00000000004049E0(word64 rcx, byte dl, word64 r13, word64 r14, word64 r15, word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl r13 r14 r15 rcx
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx eax ebp ebx ecx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r14 r14b r14d r14w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0000(64)
fn00000000004049E0_entry:
// DataOut: dl r13 r14 r15 rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l00000000004049E0:
	word64 r8_107 = Mem0[r14:word64]
	word32 eax_227 = 0x00000000
	word64 rax_10 = DPB(rax, 0x00000000, 0)
	word64 r9_109 = Mem0[r15:word64]
	word64 r10_108 = DPB(r10, 0x00000000, 0)
	word32 r11d_121 = 0x00000000
	byte r11b_122 = 0x00
	word64 r11_123 = DPB(r11, 0x00000000, 0)
	word64 rbx_36 = DPB(rbx, 0x00000001, 0)
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A06:
	byte al_283
	byte SZO_167
	byte al_104
	word32 eax_153
	branch eax_227 == 0x00000002 l0000000000404A59
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A59:
	rax_10 = DPB(rax_10, (word32) Mem0[rax_10:byte], 0) (alias)
	rcx = DPB(rcx, rax_10 - 0x0000000000000030, 0) (alias)
	branch (byte) (rax_10 - 0x0000000000000030) <=u 0x07 l0000000000404A50
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A50:
	r11d_121 = rax_10 - 0x0000000000000030 + r11_123 * 0x00000008
	r11b_122 = (byte) r11d_121 (alias)
	r11_123 = DPB(r11_123, r11d_121, 0) (alias)
	r8_107 = r8_107 + 0x0000000000000001
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A0B:
	branch eax_227 <=u 0x00000002 l0000000000404B20
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B20:
	branch eax_227 != 0x00000001 l0000000000404A70
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A11:
	branch eax_227 == 0x00000003 l0000000000404AE0
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AE0:
	rax_10 = DPB(rax_10, (word32) Mem0[rax_10:byte], 0) (alias)
	rcx = DPB(rcx, rax_10 - 0x0000000000000030, 0) (alias)
	byte cl_399 = (byte) (rax_10 - 0x0000000000000030)
	branch cl_399 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AF0:
	r14 = rbx_36 << cl_399
	word32 r14d_416 = (word32) r14
	branch (r14d_416 & 0x007E0000) != 0x00000000 l0000000000404B78
// DataOut: al dl eax ebx r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B78:
	r11d_121 = rax_10 - 0x0000000000000037 + DPB(r11_123, r11d_121 << 0x00000004, 0)
	rax_10 = DPB(rax_10, (word32) Mem0[rax_10:byte], 0) (alias)
	r8_107 = r8_107 + 0x0000000000000001
	r11b_122 = (byte) r11d_121 (alias)
	r11_123 = DPB(r11_123, r11d_121, 0) (alias)
	rcx = DPB(rcx, rax_10 - 0x0000000000000030, 0) (alias)
	cl_399 = (byte) (rax_10 - 0x0000000000000030) (alias)
	branch cl_399 >u 0x36 l0000000000404A65
// DataOut: al cl dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B95:
// DataOut: al cl dl eax ebx r10 r11 r11b r11d r13 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:rax - 0x0000000000000037 + r11 r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AFF:
	branch (r14 & 0x0000000000000000) != 0x0000000000000000 l0000000000404AD0
// DataOut: al dl eax ebx r10 r11 r11b r11d r13 r14 r14d r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AD0:
	r11d_121 = rax_10 - 0x0000000000000057 + DPB(r11_123, r11d_121 << 0x00000004, 0)
	r8_107 = r8_107 + 0x0000000000000001
	r11b_122 = (byte) r11d_121 (alias)
	r11_123 = DPB(r11_123, r11d_121, 0) (alias)
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B04:
	branch (r14d_416 & 0x000003FF) == 0x00000000 l0000000000404A65
// DataOut: al dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A65:
	Mem366[r9_109:byte] = r11b_122
	r10_108 = r10_108 + 0x0000000000000001
	r9_109 = r9_109 + 0x0000000000000001
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B11:
	r11d_121 = rax_10 - 0x0000000000000030 + DPB(r11_123, r11d_121 << 0x00000004, 0)
	r8_107 = r8_107 + 0x0000000000000001
	r11b_122 = (byte) r11d_121 (alias)
	r11_123 = DPB(r11_123, r11d_121, 0) (alias)
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000030 r14:rbx << cl r10:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A1A:
	branch eax_227 != 0x00000004 l0000000000404A70
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A22:
	eax_153 = (word32) Mem0[rax_10:byte]
	rax_10 = DPB(rax_10, eax_153, 0) (alias)
	al_283 = (byte) eax_153 (alias)
	rcx = DPB(rcx, rax_10 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_10 - 0x0000000000000040) <=u 0x3E l0000000000404AA0
// DataOut: al dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A2E:
	branch al_283 == 0x3F l0000000000404CB0
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000040 r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404CB0:
	Mem345[rcx:byte] = 0x7F
	r10_108 = r10_108 + 0x0000000000000001
	r9_109 = r9_109 + 0x0000000000000001
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000040 r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A70:
	word32 eax_314 = (word32) Mem0[rax_10:byte]
	al_104 = (byte) eax_314 (alias)
	rax_10 = DPB(rax_10, eax_314, 0) (alias)
	SZO_167 = cond(al_104 - 0x3D) (alias)
	branch al_104 == 0x3D l0000000000404ABA
// DataOut: al dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A78:
	branch SZO_167 l0000000000404B40
// DataOut: al dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B40:
	branch al_104 == 0x00 l0000000000404B48
// DataOut: al dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B44:
	branch al_104 != 0x3A l0000000000404B60
// DataOut: al dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B48:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A7E:
	branch al_104 == 0x5C l0000000000404CA0
// DataOut: al dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404CA0:
	r8_107 = r8_107 + 0x0000000000000001
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B29:
	word32 eax_206 = (word32) Mem0[rax_10:byte]
	word64 rax_207 = DPB(rax_10, eax_206, 0)
	branch (byte) eax_206 >u 0x78 l0000000000404C90
	word32 eax_211 = (word32) Mem0[rax_207:byte]
	byte al_213 = (byte) eax_211
	branch al_213 >u 0x78 l0000000000404C90
// DataOut: al dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B35:
	switch (DPB(rcx, (word32) al_213, 0)) { l0000000000404BF0 }
	rcx = DPB(rcx, (word32) al_213, 0) (alias)
	switch (rcx) { l0000000000404BF0 l0000000000404BF0 l0000000000404C90 }
// DataOut: al dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404C90:
	r11d_121 = eax_211
	r11b_122 = (byte) eax_211 (alias)
	r11_123 = DPB(r11_123, eax_211, 0) (alias)
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BD0:
	Mem239[r9_109:byte] = r11b_122
	r10_108 = r10_108 + 0x0000000000000001
	r9_109 = r9_109 + 0x0000000000000001
	eax_227 = 0x00000000
	rax_10 = DPB(rax_10, 0x00000000, 0) (alias)
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:(word32) Mem0[rax:byte] r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BF0:
	eax_227 = 0x00000006
	rax_10 = DPB(rax_10, 0x00000006, 0) (alias)
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:(word32) al r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BB0:
	r8_107 = r8_107 + 0x0000000000000001
	branch eax_227 <=u 0x00000004 l0000000000404A06
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404BBD:
// DataOut: eax r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B4D:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A86:
	branch al_104 != 0x5E l0000000000404B60
// DataOut: al dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A8E:
	eax_153 = (word32) Mem0[rax_10:byte]
	rax_10 = DPB(rax_10, eax_153, 0) (alias)
	r8_107 = r8_107 + 0x0000000000000001
	al_283 = (byte) eax_153 (alias)
	rcx = DPB(rcx, rax_10 - 0x0000000000000040, 0) (alias)
	branch (byte) (rax_10 - 0x0000000000000040) >u 0x3E l0000000000404A2E
// DataOut: al dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A9E:
// DataOut: dl eax ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000040 r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AA0:
	word32 eax_154 = eax_153 & 0x0000001F
	Mem160[rcx:byte] = (byte) eax_154
	word32 eax_161 = (word32) Mem160[DPB(rax_10, eax_154, 0):byte]
	al_104 = (byte) eax_161 (alias)
	r8_107 = r8_107 + 0x0000000000000001
	r10_108 = r10_108 + 0x0000000000000001
	rax_10 = DPB(rax_10, eax_161, 0) (alias)
	r9_109 = r9_109 + 0x0000000000000001
	SZO_167 = cond(al_104 - 0x3D) (alias)
	branch al_104 != 0x3D l0000000000404A78
// DataOut: al dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): SZO
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000040 r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404ABA:
	branch dl == 0x00 l0000000000404B60
// DataOut: al dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404B60:
	Mem113[rcx:byte] = al_104
	r8_107 = r8_107 + 0x0000000000000001
	r10_108 = r10_108 + 0x0000000000000001
	r9_109 = r9_109 + 0x0000000000000001
// DataOut: dl ebx r10 r11 r11b r11d r13 r14 r15 r8 r9 rax rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404AC2:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A36:
// DataOut: r10 r13 r14 r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:(word32) Mem0[rax:byte] r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:rax - 0x0000000000000040 r10:<invalid> r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi
// LocalsOut: fp(64) Stack +0000(64)

l0000000000404A38:
	Mem80[r15:word64] = r9_109
	Mem81[r14:word64] = r8_107
	Mem82[r13:word64] = r10_108
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:rcx ebx:0x00000001 ecx:<invalid> r10:<invalid> al:Test(NE,Z) r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi

fn00000000004049E0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:SLICE(rsi, word64, 32) + 0x0000000000000010 r8:<invalid> eax:<invalid> r9:<invalid> r10d:<invalid> r11d:<invalid> r12:0x0000000000000000 rbp:fp - 0x0000000000000004 ebx:<invalid> ecx:<invalid> r10:<invalid> rbx:rbx rsi:<invalid> al:Test(NE,Z) r14:rbx << cl -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rsi



word64 fn0000000000404CD0(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut: al eax rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000404CD0_entry:
// DataOut: ebx edi fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CD0:
	word64 rdi_5 = DPB(rdi, edi, 0)
	word64 rax_36 = DPB(rax, 0x00000000, 0)
	word64 rdx_12 = Mem0[(rdi_5 << 0x0000000000000004) + 0x000000000061A3E0:word64]
	word64 rsi_13 = Mem0[(rdi_5 << 0x0000000000000004) + 0x000000000061A3E8:word64]
	branch rdx_12 == 0x0000000000000000 l0000000000404CFC
// DataOut: al eax ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404CEB:
	branch rdx_12 == 0x0000000000000001 l0000000000404D10
// DataOut: ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:0x00000000 rdi:rdi << 0x0000000000000004 rdx:<invalid> rsi:<invalid>

l0000000000404D10:
	return DPB(rax, Mem0[rsi_13:byte] != 0x30, 0)
// DataOut: al eax ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:0x00000000 rdi:rdi << 0x0000000000000004 rdx:<invalid> rsi:<invalid>

l0000000000404CF1:
	byte Z_44 = cond(rdx_12 - 0x0000000000000002)
	rax_36 = DPB(rax, 0x00000001, 0) (alias)
	branch rdx_12 == 0x0000000000000002 l0000000000404D00
// DataOut: al eax ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rax rbp rbx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp edi:<invalid> eax:0x00000000 rdi:rdi << 0x0000000000000004 rdx:<invalid> rsi:<invalid>

l0000000000404D00:
	word64 rdi_49 = DPB(rdi_5 << 0x0000000000000004, 0x00413733, 0)
	word64 rcx_51 = DPB(rcx, 0x00000002, 0)
// DataOut: ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp edi:<invalid> eax:0x00000001 rdi:rdi << 0x0000000000000004 rdx:<invalid> rsi:<invalid>

l0000000000404D0A:
	branch rcx_51 == 0x0000000000000000 l0000000000404D0C
// DataOut: ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp edi:<invalid> eax:0x00000001 rdi:<invalid> rdx:<invalid> rsi:<invalid> ecx:<invalid> rcx:<invalid>

l0000000000404D0A_1:
	Z_44 = cond(Mem0[rsi_87:byte] - Mem0[rdi_88:byte]) (alias)
	rsi_13 = rsi_87 + 0x0000000000000001
	rdi_49 = rdi_88 + 0x0000000000000001
	rcx_51 = rcx_51 - 0x0000000000000001
	word64 rsi_87 = rsi_13
	word64 rdi_88 = rdi_49
	branch Mem0[rsi_87:byte] != Mem0[rdi_88:byte] l0000000000404D0A
// DataOut: ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp edi:<invalid> eax:0x00000001 rdi:<invalid> rdx:<invalid> rsi:<invalid> ecx:<invalid> rcx:<invalid>

l0000000000404D0C:
	return DPB(rax, Z_44, 0)
// DataOut: al eax ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:0x00000001 rdi:<invalid> rdx:<invalid> rsi:<invalid> ecx:<invalid> rcx:<invalid>

l0000000000404CFC:
	return rax_36
// DataOut: al eax ebx fs r11 r12 r13 r13d r14 r14b r14d r15 r15b r15d r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> rdi:rdi << 0x0000000000000004 rdx:<invalid> rsi:<invalid>

fn0000000000404CD0_exit:
// DataOut: al eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> al:Test(NE,Z) ecx:<invalid> rcx:<invalid>



word64 fn0000000000404D20(byte dl, word64 rsi, word64 rdi, word64 r11, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl r11 rdi rsi
// LiveOut: r12 r13 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000404D20_entry:
// DataOut: dl edx r11 r14b r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D20:
	word64 rsp_26
	word64 rax_27 = fn0000000000410C40(rsi, DPB(rdi, 0x00000020, 0), out rsp_26)
	byte r13b_7 = (byte) edx
	word64 r13_9
	*r13Out = DPB(r13, edx, 0)
	word64 r12_14
	*r12Out = rsi
	word64 rbp_18 = rdi
	word64 rax_30 = DPB(rax_27, 0x00000000, 0)
	branch rsi == 0x0000000000000000 l0000000000404D4F
// DataOut: r11 r12 r13 r13b r14b r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404D47:
	word64 rsi_78
	rax_30 = fn0000000000410E30(rax_30, rsi, out rsp_26, out rbp_18, out rsi_78)
// DataOut: r11 r12 r13 r13b r14b r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:edx r12:rsi rbp:rdi edi:0x00000020 rbx:<invalid> eax:0x00000000 rax:<invalid> edx:<invalid> rdx:<invalid> rdi:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D4F:
	Mem39[rax_27 + 0x0000000000000008:word64] = rax_30
	word64 rax_41 = DPB(rax_30, 0x00000000, 0)
	branch rbp_18 == 0x0000000000000000 l0000000000404D62
// DataOut: r11 r12 r13 r13b r14b r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:edx r12:rsi rbp:<invalid> edi:<invalid> rbx:<invalid> eax:0x00000000 rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D5A:
	word64 rbp_71
	word64 rsi_72
	rax_41 = fn0000000000410E30(rax_41, rbp_18, out rsp_26, out rbp_71, out rsi_72)
// DataOut: r11 r12 r13 r13b r14b r15 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:edx r12:rsi rbp:<invalid> edi:<invalid> rbx:<invalid> eax:0x00000000 rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l0000000000404D62:
	Mem50[rax_27:word64] = rax_41
	word64 rax_51 = Mem50[0x000000000061B190:word64]
	Mem52[r11 + 0x0000000000000010:byte] = r13b_7
	Mem54[0x000000000061B190:word64] = rax_27
	Mem55[rax_27 + 0x0000000000000018:word64] = rax_51
	word64 rsp_62 = Mem55[rsp_26 + 0x0000000000000018:word64]
	word64 rbp_64
	*rbpOut = Mem55[rsp_62 + 0x0000000000000008:word64]
	return rsp_62 + 0x0000000000000010
// DataOut: r11 r12 r13 r14b r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:edx r12:rsi rbp:<invalid> edi:<invalid> rbx:<invalid> eax:0x00000000 rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn0000000000404D20_exit:
// DataOut: r12 r13 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:edx r12:rsi rbp:<invalid> edi:<invalid> rbx:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> edx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn0000000000404D90(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rsp
// Trashed: SCZO di dil edi esp rdi rsp sp spl
// Preserved: rbx
fn0000000000404D90_entry:
// DataOut: r11 r12 r13 r14b rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404D90:
	free(Mem0[rdi:word64])
	free(Mem0[rdi + 0x0000000000000008:word64])
	word64 rdi_10 = Mem0[rdi + 0x00000000000000A8:word64]
	branch rdi_10 == 0x000000000061A56A l0000000000404DC0
// DataOut: r11 r12 r13 r14b rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DC0:
	return fp + 0x0000000000000004
// DataOut: r11 r12 r13 r14b rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> -4(fp):rbx

l0000000000404DB5:
// DataOut: r11 r12 r13 r14b rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> -4(fp):rbx

l00000000004027D0:
	word64 rsp_21
	word64 rbx_22
	word64 rdi_23
	byte SCZO_24
	byte Z_25
	call Mem0[0x000000000061A330:word32] (retsize: 4;)
		uses: dwLoc04_4,qwLoc04,rbx_19,rdi_10,rsp_20,SCZO_11,Z_12
		defs: rbx_22,rdi_23,rsp_21,SCZO_24,Z_25
	return rsp_21
// DataOut: r11 r12 r13 r14b rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rdi:<invalid> -4(fp):rbx

fn0000000000404D90_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rdi:<invalid> -4(fp):rbx



void fn0000000000404DD0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax bh bl bx di dil eax ebx edi esp rax rbx rdi rsp sp spl
// Preserved: rbx
fn0000000000404DD0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404DD0:
	word64 rbx_33 = DPB(rbx, 0x00000000, 0)
	branch Mem0[0x000000000061B1B0:word64] == 0x0000000000000000 l0000000000404DFD
// DataOut: rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404DDD:
// DataOut: rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 ebx:0x00000000 -4(fp):rbx

l0000000000404DE0:
	fn0000000000404D90(Mem0[Mem0[0x000000000061B1A8:word64] + rbx_33 * 0x0000000000000008:word64])
	rbx_33 = rbx_33 + 0x0000000000000001
	branch Mem0[0x000000000061B1B0:word64] >u rbx_33 l0000000000404DE0
// DataOut: rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebx:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -4(fp):rbx

l0000000000404DFD:
	Mem19[0x000000000061B1B0:word64] = 0x0000000000000000
	Mem20[0x000000000061B17C:byte] = 0x00
	Mem21[0x000000000061B178:word32] = 0x00000000
	Mem22[0x000000000061B174:word32] = 0x00000000
	Mem23[0x000000000061B170:word32] = 0x00000000
	Mem24[0x000000000061B168:word32] = 0x00000000
	Mem25[0x000000000061B164:word32] = 0x00000000
	Mem26[0x000000000061B160:word32] = 0x00000000
	Mem27[0x000000000061B16C:word32] = 0x00000000
	Mem28[0x000000000061B15C:word32] = 0x00000000
	Mem29[0x000000000061B158:word32] = 0x00000000
	Mem30[0x000000000061B154:word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebx:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -4(fp):rbx

fn0000000000404DD0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebx:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -4(fp):rbx



void fn0000000000404E80(word64 rsi, word64 r11, word64 r15)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r15 rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000404E80_entry:
// DataOut: r11 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000404E80:
	word64 rbx_10 = Mem0[0x000000000061B1B0:word64]
	word64 rbp_12 = rbx_10
	word64 rax_14 = (rbx_10 >>u 0x0000000000000001) + rbx_10
	branch rax_14 >u Mem0[0x000000000061B1A0:word64] l0000000000404F98
// DataOut: al eax r11 r15 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000404F98:
	free(Mem0[0x000000000061B1A8:word64])
	branch rbx_10 >u rax_14 l0000000000404FF8
// DataOut: r11 r15 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404FF8:
	fn0000000000410E50()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000405006_thunk_fn0000000000402550:
	fn0000000000402550()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsi:<invalid> rdi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404FB3:
	word64 rsp_254
	word64 rax_255 = fn0000000000410C40(rsi, rbx_10 * 0x0000000000000018, out rsp_254)
	rbp_12 = Mem0[0x000000000061B1B0:word64]
	Mem257[0x000000000061B1A8:word64] = rax_255
	Mem262[0x000000000061B1A0:word64] = rbp_12 * 0x0000000000000003
// DataOut: al eax r11 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA -8(fp):rbx -4(fp):rbp

l0000000000404EA6:
	branch rbp_12 == 0x0000000000000000 l0000000000404ED3
// DataOut: al eax r11 r15 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA edx:<invalid> rdx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EAB:
	word64 rax_227 = Mem0[0x000000000061B1A8:word64]
	word64 rdx_231 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_233 = rax_227 + rbp_12 * 0x0000000000000008
// DataOut: r11 r15 rax rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA edx:<invalid> rdx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EC0:
	Mem237[rax_227:word64] = rdx_231
	rax_227 = rax_227 + 0x0000000000000008
	rdx_231 = rdx_231 + 192
	branch rax_227 != rcx_233 l0000000000404EC0
// DataOut: al eax r11 r15 rax rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404ED3:
	branch Mem0[0x000000000061B148:word32] == 0xFFFFFFFF l0000000000404F8C
// DataOut: al eax r11 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EE0:
	word32 ecx_141
	word64 rdi_137
	word64 rsi_135
	word64 rsp_108
	word64 rbp_109
	word64 rbx_110
	byte SCZO_111
	word64 rax_112
	byte CZ_113
	byte SZO_114
	byte C_115
	byte Z_116
	word64 rdx_117
	word64 rcx_118
	word32 edi_119
	word32 eax_120
	word32 r8d_121
	word64 rsi_122
	word64 rdi_123
	word32 ecx_124
	word32 edx_126
	word16 ax_127
	byte al_128
	word32 esi_129
	word64 r11_130
	word64 r15_131
	word64 r8_125
	call _setjmp (retsize: 8; depth: 8)
		uses: al_67,ax_68,C_60,CZ_47,dwLoc04_4,dwLoc08_7,eax_70,ecx_65,edi_107,edx_69,esi,r11,r15,r8_52,r8d,rax_71,rbp_56,rbx_10,rcx_66,rdi_48,rdx_72,rsi,rsp_57,SCZO_73,SZO_58,Z_74
		defs: al_128,ax_127,C_115,CZ_113,eax_120,ecx_124,edi_119,edx_126,esi_129,r11_130,r15_131,r8_125,r8d_121,rax_112,rbp_109,rbx_110,rcx_118,rdi_123,rdx_117,rsi_122,rsp_108,SCZO_111,SZO_114,Z_116
	branch eax_120 == 0x00000000 l0000000000404F40
// DataOut: al r11 r15
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:0x00000000AAAAAAAA edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F40:
	ecx_141 = Mem0[0x000000000061B148:word32]
	rsi_135 = Mem0[0x000000000061B1B0:word64]
	rdi_137 = Mem0[0x000000000061B1A8:word64]
// DataOut: al ecx edi r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EEE:
	word32 r8d_171 = Mem0[0x000000000061B148:word32]
	r8_125 = DPB(r8_125, r8d_171, 0) (alias)
	branch r8d_171 == 0x00000003 l0000000000404FDF
// DataOut: r11 r15 r8d
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404FDF:
	__assert_fail(DPB(rdi_123, 0x0041373F, 0), DPB(rsi_122, 0x00413736, 0), DPB(rdx_117, 0x00000DDB, 0), DPB(rcx_118, 0x00412C95, 0))
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> r8d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404EFF:
	rsi_135 = Mem0[0x000000000061B1B0:word64]
	rdi_137 = Mem0[0x000000000061B1A8:word64]
	branch rsi_135 == 0x0000000000000000 l0000000000404F33
// DataOut: edi r11 r15 r8d rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> r8d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F12:
	word64 rdx_194 = Mem0[0x000000000061B1C0:word64]
	word64 rcx_196 = rdi_137 + rsi_135 * 0x0000000000000008
	word64 rax_198 = rdi_137
// DataOut: edi r11 r15 r8d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> r8d:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F20:
	Mem204[rax_198:word64] = rdx_194
	rax_198 = rax_198 + 0x0000000000000008
	rdx_194 = rdx_194 + 192
	branch rax_198 != rcx_196 l0000000000404F20
// DataOut: edi r11 r15 r8d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> r8d:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F33:
	ecx_141 = r8d_171
// DataOut: al ecx edi r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> r8d:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F54:
	branch ecx_141 != 0x00000004 l0000000000404F60
// DataOut: al ecx edi edx r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> r8d:<invalid> eax:0x00000001 edx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000404F59_1:
// DataOut: al ecx edi edx r11 r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> edx:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> r8d:<invalid> eax:0x00000001 -8(fp):rbx -4(fp):rbp

l0000000000404F60:
	fn000000000040D690(rsi_135, rdi_137, DPB(r8_125, (word32) Mem0[0x000000000061B10C:byte], 0), r11_130, r15_131)
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> edx:<invalid> rdx:<invalid> rcx:<invalid> r8:<invalid> r8d:<invalid> eax:0x00000001 -8(fp):rbx -4(fp):rbp

l0000000000404F8C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> edx:<invalid> ax:<invalid> r8d:(word32) Mem0[0x000000000061B10C:byte] eax:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000404E80_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rbp:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> r8:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> edx:<invalid> ax:<invalid> r8d:(word32) Mem0[0x000000000061B10C:byte] eax:<invalid> r13:<invalid> r12:<invalid> r15:<invalid> r14:<invalid> -8(fp):rbx -4(fp):rbp



void fn0000000000405020(word64 qwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax bp bpl di dil eax ebp edi esi esp rax rbp rdi rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405020_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405020:
	word64 rax_15 = __errno_location()
	Mem16[rax_15:word32] = 0x00000000
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000402690:
	word64 rsp_26
	word64 rbp_27
	word64 rsi_28
	word64 rbx_29
	word64 rdi_30
	byte SCZO_31
	word64 rax_32
	call Mem16[0x000000000061A290:word32] (retsize: 4;)
		uses: dwLoc04_4,dwLoc08_9,qwLoc08_11,rax_15,rbp_24,rbx_20,rdi_19,rsi_22,rsp_25,SCZO_18
		defs: rax_32,rbp_27,rbx_29,rdi_30,rsi_28,rsp_26,SCZO_31
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx rax:<invalid> rdi:rdi rsi:rsi -8(fp):rbx -4(fp):rbp

fn0000000000405020_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 rbp:SLICE(rbp, word64, 32) rbx:rbx rax:<invalid> rdi:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp



void fn0000000000405090(byte sil, word64 rdi, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 rdi sil
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405090_entry:
// DataOut: r11 rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405090:
	word32 r14d_9 = (word32) sil
	word64 r13_117 = rdi
	branch rdi == 0x0000000000000000 l00000000004050C0
// DataOut: r11 r13 r14b rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004050AA:
	branch Mem0[0x000000000061B1C8:word64] == 0x0000000000000000 l00000000004050C0
// DataOut: r11 r13 r14b rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r14d:(word32) sil r13:rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050B4:
	word64 rbp_274
	word64 r12_275
	fn0000000000404D20(0x00, rdi, DPB(rdi, 0x00000000, 0), r11, out rbp_274, out r12_275, out r13_117)
// DataOut: r11 r13 r14b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r14d:(word32) sil r13:rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050C0:
	word64 rbx_44 = Mem0[0x000000000061B1B0:word64]
// DataOut: r11 r12 r13 r14b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:(word32) sil r13:rdi rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> r12:<invalid> rbp:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> rbx:<invalid> rdx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405108:
	branch rbx_44 == 0x0000000000000000 l00000000004051A8
// DataOut: r11 r12 r13 r14b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> rbp:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051A8:
	word64 rdx_208
	word64 rdi_197 = Mem0[0x000000000061B1B0:word64]
	branch rdi_197 == 0x0000000000000000 l00000000004051F7
// DataOut: rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> rbp:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051F7:
	rdx_208 = DPB(rdx, 0x00000000, 0) (alias)
// DataOut: rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> rbp:<invalid> eax:<invalid> rax:<invalid> r15:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051B4:
	word64 rsi_230 = Mem0[0x000000000061B1A8:word64]
	rdx_208 = DPB(rdx, 0x00000000, 0) (alias)
	word64 rax_236 = DPB(rax, 0x00000000, 0)
// DataOut: rax rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> rbp:<invalid> eax:<invalid> rax:<invalid> r15:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051C0:
	word64 rcx_242 = Mem0[rsi_230 + rax_236 * 0x0000000000000008:word64]
	Mem245[rsi_230 + rdx_208 * 0x0000000000000008:word64] = rcx_242
	rax_236 = rax_236 + 0x0000000000000001
	rdx_208 = rdx_208 + DPB(rcx_242, (word32) (Mem0[rcx_242 + 0x00000000000000A0:word32] != 0x00000009), 0)
	branch rax_236 != rdi_197 l00000000004051C0
// DataOut: rax rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> eax:<invalid> rcx:<invalid> cl:<invalid> rax:<invalid> ecx:<invalid> rdx:<invalid> edi:<invalid> r13d:<invalid> rbp:<invalid> r15:<invalid> esi:<invalid> dl:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004051E1:
	Mem215[0x000000000061B1B0:word64] = rdx_208
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> edx:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> cl:<invalid> rax:<invalid> ecx:<invalid> rdx:<invalid> edi:<invalid> r13d:<invalid> rbp:<invalid> r15:<invalid> esi:<invalid> dl:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000405090_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rdi:<invalid> edx:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> cl:<invalid> rax:<invalid> ecx:<invalid> rdx:<invalid> rbp:<invalid> edi:<invalid> r13d:<invalid> r15:<invalid> esi:<invalid> dl:<invalid> r14b:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405111:
	word64 rax_71 = Mem0[0x000000000061B1A8:word64]
	word64 rbp_72 = Mem0[rax_71:word64]
	word32 eax_73 = Mem0[rbp_72 + 0x00000000000000A0:word32]
	rax = DPB(rax_71, eax_73, 0) (alias)
	branch eax_73 == 0x00000009 l000000000040512C
// DataOut: eax r11 r12 r13 r14b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> rbp:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> r15:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405127:
	branch eax_73 != 0x00000003 l0000000000405100
// DataOut: r11 r12 r13 r14b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> rdi:<invalid> r15:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040512C:
	word64 rbp_116
	word64 r15_103 = Mem0[r13_117:word64]
	branch r13_117 == 0x0000000000000000 l00000000004050E2
// DataOut: r11 r12 r13 r14b r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> rdi:<invalid> r15:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405135:
	word64 rsi_145
	rax = fn000000000040A390(r15_103, out rsi_145)
	branch Mem0[rax:byte] != 0x2E l00000000004050D8
// DataOut: r11 r12 r13 r14b r15 rax rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r13d:<invalid> rdi:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405142:
	rdx = DPB(rdx, Mem0[rax + 0x0000000000000001:byte] == 0x2E, 0) (alias)
	word32 eax_187 = (word32) Mem0[rax + 0x0000000000000001 + rdx:byte]
	rax = DPB(rax, eax_187, 0) (alias)
	byte al_189 = (byte) eax_187
	branch al_189 == 0x2F l0000000000405100
// DataOut: al r11 r12 r13 r14b r15 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> r13d:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405154:
	branch al_189 == 0x00 l0000000000405100
// DataOut: r11 r12 r13 r14b r15 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:Test(EQ,Z) rsi:<invalid> edi:<invalid> r13d:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405158:
// DataOut: r11 r13 r14b r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:Test(EQ,Z) rsi:<invalid> edi:<invalid> r13d:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050D8:
	branch Mem0[r15_103:byte] != 0x2F l0000000000405160
// DataOut: r11 r13 r14b r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> dl:<invalid> r13d:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405160:
	rdx = DPB(rdx, 0x00000000, 0) (alias)
	word64 rbp_167
	byte r14b_168
	rax = fn000000000040A610(rdx, r15_103, r13_117, out rbp_167, out r14b_168)
	word64 r12_176
	fn0000000000404D20((byte) r14d_9, Mem0[rbp_167 + 0x0000000000000008:word64], rax, r11, out rbp_116, out r12_176, out r13_117)
	free(rax)
	branch Mem0[rbp_116 + 0x00000000000000A0:word32] != 0x00000009 l0000000000405100
// DataOut: r11 r12 r13 r14b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rdi:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> dl:<invalid> r13d:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050E2:
	word64 r12_138
	fn0000000000404D20((byte) r14d_9, Mem0[rbp_72 + 0x0000000000000008:word64], r15_103, r11, out rbp_116, out r12_138, out r13_117)
	branch Mem0[rbp_116 + 0x00000000000000A0:word32] == 0x00000009 l0000000000405194
// DataOut: r11 r12 r13 r14b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> r13d:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405194:
	fn0000000000404D90(rbp_116)
	fn0000000000404D90(rbp_116)
// DataOut: r11 r12 r13 r14b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> r13d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004050FE:
// DataOut: r11 r12 r13 r14b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> r15:<invalid> rsi:<invalid> edx:<invalid> rdi:<invalid> r13d:<invalid> edi:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000405100:
	rbx_44 = rbx_44 - 0x0000000000000001
// DataOut: r11 r12 r13 r14b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14d:<invalid> r13:<invalid> rbx:<invalid> r12:<invalid> rax:<invalid> rbp:<invalid> eax:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> dl:<invalid> r13d:<invalid> r14b:<invalid> rcx:<invalid> al:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000405200(word64 rsi, word64 rdi, word64 qwArg00, word64 qwArg10, word64 qwArg18)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000405200_entry:
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405200:
	word64 rbp_114 = rsi
	word64 rbx_11 = rdi
	branch rdi <u rsi l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040526B:
	branch Mem0[0x000000000061B0D8:word64] != 0x0000000000000000 l0000000000405220
	word64 rcx_156 = Mem0[0x000000000061B0D8:word64]
	branch rcx_156 != 0x0000000000000000 l0000000000405220
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405220:
	word128 rdx_rax_133 = SEQ(rdx, rbp_114)
	word64 rsi_134 = rbx_11 + 0x0000000000000001
	word128 rdx_rax_142 = SEQ((uint64) (rdx_rax_133 % rcx_156), rsi_134)
	word64 rdx_144 = (uint64) (rdx_rax_142 % rcx_156)
	branch (uint64) (rdx_rax_133 /u rcx_156) <=u (uint64) (rdx_rax_142 /u rcx_156) l00000000004052A8
// DataOut: rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052A8:
	rbx_11 = rsi_134
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040523C:
	word64 rdi_148 = Mem0[0x000000000061A610:word64]
	word64 rax_149 = Mem0[rdi_148 + 0x0000000000000028:word64]
	word128 rdx_rax_150 = SEQ(rdx_144, rax_149)
	branch rax_149 >=u Mem0[rdi_148 + 0x0000000000000030:word64] l00000000004052B9
// DataOut: rax rbp rbx rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052B9:
	word64 rsp_177
	word64 rsi_179
	word64 rdi_181
	byte SCZO_182
	byte C_183
	word64 rcx_184
	byte SZO_185
	byte Z_186
	word64 rdx_187
	word64 rax_188
	byte CZ_189
	word32 esi_190
	word32 edx_191
	call __overflow (retsize: 8; depth: 24)
		uses: C_152,CZ_147,dwLoc04_4,dwLoc08_9,edx_139,esi_176,qwLoc08,rax_149,rbp_61,rbx_60,rcx_67,rdi_148,rdx_144,rsi_134,rsp_62,SCZO_151,SZO_68,Z_69
		defs: C_183,CZ_189,edx_191,esi_190,rax_188,rbp_178,rbx_180,rcx_184,rdi_181,rdx_187,rsi_179,rsp_177,SCZO_182,SZO_185,Z_186
	rcx_156 = Mem0[0x000000000061B0D8:word64]
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040524D:
	Mem174[rdi_148 + 0x0000000000000028:word64] = rax_149 + 0x0000000000000001
	Mem175[rax_149:byte] = 0x09
// DataOut: rbp rbx rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405258:
	rdx = (uint64) (DPB(rdx_rax_150, 0x00000000, 64) % rcx_156)
	rbx_11 = rbx_11 + rcx_156 - rdx
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405277:
	rbx_11 = rbx_11 + 0x0000000000000002
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040527B:
	word64 rdi_92 = Mem0[0x000000000061A610:word64]
	branch Mem0[rdi_92 + 0x0000000000000028:word64] >=u Mem0[rdi_92 + 0x0000000000000030:word64] l00000000004052AD
	word64 rdi_96 = Mem0[0x000000000061A610:word64]
	rdx = Mem0[rdi_96 + 0x0000000000000028:word64]
	branch rdx >=u Mem0[rdi_96 + 0x0000000000000030:word64] l00000000004052AD
// DataOut: rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004052AD:
	word64 rsp_113
	word64 rsi_115
	word64 rdi_117
	byte SCZO_118
	byte C_119
	word64 rcx_120
	byte SZO_121
	byte Z_122
	word64 rax_124
	byte CZ_125
	word32 esi_126
	word32 edx_127
	call __overflow (retsize: 8; depth: 24)
		uses: C_101,CZ_90,dwLoc04_4,dwLoc08_9,edx_99,esi_112,qwLoc08,rax_89,rbp_61,rbx_91,rcx_67,rdi_96,rdx_97,rsi_88,rsp_62,SCZO_100,SZO_68,Z_69
		defs: C_119,CZ_125,edx_127,esi_126,rax_124,rbp_114,rbx_116,rcx_120,rdi_117,rdx_123,rsi_115,rsp_113,SCZO_118,SZO_121,Z_122
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405266:
	branch rbp_114 <=u rbx_11 l000000000040529C
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040528C:
	Mem105[rdi_96 + 0x0000000000000028:word64] = rdx + 0x0000000000000001
	Mem106[rdx:byte] = 0x20
	branch rbp_114 >u rbx_11 l000000000040526B
	Mem110[rdi_96 + 0x0000000000000028:word64] = rdx + 0x0000000000000001
	Mem111[rdx:byte] = 0x20
	branch rbp_114 >u rbx_11 l000000000040526B
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405211:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:rdi -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040529C:
	return
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rsi rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405200_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000020 rbp:<invalid> rbx:<invalid> rcx:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn00000000004052D0(word64 rdx, word32 ebx, word64 rbp, word64 rsi, word64 rdi, word64 r11, selector fs, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & ediOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebx fs r11 rbp rdi rdx rsi
// LiveOut: ebp edi r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn00000000004052D0_entry:
// DataOut: ebx fs r11 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004052D0:
	word32 ebp_8 = (word32) (fp - 0x0000000000000004)
	word64 rsp_44
	word64 rdi_47
	word64 r9_49
	word64 r11_50
	word64 r13_52
	word64 r14_53
	word64 r15_54
	word64 r12_106
	word64 r8_105
	word64 rbp_117
	word64 rsi_113
	word64 rax_55 = fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, rsi, ebx, ebp_8, DPB(rsi, 0x00002000, 0), fp + 0xFFFFFFFFFFFFDFBC, rdx, r11, fs, out rsp_44, out rbp_117, out rsi_113, out rdi_47, out r8_105, out r9_49, out r11_50, out r12_106, out r13_52, out r14_53, out r15_54)
	Mem64[rbp_117 + 0xFFFFFFFFFFFFDF98:word64] = rbp_117 + 0xFFFFFFFFFFFFDFC0
	word64 rbx_111 = rax_55
	word32 ebx_57 = (word32) rax_55
	branch rax_55 >u 0x0000000000001FFF l0000000000405590
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405590:
	Mem873[rbp_117 + 0xFFFFFFFFFFFFDF98:word64] = rsp_44 - (rax_55 + 0x000000000000001F & 0xFFFFFFFFFFFFFFF0) + 0x000000000000000F
	Mem875[rbp_117 + 0xFFFFFFFFFFFFDF98:word64] = Mem873[rbp_117 + 0xFFFFFFFFFFFFDF98:word64] & 0xFFFFFFFFFFFFFFF0
	word64 rsp_880
	word64 rdi_883
	word64 r9_885
	word64 r11_886
	word64 r13_888
	word64 r14_889
	word64 r15_890
	fn000000000040E6F0(0xFFFFFFFFFFFFFFFF, r14_53, ebx_57, ebp_8, rax_55 + 0x0000000000000001, Mem875[rbp_117 + 0xFFFFFFFFFFFFDF98:word64], r13_52, r11_50, fs, out rsp_880, out rbp_117, out rsi_113, out rdi_883, out r8_105, out r9_885, out r11_886, out r12_106, out r13_888, out r14_889, out r15_890)
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> rsi:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):fp + 0xFFFFFFFFFFFFDFBC -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405343:
	branch Mem64[0x000000000061B0F0:byte] != 0x00 l0000000000405412
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405412:
	word64 rsp_402
	word64 rdx_405
	word64 r14_408
	word64 r13_409
	word32 esi_410
	byte SCZO_412
	word64 rcx_413
	word32 eax_416
	byte SZO_417
	byte C_418
	byte CZ_419
	byte Z_420
	word32 edx_421
	word64 r12_422
	word32 r12d_423
	word16 dx_424
	word64 r15_425
	byte al_426
	byte SO_427
	byte dl_428
	word32 edi_429
	byte S_430
	word32 ecx_431
	byte cl_432
	word16 ax_433
	word32 ebx_434
	word64 r11_435
	word64 r9_436
	word32 ebp_437
	word64 rax_414
	word64 rdi_406
	call __ctype_get_mb_cur_max (retsize: 8; depth: 8)
		uses: al_78,ax_79,C_74,cl,CZ_63,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx,eax_77,ebp_8,ebx_57,ecx,edi_83,edx,esi_81,fs,qwLoc04,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_66,r12_75,r12d,r13_69,r14_70,r15_67,r8_72,r9_65,rax_76,rbp_84,rbx_56,rcx_68,rdi_82,rdx_71,rsi_80,rsp_85,S,SCZO_86,SO,SZO_73,Z_87
		defs: al_426,ax_433,C_418,cl_432,CZ_419,dl_428,dx_424,eax_416,ebp_437,ebx_434,ecx_431,edi_429,edx_421,esi_410,fs_415,r11_435,r12_422,r12d_423,r13_409,r14_408,r15_425,r8_404,r9_436,rax_414,rbp_403,rbx_411,rcx_413,rdi_406,rdx_405,rsi_407,rsp_402,S_430,SCZO_412,SO_427,SZO_417,Z_420
	branch rax_414 <=u 0x0000000000000001 l00000000004055D1
// DataOut: fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004055D1:
	word64 r14_764 = Mem64[r13_409 + 0xFFFFFFFFFFFFDF98:word64]
	*r14Out = r14_764
	word64 r12_765 = r14_764 + rbx_111
	branch r14_764 >=u r12_765 l0000000000405602
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004055E1:
	word64 rsp_805
	word64 rdx_808
	word64 rdi_809
	word64 r14_811
	word64 r13_812
	word32 esi_813
	byte SCZO_815
	word64 rcx_816
	word64 rax_817
	word32 eax_819
	byte SZO_820
	byte C_821
	byte CZ_822
	byte Z_823
	word32 edx_824
	word64 r12_825
	word32 r12d_826
	word16 dx_827
	word64 r15_828
	byte al_829
	byte SO_830
	byte dl_831
	word32 edi_832
	byte S_833
	word32 ecx_834
	byte cl_835
	word16 ax_836
	word32 ebx_837
	word64 r11_838
	word64 r9_839
	word32 ebp_840
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_426,ax_433,C_768,cl_432,CZ_439,dl_428,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_424,eax_416,ebp_437,ebx_434,ecx_431,edi_429,edx_421,esi_410,fs_415,qwLoc04,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_435,r12_765,r12d_766,r13_409,r14_764,r15_425,r8_404,r9_436,rax_414,rbp_403,rbx_411,rcx_413,rdi_406,rdx_405,rsi_407,rsp_402,S_430,SCZO_767,SO_427,SZO_417,Z_420
		defs: al_829,ax_836,C_821,cl_835,CZ_822,dl_831,dx_827,eax_819,ebp_840,ebx_837,ecx_834,edi_832,edx_824,esi_813,fs_818,r11_838,r12_825,r12d_826,r13_812,r14_811,r15_828,r8_807,r9_839,rax_817,rbp_806,rbx_814,rcx_816,rdi_809,rdx_808,rsi_810,rsp_805,S_833,SCZO_815,SO_830,SZO_820,Z_823
	word64 rdx_841 = r14_811
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004055E9:
	rsi_113 = DPB(rsi_113, (word32) Mem64[rdx_841:byte], 0) (alias)
	branch (Mem64[Mem64[rax_817:word64] + 0x0000000000000001 + rsi_113 * 0x02:byte] & 0x40) != 0x00 l00000000004055F9
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004055F6:
	Mem863[rdx_841:byte] = 0x3F
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004055F9:
	rdx_841 = rdx_841 + 0x0000000000000001
	branch rdx_841 != r12_825 l00000000004055E9
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405602:
	*r12Out = rbx_111
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r12:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405421:
	word64 r15_440 = Mem64[r13_409 + 0xFFFFFFFFFFFFDF98:word64]
	*r15Out = r15_440
	word64 r13_441 = r15_440 + rbx_111
	*r13Out = r13_441
	branch r15_440 >=u r13_441 l0000000000405612
// DataOut: fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405612:
	rbx_111 = DPB(rbx_111, 0x00000000, 0) (alias)
	*r12Out = DPB(r12_422, 0x00000000, 0)
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> rsi:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405435:
	word64 rbx_444 = r15_440
	r12_106 = DPB(r12_422, 0x00000000, 0) (alias)
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> rsi:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405440:
	word32 eax_481 = (word32) Mem64[rdi_406:byte]
	rax_414 = DPB(rax_414, eax_481, 0) (alias)
	byte al_483 = (byte) eax_481
	branch al_483 > 0x3F l0000000000405520
// DataOut: al fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405520:
	branch al_483 < 0x41 l0000000000405460
// DataOut: al fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405528:
	branch al_483 <= 0x5F l0000000000405538
// DataOut: al fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040552C:
	branch (byte) (rax_414 - 0x0000000000000061) >u 0x1D l0000000000405460
// DataOut: al fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040544C:
	branch al_483 >= 0x25 l0000000000405538
// DataOut: al fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405454:
	branch (byte) (rax_414 - 0x0000000000000020) <=u 0x03 l0000000000405538
// DataOut: al fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405538:
	Mem731[rbx_444:byte] = al_483
	word64 r15_730 = r15_440 + 0x0000000000000001
	word64 r12_732 = r12_106 + 0x0000000000000001
	word64 rbx_733 = rbx_444 + 0x0000000000000001
	branch r15_730 <u r13_441 l0000000000405440
	Mem737[rbx_733:byte] = al_483
	r15_440 = r15_730 + 0x0000000000000001
	*r15Out = r15_440
	r12_106 = r12_732 + 0x0000000000000001
	*r12Out = r12_106
	rbx_444 = rbx_733 + 0x0000000000000001
	branch r15_730 + 0x0000000000000001 <u r13_441 l0000000000405440
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040554F:
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> r12:<invalid> rsi:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405460:
	Mem530[rbp_117 + 0xFFFFFFFFFFFFDFB0:word64] = 0x0000000000000000
// DataOut: fs r11 r11d r12 r13 r15 r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405470:
	word64 rsp_542
	word64 rdx_545
	word64 r14_548
	word32 esi_550
	word64 rbx_551
	byte SCZO_552
	word64 rcx_553
	word32 eax_556
	byte SZO_557
	byte C_558
	byte CZ_559
	byte Z_560
	word32 edx_561
	word64 r12_562
	word32 r12d_563
	word16 dx_564
	word64 r15_565
	byte al_566
	byte SO_567
	byte dl_568
	word32 edi_569
	byte S_570
	word32 ecx_571
	byte cl_572
	word16 ax_573
	word32 ebx_574
	word64 r11_575
	word64 r9_576
	word32 ebp_577
	call mbrtowc (retsize: 8; depth: 8)
		uses: al_483,ax_484,C_469,cl_452,CZ_527,dl_524,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_458,eax_481,ebp_479,ebx_473,ecx_453,edi_537,edx_526,esi_541,fs_462,qwLoc04,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_451,r12_470,r12d_459,r13_532,r14_465,r15_531,r8_467,r9_450,rax_482,rbp_533,rbx_472,rcx_535,rdi_536,rdx_538,rsi_540,rsp_480,S_454,SCZO_539,SO_525,SZO_529,Z_468
		defs: al_566,ax_573,C_558,cl_572,CZ_559,dl_568,dx_564,eax_556,ebp_577,ebx_574,ecx_571,edi_569,edx_561,esi_550,fs_555,r11_575,r12_562,r12d_563,r13_549,r14_548,r15_565,r8_544,r9_576,rax_554,rbp_543,rbx_551,rcx_553,rdi_546,rdx_545,rsi_547,rsp_542,S_570,SCZO_552,SO_567,SZO_557,Z_560
	word64 r14_580 = rax_414
	*r14Out = r14_580
	branch rax_414 == 0xFFFFFFFFFFFFFFFF l0000000000405551
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405551:
	Mem718[rbx_551:byte] = 0x3F
	r15_440 = r15_565 + 0x0000000000000001
	*r15Out = r15_440
	r12_106 = r12_562 + 0x0000000000000001
	*r12Out = r12_106
	rbx_444 = rbx_551 + 0x0000000000000001
	branch r15_565 + 0x0000000000000001 <u r13_441 l0000000000405440
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405569:
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405499:
	branch rax_414 == 0xFFFFFFFFFFFFFFFE l000000000040556B
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040556B:
	Mem710[rbx_551:byte] = 0x3F
	r15_440 = r13_441
	*r15Out = r15_440
	r12_106 = r12_562 + 0x0000000000000001
	*r12Out = r12_106
	rbx_444 = rbx_551 + 0x0000000000000001
	branch r13_441 <u r13_441 l0000000000405440
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405582:
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004054A3:
	branch rax_414 != 0x0000000000000000 l00000000004054B5
// DataOut: al eax fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004054B1_1:
// DataOut: al eax fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:0x00000001 rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> ecx:<invalid> ax:0x0001 r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:0x01 cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004054B5:
	word64 rsp_592
	word64 rbp_593
	word64 r8_594
	word64 rdx_595
	word64 rdi_596
	word64 rsi_597
	word64 r14_598
	word64 r13_599
	word32 esi_600
	word64 rbx_601
	byte SCZO_602
	word64 rcx_603
	word64 rax_604
	selector fs_605
	word32 eax_606
	byte SZO_607
	byte C_608
	byte CZ_609
	byte Z_610
	word32 edx_611
	word64 r12_612
	word32 r12d_613
	word16 dx_614
	word64 r15_615
	byte al_616
	byte SO_617
	byte dl_618
	word32 edi_619
	byte S_620
	word32 ecx_621
	byte cl_622
	word16 ax_623
	word32 ebx_624
	word64 r11_625
	word64 r9_626
	word32 ebp_627
	call wcwidth (retsize: 8; depth: 8)
		uses: al_590,ax_591,C_587,cl_572,CZ_559,dl_568,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_564,eax_588,ebp_577,ebx_574,ecx_571,edi_583,edx_561,esi_550,fs_555,qwLoc04,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_575,r12_562,r12d_563,r13_549,r14_580,r15_565,r8_544,r9_576,rax_589,rbp_543,rbx_551,rcx_553,rdi_584,rdx_545,rsi_547,rsp_542,S_570,SCZO_581,SO_567,SZO_585,Z_586
		defs: al_616,ax_623,C_608,cl_622,CZ_609,dl_618,dx_614,eax_606,ebp_627,ebx_624,ecx_621,edi_619,edx_611,esi_600,fs_605,r11_625,r12_612,r12d_613,r13_599,r14_598,r15_615,r8_594,r9_626,rax_604,rbp_593,rbx_601,rcx_603,rdi_596,rdx_595,rsi_597,rsp_592,S_620,SCZO_602,SO_617,SZO_607,Z_610
	branch false l0000000000405510
// DataOut: al eax fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:0x00000001 rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> ecx:<invalid> ax:0x0001 r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:0x01 cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405510:
	Mem701[rbx_601:byte] = 0x3F
// DataOut: eax fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004054BE:
	word64 rsi_674 = r15_615 + r14_598
	word64 rdx_676 = rbx_601
	r15_680 = r15_615
// DataOut: al fs r11 r11d r12 r13 r14 r14b r14d r15 r8 r9 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004054C8:
	word64 r15_680
	rdx_676 = rdx_676 + 0x0000000000000001
	Mem691[rdx_676 - 0x0000000000000001:byte] = (byte) (word32) Mem530[rdi_596 - 0x0000000000000001:byte]
	r15_680 = r15_680 + 0x0000000000000001
	branch r15_680 != rsi_674 l00000000004054C8
// DataOut: al fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004054DD:
// DataOut: eax fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> r12:<invalid> r9d:<invalid> r8d:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004054E5:
	word64 rsp_633
	word64 rdx_636
	word64 r14_639
	word32 esi_641
	byte SCZO_643
	word64 rcx_644
	word32 eax_647
	byte SZO_648
	byte C_649
	byte CZ_650
	byte Z_651
	word32 edx_652
	word32 r12d_654
	word16 dx_655
	byte al_657
	byte SO_658
	byte dl_659
	word32 edi_660
	byte S_661
	word32 ecx_662
	byte cl_663
	word16 ax_664
	word32 ebx_665
	word64 r11_666
	word64 r9_667
	word32 ebp_668
	call mbsinit (retsize: 8; depth: 8)
		uses: al_616,ax_623,C_630,cl_622,CZ_609,dl_618,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_614,eax_606,ebp_627,ebx_624,ecx_621,edi_632,edx_611,esi_600,fs_605,qwLoc04,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_625,r12_612,r12d_613,r13_599,r14_598,r15_615,r8_594,r9_626,rax_604,rbp_593,rbx_601,rcx_603,rdi_631,rdx_595,rsi_597,rsp_592,S_629,SCZO_602,SO_617,SZO_628,Z_610
		defs: al_657,ax_664,C_649,cl_663,CZ_650,dl_659,dx_655,eax_647,ebp_668,ebx_665,ecx_662,edi_660,edx_652,esi_641,fs_646,r11_666,r12_653,r12d_654,r13_640,r14_639,r15_656,r8_635,r9_667,rax_645,rbp_634,rbx_642,rcx_644,rdi_637,rdx_636,rsi_638,rsp_633,S_661,SCZO_643,SO_658,SZO_648,Z_651
	branch eax_647 == 0x00000000 l0000000000405470
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> r12:<invalid> ecx:<invalid> ax:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004054F9:
	branch r15_440 <u r13_441 l0000000000405440
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> r12:<invalid> ecx:<invalid> ax:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405502:
	rbx_111 = rbx_444 - Mem64[rbp_117 + 0xFFFFFFFFFFFFDF98:word64]
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r15:<invalid> r12d:<invalid> edx:<invalid> r12:<invalid> rsi:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405350:
	branch Mem64[rbp_117 + 0xFFFFFFFFFFFFDF90:word64] == 0x0000000000000000 l0000000000405379
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040535A:
	word64 rsp_273
	word64 rdx_276
	word64 rdi_277
	word64 r14_279
	word64 r13_280
	word32 esi_281
	byte SCZO_283
	word64 rcx_284
	word64 rax_285
	word32 eax_287
	byte SZO_288
	byte C_289
	byte CZ_290
	byte Z_291
	word32 edx_292
	word64 r12_293
	word32 r12d_294
	word16 dx_295
	word64 r15_296
	byte al_297
	byte SO_298
	byte dl_299
	word32 edi_300
	byte S_301
	word32 ecx_302
	byte cl_303
	word16 ax_304
	word32 ebx_305
	word64 r11_306
	word64 r9_307
	word32 ebp_308
	call __ctype_get_mb_cur_max (retsize: 8; depth: 8)
		uses: al_78,ax_79,C_74,cl,CZ_63,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx,eax_77,ebp_8,ebx_57,ecx,edi_83,edx,esi_81,fs,qwLoc04,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_66,r12_75,r12d,r13_69,r14_70,r15_67,r8_72,r9_65,rax_76,rbp_84,rbx_56,rcx_68,rdi_82,rdx_71,rsi_80,rsp_85,S,SCZO_263,SO,SZO_73,Z_264
		defs: al_297,ax_304,C_289,cl_303,CZ_290,dl_299,dx_295,eax_287,ebp_308,ebx_305,ecx_302,edi_300,edx_292,esi_281,fs_286,r11_306,r12_293,r12d_294,r13_280,r14_279,r15_296,r8_275,r9_307,rax_285,rbp_274,rbx_282,rcx_284,rdi_277,rdx_276,rsi_278,rsp_273,S_301,SCZO_283,SO_298,SZO_288,Z_291
	branch rax_285 <=u 0x0000000000000001 l00000000004053CD
// DataOut: fs r11 r11d r13 r15 r15b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004053CD:
	word64 r14_329 = Mem64[r13_280 + 0xFFFFFFFFFFFFDF98:word64]
	*r14Out = r14_329
	word64 r13_330 = r14_329 + rbx_111
	*r13Out = r13_330
	branch r14_329 >=u r13_330 l000000000040560A
// DataOut: fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040560A:
	*r12Out = DPB(r12_293, 0x00000000, 0)
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004053E1:
	word64 rsp_333
	word64 rdi_337
	word64 r14_339
	word64 r13_340
	word32 esi_341
	byte SCZO_343
	word64 rcx_344
	word64 rax_345
	word32 eax_347
	byte SZO_348
	byte C_349
	byte CZ_350
	byte Z_351
	word32 edx_352
	word64 r12_353
	word32 r12d_354
	word16 dx_355
	word64 r15_356
	byte al_357
	byte SO_358
	byte dl_359
	word32 edi_360
	byte S_361
	word32 ecx_362
	byte cl_363
	word16 ax_364
	word32 ebx_365
	word64 r11_366
	word64 r9_367
	word32 ebp_368
	word64 rdx_336
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_297,ax_304,C_332,cl_303,CZ_310,dl_299,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_295,eax_287,ebp_308,ebx_305,ecx_302,edi_300,edx_292,esi_281,fs_286,qwLoc04,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_306,r12_293,r12d_294,r13_330,r14_329,r15_296,r8_275,r9_307,rax_285,rbp_274,rbx_282,rcx_284,rdi_277,rdx_276,rsi_278,rsp_273,S_301,SCZO_331,SO_298,SZO_288,Z_291
		defs: al_357,ax_364,C_349,cl_363,CZ_350,dl_359,dx_355,eax_347,ebp_368,ebx_365,ecx_362,edi_360,edx_352,esi_341,fs_346,r11_366,r12_353,r12d_354,r13_340,r14_339,r15_356,r8_335,r9_367,rax_345,rbp_334,rbx_342,rcx_344,rdi_337,rdx_336,rsi_338,rsp_333,S_361,SCZO_343,SO_358,SZO_348,Z_351
	r12_106 = DPB(r12_353, 0x00000000, 0) (alias)
	word64 rcx_373 = Mem64[rax_345:word64]
	word64 rax_376 = r14_339
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004053F0:
	rdx_336 = DPB(rdx_336, (word32) Mem64[rax_376:byte], 0) (alias)
	r12_106 = r12_106 - 0xFF - (((word16) ((word32) Mem64[rcx_373 + rdx_336 * 0x0002:word16]) & 0x4000) <u 0x0001)
	*r12Out = r12_106
	rax_376 = rax_376 + 0x0000000000000001
	branch rax_376 != r13_340 l00000000004053F0
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r12:<invalid> rsi:<invalid> r15:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040540D:
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> r12:<invalid> rsi:<invalid> r15:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405365:
	word32 ebx_317
	word64 rsp_318
	word64 r12_321
	word64 r13_322
	word64 r14_323
	word64 r15_324
	*r12Out = (int64) (word32) fn000000000040D240(0x00000000, rbx_111, Mem64[rbp_117 + 0xFFFFFFFFFFFFDF98:word64], fs, out ebx_317, out rsp_318, out rbp_117, out rsi_113, out r12_321, out r13_322, out r14_323, out r15_324)
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r15:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> r9:<invalid> ebp:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405379:
	word64 rcx_120 = Mem64[rbp_117 + 0xFFFFFFFFFFFFDF88:word64]
	branch rcx_120 == 0x0000000000000000 l0000000000405399
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15:<invalid> ebx:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405385:
	word64 rsp_227
	word64 rdx_230
	word64 rdi_231
	word64 r14_233
	word64 r13_234
	word32 esi_235
	byte SCZO_237
	word64 rcx_238
	word64 rax_239
	word32 eax_241
	byte SZO_242
	byte C_243
	byte CZ_244
	byte Z_245
	word32 edx_246
	word32 r12d_248
	word16 dx_249
	word64 r15_250
	byte al_251
	byte SO_252
	byte dl_253
	word32 edi_254
	byte S_255
	word32 ecx_256
	byte cl_257
	word16 ax_258
	word32 ebx_259
	word64 r11_260
	word64 r9_261
	word32 ebp_262
	call fwrite_unlocked (retsize: 8; depth: 8)
		uses: al_109,ax_110,C_123,cl_90,CZ_99,dl_93,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_17,dwLoc14_24,dwLoc18_27,dx_96,eax_108,ebp_118,ebx_112,ecx_91,edi_116,edx_98,esi_225,fs_100,qwLoc04,qwLoc2074_33,qwLoc207C_29,qwLoc3C_38,r11_89,r12_106,r12d_97,r13_102,r14_103,r15_95,r8_105,r9_88,rax_107,rbp_117,rbx_111,rcx_120,rdi_223,rdx_224,rsi_226,rsp_119,S_92,SCZO_101,SO_94,SZO_121,Z_122
		defs: al_251,ax_258,C_243,cl_257,CZ_244,dl_253,dx_249,eax_241,ebp_262,ebx_259,ecx_256,edi_254,edx_246,esi_235,fs_240,r11_260,r12_247,r12d_248,r13_234,r14_233,r15_250,r8_229,r9_261,rax_239,rbp_228,rbx_236,rcx_238,rdi_231,rdx_230,rsi_232,rsp_227,S_255,SCZO_237,SO_252,SZO_242,Z_245
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15:<invalid> ebx:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405399:
	branch Mem64[rbp_117 + 0xFFFFFFFFFFFFDF90:word64] == 0x0000000000000000 l00000000004053A8
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15:<invalid> ebx:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004053A5:
	Mem222[r8_105:word64] = r12_106
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15:<invalid> ebx:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l00000000004053A8:
	word64 rbx_165 = Mem64[rbp_117 - 0x0000000000000038:word64] ^ Mem64[fs:0x00000028:word64]
	*rbxOut = rbx_165
	branch rbx_165 != 0x0000000000000000 l000000000040561C
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15:<invalid> ebx:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040561C:
	__stack_chk_fail()
// DataOut: fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15:<invalid> ebx:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(64) Local -0008(64)

l0000000000405621_thunk_fn0000000000405630:
	word64 rsp_213
	word64 rbp_214
	word64 rsi_215
	word32 edi_216
	word64 r12_217
	return fn0000000000405630(rsi_113, qwLoc04, out rsp_213, out rbp_214, out rsi_215, out edi_216, out r12_217)
// DataOut: ebp edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15:<invalid> ebx:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004053BE:
	word64 rsp_195 = rbp_117 - 0x0000000000000028
	word64 rsp_199 = Mem64[rsp_195 + 0x0000000000000008:word64]
	word64 rbx_196
	*rbxOut = Mem64[rsp_195:word64]
	word64 rsi_203
	*rsiOut = Mem64[rsp_199 + 0x0000000000000010:word64]
	word32 edi_207
	*ediOut = (word32) Mem64[rsp_199 + 0x0000000000000018:word64]
	word64 rbp_209
	*rbpOut = Mem64[rsp_199 + 0x0000000000000020:word64]
	word64 rsp_211
	*rspOut = rsp_199 + 0x0000000000000028
	return rbx_111
// DataOut: ebp edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15:<invalid> ebx:<invalid> r12d:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> edi:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

fn00000000004052D0_exit:
// DataOut: ebp edi r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r8:<invalid> rbp:<invalid> r14:<invalid> r13:<invalid> rdx:<invalid> esi:<invalid> rdi:<invalid> rcx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rsi:<invalid> r12:<invalid> r12d:<invalid> edx:<invalid> r15:<invalid> ebx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> ecx:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -8316(fp):rdi -8308(fp):rcx -8300(fp):<invalid> -8276(fp):0x0000000000000000 -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp



word64 fn0000000000405630(word64 rsi, word64 qwArg04, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & ediOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: ebp edi r12 r12b rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn0000000000405630_entry:
	*rsiOut = rsi
	*ediOut = edi
// DataOut: edi fs r11 r11d r13 r14 r14b r14d r15 r15b r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l0000000000405630:
	word64 rax_13 = Mem0[rsi + 0x0000000000000018:word64]
	word64 rbp_15 = Mem0[rsi + 0x0000000000000010:word64]
	word64 r12_17 = rax_13 - rbp_15
	word64 r12_20 = DPB(r12_17, (word32) r12_17 >>u 0x00000003, 0)
	*r12Out = r12_20
	branch r12_20 == 0x0000000000000000 l00000000004056DB
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040564F:
	branch rax_13 == rbp_15 l00000000004056E6
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> r12d:r12d >>u 0x00000003 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l00000000004056E6:
	Mem189[rsi + 0x0000000000000050:byte] = Mem0[rsi + 0x0000000000000050:byte] | 0x02
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> r12d:r12d >>u 0x00000003 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l0000000000405658:
	word64 rcx_89 = (int64) Mem0[rsi + 0x0000000000000030:word32]
	word32 edx_95 = ~(word32) rcx_89
	word64 rcx_93 = Mem0[rsi + 0x0000000000000020:word64]
	word64 rdx_97 = (int64) edx_95 & rax_13 + rcx_89
	word64 rax_98 = Mem0[rsi + 0x0000000000000008:word64]
	Mem100[rsi + 0x0000000000000018:word64] = rdx_97
	word64 rdx_102 = rdx_97 - rax_98
	branch rdx_102 > rcx_93 - rax_98 l00000000004056E0
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> r12d:r12d >>u 0x00000003 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l00000000004056E0:
	Mem187[rsi + 0x0000000000000018:word64] = rcx_93
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> r12d:r12d >>u 0x00000003 rcx:<invalid> edx:<invalid> rdx:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l0000000000405683:
	word64 rax_105 = Mem100[rsi + 0x0000000000000018:word64]
	Mem110[rsi + 0x0000000000000010:word64] = rax_105
	word64 rsp_112
	word64 rbp_113
	word64 r12_117
	byte SCZO_118
	word32 r12d_119
	byte SZO_120
	byte C_121
	byte Z_122
	word64 rcx_123
	word32 edx_124
	word32 ecx_125
	word64 rdx_126
	word32 ebx_127
	word32 eax_128
	word32 esi_129
	word32 edi_130
	byte CZ_132
	word64 rdi_131
	word64 rsi_116
	word64 rax_115
	word64 rbx_114
	call fputs_unlocked (retsize: 8; depth: 20)
		uses: C_109,CZ,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_14,ebx_106,ecx_94,edi,edx_95,esi,qwLoc0C,r12_20,r12d_19,rax_105,rbp_15,rbx_107,rcx_93,rdi,rdx_102,rsi_111,rsp_8,SCZO_103,SZO_108,Z_87
		defs: C_121,CZ_132,eax_128,ebx_127,ecx_125,edi_130,edx_124,esi_129,r12_117,r12d_119,rax_115,rbp_113,rbx_114,rcx_123,rdi_131,rdx_126,rsi_116,rsp_112,SCZO_118,SZO_120,Z_122
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> r12d:r12d >>u 0x00000003 rcx:<invalid> edx:<invalid> rdx:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l00000000004056A0:
	rsi_116 = DPB(rsi_116, 0x00413759, 0) (alias)
	*rsiOut = rsi_116
	rdi_131 = DPB(rdi_131, 0x00000001, 0) (alias)
	rbx_114 = rbx_114 + 0x0000000000000001
	rax_115 = DPB(rax_115, __printf_chk(rdi_131, rsi_116), 0)
	branch r12_117 >u rbx_114 l00000000004056A0
// DataOut: fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> r12d:r12d >>u 0x00000003 rcx:<invalid> edx:<invalid> rdx:<invalid> rbx:<invalid> ebx:<invalid> rsi:<invalid> eax:<invalid> esi:0x00413759 edi:0x00000001 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l00000000004056BF:
	word64 rdi_149 = Mem110[0x000000000061A610:word64]
	word32 edi_150 = (word32) rdi_149
	*ediOut = edi_150
	rax_13 = Mem110[rdi_149 + 0x0000000000000028:word64]
	branch rax_13 >=u Mem110[rdi_149 + 0x0000000000000030:word64] l00000000004056EF
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> r12d:r12d >>u 0x00000003 rcx:<invalid> edx:<invalid> rdx:<invalid> rbx:<invalid> ebx:<invalid> rsi:<invalid> eax:<invalid> esi:0x00413759 edi:0x00000001 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l00000000004056EF:
// DataOut: ebp edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> r12d:r12d >>u 0x00000003 rcx:<invalid> edx:<invalid> rdx:<invalid> rbx:<invalid> ebx:<invalid> rsi:<invalid> eax:<invalid> esi:0x00413759 edi:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000402400:
	word64 rsp_166
	word64 rbp_167
	word64 rbx_168
	word64 rax_169
	word64 rsi_170
	word64 r12_171
	byte SCZO_172
	word32 r12d_173
	byte SZO_174
	byte C_175
	byte Z_176
	word64 rcx_177
	word32 edx_178
	word32 ecx_179
	word64 rdx_180
	word32 ebx_181
	word32 eax_182
	word32 esi_183
	word32 edi_184
	word64 rdi_185
	byte CZ_186
	call Mem110[0x000000000061A148:word32] (retsize: 4; depth: 4)
		uses: C_154,CZ_148,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_152,ebx_145,ecx_125,edi_150,edx_124,esi_164,qwLoc0C,r12_117,r12d_119,rax_151,rbp_160,rbx_158,rcx_123,rdi_149,rdx_137,rsi_165,rsp_163,SCZO_153,SZO_120,Z_122
		defs: C_175,CZ_186,eax_182,ebx_181,ecx_179,edi_184,edx_178,esi_183,r12_171,r12d_173,rax_169,rbp_167,rbx_168,rcx_177,rdi_185,rdx_180,rsi_170,rsp_166,SCZO_172,SZO_174,Z_176
	return rax_169
// DataOut: ebp edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbp:fp r12:<invalid> r12d:r12d >>u 0x00000003 rcx:<invalid> edx:<invalid> rdx:<invalid> rbx:rbx ebx:<invalid> rsi:<invalid> eax:<invalid> esi:0x0000000A edi:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004056D0:
	Mem156[rdi_149 + 0x0000000000000028:word64] = rax_13 + 0x0000000000000001
	Mem157[rax_13:byte] = 0x0A
// DataOut: edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> r12d:r12d >>u 0x00000003 rcx:<invalid> edx:<invalid> rdx:<invalid> rbx:<invalid> ebx:<invalid> rsi:<invalid> eax:<invalid> esi:0x00413759 edi:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l00000000004056DB:
	word64 rbp_81
	*rbpOut = fp
	word64 rsp_85
	*rspOut = qwArg04 + 0x0000000000000008
	return rax_13
// DataOut: ebp edi fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rax:<invalid> rbp:<invalid> r12:<invalid> r12d:r12d >>u 0x00000003 rcx:<invalid> edx:<invalid> rdx:<invalid> rbx:<invalid> ebx:<invalid> rsi:<invalid> eax:<invalid> esi:0x00413759 edi:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000405630_exit:
// DataOut: ebp edi r12 r12b rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rbp:fp r12:<invalid> r12d:r12d >>u 0x00000003 rbx:rbx rcx:<invalid> edx:<invalid> rdx:<invalid> ebx:<invalid> rsi:<invalid> eax:<invalid> esi:<invalid> edi:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn0000000000405700(word64 rax, word32 edx, word64 rdi, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13dOut, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rax rdi
// LiveOut: r12 r13d r14 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405700_entry:
	*r13dOut = r13d
	*r14Out = r14
	*r12Out = r12
// DataOut: edx fs r11 r11d r12 r13d r14 r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405700:
	word64 rbp_110
	word64 rsp_13 = fp - 0x0000000000000010
	branch rdi == 0x0000000000000000 l0000000000405780
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405780:
	rbp_110 = (int64) edx
	word64 rax_202 = DPB(rax, __printf_chk(DPB(rdi, 0x00000001, 0), DPB(rsi, 0x0041375E, 0)), 0)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rdi ebx:edx -8(fp):rbx -4(fp):rbp

l0000000000405710:
	word32 ebx_61
	word64 rsp_62
	word64 rbp_63
	word64 rsi_64
	word64 r12_65
	word64 r13_66
	word64 r14_67
	word64 r15_68
	word32 eax_70 = (word32) fn000000000040D420(rax, 0x00000000, rdi, fs, qwLoc18, out ebx_61, out rsp_62, out rbp_63, out rsi_64, out r12_65, out r13_66, out r14_67, out r15_68)
	word32 ebx_72 = ebx_61 - eax_70
	branch ebx_72 >= 0x00000000 l0000000000405728
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 rbp:rdi ebx:edx -8(fp):rbx -4(fp):rbp

l0000000000405725_1:
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> esi:<invalid> rsi:<invalid> eax:0x00000000 ebp:<invalid> rax:<invalid> edx:<invalid> rdi:<invalid> r15d:<invalid> r13:<invalid> rcx:<invalid> rbx:<invalid> r14d:<invalid> r12d:<invalid> rdx:<invalid> edi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405728:
	word64 rbp_84
	word64 rdi_85
	word64 rbx_86
	word32 edx_88
	byte SCZO_89
	byte SZO_90
	byte C_91
	byte Z_92
	word32 esi_93
	word64 rsi_94
	word32 eax_95
	byte S_96
	word64 rax_97
	word64 rcx_98
	word64 rdx_99
	word32 edi_100
	selector fs_101
	word64 r12_102
	word32 r13d_103
	word64 r14_104
	word64 r13_105
	word64 r15_106
	word32 ebx_124
	call fputs_unlocked (retsize: 8; depth: 8)
		uses: C_57,dwLoc04_4,dwLoc08_9,eax_76,ebx_72,edi,edx,esi_53,fs,qwLoc18,r12_65,r13_66,r13d,r14_67,r15_68,rax_77,rbp_63,rbx_73,rcx,rdi_78,rdx,rsi_71,rsp_62,S_75,SCZO_74,SZO_56,Z_15
		defs: C_91,eax_95,ebx_87,edi_100,edx_88,esi_93,fs_101,r12_102,r13_105,r13d_103,r14_104,r15_106,rax_97,rbp_84,rbx_86,rcx_98,rdi_85,rdx_99,rsi_94,rsp_83,S_96,SCZO_89,SZO_90,Z_92
	rbp_110 = (int64) ebx_124 + DPB(rax_97, strlen(rbp_84), 0)
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> esi:<invalid> rsi:<invalid> eax:0x00000000 ebp:<invalid> rax:<invalid> edx:<invalid> rdi:<invalid> r15d:<invalid> r13:<invalid> rcx:<invalid> rbx:<invalid> r14d:<invalid> r12d:<invalid> rdx:<invalid> edi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405740:
	word64 rdi_131 = Mem0[0x000000000061A610:word64]
	word64 rcx_133 = Mem0[rdi_131 + 0x0000000000000028:word64]
	branch rcx_133 >=u Mem0[rdi_131 + 0x0000000000000030:word64] l0000000000405799
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> esi:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> ebp:<invalid> edx:<invalid> rcx:<invalid> rdx:<invalid> r15d:<invalid> r13:<invalid> rbx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405799:
	word64 rdi_168
	word64 rbx_169
	word32 edx_171
	byte SCZO_172
	byte SZO_173
	byte C_174
	byte Z_175
	word32 esi_176
	word64 rsi_177
	word32 eax_178
	byte S_179
	word64 rax_180
	word64 rcx_181
	word64 rdx_182
	word32 edi_183
	selector fs_184
	word64 r12_185
	word32 r13d_186
	word64 r14_187
	word64 r13_188
	word64 r15_189
	call __overflow (retsize: 8; depth: 8)
		uses: C_135,dwLoc04_4,dwLoc08_9,eax_127,ebx_124,edi_132,edx_122,esi_165,fs_117,qwLoc18,r12_116,r13_113,r13d_115,r14_114,r15_112,rax_126,rbp_129,rbx_128,rcx_133,rdi_131,rdx_123,rsi_119,rsp_130,S_118,SCZO_134,SZO_121,Z_125
		defs: C_174,eax_178,ebx_170,edi_183,edx_171,esi_176,fs_184,r12_185,r13_188,r13d_186,r14_187,r15_189,rax_180,rbp_167,rbx_169,rcx_181,rdi_168,rdx_182,rsi_177,rsp_166,S_179,SCZO_172,SZO_173,Z_175
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> esi:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> rcx:<invalid> ebp:<invalid> edx:<invalid> rdx:<invalid> r15d:<invalid> r13:<invalid> rbx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405751:
	Mem163[rdi_131 + 0x0000000000000028:word64] = rcx_133 + 0x0000000000000001
	Mem164[rcx_133:byte] = 0x20
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> esi:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> rcx:<invalid> ebp:<invalid> edx:<invalid> rdx:<invalid> r15d:<invalid> r13:<invalid> rbx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> -8(fp):rbx -4(fp):rbp

l000000000040575C:
	ebx_124 = ebx_124 - 0x00000001
	branch ebx_124 != 0xFFFFFFFF l0000000000405740
// DataOut: ebx fs r11 r11d r12 r13d r14 r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> esi:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> ebp:<invalid> edx:<invalid> r15d:<invalid> r13:<invalid> rbx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405764:
	word64 rax_39 = rbp_110 + 0x0000000000000001 + Mem0[0x000000000061B018:word64]
	Mem41[0x000000000061B018:word64] = rax_39
	word64 rsp_42 = rsp_13 + 0x0000000000000008
	word64 rbp_46
	*rbpOut = Mem41[rsp_42 + 0x0000000000000008:word64]
	word64 rsp_47
	*rspOut = rsp_42 + 0x0000000000000010
	return rax_39
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rcx:<invalid> edi:<invalid> esi:<invalid> eax:<invalid> rax:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> ebp:<invalid> edx:<invalid> r15d:<invalid> r13:<invalid> rbx:<invalid> r14d:<invalid> r12d:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405700_exit:
// DataOut: r12 r13d r14 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rcx:<invalid> edi:<invalid> esi:<invalid> eax:<invalid> rax:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> ebp:<invalid> edx:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn00000000004057B0(byte dl, word64 rsi, word32 edi, word64 r8, word64 r12, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r13dOut, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl edi esi fs r12 r8 rsi
// LiveOut: r12 r13d r14 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn00000000004057B0_entry:
// DataOut: dl edi esi fs r11 r11d r12 r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004057B0:
	word64 rax_25 = DPB(rax, 0x00413764, 0)
	branch dl == 0x00 l00000000004057CB
// DataOut: edi esi fs r11 r11d r12 r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004057C0:
	rax_25 = DPB(rax, 0x00000000, 0) (alias)
	branch Mem0[0x000000000061B145:byte] == 0x00 l00000000004057E0
// DataOut: edi esi fs r11 r11d r12 r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 eax:0x00413764 ebx:edi -4(fp):rbx

l00000000004057E0:
	word64 rsp_57
	word64 rbp_58
	word64 r12_59
	rax_25 = fn000000000040C9B0(rsi, edi, r8, r12, out rsp_57, out rbp_58, out r12_59)
	esi = Mem0[rsp_57 + 0x000000000000000C:word32]
// DataOut: esi fs r11 r11d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 eax:0x00000000 ebx:edi -4(fp):rbx

l00000000004057CB:
// DataOut: edx fs r11 r11d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> eax:<invalid> ebx:edi esi:<invalid> ebp:<invalid> rbx:<invalid> rbp:<invalid> rdx:<invalid> rax:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> -8(fp):esi -4(fp):rbx

l00000000004057D8_thunk_fn0000000000405700:
	word64 rsp_38
	word64 rbp_39
	word64 r12_40
	word32 r13d_41
	word64 r14_42
	return fn0000000000405700(rax_25, esi, rax_25, fs, out rsp_38, out rbp_39, out r12_40, out r13d_41, out r14_42)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> eax:<invalid> ebx:<invalid> edx:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> esi:<invalid> ebp:<invalid> rbp:<invalid> rdx:<invalid> rax:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> -8(fp):esi -4(fp):rbx

fn00000000004057B0_exit:
// DataOut: r12 r13d r14 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> eax:<invalid> ebx:<invalid> edx:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> esi:<invalid> rbp:<invalid> rcx:<invalid> edi:<invalid> rax:<invalid> ebp:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -8(fp):esi -4(fp):rbx



word64 fn0000000000405810(word64 rdx, word64 r11, selector fs, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdx
// LiveOut: r12 r14 r15b rax rbp rdi rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405810_entry:
// DataOut: fs r11 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405810:
	word64 rsp_22
	word64 rbp_23
	word64 r12_24
	word64 r14_25
	byte r15b_26
	word64 rbx_27 = fn000000000040EAB0(rdx, r11, fs, out rsp_22, out rbp_23, out r12_24, out r14_25, out r15b_26)
	__errno_location()
	word64 rsp_42
	word32 r12d_43
	word32 edi_44
	word64 rdi_45
	word64 rdx_46
	word64 rbp_47
	word64 rbx_48
	word64 rsi_49
	word32 esi_51
	byte SZO_52
	byte C_53
	word32 eax_54
	word64 rcx_55
	byte r12b_56
	byte Z_57
	word64 r11_58
	selector fs_59
	word64 r12_60
	word64 r14_61
	byte r15b_62
	word64 rax_50
	call error (retsize: 8; depth: 8)
		uses: C_39,dwLoc04_4,dwLoc08_14,dwLoc0C_17,eax_36,edi_34,esi_32,fs,r11,r12_24,r12b_7,r12d_6,r14_25,r15b_26,rax_37,rbp_29,rbx_27,rcx_40,rdi_35,rdx_41,rsi_33,rsp_22,SZO_38
		defs: C_53,eax_54,edi_44,esi_51,fs_59,r11_58,r12_60,r12b_56,r12d_43,r14_61,r15b_62,rax_50,rbp_47,rbx_48,rcx_55,rdi_45,rdx_46,rsi_49,rsp_42,SZO_52,Z_57
	branch r12b_56 == 0x00 l0000000000405850
// DataOut: fs r12 r14 r15b rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405850:
	word32 eax_92 = Mem0[0x000000000061B030:word32]
	rax_50 = DPB(rax_50, eax_92, 0) (alias)
	branch eax_92 != 0x00000000 l000000000040584A
// DataOut: fs r12 r14 r15b rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12d:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> esi:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r8b:<invalid> ecx:<invalid> r9d:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> ebp:<invalid> r11:<invalid> r14:<invalid> r14d:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040585A:
	word64 rbp_99
	*rbpOut = Mem0[rsp_42 + 0x0000000000000008:word64]
	Mem101[0x000000000061B030:word32] = 0x00000001
	return rax_50
// DataOut: fs r12 r14 r15b rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12d:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> esi:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r8b:<invalid> ecx:<invalid> r9d:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> ebp:<invalid> r11:<invalid> r14:<invalid> r14d:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000405840:
	Mem91[0x000000000061B030:word32] = 0x00000002
// DataOut: fs r12 r14 r15b rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12d:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> esi:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r8b:<invalid> ecx:<invalid> r9d:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> ebp:<invalid> r11:<invalid> r14:<invalid> r14d:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040584A:
	word64 rbp_87
	*rbpOut = Mem0[rsp_42 + 0x0000000000000008:word64]
	return rax_50
// DataOut: fs r12 r14 r15b rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12d:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> esi:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r8b:<invalid> ecx:<invalid> r9d:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> ebp:<invalid> r11:<invalid> r14:<invalid> r14d:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000405810_exit:
// DataOut: r12 r14 r15b rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12d:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rax:<invalid> esi:<invalid> edi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r8b:<invalid> ecx:<invalid> r9d:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> ebp:<invalid> r11:<invalid> r14:<invalid> r14d:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



byte fn0000000000405C20(word32 edx, word32 esi, byte dil, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al rsi
// Trashed: SCZO ah al ax ch cl cx eax ecx esi rax rcx rsi si sil
// Preserved: rsp
fn0000000000405C20_entry:
	*rsiOut = rsi
// DataOut: dil ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C20:
	byte cl_107
	byte al_110
	branch dil == 0x00 l0000000000405C40
// DataOut: dil ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C40:
	al_110 = 0x00 (alias)
	branch edx == 0x00000005 l0000000000405C3E
// DataOut: al dil ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405C47:
	cl_107 = (byte) (DPB(ecx, edx == 0x00000009, 0) | (word32) (edx == 0x00000003)) (alias)
// DataOut: cl dil ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x00000000

l0000000000405C25:
	branch (esi & 0x0000F000) != 0x00008000 l0000000000405CA0
// DataOut: dil eax ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405CA0:
	cl_107 = (esi & 0x0000F000) == 0x00004000
// DataOut: cl dil ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:esi & 0x0000F000

l0000000000405C55:
	al_110 = 0x2F (alias)
	branch cl_107 != 0x00 l0000000000405C3E
// DataOut: al dil ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> cl:<invalid> al:Test(EQ,Z) ecx:<invalid>

l0000000000405C5E:
	branch Mem0[0x000000000061B12C:word32] == 0x00000001 l0000000000405CF0
// DataOut: dil ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0000002F cl:<invalid> al:0x2F ecx:<invalid>

l0000000000405CF0:
	return 0x00
// DataOut: al ebp edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0000002F cl:<invalid> al:0x2F ecx:<invalid>

l0000000000405C6B:
	word32 eax_47
	branch dil == 0x00 l0000000000405CC0
// DataOut: ebp edi edx esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0000002F cl:<invalid> al:0x2F ecx:<invalid>

l0000000000405CC0:
	al_110 = 0x40 (alias)
	branch edx == 0x00000006 l0000000000405C3E
// DataOut: al ebp edi edx fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0000002F cl:<invalid> al:0x2F ecx:<invalid>

l0000000000405CCE:
	al_110 = 0x7C (alias)
	branch edx == 0x00000001 l0000000000405C3E
// DataOut: al ebp edi edx fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x00000040 cl:<invalid> al:0x40 ecx:<invalid>

l0000000000405CDC:
	eax_47 = DPB(0x0000007C, edx == 0x00000007, 0) (alias)
// DataOut: eax ebp edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0000007C cl:<invalid> al:0x7C ecx:<invalid>

l0000000000405C70:
	word64 rsi_54
	*rsiOut = DPB(rsi, esi & 0x0000F000, 0)
	al_110 = 0x40 (alias)
	branch (esi & 0x0000F000) == 0x0000A000 l0000000000405C3E
// DataOut: al ebp edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0000002F cl:<invalid> al:0x2F ecx:<invalid>

l0000000000405C83:
	al_110 = 0x7C (alias)
	branch (esi & 0x0000F000) == 0x00001000 l0000000000405C3E
// DataOut: al ebp edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x00000040 cl:<invalid> al:0x40 ecx:<invalid> esi:esi & 0x0000F000

l0000000000405C90:
	eax_47 = DPB(0x0000007C, (esi & 0x0000F000) == 0x0000C000, 0) (alias)
// DataOut: eax ebp edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0000007C cl:<invalid> al:0x7C ecx:<invalid> esi:esi & 0x0000F000

l0000000000405CE2:
	return (byte) (-eax_47 & 0x0000003D)
// DataOut: al ebp edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> cl:<invalid> al:Test(EQ,Z) ecx:<invalid> esi:esi & 0x0000F000

l0000000000405C33:
	al_110 = 0x00 (alias)
	branch Mem0[0x000000000061B12C:word32] == 0x00000003 l0000000000405CB0
// DataOut: al ebp edi esi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:esi & 0x0000F000

l0000000000405CB0:
	word64 rsi_96
	*rsiOut = DPB(rsi, esi & 0x00000049, 0)
	return (byte) (~(0x00000000 - ((esi & 0x00000049) <u 0x00000001)) & 0x0000002A)
// DataOut: al ebp edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:esi & 0x0000F000 ^ esi & 0x0000F000

l0000000000405C3E:
	return al_110
// DataOut: al ebp edi fs r11 r11d r12 r12b r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> cl:<invalid> al:<invalid> ecx:<invalid> esi:esi & 0x0000F000

fn0000000000405C20_exit:
// DataOut: al rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> esi:<invalid> cl:<invalid> al:<invalid> ecx:<invalid>



byte fn0000000000405D00(word32 edx, word32 esi, byte dil, ptr64 & rspOut, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil edx esi
// LiveOut: al rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi esp rax rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405D00_entry:
// DataOut: dil edx esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D00:
	word32 edi_6 = (word32) dil
	word64 rsi_12
	byte al_13 = fn0000000000405C20(edx, esi, (byte) edi_6, out rsi_12)
	word64 rdi_8
	*rdiOut = DPB(rdi, edi_6, 0)
	byte bl_21 = al_13
	branch al_13 == 0x00 l0000000000405D33
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D10:
	word64 rdi_50 = Mem0[0x000000000061A610:word64]
	*rdiOut = rdi_50
	word64 rax_53 = Mem0[rdi_50 + 0x0000000000000028:word64]
	branch rax_53 >=u Mem0[rdi_50 + 0x0000000000000030:word64] l0000000000405D3A
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:(word32) dil ebx:<invalid> eax:<invalid> esi:<invalid> cl:<invalid> al:<invalid> ecx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D3A:
	word64 rsp_83
	word64 rbx_84
	word32 edi_85
	byte dil_86
	byte al_87
	byte SZO_88
	byte C_89
	word32 ebx_90
	word32 eax_91
	byte Z_92
	word64 rdi_93
	word64 rax_94
	byte SCZO_95
	word64 rdx_96
	word32 esi_98
	word32 edx_99
	word64 rsi_100
	call __overflow (retsize: 8; depth: 12)
		uses: al_54,bl_21,C_57,dil_52,dwLoc04_4,eax_55,ebx_19,edi_51,edx,esi_81,qwLoc04,rax_53,rbx_20,rdi_50,rdx,rsi_82,rsp_2,SCZO_56,SZO_16,Z_17
		defs: al_87,bl_97,C_89,dil_86,eax_91,ebx_90,edi_85,edx_99,esi_98,rax_94,rbx_84,rdi_93,rdx_96,rsi_100,rsp_83,SCZO_95,SZO_88,Z_92
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> ebx:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> esi:<invalid> cl:<invalid> al:<invalid> ecx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D21:
	Mem79[rdi_50 + 0x0000000000000028:word64] = rax_53 + 0x0000000000000001
	Mem80[rax_53:byte] = al_13
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> ebx:<invalid> rdi:<invalid> rax:<invalid> eax:<invalid> esi:<invalid> cl:<invalid> al:<invalid> ecx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D2B:
	Mem76[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + 0x0000000000000001
// DataOut: bl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> ebx:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> al:<invalid> ecx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000405D33:
	word64 rsp_45
	*rspOut = fp + 0x0000000000000004
	return bl_21 != 0x00
// DataOut: al fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 edi:<invalid> ebx:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> al:<invalid> ecx:<invalid> -4(fp):rbx

fn0000000000405D00_exit:
// DataOut: al rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 edi:<invalid> ebx:<invalid> al:Test(NE,Z) rbx:rbx rdi:<invalid> rax:<invalid> rdx:<invalid> esi:<invalid> eax:<invalid> cl:<invalid> ecx:<invalid> -4(fp):rbx



word64 fn0000000000405D50(word64 rdi, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r12bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: r12b r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000405D50_entry:
	*r12bOut = r12b
// DataOut: fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D50:
	word64 rdi_158
	word64 rbp_192 = rdi
	word32 ebp_7 = (word32) rdi
	word32 ebx_11 = 0x00000000
	word64 rbx_12 = DPB(rbx, 0x00000000, 0)
	word64 rax_189 = DPB(Mem0[fs:0x00000028:word64], 0x00000000, 0)
	rdi_158 = rdi
	branch Mem0[0x000000000061B114:byte] == 0x00 l0000000000405D92
// DataOut: ebx fs r11 rax rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405D7A:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405EA0
// DataOut: fs r11 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi ebx:0x00000000 rax:<invalid> eax:0x00000000 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405EA0:
	word64 r14_235
	word64 rax_236 = fn000000000040CD70(fp - 0x00000000000002B0, Mem0[rdi + 0x0000000000000018:word64], out r14_235)
	rax_189 = DPB(rax_236, strlen(rax_236), 0)
	rdi_158 = rax_236
	rbx_12 = rax_189 + 0x0000000000000001
	ebx_11 = (word32) (rax_189 + 0x0000000000000001) (alias)
// DataOut: ebx fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi ebx:0x00000000 rax:<invalid> eax:0x00000000 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D87:
	word64 rbx_229 = (int64) Mem0[0x000000000061B178:word32]
	rbx_12 = rbx_229 + 0x0000000000000001
	ebx_11 = (word32) (rbx_229 + 0x0000000000000001) (alias)
	rdi_158 = rdi
// DataOut: ebx fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi ebx:0x00000000 rax:<invalid> eax:0x00000000 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D92:
	branch Mem0[0x000000000061B144:byte] == 0x00 l0000000000405DB6
// DataOut: ebx fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi ebx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405D9B:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E58
// DataOut: fs r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi ebx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405E58:
	rax_189 = DPB(rax_189, 0x00000002, 0) (alias)
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000405DB3
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi ebx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000405E6A:
	word64 rsp_213
	word64 r8_215
	word64 r9_216
	word32 r14d_218
	word64 r15_219
	word64 rax_220 = fn000000000040BD70(DPB(rcx, 0x00000200, 0), Mem0[0x000000000061B140:word32], rdi, fp - 0x00000000000002B0, Mem0[rdi + 0x0000000000000050:word64], Mem0[0x000000000061B138:word64], fs, out rsp_213, out rbp_192, out r8_215, out r9_216, out r11, out r14d_218, out r15_219)
	rdi_158 = rax_220
	rax_189 = DPB(rax_220, strlen(rax_220), 0) + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi ebx:<invalid> rax:<invalid> eax:0x00000002 rbx:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DA8:
	rax_189 = (int64) Mem0[0x000000000061B174:word32] + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002C0 rbp:rdi ebx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rdi:<invalid> rsi:fp - 0x00000000000002B0 rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> edi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DB3:
	rbx_12 = rbx_12 + rax_189
	ebx_11 = (word32) rbx_12 (alias)
// DataOut: ebx fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> r14:<invalid> rdx:<invalid> edi:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> esi:<invalid> r14d:<invalid> r10:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DB6:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000405DD6
// DataOut: ebx fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> rcx:<invalid> r14:<invalid> rdx:<invalid> edi:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> esi:<invalid> r14d:<invalid> r10:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DBF:
	word64 rax_159
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000405E40
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> rcx:<invalid> r14:<invalid> rdx:<invalid> edi:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> esi:<invalid> r14d:<invalid> r10:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E40:
	rdi_158 = Mem0[rbp_192 + 0x00000000000000A8:word64]
	rax_159 = DPB(rax_189, strlen(rdi_158), 0) + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> rcx:<invalid> r14:<invalid> rdx:<invalid> edi:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> esi:<invalid> r14d:<invalid> r10:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DC8:
	rax_159 = (int64) Mem0[0x000000000061B16C:word32] + 0x0000000000000001
// DataOut: fs r11 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> rcx:<invalid> r14:<invalid> rdx:<invalid> edi:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> esi:<invalid> r14d:<invalid> r10:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DD3:
	ebx_11 = (word32) (rbx_12 + rax_159) (alias)
// DataOut: ebx fs r11 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> rsi:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> rcx:<invalid> r14:<invalid> rdx:<invalid> edi:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> esi:<invalid> r14d:<invalid> r10:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DD6:
	word64 rbx_75
	word64 rsp_76
	word64 rbp_77
	word64 r8_80
	word64 r9_81
	word64 r11_82
	word64 r12_83
	word64 r13_84
	word64 r14_85
	word64 r15_86
	word32 edi_140
	word64 rsi_146
	word64 rax_87 = fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_11, rbp_192, Mem0[rbp_192:word64], DPB(rdi_158, 0x00000000, 0), r11, fs, out rbx_75, out rsp_76, out rbp_77, out rsi_146, out edi_140, out r8_80, out r9_81, out r11_82, out r12_83, out r13_84, out r14_85, out r15_86)
	word64 rbx_102 = rbx_75 + Mem0[rsp_76 + 0x0000000000000008:word64]
	branch Mem0[0x000000000061B12C:word32] == 0x00000000 l0000000000405E1C
// DataOut: ebp edi fs r11 r11d r12b r14 r14d r8 r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> rcx:<invalid> r14:<invalid> rdx:<invalid> edi:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> esi:<invalid> r14d:<invalid> r10:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405DFC:
	edi_140 = (word32) Mem0[rbp_77 + 0x00000000000000B0:byte]
	rbx_102 = rbx_102 + DPB(rax_87, (word32) (fn0000000000405C20(Mem0[rbp_77 + 0x00000000000000A0:word32], Mem0[rbp_77 + 0x0000000000000028:word32], (byte) edi_140, out rsi_146) != 0x00), 0)
// DataOut: ebp edi fs r11 r11d r12b r14 r14d r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> edi:<invalid> rbx:<invalid> rdi:<invalid> r8:<invalid> edx:<invalid> ecx:<invalid> r14:<invalid> r13:<invalid> esi:<invalid> r12:<invalid> r12d:<invalid> r15:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> ax:<invalid> cl:<invalid> ah:<invalid> r11d:<invalid> dl:<invalid> sil:<invalid> esp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E1C:
	branch (Mem0[rsp_76 + 0x00000000000002A8:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000405EBF
// DataOut: ebp edi fs r11 r11d r12b r14 r14d r8 r9 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> edi:<invalid> rbx:<invalid> edx:<invalid> esi:<invalid> al:<invalid> rdi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r12d:<invalid> r15:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> dl:<invalid> sil:<invalid> esp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405EBF:
	__stack_chk_fail()
// DataOut: ebp edi fs r11 r11d r14 r14d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> edi:<invalid> rbx:<invalid> edx:<invalid> esi:<invalid> al:<invalid> rdi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r12d:<invalid> r15:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> dl:<invalid> sil:<invalid> esp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405EC4_thunk_fn0000000000405ED0:
	word64 rsp_133
	word64 rbp_134
	word64 r9_135
	byte r12b_136
	return fn0000000000405ED0(ebp_7, rsi_146, edi_140, r8_80, r11_82, r14_85, fs, out rsp_133, out rbp_134, out r9_135, out r12b_136)
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> edi:<invalid> rbx:<invalid> edx:<invalid> esi:<invalid> al:<invalid> rdi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r12d:<invalid> r15:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> dl:<invalid> sil:<invalid> esp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000405E36:
	word64 rbp_129
	*rbpOut = Mem0[rsp_76 + 0x00000000000002C0:word64]
	word64 rsp_131
	*rspOut = rsp_76 + 0x00000000000002C8
	return rbx_102
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> edi:<invalid> rbx:<invalid> edx:<invalid> esi:<invalid> al:<invalid> rdi:<invalid> cl:<invalid> ecx:<invalid> r8:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> r12d:<invalid> r15:<invalid> r9d:<invalid> r8d:<invalid> r15d:<invalid> dx:<invalid> ebp:<invalid> r14d:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> dl:<invalid> sil:<invalid> esp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000405D50_exit:
// DataOut: r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> rdx:<invalid> rsi:<invalid> rcx:<invalid> edi:<invalid> rbx:<invalid> edx:<invalid> esi:<invalid> al:<invalid> rdi:<invalid> cl:<invalid> ecx:<invalid> r12d:<invalid> r8:<invalid> ebp:<invalid> r14:<invalid> r13:<invalid> r11:<invalid> r8d:<invalid> dl:<invalid> r9:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r9d:<invalid> r15d:<invalid> r13d:<invalid> r10:<invalid> esp:<invalid> dx:<invalid> r14d:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000405ED0(word32 ebp, word64 rsi, word32 edi, word64 r8, word64 r11, word64 r14, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r9Out, ptr64 & r12bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp edi fs r11 r11d r14 r14d r8 rsi
// LiveOut: r12b r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000405ED0_entry:
	*r9Out = r9
// DataOut: ebp edi fs r11 r11d r14 r14d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000405ED0:
	word64 rdx_6 = Mem0[0x000000000061B1B0:word64]
	word64 rax_8 = Mem0[0x000000000061B020:word64]
	word128 rdx_rax_9 = SEQ(rdx_6, rax_8)
	byte r12b_22
	*r12bOut = (byte) edi
	word64 r12_24 = DPB(r12, edi, 0)
	word64 rsp_123 = fp - 0x0000000000000014
	word64 rbx_184 = rdx_6
	word32 ebx_31 = (word32) rdx_6
	branch rax_8 >u rdx_6 l0000000000405EF3
// DataOut: ebp ebx fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000405EEF_1:
	rbx_184 = rax_8
	ebx_31 = (word32) rax_8 (alias)
// DataOut: ebp ebx fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405EF3:
	word64 rsi_369
	word64 rax_116
	word64 r8_357
	word128 rdx_rax_209
	branch rbx_184 <=u Mem0[0x000000000061A660:word64] l00000000004060C8
// DataOut: ebp ebx fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060C8:
	rax_116 = DPB(rax_8, 0x00000000, 0) (alias)
	rdx_rax_209 = DPB(rdx_rax_9, 0x00000000, 0) (alias)
	r8_357 = rdx_6
	rsi_369 = Mem0[0x000000000061B028:word64]
	branch rbx_184 == 0x0000000000000000 l0000000000406004
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060DD:
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> eax:0x00000000 r8:<invalid> rsi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F00:
	word64 rdi_398 = Mem0[0x000000000061B028:word64]
	word32 edi_399 = (word32) rdi_398
	branch rbx_184 <u rax_8 >>u 0x0000000000000001 l0000000000406170
// DataOut: ebp ebx edi fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406170:
	r8 = 0x0000000055555555
	branch rbx_184 >u rax_8 l000000000040619D
// DataOut: ebp ebx edi fs r11 r11d r12 r12b r14 r14d r8 r9 rbx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040617F:
	rbp = rbx_184 * 0x0000000000000002
	word64 rsp_550
	Mem553[0x000000000061B028:word64] = fn0000000000410C90(rax_8 >>u 0x0000000000000001, rbp + rbx_184 << 0x0000000000000004, rdi_398, out ebx_31, out rsp_550, out r8)
	ebp = (word32) rbp (alias)
// DataOut: ebp ebx fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> rdi:<invalid> r8:0x0000000055555555 -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F16:
	branch rax_8 >u rax_8 >>u 0x0000000000000001 l000000000040619D
// DataOut: ebp ebx edi fs r11 r11d r12 r12b r14 r14d r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F29:
	word64 rsp_534
	word64 rax_536 = fn0000000000410C90(rax_8 >>u 0x0000000000000001, rax_8 * 0x0000000000000018, rdi_398, out ebx_31, out rsp_534, out r8)
	rbp = Mem0[0x000000000061B020:word64]
	Mem539[0x000000000061B028:word64] = rax_536
	ebp = (word32) rbp (alias)
// DataOut: ebp ebx fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> rdi:<invalid> r10:0x00000000AAAAAAAA -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F44:
	word64 rax_445 = Mem0[0x000000000061A660:word64]
	word64 rdi_448 = rbp - rax_445
	rsi = rbp + 0x0000000000000001 + rax_445
	edi_399 = (word32) rdi_448 (alias)
	word64 rcx_451 = rsi *s rdi_448
	branch rbp >u rsi l000000000040619D
// DataOut: ebp ebx edi fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r8:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F66:
	word128 rdx_rax_458 = SEQ(rax_8 >>u 0x0000000000000001, rcx_451)
	word64 rdx_460 = (uint64) (rdx_rax_458 % rdi_448)
	word64 rax_461 = (uint64) (rdx_rax_458 /u rdi_448)
	branch rsi != rax_461 l000000000040619D
// DataOut: ebp ebx edi fs r11 r11d r12 r12b r14 r14d r8 r9 rax rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r8:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F77:
	r8 = 0x00000000FFFFFFFF
	branch rcx_451 >>u 0x0000000000000001 >u rax_461 l000000000040619D
// DataOut: ebp ebx edi fs r11 r11d r12 r12b r14 r14d r8 r9 rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r8:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040619D:
	fn0000000000410E50()
// DataOut: ebp ebx edi fs r11d r12 r14 r14d r8 rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> rdi:<invalid> r10:<invalid> r8:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi
// Terminates process

l00000000004061A2_thunk_fn00000000004061B0:
	word32 ebx_425
	word64 rsp_426
	word64 rbp_427
	word64 rsi_428
	word64 r8_429
	word64 r9_430
	word64 r12_431
	word64 r14_432
	word64 r15_433
	return fn00000000004061B0(ebx_31, ebp, rsi, edi_399, r8, r11d, r12_24, r14, fs, out ebx_425, out rsp_426, out rbp_427, out rsi_428, out r8_429, out r9_430, out r12_431, out r14_432, out r15_433)
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405F8D:
	word64 rax_474 = fn0000000000410C40(rsi, (rcx_451 >>u 0x0000000000000001) * 0x0000000000000008, out rsp_123)
	word128 rdx_rax_475 = SEQ(rdx_460, rax_474)
	rcx = Mem0[0x000000000061A660:word64]
	branch rbp <=u rcx l0000000000405FE4
// DataOut: fs r11 r12b r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rcx:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405FA6:
	word64 rsi_500 = Mem0[0x000000000061B028:word64]
	rcx = rcx * 0x0000000000000008 + 0x00000008
	word64 rdx_505 = rsi_500 + (rcx * 0x0000000000000003) * 0x0000000000000008 + 0x0000000000000010
	word64 rsi_508 = rsi_500 + (rbp * 0x0000000000000003) * 0x0000000000000008
// DataOut: fs r11 r12b r9 rax rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rcx:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405FD0:
	Mem512[rdx_505 + 0x0000000000000000:word64] = rax_474
	rdx_505 = rdx_505 + 0x0000000000000018
	rax_474 = rax_474 + rcx
	rdx_rax_475 = SEQ(rdx_505, rax_474) (alias)
	rcx = rcx + 0x0000000000000008
	branch rdx_505 != rsi_508 l0000000000405FD0
// DataOut: fs r11 r12b r9 rax rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rcx:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000405FE4:
	Mem497[0x000000000061A660:word64] = rbp
	rax_116 = DPB(rax_474, 0x00000000, 0) (alias)
	rdx_rax_209 = DPB(rdx_rax_475, 0x00000000, 0) (alias)
	r8_357 = Mem497[0x000000000061B1B0:word64]
	rsi_369 = Mem497[0x000000000061B028:word64]
	branch rbx_184 != 0x0000000000000000 l00000000004060E0
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> rdi:<invalid> r10:<invalid> rsi:<invalid> eax:<invalid> rbp:<invalid> r8:0x00000000FFFFFFFF rcx:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060E0:
	rcx = Mem0[rsi_369 + 0x0000000000000010:word64]
	Mem375[rsi_369:byte] = 0x01
	word64 rdi_371 = rax_116 + 0x0000000000000001
	Mem377[rsi_369 + 0x0000000000000008:word64] = rdi_371 * 0x0000000000000003
	word64 rdx_379 = DPB(rdi_371 * 0x0000000000000003, 0x00000000, 0)
// DataOut: fs r11 r12b r8 r9 rax rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> r10:<invalid> rbp:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060F8:
	Mem384[rcx + rdx_379 * 0x0000000000000008:word64] = 0x0000000000000003
	rdx_379 = rdx_379 + 0x0000000000000001
	rdx_rax_209 = SEQ(rdx_379, rax_116) (alias)
	branch rdx_379 <=u rax_116 l00000000004060F8
// DataOut: fs r11 r12b r8 r9 rax rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> r10:<invalid> rbp:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406109:
	rsi_369 = rsi_369 + 0x0000000000000018
	branch rdi_371 == rbx_184 l0000000000406004
// DataOut: fs r11 r12b r8 r9 rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> r10:<invalid> rbp:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406116:
	rax_116 = rdi_371
// DataOut: fs r11 r12b r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> r10:<invalid> rbp:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406004:
	word64 rbp_212 = DPB(rbp, 0x00000000, 0)
	branch r8_357 == 0x0000000000000000 l000000000040612D
// DataOut: fs r11 r12b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> r10:<invalid> rbp:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040600F:
// DataOut: fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:edi rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:0x00000000 rdi:<invalid> rcx:<invalid> edx:<invalid> r10:<invalid> rbp:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406010:
	word64 rbp_219
	byte r12b_221
	word64 r9_220
	rax_116 = fn0000000000405D50(Mem0[Mem0[0x000000000061B1A8:word64] + rbp_212 * 0x0000000000000008:word64], r11, fs, out rsp_123, out rbp_219, out r9_220, out r12b_221)
	r11 = rax_116
	word64 r14_228 = Mem0[0x000000000061B1B0:word64]
	branch rbx_184 == 0x0000000000000000 l0000000000406120
// DataOut: fs r11 r12b r14 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rbp:<invalid> ebx:<invalid> rcx:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r13:<invalid> r9:<invalid> r10:<invalid> r8d:<invalid> dl:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r9d:<invalid> r15d:<invalid> r13d:<invalid> esp:<invalid> dx:<invalid> r14d:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406033:
	word64 r13_251 = Mem0[0x000000000061B0C8:word64]
	word64 rsi_252 = Mem0[0x000000000061B028:word64] + 0x0000000000000010
	rcx = DPB(rcx, 0x00000001, 0) (alias)
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rbp:<invalid> ebx:<invalid> rcx:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r13:<invalid> r9:<invalid> r10:<invalid> r8d:<invalid> dl:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r9d:<invalid> r15d:<invalid> r13d:<invalid> esp:<invalid> dx:<invalid> r14d:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060A7:
	word64 r9_273 = r9_220 - 0x0000000000000001
	branch Mem0[rsi_252:byte] == 0x00 l000000000040609A
	*r9Out = r9_273 - 0x0000000000000001
	branch Mem0[rsi_252:byte] == 0x00 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> ecx:<invalid> rbp:<invalid> ebx:<invalid> rcx:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> al:<invalid> r9:<invalid> cl:<invalid> r10:<invalid> r8d:<invalid> dl:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r9d:<invalid> r15d:<invalid> r13d:<invalid> esp:<invalid> dx:<invalid> r14d:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060B3:
	word64 rax_302
	word64 r10_301
	branch r12b_221 != 0x00 l0000000000406050
	branch r12b_221 != 0x00 l0000000000406050
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> ecx:<invalid> r9:<invalid> rbp:<invalid> ebx:<invalid> rcx:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r8d:<invalid> dl:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r9d:<invalid> r15d:<invalid> r13d:<invalid> esp:<invalid> dx:<invalid> r14d:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406050:
	word128 rdx_rax_343 = DPB(rdx_rax_209, 0x00000000, 64)
	rax_302 = (uint64) (SEQ((uint64) (rdx_rax_343 % rcx_566), rbp_219) /u (uint64) (rdx_rax_343 /u rcx_566))
	r10_301 = rax_302
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> ecx:<invalid> r9:<invalid> rbp:<invalid> ebx:<invalid> rcx:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r8d:<invalid> dl:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r9d:<invalid> r15d:<invalid> r13d:<invalid> esp:<invalid> dx:<invalid> r14d:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l00000000004060B8:
	word128 rdx_rax_334 = DPB(rdx_rax_209, 0x00000000, 64)
	rax_302 = (uint64) (rdx_rax_334 /u rcx_566)
	r10_301 = (uint64) (rdx_rax_334 % rcx_566)
// DataOut: fs r10 r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> ecx:<invalid> r9:<invalid> rbp:<invalid> ebx:<invalid> rcx:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r8d:<invalid> dl:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r9d:<invalid> r15d:<invalid> r13d:<invalid> esp:<invalid> dx:<invalid> r14d:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040606A:
	word64 rdx_308 = rax_116 + DPB(rax_302, r9_273 - 0x0000000000000001 != r10_301, 0) * 0x0000000000000002
	rax_116 = Mem0[rsi_252 + 0x0000000000000000:word64] + r10_301 * 0x0000000000000008
	rdx_rax_209 = SEQ(rdx_308, rax_116) (alias)
	r9_220 = Mem0[rcx_566:word64]
	*r9Out = r9_220
	branch rdx_308 <=u r9_220 l000000000040609A
// DataOut: fs r11 r12b r13 r14 r8 r9 rax rbp rbx rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> ecx:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> rbp:<invalid> ebx:<invalid> rcx:<invalid> edi:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r8d:<invalid> dl:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r9d:<invalid> r15d:<invalid> r13d:<invalid> esp:<invalid> dx:<invalid> r14d:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406086:
	Mem321[r14_228 + 0x0000000000000008:word64] = Mem0[r14_228 + 0x0000000000000008:word64] + (rdx_308 - r9_220)
	Mem322[rax_116:word64] = rdx_308
	Mem325[rsi_252:byte] = Mem322[r14_228 + 0x0000000000000008:word64] <u r13_251
// DataOut: fs r11 r12b r13 r14 r8 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> ecx:<invalid> r9:<invalid> edx:<invalid> r10:<invalid> al:<invalid> rbp:<invalid> ebx:<invalid> rcx:<invalid> edi:<invalid> esi:<invalid> cl:<invalid> r8d:<invalid> dl:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r9d:<invalid> r15d:<invalid> r13d:<invalid> esp:<invalid> dx:<invalid> r14d:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040609A:
	rsi_252 = rsi_252 + 0x0000000000000018
	rcx = rcx_566 + 0x0000000000000001
	word64 rcx_566 = rcx
	branch rbx_184 <=u rcx_566 l0000000000406120
// DataOut: fs r11 r12b r13 r14 r9 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> r13:<invalid> ecx:<invalid> r9:<invalid> rbp:<invalid> ebx:<invalid> rcx:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r8d:<invalid> dl:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r9d:<invalid> r15d:<invalid> r13d:<invalid> esp:<invalid> dx:<invalid> r14d:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406120:
	rbp_212 = rbp_219 + 0x0000000000000001
	branch rbp_219 + 0x0000000000000001 <u r14_228 l0000000000406010
// DataOut: fs r11 r12b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rbp:<invalid> ebx:<invalid> rcx:<invalid> edi:<invalid> edx:<invalid> esi:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r13:<invalid> r9:<invalid> r10:<invalid> r8d:<invalid> dl:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r9d:<invalid> r15d:<invalid> r13d:<invalid> esp:<invalid> dx:<invalid> r14d:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040612D:
	branch rbx_184 <=u 0x0000000000000001 l0000000000406164
	branch rbx_184 <=u 0x0000000000000001 l0000000000406164
// DataOut: fs r12b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rbp:<invalid> rcx:<invalid> edx:<invalid> ebx:<invalid> edi:<invalid> esi:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r13:<invalid> r9:<invalid> r10:<invalid> r8d:<invalid> dl:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r9d:<invalid> r15d:<invalid> r13d:<invalid> esp:<invalid> dx:<invalid> r14d:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406133:
	branch Mem0[Mem0[0x000000000061B028:word64] - 0x0000000000000018 + rbx_184 * 0x0000000000000018:byte] != 0x00 l0000000000406164
	word64 rax_167 = rbx_184 * 0x0000000000000003
	word64 rdx_165 = Mem0[0x000000000061B028:word64]
	rax_116 = rax_167 << 0x0000000000000003
	branch Mem0[rdx_165 - 0x0000000000000018 + (rax_167 << 0x0000000000000003):byte] != 0x00 l0000000000406164
// DataOut: fs r12b r9 rax rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rbp:<invalid> rcx:<invalid> edx:<invalid> ebx:<invalid> edi:<invalid> esi:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r13:<invalid> r9:<invalid> r10:<invalid> r8d:<invalid> dl:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r9d:<invalid> r15d:<invalid> r13d:<invalid> esp:<invalid> dx:<invalid> r14d:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406149:
	rax_116 = (rax_167 << 0x0000000000000003) + rdx_165 + rdx_165
// DataOut: fs r12b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rbp:<invalid> rcx:<invalid> edx:<invalid> ebx:<invalid> edi:<invalid> esi:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r13:<invalid> r9:<invalid> r10:<invalid> r8d:<invalid> dl:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r9d:<invalid> r15d:<invalid> r13d:<invalid> esp:<invalid> dx:<invalid> r14d:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040615A:
	word64 rbx_185 = rbx_184 - 0x0000000000000001
	branch rbx_185 != 0x0000000000000001 l0000000000406150
	rbx_184 = rbx_185 - 0x0000000000000001
	branch rbx_185 != 0x0000000000000002 l0000000000406150
// DataOut: fs r12b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rbp:<invalid> rcx:<invalid> edx:<invalid> ebx:<invalid> edi:<invalid> esi:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r13:<invalid> r9:<invalid> r10:<invalid> r8d:<invalid> dl:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r9d:<invalid> r15d:<invalid> r13d:<invalid> esp:<invalid> dx:<invalid> r14d:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406150:
	rax_116 = rax_116 - 0x0000000000000018
	branch Mem0[rax_116 - 0x0000000000000018:byte] != 0x00 l0000000000406164
// DataOut: fs r12b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rbp:<invalid> rcx:<invalid> edx:<invalid> ebx:<invalid> edi:<invalid> esi:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r13:<invalid> r9:<invalid> r10:<invalid> r8d:<invalid> dl:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r9d:<invalid> r15d:<invalid> r13d:<invalid> esp:<invalid> dx:<invalid> r14d:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406164:
	word64 rbx_134 = Mem0[rsp_123:word64]
	word64 rsp_138 = Mem0[rsp_123 + 0x0000000000000010:word64]
	return rax_116
	word64 rsp_152 = Mem0[rsp_138 + 0x0000000000000028:word64]
	word64 rbp_154
	*rbpOut = Mem0[rsp_152 + 0x0000000000000008:word64]
	word64 rsp_158
	*rspOut = rsp_152 + 0x0000000000000018
	return rbx_134
// DataOut: fs r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:<invalid> rdi:<invalid> r11:<invalid> r14:<invalid> rbp:<invalid> rcx:<invalid> edx:<invalid> ebx:<invalid> edi:<invalid> esi:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r13:<invalid> r9:<invalid> r10:<invalid> r8d:<invalid> dl:<invalid> sil:<invalid> r12:<invalid> r15:<invalid> r9d:<invalid> r15d:<invalid> r13d:<invalid> esp:<invalid> dx:<invalid> r14d:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

fn0000000000405ED0_exit:
// DataOut: r12b r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rdx:<invalid> rax:<invalid> r12d:<invalid> rbx:<invalid> eax:<invalid> r8:<invalid> rsi:<invalid> ebp:<invalid> rbp:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> r8d:<invalid> ecx:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> ebx:<invalid> edi:<invalid> r13:<invalid> r13d:<invalid> r10:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> r9d:<invalid> r14d:<invalid> dx:<invalid> r10d:<invalid> ax:<invalid> ah:<invalid> r11d:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi



word64 fn00000000004061B0(word32 ebx, word32 ebp, word64 rsi, word32 edi, word64 r8, word32 r11d, word64 r12, word64 r14, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx edi fs r11d r12 r14 r14d r8 rsi
// LiveOut: eax ebp ebx r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn00000000004061B0_entry:
// DataOut: ebp ebx edi fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004061B0:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	ebp = edi
	rbp = DPB(rbp, ebp, 0) (alias)
	rsp = fp - 0x0000000000000008
	dwLoc08 = rbx
	rsp = fp - 0x0000000000000030
	rax = Mem0[fs:0x00000028:word64]
	qwLoc18 = rax
	eax = 0x00000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000406248
// DataOut: ebp edi esp fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406248:
	rax = fn000000000040C9B0(rsi, edi, r8, r12, out rsp, out rbp, out r12)
	SZO = cond(rax & rax)
	Z = SZO (alias)
	C = false
	rdi = rax
	edi = (word32) rdi (alias)
	branch Test(EQ,Z) l00000000004061D1
// DataOut: ebp esp fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 ebp:edi rax:<invalid> eax:0x00000000 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406259:
	esi = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	edx = 0x00000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000406267
// DataOut: eax ebp ebx edx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rsi:<invalid> edx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406264_1:
	edx = eax
// DataOut: ebp ebx edx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406267:
// DataOut: ebp ebx edx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rbp:<invalid> rsi:<invalid> rbx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004061D1:
	r8d = ebp
	ecx = 0x0041375A
	edx = 0x00000015
	esi = 0x00000001
	rdi = rsp
	eax = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rax = DPB(rax, __sprintf_chk(rdi, rsi, rdx, rcx), 0)
	rbx = rsp
	rax = rsp
// DataOut: ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> rbx:<invalid> rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rsi:<invalid> edx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004061F3:
	ecx = Mem0[rax:word32]
	rax = rax + 0x0000000000000004
	edx = rcx + 0xFFFFFFFFFEFEFEFF
	ecx = ~ecx
	edx = edx & ecx
	edx = edx & 0x80808080
	SZO = cond(edx)
	C = false
	branch Test(EQ,Z) l00000000004061F3
// DataOut: dl eax ebp ebx edx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> r8d:<invalid> ecx:<invalid> edx:<invalid> esi:0x00000001 rdi:<invalid> rbx:<invalid> rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040620B:
	ecx = edx
	ecx = ecx >>u 0x00000010
	SZO = cond(edx & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000406219
// DataOut: cl dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rdi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> r8d:<invalid> ecx:<invalid> edx:<invalid> esi:0x00000001 rdi:<invalid> rbx:<invalid> rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406216_1:
	edx = ecx
// DataOut: dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rdi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> r8d:<invalid> ecx:<invalid> edx:<invalid> esi:0x00000001 rdi:<invalid> rbx:<invalid> rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406219:
	rcx = rax + 0x0000000000000002
	branch Test(NE,Z) l0000000000406221
// DataOut: dl eax ebp ebx ecx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> r8d:<invalid> ecx:<invalid> edx:<invalid> esi:0x00000001 rdi:<invalid> rbx:<invalid> rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040621D_2:
	rax = rcx
// DataOut: dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> r8d:<invalid> ecx:<invalid> edx:<invalid> esi:0x00000001 rdi:<invalid> rbx:<invalid> rcx:<invalid> rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406221:
	dl = dl + dl
	SCZO = cond(dl)
	rax = rax - 0x03 - C
	edx = eax
	edx = edx - ebx
	SCZO = cond(edx)
// DataOut: ebp ebx edx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> r8d:<invalid> ecx:<invalid> edx:<invalid> esi:0x00000001 rdi:<invalid> rbx:<invalid> rcx:<invalid> rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rsi:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040622B:
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rsi = rsi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rsi)
	C = false
	eax = edx
	branch Test(NE,Z) l0000000000406269
// DataOut: eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rbp:<invalid> rsi:<invalid> r8d:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> dl:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000406269:
	__stack_chk_fail()
	eax = Mem0[rdi + 0x00000000000000A0:word32]
	r8d = Mem0[r14 + 0x00000000000000A0:word32]
	r9 = rsi
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	sil = Test(EQ,Z)
	edx = edx | esi
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l00000000004062C8
// DataOut: al dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> rbp:<invalid> r8d:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> dl:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062C8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l00000000004062A1
// DataOut: al dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rbp:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062CC:
	eax = 0xFFFFFFFF
	return rax
// DataOut: eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rbp:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062A1:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l00000000004062B8
// DataOut: dl eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rbp rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rbp:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062A5:
	SZO = cond(dl & dl)
	C = false
	eax = 0x00000001
	branch Test(EQ,Z) l00000000004062B8
// DataOut: eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> sil:Test(EQ,Z) rbp:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062B8:
	rsi = Mem0[rdi:word64]
	rdi = Mem0[rcx:word64]
// DataOut: eax ebp ebx esi fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:Test(EQ,Z) rbp:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7D0:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	v30 = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = v30
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rbx = rdi
	rsp = rsp - 0x0000000000000010
	rax = DPB(rax, strcmp(rdi, rsi), 0)
	r13d = eax
	eax = 0x00000000
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: eax fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7F1:
	edx = (word32) Mem0[rbx:byte]
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l000000000040AAE7
// DataOut: dl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A7FC:
	ecx = (word32) Mem0[rbp + 0x0000000000000000:byte]
	al = 0x01
	SZO = cond(cl & cl)
	C = false
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A806:
	eax = (word32) dl
	esi = 0x0000002E
	esi = 0x0000002E - eax
	SCZO = cond(esi)
	branch Test(NE,Z) l000000000040A81D
// DataOut: cl dl esi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A812:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x00)
	eax = 0xFFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax esi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A81D:
	eax = (word32) cl
	edi = 0x0000002E
	edi = 0x0000002E - eax
	SCZO = cond(edi)
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl edi esi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A829:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x00)
	eax = 0x00000001
	branch Test(NE,Z) l000000000040A848
// DataOut: cl dl eax edi esi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A848:
	SZO = cond(esi & esi)
	C = false
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A84C:
	SCZO = cond(Mem0[rbx + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A85D
// DataOut: cl dl edi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A852:
	SCZO = cond(Mem0[rbx + 0x0000000000000002:byte] - 0x00)
	eax = 0xFFFFFFFF
	branch Test(EQ,Z) l000000000040A838
// DataOut: cl dl eax edi fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A85D:
	SZO = cond(edi & edi)
	C = false
	branch Test(EQ,Z) l000000000040A9A0
// DataOut: cl dl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9A0:
	SCZO = cond(Mem0[rbp + 0x0000000000000001:byte] - 0x2E)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9AA:
	SCZO = cond(Mem0[rbp + 0x0000000000000002:byte] - 0x00)
	branch Test(NE,Z) l000000000040A865
// DataOut: cl dl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A865:
	SCZO = cond(dl - 0x2E)
	branch Test(EQ,Z) l000000000040AAC0
// DataOut: cl fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAC0:
	rbx = rbx + 0x0000000000000001
	rbp = rbp + 0x0000000000000001
	SCZO = cond(cl - 0x2E)
	eax = 0xFFFFFFFF
	branch Test(EQ,Z) l000000000040A877
// DataOut: eax fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAD6:
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:0xFFFFFFFF rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:0xFF dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A86E:
	SCZO = cond(cl - 0x2E)
	branch Test(EQ,Z) l000000000040A9B4
// DataOut: fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A877:
	rdi = rsp
	Mem0[rsp:word64] = rbx
	Mem0[rsp + 0x0000000000000008:word64] = rbp
	rax = fn000000000040A730(rdi, r14d, out r9)
	rdi = rsp + 0x0000000000000008
	r14 = rax
	r12 = r14
	rax = fn000000000040A730(rdi, r14d, out r9)
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000040A8A0
// DataOut: eax fs r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A89B_1:
	r12 = Mem0[rsp:word64]
// DataOut: eax fs r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:0x00000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:0x00000000 r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8A0:
	r10 = rax
	r10 = r10 - rbp
	r12 = r12 - rbx
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040AAF1
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:0x00000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:0x00000000 r9d:<invalid> r14:<invalid> r12:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAF1:
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r10 = r10 - rbp
	SZO = cond(r14 & r14)
	C = false
	branch Test(EQ,Z) l000000000040A8BB
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:0x00000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB02:
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:0x00000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8B2:
	SCZO = cond(r12 - r10)
	branch Test(EQ,Z) l000000000040AA8B
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:0x00000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA8B:
	rdx = r12
	rsi = rbp
	rdi = rbx
	rax = DPB(rax, strncmp(rdi, rsi, rdx), 0)
	SZO = cond(eax & eax)
	C = false
	r10 = r12
	branch Test(NE,Z) l000000000040A8BB
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:0x00000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAA4:
	r12 = Mem0[rsp:word64]
	r10 = Mem0[rsp + 0x0000000000000008:word64]
	r12 = r12 - rbx
	r10 = r10 - rbp
	SCZO = cond(r10)
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:0x00000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8BB:
	ecx = 0x00000000
	r8d = 0x00000000
	SZO = cond(0x00000000)
	C = false
	ebx = 0xFFFFFFFF
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:0x00000000 r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8C6:
	SCZO = cond(r10 - rcx)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8CF:
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB07:
	SCZO = cond(r12 - r8)
	branch Test(UGT,CZ) l000000000040A971
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A971:
	SCZO = cond(r12 - r8)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A97A:
	esi = (word32) Mem0[rbx + r8:byte]
	eax = (int32) sil
	eax = eax - 0x00000030
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A8D8
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8D8:
	SCZO = cond(r10 - rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8E7:
	eax = (int32) r9b
	eax = eax - 0x00000030
	SCZO = cond(eax - 0x00000009)
	branch Test(ULE,CZ) l000000000040A9D4
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9D4:
	edx = (word32) Mem0[rbx + r8:byte]
	SCZO = cond(dl - 0x30)
	branch Test(EQ,Z) l000000000040A9D0
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9D0:
	r8 = r8 + 0x0000000000000001
	SCZO = cond(r8)
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9DE:
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9EA:
	SCZO = cond(r9b - 0x30)
	branch Test(EQ,Z) l000000000040A9E0
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9E0:
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9F0:
	eax = (int32) dl
	eax = eax - 0x00000030
	SCZO = cond(eax - 0x00000009)
	eax = (int32) r9b
	branch Test(UGT,CZ) l000000000040AADB
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AADB:
	eax = eax - 0x00000030
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A8C6
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:(int32) r9b rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA03:
	eax = eax - 0x00000030
	SCZO = cond(eax - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9d rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:(int32) r9b rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA0B:
	eax = 0x00000000
	SZO = cond(0x00000000)
	C = false
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9d rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:(int32) r9b - 0x00000030 rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA22:
	SZO = cond(eax & eax)
	branch Test(NE,Z) l000000000040AA2C
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l000000000040AA2C
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9d rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA26:
	eax = (int32) dl
	eax = eax - r9d
	eax = (int32) dl
	eax = eax - r9d
	SCZO = cond(eax)
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA2C:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	edx = (word32) Mem0[rbx + r8:byte]
	esi = (int32) dl
	esi = esi - 0x00000030
	SCZO = cond(esi - 0x00000009)
	branch Test(ULE,CZ) l000000000040AA10
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> r8:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA10:
	r9d = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	esi = (int32) r9b
	esi = esi - 0x00000030
	SCZO = cond(esi - 0x00000009)
	branch Test(UGT,CZ) l000000000040A9B4
// DataOut: dl eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9d rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF r8:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A9B4:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	eax = 0x00000001
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r10:<invalid> ebx:0xFFFFFFFF r8:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA44:
	edx = (int32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
	edx = edx - 0x00000030
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040AAE7
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF r8:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AAE7:
	eax = 0xFFFFFFFF
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r10:<invalid> ebx:0xFFFFFFFF r8:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA55:
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040A8C6
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF r8:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA5D:
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF r8:<invalid> rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A8F7:
	SCZO = cond(r12 - r8)
	branch Test(EQ,Z) l000000000040AB18
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:(int32) r9b - 0x00000030 rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB18:
	eax = 0x00000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:(int32) r9b - 0x00000030 rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A900:
	edx = (word32) Mem0[rbx + r8:byte]
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:(int32) r9b - 0x00000030 rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A98F:
	edx = esi
// DataOut: dl fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A905:
	esi = (word32) dl
	eax = 0x00000000
	edi = rsi - 0x0000000000000030
	SCZO = cond(edi - 0x00000009)
	branch Test(ULE,CZ) l000000000040A925
// DataOut: dl eax esi fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A912:
	eax = esi
	eax = eax & 0xFFFFFFDF
	eax = eax - 0x00000041
	SCZO = cond(eax - 0x00000019)
	branch Test(UGT,CZ) l000000000040AA68
// DataOut: dl esi fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA68:
	esi = esi + 0x00000100
	SCZO = cond(dl - 0x7E)
	eax = esi
	branch Test(NE,Z) l000000000040AA77
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA73_1:
	eax = r11d
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA77:
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A923:
	eax = esi
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A925:
	SCZO = cond(r10 - rcx)
	branch Test(EQ,Z) l000000000040AB1F
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB1F:
	edi = 0x00000000
	SZO = cond(0x00000000)
	C = false
// DataOut: eax edi fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A92E:
	r9d = (word32) Mem0[rbp + 0x0000000000000000 + rcx:byte]
// DataOut: eax fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A934:
	esi = (word32) r9b
	edi = 0x00000000
	edx = rsi - 0x0000000000000030
	SCZO = cond(edx - 0x00000009)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A942:
	edx = esi
	edi = esi
	edx = edx & 0xFFFFFFDF
	edx = edx - 0x00000041
	SCZO = cond(edx - 0x00000019)
	branch Test(ULE,CZ) l000000000040A961
// DataOut: eax edi esi fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 r9b rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:(word32) r9b edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A951:
	esi = esi + 0x00000100
	SCZO = cond(r9b - 0x7E)
	edi = esi
	branch Test(NE,Z) l000000000040A961
// DataOut: eax edi fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:(word32) r9b edx:((word32) r9b & 0xFFFFFFDF) - 0x00000041 rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:(word32) r9b rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A95D_1:
	edi = r11d
// DataOut: eax edi fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:(word32) r9b + 0x00000100 edx:((word32) r9b & 0xFFFFFFDF) - 0x00000041 rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:(word32) r9b + 0x00000100 rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A961:
	SCZO = cond(eax - edi)
	branch Test(NE,Z) l000000000040AA80
// DataOut: eax edi fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA80:
	eax = eax - edi
	SCZO = cond(eax)
	branch Test(NE,Z) l000000000040AA86
// DataOut: eax fs r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA82_1:
	eax = r13d
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AA86:
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A969:
	r8 = r8 + 0x0000000000000001
	rcx = rcx + 0x0000000000000001
	SCZO = cond(rcx)
// DataOut: fs r10 r11d r12 r12b r13d r14 r14d r15 r15d r8 r9 rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040AB10:
	eax = r13d
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rdx:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r12:<invalid> r10:<invalid> ebx:0xFFFFFFFF rcx:<invalid> esp:<invalid> r15d:<invalid> r13:<invalid> r8:<invalid> r14d:<invalid> r12d:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A834:
// DataOut: eax fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:0x00000001 rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:0x01 dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> edi:<invalid> rcx:<invalid> rdx:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040A838:
	rsp = rsp + 0x0000000000000010
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:<invalid> al:<invalid> dl:<invalid> sil:<invalid> rbp:<invalid> rbx:<invalid> r13d:<invalid> ecx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r10:<invalid> ebx:0xFFFFFFFF r8:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004062AE:
	return rax
// DataOut: eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:0x00000001 rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> r8d:<invalid> r9:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> sil:Test(EQ,Z) rbp:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040623D:
	rsp = rsp + 0x0000000000000028
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: eax ebp ebx fs r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> rbp:<invalid> r8d:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> dl:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn00000000004061B0_exit:
	use ebx (=> ebxOut)
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r12 (=> r12Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax ebp ebx r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rax:<invalid> eax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> rsi:<invalid> rbx:<invalid> rbp:<invalid> r8d:<invalid> ecx:<invalid> rcx:<invalid> dl:<invalid> r9:<invalid> cl:<invalid> al:<invalid> sil:<invalid> r13d:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> r15d:<invalid> r13:<invalid> r14d:<invalid> r12d:<invalid> r10d:<invalid> r9d:<invalid> r14:<invalid> r10:<invalid> ebx:<invalid> r8:<invalid> -84(fp):<invalid> -76(fp):<invalid> -68(fp):rbx -64(fp):rbp -60(fp):fp - 0x0000000000000038 -56(fp):rbp -52(fp):<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



void fn0000000000406400()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ch cl cx dh di dil dl dx ecx edi edx esi rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406400_entry:
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406400:
	branch Mem0[0x000000000061A408:word64] == 0x0000000000000000 l0000000000406418
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406418:
	fn0000000000406440(DPB(rdi, 0x0061A3E0, 0))
	fn0000000000406440(DPB(rdi, 0x0061A410, 0))
	word64 rdi_19 = DPB(rdi, 0x0061A3F0, 0)
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000406439_thunk_fn0000000000406440:
	fn0000000000406440(rdi_19)
	return
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:0x0061A3F0 rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid>

l000000000040640A:
	word64 rdi_11 = DPB(rdi, 0x0061A400, 0)
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040640F_thunk_fn0000000000406440:
	fn0000000000406440(rdi_11)
	return
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:0x0061A400

fn0000000000406400_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid>



void fn0000000000406440(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ch cl cx dh di dil dl dx ecx edi edx esi rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406440_entry:
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406440:
	branch Mem0[0x000000000061B128:byte] == 0x00 l0000000000406470
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406470:
	Mem24[0x000000000061B128:byte] = 0x01
	fn0000000000406400()
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018
// LocalsOut: fp(64)

l000000000040644D:
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 rdi:rdi edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> -16(fp):rdi

l00000000004026C0:
	word64 rsp_16
	byte SCZO_17
	byte Z_18
	word64 rsi_19
	word64 rdi_20
	word64 rcx_21
	word32 edx_22
	call Mem0[0x000000000061A2A8:word32] (retsize: 4; depth: 4)
		uses: edx_12,qwLoc10_8,rcx_11,rdi_13,rsi_10,rsp_14,SCZO_15,Z_5
		defs: edx_22,rcx_21,rdi_20,rsi_19,rsp_16,SCZO_17,Z_18
	return
// DataOut: ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rcx:<invalid> edx:0x00000001 rdi:<invalid> edi:<invalid> -16(fp):rdi

fn0000000000406440_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> edi:<invalid> -16(fp):rdi



word64 fn0000000000406490()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi esp rax rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000406490_entry:
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406490:
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004064EF:
	branch Mem0[0x000000000061B038:word32] != 0x00000000 l0000000000406503
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064F9:
	branch Mem0[0x000000000061B034:word32] == 0x00000000 l0000000000406538
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000406538:
	return fp + 0x0000000000000004
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx

fn0000000000406490_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 eax:<invalid> rbx:rbx edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx

l0000000000406503:
	branch Mem0[0x000000000061B128:byte] == 0x00 l00000000004064A0
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040650C:
	fn0000000000406440(DPB(rdi, 0x0061A3E0, 0))
	fn0000000000406440(DPB(rdi, 0x0061A3F0, 0))
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064A0:
	word64 rsp_37
	word64 rbx_38
	byte SCZO_39
	word32 eax_40
	byte SZO_41
	byte C_42
	byte Z_43
	word32 edi_44
	word64 rdi_45
	word64 rdx_46
	word32 esi_47
	word32 ebx_48
	word32 edx_49
	word64 rsi_50
	word64 rax_51
	call fflush_unlocked (retsize: 8; depth: 140)
		uses: C_31,dwLoc04_4,eax_33,ebx_18,edi_22,edx_17,esi_19,rax_15,rbx_24,rdi_36,rdx_20,rsi_16,rsp_25,SCZO_34,SZO_32,Z_35
		defs: C_42,eax_40,ebx_48,edi_44,edx_49,esi_47,rax_51,rbx_38,rdi_45,rdx_46,rsi_50,rsp_37,SCZO_39,SZO_41,Z_43
	word64 rsp_57
	word64 rbx_58
	byte SCZO_59
	word32 eax_60
	byte SZO_61
	byte C_62
	byte Z_63
	word32 edi_64
	word64 rdi_65
	word64 rdx_66
	word32 esi_67
	word32 ebx_68
	word32 edx_69
	word64 rsi_70
	word64 rax_71
	call sigprocmask (retsize: 8; depth: 140)
		uses: C_54,dwLoc04_4,eax_40,ebx_48,edi_52,edx_49,esi_56,rax_51,rbx_38,rdi_45,rdx_55,rsi_50,rsp_37,SCZO_39,SZO_53,Z_43
		defs: C_62,eax_60,ebx_68,edi_64,edx_69,esi_67,rax_71,rbx_58,rdi_65,rdx_66,rsi_70,rsp_57,SCZO_59,SZO_61,Z_63
	word32 ebx_72 = Mem0[0x000000000061B038:word32]
	word32 eax_74 = Mem0[0x000000000061B034:word32]
	branch eax_74 == 0x00000000 l0000000000406528
// DataOut: eax ebx fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000406528:
	signal(DPB(rdi_65, ebx_72, 0), DPB(rsi_70, 0x00000000, 0))
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064CB:
	Mem119[0x000000000061B034:word32] = eax_74 - 0x00000001
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l00000000004064D9:
	word64 rsp_81
	word64 rbx_82
	byte SCZO_83
	word32 eax_84
	byte SZO_85
	byte C_86
	byte Z_87
	word32 edi_88
	word64 rdi_89
	word64 rdx_90
	word32 esi_91
	word32 ebx_92
	word32 edx_93
	word64 rsi_94
	word64 rax_95
	call raise (retsize: 8; depth: 140)
		uses: C_78,dwLoc04_4,eax_74,ebx_79,edi_80,edx_69,esi_67,rax_75,rbx_73,rdi_65,rdx_66,rsi_70,rsp_57,SCZO_59,SZO_76,Z_77
		defs: C_86,eax_84,ebx_92,edi_88,edx_93,esi_91,rax_95,rbx_82,rdi_89,rdx_90,rsi_94,rsp_81,SCZO_83,SZO_85,Z_87
	word64 rsp_101
	word64 rbx_102
	byte SCZO_103
	word32 eax_104
	byte SZO_105
	byte C_106
	byte Z_107
	word32 edi_108
	word64 rdx_110
	word32 esi_111
	word32 ebx_112
	word32 edx_113
	word64 rsi_114
	word64 rax_115
	call sigprocmask (retsize: 8; depth: 140)
		uses: C_98,dwLoc04_4,eax_84,ebx_92,edi_100,edx_96,esi_91,rax_95,rbx_82,rdi_89,rdx_90,rsi_99,rsp_81,SCZO_83,SZO_97,Z_87
		defs: C_106,eax_104,ebx_112,edi_108,edx_113,esi_111,rax_115,rbx_102,rdi_109,rdx_110,rsi_114,rsp_101,SCZO_103,SZO_105,Z_107
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0xFFFFFFFFFFFFFF7C eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> ebx:<invalid> rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)



word64 fn0000000000406540(word64 rcx, word64 rdx, byte sil, word64 rdi, word64 r11, word32 r14d, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r14d r15 rcx rdi rdx sil
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rax
fn0000000000406540_entry:
// DataOut: fs r11 r14d r15 rcx rdi rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406540:
	word32 r15d_485
	byte r15b_482
	word32 edx_466
	word32 r14d_486
	word64 rbp_170 = rdi
	word64 rbx_24 = rdx
	word32 ebx_169 = (word32) rdx
	word64 rdx_32 = Mem0[rdi:word64]
	word64 r12_165 = Mem0[r15 + 0x0000000000000008:word64]
	branch sil == 0x00 l00000000004069BD
// DataOut: ebx fs r11 r12 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004069BD:
	branch Mem0[0x000000000061B129:byte] != 0x00 l00000000004069D8
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069D8:
	branch Mem0[0x000000000061B198:byte] == 0x00 l0000000000406A08
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A08:
	r14d = (word32) Mem0[rcx + 0x00000000000000B1:byte]
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069E1:
	branch Mem0[rdi + 0x00000000000000B1:byte] == 0x00 l0000000000406A20
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A20:
	r14d = 0x00000000
// DataOut: ebx fs r11 r13 r14d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406A10:
	r15d_485 = Mem0[rcx + 0x0000000000000028:word32]
	r15b_482 = (byte) r15d_485 (alias)
// DataOut: ebx fs r11 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069EA:
	r15d_485 = Mem0[rcx + 0x00000000000000A4:word32]
	r15b_482 = (byte) r15d_485 (alias)
// DataOut: ebx fs r11 r14d r15b r15d rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069F7:
	r14d_486 = r14d ^ 0x00000001
	r14b = (byte) r14d_486 (alias)
	r12_165 = rdx_32
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r15d:<invalid> esi:0x00000001 r14d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069C6:
	r12_165 = rdx_32
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406567:
	branch Mem0[0x000000000061B129:byte] != 0x00 l0000000000406580
// DataOut: ebx fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406580:
	r14d_486 = (word32) Mem0[rcx + 0x00000000000000B1:byte]
	r15d_485 = Mem0[rcx + 0x00000000000000A4:word32]
	r14b = (byte) r14d_486 (alias)
	r15b_482 = (byte) r15d_485 (alias)
	branch r14b != 0x00 l00000000004065B0
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406594:
	rax = fn0000000000404CD0(0x0000000C)
	edx_466 = 0x0000000C
	rdx_32 = DPB(rdx_32, 0x0000000C, 0) (alias)
	branch (byte) rax != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:(word32) Mem0[rcx + 0x00000000000000B1:byte] r15d:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065AB:
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:(word32) Mem0[rcx + 0x00000000000000B1:byte] r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065B0:
	word64 rax_506
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l0000000000406628
// DataOut: ebx fs r11 r12 r14b r14d r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406628:
	word32 eax_636 = r15d_485 & 0x0000F000
	branch eax_636 == 0x00008000 l0000000000406868
// DataOut: eax ebx fs r11 r12 r14b r15b r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406868:
	branch (r15d_485 & 0x00000800) == 0x00000000 l00000000004068B8
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406871:
	branch (byte) fn0000000000404CD0(0x00000010) == 0x00 l00000000004068B8
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068B8:
	branch (r15d_485 & 0x00000400) == 0x00000000 l000000000040693B
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068C1:
	branch (byte) fn0000000000404CD0(0x00000011) == 0x00 l000000000040693B
// DataOut: ebx fs r11 r12 r15d rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040693B:
	rax_506 = fn0000000000404CD0(0x00000015)
	branch (byte) rax_506 == 0x00 l000000000040695C
// DataOut: ebx fs r11 r12 r15d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406949:
	branch Mem0[rdi + 0x00000000000000B8:byte] == 0x00 l000000000040695C
// DataOut: ebx fs r11 r12 r15d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040695C:
	branch (r15d_485 & 0x00000049) == 0x00000000 l000000000040697A
// DataOut: ebx fs r11 r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406962:
	rax_506 = fn0000000000404CD0(0x0000000E)
	branch (byte) rax_506 == 0x00 l000000000040697A
// DataOut: ebx fs r11 r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040697A:
	branch Mem0[rdi + 0x0000000000000020:word64] <=u 0x0000000000000001 l00000000004065CF
// DataOut: ebx fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406985:
	rax_506 = fn0000000000404CD0(0x00000016)
	branch (byte) rax_506 == 0x00 l00000000004065CF
// DataOut: ebx fs r11 r12 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406997:
	edx_466 = 0x00000016
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406970:
	edx_466 = 0x0000000E
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406952:
	edx_466 = 0x00000015
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068CF:
	edx_466 = 0x00000011
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040687F:
	edx_466 = 0x00000010
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x0000000C esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040663B:
	branch eax_636 == 0x00004000 l00000000004068E0
// DataOut: eax ebx fs r11 r12 r14b r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068E0:
	branch (r15d_485 & 0x00000202) == 0x00000202 l00000000004069A1
// DataOut: ebx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069A1:
	edx_466 = 0x00000014
	branch (byte) fn0000000000404CD0(0x00000014) != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004069B8:
// DataOut: ebx fs r11 r12 r15b r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x00000014 esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068F3:
	branch (r15b_482 & 0x02) == 0x00 l0000000000406910
// DataOut: ebx fs r11 r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> rcx:<invalid> esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068F9:
	edx_466 = 0x00000013
	branch (byte) fn0000000000404CD0(0x00000013) != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 r15d rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> rcx:<invalid> esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406910:
	edx_466 = 0x00000006
	branch (r15d_485 & 0x00000200) == 0x00000000 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406922:
	edx_466 = (0x00000000 - ((byte) fn0000000000404CD0(0x00000012) <u 0x01) & 0xFFFFFFF4) + 0x00000012
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid> edx:0x00000006 esi:0x00000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406646:
	branch eax_636 == 0x0000A000 l0000000000406859
// DataOut: eax ebx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406859:
	edx_466 = 0x00000007
// DataOut: ebx edx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406651:
	edx_466 = 0x00000008
	branch eax_636 == 0x00001000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040665D:
	edx_466 = 0x00000009 (alias)
	branch eax_636 == 0x0000C000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:0x00000008 edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406666:
	edx_466 = 0x0000000A (alias)
	branch eax_636 == 0x00006000 l00000000004066B0
// DataOut: eax ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> dl:0x09 edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040666F:
	word64 rdx_668 = DPB(rdx_32, eax_636 != 0x00002000, 0)
	edx_466 = rdx_668 + 0x000000000000000B + rdx_668
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> dl:0x0A edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065B9:
	word32 eax_616 = Mem0[rdi + 0x00000000000000A0:word32]
	rax_506 = DPB(rax, eax_616, 0) (alias)
	edx_466 = Mem0[rax_506 * 0x00000004 + 0x00412C60:word32]
	branch edx_466 != 0x00000005 l0000000000406680
// DataOut: ebx edx fs r11 r12 r14d rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:0x0000000C esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406680:
	r14b = (byte) (r14d_486 & DPB(eax_616, edx_466 == 0x00000007, 0)) (alias)
// DataOut: ebx edx fs r11 r12 r14b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406689:
	branch r14b == 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> al:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040668E:
	edx_466 = 0x0000000D
	branch Mem0[0x000000000061B198:byte] != 0x00 l00000000004066B0
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> al:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040669C:
	edx_466 = (0x00000000 - ((byte) fn0000000000404CD0(0x0000000D) <u 0x01) & 0xFFFFFFFA) + 0x0000000D
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:0x0000000D al:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065CF:
	word64 rax_509 = DPB(rax_506, strlen(r12_165), 0)
	rbp_170 = Mem0[0x000000000061B120:word64]
	rdi = r12_165
	r14b = (byte) strlen(r12_165) (alias)
	word64 r15_518 = r12_165 + rax_509
	branch rbp_170 == 0x0000000000000000 l0000000000406619
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065EA:
	rax_545 = rax_509
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> edi:<invalid> rsi:<invalid> al:<invalid> esi:0x00000001 ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065F0:
	word64 rax_545
	word64 rdx_550 = Mem0[rbp_170:word64]
	branch rax_509 <u rdx_550 l0000000000406610
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> edi:<invalid> rsi:<invalid> al:<invalid> esi:<invalid> ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004065F9:
	word64 rsi_567 = Mem0[rbp_170 + 0x0000000000000008:word64]
	rdi = r15_518 - rdx_550
	rax_545 = DPB(rax_545, strncmp(rdi, rsi_567, rdx_550), 0)
	branch strncmp(rdi, rsi_567, rdx_550) == 0x00000000 l00000000004068A0
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> edi:<invalid> rsi:<invalid> al:<invalid> esi:<invalid> ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068A0:
	branch rbp_170 == 0x0000000000000000 l0000000000406619
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> esi:<invalid> ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004068A9:
	rbp_170 = rbp_170 + 0x0000000000000010
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> esi:<invalid> ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406610:
	rbp_170 = Mem0[rbp_170 + 0x0000000000000020:word64]
	branch rbp_170 != 0x0000000000000000 l00000000004065F0
// DataOut: eax ebx fs r11 r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> esi:<invalid> ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406619:
	edx_466 = 0x00000005
// DataOut: ebx edx fs r11 r12 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> eax:<invalid> edx:<invalid> rdi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> edi:<invalid> rsi:<invalid> al:<invalid> esi:<invalid> ecx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066B0:
	rbp_170 = (DPB(rbp_170, edx_466, 0) << 0x0000000000000004) + 6398944
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> ecx:<invalid> rcx:<invalid> dl:<invalid> esi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066C0:
	word64 rdi_433 = DPB(rdi, 0x00000004, 0)
	branch Mem0[rbp_170 + 0x0000000000000008:word64] == 0x0000000000000000 l0000000000406890
// DataOut: ebx edi fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> ecx:<invalid> rcx:<invalid> dl:<invalid> esi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406890:
	fn0000000000404CD0(0x00000004)
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:0x00000004 eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> ecx:<invalid> rcx:<invalid> dl:<invalid> esi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066D0:
	branch (byte) fn0000000000404CD0(0x00000004) != 0x00 l0000000000406840
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:0x00000004 eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> ecx:<invalid> rcx:<invalid> dl:<invalid> esi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406840:
	fn0000000000406440(DPB(rdi, 0x0061A3E0, 0))
	rdi_433 = DPB(rdi, 0x0061A3F0, 0) (alias)
	fn0000000000406440(rdi_433)
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> esi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066DD:
	fn0000000000406440(DPB(rdi_433, 0x0061A3E0, 0))
	fn0000000000406440(rbp_170)
	fn0000000000406440(DPB(rbp_170, 0x0061A3F0, 0))
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> esi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406570:
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:rdi rbx:rdx rdx:<invalid> r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004066FF:
	word64 rdi_174
	word64 rbp_200
	word64 rdx_194
	word64 r13_189
	branch rdx == 0x0000000000000000 l00000000004067D8
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> esi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067D8:
	rdx_194 = Mem0[0x000000000061B0E8:word64]
	rdi_174 = Mem0[0x000000000061A610:word64]
	word64 rbx_390
	word64 rsp_391
	word64 rbp_392
	word64 rsi_393
	word32 edi_394
	word64 r8_395
	word64 r9_396
	word64 r11_397
	word64 r12_398
	word64 r14_400
	word64 r15_401
	word64 rax_402 = fn00000000004052D0(rdx_194, ebx_169, rbp_170, r12_165, rdi_174, r11, fs, out rbx_390, out rsp_391, out rbp_392, out rsi_393, out edi_394, out r8_395, out r9_396, out r11_397, out r12_398, out r13_189, out r14_400, out r15_401)
	Mem406[0x000000000061B018:word64] = Mem0[0x000000000061B018:word64] + rax_402
	rbp_200 = rax_402
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> esi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406708:
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406732
// DataOut: ebx fs r11 r12 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> esi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406711:
	word64 rax_293 = Mem0[rdx + 0x0000000000000018:word64]
	branch Mem0[rdx + 0x0000000000000020:word64] <u rax_293 + 0x0000000000000008 l0000000000406820
// DataOut: ebx fs r11 r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> esi:<invalid> rax:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406820:
	word64 rsp_344
	word64 rdi_345
	word64 rsi_346
	word64 r13_348
	word64 rcx_349
	word64 rdx_351
	byte SCZO_352
	byte sil_353
	byte SZO_354
	byte C_355
	word64 r15_357
	byte Z_358
	word32 r14d_359
	word64 rax_360
	word32 r15d_361
	word32 esi_362
	word32 ecx_363
	word32 eax_364
	word32 edx_365
	word64 r14_366
	word32 ebp_368
	word32 edi_369
	byte al_370
	byte dl_371
	byte r15b_372
	byte CZ_373
	word64 r8_376
	word64 r9_377
	call _obstack_newchunk (retsize: 8; depth: 40)
		uses: al_295,C_299,CZ_39,dl_49,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_15,dwLoc14_17,dwLoc18_22,eax_294,ebp_56,ebx_25,ecx,edi_60,edx_50,esi_342,fs,r11,r12_46,r13_12,r14_42,r14b_41,r14d_44,r15_45,r15b_40,r15d_43,r8,r9,rax_293,rbp_55,rbx_24,rcx,rdi_343,rdx_296,rsi_57,rsp_26,SCZO_298,sil,SZO_61,Z_155
		defs: al_370,C_355,CZ_373,dl_371,eax_364,ebp_368,ebx_378,ecx_363,edi_369,edx_365,esi_362,fs_375,r11_374,r12_356,r13_348,r14_366,r14b_367,r14d_359,r15_357,r15b_372,r15d_361,r8_376,r9_377,rax_360,rbp_347,rbx_350,rcx_349,rdi_345,rdx_351,rsi_346,rsp_344,SCZO_352,sil_353,SZO_354,Z_358
	rax_293 = Mem0[rbx_24 + 0x0000000000000018:word64]
// DataOut: ebx fs r11 r12 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> rax:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rdi:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> esi:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406723:
	Mem338[rax_293:word64] = Mem0[0x000000000061B018:word64]
	Mem340[rbx_24 + 0x0000000000000018:word64] = Mem338[rbx_24 + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: ebx fs r11 r12 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> rax:<invalid> esi:<invalid> rdi:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406732:
	rdi_174 = Mem0[0x000000000061A610:word64]
	word64 rsp_181
	word64 rbp_182
	word64 rsi_183
	word32 edi_184
	word64 r8_185
	word64 r9_186
	word64 r11_187
	word64 r12_188
	word64 r14_190
	word64 r15_191
	word64 rbx_180
	word64 rax_192 = fn00000000004052D0(Mem0[0x000000000061B0E8:word64], ebx_169, rbp_170, r12_165, rdi_174, r11, fs, out rbx_180, out rsp_181, out rbp_182, out rsi_183, out edi_184, out r8_185, out r9_186, out r11_187, out r12_188, out r13_189, out r14_190, out r15_191)
	rdx_194 = rax_192 + Mem0[0x000000000061B018:word64]
	Mem202[0x000000000061B018:word64] = rdx_194
	rbp_200 = rax_192
	branch Mem0[0x000000000061B130:byte] == 0x00 l0000000000406781
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r13:rcx rbp:<invalid> rbx:rdx rdx:<invalid> r12:<invalid> r14d:<invalid> rax:<invalid> esi:<invalid> rdi:<invalid> r15d:<invalid> edi:<invalid> eax:<invalid> rsi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> dl:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406767:
	word64 rax_203 = Mem202[rbx_180 + 0x0000000000000018:word64]
	branch Mem202[rbx_180 + 0x0000000000000020:word64] <u rax_203 + 0x0000000000000008 l0000000000406800
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14d:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14:<invalid> esi:<invalid> rcx:<invalid> eax:<invalid> r12d:<invalid> edx:<invalid> r15:<invalid> ebx:<invalid> r15d:<invalid> edi:<invalid> al:<invalid> ebp:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406800:
	word64 rsp_251
	word64 rsi_253
	word64 rcx_256
	word64 rdx_258
	byte SCZO_259
	byte sil_260
	byte SZO_261
	byte C_262
	word64 r12_263
	word64 r15_264
	byte Z_265
	word32 r14d_266
	word64 rax_267
	word32 r15d_268
	word32 esi_269
	word32 ecx_270
	word32 eax_271
	word32 edx_272
	word64 r14_273
	word32 ebp_275
	word32 edi_276
	byte al_277
	byte dl_278
	byte r15b_279
	byte CZ_280
	word64 r11_281
	selector fs_282
	word64 r8_283
	word64 r9_284
	word32 ebx_285
	call _obstack_newchunk (retsize: 8; depth: 8)
		uses: al_206,C_209,CZ_160,dl_197,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_15,dwLoc14_17,dwLoc18_22,eax_205,ebp_201,ebx_169,ecx_176,edi_184,edx_196,esi_249,fs_158,r11_187,r12_188,r13_189,r14_190,r14b_162,r14d_164,r15_191,r15b_161,r15d_163,r8_185,r9_186,rax_203,rbp_200,rbx_180,rcx_207,rdi_250,rdx_194,rsi_183,rsp_181,SCZO_208,sil_171,SZO_177,Z_199
		defs: al_277,C_262,CZ_280,dl_278,eax_271,ebp_275,ebx_285,ecx_270,edi_276,edx_272,esi_269,fs_282,r11_281,r12_263,r13_255,r14_273,r14b_274,r14d_266,r15_264,r15b_279,r15d_268,r8_283,r9_284,rax_267,rbp_254,rbx_257,rcx_256,rdi_252,rdx_258,rsi_253,rsp_251,SCZO_259,sil_260,SZO_261,Z_265
	rax_203 = Mem202[rbx_180 + 0x0000000000000018:word64]
	rdx_194 = Mem202[0x000000000061B018:word64]
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14d:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> r8:<invalid> r14:<invalid> esi:<invalid> eax:<invalid> r12d:<invalid> edx:<invalid> r15:<invalid> ebx:<invalid> r15d:<invalid> edi:<invalid> al:<invalid> ebp:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406779:
	Mem245[rax_203:word64] = rdx_194
	Mem247[rbx_180 + 0x0000000000000018:word64] = Mem245[rbx_180 + 0x0000000000000018:word64] + 0x0000000000000008
// DataOut: fs r11 r11d r12 r13 r14 r14b r14d r15 r15b r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14d:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> esi:<invalid> r8:<invalid> r14:<invalid> eax:<invalid> r12d:<invalid> edx:<invalid> r15:<invalid> ebx:<invalid> r15d:<invalid> edi:<invalid> al:<invalid> ebp:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406781:
	word64 rsp_96 = fn0000000000406490()
	branch r14b != 0x00 l00000000004067A0
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14d:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rax:<invalid> r8:<invalid> r14:<invalid> esi:<invalid> rcx:<invalid> eax:<invalid> r15d:<invalid> edi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> r12d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067A0:
	fn0000000000406400()
	word64 rcx_136 = Mem0[0x000000000061B0C8:word64]
	word128 rdx_rax_139 = SEQ(rdx_194, r13_189)
	branch (uint64) (rdx_rax_139 /u rcx_136) == (uint64) (SEQ((uint64) (rdx_rax_139 % rcx_136), (rbp_200 - 0x0000000000000001) + r13_189) /u rcx_136) l000000000040678B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14d:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> eax:<invalid> rax:<invalid> r8:<invalid> r14:<invalid> esi:<invalid> rcx:<invalid> r15d:<invalid> edi:<invalid> al:<invalid> edx:<invalid> ebp:<invalid> r12d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004067C6:
	fn0000000000406440(DPB(rdi_174, 0x0061A550, 0))
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14d:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> eax:<invalid> edi:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r14:<invalid> esi:<invalid> r15d:<invalid> al:<invalid> ebp:<invalid> r12d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040678B:
	word64 rsp_113 = Mem0[rsp_96 + 0x0000000000000018:word64]
	word64 rbp_115
	*rbpOut = Mem0[rsp_113 + 0x0000000000000008:word64]
	word64 rsi_118
	*rsiOut = Mem0[rsp_113 + 0x0000000000000010:word64]
	word64 rdi_122
	*rdiOut = Mem0[rsp_113 + 0x0000000000000018:word64]
	word64 rsp_124
	*rspOut = rsp_113 + 0x0000000000000020
	return Mem0[rsp_96 + 0x0000000000000008:word64]
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14d:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> eax:<invalid> edi:<invalid> rcx:<invalid> edx:<invalid> rax:<invalid> r8:<invalid> r14:<invalid> esi:<invalid> r15d:<invalid> al:<invalid> ebp:<invalid> r12d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000406540_exit:
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> rbp:<invalid> rbx:<invalid> rdx:<invalid> r12:<invalid> r14d:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> eax:<invalid> rax:<invalid> edi:<invalid> rcx:<invalid> edx:<invalid> r8:<invalid> r14:<invalid> esi:<invalid> r15d:<invalid> al:<invalid> ebp:<invalid> r12d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> ax:<invalid> r11:<invalid> r9:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000406A30()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn0000000000406A30_entry:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A30:
	branch Mem0[0x000000000061B129:byte] == 0x00 l0000000000406A4F
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A39:
	branch (byte) fn0000000000404CD0(0x00000004) != 0x00 l0000000000406A58
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A58:
	fn0000000000406440(DPB(rdi, 0x0061A3E0, 0))
	fn0000000000406440(DPB(rdi, 0x0061A420, 0))
	word64 rdi_43 = DPB(rdi, 0x0061A3F0, 0)
// DataOut: fs r11 r14d r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:<invalid> eax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid>

l0000000000406A75_thunk_fn0000000000406440:
	fn0000000000406440(rdi_43)
	return
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:0x0061A3F0 eax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> rcx:<invalid> edx:<invalid> ecx:<invalid>

l0000000000406A4B:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 edi:<invalid> eax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid>

l0000000000406A4F:
	return
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> al:<invalid> ecx:<invalid> rcx:<invalid>

fn0000000000406A30_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> eax:<invalid> rdx:<invalid> al:<invalid> ecx:<invalid>



word64 fn0000000000406A80(word64 rdx, word64 rsi, word64 rdi, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11d r14 r15b rdi rdx rsi
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000406A80_entry:
// DataOut: edx fs r11d r14 r15b rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406A80:
	word64 r12_14 = rdi
	word32 ebp_19 = (word32) rdx
	word64 rbx_203 = rsi
	word64 rsp_195 = fp - 0x0000000000000124
	word64 rax_135 = DPB(Mem0[fs:0x00000028:word64], 0x00000000, 0)
	branch Mem0[0x000000000061A748:word64] == 0x0000000000000000 l0000000000406ADB
// DataOut: bpl ebp fs r11d r12 r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406AB8:
	rsi = DPB(rsi, 0x00413766, 0) (alias)
	rax_135 = strstr(rsi, rsi)
	r14 = rax_135
	branch rax_135 == 0x0000000000000000 l0000000000406ADB
// DataOut: bpl ebp fs r11d r12 r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13d:ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> eax:0x00000000 -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi
// LocalsOut: fp(64)

l0000000000406ACD:
	rax_135 = DPB(rax_135, strlen(rsi), 0)
	branch rax_135 <=u 0x0000000000000065 l0000000000406B20
// DataOut: bpl ebp fs r11d r12 r14 r15b rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13d:ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> eax:<invalid> esi:0x00413766 rdi:rsi r14:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi
// LocalsOut: fp(64)

l0000000000406B20:
	word64 rsp_159
	word64 rsi_160
	word64 rbp_161
	word32 r13d_162
	word32 ecx_163
	word64 r12_164
	word64 rdi_165
	word64 rdx_166
	word64 rbx_167
	byte SCZO_168
	word64 rax_169
	selector fs_170
	word32 eax_171
	byte SZO_172
	byte C_173
	byte Z_174
	word32 esi_175
	word64 r14_176
	byte CZ_177
	word32 r8d_178
	word64 rcx_179
	word32 r9d_180
	word32 r11d_181
	byte r15b_182
	word64 r8_183
	word64 r9_184
	word64 r11_185
	word64 r13_186
	word64 r15_187
	word32 ebp_188
	call __mempcpy_chk (retsize: 8; depth: 300)
		uses: C_139,CZ_145,dwLoc04_4,dwLoc08_7,dwLoc0C_12,dwLoc10_16,dwLoc14_22,eax_143,ebp_19,ecx_148,esi_132,fs,qwLoc1C_28,r11,r11d,r12_14,r13,r13d_9,r14_140,r15,r15b,r8,r8d,r9,r9d,rax_142,rbp_18,rbx_152,rcx,rdi_151,rdx_149,rsi_147,rsp_24,SCZO_150,SZO_137,Z_138
		defs: C_173,CZ_177,eax_171,ebp_188,ecx_163,esi_175,fs_170,r11_185,r11d_181,r12_164,r13_186,r13d_162,r14_176,r15_187,r15b_182,r8_183,r8d_178,r9_184,r9d_180,rax_169,rbp_161,rbx_167,rcx_179,rdi_165,rdx_166,rsi_160,rsp_159,SCZO_168,SZO_172,Z_174
	word64 rsi_196
	word64 rbp_197
	word32 r13d_198
	word32 ecx_199
	word64 rdi_201
	word64 rdx_202
	byte SCZO_204
	word64 rax_205
	word32 eax_207
	byte SZO_208
	byte C_209
	byte Z_210
	word32 esi_211
	byte CZ_213
	word32 r8d_214
	word64 rcx_215
	word32 r9d_216
	word64 r8_219
	word64 r9_220
	word64 r11_221
	word64 r13_222
	word64 r15_223
	call stpcpy (retsize: 8; depth: 300)
		uses: C_173,CZ_177,dwLoc04_4,dwLoc08_7,dwLoc0C_12,dwLoc10_16,dwLoc14_22,eax_171,ebp_188,ecx_163,esi_175,fs_170,qwLoc1C_28,r11_185,r11d_181,r12_164,r13_186,r13d_162,r14_176,r15_187,r15b_182,r8_183,r8d_178,r9_184,r9d_180,rax_169,rbp_161,rbx_167,rcx_189,rdi_190,rdx_192,rsi_194,rsp_159,SCZO_193,SZO_172,Z_174
		defs: C_209,CZ_213,eax_207,ebp_224,ecx_199,esi_211,fs_206,r11_221,r11d_217,r12_200,r13_222,r13d_198,r14_212,r15_223,r15b_218,r8_219,r8d_214,r9_220,r9d_216,rax_205,rbp_197,rbx_203,rcx_215,rdi_201,rdx_202,rsi_196,rsp_195,SCZO_204,SZO_208,Z_210
	rsi = rsi_196 + 0x0000000000000002
	rax_135 = strcpy(rax_205, rsi_196 + 0x0000000000000002)
// DataOut: bpl ebp fs r11d r12 r14 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13d:ecx r12:rdi rbp:rdx rbx:rsi rax:<invalid> eax:<invalid> esi:0x00413766 rdi:rsi r14:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406ADB:
	word64 rbp_67
	word32 esi_68
	word64 rdi_69
	word64 r8_70
	word64 r9_71
	word64 r11_72
	word64 r12_73
	word64 r13_74
	word64 r14_75
	word64 r15_76
	word64 rax_77 = fn0000000000410600(rax_135, rbx_203, ebp_19, DPB(rsi, 0x000003E9, 0), r12_14, 0x00000000, r11d, r14, r15b, fs, out rbp_67, out esi_68, out rdi_69, out r8_70, out r9_71, out r11_72, out r12_73, out r13_74, out r14_75, out r15_76)
	branch (Mem0[rsp_195 + 0x0000000000000108:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l0000000000406B66
// DataOut: edi esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000124 r13d:ecx r12:rdi rbp:rdx rbx:<invalid> rax:<invalid> eax:<invalid> esi:<invalid> rdi:<invalid> r14:<invalid> rdx:<invalid> rsi:<invalid> ecx:<invalid> rcx:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B66:
	__stack_chk_fail()
// DataOut: edi esi fs r11 r11d r14 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> esi:<invalid> rdi:<invalid> r14:<invalid> r8d:0x00000000 rcx:<invalid> r9d:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> r10:<invalid> r13:<invalid> ax:<invalid> r11d:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B6B_thunk_fn0000000000406B70:
	word64 rsp_121
	word64 rbp_122
	word64 r8_123
	word64 r9_124
	word64 r11_125
	word64 r12_126
	word64 r13_127
	word64 r14_128
	word64 r15_129
	return fn0000000000406B70(rbp_67, esi_68, rdi_69, r11_72, r14_75, fs, out rsp_121, out rbp_122, out r8_123, out r9_124, out r11_125, out r12_126, out r13_127, out r14_128, out r15_129)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> esi:<invalid> rdi:<invalid> r14:<invalid> r8d:0x00000000 rcx:<invalid> r9d:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> r10:<invalid> r13:<invalid> ax:<invalid> r11d:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l0000000000406B07:
	word64 rsp_114 = Mem0[rsp_195 + 0x0000000000000120:word64]
	word64 rbp_116
	*rbpOut = Mem0[rsp_114 + 0x0000000000000008:word64]
	word64 rsp_120
	*rspOut = rsp_114 + 0x0000000000000018
	return rax_77
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> esi:<invalid> rdi:<invalid> r14:<invalid> r8d:0x00000000 rcx:<invalid> r9d:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> r10:<invalid> r13:<invalid> ax:<invalid> r11d:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

fn0000000000406A80_exit:
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13d:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> esi:<invalid> rdi:<invalid> r14:<invalid> r8d:<invalid> rcx:<invalid> r9d:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> edi:<invalid> ecx:<invalid> r10:<invalid> r13:<invalid> ax:<invalid> ebp:<invalid> dil:<invalid> r15:<invalid> r14d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:<invalid> cl:<invalid> r11d:<invalid> esp:<invalid> r8b:<invalid> r11:<invalid> r10d:<invalid> ah:<invalid> sil:<invalid> -28(fp):<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi



word64 fn0000000000406B70(word64 rbp, word32 esi, word64 rdi, word64 r11, word64 r14, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi fs r11 r11d r14 rbp rdi
// LiveOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000406B70_entry:
// DataOut: edi esi fs r11 r11d r14 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000406B70:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v6 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x00000000000012D0
	rax = Mem0[fs:0x00000028:word64]
	qwLoc28 = rax
	eax = 0x00000000
	SCZO = cond(Mem0[rdi + 0x00000000000000B0:byte] - 0x00)
	Z = SCZO (alias)
	branch Test(EQ,Z) l0000000000406E00
// DataOut: fs r11 r11d r14 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E00:
	eax = Mem0[rdi + 0x00000000000000A0:word32]
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	r13 = fp - 0x0000000000001290
	ecx = 0x00003F3F
	eax = (word32) Mem0[rax + 0x0000000000413728:byte]
	bLoc1290 = al
	r8 = 0x000000003F3F3F3F
	qwLoc128F = rax
	Mem0[rbp + 0x0000000000000009:word16] = cx
	bLoc1285 = 0x00
	branch Test(EQ,Z) l0000000000406BC2
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:0x00000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BA4:
	r13 = fp - 0x0000000000001290
	rdi = rdi + 0x0000000000000010
	rsi = fp - 0x0000000000001290
	fn000000000040A600(rsi, rdi)
	SCZO = cond(Mem0[0x000000000061B17C:byte] - 0x00)
	branch Test(NE,Z) l0000000000406E41
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:0x00000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E41:
	eax = Mem0[rbx + 0x00000000000000B4:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000407138
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407138:
	bLoc1286 = 0x2E
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E50:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406BC7
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E59:
	eax = Mem0[0x000000000061B14C:word32]
	bLoc1286 = 0x2B
	SCZO = cond(eax - 0x00000001)
	branch Test(NE,Z) l0000000000406BD6
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E6D:
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):0x2B -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BC2:
	bLoc1286 = 0x00
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BC7:
	eax = Mem0[0x000000000061B14C:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000406E70
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E70:
	rax = Mem0[rbx + 0x0000000000000080:word64]
	rdx = Mem0[rbx + 0x0000000000000078:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BD6:
	branch Test(ULT,C) l0000000000407040
// DataOut: eax fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407040:
	rax = Mem0[rbx + 0x0000000000000070:word64]
	rdx = Mem0[rbx + 0x0000000000000068:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BDC:
	SCZO = cond(eax - 0x00000002)
	branch Test(NE,Z) l0000000000406E90
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406E90:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406BE5:
	rax = Mem0[rbx + 0x0000000000000060:word64]
	rdx = Mem0[rbx + 0x0000000000000058:word64]
	qwLoc1298 = rax
	qwLoc12A0 = rdx
// DataOut: fs r11 r11d r13 r13d r14 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F edi:<invalid> edx:<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406BF7:
	SCZO = cond(Mem0[0x000000000061B114:byte] - 0x00)
	r12 = fp - 0x0000000000000E70
	rbp = fp - 0x0000000000000E70
	branch Test(NE,Z) l0000000000407060
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F rdx:<invalid> edi:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407060:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	ecx = 0x00413764
	branch Test(EQ,Z) l0000000000407085
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00003F3F r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edi:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l000000000040706F:
	rdi = Mem0[rbx + 0x0000000000000018:word64]
	SZO = cond(rdi & rdi)
	C = false
	branch Test(EQ,Z) l0000000000407085
// DataOut: dil fs r11 r11d r13 r13d r14 rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:rdi + 0x0000000000000010 rsi:fp - 0x0000000000001290 ecx:0x00413764 r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edi:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407078:
	rsi = fp - 0x0000000000001260
	rax = fn000000000040CD70(rsi, rdi, out r14)
	r9 = rax
// DataOut: fs r11 r11d r13 r13d r14 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:fp - 0x0000000000001290 ecx:0x00413764 r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 edi:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407085:
	r12 = fp - 0x0000000000000E70
	r8d = Mem0[0x000000000061B178:word32]
	edx = 0x00000E3B
	ecx = 0x00413779
	esi = 0x00000001
	eax = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rdi = fp - 0x0000000000000E70
	rax = DPB(rax, __sprintf_chk(fp - 0x0000000000000E70, rsi, rdx, rcx), 0)
	rdx = fp - 0x0000000000000E70
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> ecx:0x00413764 r8:0x000000003F3F3F3F rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> edx:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070B0:
	ecx = Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	ecx = ~ecx
	eax = eax & ecx
	eax = eax & 0x80808080
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l00000000004070B0
// DataOut: al eax fs r11 r11d r12 r13 r13d r14 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r8d:<invalid> edx:<invalid> esi:0x00000001 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070C7:
	ecx = eax
	rbp = rdx + 0x0000000000000002
	ecx = ecx >>u 0x00000010
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l00000000004070D8
// DataOut: al cl fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:fp - 0x0000000000000E70 r8d:<invalid> edx:<invalid> esi:0x00000001 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D5_1:
	eax = ecx
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r8d:<invalid> edx:<invalid> esi:0x00000001 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D8:
	branch Test(EQ,Z) l00000000004070DC
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r8d:<invalid> edx:<invalid> esi:0x00000001 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070D8_2:
	rbp = rdx
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r8d:<invalid> edx:<invalid> esi:0x00000001 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l00000000004070DC:
	al = al + al
	SCZO = cond(al)
	rbp = rbp - 0x03 - C
	SCZO = cond(rbp)
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:fp - 0x0000000000000E70 rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r8d:<invalid> edx:<invalid> esi:0x00000001 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406C0F:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406C8F
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r8d:<invalid> edx:<invalid> esi:0x00000001 al:al * 0x02 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000406C18:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	esi = 0x00413764
	branch Test(NE,Z) l0000000000407288
// DataOut: fs r11 r11d r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> r8d:<invalid> edx:<invalid> esi:0x00000001 al:al * 0x02 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(32) Local -0008(32)

l0000000000407288:
	rdi = Mem0[rbx + 0x0000000000000050:word64]
	r8 = Mem0[0x000000000061B138:word64]
	rsi = fp - 0x0000000000001260
	edx = Mem0[0x000000000061B140:word32]
	ecx = 0x00000200
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r14d, out r15)
	r14 = rax
// DataOut: fs r11 r11d r14 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000012D0 rbx:rdi rax:<invalid> eax:<invalid> r13:fp - 0x0000000000001290 rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:fp - 0x0000000000000E70 rbp:<invalid> esi:0x00413764 r8d:<invalid> edx:<invalid> al:al * 0x02 rcx:<invalid> r14:0x00000000CCCCCCCD edi:<invalid> r9:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C2B:
	r15d = Mem0[0x000000000061B174:word32]
	esi = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rdi = r14
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	r15d = r15d - eax
	SZO = cond(r15d & r15d)
	C = false
	eax = r15d
	branch Test(LE,SZO) l0000000000406F50
// DataOut: eax fs r11 r11d r12 r13 r13d r14 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:rdi rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> edx:<invalid> r14:<invalid> r8d:<invalid> al:<invalid> rcx:<invalid> edi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C4B:
	eax = eax - 0x00000001
	SCZO = cond(eax)
	edx = eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> r14:<invalid> rcx:<invalid> r8d:<invalid> al:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C60:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406C60
// DataOut: al fs r11 r11d r12 r13 r13d r14 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> rcx:<invalid> r14:<invalid> r8d:<invalid> al:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C6D:
	ax = (int16) al
	rdx = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> rcx:<invalid> r14:<invalid> r8d:<invalid> al:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C74:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	rbp = rdx + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(NE,Z) l0000000000406F50
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> r14:<invalid> rcx:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406F50:
	rdx = rbp
// DataOut: fs r11 r11d r12 r13 r13d r14 rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> r14:<invalid> rcx:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C8C:
	Mem0[rdx:byte] = 0x20
// DataOut: fs r11 r11d r12 r13 r13d r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> r14:<invalid> rcx:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> r9:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406C8F:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	eax = 0x00413764
	branch Test(NE,Z) l0000000000407120
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> r14:<invalid> rcx:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> edi:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000407120:
	rdi = Mem0[rbx + 0x0000000000000020:word64]
	rsi = rsp + 0x0000000000000070
	rax = fn000000000040CD70(rsi, rdi, out r14)
// DataOut: fs r11 r11d r12 r13 r13d r14 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:0x00413764 r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> r14:<invalid> rcx:<invalid> ax:0x3764 r8d:<invalid> al:0x64 edi:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> ah:0x37 dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406CA1:
	r9d = Mem0[0x000000000061B170:word32]
	rdi = rbp
	Mem0[rsp:word64] = rax
	r8 = r13
	ecx = 0x00413769
	rdx = 0xFFFFFFFFFFFFFFFF
	esi = 0x00000001
	eax = 0x00000000
	rax = DPB(rax, __sprintf_chk(rdi, rsi, 0xFFFFFFFFFFFFFFFF, rcx), 0)
	rdi = rbp
	rax = DPB(rax, strlen(rdi), 0)
	rbp = rbp + rax
	SCZO = cond(Mem0[0x000000000061B130:byte] - 0x00)
	branch Test(NE,Z) l00000000004070F0
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:0x00413764 r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> rcx:<invalid> r14:<invalid> edi:<invalid> esi:<invalid> r15d:<invalid> ebp:<invalid> edx:<invalid> ax:0x3764 r8d:<invalid> al:0x64 r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r10d:<invalid> cl:<invalid> ah:0x37 dl:<invalid> sil:<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l00000000004070F0:
	rcx = Mem0[0x000000000061A610:word64]
	edx = 0x00000002
	esi = 0x00000001
	edi = 0x00413771
	call fwrite_unlocked (retsize: 8; depth: 8)
	v34 = Mem0[0x000000000061B018:word64] + 0x0000000000000002
	Mem0[0x000000000061B018:word64] = v34
	SCZO = cond(v34)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:0x00413769 r8:<invalid> rdx:0xFFFFFFFFFFFFFFFF r12:<invalid> rbp:<invalid> r9d:<invalid> esi:0x00000001 rcx:<invalid> r14:<invalid> edi:<invalid> r15d:<invalid> ebp:<invalid> edx:0xFFFFFFFF ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:0x69 ah:<invalid> dl:0xFF sil:0x01 -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406CE2:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406CEB:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000406D08
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406CF4:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407148
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000407148:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000407155:
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406D01:
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406D08:
	rsi = Mem0[0x000000000061A610:word64]
	rdi = r12
	rbp = rbp - r12
	SCZO = cond(rbp)
	call fputs_unlocked (retsize: 8; depth: 8)
	v32 = Mem0[0x000000000061B018:word64] + rbp
	Mem0[0x000000000061B018:word64] = v32
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000407248
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000407248:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	edi = Mem0[rbx + 0x000000000000002C:word32]
	esi = Mem0[0x000000000061B168:word32]
	rax = fn00000000004057B0(dl, rsi, edi, r8, r12, fs, out rsp, out rbp, out r12, out r13d, out r14)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> edi:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> ebx:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406D2E:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000407210
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000407210:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	eax = Mem0[rbx + 0x0000000000000030:word32]
	edi = 0x00413764
	edx = Mem0[0x000000000061B164:word32]
	esi = eax
	branch Test(EQ,Z) l0000000000407238
// DataOut: eax edx fs r11 r11d r12 r8 r9 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000407229:
	edi = 0x00000000
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	branch Test(EQ,Z) l0000000000407415
// DataOut: eax edx fs r11 r11d r12 r8 r9 rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edi:0x00413764 edx:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000407415:
	edi = eax
	Mem0[rsp + 0x0000000000000018:word64] = rsi
	Mem0[rsp + 0x0000000000000010:word32] = edx
	rax = fn000000000040CB40(rax, rsi, edi, r8, r12, out rbx, out rsp, out rbp, out r12)
	rsi = Mem0[rsp + 0x0000000000000018:word64]
	rdi = rax
	edx = Mem0[rsp + 0x0000000000000010:word32]
// DataOut: edx fs r11 r11d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edi:0x00000000 edx:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000407238:
	rax = fn0000000000405700(rax, edx, rdi, fs, out rsp, out rbp, out r12, out r13d, out r14)
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edi:<invalid> edx:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406D3B:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l00000000004071D0
// DataOut: fs r11 r11d r12 r13d r14 r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l00000000004071D0:
	edx = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	edi = Mem0[rbx + 0x000000000000002C:word32]
	rbp = r12
	esi = Mem0[0x000000000061B160:word32]
	rax = fn00000000004057B0(dl, rsi, edi, r8, r12, fs, out rsp, out rbp, out r12, out r13d, out r14)
	rsp = rsp + 0xFFFFFFFFFFFFFFF8
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406D58
// DataOut: fs r11 r11d r12 r13d r14 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406D48:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	rbp = r12
	branch Test(NE,Z) l00000000004071F5
// DataOut: fs r11 r11d r12 r13d r14 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l00000000004071F5:
	rdi = Mem0[rbx + 0x00000000000000A8:word64]
	edx = Mem0[0x000000000061B16C:word32]
	esi = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rax = fn0000000000405700(rax, edx, rdi, fs, out rsp, out rbp, out r12, out r13d, out r14)
	rdi = Mem0[rbx + 0x00000000000000A8:word64]
	edx = Mem0[0x000000000061B16C:word32]
	esi = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rax = fn0000000000405700(rax, edx, rdi, fs, out rsp, out rbp, out r12, out r13d, out r14)
// DataOut: fs r11 r11d r12 r13d r14 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406D58:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F60
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F60
// DataOut: fs r11 r11d r12 r13d r14 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406F60:
	esi = 0x00413764
// DataOut: fs r11 r11d r14 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406D65:
	eax = Mem0[rbx + 0x0000000000000028:word32]
	eax = eax & 0x0000B000
	SCZO = cond(eax - 0x00002000)
	branch Test(EQ,Z) l00000000004072B0
	eax = Mem0[rbx + 0x0000000000000028:word32]
	eax = eax & 0x0000B000
	SCZO = cond(eax - 0x00002000)
	branch Test(EQ,Z) l00000000004072B0
// DataOut: fs r11 r11d r12 r13d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l00000000004072B0:
	rax = Mem0[rbx + 0x0000000000000038:word64]
	rsi = rsp + 0x0000000000000070
	ebp = 0xFFFFFFFE
	r13d = r13d - Mem0[0x000000000061B15C:word32]
	r13d = r13d - Mem0[0x000000000061B158:word32]
	rdi = rax
	eax = (word32) al
	r13d = r13d + Mem0[0x000000000061B154:word32]
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	edi = edi | eax
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdx = Mem0[rbx + 0x0000000000000038:word64]
	r15 = rax
	rsi = rsp + 0x0000000000000050
	r14d = Mem0[0x000000000061B158:word32]
	rdi = rdx
	rdx = rdx >>u 0x0000000000000008
	eax = edx
	rdi = rdi >>u 0x0000000000000020
	eax = eax & 0x00000FFF
	edi = edi & 0xFFFFF000
	edi = edi | eax
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	r8d = 0x00000000
	SZO = cond(r13d & r13d)
	C = false
	r9 = rax
	branch Test(SG,S) l0000000000407328
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15b r8d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407324_1:
	r8d = r13d
// DataOut: fs r11 r11d r12 r14 r14d r15 r15b r8d r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:0xFFFFFFFE r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> esp:<invalid> r15d:<invalid> ax:<invalid> al:<invalid> r12d:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407328:
	r8d = r8d + Mem0[0x000000000061B15C:word32]
	Mem0[rsp + 0x0000000000000008:word64] = r15
	Mem0[rsp:word32] = r14d
	ecx = 0x00413774
	rdx = 0xFFFFFFFFFFFFFFFF
	esi = 0x00000001
	rdi = rbp
	eax = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rax = DPB(rax, __sprintf_chk(rdi, rsi, 0xFFFFFFFFFFFFFFFF, rcx), 0)
	rax = (int64) Mem0[0x000000000061B154:word32]
	r13 = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:0xFFFFFFFE r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> ebx:<invalid> esp:<invalid> r15d:<invalid> ax:<invalid> al:<invalid> r12d:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406D78:
	rdi = Mem0[rbx + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rsp + 0x0000000000000070
	edx = Mem0[0x000000000061B134:word32]
	ecx = 0x00000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r14d, out r15)
	r14 = rax
	rdi = Mem0[rbx + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rsp + 0x0000000000000070
	edx = Mem0[0x000000000061B134:word32]
	ecx = 0x00000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r14d, out r15)
	r14 = rax
// DataOut: fs r11 r11d r14 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r14:<invalid> r15d:<invalid> ax:<invalid> r8d:<invalid> al:<invalid> r9:<invalid> r14d:<invalid> r12d:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000406D9B:
	r13d = Mem0[0x000000000061B154:word32]
	esi = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rdi = r14
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	r13d = r13d - eax
	SZO = cond(r13d & r13d)
	eax = r13d
	branch Test(LE,SZO) l0000000000406DDC
	r13d = Mem0[0x000000000061B154:word32]
	esi = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rdi = r14
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	r13d = r13d - eax
	SZO = cond(r13d & r13d)
	C = false
	eax = r13d
	branch Test(LE,SZO) l0000000000406DDC
// DataOut: eax fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> r14:<invalid> edi:<invalid> ebx:<invalid> rcx:<invalid> ebp:<invalid> esp:<invalid> r15d:<invalid> r15:<invalid> r11:<invalid> r14d:<invalid> r10:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> ax:<invalid> r8d:<invalid> cl:<invalid> r12d:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DB7:
	eax = eax - 0x00000001
	edx = eax
	rdx = rbp
	eax = eax - 0x00000001
	SCZO = cond(eax)
	edx = eax
	rcx = rbp + 0x0000000000000001 + rdx
	rdx = rbp
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> r14:<invalid> r13d:<invalid> ebp:<invalid> r15d:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> ebx:<invalid> esp:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> ax:<invalid> r8d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DC8:
	rdx = rdx + 0x0000000000000001
	Mem0[rdx - 0x0000000000000001:byte] = 0x20
	SCZO = cond(rdx - rcx)
	branch Test(NE,Z) l0000000000406DC8
// DataOut: al fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> r14:<invalid> r13d:<invalid> ebp:<invalid> r15d:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> ebx:<invalid> esp:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> ax:<invalid> r8d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DD5:
	ax = (int16) al
	rbp = rbp + 0x0000000000000001 + rax
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> r14:<invalid> r13d:<invalid> ebp:<invalid> r15d:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> ebx:<invalid> esp:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> ax:<invalid> r8d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DDC:
	r14 = r14 + 0x0000000000000001
	eax = (word32) Mem0[rsi - 0x0000000000000001:byte]
	r13 = r13 + 0x0000000000000001
	SZO = cond(al & al)
	C = false
	Mem0[rbp - 0x0000000000000001:byte] = al
	branch Test(EQ,Z) l0000000000406E98
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> r14:<invalid> r13d:<invalid> ebp:<invalid> r15d:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> r8d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406E98:
	Mem0[rbp + 0x0000000000000000:byte] = 0x20
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> r14:<invalid> r13d:<invalid> ebp:<invalid> r15d:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> r8d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406E9C:
	rdi = rsp + 0x0000000000000030
	rax = localtime(rdi)
	Mem0[rbp + 0x0000000000000000:byte] = 0x01
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F80
// DataOut: eax fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EB8:
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000407364
// DataOut: eax fs r11 r11d r12 r13 r14 r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EC1:
	rdx = Mem0[0x000000000061B180:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rdi = Mem0[0x000000000061B188:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	SCZO = cond(rsi - rdx)
	branch Test(GT,SZO) l0000000000407380
// DataOut: eax ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EE2:
	branch Test(LT,SO) l0000000000406EEC
// DataOut: eax ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EE4:
	SCZO = cond(edi - ecx)
	branch Test(SG,S) l0000000000407380
// DataOut: eax ecx edi fs r11d r13 r14 r15b rax rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407380:
	edi = 0x0061B180
	Mem0[rsp + 0x0000000000000010:word64] = rax
	rsp = fn000000000040AB30(eax, rdi)
	rdx = Mem0[0x000000000061B180:word64]
	r8 = Mem0[0x000000000061B188:word64]
	rsi = Mem0[rsp + 0x0000000000000030:word64]
	rcx = Mem0[rsp + 0x0000000000000038:word64]
	rax = Mem0[rsp + 0x0000000000000010:word64]
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EEC:
	r8 = rdi
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EEF:
	rdi = rdx + 0xFFFFFFFFFF0F3D54
	SCZO = cond(rdi - rsi)
	branch Test(GE,SO) l0000000000407268
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407268:
	edi = 0x00000000
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407273:
	SCZO = cond(r8d - ecx)
	branch Test(NS,S) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:0x00 edi:0x00000000 rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040727C:
// DataOut: ecx fs r11d r13 r14 r15b r8d rax rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:0x00 edi:0x00000000 rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406EFF:
	SCZO = cond(rdx - rsi)
	edi = 0x00000001
	branch Test(GT,SZO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F09:
	dil = 0x00
	branch Test(LT,SO) l0000000000406F20
// DataOut: ecx edi fs r11d r13 r14 r15b r8d rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:0x01 edi:0x00000001 rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F0E:
	edi = ecx
	edi = edi - r8d
	edi = edi >>u 0x0000001F
	SCZO = cond(edi)
// DataOut: edi fs r11d r13 r14 r15b rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:0x00 edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F20:
	rdi = (int64) edi
	rdx = rax
	rsi = Mem0[0x0061A3D0 + rdi * 0x0000000000000008:word64]
	rdi = r13
	rax = fn0000000000406A80(rdx, rsi, rdi, r11d, r14, r15b, fs, out rsp, out rbp, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000406F6B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F6B:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x00)
	branch Test(EQ,Z) l0000000000406F3B
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r10:<invalid> ax:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r11:<invalid> al:<invalid> dx:<invalid> dl:<invalid> cl:<invalid> r11d:<invalid> r10d:<invalid> ah:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F72:
	SCZO = cond(Mem0[rbx + 0x00000000000000B0:byte] - 0x00)
	branch Test(NE,Z) l0000000000407364
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r10:<invalid> ax:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r11:<invalid> al:<invalid> dx:<invalid> dl:<invalid> cl:<invalid> r11d:<invalid> r10d:<invalid> ah:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407364:
	rdi = Mem0[rsp + 0x0000000000000030:word64]
	rsi = rsp + 0x0000000000000050
	rax = fn000000000040CCD0(rsi, rdi, out r14)
	r9 = rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F7F:
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r10:<invalid> ax:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r11:<invalid> al:<invalid> dx:<invalid> dl:<invalid> cl:<invalid> r11d:<invalid> r10d:<invalid> ah:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F80:
	ecx = 0x00413764
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F86:
	r8d = Mem0[0x000000000061A3C4:word32]
	SZO = cond(r8d & r8d)
	C = false
	branch Test(SG,S) l00000000004073B1
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073B1:
	rdi = rsp + 0x0000000000000028
	Mem0[rsp + 0x0000000000000010:word64] = r9
	Mem0[rsp + 0x0000000000000028:word64] = 0x0000000000000000
	rax = localtime(rdi)
	SZO = cond(rax & rax)
	C = false
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(EQ,Z) l0000000000407403
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073D3:
	rsi = Mem0[0x000000000061A3D0:word64]
	rdi = rsp + 0x0000000000000070
	ecx = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rdx = rax
	rax = fn0000000000406A80(rdx, rsi, rdi, r11d, r14, r15b, fs, out rsp, out rbp, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	SZO = cond(rax & rax)
	C = false
	r8d = Mem0[0x000000000061A3C4:word32]
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	branch Test(NE,Z) l0000000000407436
// DataOut: fs r11 r12 r13 r14d r15 r8d r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407436:
	rdi = rsp + 0x0000000000000070
	edx = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rsi = rax
	Mem0[rsp + 0x0000000000000010:word64] = r9
	rax = fn000000000040D240(edx, rsi, rdi, fs, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	r9 = Mem0[rsp + 0x0000000000000010:word64]
	Mem0[0x000000000061A3C4:word32] = eax
	r8d = eax
// DataOut: fs r11 r12 r13 r14d r15 r8d rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r10:<invalid> ax:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r11:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> ah:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004073FA:
	SZO = cond(r8d & r8d)
	C = false
	branch Test(NS,S) l0000000000406F96
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r10:<invalid> ax:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r11:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> ah:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407403:
	Mem0[0x000000000061A3C4:word32] = 0x00000000
	r8d = 0x00000000
	SZO = cond(0x00000000)
	C = false
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F96:
	rdi = r13
	ecx = 0x00413779
	rdx = 0xFFFFFFFFFFFFFFFF
	esi = 0x00000001
	eax = 0x00000000
	rax = DPB(rax, __sprintf_chk(rdi, rsi, 0xFFFFFFFFFFFFFFFF, rcx), 0)
	rdi = r13
	rax = DPB(rax, strlen(rdi), 0)
	r13 = r13 + rax
	SCZO = cond(r13)
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406F3B:
	rax = rax + r13
	SCZO = cond(rax)
	r13 = r8 + 0x0000000000000001
	Mem0[rax:byte] = 0x20
	Mem0[rax + 0x0000000000000001:byte] = 0x00
// DataOut: fs r11 r12 r13 r14d r15 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> r10:<invalid> ax:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r11:<invalid> al:<invalid> dx:<invalid> dl:<invalid> cl:<invalid> r11d:<invalid> r10d:<invalid> ah:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406FBC:
	rsi = Mem0[0x000000000061A610:word64]
	r13 = r13 - r12
	SCZO = cond(r13)
	rdi = r12
	call fputs_unlocked (retsize: 8; depth: 8)
	edx = 0x0061AFC0
	esi = 0x00000000
	rcx = r13
	rdi = rbx
	v41 = Mem0[0x000000000061B018:word64] + r13
	Mem0[0x000000000061B018:word64] = v41
	SCZO = cond(v41)
	rbx = fn0000000000406540(rcx, rdx, sil, rdi, r11, r14d, r15, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	edx = Mem0[rbx + 0x00000000000000A0:word32]
	rbp = rax
	SCZO = cond(edx - 0x00000006)
	branch Test(EQ,Z) l0000000000407160
// DataOut: edx fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> r12d:<invalid> ebx:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> dx:<invalid> dl:<invalid> r11d:<invalid> ah:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407160:
	SCZO = cond(Mem0[rbx + 0x0000000000000008:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> cl:<invalid> r11d:<invalid> ah:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040716B:
	rcx = Mem0[0x000000000061A610:word64]
	edx = 0x00000004
	esi = 0x00000001
	edi = 0x0041377E
	call fwrite_unlocked (retsize: 8; depth: 8)
	rcx = r13 + 0x0000000000000004 + rbp
	edx = 0x00000000
	esi = 0x00000001
	rdi = rbx
	v45 = Mem0[0x000000000061B018:word64] + 0x0000000000000004
	Mem0[0x000000000061B018:word64] = v45
	SCZO = cond(v45)
	rbx = fn0000000000406540(rcx, rdx, sil, rdi, r11, r14d, r15, fs, out rsp, out rbp, out rsi, out rdi, out r8, out r9, out r11, out r12, out r13, out r14, out r15)
	edx = Mem0[0x000000000061B12C:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> cl:<invalid> r11d:<invalid> ah:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004071B0:
	esi = Mem0[rbx + 0x00000000000000A4:word32]
	edx = 0x00000000
	SZO = cond(0x00000000)
	C = false
	edi = 0x00000001
	al = fn0000000000405D00(edx, esi, dil, out rsp, out rsi, out rdi)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> cl:<invalid> r11d:<invalid> ah:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406FF9:
	eax = Mem0[0x000000000061B12C:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000407012
// DataOut: edx fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> cl:<invalid> r11d:<invalid> ah:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407003:
	edi = (word32) Mem0[rbx + 0x00000000000000B0:byte]
	esi = Mem0[rbx + 0x0000000000000028:word32]
	al = fn0000000000405D00(edx, esi, dil, out rsp, out rsi, out rdi)
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> cl:<invalid> r11d:<invalid> ah:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407012:
	rax = Mem0[rsp + 0x00000000000012A8:word64]
	rax = rax ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rax)
	C = false
	branch Test(NE,Z) l000000000040745A
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:<invalid> cl:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> ah:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040745A:
	__stack_chk_fail()
	eax = Mem0[rdi + 0x00000000000000A0:word32]
	r8d = Mem0[r14 + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	eax = eax | r8d
	dl = dl | cl
	SZO = cond(dl)
	C = false
	branch Test(NE,Z) l00000000004074B0
// DataOut: al dl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:<invalid> cl:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> ah:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B0:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l000000000040748F
// DataOut: al dl fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) cl:Test(EQ,Z) r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> ah:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B4:
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) cl:Test(EQ,Z) r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> ah:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040748F:
	SZO = cond(dl & dl)
	C = false
	branch Test(EQ,Z) l00000000004074C0
// DataOut: al fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) cl:Test(EQ,Z) r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> ah:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074C0:
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000407493
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) cl:Test(EQ,Z) r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> ah:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407493:
	rcx = Mem0[rdi + 0x0000000000000040:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000040:word64] - rcx)
	rax = Mem0[rsi:word64]
	rdx = Mem0[rdi:word64]
	branch Test(GT,SZO) l00000000004074B8
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): SO
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:Test(EQ,Z) | Test(EQ,Z) cl:Test(EQ,Z) r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> ah:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074B8:
	eax = 0xFFFFFFFF
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:<invalid> cl:<invalid> r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> ah:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074A3:
	branch Test(LT,SO) l00000000004074C4
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:<invalid> cl:<invalid> r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> ah:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074C4:
	return rax
	eax = 0x00000001
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:<invalid> cl:<invalid> r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> ah:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004074A5:
	rsi = rdx
	rdi = rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:<invalid> cl:<invalid> r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> ah:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000402550:
	call Mem0[0x000000000061A1F0:word32] (retsize: 4; depth: 4)
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:<invalid> cl:<invalid> r8b:Test(EQ,Z) esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> ah:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000407029:
	rsp = rsp + 4792
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:<invalid> cl:<invalid> esp:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> ah:<invalid> r8b:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000406B70_exit:
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use r8 (=> r8Out)
	use r9 (=> r9Out)
	use r11 (=> r11Out)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> ebp:<invalid> r13d:<invalid> dil:<invalid> edi:<invalid> rcx:<invalid> r14:<invalid> r15:<invalid> r14d:<invalid> r8d:<invalid> r9:<invalid> edx:<invalid> r15d:<invalid> al:<invalid> r12d:<invalid> ebx:<invalid> dx:<invalid> dl:<invalid> cl:<invalid> esp:<invalid> r8b:<invalid> r10:<invalid> ax:<invalid> r11:<invalid> r10d:<invalid> r11d:<invalid> ah:<invalid> sil:<invalid> -4816(fp):<invalid> -4808(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4776(fp):0x0000000000000000 -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000406DF5:
	rbp = r13
// DataOut: fs r11 r11d r12 r13 r14 r15 r15b r9 rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> r13:<invalid> rdi:<invalid> rsi:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r12:<invalid> rbp:<invalid> r9d:<invalid> esi:<invalid> edx:<invalid> r14:<invalid> r13d:<invalid> ebp:<invalid> r15d:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> edi:<invalid> ebx:<invalid> esp:<invalid> ax:<invalid> r15:<invalid> r11:<invalid> r10:<invalid> al:<invalid> r9:<invalid> r10d:<invalid> r8d:<invalid> cl:<invalid> ah:<invalid> dl:<invalid> sil:<invalid> -4816(fp):<invalid> -4800(fp):<invalid> -4792(fp):<invalid> -4768(fp):<invalid> -4760(fp):<invalid> -4752(fp):al -4751(fp):<invalid> -4742(fp):<invalid> -4741(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000407870(word64 rsi, word64 rdi, word64 r11, word32 r14d, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r14d r15 rdi rsi
// LiveOut:
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000407870_entry:
// DataOut: fs r11 r14d r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407870:
	word64 rsi_170
	word64 rdi_169
	word64 rax_15 = Mem0[fs:0x00000028:word64]
	fn0000000000406A30()
	word64 rbp_172 = rsi
	rdi_169 = rdi
	rsi_170 = rsi
	branch Mem0[0x000000000061B114:byte] != 0x00 l0000000000407970
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407970:
	word64 rsi_212
	word64 rdi_211
	rdi_211 = rdi
	rsi_212 = rsi
	branch Mem0[rdi + 0x00000000000000B0:byte] == 0x00 l0000000000407992
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> eax:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> al:<invalid> ecx:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l000000000040797E:
	rdi_211 = Mem0[rdi + 0x0000000000000018:word64]
	rsi_212 = rsi
	branch rdi_211 == 0x0000000000000000 l0000000000407992
// DataOut: dil fs r11 r14d r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> eax:<invalid> ecx:0x00413764 edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdi:<invalid> rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000407987:
	word64 r14_238
	rax_15 = fn000000000040CD70(fp - 0x00000000000002B0, rdi_211, out r14_238)
	rsi_212 = fp - 0x00000000000002B0
	rcx = rax_15
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> eax:<invalid> ecx:0x00413764 rdi:<invalid> edi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l0000000000407992:
	rsi_170 = DPB(rsi_212, 0x00413779, 0) (alias)
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004079A7
// DataOut: fs r11 r14d r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> eax:<invalid> ecx:<invalid> rdi:<invalid> rsi:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> edi:<invalid> edx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079A0_1:
// DataOut: fs r11 r14d r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> eax:<invalid> ecx:<invalid> rdi:<invalid> edx:<invalid> esi:0x00413779 rsi:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> edi:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079A7:
	rdi_169 = DPB(rdi_211, 0x00000001, 0) (alias)
	rax_15 = DPB(rax_15, __printf_chk(rdi_169, rsi_170), 0)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> eax:<invalid> ecx:<invalid> rdi:<invalid> edx:<invalid> esi:0x00413779 rsi:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> edi:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004078A4:
	branch Mem0[0x000000000061B144:byte] == 0x00 l00000000004078E0
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> eax:<invalid> ecx:<invalid> rdi:<invalid> edx:<invalid> esi:0x00413779 edi:<invalid> rsi:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004078AD:
	branch Mem0[rdi + 0x00000000000000B0:byte] != 0x00 l00000000004079C0
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> eax:<invalid> ecx:<invalid> rdi:<invalid> edx:<invalid> esi:0x00413779 edi:<invalid> rsi:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64)

l00000000004079C0:
	rdi_169 = Mem0[rdi + 0x0000000000000050:word64]
	rsi_170 = fp - 0x00000000000002B0
	word64 rsp_195
	word64 r8_197
	word64 r9_198
	rax_15 = fn000000000040BD70(DPB(rcx, 0x00000200, 0), Mem0[0x000000000061B140:word32], rsi, fp - 0x00000000000002B0, rdi_169, Mem0[0x000000000061B138:word64], fs, out rsp_195, out rbp_172, out r8_197, out r9_198, out r11, out r14d, out r15)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000002B0 rbp:rsi rbx:rdi rax:<invalid> eax:<invalid> ecx:0x00413764 rdi:<invalid> edx:<invalid> esi:0x00413779 edi:<invalid> rsi:<invalid> rcx:<invalid> r14:0x00000000CCCCCCCD rdx:<invalid> al:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078BF:
	rsi_170 = DPB(rsi_170, 0x00413779, 0) (alias)
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l00000000004078D4
// DataOut: fs r11 r14d r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> eax:<invalid> ecx:<invalid> rdi:<invalid> r8:<invalid> edx:<invalid> rsi:<invalid> rcx:<invalid> esi:<invalid> edi:<invalid> r14:<invalid> rdx:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r9:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078CD_1:
// DataOut: fs r11 r14d r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> eax:<invalid> ecx:<invalid> edx:<invalid> esi:0x00413779 rdi:<invalid> r8:<invalid> rsi:<invalid> rcx:<invalid> edi:<invalid> r14:<invalid> rdx:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r9:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:0x79 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078D4:
	rdi_169 = DPB(rdi_169, 0x00000001, 0) (alias)
	rax_15 = DPB(rax_15, __printf_chk(rdi_169, rsi_170), 0)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> eax:<invalid> ecx:<invalid> edx:<invalid> esi:0x00413779 rdi:<invalid> r8:<invalid> rsi:<invalid> rcx:<invalid> edi:<invalid> r14:<invalid> rdx:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r9:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:0x79 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078E0:
	branch Mem0[0x000000000061B17D:byte] == 0x00 l0000000000407911
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> eax:<invalid> ecx:<invalid> edx:<invalid> esi:0x00413779 edi:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rcx:<invalid> r14:<invalid> rdx:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r9:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:0x79 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078E9:
	branch Mem0[0x000000000061B150:word32] == 0x00000004 l0000000000407900
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> eax:<invalid> ecx:<invalid> edx:<invalid> esi:0x00413779 edi:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> rcx:<invalid> r14:<invalid> rdx:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r9:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:0x79 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004078F9_1:
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> eax:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> esi:0x00413779 edi:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> r14:<invalid> rdx:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r9:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:0x79 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407900:
	word64 rax_157 = DPB(rax_15, __printf_chk(DPB(rdi_169, 0x00000001, 0), DPB(rsi_170, 0x00413779, 0)), 0)
// DataOut: fs r11 r14d r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> eax:<invalid> edx:<invalid> rcx:<invalid> ecx:<invalid> esi:0x00413779 edi:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> r14:<invalid> rdx:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r9:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:0x79 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407911:
	word64 rbp_87
	word64 rsi_88
	word64 rdi_89
	word64 r8_90
	word64 r9_91
	word64 r11_92
	word64 r12_93
	word64 r13_94
	word64 r14_95
	word64 r15_96
	word64 rsp_113
	word64 rbx_97 = fn0000000000406540(rbp_172, DPB(rdx, 0x00000000, 0), 0x00, rdi, r11, r14d, r15, fs, out rsp_113, out rbp_87, out rsi_88, out rdi_89, out r8_90, out r9_91, out r11_92, out r12_93, out r13_94, out r14_95, out r15_96)
	branch Mem0[0x000000000061B12C:word32] == 0x00000000 l0000000000407948
// DataOut: fs rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:rdi rax:<invalid> eax:<invalid> edx:<invalid> rcx:<invalid> esi:0x00413779 edi:<invalid> ecx:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> r14:<invalid> rdx:<invalid> al:<invalid> r12:<invalid> r15:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> r9d:<invalid> r9:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:0x79 -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l000000000040792D:
	word64 rsi_137
	word64 rdi_138
	fn0000000000405D00(Mem0[rbx_97 + 0x00000000000000A0:word32], Mem0[rbx_97 + 0x0000000000000028:word32], (byte) (word32) Mem0[rbx_97 + 0x00000000000000B0:byte], out rsp_113, out rsi_137, out rdi_138)
// DataOut: fs rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> edi:<invalid> ecx:<invalid> r8:<invalid> rsi:<invalid> r13:<invalid> rdx:<invalid> r12:<invalid> r14d:<invalid> r14:<invalid> al:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> r15:<invalid> ebx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ax:<invalid> r11d:<invalid> sil:<invalid> esp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407948:
	branch (Mem0[rsp_113 + 0x0000000000000298:word64] ^ Mem0[fs:0x00000028:word64]) != 0x0000000000000000 l00000000004079E6
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> edi:<invalid> ebx:<invalid> al:<invalid> ecx:<invalid> rdx:<invalid> r8:<invalid> rsi:<invalid> r13:<invalid> r12:<invalid> r14d:<invalid> cl:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> r15:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> r10d:<invalid> ah:<invalid> ax:<invalid> r11d:<invalid> sil:<invalid> esp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004079E6:
	__stack_chk_fail()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> edi:<invalid> ebx:<invalid> al:<invalid> rsi:<invalid> ecx:<invalid> rdx:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14d:<invalid> cl:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> r15:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> r10d:<invalid> ah:<invalid> ax:<invalid> r11d:<invalid> sil:<invalid> esp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l00000000004079EB_thunk_fn00000000004079F0:
	fn00000000004079F0()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> edi:<invalid> ebx:<invalid> al:<invalid> rsi:<invalid> ecx:<invalid> rdx:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14d:<invalid> cl:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> r15:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> r10d:<invalid> ah:<invalid> ax:<invalid> r11d:<invalid> sil:<invalid> esp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

l0000000000407962:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> edi:<invalid> ebx:<invalid> al:<invalid> rsi:<invalid> ecx:<invalid> rdx:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14d:<invalid> cl:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> r15:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> r10d:<invalid> ah:<invalid> ax:<invalid> r11d:<invalid> sil:<invalid> esp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000407870_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> edi:<invalid> ebx:<invalid> al:<invalid> rsi:<invalid> ecx:<invalid> rdx:<invalid> r8:<invalid> r13:<invalid> r12:<invalid> r14d:<invalid> cl:<invalid> r14:<invalid> r15d:<invalid> ebp:<invalid> r12d:<invalid> r15:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> r11:<invalid> r10:<invalid> r9:<invalid> r10d:<invalid> ah:<invalid> ax:<invalid> r11d:<invalid> sil:<invalid> esp:<invalid> -24(fp):<invalid> -8(fp):rbx -4(fp):rbp



void fn00000000004079F0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO
// Preserved: rsp
fn00000000004079F0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004079F0:
	branch Mem0[0x000000000061B150:word32] >u 0x00000004 l0000000000407A46
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407A46:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn00000000004079F0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004079F9:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000407EA0(word64 rcx, word32 edx, word64 rbp, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r14, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx esi fs r11 r14 r15 r8 rbp rcx rdi rsi
// LiveOut:
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000407EA0_entry:
// DataOut: edx esi fs r11 r14 r15 r8 rbp rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000407EA0:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	rbp = fp - 0x0000000000000004
	rsp = fp - 0x0000000000000008
	dwLoc08 = rdi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rsi
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x0000000000000004
	r13d = esi
	v8 = fp - 0x0000000000000010
	rsp = fp - 0x0000000000000014
	dwLoc14 = fp - 0x0000000000000010
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000390
	dwLoc0388 = edx
	rdx = rcx
	rax = Mem0[fs:0x00000028:word64]
	qwLoc3C = rax
	eax = 0x00000000
	rax = DPB(rax, eax, 0) (alias)
	rcx = Mem0[0x000000000061B1B0:word64]
	ecx = (word32) rcx (alias)
	cl = (byte) rcx (alias)
	SCZO = cond(rcx - Mem0[0x000000000061B1B8:word64])
	Z = SCZO (alias)
	r9 = Mem0[0x000000000061B1C0:word64]
	r9d = (word32) r9 (alias)
	r9w = (word16) r9 (alias)
	branch Test(EQ,Z) l0000000000408400
// DataOut: cl fs r11 r13 r13d r14 r15 r8 r9 r9b rax rbp rbx rcx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408400:
	r8 = 0x00000000AAAAAAAA
	rdi = Mem0[0x000000000061B1C0:word64]
	SCZO = cond(rcx - rax)
	branch Test(UGT,CZ) l0000000000408C7B
// DataOut: fs r11 r13 r13d r14 r15 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000390 rbp:fp - 0x0000000000000004 r13d:esi rbx:rdi rdx:rcx rax:<invalid> eax:0x00000000 rcx:<invalid> r9:<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040841A:
	rsi = rcx + rcx * 0x0000000000000002
	qwLoc0394 = rdx
	rsi = rsi << 0x0000000000000007
	SCZO = cond(rsi)
	rax = fn0000000000410C90(rdx, rsi, rdi, out ebx, out rsp, out r8)
	v28 = Mem0[0x000000000061B1B8:word64] << 0x0000000000000001
	Mem0[0x000000000061B1B8:word64] = v28
	SCZO = cond(v28)
	Mem0[0x000000000061B1C0:word64] = rax
	r9 = rax
	rcx = Mem0[0x000000000061B1B0:word64]
	rdx = qwLoc0394
// DataOut: cl fs r11 r13 r13d r15 r8 r9 r9b rbp rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000390 rbp:fp - 0x0000000000000004 r13d:esi rbx:rdi rdx:rcx rax:<invalid> eax:0x00000000 rcx:<invalid> r9:<invalid> r8:0x00000000AAAAAAAA rdi:<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407EED:
	rcx = rcx + rcx * 0x0000000000000002
	esi = 0x000000C0
	rcx = rcx << 0x0000000000000006
	r14 = r9 + rcx
	SZO = cond(r14b & 0x01)
	C = false
	rdi = r14
	branch Test(NE,Z) l0000000000408A18
// DataOut: dil esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsi rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408A18:
	Mem0[rsi:byte] = 0x00
	rdi = rsi + 0x0000000000000001
	sil = 0xBF
// DataOut: dil esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:0x000000C0 r14:<invalid> rdi:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F0B:
	SZO = cond(dil & 0x02)
	C = false
	branch Test(NE,Z) l00000000004089E0
// DataOut: dil esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> rsi:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004089E0:
	r9d = 0x00000000
	rdi = rdi + 0x0000000000000002
	esi = esi - 0x00000002
	Mem0[r15 - 0x0000000000000002:word16] = r9w
	SZO = cond(dil & 0x04)
	C = false
	branch Test(EQ,Z) l0000000000407F1F
// DataOut: esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> rsi:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004089F9:
// DataOut: esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F15:
	SZO = cond(dil & 0x04)
	C = false
	branch Test(NE,Z) l0000000000408A00
// DataOut: esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> sil:0xBF r8:<invalid> rsi:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408A00:
	Mem0[rdi:word32] = 0x00000000
	esi = esi - 0x00000004
	rdi = rdi + 0x0000000000000004
	SCZO = cond(rdi)
// DataOut: esi fs r11 r13 r13d r14 r15 r8 rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F1F:
	ecx = esi
	eax = 0x00000000
	ecx = ecx >>u 0x00000003
	SZO = cond(sil & 0x04)
	C = false
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rcx rdi rdx rsp sil
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F2A:
	branch rcx == 0x0000000000000000 l0000000000407F2D
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rcx rdi rdx rsp sil
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F2D:
	branch Test(NE,Z) l0000000000408360
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rdi rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408360:
	Mem0[rdi:word32] = 0x00000000
	rdi = rdi + 0x0000000000000004
	SZO = cond(sil & 0x02)
	C = false
	branch Test(EQ,Z) l0000000000407F3D
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408374:
// DataOut: eax esi fs r11 r13 r13d r14 r15 rax rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F33:
	SZO = cond(sil & 0x02)
	C = false
	branch Test(NE,Z) l0000000000408340
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408340:
	r8d = 0x00000000
	rdi = rdi + 0x0000000000000002
	Mem0[r15 - 0x0000000000000002:word16] = r8w
	esi = esi & 0x00000001
	SZO = cond(esi)
	C = false
	branch Test(EQ,Z) l0000000000407F46
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408355:
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F3D:
	esi = esi & 0x00000001
	SZO = cond(esi)
	C = false
	branch Test(NE,Z) l0000000000408338
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408338:
	Mem0[rdi:byte] = 0x00
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F46:
	SCZO = cond(bLoc0388 - 0x00)
	Mem0[rsi + 0x0000000000000018:word64] = 0x0000000000000000
	Mem0[r14 + 0x00000000000000A0:word32] = r13d
	branch Test(EQ,Z) l0000000000408220
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408220:
	SCZO = cond(Mem0[0x000000000061B0C1:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040822D:
	SCZO = cond(r13d - 0x00000003)
	branch Test(EQ,Z) l0000000000408910
// DataOut: fs r11 r13 r13d r14 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408910:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408237
// DataOut: fs r11 r13 r13d r14 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040891D:
	edi = 0x00000013
	qwLoc0394 = rdx
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l000000000040893D:
	edi = 0x00000012
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 edi:<invalid> rsi:<invalid> al:<invalid> sil:<invalid> r8:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l0000000000408956:
	edi = 0x00000014
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 edi:<invalid> rsi:<invalid> al:<invalid> sil:<invalid> r8:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040896F:
// DataOut: fs r11 r13 r13d r14 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 edi:<invalid> rsi:<invalid> al:<invalid> sil:<invalid> r8:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408237:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l0000000000408818
// DataOut: al eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408818:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(NE,Z) l0000000000408246
// DataOut: al eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408246:
	SZO = cond(r13d & r13d)
	C = false
	sil = Test(EQ,Z)
	branch Test(EQ,Z) l0000000000408255
// DataOut: al eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040824F:
	SCZO = cond(r13d - 0x00000006)
	branch Test(NE,Z) l0000000000408280
// DataOut: al eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:Test(EQ,Z) r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408255:
	ecx = Mem0[0x000000000061B110:word32]
	SCZO = cond(ecx - 0x00000005)
	branch Test(EQ,Z) l0000000000408BD0
// DataOut: al eax ecx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:Test(EQ,Z) r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408BD0:
	ecx = 0x00000005
// DataOut: eax ecx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:Test(EQ,Z) r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408264:
	SCZO = cond(Mem0[0x000000000061B198:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al eax ecx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:Test(EQ,Z) r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408271:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(NE,Z) l0000000000407F68
// DataOut: al eax ecx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:Test(EQ,Z) r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040827E:
// DataOut: al eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:Test(EQ,Z) r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408280:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:Test(EQ,Z) r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408288:
	SCZO = cond(Mem0[0x000000000061B0C0:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408825
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:Test(EQ,Z) r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408825:
	r12d = 0x00000000
	SZO = cond(0x00000000)
	C = false
// DataOut: fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408295:
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:Test(EQ,Z) r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040829E:
	r12d = 0x00000000
	SCZO = cond(r13d - 0x00000005)
	branch Test(NE,Z) l00000000004081E1
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:Test(EQ,Z) r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004082AB:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000003)
	branch Test(EQ,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:Test(EQ,Z) r12d:0x00000000 r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004082B8:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081E1
// DataOut: fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:Test(EQ,Z) r12d:0x00000000 r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004082C5:
	edi = 0x0000000E
	qwLoc0394 = rdx
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:Test(EQ,Z) r12d:0x00000000 r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l00000000004082E5:
	edi = 0x00000010
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:Test(EQ,Z) r12d:0x00000000 edi:<invalid> rsi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l00000000004082FE:
	edi = 0x00000011
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:Test(EQ,Z) r12d:0x00000000 edi:<invalid> rsi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0) Local -0394(64)

l0000000000408317:
	edi = 0x00000015
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	rdx = qwLoc0394
	branch Test(NE,Z) l0000000000407F62
// DataOut: eax fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:Test(EQ,Z) r12d:0x00000000 edi:<invalid> rsi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408330:
// DataOut: fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:Test(EQ,Z) r12d:0x00000000 edi:<invalid> rsi:<invalid> al:<invalid> r8:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407F62:
	ecx = Mem0[0x000000000061B110:word32]
// DataOut: eax ecx fs r11 r13 r13d r14 r8 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:0x00000000 cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F68:
	esi = (word32) Mem0[rbx:byte]
	r12 = rbx
	SCZO = cond(sil - 0x2F)
	branch Test(EQ,Z) l0000000000407F81
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:0x00000000 cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F74:
	r15d = (word32) Mem0[0x00000000AAAAAAA9:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l0000000000408670
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408670:
	rdi = rbx
	dwLoc0398 = ecx
	dwLoc038C = esi
	qwLoc0394 = rdx
	rax = DPB(rax, strlen(rdi), 0)
	rdx = qwLoc0394
	r12 = rax
	rdi = rdx
	rax = DPB(rax, strlen(rdi), 0)
	rax = r12 + 0x0000000000000020 + rax
	rdx = qwLoc0394
	esi = dwLoc038C
	ecx = dwLoc0398
	rax = rax & 0xFFFFFFFFFFFFFFF0
	rsp = rsp - rax
	rax = rsp + 0x000000000000000F
	rax = rax & 0xFFFFFFFFFFFFFFF0
	SCZO = cond(r15b - 0x2E)
	r12 = rax
	branch Test(EQ,Z) l0000000000408B30
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408B30:
	SCZO = cond(Mem0[rdx + 0x0000000000000001:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408705
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:rcx r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408B3A:
// DataOut: ecx fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:rcx r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086D2:
	rsi = rdx
// DataOut: ecx fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:rcx r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086D8:
	rax = rax + 0x0000000000000001
	rsi = rsi + 0x0000000000000001
	Mem0[r8 - 0x0000000000000001:byte] = r15b
	r15d = (word32) Mem0[r14:byte]
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004086D8
// DataOut: eax ecx fs r11 r12 r13 r13d r14 r15b r8 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:rcx r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> rsi:<invalid> sil:<invalid> r8:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086ED:
	SCZO = cond(rdx - rsi)
	rdi = rax
	branch Test(UGE,C) l0000000000408702
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:rcx r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> rsi:<invalid> sil:<invalid> r8:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086F5:
	SCZO = cond(Mem0[rsi - 0x0000000000000001:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408702
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> rsi:<invalid> sil:<invalid> r8:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l00000000004086FB:
	rax = rax + 0x0000000000000001
	SCZO = cond(rax)
	Mem0[rdi:byte] = 0x2F
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> rsi:<invalid> sil:<invalid> r8:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408702:
	esi = (word32) Mem0[rbx:byte]
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rax rbp rbx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> rsi:<invalid> sil:<invalid> r8:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408705:
	SZO = cond(sil & sil)
	C = false
	branch Test(EQ,Z) l0000000000408724
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rax rbp rbx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l000000000040870A:
	rdx = rbx
// DataOut: ecx fs r11 r12 r13 r13d r14 rax rbp rbx rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408710:
	rax = rax + 0x0000000000000001
	rdx = rdx + 0x0000000000000001
	Mem0[rax - 0x0000000000000001:byte] = sil
	esi = (word32) Mem0[rdx:byte]
	SZO = cond(sil & sil)
	C = false
	branch Test(NE,Z) l0000000000408710
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rax rbp rbx rdx sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000408724:
	Mem0[rax:byte] = 0x00
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F81:
	SCZO = cond(ecx - 0x00000003)
	branch Test(ULT,C) l0000000000407FFD
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407F86:
	SCZO = cond(ecx - 0x00000004)
	branch Test(ULE,CZ) l0000000000407FF0
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)

l0000000000407FF0:
	SCZO = cond(bLoc0388 - 0x00)
	branch Test(NE,Z) l00000000004088B0
// DataOut: eax ecx fs r11 r12 r13 r13d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088B0:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	edi = 0x00000001
	dwLoc0394 = ecx
	rdx = r15
	call __xstat (retsize: 8; depth: 8)
	ecx = dwLoc0394
	edx = eax
	esi = 0x00000001
	SCZO = cond(ecx - 0x00000003)
	branch Test(EQ,Z) l0000000000408015
// DataOut: eax edx esi fs r11 r12 r13 r13d r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088E0:
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408B5E
// DataOut: eax edx fs r11 r12 r13 r13d r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:0x00000001 r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> sil:0x01 r8:<invalid> al:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B5E:
	dwLoc0394 = eax
	rax = __errno_location()
	SCZO = cond(Mem0[rax:word32] - 0x00000002)
	edx = dwLoc0394
	al = Test(EQ,Z)
// DataOut: al eax edx fs r11 r12 r13 r13d r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:0x00000001 r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> sil:0x01 r8:<invalid> al:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088E8:
	eax = Mem0[rsi + 0x0000000000000028:word32]
	eax = eax & 0x0000F000
	SCZO = cond(eax - 0x00004000)
	al = Test(NE,Z)
// DataOut: al eax edx fs r11 r12 r13 r13d r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:0x00000001 r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> sil:0x01 r8:<invalid> al:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004088F9:
	SZO = cond(al & al)
	C = false
	esi = 0x00000001
	branch Test(EQ,Z) l0000000000408015
// DataOut: eax edx esi fs r11 r12 r13 r13d r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:0x00000001 r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:0x01 r8:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408906:
// DataOut: eax fs r11 r12 r13 r13d r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:0x00000001 r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:0x01 r8:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407F8B:
	SCZO = cond(ecx - 0x00000005)
	branch Test(NE,Z) l0000000000407FFD
// DataOut: eax fs r11 r12 r13 r13d r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407FFD:
	r15 = r14 + 0x0000000000000010
// DataOut: eax fs r11 r12 r13 r13d r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408001:
	rdx = r15
	rsi = r12
	edi = 0x00000001
	call __lxstat (retsize: 8; depth: 8)
	esi = 0x00000000
	SZO = cond(0x00000000)
	C = false
	edx = eax
// DataOut: edx esi fs r11 r12 r13 r13d r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408015:
	SZO = cond(edx & edx)
	C = false
	branch Test(NE,Z) l0000000000407FB1
// DataOut: edx esi fs r11 r12 r13 r13d r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> sil:<invalid> r8:<invalid> al:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000407F92:
	r15 = r14 + 0x0000000000000010
	rsi = r12
	edi = 0x00000001
	rdx = r15
	call __xstat (retsize: 8; depth: 8)
	edx = eax
	esi = 0x00000001
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408019
// DataOut: edx esi fs r11 r12 r13 r13d r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> r8d:0x00000000 r12:<invalid> r15d:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edi:<invalid> al:<invalid> edx:<invalid> r12d:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -920(fp):<invalid> -916(fp):rcx -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408019:
	SCZO = cond(r13d - 0x00000005)
	Mem0[rsi + 0x00000000000000B0:byte] = 0x01
	branch Test(EQ,Z) l0000000000408380
	SCZO = cond(r13d - 0x00000005)
	Mem0[rsi + 0x00000000000000B0:byte] = 0x01
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> sil:<invalid> r8:<invalid> al:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040802B:
	eax = Mem0[rsi + 0x0000000000000028:word32]
	eax = eax & 0x0000F000
	SCZO = cond(eax - 0x00008000)
	branch Test(EQ,Z) l0000000000408380
	eax = Mem0[rsi + 0x0000000000000028:word32]
	eax = eax & 0x0000F000
	SCZO = cond(eax - 0x00008000)
	branch Test(EQ,Z) l0000000000408380
// DataOut: edx esi fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> sil:<invalid> r8:<invalid> al:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408380:
	SCZO = cond(Mem0[0x000000000061B129:byte] - 0x00)
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> sil:<invalid> r8:<invalid> al:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040838D:
	edi = 0x00000015
	dwLoc038C = esi
	dwLoc0394 = edx
	rax = fn0000000000404CD0(edi)
	SZO = cond(al & al)
	C = false
	edx = dwLoc0394
	esi = dwLoc038C
	branch Test(EQ,Z) l000000000040803F
// DataOut: edx esi fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> sil:<invalid> r8:<invalid> al:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -038C(32) Local -0394(32)

l00000000004083B7:
	r13 = Mem0[r14 + 0x0000000000000010:word64]
	SCZO = cond(r13 - Mem0[0x000000000061A678:word64])
	branch Test(EQ,Z) l0000000000408C1F
// DataOut: edx esi fs r11 r12 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -038C(32) Local -0394(32)

l0000000000408C1F:
	rax = __errno_location()
	edx = dwLoc0394
	Mem0[rax:word32] = 0x0000005F
	esi = dwLoc038C
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> r13:<invalid> sil:<invalid> r8:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004083C8:
	dwLoc038C = esi
	dwLoc0394 = edx
	rax = __errno_location()
	esi = dwLoc038C
	edx = dwLoc0394
	Mem0[rax:word32] = 0x0000005F
	Mem0[0x000000000061A678:word64] = r13
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> r13:<invalid> sil:<invalid> r8:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004083F2:
	Mem0[rsi + 0x00000000000000B8:byte] = 0x00
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> r13:<invalid> sil:<invalid> r8:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040803F:
	ecx = Mem0[0x000000000061B150:word32]
	SZO = cond(ecx & ecx)
	branch Test(EQ,Z) l0000000000408056
	ecx = Mem0[0x000000000061B150:word32]
	SZO = cond(ecx & ecx)
	C = false
	branch Test(EQ,Z) l0000000000408056
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408049:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004080EF
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004080EF
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408056:
	rax = Mem0[0x000000000061A670:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	dwLoc0394 = edx
	branch Test(EQ,Z) l0000000000408C52
	rax = Mem0[0x000000000061A670:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	dwLoc0394 = edx
	branch Test(EQ,Z) l0000000000408C52
// DataOut: eax fs r11 r12 r14 r15 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0394(32)

l0000000000408C52:
	rax = __errno_location()
	r13d = 0x00000000
	SZO = cond(0x00000000)
	C = false
	Mem0[rax:word32] = 0x0000005F
	edx = dwLoc0394
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
// DataOut: edx fs r11 r12 r13 r13b r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040806D:
	SZO = cond(sil & sil)
	rsi = rsi + 0x00000000000000A8
	branch Test(EQ,Z) l0000000000408458
	SZO = cond(sil & sil)
	C = false
	rdi = r12
	rsi = rsi + 0x00000000000000A8
	branch Test(EQ,Z) l0000000000408458
// DataOut: eax fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0394(32)

l0000000000408458:
	eax = fn0000000000411840(eax, rsi)
	SZO = cond(eax & eax)
	C = false
	edx = dwLoc0394
	branch Test(NS,S) l0000000000408093
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408080:
	eax = fn0000000000411820(eax, rsi)
	SZO = cond(eax & eax)
	C = false
	edx = dwLoc0394
	branch Test(SG,S) l000000000040846B
	eax = fn0000000000411820(eax, rsi)
	SZO = cond(eax & eax)
	C = false
	edx = dwLoc0394
	branch Test(SG,S) l000000000040846B
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040846B:
	dwLoc0394 = edx
	rax = __errno_location()
	eax = Mem0[rax:word32]
	edx = dwLoc0394
	SCZO = cond(eax - 0x00000016)
	branch Test(EQ,Z) l000000000040848C
	dwLoc0394 = edx
	rax = __errno_location()
	eax = Mem0[rax:word32]
	edx = dwLoc0394
	SCZO = cond(eax - 0x00000016)
	branch Test(EQ,Z) l000000000040848C
// DataOut: eax edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408483:
	SCZO = cond(eax - 0x00000026)
	branch Test(NE,Z) l00000000004089C0
	SCZO = cond(eax - 0x00000026)
	branch Test(NE,Z) l00000000004089C0
// DataOut: eax edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004089C0:
	SCZO = cond(eax - 0x0000005F)
	branch Test(NE,Z) l0000000000408497
// DataOut: eax edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004089C9:
// DataOut: eax edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040848C:
	rcx = Mem0[rsi + 0x0000000000000010:word64]
	Mem0[0x000000000061A670:word64] = rcx
	rcx = Mem0[rsi + 0x0000000000000010:word64]
	Mem0[0x000000000061A670:word64] = rcx
// DataOut: eax edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408497:
	SCZO = cond(eax - 0x0000005F)
	Mem0[rsi + 0x00000000000000A8:word64] = 0x000000000061A56A
	branch Test(EQ,Z) l00000000004089D0
// DataOut: eax edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084AB:
	SCZO = cond(eax - 0x0000003D)
	branch Test(EQ,Z) l00000000004089D0
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004089D0:
	r13d = 0x00000000
	SZO = cond(0x00000000)
	C = false
// DataOut: edx fs r11 r12 r13 r13b r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084B4:
	Mem0[rsi + 0x00000000000000B4:word32] = 0x00000000
// DataOut: fs r11 r12
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408093:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	esi = 0x004137B1
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	esi = 0x004137B1
	ecx = 0x0000000A
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080A4:
	branch rcx == 0x0000000000000000 l00000000004080A6
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080A4_1:
	SCZO = cond(Mem0[rsi:byte] - Mem0[rdi:byte])
	rsi = rsi + 0x0000000000000001
	rdi = rdi + 0x0000000000000001
	rcx = rcx - 0x0000000000000001
	branch Test(NE,Z) l00000000004080A4
// DataOut: edx fs r11 r12 r14 r15 rbp rbx rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080A6:
	r13b = Test(NE,Z)
// DataOut: edx fs r11 r12 r13 r13b r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080AA:
	eax = Mem0[0x000000000061B150:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000408830
// DataOut: edx fs r11 r12 r13 r13b r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13b:Test(NE,Z) r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408830:
	rax = Mem0[0x000000000061A668:word64]
	SCZO = cond(Mem0[rsi + 0x0000000000000010:word64] - rax)
	branch Test(EQ,Z) l0000000000408B40
// DataOut: edx fs r11 r12 r13 r13b r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13b:Test(NE,Z) r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B40:
	dwLoc0394 = edx
	rax = __errno_location()
	ecx = 0x00000000
	SZO = cond(0x00000000)
	C = false
	Mem0[rax:word32] = 0x0000005F
	edx = dwLoc0394
// DataOut: cl edx fs r11 r12 r13b r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13b:Test(NE,Z) r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408841:
	dwLoc038C = edx
	rax = __errno_location()
	rsi = r15
	Mem0[rax:word32] = 0x00000000
	rdi = r12
	qwLoc0394 = rax
	rax = fn0000000000409CC0(rsi)
	SZO = cond(eax & eax)
	C = false
	ecx = 0x00000001
	r8 = Mem0[r13 - 0x0000000000000390:word64]
	edx = dwLoc038C
	branch Test(GT,SZO) l00000000004080BA
// DataOut: cl eax edx fs r11 r12 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13b:Test(NE,Z) r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040887E:
	edx = Mem0[rax:word32]
	SCZO = cond(edx - 0x00000016)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r11 r12 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:0x00000001 r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> r8:<invalid> sil:<invalid> r13b:Test(NE,Z) r13:<invalid> r12d:<invalid> cl:0x01 r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040888A:
	SCZO = cond(edx - 0x00000026)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax edx fs r11 r12 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:0x00000001 r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> r8:<invalid> sil:<invalid> r13b:Test(NE,Z) r13:<invalid> r12d:<invalid> cl:0x01 r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408893:
	SCZO = cond(edx - 0x0000005F)
	branch Test(EQ,Z) l0000000000408C3B
// DataOut: eax fs r11 r12 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:0x00000001 r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> r8:<invalid> sil:<invalid> r13b:Test(NE,Z) r13:<invalid> r12d:<invalid> cl:0x01 r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408C3B:
	rdx = Mem0[rsi + 0x0000000000000010:word64]
	eax = eax >>u 0x0000001F
	ecx = 0x00000000
	SZO = cond(0x00000000)
	C = false
	Mem0[0x000000000061A668:word64] = rdx
	edx = eax
// DataOut: cl edx fs r11 r12 r13b r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:0x00000001 r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> r8:<invalid> sil:<invalid> r13b:Test(NE,Z) r13:<invalid> r12d:<invalid> cl:0x01 r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040889C:
	eax = eax >>u 0x0000001F
	SCZO = cond(eax)
	edx = eax
// DataOut: edx fs r11 r12 r13b r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:0x00000001 r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> r8:<invalid> sil:<invalid> r13b:Test(NE,Z) r13:<invalid> r12d:<invalid> cl:0x01 r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080B8:
	ecx = 0x00000000
	SZO = cond(0x00000000)
	C = false
// DataOut: cl edx fs r11 r12 r13b r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13b:Test(NE,Z) r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080BA:
	esi = ecx
	eax = 0x00000000
	sil = sil | r13b
	SZO = cond(sil)
	C = false
	branch Test(EQ,Z) l00000000004080D9
// DataOut: cl eax edx fs r11 r12 r13b r14 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> r8:<invalid> sil:<invalid> r13b:Test(NE,Z) r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080C3:
	ecx = ecx ^ 0x00000001
	r13b = r13b & cl
	SZO = cond(r13b)
	C = false
	eax = r13d
	branch Test(EQ,Z) l00000000004080D0
// DataOut: eax edx fs r11 r12 r13d r14 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> sil:<invalid> al:<invalid> r8:<invalid> r13b:Test(NE,Z) r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080CC_2:
	esi = r13d
// DataOut: eax edx fs r11 r12 r14 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080D0:
	eax = eax << 0x0000001F
	eax = eax >> 0x0000001F
	eax = eax + 0x00000002
	SCZO = cond(eax)
// DataOut: eax edx fs r11 r12 r14 rbp rbx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> sil:<invalid> r13b:<invalid> al:<invalid> r8:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080D9:
	v46 = Mem0[0x000000000061B17C:byte] | sil
	Mem0[0x000000000061B17C:byte] = v46
	SZO = cond(Mem0[0x000000000061B17C:byte])
	SZO = cond(edx & edx)
	C = false
	Mem0[rsi + 0x00000000000000B4:word32] = eax
	branch Test(NE,Z) l00000000004084BF
// DataOut: fs r11 r12 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> sil:<invalid> al:<invalid> r8:<invalid> r13b:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084BF:
	rdi = r12
	rbx = fn000000000040EAB0(rdi, r11, fs, out rsp, out rbp, out r12, out r14, out r15b)
	r13 = rax
	rax = __errno_location()
	esi = Mem0[rax:word32]
	edi = 0x00000000
	eax = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rcx = r13
	edx = 0x00415E54
	call error (retsize: 8; depth: 8)
	eax = Mem0[rsi + 0x0000000000000028:word32]
	eax = eax & 0x0000F000
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> sil:<invalid> al:<invalid> r8:<invalid> r13b:<invalid> r13:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004084F6:
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> sil:<invalid> r8b:<invalid> r13:<invalid> ebp:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004080EF:
	eax = Mem0[rsi + 0x0000000000000028:word32]
	eax = eax & 0x0000F000
	SCZO = cond(eax - 0x0000A000)
	branch Test(EQ,Z) l0000000000408500
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r13b:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408500:
	r13d = Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l0000000000408519
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r8b:<invalid> ebp:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040850C:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l000000000040862A
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r8b:<invalid> ebp:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408519:
	rsi = Mem0[rsi + 0x0000000000000040:word64]
	rdi = r12
	rax = fn0000000000409D20(rsi, out rbp, out rsi, out r11, out r12, out r14)
	SZO = cond(rax & rax)
	C = false
	r13 = rax
	Mem0[rsi + 0x0000000000000008:word64] = rax
	branch Test(EQ,Z) l0000000000408BDA
// DataOut: fs r11 r12 r13 r14 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> r8b:<invalid> ebp:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408BDA:
	edi = 0x00000000
	SZO = cond(0x00000000)
	C = false
	edx = 0x00000005
	esi = 0x00413794
	rax = dcgettext(rdi, rsi, rdx)
	edi = (word32) Mem0[rbp - 0x0000000000000384:byte]
	rdx = r12
	rsi = rax
	rax = fn0000000000405810(rdx, r11, fs, out rbp, out rsi, out rdi, out r12, out r14, out r15b)
	r13 = Mem0[r14 + 0x0000000000000008:word64]
	SZO = cond(r13 & r13)
	C = false
	branch Test(NE,Z) l0000000000408535
// DataOut: fs r12 r13 r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:0x00000000 rcx:<invalid> r9:<invalid> esi:<invalid> r14:0x00000000FFFFFFFF rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:0x00000000FFFFFFFE rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r8b:<invalid> ebp:<invalid> r14d:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408C0A:
// DataOut: fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r8b:<invalid> ebp:<invalid> r14d:<invalid> r8:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408535:
	SCZO = cond(Mem0[rbp + 0x0000000000000000:byte] - 0x2F)
	branch Test(EQ,Z) l0000000000408C0F
// DataOut: fs r12 r13 r14 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r8b:<invalid> ebp:<invalid> r14d:<invalid> r8:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408C0F:
	rdi = r13
	rax = fn0000000000410E30(rax, rdi, out rsp, out rbp, out rsi)
	r13 = rax
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r8b:<invalid> ebp:<invalid> r14d:<invalid> r8:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408540:
	rdi = r12
	rax = fn000000000040A2B0(rdi, qwLoc08, qwArg08, qwArg10, out rbx, out rbp, out rsi)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	rdi = r13
	branch Test(EQ,Z) l0000000000408B98
// DataOut: fs r12 r13 r14 r15 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r8b:<invalid> ebp:<invalid> r14d:<invalid> r8:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B98:
	rax = fn0000000000410E30(rax, rdi, out rsp, out rbp, out rsi)
	r13 = rax
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> r8b:<invalid> r14d:<invalid> r8:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408557:
	rax = DPB(rax, strlen(rdi), 0)
	rdi = r15 + 0x0000000000000002 + rax
	rax = fn0000000000410C40(rsi, rdi, out rsp)
	rcx = rax
	eax = 0x00000000
	SCZO = cond(Mem0[r12 - 0x0000000000000001 + r15:byte] - 0x2F)
	rdi = rcx
	rsi = r12
	Mem0[rbp - 0x0000000000000390:word64] = rcx
	al = Test(NE,Z)
	r15 = r15 + rax
	SCZO = cond(r15)
	rdx = r15
	call stpncpy (retsize: 8; depth: 8)
	rsi = r13
	rdi = rax
	rax = strcpy(rdi, rsi)
	rcx = Mem0[rbp - 0x0000000000000390:word64]
	r13 = rcx
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> ebp:<invalid> bpl:<invalid> r12d:<invalid> r8b:<invalid> r14d:<invalid> r8:<invalid> al:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085A1:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> r12d:<invalid> r8b:<invalid> r14d:<invalid> r8:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085A6:
	SCZO = cond(Mem0[0x000000000061B12C:word32] - 0x00000001)
	branch Test(ULE,CZ) l0000000000408B80
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> r12d:<invalid> r8b:<invalid> r14d:<invalid> r8:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B80:
	SCZO = cond(Mem0[0x000000000061B115:byte] - 0x00)
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> r12d:<invalid> r8b:<invalid> r14d:<invalid> r8:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B8D:
// DataOut: eax fs r13 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> r12d:<invalid> r8b:<invalid> r14d:<invalid> r8:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085B3:
	rdx = rbp - 0x0000000000000380
	rsi = r13
	edi = 0x00000001
	call __xstat (retsize: 8; depth: 8)
	SZO = cond(eax & eax)
	C = false
	branch Test(NE,Z) l0000000000408607
// DataOut: fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> r12d:<invalid> r8b:<invalid> r14d:<invalid> r8:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085CB:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	Mem0[rsi + 0x00000000000000B1:byte] = 0x01
	eax = Mem0[rbp - 0x0000000000000368:word32]
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> r12d:<invalid> r8b:<invalid> r14d:<invalid> r8:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085E2:
	edx = Mem0[0x000000000061B150:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000408600
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> r12d:<invalid> r8b:<invalid> r14d:<invalid> r8:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085EC:
	edx = eax
	edx = edx & 0x0000F000
	SCZO = cond(edx - 0x00004000)
	branch Test(EQ,Z) l0000000000408607
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> r12d:<invalid> r8b:<invalid> r14d:<invalid> r8:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004085FC:
// DataOut: eax fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> r12d:<invalid> r8b:<invalid> r14d:<invalid> r8:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408600:
	Mem0[rsi + 0x00000000000000A4:word32] = eax
// DataOut: fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> ebp:<invalid> bpl:<invalid> al:<invalid> r12d:<invalid> r8b:<invalid> r14d:<invalid> r8:<invalid> cl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408607:
	rdi = r13
	free(rdi)
	eax = Mem0[rsi + 0x0000000000000028:word32]
	eax = eax & 0x0000F000
	SCZO = cond(eax - 0x0000A000)
	branch Test(NE,Z) l0000000000408103
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r8b:<invalid> ebp:<invalid> r14d:<invalid> r8:<invalid> al:<invalid> cl:<invalid> bpl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408623:
	r13d = Mem0[0x000000000061B150:word32]
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r8b:<invalid> ebp:<invalid> r14d:<invalid> r8:<invalid> al:<invalid> cl:<invalid> bpl:<invalid> sil:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040862A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000006
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r8b:<invalid> ebp:<invalid> r14d:<invalid> cl:<invalid> bpl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408103:
	SCZO = cond(eax - 0x00004000)
	branch Test(EQ,Z) l0000000000408978
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r8b:<invalid> ebp:<invalid> r14d:<invalid> cl:<invalid> bpl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408978:
	SCZO = cond(Mem0[rbp - 0x0000000000000384:byte] - 0x00)
	branch Test(EQ,Z) l00000000004089A8
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r8b:<invalid> ebp:<invalid> r14d:<invalid> cl:<invalid> bpl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408981:
	SCZO = cond(Mem0[0x000000000061B10D:byte] - 0x00)
	branch Test(NE,Z) l00000000004089A8
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r8b:<invalid> ebp:<invalid> r14d:<invalid> cl:<invalid> bpl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004089A8:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000003
	r13d = Mem0[0x000000000061B150:word32]
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r8b:<invalid> ebp:<invalid> r14d:<invalid> cl:<invalid> bpl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040898A:
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000009
	r13d = Mem0[0x000000000061B150:word32]
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r8b:<invalid> ebp:<invalid> r14d:<invalid> cl:<invalid> bpl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040810E:
	r13d = Mem0[0x000000000061B150:word32]
	Mem0[rsi + 0x00000000000000A0:word32] = 0x00000005
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r8b:<invalid> ebp:<invalid> r14d:<invalid> cl:<invalid> bpl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408120:
	SZO = cond(r13d & r13d)
	C = false
	r12 = Mem0[r14 + 0x0000000000000050:word64]
	branch Test(EQ,Z) l0000000000408132
// DataOut: eax fs r12 r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r8b:<invalid> ebp:<invalid> r14d:<invalid> cl:<invalid> bpl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408129:
	SCZO = cond(Mem0[0x000000000061B144:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081A8
// DataOut: eax fs r12 r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r8b:<invalid> ebp:<invalid> r14d:<invalid> cl:<invalid> bpl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408132:
	r8 = Mem0[0x000000000061B138:word64]
	edx = Mem0[0x000000000061B140:word32]
	r15 = r13 - 0x00000000000002D0
	ecx = 0x00000200
	rdi = r12
	rsi = r15
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r14d, out r15)
	esi = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B174:word32])
	branch Test(LE,SZO) l000000000040816E
// DataOut: eax ebp ebx fs r11d r12 r14 r14d r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> al:<invalid> sil:<invalid> r8:<invalid> r13:<invalid> ebx:<invalid> r11:<invalid> r12d:<invalid> r8b:<invalid> ebp:<invalid> r14d:<invalid> cl:<invalid> bpl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000408168:
	Mem0[0x000000000061B174:word32] = eax
// DataOut: eax ebp ebx fs r11d r12 r14 r14d r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(32) Local -0008(32)

l000000000040816E:
	r13d = Mem0[0x000000000061B150:word32]
	SZO = cond(r13d & r13d)
	C = false
	branch Test(NE,Z) l00000000004081A8
// DataOut: eax ebp ebx fs r11d r12 r13 r13d r14 r14d r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(32) Local -0008(32)

l000000000040817A:
	SCZO = cond(Mem0[0x000000000061A569:byte] - 0x00)
	branch Test(NE,Z) l0000000000408B10
// DataOut: eax ebp ebx fs r11d r12 r14 r14d r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000408B10:
	edi = Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(ebx, ebp, rsi, edi, r8, r11d, r12, r14, fs, out ebx, out rsp, out rbp, out rsi, out r8, out r9, out r12, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B168:word32])
	branch Test(LE,SZO) l0000000000408187
// DataOut: eax ebp ebx fs r11d r12 r14 r14d r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r13b:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000408B25:
	Mem0[0x000000000061B168:word32] = eax
// DataOut: eax ebp ebx fs r11d r12 r14 r14d r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> esp:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000408187:
	SCZO = cond(Mem0[0x000000000061A568:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A90
// DataOut: eax ebp ebx fs r11d r12 r14 r14d r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> esp:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000408A90:
	SCZO = cond(Mem0[0x000000000061B145:byte] - 0x00)
	r13d = Mem0[r14 + 0x0000000000000030:word32]
	branch Test(EQ,Z) l0000000000408BA8
// DataOut: ebp ebx fs r11d r12 r13d r14 r14d r15 r15d r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> esp:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000408BA8:
	edi = r13d
	rax = fn000000000040CB40(rax, rsi, edi, r8, r12, out rbx, out rsp, out rbp, out r12)
	SZO = cond(rax & rax)
	C = false
	rdi = rax
	branch Test(EQ,Z) l0000000000408AA1
// DataOut: ebp ebx fs r11d r12 r13d r14 r14d r15 r15d r8 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> esp:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(32) Local -0008(32)

l0000000000408BBC:
	esi = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	edx = 0x00000000
	SZO = cond(eax & eax)
	C = false
	branch Test(SG,S) l0000000000408BCA
// DataOut: eax ebp ebx edx fs r11d r12 r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> esp:<invalid> dl:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408BC7_1:
	edx = eax
// DataOut: eax ebp ebx edx fs r11d r12 r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> esp:<invalid> dl:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408BCA:
// DataOut: eax ebp ebx edx fs r11d r12 r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> esp:<invalid> dl:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AA1:
	edx = 0x00000015
	r8d = r13d
	ecx = 0x0041375A
	esi = 0x00000001
	rdi = r15
	eax = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rax = DPB(rax, __sprintf_chk(rdi, rsi, rdx, rcx), 0)
	rdx = r15
// DataOut: ebp ebx fs r11d r12 r14 r14d r15d r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> esp:<invalid> dl:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AC0:
	ecx = Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	ecx = ~ecx
	eax = eax & ecx
	eax = eax & 0x80808080
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000408AC0
// DataOut: al eax ebp ebx edx fs r11d r12 r14 r14d r15d r8 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:0x00000001 r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> esp:<invalid> dl:<invalid> sil:0x01 r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AD7:
	ecx = eax
	ecx = ecx >>u 0x00000010
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000408AE4
// DataOut: al cl ebp ebx edx fs r11d r12 r14 r14d r15d r8 rbp rbx rdx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:0x00000001 r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> esp:<invalid> dl:<invalid> sil:0x01 r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AE1_1:
	eax = ecx
// DataOut: al ebp ebx edx fs r11d r12 r14 r14d r15d r8 rbp rbx rdx rsi
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:0x00000001 r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> esp:<invalid> dl:<invalid> sil:0x01 r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AE4:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000408AEC
// DataOut: al ebp ebx ecx edx fs r11d r12 r14 r14d r15d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:0x00000001 r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> esp:<invalid> dl:<invalid> sil:0x01 r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AE8_2:
	rdx = rcx
// DataOut: al ebp ebx edx fs r11d r12 r14 r14d r15d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:0x00000001 r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> esp:<invalid> dl:<invalid> sil:0x01 r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AEC:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	edx = edx - r15d
	SCZO = cond(edx)
// DataOut: eax ebp ebx edx fs r11d r12 r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:0x00000001 r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> esp:<invalid> dl:<invalid> sil:0x01 r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408AF5:
	SCZO = cond(Mem0[0x000000000061B164:word32] - edx)
	branch Test(GE,SO) l0000000000408194
// DataOut: eax ebp ebx edx fs r11d r12 r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> esp:<invalid> dl:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408B01:
	Mem0[0x000000000061B164:word32] = edx
// DataOut: eax ebp ebx fs r11d r12 r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> esp:<invalid> dl:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408194:
	SCZO = cond(Mem0[0x000000000061B146:byte] - 0x00)
	branch Test(NE,Z) l0000000000408A70
// DataOut: eax ebp ebx fs r11d r12 r14 r14d r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> esp:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408A70:
	edi = Mem0[rsi + 0x000000000000002C:word32]
	rax = fn00000000004061B0(ebx, ebp, rsi, edi, r8, r11d, r12, r14, fs, out ebx, out rsp, out rbp, out rsi, out r8, out r9, out r12, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B160:word32])
	branch Test(LE,SZO) l00000000004081A1
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> esp:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408A85:
	Mem0[0x000000000061B160:word32] = eax
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> esp:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004081A1:
	r13d = Mem0[0x000000000061B150:word32]
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> esp:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004081A8:
	SCZO = cond(Mem0[0x000000000061B17D:byte] - 0x00)
	branch Test(EQ,Z) l00000000004081C9
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004081B1:
	rdi = Mem0[rsi + 0x00000000000000A8:word64]
	rax = DPB(rax, strlen(rdi), 0)
	SCZO = cond(eax - Mem0[0x000000000061B16C:word32])
	branch Test(GT,SZO) l0000000000408730
// DataOut: eax fs r13 r13d r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408730:
	SZO = cond(r13d & r13d)
	C = false
	Mem0[0x000000000061B16C:word32] = eax
	branch Test(NE,Z) l00000000004081D2
// DataOut: fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004081C9:
	SZO = cond(r13d & r13d)
	C = false
	branch Test(EQ,Z) l000000000040873F
// DataOut: fs r13 r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040873F:
	rdi = Mem0[rsi + 0x0000000000000020:word64]
	rsi = rbp - 0x00000000000002F0
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	SCZO = cond(eax - Mem0[0x000000000061B170:word32])
	branch Test(LE,SZO) l0000000000408765
	rdi = Mem0[rsi + 0x0000000000000020:word64]
	rsi = rbp - 0x00000000000002F0
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	SCZO = cond(eax - Mem0[0x000000000061B170:word32])
	branch Test(LE,SZO) l0000000000408765
// DataOut: eax fs r13 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040875F:
	Mem0[0x000000000061B170:word32] = eax
	Mem0[0x000000000061B170:word32] = eax
// DataOut: fs r13 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408765:
	eax = Mem0[rsi + 0x0000000000000028:word32]
	eax = eax & 0x0000B000
	SCZO = cond(eax - 0x00002000)
	branch Test(NE,Z) l0000000000408A30
// DataOut: fs r13 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000408A30:
	rdi = Mem0[rsi + 0x0000000000000040:word64]
	r8 = Mem0[0x000000000061A560:word64]
	rsi = rbp - 0x00000000000002D0
	edx = Mem0[0x000000000061B134:word32]
	ecx = 0x00000001
	rax = fn000000000040BD70(rcx, edx, rbp, rsi, rdi, r8, fs, out rsp, out rbp, out r8, out r9, out r11, out r14d, out r15)
	esi = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rdi = rax
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc08, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408A68:
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r12d:<invalid> ebp:<invalid> sil:<invalid> dl:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408779:
	rax = Mem0[rsi + 0x0000000000000038:word64]
	r15 = r13 - 0x00000000000002D0
	rsi = r15
	rdi = rax
	rax = rax >>u 0x0000000000000008
	rdi = rdi >>u 0x0000000000000020
	eax = eax & 0x00000FFF
	edi = edi & 0xFFFFF000
	edi = edi | eax
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	SCZO = cond(eax - Mem0[0x000000000061B15C:word32])
	branch Test(LE,SZO) l00000000004087BA
// DataOut: eax fs r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087B4:
	Mem0[0x000000000061B15C:word32] = eax
// DataOut: fs r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087BA:
	rax = Mem0[rsi + 0x0000000000000038:word64]
	rsi = r15
	rdi = rax
	eax = (word32) al
	rdi = rdi >>u 0x000000000000000C
	dil = dil & 0x00
	edi = edi | eax
	SZO = cond(edi)
	C = false
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	edx = Mem0[0x000000000061B158:word32]
	SCZO = cond(eax - edx)
	branch Test(LE,SZO) l00000000004087F0
// DataOut: eax edx fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087E8:
	Mem0[0x000000000061B158:word32] = eax
	edx = eax
// DataOut: edx fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> dil:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004087F0:
	eax = Mem0[0x000000000061B15C:word32]
	eax = rdx + 0x0000000000000002 + rax
	SCZO = cond(eax - Mem0[0x000000000061B154:word32])
	branch Test(LE,SZO) l00000000004081D2
// DataOut: eax fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> dil:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408806:
	Mem0[0x000000000061B154:word32] = eax
// DataOut: fs r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r12d:<invalid> ebp:<invalid> dil:<invalid> sil:<invalid> dl:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004081D2:
	eax = (word32) Mem0[0x000000000061B114:byte]
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408640
// DataOut: fs r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> dl:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dil:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408640:
	rdi = Mem0[rsi + 0x0000000000000018:word64]
	rsi = rbp - 0x00000000000002D0
	rax = fn000000000040CD70(rsi, rdi, out r14)
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	SCZO = cond(eax - Mem0[0x000000000061B178:word32])
	branch Test(LE,SZO) l00000000004081E1
// DataOut: eax fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:(word32) Mem0[0x000000000061B114:byte] rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> dl:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dil:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408664:
	Mem0[0x000000000061B178:word32] = eax
// DataOut: fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:0x00000000CCCCCCCD rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r8:<invalid> r13:<invalid> r11:<invalid> r14d:<invalid> ebx:<invalid> r10:<invalid> al:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> ebp:<invalid> r12d:<invalid> sil:<invalid> dl:<invalid> r8b:<invalid> bpl:<invalid> r11d:<invalid> dx:<invalid> dil:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407FB1:
	edi = 0x00000000
	edx = 0x00000005
	esi = 0x00413783
	rax = dcgettext(rdi, rsi, rdx)
	r15d = Mem0[r13 - 0x0000000000000384:word32]
	rdx = r12
	rsi = rax
	r12d = 0x00000000
	SZO = cond(0x00000000)
	C = false
	edi = (word32) r15b
	rax = fn0000000000405810(rdx, r11, fs, out rbp, out rsi, out rdi, out r12, out r14, out r15b)
	SZO = cond(r15b & r15b)
	C = false
	branch Test(NE,Z) l00000000004081F4
// DataOut: fs r14 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> sil:<invalid> r8:<invalid> al:<invalid> r12d:<invalid> cl:<invalid> r10:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407FE4:
// DataOut: fs r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:esi rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> rsi:<invalid> edi:<invalid> edx:<invalid> r12d:<invalid> r8b:<invalid> r13:<invalid> ebp:<invalid> r11:<invalid> r14d:<invalid> sil:<invalid> r8:<invalid> al:<invalid> ebx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004081E1:
	rdi = rbx
	rax = fn0000000000410E30(rax, rdi, out rsp, out rbp, out rsi)
	v43 = Mem0[0x000000000061B1B0:word64] + 0x0000000000000001
	Mem0[0x000000000061B1B0:word64] = v43
	SCZO = cond(v43)
	Mem0[rsi:word64] = rax
	rdi = rbx
	rax = fn0000000000410E30(rax, rdi, out rsp, out rbp, out rsi)
	v47 = Mem0[0x000000000061B1B0:word64] + 0x0000000000000001
	Mem0[0x000000000061B1B0:word64] = v47
	SCZO = cond(v47)
	Mem0[rsi:word64] = rax
// DataOut: fs r14 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12d:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> edx:<invalid> r8b:<invalid> r13:<invalid> ebp:<invalid> r11:<invalid> r14d:<invalid> al:<invalid> ebx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r10d:<invalid> ah:<invalid> dx:<invalid> dl:<invalid> bpl:<invalid> dil:<invalid> esp:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l00000000004081F4:
	rbx = Mem0[rbp - 0x0000000000000038:word64]
	rbx = rbx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rbx)
	C = false
	rax = r12
	branch Test(NE,Z) l0000000000408C76
// DataOut: r14 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r13:<invalid> ebp:<invalid> r11:<invalid> r14d:<invalid> sil:<invalid> r8:<invalid> al:<invalid> ebx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r10d:<invalid> ah:<invalid> esp:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408C76:
	__stack_chk_fail()
// DataOut: r14 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r13:<invalid> ebp:<invalid> r11:<invalid> r14d:<invalid> sil:<invalid> r8:<invalid> al:<invalid> ebx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r10d:<invalid> ah:<invalid> esp:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408C7B:
	fn0000000000410E50()
	eax = Mem0[rdi + 0x00000000000000A0:word32]
	r8d = Mem0[r14 + 0x00000000000000A0:word32]
	SCZO = cond(eax - 0x00000009)
	cl = Test(EQ,Z)
	SCZO = cond(eax - 0x00000003)
	al = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000009)
	dl = Test(EQ,Z)
	SCZO = cond(r8d - 0x00000003)
	r8b = Test(EQ,Z)
	edx = edx | r8d
	al = al | cl
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0000000000408CE8
// DataOut: al dl rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> r8:<invalid> rdi:<invalid> esi:<invalid> r14:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r13:<invalid> ebp:<invalid> r11:<invalid> r14d:<invalid> sil:<invalid> al:<invalid> ebx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r10d:<invalid> ah:<invalid> esp:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// Terminates process

l0000000000408CE8:
	SZO = cond(dl & dl)
	C = false
	branch Test(NE,Z) l0000000000408CAF
// DataOut: al dl rdi rsi
// DataOut (flags): 
// SymbolicIn: eax:<invalid> r8d:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) edx:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CEC:
// DataOut:
// DataOut (flags): 
// SymbolicIn: eax:<invalid> r8d:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) edx:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CAF:
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000408CC0
// DataOut: dl rdi rsi
// DataOut (flags): 
// SymbolicIn: eax:<invalid> r8d:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) edx:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CB3:
	SZO = cond(dl & dl)
	C = false
	eax = 0x00000001
	branch Test(EQ,Z) l0000000000408CC0
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: eax:<invalid> r8d:<invalid> cl:Test(EQ,Z) al:Test(EQ,Z) | Test(EQ,Z) dl:<invalid> r8b:Test(EQ,Z) edx:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CC0:
	rcx = Mem0[rsi + 0x0000000000000068:word64]
	SCZO = cond(Mem0[rdi + 0x0000000000000068:word64] - rcx)
	rax = Mem0[rdi + 0x0000000000000070:word64]
	rdx = Mem0[rsi + 0x0000000000000070:word64]
	branch Test(GT,SZO) l0000000000408CF0
// DataOut: eax edx rdi rsi
// DataOut (flags): SO
// SymbolicIn: eax:<invalid> r8d:<invalid> cl:Test(EQ,Z) al:<invalid> dl:<invalid> r8b:Test(EQ,Z) edx:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CF0:
	eax = 0xFFFFFFFF
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: eax:<invalid> r8d:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) edx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CD2:
	branch Test(LT,SO) l0000000000408D00
// DataOut: eax edx rdi rsi
// DataOut (flags): 
// SymbolicIn: eax:<invalid> r8d:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) edx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408D00:
	eax = 0x00000001
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: eax:<invalid> r8d:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) edx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CD4:
	edx = edx - eax
	SCZO = cond(edx)
	branch Test(NE,Z) l0000000000408D06
// DataOut: rdi rsi
// DataOut (flags): 
// SymbolicIn: eax:<invalid> r8d:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) edx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408D06:
	eax = edx
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: eax:<invalid> r8d:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) edx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CD8:
	rsi = Mem0[rsi:word64]
	rdi = Mem0[rdi:word64]
// DataOut:
// DataOut (flags): 
// SymbolicIn: eax:<invalid> r8d:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) edx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CDB_thunk_fn0000000000405020:
	fn0000000000405020(qwArg00)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: eax:<invalid> r8d:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:Test(EQ,Z) edx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000408CBC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: eax:0x00000001 r8d:<invalid> cl:Test(EQ,Z) al:0x01 dl:<invalid> r8b:Test(EQ,Z) edx:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l000000000040820A:
	rsp = rbp - 0x0000000000000028
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:<invalid> ecx:<invalid> r8d:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r8b:<invalid> r13:<invalid> ebp:<invalid> r11:<invalid> r14d:<invalid> sil:<invalid> r8:<invalid> al:<invalid> ebx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> dl:<invalid> r10d:<invalid> ah:<invalid> esp:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

fn0000000000407EA0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: eax:<invalid> r8d:<invalid> cl:<invalid> al:<invalid> dl:<invalid> r8b:<invalid> edx:<invalid> rcx:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> rsp:<invalid> rbp:<invalid> r13d:<invalid> rbx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> r9d:<invalid> ecx:<invalid> r12d:<invalid> r12:<invalid> r15d:<invalid> r15:<invalid> edi:<invalid> r13:<invalid> ebp:<invalid> r11:<invalid> r14d:<invalid> sil:<invalid> r8:<invalid> ebx:<invalid> r10:<invalid> r11d:<invalid> dx:<invalid> r10d:<invalid> ah:<invalid> esp:<invalid> bpl:<invalid> dil:<invalid> r13b:<invalid> -920(fp):<invalid> -916(fp):<invalid> -908(fp):<invalid> -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp

l0000000000407F2A_1:
	Mem0[rdi:word64] = rax
	rdi = rdi + 0x0000000000000008
	rcx = rcx - 0x0000000000000001
// DataOut: eax esi fs r11 r13 r13d r14 r15 r8 rax rbp rbx rcx rdi rdx rsp sil
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> rbp:fp - 0x0000000000000004 r13d:esi rbx:<invalid> rdx:rcx rax:<invalid> eax:<invalid> rcx:<invalid> r9:<invalid> esi:<invalid> r14:<invalid> rdi:<invalid> r9d:0x00000000 ecx:<invalid> sil:<invalid> r8:<invalid> rsi:<invalid> edx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -916(fp):rcx -904(fp):edx -60(fp):<invalid> -24(fp):rbx -20(fp):fp - 0x0000000000000010 -16(fp):fp - 0x0000000000000004 -12(fp):rsi -8(fp):rdi -4(fp):rbp
// LocalsOut: Local -0004(0) Local -0008(0) Local -0388(0)



void fn0000000000409750(word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000409750_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000409750_entry:
// DataOut: edi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409750:
	word64 rdi_36
	word64 rdx_7 = DPB(rdx, 0x00000005, 0)
	word32 ebx_12 = edi
	word64 rbp_19 = Mem0[0x000000000061B200:word64]
	branch edi == 0x00000000 l0000000000409794
// DataOut: ebx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409794:
	word64 rax_62 = dcgettext(DPB(rdi, 0x00000000, 0), DPB(rsi, 0x00413D88, 0), rdx_7)
	word64 rax_69 = DPB(rax_62, __printf_chk(DPB(rdi, 0x00000001, 0), rax_62), 0)
	word64 rdx_72 = DPB(rbp_19, 0x00000005, 0)
	word64 rax_79 = dcgettext(DPB(rdi, 0x00000000, 0), DPB(rax_62, 0x00413DB0, 0), rdx_72)
	word64 rsp_83
	word64 rbp_84
	word32 edx_85
	word64 rbx_86
	word32 ebx_87
	word32 edi_88
	byte SCZO_89
	byte SZO_90
	byte C_91
	byte Z_92
	word32 esi_93
	word64 rax_94
	word64 rdi_95
	word64 rsi_96
	word64 rdx_97
	word64 rcx_98
	word32 eax_99
	word32 ecx_100
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_76,dwLoc04_4,dwLoc08_10,eax_67,ebx_12,ecx,edi_73,edx_71,esi_77,rax_79,rbp_70,rbx_13,rcx,rdi_81,rdx_72,rsi_80,rsp_14,SCZO,SZO_75,Z_16
		defs: C_91,eax_99,ebx_87,ecx_100,edi_88,edx_85,esi_93,rax_94,rbp_84,rbx_86,rcx_98,rdi_95,rdx_97,rsi_96,rsp_83,SCZO_89,SZO_90,Z_92
	word64 rdx_103 = DPB(rdx_97, 0x00000005, 0)
	word64 rax_110 = dcgettext(DPB(rdi_95, 0x00000000, 0), DPB(rsi_96, 0x00413E40, 0), rdx_103)
	word64 rsp_113
	word64 rbp_114
	word32 edx_115
	word64 rbx_116
	word32 ebx_117
	word32 edi_118
	byte SCZO_119
	byte SZO_120
	byte C_121
	byte Z_122
	word32 esi_123
	word64 rax_124
	word64 rdi_125
	word64 rsi_126
	word64 rdx_127
	word64 rcx_128
	word32 eax_129
	word32 ecx_130
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_107,dwLoc04_4,dwLoc08_10,eax_99,ebx_87,ecx_100,edi_104,edx_102,esi_108,rax_110,rbp_101,rbx_86,rcx_98,rdi_112,rdx_103,rsi_111,rsp_83,SCZO_89,SZO_106,Z_92
		defs: C_121,eax_129,ebx_117,ecx_130,edi_118,edx_115,esi_123,rax_124,rbp_114,rbx_116,rcx_128,rdi_125,rdx_127,rsi_126,rsp_113,SCZO_119,SZO_120,Z_122
	word64 rdx_133 = DPB(rdx_127, 0x00000005, 0)
	word64 rax_140 = dcgettext(DPB(rdi_125, 0x00000000, 0), DPB(rsi_126, 0x00413E90, 0), rdx_133)
	word64 rsp_143
	word64 rbp_144
	word32 edx_145
	word64 rbx_146
	word32 ebx_147
	word32 edi_148
	byte SCZO_149
	byte SZO_150
	byte C_151
	byte Z_152
	word32 esi_153
	word64 rax_154
	word64 rdi_155
	word64 rsi_156
	word64 rdx_157
	word64 rcx_158
	word32 eax_159
	word32 ecx_160
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_137,dwLoc04_4,dwLoc08_10,eax_129,ebx_117,ecx_130,edi_134,edx_132,esi_138,rax_140,rbp_131,rbx_116,rcx_128,rdi_142,rdx_133,rsi_141,rsp_113,SCZO_119,SZO_136,Z_122
		defs: C_151,eax_159,ebx_147,ecx_160,edi_148,edx_145,esi_153,rax_154,rbp_144,rbx_146,rcx_158,rdi_155,rdx_157,rsi_156,rsp_143,SCZO_149,SZO_150,Z_152
	word64 rdx_163 = DPB(rdx_157, 0x00000005, 0)
	word64 rax_170 = dcgettext(DPB(rdi_155, 0x00000000, 0), DPB(rsi_156, 0x00413FA0, 0), rdx_163)
	word64 rsp_173
	word64 rbp_174
	word32 edx_175
	word64 rbx_176
	word32 ebx_177
	word32 edi_178
	byte SCZO_179
	byte SZO_180
	byte C_181
	byte Z_182
	word32 esi_183
	word64 rax_184
	word64 rdi_185
	word64 rsi_186
	word64 rdx_187
	word64 rcx_188
	word32 eax_189
	word32 ecx_190
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_167,dwLoc04_4,dwLoc08_10,eax_159,ebx_147,ecx_160,edi_164,edx_162,esi_168,rax_170,rbp_161,rbx_146,rcx_158,rdi_172,rdx_163,rsi_171,rsp_143,SCZO_149,SZO_166,Z_152
		defs: C_181,eax_189,ebx_177,ecx_190,edi_178,edx_175,esi_183,rax_184,rbp_174,rbx_176,rcx_188,rdi_185,rdx_187,rsi_186,rsp_173,SCZO_179,SZO_180,Z_182
	word64 rdx_193 = DPB(rdx_187, 0x00000005, 0)
	word64 rax_200 = dcgettext(DPB(rdi_185, 0x00000000, 0), DPB(rsi_186, 0x004141E8, 0), rdx_193)
	word64 rsp_203
	word64 rbp_204
	word32 edx_205
	word64 rbx_206
	word32 ebx_207
	word32 edi_208
	byte SCZO_209
	byte SZO_210
	byte C_211
	byte Z_212
	word32 esi_213
	word64 rax_214
	word64 rdi_215
	word64 rsi_216
	word64 rdx_217
	word64 rcx_218
	word32 eax_219
	word32 ecx_220
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_197,dwLoc04_4,dwLoc08_10,eax_189,ebx_177,ecx_190,edi_194,edx_192,esi_198,rax_200,rbp_191,rbx_176,rcx_188,rdi_202,rdx_193,rsi_201,rsp_173,SCZO_179,SZO_196,Z_182
		defs: C_211,eax_219,ebx_207,ecx_220,edi_208,edx_205,esi_213,rax_214,rbp_204,rbx_206,rcx_218,rdi_215,rdx_217,rsi_216,rsp_203,SCZO_209,SZO_210,Z_212
	word64 rdx_223 = DPB(rdx_217, 0x00000005, 0)
	word64 rax_230 = dcgettext(DPB(rdi_215, 0x00000000, 0), DPB(rsi_216, 0x00414398, 0), rdx_223)
	word64 rsp_233
	word64 rbp_234
	word32 edx_235
	word64 rbx_236
	word32 ebx_237
	word32 edi_238
	byte SCZO_239
	byte SZO_240
	byte C_241
	byte Z_242
	word32 esi_243
	word64 rax_244
	word64 rdi_245
	word64 rsi_246
	word64 rdx_247
	word64 rcx_248
	word32 eax_249
	word32 ecx_250
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_227,dwLoc04_4,dwLoc08_10,eax_219,ebx_207,ecx_220,edi_224,edx_222,esi_228,rax_230,rbp_221,rbx_206,rcx_218,rdi_232,rdx_223,rsi_231,rsp_203,SCZO_209,SZO_226,Z_212
		defs: C_241,eax_249,ebx_237,ecx_250,edi_238,edx_235,esi_243,rax_244,rbp_234,rbx_236,rcx_248,rdi_245,rdx_247,rsi_246,rsp_233,SCZO_239,SZO_240,Z_242
	word64 rdx_253 = DPB(rdx_247, 0x00000005, 0)
	word64 rax_260 = dcgettext(DPB(rdi_245, 0x00000000, 0), DPB(rsi_246, 0x00414540, 0), rdx_253)
	word64 rsp_263
	word64 rbp_264
	word32 edx_265
	word64 rbx_266
	word32 ebx_267
	word32 edi_268
	byte SCZO_269
	byte SZO_270
	byte C_271
	byte Z_272
	word32 esi_273
	word64 rax_274
	word64 rdi_275
	word64 rsi_276
	word64 rdx_277
	word64 rcx_278
	word32 eax_279
	word32 ecx_280
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_257,dwLoc04_4,dwLoc08_10,eax_249,ebx_237,ecx_250,edi_254,edx_252,esi_258,rax_260,rbp_251,rbx_236,rcx_248,rdi_262,rdx_253,rsi_261,rsp_233,SCZO_239,SZO_256,Z_242
		defs: C_271,eax_279,ebx_267,ecx_280,edi_268,edx_265,esi_273,rax_274,rbp_264,rbx_266,rcx_278,rdi_275,rdx_277,rsi_276,rsp_263,SCZO_269,SZO_270,Z_272
	word64 rdx_283 = DPB(rdx_277, 0x00000005, 0)
	word64 rax_290 = dcgettext(DPB(rdi_275, 0x00000000, 0), DPB(rsi_276, 0x00414580, 0), rdx_283)
	word64 rsp_293
	word64 rbp_294
	word32 edx_295
	word64 rbx_296
	word32 ebx_297
	word32 edi_298
	byte SCZO_299
	byte SZO_300
	byte C_301
	byte Z_302
	word32 esi_303
	word64 rax_304
	word64 rdi_305
	word64 rsi_306
	word64 rdx_307
	word64 rcx_308
	word32 eax_309
	word32 ecx_310
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_287,dwLoc04_4,dwLoc08_10,eax_279,ebx_267,ecx_280,edi_284,edx_282,esi_288,rax_290,rbp_281,rbx_266,rcx_278,rdi_292,rdx_283,rsi_291,rsp_263,SCZO_269,SZO_286,Z_272
		defs: C_301,eax_309,ebx_297,ecx_310,edi_298,edx_295,esi_303,rax_304,rbp_294,rbx_296,rcx_308,rdi_305,rdx_307,rsi_306,rsp_293,SCZO_299,SZO_300,Z_302
	word64 rdx_313 = DPB(rdx_307, 0x00000005, 0)
	word64 rax_320 = dcgettext(DPB(rdi_305, 0x00000000, 0), DPB(rsi_306, 0x00414670, 0), rdx_313)
	word64 rsp_323
	word64 rbp_324
	word32 edx_325
	word64 rbx_326
	word32 ebx_327
	word32 edi_328
	byte SCZO_329
	byte SZO_330
	byte C_331
	byte Z_332
	word32 esi_333
	word64 rax_334
	word64 rdi_335
	word64 rsi_336
	word64 rdx_337
	word64 rcx_338
	word32 eax_339
	word32 ecx_340
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_317,dwLoc04_4,dwLoc08_10,eax_309,ebx_297,ecx_310,edi_314,edx_312,esi_318,rax_320,rbp_311,rbx_296,rcx_308,rdi_322,rdx_313,rsi_321,rsp_293,SCZO_299,SZO_316,Z_302
		defs: C_331,eax_339,ebx_327,ecx_340,edi_328,edx_325,esi_333,rax_334,rbp_324,rbx_326,rcx_338,rdi_335,rdx_337,rsi_336,rsp_323,SCZO_329,SZO_330,Z_332
	word64 rdx_343 = DPB(rdx_337, 0x00000005, 0)
	word64 rax_350 = dcgettext(DPB(rdi_335, 0x00000000, 0), DPB(rsi_336, 0x00414780, 0), rdx_343)
	word64 rsp_353
	word64 rbp_354
	word32 edx_355
	word64 rbx_356
	word32 ebx_357
	word32 edi_358
	byte SCZO_359
	byte SZO_360
	byte C_361
	byte Z_362
	word32 esi_363
	word64 rax_364
	word64 rdi_365
	word64 rsi_366
	word64 rdx_367
	word64 rcx_368
	word32 eax_369
	word32 ecx_370
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_347,dwLoc04_4,dwLoc08_10,eax_339,ebx_327,ecx_340,edi_344,edx_342,esi_348,rax_350,rbp_341,rbx_326,rcx_338,rdi_352,rdx_343,rsi_351,rsp_323,SCZO_329,SZO_346,Z_332
		defs: C_361,eax_369,ebx_357,ecx_370,edi_358,edx_355,esi_363,rax_364,rbp_354,rbx_356,rcx_368,rdi_365,rdx_367,rsi_366,rsp_353,SCZO_359,SZO_360,Z_362
	word64 rdx_373 = DPB(rdx_367, 0x00000005, 0)
	word64 rax_380 = dcgettext(DPB(rdi_365, 0x00000000, 0), DPB(rsi_366, 0x00414928, 0), rdx_373)
	word64 rsp_383
	word64 rbp_384
	word32 edx_385
	word64 rbx_386
	word32 ebx_387
	word32 edi_388
	byte SCZO_389
	byte SZO_390
	byte C_391
	byte Z_392
	word32 esi_393
	word64 rax_394
	word64 rdi_395
	word64 rsi_396
	word64 rdx_397
	word64 rcx_398
	word32 eax_399
	word32 ecx_400
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_377,dwLoc04_4,dwLoc08_10,eax_369,ebx_357,ecx_370,edi_374,edx_372,esi_378,rax_380,rbp_371,rbx_356,rcx_368,rdi_382,rdx_373,rsi_381,rsp_353,SCZO_359,SZO_376,Z_362
		defs: C_391,eax_399,ebx_387,ecx_400,edi_388,edx_385,esi_393,rax_394,rbp_384,rbx_386,rcx_398,rdi_395,rdx_397,rsi_396,rsp_383,SCZO_389,SZO_390,Z_392
	word64 rdx_403 = DPB(rdx_397, 0x00000005, 0)
	word64 rax_410 = dcgettext(DPB(rdi_395, 0x00000000, 0), DPB(rsi_396, 0x00414AC0, 0), rdx_403)
	word64 rsp_413
	word64 rbp_414
	word32 edx_415
	word64 rbx_416
	word32 ebx_417
	word32 edi_418
	byte SCZO_419
	byte SZO_420
	byte C_421
	byte Z_422
	word32 esi_423
	word64 rax_424
	word64 rdi_425
	word64 rsi_426
	word64 rdx_427
	word64 rcx_428
	word32 eax_429
	word32 ecx_430
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_407,dwLoc04_4,dwLoc08_10,eax_399,ebx_387,ecx_400,edi_404,edx_402,esi_408,rax_410,rbp_401,rbx_386,rcx_398,rdi_412,rdx_403,rsi_411,rsp_383,SCZO_389,SZO_406,Z_392
		defs: C_421,eax_429,ebx_417,ecx_430,edi_418,edx_415,esi_423,rax_424,rbp_414,rbx_416,rcx_428,rdi_425,rdx_427,rsi_426,rsp_413,SCZO_419,SZO_420,Z_422
	word64 rdx_433 = DPB(rdx_427, 0x00000005, 0)
	word64 rax_440 = dcgettext(DPB(rdi_425, 0x00000000, 0), DPB(rsi_426, 0x00414C28, 0), rdx_433)
	word64 rsp_443
	word64 rbp_444
	word32 edx_445
	word64 rbx_446
	word32 ebx_447
	word32 edi_448
	byte SCZO_449
	byte SZO_450
	byte C_451
	byte Z_452
	word32 esi_453
	word64 rax_454
	word64 rdi_455
	word64 rsi_456
	word64 rdx_457
	word64 rcx_458
	word32 eax_459
	word32 ecx_460
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_437,dwLoc04_4,dwLoc08_10,eax_429,ebx_417,ecx_430,edi_434,edx_432,esi_438,rax_440,rbp_431,rbx_416,rcx_428,rdi_442,rdx_433,rsi_441,rsp_413,SCZO_419,SZO_436,Z_422
		defs: C_451,eax_459,ebx_447,ecx_460,edi_448,edx_445,esi_453,rax_454,rbp_444,rbx_446,rcx_458,rdi_455,rdx_457,rsi_456,rsp_443,SCZO_449,SZO_450,Z_452
	word64 rdx_463 = DPB(rdx_457, 0x00000005, 0)
	word64 rax_470 = dcgettext(DPB(rdi_455, 0x00000000, 0), DPB(rsi_456, 0x00414DA0, 0), rdx_463)
	word64 rsp_473
	word64 rbp_474
	word32 edx_475
	word64 rbx_476
	word32 ebx_477
	word32 edi_478
	byte SCZO_479
	byte SZO_480
	byte C_481
	byte Z_482
	word32 esi_483
	word64 rax_484
	word64 rdi_485
	word64 rsi_486
	word64 rdx_487
	word64 rcx_488
	word32 eax_489
	word32 ecx_490
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_467,dwLoc04_4,dwLoc08_10,eax_459,ebx_447,ecx_460,edi_464,edx_462,esi_468,rax_470,rbp_461,rbx_446,rcx_458,rdi_472,rdx_463,rsi_471,rsp_443,SCZO_449,SZO_466,Z_452
		defs: C_481,eax_489,ebx_477,ecx_490,edi_478,edx_475,esi_483,rax_484,rbp_474,rbx_476,rcx_488,rdi_485,rdx_487,rsi_486,rsp_473,SCZO_479,SZO_480,Z_482
	word64 rdx_493 = DPB(rdx_487, 0x00000005, 0)
	word64 rax_500 = dcgettext(DPB(rdi_485, 0x00000000, 0), DPB(rsi_486, 0x00414F58, 0), rdx_493)
	word64 rsp_503
	word64 rbp_504
	word32 edx_505
	word64 rbx_506
	word32 ebx_507
	word32 edi_508
	byte SCZO_509
	byte SZO_510
	byte C_511
	byte Z_512
	word32 esi_513
	word64 rax_514
	word64 rdi_515
	word64 rsi_516
	word64 rdx_517
	word64 rcx_518
	word32 eax_519
	word32 ecx_520
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_497,dwLoc04_4,dwLoc08_10,eax_489,ebx_477,ecx_490,edi_494,edx_492,esi_498,rax_500,rbp_491,rbx_476,rcx_488,rdi_502,rdx_493,rsi_501,rsp_473,SCZO_479,SZO_496,Z_482
		defs: C_511,eax_519,ebx_507,ecx_520,edi_508,edx_505,esi_513,rax_514,rbp_504,rbx_506,rcx_518,rdi_515,rdx_517,rsi_516,rsp_503,SCZO_509,SZO_510,Z_512
	word64 rdx_523 = DPB(rdx_517, 0x00000005, 0)
	word64 rax_530 = dcgettext(DPB(rdi_515, 0x00000000, 0), DPB(rsi_516, 0x00415020, 0), rdx_523)
	word64 rsp_533
	word64 rbp_534
	word32 edx_535
	word64 rbx_536
	word32 ebx_537
	word32 edi_538
	byte SCZO_539
	byte SZO_540
	byte C_541
	byte Z_542
	word32 esi_543
	word64 rax_544
	word64 rdi_545
	word64 rsi_546
	word64 rdx_547
	word64 rcx_548
	word32 eax_549
	word32 ecx_550
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_527,dwLoc04_4,dwLoc08_10,eax_519,ebx_507,ecx_520,edi_524,edx_522,esi_528,rax_530,rbp_521,rbx_506,rcx_518,rdi_532,rdx_523,rsi_531,rsp_503,SCZO_509,SZO_526,Z_512
		defs: C_541,eax_549,ebx_537,ecx_550,edi_538,edx_535,esi_543,rax_544,rbp_534,rbx_536,rcx_548,rdi_545,rdx_547,rsi_546,rsp_533,SCZO_539,SZO_540,Z_542
	word64 rdx_553 = DPB(rdx_547, 0x00000005, 0)
	word64 rax_560 = dcgettext(DPB(rdi_545, 0x00000000, 0), DPB(rsi_546, 0x004151F0, 0), rdx_553)
	word64 rsp_563
	word64 rbp_564
	word32 edx_565
	word64 rbx_566
	word32 ebx_567
	word32 edi_568
	byte SCZO_569
	byte SZO_570
	byte C_571
	byte Z_572
	word32 esi_573
	word64 rax_574
	word64 rdi_575
	word64 rsi_576
	word64 rdx_577
	word64 rcx_578
	word32 eax_579
	word32 ecx_580
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_557,dwLoc04_4,dwLoc08_10,eax_549,ebx_537,ecx_550,edi_554,edx_552,esi_558,rax_560,rbp_551,rbx_536,rcx_548,rdi_562,rdx_553,rsi_561,rsp_533,SCZO_539,SZO_556,Z_542
		defs: C_571,eax_579,ebx_567,ecx_580,edi_568,edx_565,esi_573,rax_574,rbp_564,rbx_566,rcx_578,rdi_575,rdx_577,rsi_576,rsp_563,SCZO_569,SZO_570,Z_572
	word64 rdx_583 = DPB(rdx_577, 0x00000005, 0)
	word64 rax_590 = dcgettext(DPB(rdi_575, 0x00000000, 0), DPB(rsi_576, 0x004153F0, 0), rdx_583)
	word64 rsp_593
	word64 rbp_594
	word32 edx_595
	word64 rbx_596
	word32 ebx_597
	word32 edi_598
	byte SCZO_599
	byte SZO_600
	byte C_601
	byte Z_602
	word32 esi_603
	word64 rax_604
	word64 rdi_605
	word64 rsi_606
	word64 rdx_607
	word64 rcx_608
	word32 eax_609
	word32 ecx_610
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_587,dwLoc04_4,dwLoc08_10,eax_579,ebx_567,ecx_580,edi_584,edx_582,esi_588,rax_590,rbp_581,rbx_566,rcx_578,rdi_592,rdx_583,rsi_591,rsp_563,SCZO_569,SZO_586,Z_572
		defs: C_601,eax_609,ebx_597,ecx_610,edi_598,edx_595,esi_603,rax_604,rbp_594,rbx_596,rcx_608,rdi_605,rdx_607,rsi_606,rsp_593,SCZO_599,SZO_600,Z_602
	word64 rdx_613 = DPB(rdx_607, 0x00000005, 0)
	word64 rax_620 = dcgettext(DPB(rdi_605, 0x00000000, 0), DPB(rsi_606, 0x00415480, 0), rdx_613)
	word64 rsp_623
	word64 rbp_624
	word32 edx_625
	word64 rbx_626
	word32 ebx_627
	word32 edi_628
	byte SCZO_629
	byte SZO_630
	byte C_631
	byte Z_632
	word32 esi_633
	word64 rax_634
	word64 rdi_635
	word64 rsi_636
	word64 rdx_637
	word64 rcx_638
	word32 eax_639
	word32 ecx_640
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_617,dwLoc04_4,dwLoc08_10,eax_609,ebx_597,ecx_610,edi_614,edx_612,esi_618,rax_620,rbp_611,rbx_596,rcx_608,rdi_622,rdx_613,rsi_621,rsp_593,SCZO_599,SZO_616,Z_602
		defs: C_631,eax_639,ebx_627,ecx_640,edi_628,edx_625,esi_633,rax_634,rbp_624,rbx_626,rcx_638,rdi_635,rdx_637,rsi_636,rsp_623,SCZO_629,SZO_630,Z_632
	word64 rdx_643 = DPB(rdx_637, 0x00000005, 0)
	word64 rax_650 = dcgettext(DPB(rdi_635, 0x00000000, 0), DPB(rsi_636, 0x004155E8, 0), rdx_643)
	word64 rsp_653
	word64 rbp_654
	word32 edx_655
	word64 rbx_656
	word32 ebx_657
	word32 edi_658
	byte SCZO_659
	byte SZO_660
	byte C_661
	byte Z_662
	word32 esi_663
	word64 rax_664
	word64 rdi_665
	word64 rsi_666
	word64 rdx_667
	word64 rcx_668
	word32 eax_669
	word32 ecx_670
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_647,dwLoc04_4,dwLoc08_10,eax_639,ebx_627,ecx_640,edi_644,edx_642,esi_648,rax_650,rbp_641,rbx_626,rcx_638,rdi_652,rdx_643,rsi_651,rsp_623,SCZO_629,SZO_646,Z_632
		defs: C_661,eax_669,ebx_657,ecx_670,edi_658,edx_655,esi_663,rax_664,rbp_654,rbx_656,rcx_668,rdi_665,rdx_667,rsi_666,rsp_653,SCZO_659,SZO_660,Z_662
	word64 rdx_673 = DPB(rdx_667, 0x00000005, 0)
	word64 rax_680 = dcgettext(DPB(rdi_665, 0x00000000, 0), DPB(rsi_666, 0x00415748, 0), rdx_673)
	word64 rsp_683
	word64 rbp_684
	word32 edx_685
	word64 rbx_686
	word32 ebx_687
	word32 edi_688
	byte SCZO_689
	byte SZO_690
	byte C_691
	byte Z_692
	word32 esi_693
	word64 rax_694
	word64 rdi_695
	word64 rsi_696
	word64 rdx_697
	word64 rcx_698
	word32 eax_699
	word32 ecx_700
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_677,dwLoc04_4,dwLoc08_10,eax_669,ebx_657,ecx_670,edi_674,edx_672,esi_678,rax_680,rbp_671,rbx_656,rcx_668,rdi_682,rdx_673,rsi_681,rsp_653,SCZO_659,SZO_676,Z_662
		defs: C_691,eax_699,ebx_687,ecx_700,edi_688,edx_685,esi_693,rax_694,rbp_684,rbx_686,rcx_698,rdi_695,rdx_697,rsi_696,rsp_683,SCZO_689,SZO_690,Z_692
	word64 rdx_703 = DPB(rdx_697, 0x00000005, 0)
	word64 rax_710 = dcgettext(DPB(rdi_695, 0x00000000, 0), DPB(rsi_696, 0x00415778, 0), rdx_703)
	word64 rsp_713
	word64 rbp_714
	word32 edx_715
	word64 rbx_716
	word32 ebx_717
	word32 edi_718
	byte SCZO_719
	byte SZO_720
	byte C_721
	byte Z_722
	word32 esi_723
	word64 rax_724
	word64 rdi_725
	word64 rsi_726
	word64 rdx_727
	word64 rcx_728
	word32 eax_729
	word32 ecx_730
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_707,dwLoc04_4,dwLoc08_10,eax_699,ebx_687,ecx_700,edi_704,edx_702,esi_708,rax_710,rbp_701,rbx_686,rcx_698,rdi_712,rdx_703,rsi_711,rsp_683,SCZO_689,SZO_706,Z_692
		defs: C_721,eax_729,ebx_717,ecx_730,edi_718,edx_715,esi_723,rax_724,rbp_714,rbx_716,rcx_728,rdi_725,rdx_727,rsi_726,rsp_713,SCZO_719,SZO_720,Z_722
	word64 rdx_733 = DPB(rdx_727, 0x00000005, 0)
	word64 rax_740 = dcgettext(DPB(rdi_725, 0x00000000, 0), DPB(rsi_726, 0x004157B0, 0), rdx_733)
	word64 rsp_743
	word64 rbp_744
	word32 edx_745
	word64 rbx_746
	word32 ebx_747
	word32 edi_748
	byte SCZO_749
	byte SZO_750
	byte C_751
	byte Z_752
	word32 esi_753
	word64 rax_754
	word64 rdi_755
	word64 rsi_756
	word64 rdx_757
	word64 rcx_758
	word32 eax_759
	word32 ecx_760
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_737,dwLoc04_4,dwLoc08_10,eax_729,ebx_717,ecx_730,edi_734,edx_732,esi_738,rax_740,rbp_731,rbx_716,rcx_728,rdi_742,rdx_733,rsi_741,rsp_713,SCZO_719,SZO_736,Z_722
		defs: C_751,eax_759,ebx_747,ecx_760,edi_748,edx_745,esi_753,rax_754,rbp_744,rbx_746,rcx_758,rdi_755,rdx_757,rsi_756,rsp_743,SCZO_749,SZO_750,Z_752
	word64 rdx_763 = DPB(rdx_757, 0x00000005, 0)
	word64 rax_770 = dcgettext(DPB(rdi_755, 0x00000000, 0), DPB(rsi_756, 0x00415850, 0), rdx_763)
	word64 rsp_773
	word64 rbp_774
	word32 edx_775
	word64 rbx_776
	word32 ebx_777
	word32 edi_778
	byte SCZO_779
	byte SZO_780
	byte C_781
	byte Z_782
	word32 esi_783
	word64 rax_784
	word64 rdi_785
	word64 rsi_786
	word64 rdx_787
	word64 rcx_788
	word32 eax_789
	word32 ecx_790
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_767,dwLoc04_4,dwLoc08_10,eax_759,ebx_747,ecx_760,edi_764,edx_762,esi_768,rax_770,rbp_761,rbx_746,rcx_758,rdi_772,rdx_763,rsi_771,rsp_743,SCZO_749,SZO_766,Z_752
		defs: C_781,eax_789,ebx_777,ecx_790,edi_778,edx_775,esi_783,rax_784,rbp_774,rbx_776,rcx_788,rdi_785,rdx_787,rsi_786,rsp_773,SCZO_779,SZO_780,Z_782
	word64 rdx_793 = DPB(rdx_787, 0x00000005, 0)
	word64 rax_800 = dcgettext(DPB(rdi_785, 0x00000000, 0), DPB(rsi_786, 0x00415970, 0), rdx_793)
	word64 rsp_803
	word64 rbp_804
	word32 edx_805
	word64 rbx_806
	word32 ebx_807
	word32 edi_808
	byte SCZO_809
	byte SZO_810
	byte C_811
	byte Z_812
	word32 esi_813
	word64 rax_814
	word64 rdi_815
	word64 rsi_816
	word64 rdx_817
	word64 rcx_818
	word32 eax_819
	word32 ecx_820
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_797,dwLoc04_4,dwLoc08_10,eax_789,ebx_777,ecx_790,edi_794,edx_792,esi_798,rax_800,rbp_791,rbx_776,rcx_788,rdi_802,rdx_793,rsi_801,rsp_773,SCZO_779,SZO_796,Z_782
		defs: C_811,eax_819,ebx_807,ecx_820,edi_808,edx_805,esi_813,rax_814,rbp_804,rbx_806,rcx_818,rdi_815,rdx_817,rsi_816,rsp_803,SCZO_809,SZO_810,Z_812
	word64 rdi_821 = Mem0[0x000000000061B200:word64]
	word64 rsi_822
	word64 rax_823 = fn000000000040A390(rdi_821, out rsi_822)
	word64 rax_831 = dcgettext(DPB(rdi_821, 0x00000000, 0), DPB(rsi_822, 0x004137BB, 0), DPB(rdx_817, 0x00000005, 0))
	word64 rax_838 = DPB(rax_831, __printf_chk(DPB(rdi_821, 0x00000001, 0), rax_831), 0)
	word64 rax_845 = dcgettext(DPB(rdi_821, 0x00000000, 0), DPB(rax_831, 0x004137E8, 0), DPB(rax_823, 0x00000005, 0))
	word64 rax_852 = DPB(rax_845, __printf_chk(DPB(rdi_821, 0x00000001, 0), rax_845), 0)
	word64 rdx_855 = DPB(rax_823, 0x00000005, 0)
	word64 rax_862 = dcgettext(DPB(rdi_821, 0x00000000, 0), DPB(rax_845, 0x00415A30, 0), rdx_855)
	word64 rsp_866
	word64 rbp_867
	word32 edx_868
	word64 rbx_869
	word32 ebx_870
	word32 edi_871
	byte SCZO_872
	byte SZO_873
	byte C_874
	byte Z_875
	word32 esi_876
	word64 rax_877
	word64 rdi_878
	word64 rsi_879
	word64 rdx_880
	word64 rcx_881
	word32 eax_882
	word32 ecx_883
	call fputs_unlocked (retsize: 8; depth: 24)
		uses: C_859,dwLoc04_4,dwLoc08_10,eax_863,ebx_807,ecx_846,edi_856,edx_854,esi_860,rax_862,rbp_853,rbx_806,rcx_818,rdi_865,rdx_855,rsi_864,rsp_803,SCZO_809,SZO_858,Z_812
		defs: C_874,eax_882,ebx_870,ecx_883,edi_871,edx_868,esi_876,rax_877,rbp_867,rbx_869,rcx_881,rdi_878,rdx_880,rsi_879,rsp_866,SCZO_872,SZO_873,Z_875
	word64 rsp_888
	word64 rbp_889
	word32 edx_890
	word64 rbx_891
	word32 edi_893
	byte SCZO_894
	byte SZO_895
	byte C_896
	byte Z_897
	word32 esi_898
	word64 rax_899
	word64 rdi_900
	word64 rsi_901
	word64 rcx_903
	word32 eax_904
	word32 ecx_905
	word64 rdx_902
	call setlocale (retsize: 8; depth: 24)
		uses: C_886,dwLoc04_4,dwLoc08_10,eax_882,ebx_870,ecx_883,edi_887,edx_868,esi_884,rax_877,rbp_867,rbx_869,rcx_881,rdi_878,rdx_880,rsi_879,rsp_866,SCZO_872,SZO_885,Z_875
		defs: C_896,eax_904,ebx_892,ecx_905,edi_893,edx_890,esi_898,rax_899,rbp_889,rbx_891,rcx_903,rdi_900,rdx_902,rsi_901,rsp_888,SCZO_894,SZO_895,Z_897
	branch rax_899 == 0x0000000000000000 l0000000000409BC8
// DataOut: eax ebx rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 edx:0x00000005 ebx:edi rbp:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BB2:
	rdx_902 = DPB(rdx_902, 0x00000003, 0) (alias)
	word64 rsi_934 = DPB(rsi_901, 0x0041380A, 0)
	word64 rax_936 = DPB(rax_899, strncmp(rax_899, rsi_934, rdx_902), 0)
	branch strncmp(rax_899, rsi_934, rdx_902) != 0x00000000 l0000000000409BFF
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 edx:<invalid> ebx:edi rbp:<invalid> edi:<invalid> esi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BFF:
	word64 rdi_941 = Mem0[0x000000000061B200:word64]
	word64 rsi_942
	word64 rax_943 = fn000000000040A390(rdi_941, out rsi_942)
	word64 rax_951 = dcgettext(DPB(rdi_941, 0x00000000, 0), DPB(rsi_942, 0x00415A70, 0), DPB(rdx_902, 0x00000005, 0))
	rdx_902 = rax_943
	word64 rax_960 = DPB(rax_951, __printf_chk(DPB(rdi_941, 0x00000001, 0), rax_951), 0)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 edx:0x00000003 ebx:edi rbp:<invalid> edi:<invalid> esi:0x0041380A rax:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409BC8:
	word64 rdi_911 = Mem0[0x000000000061B200:word64]
	word64 rsi_912
	fn000000000040A390(rdi_911, out rsi_912)
	word64 rax_921 = dcgettext(DPB(rdi_911, 0x00000000, 0), DPB(rsi_912, 0x00415AB8, 0), DPB(rdx_902, 0x00000005, 0))
	rdi_36 = DPB(rdi_911, 0x00000001, 0) (alias)
	word64 rax_930 = DPB(rax_921, __printf_chk(rdi_36, rax_921), 0)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 edx:<invalid> ebx:edi rbp:<invalid> edi:<invalid> esi:<invalid> rax:<invalid> rdx:<invalid> rsi:<invalid> eax:<invalid> rdi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp

l0000000000409768:
	word64 rax_45 = dcgettext(DPB(rdi, 0x00000000, 0), DPB(rsi, 0x00413D60, 0), rdx_7)
	rdi_36 = Mem0[0x000000000061A650:word64]
	word64 rax_55 = DPB(rax_45, __fprintf_chk(rdi_36, DPB(rsi, 0x00000001, 0), rax_45), 0)
// DataOut: ebx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 edx:0x00000005 ebx:edi rbp:<invalid> -8(fp):rbx -4(fp):rbp

l000000000040978D:
	exit(DPB(rdi_36, ebx_12, 0))
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 edx:<invalid> ebx:edi rbp:<invalid> esi:<invalid> edi:<invalid> rax:<invalid> rdi:<invalid> rdx:<invalid> rcx:<invalid> eax:<invalid> rsi:<invalid> ecx:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000409CC0(word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: eax rax
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn0000000000409CC0_entry:
// DataOut: fs r11 r12 r13 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409CC0:
	branch (Mem0[rsi + 0x0000000000000018:word32] & 0x0000F000) == 0x0000A000 l0000000000409D10
// DataOut: eax fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D10:
	return DPB(rax, 0x00000000, 0)
// DataOut: eax fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid>

l0000000000409CCF:
	word64 rsp_26
	word32 eax_27
	word64 rsi_28
	byte SZO_29
	byte C_30
	byte SCZO_31
	byte Z_32
	byte S_33
	byte al_35
	word64 rax_34
	call acl_extended_file (retsize: 8; depth: 16)
		uses: al_8,C,eax_5,rax_7,rsi,rsp_21,S,SCZO_22,SZO,Z_10
		defs: al_35,C_30,eax_27,rax_34,rsi_28,rsp_26,S_33,SCZO_31,SZO_29,Z_32
	branch eax_27 < 0x00000000 l0000000000409CE8
// DataOut: eax fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid>
// LocalsOut: fp(64)

l0000000000409CE8:
	word64 rax_46 = __errno_location()
	word32 eax_47 = Mem0[rax_46:word32]
	branch eax_47 == 0x0000005F l0000000000409D18
// DataOut: eax fs r11 r12 r13 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF4:
	branch eax_47 == 0x00000026 l0000000000409D18
// DataOut: eax fs r11 r12 r13 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:<invalid> rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CF9:
	branch eax_47 == 0x00000016 l0000000000409D18
// DataOut: eax fs r11 r12 r13 r13b r14 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:<invalid> rax:<invalid>
// LocalsOut: fp(64)

l0000000000409D18:
	return DPB(rax_46, 0x00000000, 0)
// DataOut: eax fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:<invalid> rax:<invalid>

l0000000000409CFE:
	rax_34 = DPB(rax_46, -(word32) (eax_47 != 0x00000010), 0) (alias)
// DataOut: eax fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:<invalid> rax:<invalid>
// LocalsOut: fp(64)

l0000000000409CDC:
	return rax_34
// DataOut: eax fs r11 r12 r13 r13b r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:<invalid> rax:<invalid> al:<invalid>

fn0000000000409CC0_exit:
// DataOut: eax rax
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> rax:<invalid> al:<invalid>



word64 fn0000000000409D20(word64 rsi, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: r11 r12 r14 rax rbp rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000409D20_entry:
	*r12Out = r12
	*r11Out = r11
// DataOut: fs r11 r12 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409D20:
	word64 r14_11
	*r14Out = 0x00000000FFFFFFFF
	word64 rbx_158 = DPB(rbx, 0x00000401, 0)
	branch rsi >u 0x0000000000000400 l0000000000409D59
// DataOut: fs r11 r12 r14 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D55_1:
	rbx_158 = rsi + 0x0000000000000001
// DataOut: fs r11 r12 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:0x00000401 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D59:
// DataOut: fs r11 r12 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:rsi + 0x0000000000000001 r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:rsi + 0x0000000000000001 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D60:
	word64 rax_139
	word64 rax_131 = malloc(rbx_158)
	branch rax_131 == 0x0000000000000000 l0000000000409DAB
// DataOut: fs r11 r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> r11:0x00000000FFFFFFFF edx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D70:
	word64 rsp_150
	word64 rdi_151
	word64 rsi_152
	word64 rax_153
	word64 r15_154
	word64 r14_155
	word64 rbp_156
	word64 r13_157
	word32 ebx_159
	byte SCZO_160
	byte CZ_161
	byte SZO_162
	byte C_163
	byte Z_164
	word64 rdx_165
	word64 r12_166
	byte S_167
	word32 eax_168
	word32 edx_169
	word64 r11_170
	call readlink (retsize: 8; depth: 56)
		uses: C_55,CZ_43,dwLoc04_4,dwLoc08_10,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_23,dwLoc24,eax_52,ebx_45,edx_42,qwLoc08,qwLoc10,qwLoc18,qwLoc30,r11_44,r12_40,r13_144,r14_37,r15_38,rax_145,rbp_56,rbx_146,rdi_149,rdx_147,rsi_148,rsp_49,S_39,SCZO_46,SZO_53,Z_54
		defs: C_163,CZ_161,eax_168,ebx_159,edx_169,r11_170,r12_166,r13_157,r14_155,r15_154,rax_153,rbp_156,rbx_158,rdi_151,rdx_165,rsi_152,rsp_150,S_167,SCZO_160,SZO_162,Z_164
	word64 r12_174 = rax_153
	*r12Out = r12_174
	branch rax_153 < 0x0000000000000000 l0000000000409DD8
// DataOut: fs r11 r12 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DD8:
	word64 rax_233 = __errno_location()
	word32 edx_235 = Mem0[rax_233:word32]
	branch edx_235 == 0x00000022 l0000000000409D86
// DataOut: edx fs r11 r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DE4:
	free(rbp_156)
	Mem244[rax_233:word32] = edx_235
	rax_139 = DPB(rax_233, 0x00000000, 0) (alias)
// DataOut: fs r11 r12 r14 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D86:
	branch rbx_158 >u rax_153 l0000000000409E08
// DataOut: fs r11 r12 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409E08:
	Mem216[rbp_156:byte] = 0x00
	word64 rbp_227
	*rbpOut = Mem216[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_229
	*rsiOut = Mem216[qwLoc08 + 0x0000000000000010:word64]
	return rbp_156
// DataOut: fs r11 r12 r14 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409D8B:
	free(rbp_156)
	branch rbx_158 >u 0x00000000FFFFFFFF l0000000000409DC0
// DataOut: fs r11 r12 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DC0:
	branch rbx_158 >u 0x00000000FFFFFFFE l0000000000409E20
// DataOut: fs r11 r12 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409E20:
	word64 rax_197 = __errno_location()
	Mem198[rax_197:word32] = 0x0000000C
	word64 rbp_210
	*rbpOut = Mem198[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_212
	*rsiOut = Mem198[qwLoc08 + 0x0000000000000010:word64]
	return DPB(rax_197, 0x00000000, 0)
// DataOut: fs r11 r12 r14 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409DC5:
	word64 r11_196
	*r11Out = 0x00000000FFFFFFFF
// DataOut: fs r11 r12 r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409D98:
	rax_131 = malloc(rbx_158 * 0x0000000000000002)
	branch rax_131 != 0x0000000000000000 l0000000000409D70
// DataOut: fs r11 r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DAB:
	rax_139 = DPB(rax_131, 0x00000000, 0) (alias)
// DataOut: fs r11 r12 r14 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409DAD:
	word64 rbp_114
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	word64 rsi_116
	*rsiOut = Mem0[qwLoc08 + 0x0000000000000010:word64]
	return rax_139
// DataOut: fs r11 r12 r14 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000030 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:<invalid> rdi:<invalid> rbp:<invalid> eax:0x00000000 rdx:<invalid> rsi:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -48(fp):<invalid> -36(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000409D20_exit:
// DataOut: r11 r12 r14 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 rax:<invalid> r15:0x00000000FFFFFFFE r14:0x00000000FFFFFFFF r13:rdi ebx:<invalid> rbx:rbx rdi:<invalid> rbp:<invalid> eax:0x00000000 rsi:<invalid> rdx:<invalid> r12:<invalid> edx:<invalid> r11:<invalid> -48(fp):<invalid> -36(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000409E50(word64 rax, word64 rcx, word64 rdx, word64 rsi, word64 rdi, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rcx rdi rdx rsi
// LiveOut: al eax ebp r12 r14 rax rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000409E50_entry:
// DataOut: fs r11 r8 rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409E50:
	word64 qwLoc38_115
	word64 rax_111
	word64 rax_29 = DPB(rax, strlen(rdi), 0)
	word64 r12_16
	*r12Out = rcx
	word64 rbp_133 = rdx
	word64 r14_129 = Mem0[rsi:word64]
	*r14Out = r14_129
	branch r14_129 == 0x0000000000000000 l0000000000409F72
// DataOut: eax fs r11 r12 r14 r15 r8 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0040(64)

l0000000000409F72:
	qwLoc38_115 = 0xFFFFFFFFFFFFFFFF
// DataOut: fs r11 r12 r14 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:rdx rax:DPB(rax, <invalid>, 0) r14:<invalid> -64(fp):rdi -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64)

l0000000000409E81:
	byte bLoc29_114 = 0x00
	qwLoc38_115 = 0xFFFFFFFFFFFFFFFF
	word64 rbx_117 = DPB(rbx, 0x00000000, 0)
	rax_130 = rax_29
// DataOut: eax fs r11 r12 r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:rdx rax:DPB(rax, <invalid>, 0) r14:<invalid> -64(fp):rdi -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EE8:
	word64 rax_130
	word64 rax_138 = DPB(rax_130, strncmp(r14_129, rdi, rax_29), 0)
	branch strncmp(r14_129, rdi, rax_29) != 0x00000000 l0000000000409ED8
	rax_130 = DPB(rax_130, strncmp(r14_129, rdi, rax_29), 0)
	branch strncmp(r14_129, rdi, rax_29) != 0x00000000 l0000000000409ED8
// DataOut: eax fs r11 r12 r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EFB:
	branch DPB(rax_130, strlen(r14_129), 0) == rax_29 l0000000000409F60
	rax_130 = DPB(rax_130, strlen(r14_129), 0)
	branch rax_130 == rax_29 l0000000000409F60
// DataOut: eax fs r11 r12 r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(32) Local -0038(0) Local -0040(64)

l0000000000409F60:
	word32 ebp_254
	*ebpOut = (word32) Mem0[qwLoc08 + 0x0000000000000008:word64]
	return rbx_117
// DataOut: al eax ebp fs r11 r12 r14 r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000409F08:
	branch qwLoc38_115 != 0xFFFFFFFFFFFFFFFF l0000000000409EA0
	branch qwLoc38_115 != 0xFFFFFFFFFFFFFFFF l0000000000409EA0
// DataOut: eax fs r11 r12 r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(32) Local -0038(64) Local -0040(64)

l0000000000409EA0:
	rax_130 = rdx
	branch rdx == 0x0000000000000000 l0000000000409F50
// DataOut: eax fs r11 r12 r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(32) Local -0038(64) Local -0040(64)

l0000000000409F50:
	bLoc29_114 = 0x01
// DataOut: eax fs r11 r12 r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:rdx r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409EAE:
	word64 rdi_224 = qwLoc38_115 *s rcx + rdx
	word64 rax_225 = DPB(rdx, memcmp(rdi_224, rbp_133, rcx), 0)
	byte cl_229 = (byte) (word32) bLoc29_114
	rax_130 = DPB(rdx, 0x00000001, 0) (alias)
	branch memcmp(rdi_224, rbp_133, rcx) == 0x00000000 l0000000000409ED4
// DataOut: cl eax fs r11 r12 r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:rdx r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0038(0) Local -0040(64)

l0000000000409ED1_1:
	cl_229 = 0x01 (alias)
// DataOut: cl eax fs r11 r12 r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> ecx:<invalid> eax:0x00000001 rbx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0038(0) Local -0040(64)

l0000000000409ED4:
	bLoc29_114 = cl_229
// DataOut: eax fs r11 r12 r13 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:<invalid> rdx:rcx rdi:<invalid> ecx:<invalid> eax:0x00000001 rbx:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409ED8:
	rbx_117 = rbx_117 + 0x0000000000000001
	rbp_133 = rbp_133 + rcx
	r14_129 = Mem0[rsi + rbx_117 * 0x0000000000000008:word64]
	*r14Out = r14_129
	branch r14_129 == 0x0000000000000000 l0000000000409F28
// DataOut: eax fs r11 r12 r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409F10:
	word64 rbx_201 = rbx_117 + 0x0000000000000001
	word64 rbp_202 = rbp_133 + rcx
	branch Mem0[rsi + rbx_201 * 0x0000000000000008:word64] != 0x0000000000000000 l0000000000409EE8
	qwLoc38_115 = rbx_201
	rbx_117 = rbx_201 + 0x0000000000000001
	rbp_133 = rbp_202 + rcx
	r14_129 = Mem0[rsi + (rbx_201 + 0x0000000000000001) * 0x0000000000000008:word64]
	*r14Out = r14_129
	branch r14_129 != 0x0000000000000000 l0000000000409EE8
// DataOut: eax fs r11 r12 r13 r14 r15 r8 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0029(0) Local -0038(0) Local -0040(64)

l0000000000409F25:
// DataOut: fs r11 r12 r14 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:rdi rdx:DPB(rax, <invalid>, 0) rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0029(0) Local -0038(64)

l0000000000409F28:
	rax_111 = 0xFFFFFFFFFFFFFFFE
	branch bLoc29_114 != 0x00 l0000000000409F3B
// DataOut: al eax fs r11 r12 r14 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64)

l0000000000409F36:
	rax_111 = qwLoc38_115
// DataOut: al eax fs r11 r12 r14 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:0xFFFFFFFE -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000409F3B:
	word32 ebp_87
	*ebpOut = (word32) Mem0[qwLoc08 + 0x0000000000000008:word64]
	return rax_111
// DataOut: al eax ebp fs r11 r12 r14 r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000409E50_exit:
// DataOut: al eax ebp r12 r14 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rsi r12:rcx rbp:<invalid> rax:<invalid> r14:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> r13:DPB(rax, <invalid>, 0) ebx:<invalid> rdx:<invalid> ecx:<invalid> eax:<invalid> -64(fp):rdi -56(fp):<invalid> -41(fp):<invalid> -40(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000409F80(word64 rdx, word64 rdi, word64 r11, selector fs, ptr64 & rbpOut, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi rdx
// LiveOut: r11 r15 rbp rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000409F80_entry:
// DataOut: fs r11 rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000409F80:
	word64 rdi_22
	word64 rdx_9 = DPB(rdx, 0x00000005, 0)
	branch rdx == 0xFFFFFFFFFFFFFFFF l0000000000409FE0
// DataOut: fs r11 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000409FE0:
	rdi_22 = DPB(rdi, 0x00000000, 0) (alias)
	dcgettext(rdi_22, DPB(rsi, 0x00415DFD, 0), rdx_9)
// DataOut: fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C edx:0x00000005 rbp:rdi rbx:rsi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000409F95:
	rdi_22 = DPB(rdi, 0x00000000, 0) (alias)
	dcgettext(rdi_22, DPB(rsi, 0x00415E18, 0), rdx_9)
// DataOut: fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C edx:0x00000005 rbp:rdi rbx:rsi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000409FA4:
	word64 rdi_25 = DPB(rdi_22, 0x00000001, 0)
	word64 r11_28
	word64 rbx_29 = fn000000000040EBF0(rdi, rdi_25, r11, fs, out r11_28)
	word64 r11_36
	word64 r15_37
	fn000000000040E970(rbx_29, 0x00000006, 0x00000000, r11_28, fs, out r11_36, out r15_37)
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C edx:0x00000005 rbp:rdi rbx:rsi esi:<invalid> edi:0x00000000 rax:<invalid> r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000402770:
	word64 rsp_54
	word64 rdx_55
	byte SCZO_56
	word32 edx_57
	word64 rbp_58
	word64 rdi_59
	word64 rbx_60
	word64 rsi_61
	byte Z_62
	word32 esi_63
	word32 edi_64
	byte SZO_65
	byte C_66
	word64 rax_67
	word64 r12_68
	word64 r8_69
	word64 rcx_70
	word32 eax_71
	word64 r11_72
	selector fs_73
	word64 r15_74
	call Mem0[0x000000000061A300:word32] (retsize: 4; depth: 4)
		uses: C_53,dwLoc04_4,dwLoc08_12,dwLoc0C_17,eax_51,edi_50,edx_8,esi_49,fs,r11_36,r12_20,r15_37,r8_42,rax_21,rbp_45,rbx_40,rcx_44,rdi_25,rdx_43,rsi_23,rsp_48,SCZO_6,SZO_52,Z_7
		defs: C_66,eax_71,edi_64,edx_57,esi_63,fs_73,r11_72,r12_68,r15_74,r8_69,rax_67,rbp_58,rbx_60,rcx_70,rdi_59,rdx_55,rsi_61,rsp_54,SCZO_56,SZO_65,Z_62
	return rbx_60
// DataOut: fs r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> esi:<invalid> edi:<invalid> rax:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> ebx:<invalid> rdi:<invalid> rcx:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> r9d:<invalid> r14d:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000409F80_exit:
// DataOut: r11 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> rbp:<invalid> rbx:<invalid> esi:<invalid> edi:<invalid> rax:<invalid> r12:<invalid> rsi:<invalid> rdx:<invalid> ebx:<invalid> rdi:<invalid> rcx:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> r9d:<invalid> r14d:<invalid> r9:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040A000(word64 rdx, word64 rsi, word64 rdi, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi rdx rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040A000_entry:
// DataOut: fs r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A000:
	word64 rdx_20 = DPB(rdx, 0x00000005, 0)
	word64 rax_35 = dcgettext(DPB(rdi, 0x00000000, 0), DPB(rsi, 0x00415E35, 0), rdx_20)
	word64 rsp_43
	word64 rdi_44
	word64 r15_45
	word32 edi_46
	byte SZO_47
	byte C_48
	word32 r14d_50
	word32 edx_54
	word32 esi_55
	byte SCZO_57
	word32 ebx_59
	word64 r12_60
	byte Z_61
	word32 eax_63
	word64 rcx_64
	selector fs_66
	word64 r11_154
	word64 r13_155
	word64 r14_156
	word64 rbx_167
	word64 rbp_168
	word64 rax_162
	word64 rdx_165
	word64 rsi_169
	call fputs_unlocked (retsize: 8; depth: 40)
		uses: C_42,dwLoc04_4,dwLoc08_10,dwLoc0C_16,dwLoc10_23,dwLoc14_25,dwLoc18_31,eax_36,ebx_39,edi_6,edx_19,esi_27,r13_18,r14_13,r14d_11,r15_5,rax_35,rbp_26,rbx_40,rdi_37,rdx_20,rsi_38,rsp_32,SZO_41
		defs: C_48,eax_63,ebx_59,edi_46,edx_54,esi_55,fs_66,r11_65,r12_60,r13_52,r14_62,r14d_50,r15_45,rax_58,rbp_51,rbx_56,rcx_64,rdi_44,rdx_53,rsi_49,rsp_43,SCZO_57,SZO_47,Z_61
	word64 r12_161 = Mem0[r15_45:word64]
	branch r12_161 != 0x0000000000000000 l000000000040A086
// DataOut: eax fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A086:
	branch rbx_167 == 0x0000000000000000 l000000000040A050
	branch rbx_167 == 0x0000000000000000 l000000000040A050
// DataOut: eax fs r11 r12 r13 r14 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A08B:
	word64 rax_209 = DPB(rax_162, memcmp(r14_156, rbp_168, r13_155), 0)
	branch memcmp(r14_156, rbp_168, r13_155) != 0x00000000 l000000000040A050
	rax_162 = DPB(rax_162, memcmp(r14_156, rbp_168, r13_155), 0)
	rdx_165 = r13_155
	rsi_169 = rbp_168
	branch memcmp(r14_156, rbp_168, r13_155) != 0x00000000 l000000000040A050
// DataOut: fs r11 r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A050:
	word64 rbp_184
	word64 r15_188
	rbx_167 = fn000000000040EC10(r12_161, r11_154, fs_66, out rbp_184, out r11_154, out r13_155, out r14_156, out r15_188)
	rdx_165 = DPB(rdx_165, 0x00415E4A, 0) (alias)
	rsi_169 = DPB(rsi_169, 0x00000001, 0) (alias)
	rax_162 = DPB(rax_162, __fprintf_chk(Mem0[0x000000000061A650:word64], rsi_169, rdx_165), 0)
	rbp_168 = rbp_184 + r13_155
	r12_161 = Mem0[r15_188 + rbx_167 * 0x0000000000000008:word64]
	branch r12_161 == 0x0000000000000000 l000000000040A0D0
// DataOut: eax fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A09D:
	word64 rbp_225
	word64 r11_226
	word64 r13_227
	word64 r14_228
	word64 r15_229
	word64 rbx_230 = fn000000000040EC10(r12_161, r11_154, fs_66, out rbp_225, out r11_226, out r13_227, out r14_228, out r15_229)
	word64 rax_239 = DPB(rax_162, __fprintf_chk(Mem0[0x000000000061A650:word64], DPB(rbp_168, 0x00000001, 0), DPB(r13_155, 0x00415E52, 0)), 0)
	word64 r12_240 = Mem0[r15_229 + rbx_230 * 0x0000000000000008:word64]
	branch r12_240 != 0x0000000000000000 l000000000040A086
	word64 r15_251
	rbx_167 = fn000000000040EC10(r12_240, r11_226, fs_66, out rbp_168, out r11_154, out r13_155, out r14_156, out r15_251)
	rdx_165 = DPB(r13_155, 0x00415E52, 0) (alias)
	rsi_169 = DPB(rbp_168, 0x00000001, 0) (alias)
	rax_162 = DPB(rax_162, __fprintf_chk(Mem0[0x000000000061A650:word64], rsi_169, rdx_165), 0)
	r12_161 = Mem0[r15_251 + rbx_167 * 0x0000000000000008:word64]
	branch r12_161 != 0x0000000000000000 l000000000040A086
// DataOut: eax fs r11 r12 r13 r14 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A047:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r15:rdi edi:<invalid> r14d:0x00000000 r13:rdx edx:<invalid> rbp:rsi esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:0x00000000 r12:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0D0:
	word64 rdi_87 = Mem0[0x000000000061A650:word64]
	branch Mem0[rdi_87 + 0x0000000000000028:word64] >=u Mem0[rdi_87 + 0x0000000000000030:word64] l000000000040A0FB
	word64 rdi_91 = Mem0[0x000000000061A650:word64]
	word64 rax_93 = Mem0[rdi_91 + 0x0000000000000028:word64]
	branch rax_93 >=u Mem0[rdi_91 + 0x0000000000000030:word64] l000000000040A0FB
// DataOut: rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0FB:
	word64 rsp_145 = Mem0[rsp_43 + 0x0000000000000018:word64]
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A10E_thunk_fn0000000000402400:
	fn0000000000402400()
	return rsp_145 + 0x0000000000000020
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A0E1:
	Mem106[rdi_91 + 0x0000000000000028:word64] = rax_93 + 0x0000000000000001
	Mem107[rax_93:byte] = 0x0A
	word64 rsp_113 = Mem107[rsp_43 + 0x0000000000000018:word64]
	word64 rdi_119 = Mem107[rsp_113 + 0x0000000000000018:word64]
	return rsp_113 + 0x0000000000000020
	Mem122[rdi_119 + 0x0000000000000028:word64] = rax_93 + 0x0000000000000001
	Mem123[rax_93:byte] = 0x0A
	return Mem123[rsp_113 + 0x0000000000000038:word64] + 0x0000000000000020
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:0x01 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A000_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> edi:<invalid> r14d:<invalid> r13:<invalid> edx:<invalid> rbp:<invalid> esi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> ebx:<invalid> r12:<invalid> rdx:<invalid> r14:<invalid> rcx:<invalid> eax:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040A120(word64 rax, word64 rcx, word64 rdx, word64 rsi, word64 r8, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 r8 rax rcx rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A120_entry:
// DataOut: fs r11 r8 rax rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A120:
	word64 rsp_37
	word32 ebp_38
	word64 r12_39
	word64 r14_40
	word64 rax_41 = fn0000000000409E50(rax, r8, rcx, rdx, rsi, out rsp_37, out ebp_38, out r12_39, out r14_40)
	branch rax_41 < 0x0000000000000000 l000000000040A165
// DataOut: fs r11 r14 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A165:
	word64 rbp_83
	word64 r11_84
	word64 r15_85
	word64 rbx_86 = fn0000000000409F80(rax_41, r14_40, r11, fs, out rbp_83, out r11_84, out r15_85)
	word64 rsp_90 = fn000000000040A000(r15_85, rbp_83, rbx_86, r11_84, fs)
	word64 rsp_91
	word64 rdi_92
	word64 r15_93
	word64 r8_94
	word64 rsi_95
	word64 r14_96
	word64 rbp_97
	word64 r13_98
	word64 r9_99
	word64 r12_100
	word64 rcx_101
	word64 rbx_102
	word64 rdx_103
	byte SCZO_104
	word64 rax_105
	byte SZO_106
	byte C_107
	byte S_108
	word32 r13d_109
	word64 r11_110
	selector fs_111
	word32 ebp_112
	call r13d (retsize: 4; depth: 4)
		uses: C_44,dwLoc04_4,dwLoc08_9,dwLoc0C_13,dwLoc10_18,dwLoc14_22,dwLoc18_29,ebp_38,fs,r11_84,r12_39,r13_15,r13d,r14_40,r15_85,r8,r9,rax_41,rbp_83,rbx_86,rcx_26,rdi_89,rdx_87,rsi_88,rsp_90,S_43,SCZO_35,SZO_42
		defs: C_107,ebp_112,fs_111,r11_110,r12_100,r13_98,r13d_109,r14_96,r15_93,r8_94,r9_99,rax_105,rbp_97,rbx_102,rcx_101,rdi_92,rdx_103,rsi_95,rsp_91,S_108,SCZO_104,SZO_106
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:r8 rbx:rdx rdx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> ecx:<invalid> eax:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A156:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> edx:<invalid> esi:<invalid> edi:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> al:0xFF cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A120_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> r12:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> ebx:<invalid> edx:<invalid> esi:<invalid> edi:<invalid> r8:<invalid> eax:<invalid> r14d:<invalid> ecx:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r9d:<invalid> r9:<invalid> al:0xFF cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040A2B0(word64 rdi, word64 qwArg00, word64 qwArg10, word64 qwArg18, ptr64 & rbxOut, ptr64 & rbpOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rbp rbx rsi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh dl dx eax ebp ebx ecx edx esi esp rax rbp rbx rcx rdx rsi rsp si sil sp spl
// Preserved:
// Stack args: Stack +0010(64) Stack +0018(64)
fn000000000040A2B0_entry:
// DataOut: fs r12 r13 r14 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0010(64) Stack +0018(64)

l000000000040A2B0:
	word64 rdx_26
	word64 rbp_16 = DPB(rbp, Mem0[rdi:byte] == 0x2F, 0)
	word64 rsi_18
	word64 rax_19 = fn000000000040A390(rdi, out rsi_18)
	word64 rcx_21 = rax_19 - rdi
	branch rcx_21 <=u rbp_16 l000000000040A2FD
// DataOut: fs r12 r13 r14 rax rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0010(64) Stack +0018(64)

l000000000040A2D2:
	rdx_26 = rcx_21 - 0x0000000000000001
	branch Mem0[rax_19 - 0x0000000000000001:byte] == 0x2F l000000000040A2EE
// DataOut: fs r12 r13 r14 rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 ebp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0010(64) Stack +0018(64)

l000000000040A2EE:
	branch rbp_16 <u rdx_26 l000000000040A2E0
// DataOut: fs r12 r13 r14 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 ebp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0010(64) Stack +0018(64)

l000000000040A2E0:
	rax_19 = rdx_26 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rdx_26:byte] != 0x2F l000000000040A2F3
// DataOut: fs r12 r13 r14 rax rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 ebp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0010(64) Stack +0018(64)

l000000000040A2EB:
	rdx_26 = rax_19
// DataOut: fs r12 r13 r14 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 ebp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0010(64) Stack +0018(64)

l000000000040A2DC:
// DataOut: fs r12 r13 r14 rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 ebp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0010(64) Stack +0018(64)

l000000000040A2FD:
	rdx_26 = rcx_21
// DataOut: fs r12 r13 r14 rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 ebp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp
// LocalsOut: fp(64) Stack +0010(64) Stack +0018(64)

l000000000040A2F3:
	return rax_19
	word64 rbx_39
	*rbxOut = qwArg10
	word64 rbp_42
	*rbpOut = qwArg18
	return rdx_26
// DataOut: fs r12 r13 r14 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000010 ebp:<invalid> rbx:rdi bpl:Test(EQ,Z) rcx:<invalid> rdx:<invalid> rax:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp

fn000000000040A2B0_exit:
// DataOut: rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000020 ebp:<invalid> rbx:<invalid> bpl:<invalid> rcx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn000000000040A390(word64 rdi, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: rax rsi
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A390_entry:
// DataOut: ebx fs r11 r12 r13 r14 r14b r15 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A390:
	word32 edx_101 = (word32) Mem0[rdi:byte]
	word64 rax_100 = rdi
	branch (byte) edx_101 != 0x2F l000000000040A3AC
// DataOut: dl ebx fs r11 r12 r13 r14 r14b r15 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A39B:
// DataOut: ebx fs r11 r12 r13 r14 r14b r15 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:(word32) Mem0[rdi:byte] rax:rdi

l000000000040A3A0:
	rax_100 = rax_100 + 0x0000000000000001
	edx_101 = (word32) Mem0[rax_100:byte]
	branch (byte) edx_101 == 0x2F l000000000040A3A0
// DataOut: dl ebx fs r11 r12 r13 r14 r14b r15 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3AC:
	byte sil_17 = 0x00
	word64 rsi_19 = DPB(rsi, 0x00000000, 0)
	*rsiOut = rsi_19
	word64 rdx_20 = rax_100
	branch (byte) edx_101 == 0x00 l000000000040A3F7
// DataOut: ebx fs r11 r12 r13 r14 r14b r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid>

l000000000040A3F7:
	return rax_100
// DataOut: ebx fs r11 r12 r13 r14 r14b r15 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:0x00000000 rdx:<invalid>

l000000000040A3B7:
// DataOut: ebx fs r11 r12 r13 r14 r14b r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:0x00000000 rdx:<invalid>

l000000000040A3C0:
	rdx_20 = rdx_20 + 0x0000000000000001
	byte cl_50 = (byte) (word32) Mem0[rdx_20:byte]
	branch cl_50 == 0x00 l000000000040A3E5
// DataOut: cl ebx fs r11 r12 r13 r14 r14b r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid>

l000000000040A3CB:
	branch cl_50 == 0x2F l000000000040A3F0
// DataOut: ebx fs r11 r12 r13 r14 r14b r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid>

l000000000040A3F0:
	sil_17 = 0x01 (alias)
	*rsiOut = DPB(rsi_19, 0x00000001, 0)
// DataOut: ebx fs r11 r12 r13 r14 r14b r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid>

l000000000040A3D0:
	branch sil_17 == 0x00 l000000000040A3C0
// DataOut: ebx fs r11 r12 r13 r14 r14b r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid>

l000000000040A3D5:
	rdx_20 = rdx_20 + 0x0000000000000001
	rax_100 = rdx_20
	cl_50 = (byte) (word32) Mem0[rdx_20:byte] (alias)
	sil_17 = 0x00 (alias)
	rsi_19 = DPB(rsi_19, 0x00000000, 0) (alias)
	*rsiOut = rsi_19
	branch cl_50 != 0x00 l000000000040A3CB
// DataOut: cl ebx fs r11 r12 r13 r14 r14b r15 rax rbp rbx rdi rdx rsi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid>

l000000000040A3E5:
	return rax_100
// DataOut: ebx fs r11 r12 r13 r14 r14b r15 rax rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid>

fn000000000040A390_exit:
// DataOut: rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> rdx:<invalid>



word64 fn000000000040A400(word64 rax, word64 rdi, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: rax rsp
// Trashed: SCZO ah al ax dh dl dx eax edx esp rax rdx rsp sp spl
// Preserved: rbx
fn000000000040A400_entry:
// DataOut: r11 r12 r14 r14b r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A400:
	word64 rax_23 = DPB(rax, strlen(rdi), 0)
	branch rax_23 <=u 0x0000000000000001 l000000000040A41A
// DataOut: r11 r12 r14 r14b r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A40F:
	word64 rdx_31 = rax_23 - 0x0000000000000001
	branch Mem0[rdi - 0x0000000000000001 + rax_23:byte] == 0x2F l000000000040A420
// DataOut: r11 r12 r14 r14b r15 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rax:<invalid> rdx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040A420:
	rax_23 = rdx_31
	branch rdx_31 != 0x0000000000000001 l000000000040A40F
// DataOut: r11 r12 r14 r14b r15 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rax:<invalid> rdx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040A429:
	return rdx_31
// DataOut: r11 r12 r14 r14b r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rax:<invalid> rdx:<invalid> -4(fp):rbx

l000000000040A41A:
	return rax_23
// DataOut: r11 r12 r14 r14b r15 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rax:<invalid> rdx:<invalid> -4(fp):rbx

fn000000000040A400_exit:
// DataOut: rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdx:<invalid> -4(fp):rbx



void fn000000000040A600(word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx rax rdi rdx
// Preserved: rsp
fn000000000040A600_entry:
// DataOut: fs r11 r11d r13 r13d r14 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A600:
	word32 edi_4 = Mem0[rdi + 0x0000000000000018:word32]
// DataOut: edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A430:
	byte dl_12
	branch (edi_4 & 0x0000F000) == 0x00008000 l000000000040A5B0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid>

l000000000040A5B0:
	dl_12 = 0x2D (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A442:
	branch (edi_4 & 0x0000F000) == 0x00004000 l000000000040A5C0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A5C0:
	dl_12 = 0x64 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A44D:
	branch (edi_4 & 0x0000F000) == 0x00006000 l000000000040A5D0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A5D0:
	dl_12 = 0x62 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A458:
	branch (edi_4 & 0x0000F000) == 0x00002000 l000000000040A5A0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A5A0:
	dl_12 = 0x63 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A463:
	branch (edi_4 & 0x0000F000) == 0x0000A000 l000000000040A5E0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A5E0:
	dl_12 = 0x6C (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A46E:
	branch (edi_4 & 0x0000F000) == 0x00001000 l000000000040A5F0
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A5F0:
	dl_12 = 0x70 (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A479:
	dl_12 = 0x73 (alias)
	branch (edi_4 & 0x0000F000) == 0x0000C000 l000000000040A48B
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid>

l000000000040A488_1:
	dl_12 = 0x3F (alias)
// DataOut: dl edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:0x0000003F edx:0x00000073

l000000000040A48B:
	byte al_131
	Mem14[rsi:byte] = dl_12
	Mem23[rsi + 0x0000000000000001:byte] = (byte) ((0x00000000 - ((edi_4 & 0x00000100) <u 0x00000001) & 0xFFFFFFBB) + 0x00000072)
	Mem32[rsi + 0x0000000000000002:byte] = (byte) ((0x00000000 - ((edi_4 & 0x00000080) <u 0x00000001) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_37 = 0x00000000 - ((edi_4 & 0x00000040) <u 0x00000001)
	branch (edi_4 & 0x00000800) == 0x00000000 l000000000040A590
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

l000000000040A590:
	al_131 = (byte) ((eax_37 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

l000000000040A4CD:
	al_131 = (byte) ((eax_37 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

l000000000040A4D3:
	byte al_123
	Mem43[rsi + 0x0000000000000003:byte] = al_131
	Mem52[rsi + 0x0000000000000004:byte] = (byte) ((0x00000000 - ((edi_4 & 0x00000020) <u 0x00000001) & 0xFFFFFFBB) + 0x00000072)
	Mem61[rsi + 0x0000000000000005:byte] = (byte) ((0x00000000 - ((edi_4 & 0x00000010) <u 0x00000001) & 0xFFFFFFB6) + 0x00000077)
	word32 eax_66 = 0x00000000 - ((edi_4 & 0x00000008) <u 0x00000001)
	branch (edi_4 & 0x00000400) == 0x00000000 l000000000040A580
// DataOut: eax edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

l000000000040A580:
	al_123 = (byte) ((eax_66 & 0xFFFFFFB5) + 0x00000078) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

l000000000040A50E:
	al_123 = (byte) ((eax_66 & 0xFFFFFFE0) + 0x00000073) (alias)
// DataOut: al edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

l000000000040A514:
	Mem72[rsi + 0x0000000000000006:byte] = al_123
	Mem81[rsi + 0x0000000000000007:byte] = (byte) ((0x00000000 - ((edi_4 & 0x00000004) <u 0x00000001) & 0xFFFFFFBB) + 0x00000072)
	Mem93[rsi + 0x0000000000000008:byte] = (byte) ((0x00000000 - ((edi_4 & 0x00000002) <u 0x00000001) & 0xFFFFFFB6) + 0x00000077)
	branch (edi_4 & 0x00000200) == 0x00000000 l000000000040A560
// DataOut: edi fs r11 r11d r13 r13d r14 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

l000000000040A560:
	Mem111[rsi + 0x000000000000000A:byte] = 0x20
	Mem112[rsi + 0x000000000000000B:byte] = 0x00
	Mem120[rsi + 0x0000000000000009:byte] = (byte) ((0x00000000 - ((edi_4 & 0x00000001) <u 0x00000001) & 0xFFFFFFB5) + 0x00000078)
	return
// DataOut: fs r11 r11d r13 r13d r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

l000000000040A545:
	Mem100[rsi + 0x000000000000000A:byte] = 0x20
	Mem101[rsi + 0x000000000000000B:byte] = 0x00
	Mem109[rsi + 0x0000000000000009:byte] = (byte) ((0x00000000 - ((edi_4 & 0x00000001) <u 0x00000001) & 0xFFFFFFE0) + 0x00000074)
	return
// DataOut: fs r11 r11d r13 r13d r14 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>

fn000000000040A600_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> eax:<invalid> edx:<invalid>



word64 fn000000000040A610(word64 rdx, word64 rsi, word64 rdi, ptr64 & rbpOut, ptr64 & r14bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14b rax rbp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040A610_entry:
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A610:
	word64 rdx_7
	word64 rsp_8
	word64 rbp_9
	word64 rsi_10
	word64 rdi_11
	byte r14b_12
	word64 rax_13 = fn000000000040A630(rdx, rsi, rdi, out rdx_7, out rsp_8, out rbp_9, out rsi_10, out rdi_11, out r14b_12)
	branch rax_13 == 0x0000000000000000 l000000000040A623
// DataOut: r11 r14b rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A623:
	fn0000000000410E50()
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> rax:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid>
// Terminates process

l000000000040A628_thunk_fn000000000040A630:
	word64 rdx_29
	word64 rsp_30
	word64 rbp_31
	word64 rsi_32
	word64 rdi_33
	byte r14b_34
	return fn000000000040A630(rdx_7, rsi_10, rdi_11, out rdx_29, out rsp_30, out rbp_31, out rsi_32, out rdi_33, out r14b_34)
// DataOut: r11 r14b rax rbp
// DataOut (flags): 
// SymbolicIn:

l000000000040A61E:
	return rax_13
// DataOut: r11 r14b rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> rax:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid>

fn000000000040A610_exit:
// DataOut: r14b rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r12:<invalid> rbp:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:<invalid> rax:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> al:<invalid> rbx:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid>



word64 fn000000000040A630(word64 rdx, word64 rsi, word64 rdi, ptr64 & rdxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r14bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: r14b rax rbp rdi rdx rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040A630_entry:
// DataOut: r11 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040A630:
	word64 rsi_29
	word64 rax_30 = fn000000000040A390(rdi, out rsi_29)
	word64 rsp_130
	word64 rax_34 = fn000000000040A400(rax_30, rax_30, out rsp_130)
	word64 rdx_38 = rax_30 - rdi
	*rdxOut = rdx_38
	Mem43[rsp_130:word64] = rdx_38 + rax_34
	byte r14b_11
	*r14bOut = 0x00
	word64 r14_13 = DPB(r14, 0x00000000, 0)
	branch rax_34 == 0x0000000000000000 l000000000040A679
// DataOut: r11 r14 r14b r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A66D:
	byte r14b_179 = Mem43[rax_30 - 0x0000000000000001 + rax_34:byte] != 0x2F
	*r14bOut = r14b_179
	r14_13 = DPB(r14, r14b_179, 0) (alias)
// DataOut: r11 r14 r14b r15 rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:0x00000000 r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A679:
	word64 rbx_169 = rsi + 0x0000000000000001
	branch Mem43[rsi:byte] == 0x2F l000000000040A700
// DataOut: r11 r14 r14b r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A700:
	rbx_169 = rbx_169 + 0x0000000000000000
	branch Mem43[rbx_169:byte] != 0x2F l000000000040A682
// DataOut: r11 r14 r14b r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A70D:
	rbx_169 = rbx_169 + 0x0000000000000001
	branch Mem43[rbx_169 + 0x0000000000000001:byte] != 0x2F l000000000040A682
// DataOut: r11 r14 r14b r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A71A:
// DataOut: r11 r14 r14b r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A682:
	word64 rax_151
	word64 rax_53 = DPB(rax_34, strlen(rbx_169), 0)
	word64 rcx_54 = Mem43[rsp_130:word64]
	Mem55[rsp_130 + 0x0000000000000008:word64] = rax_53
	word64 rax_58 = malloc(rcx_54 + 0x0000000000000001 + r14_13 + rax_53)
	branch rax_58 == 0x0000000000000000 l000000000040A720
// DataOut: r11 r13 r14 r14b r15 rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) edx:<invalid> rax:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A720:
	rax_151 = DPB(rax_58, 0x00000000, 0) (alias)
// DataOut: r11 r14b rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6A8:
	word64 rsp_103
	word64 rdi_104
	word64 r15_105
	word64 rdx_106
	word64 rsi_107
	word32 r14d_108
	byte SZO_109
	byte C_110
	word64 rbp_111
	word64 r12_112
	word64 rbx_113
	byte SCZO_114
	word64 rax_115
	byte Z_116
	byte r14b_117
	word64 rcx_118
	word64 r14_119
	word64 r13_120
	word32 eax_121
	byte al_122
	call mempcpy (retsize: 8; depth: 8)
		uses: al_60,C_63,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_19,dwLoc14_22,dwLoc18_26,eax_59,r12_20,r13_64,r14_44,r14b_45,r14d_46,r15_6,rax_58,rbp_23,rbx_51,rcx_54,rdi_101,rdx_100,rsi_102,rsp_33,SCZO_50,SZO_61,Z_62
		defs: al_122,C_110,eax_121,r12_112,r13_120,r14_119,r14b_117,r14d_108,r15_105,rax_115,rbp_111,rbx_113,rcx_118,rdi_104,rdx_106,rsi_107,rsp_103,SCZO_114,SZO_109,Z_116
	Mem126[rax_115:byte] = 0x2F
	word64 rdi_127 = rax_115 + r14_119
	branch r15_105 == 0x0000000000000000 l000000000040A6D5
// DataOut: r11 r13 r14b rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6C3:
	Mem163[rdi_127:word64] = rdi_127 - DPB(rax_115, Mem126[rbp_111:byte] == 0x2F, 0)
// DataOut: r11 r13 r14b rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6D5:
	word64 rdi_131
	word64 r15_132
	word64 rdx_133
	word64 rsi_134
	word32 r14d_135
	byte SZO_136
	byte C_137
	word64 rbp_138
	word64 r12_139
	word64 rbx_140
	byte SCZO_141
	word64 rax_142
	byte Z_143
	byte r14b_144
	word64 rcx_145
	word64 r14_146
	word64 r13_147
	word32 eax_148
	byte al_149
	call mempcpy (retsize: 8; depth: 8)
		uses: al_122,C_125,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_19,dwLoc14_22,dwLoc18_26,eax_121,r12_112,r13_120,r14_119,r14b_117,r14d_108,r15_105,rax_115,rbp_111,rbx_113,rcx_118,rdi_127,rdx_128,rsi_129,rsp_103,SCZO_114,SZO_123,Z_124
		defs: al_149,C_137,eax_148,r12_139,r13_147,r14_146,r14b_144,r14d_135,r15_132,rax_142,rbp_138,rbx_140,rcx_145,rdi_131,rdx_133,rsi_134,rsp_130,SCZO_141,SZO_136,Z_143
	Mem150[rax_142:byte] = 0x00
	rax_151 = r13_147
// DataOut: r11 r14b rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> al:Test(EQ,Z) edx:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040A6E8:
	word64 rsp_86 = Mem55[rsp_130 + 0x0000000000000028:word64]
	word64 rbp_88
	*rbpOut = Mem55[rsp_86 + 0x0000000000000008:word64]
	word64 rsi_90
	*rsiOut = Mem55[rsp_86 + 0x0000000000000010:word64]
	word64 rdi_92
	*rdiOut = Mem55[rsp_86 + 0x0000000000000018:word64]
	word64 rsp_93
	*rspOut = rsp_86 + 0x0000000000000020
	return rax_151
// DataOut: r11 r14b rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:rsi rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040A630_exit:
// DataOut: r14b rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:rdx r14d:<invalid> r12:rdi rbp:<invalid> rbx:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r14b:Test(NE,Z) rax:<invalid> rcx:<invalid> r13:<invalid> eax:<invalid> al:<invalid> edx:<invalid> ecx:<invalid> esi:<invalid> -48(fp):rax -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040A730(word64 rdi, word32 r14d, ptr64 & r9Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r14d rdi
// LiveOut: eax r9 rax
// Trashed: SCZO ah al ax ch cl cx dh dl dx eax ecx edx esi r10 r10b r10d r10w r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdx rsi si sil
// Preserved: rsp
fn000000000040A730_entry:
	*r9Out = r9
// DataOut: fs r11d r12 r13d r14 r14d r15 r15d r9 rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A730:
	word64 rdx_128 = Mem0[rdi:word64]
	byte cl_131 = (byte) (word32) Mem0[rdx_128:byte]
	branch cl_131 == 0x00 l000000000040A7CD
// DataOut: cl fs r11d r12 r13d r14 r14d r15 r15d r9 rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040A7CD:
	return DPB(rax, 0x00000000, 0)
// DataOut: eax fs r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A73E:
	byte r8b_144 = 0x00
	word64 rax_138 = DPB(rax, 0x00000000, 0)
	word64 r10_35 = DPB(r10, 0x00000000, 0)
// DataOut: cl eax fs r10 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid>

l000000000040A776:
	branch r8b_144 != 0x00 l000000000040A750
	branch r8b_144 != 0x00 l000000000040A750
// DataOut: cl eax fs r10 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A750:
	r8b_144 = 0x00 (alias)
	branch ((int32) cl_131 & 0xFFFFFFDF) <=u 0x0000005A l000000000040A768
// DataOut: cl eax fs r10 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A77B:
	branch cl_131 == 0x2E l000000000040A7B8
	branch cl_131 == 0x2E l000000000040A7B8
// DataOut: cl eax fs r10 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A7B8:
	branch rax_138 == 0x0000000000000000 l000000000040A7C8
// DataOut: fs r10 r11d r12 r13d r14 r14d r15 r15d r8b r9 rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A7C8:
	rax_138 = rdx_128
// DataOut: fs r10 r11d r12 r13d r14 r14d r15 r15d r8b r9 rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A7BD:
	rax_138 = DPB(rax_138, 0x00000001, 0) (alias)
// DataOut: eax fs r10 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 rax:<invalid> esi:<invalid> r9d:r14 - 0x0000000000000030

l000000000040A780:
	branch r14 <=u 0x0000000000000039 l000000000040A768
	word32 esi_109 = (int32) cl_131
	r9 = DPB(r9, r14 - 0x0000000000000030, 0) (alias)
	*r9Out = r9
	branch r14 <=u 0x0000000000000039 l000000000040A768
// DataOut: cl eax esi fs r10 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A78D:
	word32 esi_115 = (esi_109 & 0xFFFFFFDF) - 0x00000041
	branch esi_115 >u 0x00000019 l000000000040A761
	branch (esi_115 & 0xFFFFFFDF) >u 0x0000005A l000000000040A761
// DataOut: cl eax fs r10 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 r9d:r14 - 0x0000000000000030 esi:(int32) cl rax:<invalid>

l000000000040A761:
	branch cl_131 == 0x7E l000000000040A768
// DataOut: eax fs r10 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A764_1:
	rax_138 = r10_35
// DataOut: eax fs r10 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A768:
	rdx_128 = rdx_128 + 0x0000000000000001
	Mem85[rdi:word64] = rdx_128
	cl_131 = (byte) (word32) Mem85[rdx_128:byte] (alias)
	branch cl_131 == 0x00 l000000000040A7B0
// DataOut: cl eax fs r10 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

l000000000040A798:
	word64 rdx_122 = rdx_128 + 0x0000000000000001
	Mem123[rdi:word64] = rdx_122
	branch (byte) (word32) Mem123[rdx_122:byte] != 0x00 l000000000040A776
	Mem129[rdi:word64] = rdx_122 + 0x0000000000000001
	rdx_128 = rdx_122 + 0x0000000000000001
	cl_131 = (byte) (word32) Mem129[rdx_122 + 0x0000000000000001:byte] (alias)
	branch cl_131 != 0x00 l000000000040A776
// DataOut: cl eax fs r10 r11d r12 r13d r14 r14d r15 r15d r8b r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 r9d:r14 - 0x0000000000000030 esi:(((int32) cl & 0xFFFFFFDF) - 0x00000041 & 0xFFFFFFDF) - 0x00000041 rax:<invalid>

l000000000040A7A6:
// DataOut: eax fs r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 r9d:r14 - 0x0000000000000030 esi:(((int32) cl & 0xFFFFFFDF) - 0x00000041 & 0xFFFFFFDF) - 0x00000041 rax:<invalid>

l000000000040A7B0:
	return rax_138
// DataOut: eax fs r11d r12 r13d r14 r14d r15 r15d r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> r8d:0x00000000 eax:<invalid> r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>

fn000000000040A730_exit:
// DataOut: eax r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rdx:<invalid> ecx:<invalid> eax:<invalid> r8d:0x00000000 r10d:0x00000000 esi:<invalid> r9d:r14 - 0x0000000000000030 rax:<invalid>



word64 fn000000000040AB30(word32 eax, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rdi
// LiveOut: rsp
// Trashed: SCZO ah al ax di dil eax edi esi esp rax rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AB30_entry:
// DataOut: eax fs r11d r13 r14 r15b rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -000C(64) Local -0014(64)

l000000000040AB30:
	word64 rdi_9 = DPB(rdi, 0x00000000, 0)
	word64 rax_12 = DPB(rax, clock_gettime(rdi_9, rdi), 0)
	word32 eax_13 = clock_gettime(rdi_9, rdi)
	branch eax_13 == 0x00000000 l000000000040AB67
// DataOut: fs r11d r13 r14 r15b rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -000C(64) Local -0014(64)

l000000000040AB46:
	word64 rsp_37
	word64 rbx_38
	word64 rsi_39
	word64 rdi_40
	word32 edi_41
	byte SZO_42
	byte C_43
	byte SCZO_44
	word64 rax_45
	word32 eax_46
	byte Z_47
	word32 esi_48
	call gettimeofday (retsize: 8; depth: 28)
		uses: C_34,dwLoc04_4,eax_13,edi_8,esi_32,qwLoc04,rax_12,rbx_7,rdi_35,rsi_6,rsp_10,SCZO,SZO_33,Z_15
		defs: C_43,eax_46,edi_41,esi_48,rax_45,rbx_38,rdi_40,rsi_39,rsp_37,SCZO_44,SZO_42,Z_47
	Mem51[rbx_38:word64] = qwLoc14
	Mem56[rbx_38 + 0x0000000000000008:word64] = qwLoc0C *s 1000
// DataOut: fs r11d r13 r14 r15b
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rsi:rdi rbx:rdi edi:0x00000000 rax:DPB(rax, <invalid>, 0) -4(fp):rbx
// LocalsOut: fp(64)

l000000000040AB67:
	return fp + 0x0000000000000004
// DataOut: fs r11d r13 r14 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rsi:<invalid> rbx:rdi edi:<invalid> rax:<invalid> esi:<invalid> rdi:<invalid> -4(fp):rbx

fn000000000040AB30_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rsi:<invalid> rbx:rbx edi:<invalid> rax:<invalid> esi:<invalid> rdi:<invalid> -4(fp):rbx



void fn000000000040AB70(word64 rax)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx di dil eax ecx edi esi rax rcx rdi rsi si sil
// Preserved: rsp
fn000000000040AB70_entry:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AB70:
	word64 rsp_6
	byte SCZO_7
	word32 esi_8
	byte SZO_9
	byte C_10
	word64 rax_11
	byte Z_12
	word32 eax_13
	word64 rsi_14
	word32 edi_15
	word32 ecx_16
	word64 rcx_17
	word64 rdi_18
	byte al_19
	call setlocale (retsize: 8; depth: 16)
		uses: C_5,esi_3,rsp_2,SZO_4
		defs: al_19,C_10,eax_13,ecx_16,edi_15,esi_8,rax_11,rcx_17,rdi_18,rsi_14,rsp_6,SCZO_7,SZO_9,Z_12
	branch rax_11 == 0x0000000000000000 l000000000040ABB0
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ABB0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 esi:<invalid>

l000000000040AB80:
	branch Mem0[rax_11:byte] != 0x43 l000000000040AB98
// DataOut: rax
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 esi:<invalid>
// LocalsOut: fp(64)

l000000000040AB85:
	branch Mem0[rax_11 + 0x0000000000000001:byte] != 0x00 l000000000040AB98
// DataOut: rax
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 esi:<invalid>
// LocalsOut: fp(64)

l000000000040AB98:
	word64 rsi_45 = rax_11
	word64 rdi_48 = DPB(rdi_18, 0x00415E6A, 0)
	word64 rcx_50 = DPB(rcx_17, 0x00000006, 0)
// DataOut: rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 esi:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5:
	branch rcx_50 == 0x0000000000000000 l000000000040ABA7
// DataOut: rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 esi:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA5_1:
	rsi_45 = rsi_93 + 0x0000000000000001
	rdi_48 = rdi_94 + 0x0000000000000001
	rcx_50 = rcx_50 - 0x0000000000000001
	word64 rsi_93 = rsi_45
	word64 rdi_94 = rdi_48
	branch Mem0[rsi_93:byte] != Mem0[rdi_94:byte] l000000000040ABA5
// DataOut: rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 esi:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l000000000040ABA7:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 esi:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> rcx:<invalid>

l000000000040AB8B:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 esi:<invalid>

fn000000000040AB70_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp esi:<invalid> eax:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> rcx:<invalid> al:Test(NE,Z)



void fn000000000040ABC0(word64 rdi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r8 r8b r8d r8w r9 r9b r9d r9w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040ABC0_entry:
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABC0:
	word64 rdi_144
	branch rdi >u 0x0000000000000009 l000000000040AC4F
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC4F:
	rdi_144 = rdi | 0x0000000000000001
	branch (rdi | 0x0000000000000001) != 0xFFFFFFFFFFFFFFFF l000000000040ABCF
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AC5D:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:rdi | 0x0000000000000001

l000000000040ABCA:
	rdi_144 = DPB(rdi, 0x0000000B, 0) (alias)
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ABCF:
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:0x0000000B rdi:rdi | 0x0000000000000001

l000000000040ABE0:
	branch rdi_144 <=u 0x0000000000000009 l000000000040AC48
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> ecx:<invalid> edx:<invalid> eax:<invalid> esi:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040AC48:
	rcx = DPB(rcx, 0x00000003, 0) (alias)
// DataOut: r8 rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> ecx:<invalid> edx:<invalid> eax:<invalid> esi:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040ABE6:
	word64 rdx_rax_101 = rdi_144 *u 0x00000000AAAAAAAB
	branch rdi_144 == (rdx_rax_101 >>u 0x0000000000000001) + (rdx_rax_101 >>u 0x0000000000000001) * 0x0000000000000002 l000000000040AC3A
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> ecx:<invalid> edx:<invalid> eax:<invalid> esi:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040ABF8:
	rsi = DPB(rsi, 0x00000009, 0) (alias)
	rcx = DPB(rcx, 0x00000003, 0) (alias)
// DataOut: r8 rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> ecx:<invalid> edx:<invalid> eax:<invalid> esi:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040AC21:
	word64 rsi_121 = rsi + r8
	word64 rcx_122 = rcx + 0x0000000000000002
	branch rsi_121 <u rdi_144 l000000000040AC10
	rsi = rsi_121 + r8
	rcx = rcx_122 + 0x0000000000000002
	branch rsi <u rdi_144 l000000000040AC10
// DataOut: r8 rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> esi:<invalid> ecx:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> r8:<invalid>

l000000000040AC10:
	r8 = r8 + 0x0000000000000008
	branch (uint64) (rdi_144 % (rcx_122 + 0x0000000000000002)) == 0x0000000000000000 l000000000040AC3A
// DataOut: r8 rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> esi:<invalid> ecx:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> r8:<invalid>

l000000000040AC2D:
	branch (uint64) (rdi_144 % rcx) != 0x0000000000000000 l000000000040AC44
	branch (uint64) (rdi_144 % rcx) != 0x0000000000000000 l000000000040AC44
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rdi:<invalid> r9:0x00000000AAAAAAAB ecx:<invalid> rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> esi:<invalid> rsi:<invalid> rcx:<invalid> edx:<invalid> r8:<invalid>

l000000000040AC3A:
	word64 rdi_69 = rdi_144 + 0x0000000000000002
	branch rdi_69 != 0xFFFFFFFFFFFFFFFF l000000000040ABE0
	rdi_144 = rdi_69 + 0x0000000000000002
	branch rdi_69 != 0x0000000000000003 l000000000040ABE0
// DataOut: r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp edi:<invalid> rdi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> ecx:<invalid> edx:<invalid> eax:<invalid> esi:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

l000000000040AC44:
	return
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> edi:<invalid> r9:0x00000000AAAAAAAB rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> ecx:<invalid> edx:<invalid> eax:<invalid> esi:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>

fn000000000040ABC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rdi:<invalid> rax:<invalid> edi:<invalid> r9:0x00000000AAAAAAAB Sequence rdx:rax:<invalid> rdx:<invalid> ecx:<invalid> edx:<invalid> eax:<invalid> esi:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid>



word64 fn000000000040AC80(word64 rax, word64 rdi, ptr64 & rspOut, ptr64 & rsiOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: al rax rdi rsi rsp
// Trashed: SCZO ah al ax di dil eax edi esi esp rax rdi rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040AC80_entry:
// DataOut: cl r11 r12 r13 r13b r14 r15b r8 rax rbp rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC80:
	word64 rsp_11
	word64 rbx_12
	word64 rdi_13
	word64 rsi_14
	word64 rax_15
	byte SCZO_16
	byte C_17
	call Mem0[rdi + 0x0000000000000030:word32] (retsize: 4; depth: 8)
		uses: dwLoc04_4,rbx_6,rdi_8,rsi_10,rsp_2
		defs: C_17,rax_15,rbx_12,rdi_13,rsi_14,rsp_11,SCZO_16
	branch rax_15 >=u Mem0[rbx_12 + 0x0000000000000010:word64] l000000000040AC9D
// DataOut: cl r11 r12 r13 r13b r14 r15b r8 rax rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AC9D:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> rsi:<invalid> -4(fp):rbx

l000000000040AC94:
	word64 rsp_25
	*rspOut = fp + 0x0000000000000004
	return (rax_15 << 0x0000000000000004) + Mem0[rbx_12:word64]
// DataOut: al cl r11 r12 r13 r13b r14 r15b r8 rax rbp rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi rdi:<invalid> rsi:<invalid> -4(fp):rbx

fn000000000040AC80_exit:
// DataOut: al rax rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rdi:<invalid> rsi:<invalid> rax:<invalid> -4(fp):rbx



word64 fn000000000040ACB0(word64 rax, byte cl, word64 rsi, word64 rdi, word64 r8, word64 r11, ptr64 & rcxOut, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rdiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  cl r11 r8 rax rdi rsi
// LiveOut: cl eax ebx rax rbx rcx rdi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx di dil eax ebp ebx ecx edi esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r9 r9b r9d r9w rax rbp rbx rcx rdi rsi rsp si sil sp spl
// Preserved:
fn000000000040ACB0_entry:
	*rcxOut = rcx
// DataOut: cl r11 r8 rax rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ACB0:
	word64 rsi_26
	word64 rdi_27
	word64 rsp_137
	word64 rax_239 = fn000000000040AC80(rax, rdi, out rsp_137, out rsi_26, out rdi_27)
	Mem30[rsi_26:word64] = rax_239
	byte r13b_12 = (byte) ecx
	word64 rbp_166 = rdi
	word64 rsi_136 = Mem30[rax_239:word64]
	word64 rbx_165 = rax_239
	branch rsi_136 == 0x0000000000000000 l000000000040AD4F
// DataOut: al cl r11 r12 r13b r8 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040ACD7:
	branch rsi == rsi_136 l000000000040ACE9
// DataOut: al cl r11 r12 r13b r8 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACDC:
	word64 rsi_192
	word64 r14_193
	word64 rdx_194
	word32 r13d_196
	word32 ecx_197
	word64 rdi_199
	word64 rax_201
	byte SZO_202
	byte C_203
	byte Z_204
	byte SCZO_205
	byte al_206
	word32 esi_207
	word64 r9_209
	word64 r10_211
	word64 rcx_213
	byte cl_214
	word64 r12_198
	call Mem30[rdi + 0x0000000000000038:word32] (retsize: 4; depth: 4)
		uses: al_29,C_36,cl,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_18,dwLoc14_23,ecx,esi_32,r10,r11,r12_16,r13b_12,r13d_11,r14_6,r8,r9,rax_28,rbp_20,rbx_33,rcx,rdi_190,rdx,rsi_31,rsp_25,SCZO_116,SZO_34,Z_117
		defs: al_206,C_203,cl_214,ecx_197,esi_207,r10_211,r11_212,r12_198,r13b_208,r13d_196,r14_193,r8_210,r9_209,rax_201,rbp_195,rbx_200,rcx_213,rdi_199,rdx_194,rsi_192,rsp_191,SCZO_205,SZO_202,Z_204
	branch al_206 == 0x00 l000000000040AD46
// DataOut: cl r11 r12 r13b r8 rbp rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD46:
	rax_239 = Mem30[rbx_165 + 0x0000000000000008:word64]
	branch rax_239 != 0x0000000000000000 l000000000040AD30
// DataOut: al cl r12 r13b rax rbp rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD30:
	rsi_136 = Mem30[rax_239:word64]
	branch rsi_136 == r12_198 l000000000040AD67
// DataOut: al cl r12 r13b rax rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD38:
	word64 rsi_294
	word64 r14_295
	word64 rdx_296
	word32 r13d_298
	word32 ecx_299
	word64 rdi_301
	word64 rax_303
	byte SZO_304
	byte C_305
	byte Z_306
	byte SCZO_307
	byte al_308
	word32 esi_309
	word64 r9_311
	word64 r8_312
	word64 r10_313
	word64 r11_314
	word64 rcx_315
	byte cl_316
	call Mem30[rbp_166 + 0x0000000000000038:word32] (retsize: 4; depth: 4)
		uses: al_240,C_243,cl_234,dwLoc04_4,dwLoc08_9,dwLoc0C_15,dwLoc10_18,dwLoc14_23,ecx_233,esi_245,r10_231,r11_220,r12_225,r13b_222,r13d_226,r14_228,r8_221,r9_230,rax_239,rbp_236,rbx_235,rcx_232,rdi_292,rdx_227,rsi_244,rsp_238,SCZO_246,SZO_241,Z_247
		defs: al_308,C_305,cl_316,ecx_299,esi_309,r10_313,r11_314,r12_300,r13b_310,r13d_298,r14_295,r8_312,r9_311,rax_303,rbp_297,rbx_302,rcx_315,rdi_301,rdx_296,rsi_294,rsp_293,SCZO_307,SZO_304,Z_306
	branch al_308 != 0x00 l000000000040AD60
// DataOut: cl r12 r13b rbp rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD60:
	rax_239 = Mem30[rbx_165 + 0x0000000000000008:word64]
	rsi_136 = Mem30[rax_239:word64]
// DataOut: cl r13b rax rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD67:
	branch r13b_12 == 0x00 l000000000040AD1C
// DataOut: cl rax rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD6C:
	Mem273[rbx_165 + 0x0000000000000008:word64] = Mem30[rax_239 + 0x0000000000000008:word64]
	Mem274[rax_239:word64] = 0x0000000000000000
	word64 rcx_275 = Mem274[rbp_166 + 0x0000000000000048:word64]
	*rcxOut = rcx_275
	Mem278[rax_239 + 0x0000000000000008:word64] = rcx_275
	Mem279[rbp_166 + 0x0000000000000048:word64] = rax_239
	word64 rbx_282
	*rbxOut = Mem279[rsp_137:word64]
	word64 rsp_291
	*rspOut = Mem279[rsp_137 + 0x0000000000000010:word64] + 0x0000000000000018
	return rsi_136
// DataOut: cl eax ebx rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD42:
	rbx_165 = Mem30[rbx_165 + 0x0000000000000008:word64]
// DataOut: cl r12 r13b rbp rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD4F:
	word64 rsp_93 = Mem30[rsp_137 + 0x0000000000000010:word64]
	word64 rsi_98 = Mem30[rsp_93 + 0x0000000000000010:word64]
	return rax_239
	word64 rbx_100
	*rbxOut = Mem30[rsp_93 + 0x0000000000000018:word64]
	word64 rsp_115
	*rspOut = Mem30[rsp_93 + 0x0000000000000028:word64] + 0x0000000000000018
	return DPB(rsi_98, 0x00000000, 0)
// DataOut: cl eax ebx rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACE6:
	rsi_136 = Mem30[rbx_165:word64]
// DataOut: cl r11 r13b r8 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACE9:
	branch r13b_12 == 0x00 l000000000040AD1C
// DataOut: cl r11 r8 rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACEE:
	word64 rax_174 = Mem30[rbx_165 + 0x0000000000000008:word64]
	branch rax_174 == 0x0000000000000000 l000000000040AD98
// DataOut: cl r11 r8 rax rbp rbx rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD98:
	Mem189[rbx_165:word64] = 0x0000000000000000
// DataOut: cl rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040ACFB:
	word64 r10_180 = Mem30[r8 + 0x0000000000000008:word64]
	Mem181[r11:word64] = Mem30[r8:word64]
	Mem182[r11 + 0x0000000000000008:word64] = r10_180
	Mem183[rax_174:word64] = 0x0000000000000000
	word64 rcx_184 = Mem183[rbp_166 + 0x0000000000000048:word64]
	*rcxOut = rcx_184
	Mem187[rax_174 + 0x0000000000000008:word64] = rcx_184
	Mem188[rbp_166 + 0x0000000000000048:word64] = rax_174
// DataOut: cl rcx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

l000000000040AD1C:
	word64 rbx_138
	*rbxOut = Mem30[rsp_137:word64]
	word64 rsp_149
	*rspOut = Mem30[rsp_137 + 0x0000000000000010:word64] + 0x0000000000000018
	return rsi_136
// DataOut: cl eax ebx rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:rdi rsi:<invalid> rbx:<invalid> rdi:<invalid> rax:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi

fn000000000040ACB0_exit:
// DataOut: cl eax ebx rax rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r14:rdx r13d:ecx r12:rsi rbp:<invalid> rsi:<invalid> rbx:<invalid> esi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -20(fp):rbx -16(fp):rbp -12(fp):fp - 0x0000000000000008 -8(fp):rbp -4(fp):rsi



void fn000000000040AE40(word64 rax, byte dl, word64 rbp, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dl rax rbp rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040AE40_entry:
// DataOut: dl rax rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040AE40:
	byte r15b_7 = (byte) edx
	word64 r13_102 = Mem0[rsi:word64]
	branch r13_102 >=u Mem0[rsi + 0x0000000000000008:word64] l000000000040AEEF
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AE64:
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000020 r15d:edx r14:rsi r12:rdi r13:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE68:
	rbp = Mem0[rbp:word64]
	branch rbp == 0x0000000000000000 l000000000040AEE1
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE71:
	word64 rbx_132 = Mem0[rbp + 0x0000000000000008:word64]
	branch rbx_132 != 0x0000000000000000 l000000000040AE94
// DataOut: r12 r13 r14 r15b rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE94:
	word64 rbp_226 = Mem0[rbx_132:word64]
	word64 rsp_229
	word64 rsi_230
	word64 rdi_231
	rax = fn000000000040AC80(rax, rdi, out rsp_229, out rsi_230, out rdi_231)
	word64 rdx_236 = Mem0[rbx_132 + 0x0000000000000008:word64]
	branch Mem0[rax:word64] != 0x0000000000000000 l000000000040AE80
// DataOut: r12 r13 r14 r15b rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE80:
	Mem268[rbx_132 + 0x0000000000000008:word64] = Mem0[rax + 0x0000000000000008:word64]
	Mem269[rax + 0x0000000000000008:word64] = rbx_132
	branch rdx_236 == 0x0000000000000000 l000000000040AED0
// DataOut: r12 r13 r14 r15b rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEAC:
	Mem253[rax:word64] = rbp_226
	Mem255[rdi + 0x0000000000000018:word64] = Mem253[rdi + 0x0000000000000018:word64] + 0x0000000000000001
	Mem259[rbx_132:word64] = 0x0000000000000000
	rax = Mem259[rdi + 0x0000000000000048:word64]
	Mem262[rbx_132 + 0x0000000000000008:word64] = rax
	Mem263[rdi + 0x0000000000000048:word64] = rbx_132
	branch rdx_236 != 0x0000000000000000 l000000000040AE91
// DataOut: r12 r13 r14 r15b rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE91:
	rbx_132 = rdx_236
// DataOut: r12 r13 r14 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AECF:
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AED0:
	rbp = Mem0[rbp_226:word64]
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AE7A:
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AED4:
	Mem151[rbp + 0x0000000000000008:word64] = 0x0000000000000000
	branch r15b_7 == 0x00 l000000000040AF08
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF08:
	word64 rsp_154
	word64 rsi_155
	word64 rdi_156
	rax = fn000000000040AC80(rax, rdi, out rsp_154, out rsi_155, out rdi_156)
	branch Mem151[rax:word64] == 0x0000000000000000 l000000000040AF5B
// DataOut: r12 r13 r14 r15b rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF5B:
	Mem217[rax:word64] = rbp
	Mem219[rdi + 0x0000000000000018:word64] = Mem217[rdi + 0x0000000000000018:word64] + 0x0000000000000001
// DataOut: r12 r13 r14 r15b rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF1C:
	rax = Mem151[rdi + 0x0000000000000048:word64]
	branch rax == 0x0000000000000000 l000000000040AF66
// DataOut: r12 r13 r14 r15b rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF66:
	rax = malloc(DPB(rdi_156, 0x00000010, 0))
	branch rax != 0x0000000000000000 l000000000040AF2F
// DataOut: r12 r13 r14 r15b rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF75:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> edi:0x00000010 rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF26:
	Mem193[rdi + 0x0000000000000048:word64] = Mem151[rax + 0x0000000000000008:word64]
// DataOut: r12 r13 r14 r15b rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF2F:
	word64 rdx_188 = Mem151[rax + 0x0000000000000008:word64]
	Mem189[rax:word64] = rbp
	Mem190[rax + 0x0000000000000008:word64] = rdx_188
	Mem191[rax + 0x0000000000000008:word64] = rax
// DataOut: r12 r13 r14 r15b rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF3E:
	Mem170[rbp:word64] = 0x0000000000000000
	Mem172[rsi_155 + 0x0000000000000018:word64] = Mem170[rsi_155 + 0x0000000000000018:word64] - 0x0000000000000001
	r13_102 = r13_102 + 0x0000000000000010
	branch Mem172[rsi + 0x0000000000000008:word64] >u r13_102 l000000000040AE68
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AF59:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> rax:<invalid> rdx:<invalid> edi:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEE1:
	r13_102 = r13_102 + 0x0000000000000010
	branch Mem0[rsi + 0x0000000000000008:word64] >u r13_102 l000000000040AE68
// DataOut: r12 r13 r14 r15b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040AEEF:
	return
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbp:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> edi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040AE40_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:edx r14:rsi r12:rdi r13:<invalid> rbx:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> eax:<invalid> rax:<invalid> edi:<invalid> rdx:<invalid> rcx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040AFB0(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: ah al ax eax rax
// Preserved: rsp
fn000000000040AFB0_entry:
// DataOut: rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040AFB0:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040AFB0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid>



void fn000000000040B640(word64 rdi, word64 r13, word64 r15, word64 qwArg00, word64 qwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r13 r15 rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx di dil eax ebp ebx edi esp r12 r12b r12d r12w rax rbp rbx rdi rsp sp spl
// Preserved:
// Stack args: Stack +0000(64) Stack +0004(64)
fn000000000040B640_entry:
// DataOut: r13 r15 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B640:
	word64 rax_115
	word64 rbp_132 = rdi
	branch Mem0[rdi + 0x0000000000000040:word64] == 0x0000000000000000 l000000000040B655
// DataOut: r13 r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B64E:
	branch Mem0[rdi + 0x0000000000000020:word64] != 0x0000000000000000 l000000000040B6C6
// DataOut: r13 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6C6:
	word64 r12_122 = Mem0[r15:word64]
	branch r12_122 >=u Mem0[r15 + 0x0000000000000008:word64] l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6CF:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6D0:
	word64 rdi_134 = Mem0[r12_122:word64]
	branch rdi_134 != 0x0000000000000000 l000000000040B6E3
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6E3:
	word64 rsp_157
	word64 rdi_159
	word64 rbx_160
	byte SCZO_161
	byte Z_162
	word64 rax_163
	byte C_166
	byte SZO_167
	byte CZ_168
	word64 r15_169
	call Mem0[rbp_132 + 0x0000000000000040:word32] (retsize: 4; depth: 16)
		uses: C_138,CZ_127,dwLoc04_4,dwLoc08_7,dwLoc0C_12,qwLoc0C,r12_129,r13_128,r15_126,rax_130,rbp_132,rbx_135,rdi_134,rsp_133,SCZO_131,SZO_136,Z_137
		defs: C_166,CZ_168,r12_164,r13_165,r15_169,rax_163,rbp_158,rbx_160,rdi_159,rsp_157,SCZO_161,SZO_167,Z_162
	branch Mem0[rbx_160 + 0x0000000000000008:word64] != 0x0000000000000000 l000000000040B6E0
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6E0:
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6DC:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6EF:
	word64 r12_150 = r12_122 + 0x0000000000000010
	branch Mem0[rbp_132 + 0x0000000000000008:word64] >u r12_150 l000000000040B6D0
	rax_115 = Mem0[rbp_132 + 0x0000000000000008:word64]
	r12_122 = r12_150 + 0x0000000000000010
	branch rax_115 >u r12_150 + 0x0000000000000010 l000000000040B6D0
// DataOut: r12 r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6FC:
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rdi:<invalid> rbx:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B655:
	rax_115 = Mem0[rdi + 0x0000000000000008:word64]
// DataOut: r13 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B659:
	word64 r12_104 = Mem0[r13:word64] + 0x0000000000000008
	branch r12_104 >=u rax_115 l000000000040B693
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B662:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B668:
	word64 rdi_107 = Mem0[r12_104 + 0x0000000000000000:word64]
	branch rdi_107 != 0x0000000000000000 l000000000040B67B
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B67B:
	word64 rbx_108 = Mem0[rdi_107 + 0x0000000000000008:word64]
	free(rdi_107)
	branch rbx_108 != 0x0000000000000000 l000000000040B678
// DataOut: r12 r13 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B678:
	rdi_107 = rbx_108
// DataOut: r12 r13 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B672:
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B689:
	word64 r12_101 = r12_104 + 0x0000000000000010
	branch Mem0[r13 + 0x0000000000000008:word64] >u r12_101 l000000000040B668
	r12_104 = r12_101 + 0x0000000000000010
	branch Mem0[r13 + 0x0000000000000008:word64] >u r12_101 + 0x0000000000000010 l000000000040B668
// DataOut: r12 r13 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B693:
	branch Mem0[rbp_132 + 0x0000000000000048:word64] != 0x0000000000000000 l000000000040B6A3
	branch Mem0[rbp_132 + 0x0000000000000048:word64] != 0x0000000000000000 l000000000040B6A3
	word64 rdi_31 = Mem0[rbp_132 + 0x0000000000000048:word64]
	branch rdi_31 != 0x0000000000000000 l000000000040B6A3
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6A3:
	word64 rbx_70 = Mem0[rdi_31 + 0x0000000000000008:word64]
	free(rdi_31)
	branch rbx_70 != 0x0000000000000000 l000000000040B6A0
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6A0:
	rdi_31 = rbx_70
// DataOut: rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B69C:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0000(64) Stack +0004(64)

l000000000040B6B1:
	free(Mem0[rbp_132:word64])
	free(qwArg00)
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004021F0:
	word64 rsp_56
	word64 rbp_57
	word64 rdi_58
	word64 rbx_59
	byte SCZO_60
	byte Z_61
	word64 rax_62
	word64 r12_63
	word64 r13_64
	byte C_65
	byte SZO_66
	byte CZ_67
	word64 r15_68
	call Mem0[0x000000000061A040:word32] (retsize: 4; depth: 4)
		uses: C_36,CZ_17,dwLoc04_4,dwLoc08_7,dwLoc0C_12,qwLoc0C,r12_19,r13_18,r15_16,rax_20,rbp_52,rbx_49,rdi_51,rsp_55,SCZO_21,SZO_35,Z_37
		defs: C_65,CZ_67,r12_63,r13_64,r15_68,rax_62,rbp_57,rbx_59,rdi_58,rsp_56,SCZO_60,SZO_66,Z_61
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rax:<invalid> rdi:fp rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040B640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> r12:<invalid> rax:<invalid> rdi:<invalid> rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



void fn000000000040BB90(word64 rax, word64 rsi, word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040BB90_entry:
// DataOut: r11 r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BB90:
	word64 rcx_25
	word64 rbx_26
	word64 rsp_27
	word64 rdi_28
	word64 rax_29 = fn000000000040ACB0(rax, 0x01, rsi, rdi, r8, r11, out rcx_25, out rbx_26, out rsp_27, out rdi_28)
	word32 ebp_34 = (word32) rax_29
	branch rax_29 == 0x0000000000000000 l000000000040BD08
// DataOut: cl ebp ebx rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040BD08:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:fp - 0x0000000000000014 rbp:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBB6:
	word64 rdx_66 = Mem0[rsp_27 + 0x0000000000000008:word64]
	Mem68[rbx_26 + 0x0000000000000020:word64] = Mem0[rbx_26 + 0x0000000000000020:word64] - 0x0000000000000001
	branch Mem68[rdx_66:word64] == 0x0000000000000000 l000000000040BBD0
// DataOut: cl ebp ebx rbx rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:fp - 0x0000000000000014 rbp:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBD0:
	word64 rax_72 = Mem68[rbx_26 + 0x0000000000000018:word64]
	Mem79[rbx_26 + 0x0000000000000018:word64] = rax_72 - 0x0000000000000001
	byte al_75 = (byte) (rax_72 - 0x0000000000000001)
	branch rax_72 < 0x0000000000000001 l000000000040BCE8
// DataOut: al cl eax ebp ebx rax rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BCE8:
	branch rcx_25 == 0x0000000000000000 l000000000040BCF8
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BCF4_1:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> eax:eax & 0x00000001 r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BCF8:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> eax:eax & 0x00000001 r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBE5:
	branch rcx_25 == 0x0000000000000000 l000000000040BBE9
// DataOut: al cl ebp ebx rax rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBE5_1:
// DataOut: al cl ebp ebx rax rcx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBE9:
	Mem81[rax_72 - 0x0000000000000076:byte] = __ror(Mem79[rax_72 - 0x0000000000000076:byte], 0x43)
	Mem84[rax_72 - 0x0000000000000076:byte] = Mem81[rax_72 - 0x0000000000000076:byte] + 0x01 + ((Mem79[rax_72 - 0x0000000000000076:byte] & 0x08) != 0x00)
	Mem87[rsp_27 - 0x0000000000000004:word32] = rbx_26
	Mem89[rax_72 - 0x000000000000007C:byte] = Mem87[rax_72 - 0x000000000000007C:byte] - 0x01
	Mem91[rdi_28:byte] = __ror(Mem89[rdi_28:byte], 0x88)
	__syscall(0x00)
	Mem93[rax_72 - 0x0000000000000001:byte] = Mem91[rax_72 - 0x0000000000000001:byte] + al_75
	branch rcx_25 == 0x0000000000000000 l000000000040BBFF
// DataOut: cl ebp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBFB_1:
// DataOut: cl ebp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -32(fp):rdi -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBFF:
	Mem96[rsp_27 - 0x0000000000000008:word32] = ebp_34
	Mem101[rsp_27 - 0x0000000000001163:word32] = rsp_27 - 0x0000000000000008
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> rax:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -32(fp):rdi -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040BBC6:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:0x00000001 rbx:<invalid> rdx:<invalid> rbp:<invalid> eax:0x00000000 r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> rax:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040BB90_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:<invalid> rbx:<invalid> rdx:<invalid> rbp:<invalid> eax:<invalid> rax:<invalid> r14:<invalid> r13d:<invalid> r12:<invalid> rsi:<invalid> esi:<invalid> ebp:<invalid> cl:<invalid> esp:<invalid> rdi:<invalid> r9:<invalid> r10:<invalid> rcx:<invalid> -4479(fp):fp - 0x0000000000000024 -36(fp):ebp -32(fp):rdi -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040BD70(word64 rcx, word32 edx, word64 rbp, word64 rsi, word64 rdi, word64 r8, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r14dOut, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs r8 rbp rcx rdi rsi
// LiveOut: r11 r11d r14d r15 r8 r9 rax rbp rsp
// Trashed: SCZOP ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040BD70_entry:
	def fp
	def rdi
	def edx
	def rsi
	def rbp
	def rbx
	def rcx
	def r8
	def fs
	def Mem0
	def rax
	def rdx_rax
	def bLocB0
	def qwLoc18
	def qwLoc10
	def qwLoc08
	def rspOut
	def rbpOut
	def r8Out
	def r9Out
	def r11Out
	def r14dOut
	def r15Out
	def dwLoc74
	def qwLoc90
	def qwLoc98
	def rLoc4
	def wLoc6A
	def wLoc6C
	def rLoc90
	def rLoc3
	def rLoc2
	def qwLoc68
	def rLoc1
	def rLocD0
// DataOut: edx fs r8 r9 rbp rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040BD70:
	rsp_1 = fp
	rsp_2 = fp - 0x0000000000000004
	dwLoc04_4 = rdi
	eax_6 = edx
	eax_7 = eax_6 & 0x00000003
	rsp_8 = fp - 0x0000000000000008
	dwLoc08_10 = rsi
	r14_11 = rsi
	r14d_12 = (word32) r14_11 (alias)
	rsp_13 = fp - 0x000000000000000C
	dwLoc0C_15 = rbp
	v11_16 = fp - 0x000000000000000C
	rsp_17 = fp - 0x0000000000000010
	dwLoc10_18 = fp - 0x000000000000000C
	r12_19 = rdi
	r12d_20 = (word32) r12_19 (alias)
	rsp_21 = fp - 0x0000000000000014
	dwLoc14_22 = rbp
	rsp_23 = fp - 0x0000000000000018
	dwLoc18_25 = rbx
	rbx_27 = rcx
	ebx_28 = (word32) rbx_27 (alias)
	rsp_29 = fp - 0x00000000000000D0
	dwLoc98_30 = eax_7
	eax_31 = edx
	qwLocA0_32 = rsi
	eax_33 = eax_31 & 0x00000020
	dwLocB0_34 = edx
	qwLocA8_36 = r8
	rcx_39 = Mem0[fs:0x00000028:word64]
	qwLoc28_40 = rcx_39
	ecx_41 = 0x00000000
	SCZO_42 = cond(eax_33 - 0x00000001)
	C_43 = SCZO_42 (alias)
	dwLoc78_44 = eax_33
	eax_45 = 0x00000000 - (eax_33 <u 0x00000001)
	rax_47 = DPB(rax, eax_45, 0) (alias)
	dwLocAC_48 = eax_45
	v19_49 = dwLocAC_48 & 0xFFFFFFE8
	dwLocAC_50 = v19_49
	SZO_51 = cond(dwLocAC_50)
	v20_52 = dwLocAC_50 + 0x00000400
	dwLocAC_53 = v20_52
	SCZO_54 = cond(v20_52)
	call localeconv (retsize: 8; depth: 216)
		uses: C_43,dwLoc04_4,dwLoc08_10,dwLoc0C_15,dwLoc10_18,dwLoc14_22,dwLoc18_25,dwLoc78_44,dwLoc98_30,dwLocAC_53,dwLocB0_34,eax_45,ebx_28,ecx_41,edx,fs,qwLoc28_40,qwLocA0_32,qwLocA8_36,r12_19,r12d_20,r14_11,r14d_12,r8,rax_47,rbp,rbx_27,rcx_39,rdi,rsi,rsp_29,SCZO_54,SZO_51
		defs: ah_88,al_91,ax_89,C_60,cl_82,CZ_76,CZP_86,dil_94,dl_92,eax_57,ebx_79,ecx_70,edi_81,edx_58,esi_84,fs_69,P_90,r10_80,r10b_98,r10d_97,r11_74,r12_64,r12d_85,r13_72,r14_62,r14d_87,r15_71,r15d_96,r8_68,r9_95,r9d_83,rax_73,rbp_63,rbx_65,rcx_66,rdi_56,rdx_75,rsi_61,rsp_55,S_78,SCZO_67,sil_93,SZO_59,Z_77
	r15_99 = Mem0[r8_68:word64]
	r15d_100 = (word32) r15_99 (alias)
	r13_101 = rax_73
	rdi_102 = r15_99
	rax_103 = DPB(rax_73, strlen(rdi_102), 0)
	rbp_104 = Mem0[rbp_63 + 0x0000000000000010:word64]
	r11_105 = rax_103
	r13_106 = Mem0[r13_101 + 0x0000000000000008:word64]
	rax_107 = rax_103 - 0x0000000000000001
	edx_108 = 0x00000001
	rdx_109 = DPB(rdx_75, edx_108, 0) (alias)
	dl_110 = (byte) edx_108 (alias)
	SCZO_111 = cond(rax_107 - 0x0000000000000010)
	C_112 = SCZO_111 (alias)
	SZO_113 = SCZO_111 (alias)
	Z_114 = SCZO_111 (alias)
	CZ_115 = SCZO_111 (alias)
	S_116 = SCZO_111 (alias)
	CZP_117 = SCZO_111 (alias)
	rdi_118 = r13_106
	edi_119 = (word32) rdi_118 (alias)
	dil_120 = (byte) rdi_118 (alias)
	eax_121 = 0x00413990
	rax_122 = DPB(rax_107, eax_121, 0) (alias)
	rdx_rax_124 = DPB(rdx_rax, eax_121, 0) (alias)
	edx_eax_125 = SEQ(edx_108, eax_121) (alias)
	ah_126 = SLICE(eax_121, byte, 8) (alias)
	ax_127 = (word16) eax_121 (alias)
	al_128 = (byte) eax_121 (alias)
	branch rax_107 <u 0x0000000000000010 l000000000040BE0A
// DataOut: bl ebx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx
// DataOut (flags): C
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(32) Local -00B0(32)

l000000000040BE06_1:
	r11_1928 = rdx_109
// DataOut: bl ebx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:0x00413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:0x00000001 -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(32) Local -00B0(32)

l000000000040BE0A:
	r11_129 = PHI(r11_105, r11_1928)
	branch rax_107 <u 0x0000000000000010 l000000000040BE0E
// DataOut: bl ebx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:0x00413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:0x00000001 -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(32) Local -00B0(32)

l000000000040BE0A_2:
	r15_1926 = rax_122
	r15d_1927 = (word32) r15_1926 (alias)
// DataOut: bl ebx fs r11 r12 r12d r13 r14 r14d r15 r8 r9 rax rbp rbx rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:0x00413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:0x00000001 -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(32) Local -00B0(32)

l000000000040BE0E:
	r15_130 = PHI(r15_99, r15_1926)
	r15d_131 = PHI(r15d_100, r15d_1927)
	qwLoc80_132 = r11_129
	rax_133 = DPB(rax_122, strlen(rdi_118), 0)
	SCZO_134 = cond(rax_133 - 0x0000000000000011)
	C_135 = SCZO_134 (alias)
	eax_136 = 0x00416919
	rax_137 = DPB(rax_133, eax_136, 0) (alias)
	rdx_rax_138 = DPB(rdx_rax_124, eax_136, 0) (alias)
	edx_eax_139 = SEQ(edx_108, eax_136) (alias)
	ah_140 = SLICE(eax_136, byte, 8) (alias)
	ax_141 = (word16) eax_136 (alias)
	al_142 = (byte) eax_136 (alias)
	r11_143 = qwLoc80_132
	branch rax_133 <u 0x0000000000000011 l000000000040BE2A
// DataOut: bl ebx fs r11 r11d r12 r12d r13 r14 r14d r15 r8 r9 rax rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:0x00413990 r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:0x00000001 -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(32) Local -00B0(32)

l000000000040BE26_3:
	r13_1925 = rax_137
// DataOut: bl ebx fs r11 r11d r12 r12d r13 r14 r14d r15 r8 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:0x00416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:0x00000001 -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(0) Local -00AC(32) Local -00B0(32)

l000000000040BE2A:
	r13_144 = PHI(r13_106, r13_1925)
	rax_145 = r14_62
	rdx_rax_146 = SEQ(rdx_109, rax_145) (alias)
	edx_eax_147 = rax_145 (alias)
	r8_148 = r8_68 + 648
	SCZO_149 = cond(qwLocA8_36 - rbx_65)
	CZ_150 = SCZO_149 (alias)
	qwLocB8_151 = rax_145
	branch qwLocA8_36 >u rbx_65 l000000000040C0E0
// DataOut: bl ebx fs r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:0x00416919 r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:0x00000001 -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C0E0:
	SZO_1861 = cond(rbx_65 & rbx_65)
	Z_1862 = SZO_1861 (alias)
	C_1863 = false
	branch Test(EQ,Z_1862) l000000000040BE59
// DataOut: bl ebx fs r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:rsi rbp:<invalid> r11:<invalid> edx:0x00000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C0E9:
	rax_1864 = qwLocA8_36
	edx_1865 = 0x00000000
	rdx_rax_1866 = DPB(rdx_rax_146, edx_1865, 64) (alias)
	v35_1867 = rdx_rax_1866
	rdx_1868 = (uint64) (v35_1867 % rbx_65)
	edx_1869 = (word32) rdx_1868 (alias)
	dl_1870 = (byte) rdx_1868 (alias)
	rax_1871 = (uint64) (v35_1867 /u rbx_65)
	rdx_rax_1872 = SEQ(rdx_1868, rax_1871) (alias)
	edx_eax_1873 = rax_1871 (alias)
	SZO_1874 = cond(rdx_1868 & rdx_1868)
	Z_1875 = SZO_1874 (alias)
	C_1876 = false
	rsi_1877 = rax_1871
	sil_1878 = (byte) rsi_1877 (alias)
	esi_1879 = (word32) rsi_1877 (alias)
	branch Test(NE,Z_1875) l000000000040BE59
// DataOut: bl ebx fs r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:rsi rbp:<invalid> r11:<invalid> edx:0x00000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C0FF:
	edx_1880 = 0x00000000
	rax_1881 = r12_64
	rdx_rax_1882 = SEQ(rdx_1868, rax_1881) (alias)
	v36_1883 = rdx_rax_1882
	rdx_1884 = (uint64) (v36_1883 % rsi_1877)
	rax_1885 = (uint64) (v36_1883 /u rsi_1877)
	rdi_1886 = rdx_1884 + rdx_1884 * 0x0000000000000004
	r10_1887 = rax_1885
	r10d_1888 = (word32) r10_1887 (alias)
	r10b_1889 = (byte) r10_1887 (alias)
	edx_1890 = 0x00000000
	rax_1891 = rdi_1886 + rdi_1886
	rdx_rax_1892 = SEQ(rdx_1884, rax_1891) (alias)
	v38_1893 = rdx_rax_1892
	rdx_1894 = (uint64) (v38_1893 % rsi_1877)
	rax_1895 = (uint64) (v38_1893 /u rsi_1877)
	eax_1896 = (word32) rax_1895 (alias)
	rdx_1897 = rdx_1894 + rdx_1894
	edx_1898 = (word32) rdx_1897 (alias)
	rdx_rax_1899 = SEQ(rdx_1897, rax_1895) (alias)
	edx_eax_1900 = rdx_1897 (alias)
	dl_1901 = (byte) rdx_1897 (alias)
	edi_1902 = eax_1896
	rdi_1903 = DPB(rdi_1886, edi_1902, 0) (alias)
	dil_1904 = (byte) edi_1902 (alias)
	SCZO_1905 = cond(rsi_1877 - rdx_1897)
	C_1906 = SCZO_1905 (alias)
	SZO_1907 = SCZO_1905 (alias)
	Z_1908 = SCZO_1905 (alias)
	CZ_1909 = SCZO_1905 (alias)
	S_1910 = SCZO_1905 (alias)
	CZP_1911 = SCZO_1905 (alias)
	branch Test(ULE,CZ_1909) l000000000040C6E0
// DataOut: edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rdx
// DataOut (flags): C
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:(uint64) (rdx_rax /u rcx) rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:(uint64) (rdx_rax % rcx) rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C6E0:
	ecx_1919 = 0x00000000 - C_1906
	ecx_1920 = ~ecx_1919
	ecx_1921 = ecx_1920 + 0x00000003
	rcx_1922 = DPB(rcx_66, ecx_1921, 0) (alias)
	cl_1923 = (byte) ecx_1921 (alias)
	SCZO_1924 = cond(ecx_1921)
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:(uint64) (rdx_rax /u (uint64) (rdx_rax /u rcx)) rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:(uint64) (rdx_rax % (uint64) (rdx_rax /u rcx)) + (uint64) (rdx_rax % (uint64) (rdx_rax /u rcx)) rsi:(uint64) (rdx_rax /u rcx) r10:(uint64) (rdx_rax /u (uint64) (rdx_rax /u rcx)) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C125:
	ecx_1912 = 0x00000000
	SZO_1913 = cond(rdx_1897 & rdx_1897)
	Z_1914 = SZO_1913 (alias)
	C_1915 = false
	cl_1916 = Test(NE,Z_1914)
	rcx_1917 = DPB(rcx_66, cl_1916, 0) (alias)
	ecx_1918 = DPB(ecx_1912, cl_1916, 0) (alias)
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:(uint64) (rdx_rax /u (uint64) (rdx_rax /u rcx)) rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:(uint64) (rdx_rax % (uint64) (rdx_rax /u rcx)) + (uint64) (rdx_rax % (uint64) (rdx_rax /u rcx)) rsi:(uint64) (rdx_rax /u rcx) r10:(uint64) (rdx_rax /u (uint64) (rdx_rax /u rcx)) edi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040BE43:
	edx_1817 = 0x00000000
	rax_1818 = rbx_65
	rdx_rax_1819 = SEQ(rdx_109, rax_1818) (alias)
	v28_1820 = rdx_rax_1819
	rdx_1821 = (uint64) (v28_1820 % qwLocA8_36)
	edx_1822 = (word32) rdx_1821 (alias)
	dl_1823 = (byte) rdx_1821 (alias)
	rax_1824 = (uint64) (v28_1820 /u qwLocA8_36)
	eax_1825 = (word32) rax_1824 (alias)
	rdx_rax_1826 = SEQ(rdx_1821, rax_1824) (alias)
	edx_eax_1827 = rax_1824 (alias)
	ah_1828 = SLICE(rax_1824, byte, 8) (alias)
	ax_1829 = (word16) rax_1824 (alias)
	al_1830 = (byte) rax_1824 (alias)
	SZO_1831 = cond(rdx_1821 & rdx_1821)
	Z_1832 = SZO_1831 (alias)
	C_1833 = false
	rcx_1834 = rax_1824
	ecx_1835 = (word32) rcx_1834 (alias)
	cl_1836 = (byte) rcx_1834 (alias)
	branch Test(EQ,Z_1832) l000000000040C2F0
// DataOut: bl ebx fs r11 r11d r12 r12d r13 r14d r15 r9 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:rsi rbp:<invalid> r11:<invalid> edx:0x00000001 r8:r8 + 648 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C2F0:
	r10_1837 = rax_1824
	edx_1838 = 0x00000000
	r10_1839 = r10_1837 *s r12_64
	r10d_1840 = (word32) r10_1839 (alias)
	r10b_1841 = (byte) r10_1839 (alias)
	rax_1842 = r10_1839
	rdx_rax_1843 = SEQ(rdx_1821, rax_1842) (alias)
	v74_1844 = rdx_rax_1843
	rdx_1845 = (uint64) (v74_1844 % rcx_1834)
	edx_1846 = (word32) rdx_1845 (alias)
	dl_1847 = (byte) rdx_1845 (alias)
	rax_1848 = (uint64) (v74_1844 /u rcx_1834)
	rdx_rax_1849 = SEQ(rdx_1845, rax_1848) (alias)
	edx_eax_1850 = rax_1848 (alias)
	SCZO_1851 = cond(rax_1848 - r12_64)
	Z_1852 = SCZO_1851 (alias)
	branch Test(NE,Z_1852) l000000000040BE59
// DataOut: bl ebx fs r10 r10b r10d r11 r11d r12 r12d r13 r14d r15 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:(uint64) (rdx_rax /u (r8 + 648)) ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:(uint64) (rdx_rax /u r8) rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:(uint64) (rdx_rax % r8) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C308:
	ecx_1853 = 0x00000000
	rcx_1854 = DPB(rcx_1834, ecx_1853, 0) (alias)
	cl_1855 = (byte) ecx_1853 (alias)
	edi_1856 = 0x00000000
	rdi_1857 = DPB(rdi_118, edi_1856, 0) (alias)
	dil_1858 = (byte) edi_1856 (alias)
	SZO_1859 = cond(0x00000000)
	C_1860 = false
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:(uint64) (rdx_rax /u (r8 + 648)) ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:(uint64) (rdx_rax /u (uint64) (rdx_rax /u (r8 + 1296))) rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:(uint64) (rdx_rax % (uint64) (rdx_rax /u (r8 + 1296))) r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C12D:
	r10b_1337 = PHI(r10b_1889, r10b_1889, r10b_1841)
	r10d_1338 = PHI(r10d_1888, r10d_1888, r10d_1840)
	dil_1339 = PHI(dil_1904, dil_1904, dil_1858)
	sil_1340 = PHI(sil_1878, sil_1878, sil_93)
	CZP_1341 = PHI(CZP_1911, CZP_1911, CZP_117)
	esi_1342 = PHI(esi_1879, esi_1879, esi_84)
	edi_1343 = PHI(edi_1902, edi_1902, edi_1856)
	r10_1344 = PHI(r10_1887, r10_1887, r10_1839)
	S_1345 = PHI(S_1910, S_1910, S_116)
	CZ_1346 = PHI(CZ_1909, CZ_1909, CZ_150)
	ecx_1347 = PHI(ecx_1918, ecx_1921, ecx_1853)
	rcx_1348 = PHI(rcx_1917, rcx_1922, rcx_1854)
	cl_1349 = PHI(cl_1916, cl_1923, cl_1855)
	rax_1350 = PHI(rax_1895, rax_1895, rax_1848)
	eax_1351 = PHI(eax_1896, eax_1896, eax_1825)
	ah_1352 = PHI(ah_140, ah_140, ah_1828)
	ax_1353 = PHI(ax_141, ax_141, ax_1829)
	al_1354 = PHI(al_142, al_142, al_1830)
	rdx_1355 = PHI(rdx_1897, rdx_1897, rdx_1845)
	edx_1356 = PHI(edx_1898, edx_1898, edx_1846)
	rdx_rax_1357 = PHI(rdx_rax_1899, rdx_rax_1899, rdx_rax_1849)
	edx_eax_1358 = PHI(edx_eax_1900, edx_eax_1900, edx_eax_1850)
	dl_1359 = PHI(dl_1901, dl_1901, dl_1847)
	SCZO_1360 = PHI(SCZO_1905, SCZO_1924, SCZO_1851)
	rsi_1361 = PHI(rsi_1877, rsi_1877, rsi_61)
	rdi_1362 = PHI(rdi_1903, rdi_1903, rdi_1857)
	r9d_1363 = dwLocB0_34
	r8_1364 = qwLocB8_151
	ebx_1365 = 0xFFFFFFFF
	rbx_1366 = DPB(rbx_65, ebx_1365, 0) (alias)
	r9d_1367 = r9d_1363 & 0x00000010
	r9_1368 = DPB(r9_95, r9d_1367, 0) (alias)
	SZO_1369 = cond(r9d_1367)
	Z_1370 = SZO_1369 (alias)
	C_1371 = false
	branch Test(EQ,Z_1370) l000000000040C530
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:<invalid> edi:<invalid> rsi:(uint64) (rdx_rax /u rcx) cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C146:
	esi_1565 = dwLocAC_53
	rsi_1566 = DPB(rsi_1361, esi_1565, 0) (alias)
	sil_1567 = (byte) esi_1565 (alias)
	SCZO_1568 = cond(r10_1344 - rsi_1566)
	C_1569 = SCZO_1568 (alias)
	branch Test(ULT,C_1569) l000000000040C710
// DataOut: ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:rsi rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:0xFFFFFFFF rsi:(uint64) (rdx_rax /u rcx) cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C710:
	r8_1812 = qwLocB8_151
	ebx_1813 = 0x00000000
	rbx_1814 = DPB(rbx_1366, ebx_1813, 0) (alias)
	SZO_1815 = cond(0x00000000)
	C_1816 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:rsi rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:0xFFFFFFFF esi:<invalid> rsi:<invalid> cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C153:
	ebx_1570 = 0x00000000
	rbx_1571 = DPB(rbx_1366, ebx_1570, 0) (alias)
	SZO_1572 = cond(0x00000000)
	C_1573 = false
	r12d_1574 = dwLocAC_53
	r12_1575 = DPB(r12_64, r12d_1574, 0) (alias)
// DataOut: ebx ecx edi fs r10 r11 r11d r12d r13 r15 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:rsi rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:0xFFFFFFFF esi:<invalid> rsi:<invalid> cl:Test(NE,Z) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C17D:
	r10_1576 = PHI(r10_1344, r10_1623)
	r14_1577 = PHI(r14_62, r14_1642)
	ebx_1578 = PHI(ebx_1570, ebx_1657)
	ecx_1579 = PHI(ecx_1347, ecx_1651)
	rcx_1580 = PHI(rcx_1348, rcx_1652)
	SZO_1581 = PHI(SZO_1572, SZO_1654)
	Z_1582 = PHI(Z_1370, Z_1666)
	C_1583 = PHI(C_1573, C_1656)
	rdx_rax_1584 = PHI(rdx_rax_1357, rdx_rax_1636)
	rbx_1585 = PHI(rbx_1571, rbx_1658)
	rdi_1586 = PHI(rdi_1362, rdi_1644)
	rax_1587 = r10_1576
	edx_1588 = 0x00000000
	rdx_rax_1589 = DPB(rdx_rax_1584, edx_1588, 64) (alias)
	v48_1590 = rdx_rax_1589
	rdx_1591 = (uint64) (v48_1590 % rsi_1566)
	rax_1592 = (uint64) (v48_1590 /u rsi_1566)
	r8_1593 = rax_1592
	eax_1594 = rdx_1591 + rdx_1591 * 0x00000004
	rax_1595 = DPB(rax_1592, eax_1594, 0) (alias)
	edx_1596 = 0x00000000
	r10_1597 = r8_1593
	eax_1598 = rdi_1586 + rax_1595 * 0x00000002
	edx_eax_1599 = SEQ(edx_1596, eax_1598) (alias)
	edi_1600 = ecx_1579
	edi_1601 = edi_1600 >> 0x00000001
	rdi_1602 = DPB(rdi_1586, edi_1601, 0) (alias)
	v50_1603 = edx_eax_1599
	edx_1604 = (uint32) (v50_1603 % r12d_1574)
	rdx_1605 = DPB(rdx_1591, edx_1604, 0) (alias)
	eax_1606 = (uint32) (v50_1603 /u r12d_1574)
	r14d_1607 = rdi_1602 + rdx_1605 * 0x00000002
	edi_1608 = eax_1606
	rdi_1609 = DPB(rdi_1602, edi_1608, 0) (alias)
	ecx_1610 = ecx_1579 + r14d_1607
	SCZO_1611 = cond(r12d_1574 - r14d_1607)
	CZ_1612 = SCZO_1611 (alias)
	branch Test(UGT,CZ_1612) l000000000040C160
	rax_1613 = r10_1597
	edx_1614 = 0x00000000
	rdx_rax_1615 = DPB(rdx_rax_1589, edx_1614, 64) (alias)
	v56_1616 = rdx_rax_1615
	rdx_1617 = (uint64) (v56_1616 % rsi_1566)
	rax_1618 = (uint64) (v56_1616 /u rsi_1566)
	r8_1619 = rax_1618
	eax_1620 = rdx_1617 + rdx_1617 * 0x00000004
	rax_1621 = DPB(rax_1618, eax_1620, 0) (alias)
	edx_1622 = 0x00000000
	r10_1623 = r8_1619
	r10d_1624 = (word32) r10_1623 (alias)
	r10b_1625 = (byte) r10_1623 (alias)
	eax_1626 = rdi_1609 + rax_1621 * 0x00000002
	edx_eax_1627 = SEQ(edx_1622, eax_1626) (alias)
	edi_1628 = ecx_1610
	edi_1629 = edi_1628 >> 0x00000001
	rdi_1630 = DPB(rdi_1609, edi_1629, 0) (alias)
	v57_1631 = edx_eax_1627
	edx_1632 = (uint32) (v57_1631 % r12d_1574)
	rdx_1633 = DPB(rdx_1617, edx_1632, 0) (alias)
	eax_1634 = (uint32) (v57_1631 /u r12d_1574)
	rax_1635 = DPB(rax_1621, eax_1634, 0) (alias)
	rdx_rax_1636 = DPB(rdx_rax_1615, eax_1634, 0) (alias)
	edx_eax_1637 = SEQ(edx_1632, eax_1634) (alias)
	ah_1638 = SLICE(eax_1634, byte, 8) (alias)
	ax_1639 = (word16) eax_1634 (alias)
	al_1640 = (byte) eax_1634 (alias)
	r14d_1641 = rdi_1630 + rdx_1633 * 0x00000002
	r14_1642 = DPB(r14_1577, r14d_1641, 0) (alias)
	edi_1643 = eax_1634
	rdi_1644 = DPB(rdi_1630, edi_1643, 0) (alias)
	dil_1645 = (byte) edi_1643 (alias)
	ecx_1646 = ecx_1610 + r14d_1641
	rcx_1647 = DPB(rcx_1580, ecx_1646, 0) (alias)
	cl_1648 = (byte) ecx_1646 (alias)
	SCZO_1649 = cond(r12d_1574 - r14d_1641)
	CZ_1650 = SCZO_1649 (alias)
	branch Test(UGT,CZ_1650) l000000000040C160
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> rsi:<invalid> cl:<invalid> r14d:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C160:
	SZO_1805 = cond(ecx_1646 & ecx_1646)
	Z_1806 = SZO_1805 (alias)
	C_1807 = false
	cl_1808 = Test(NE,Z_1806)
	ecx_1809 = (word32) cl_1808
	rcx_1810 = DPB(rcx_1647, ecx_1809, 0) (alias)
	cl_1811 = (byte) ecx_1809 (alias)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> rsi:<invalid> cl:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C1A8:
	SCZO_1792 = cond(r12d_1574 - ecx_1646)
	C_1793 = SCZO_1792 (alias)
	ecx_1794 = 0x00000000 - C_1793
	ecx_1795 = ~ecx_1794
	ecx_1796 = ecx_1795 + 0x00000003
	SCZO_1797 = cond(r12d_1574 - ecx_1796)
	C_1798 = SCZO_1797 (alias)
	ecx_1799 = 0x00000000 - C_1798
	ecx_1800 = ~ecx_1799
	ecx_1801 = ecx_1800 + 0x00000003
	rcx_1802 = DPB(rcx_1647, ecx_1801, 0) (alias)
	cl_1803 = (byte) ecx_1801 (alias)
	SCZO_1804 = cond(ecx_1801)
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> rsi:<invalid> cl:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C168:
	ecx_1651 = PHI(ecx_1801, ecx_1809)
	rcx_1652 = PHI(rcx_1802, rcx_1810)
	cl_1653 = PHI(cl_1803, cl_1811)
	SZO_1654 = PHI(SZO_1581, SZO_1805)
	Z_1655 = PHI(Z_1582, Z_1806)
	C_1656 = PHI(C_1798, C_1807)
	ebx_1657 = ebx_1578 + 0x00000001
	rbx_1658 = DPB(rbx_1585, ebx_1657, 0) (alias)
	SCZO_1659 = cond(rsi_1566 - r8_1619)
	CZ_1660 = SCZO_1659 (alias)
	branch Test(UGT,CZ_1660) l000000000040C49F
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r8 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C49F:
	SCZO_1667 = cond(r8_1619 - 0x0000000000000009)
	CZ_1668 = SCZO_1667 (alias)
	branch Test(UGT,CZ_1668) l000000000040C768
// DataOut: dil eax ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C4A9:
	SCZO_1669 = cond(dwLoc98_30 - 0x00000001)
	Z_1670 = SCZO_1669 (alias)
	branch Test(EQ,Z_1670) l000000000040C7B0
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C7B0:
	edx_1782 = eax_1634
	edx_1783 = edx_1782 & 0x00000001
	edx_1784 = edx_1783 + ecx_1651
	SCZO_1785 = cond(edx_1784 - 0x00000002)
	SZO_1786 = SCZO_1785 (alias)
	dl_1787 = Test(GT,SZO_1786)
	edx_1788 = DPB(edx_1784, dl_1787, 0) (alias)
	rdx_1789 = DPB(rdx_1633, dl_1787, 0) (alias)
	rdx_rax_1790 = DPB(rdx_rax_1636, dl_1787, 64) (alias)
	edx_eax_1791 = DPB(edx_eax_1637, dl_1787, 32) (alias)
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C4B4:
	r12d_1767 = dwLoc98_30
	SZO_1768 = cond(ecx_1651 & ecx_1651)
	dl_1769 = Test(GT,SZO_1768)
	edx_1770 = DPB(edx_1632, dl_1769, 0) (alias)
	SZO_1771 = cond(r12d_1767 & r12d_1767)
	Z_1772 = SZO_1771 (alias)
	sil_1773 = Test(EQ,Z_1772)
	esi_1774 = DPB(esi_1565, sil_1773, 0) (alias)
	edx_1775 = edx_1770 & esi_1774
	rdx_1776 = DPB(rdx_1633, edx_1775, 0) (alias)
	rdx_rax_1777 = DPB(rdx_rax_1636, edx_1775, 64) (alias)
	edx_eax_1778 = SEQ(edx_1775, eax_1634) (alias)
	dl_1779 = (byte) edx_1775 (alias)
	SZO_1780 = cond(edx_1775)
	C_1781 = false
// DataOut: dil dl eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C4C7:
	sil_1671 = PHI(sil_1773, sil_1567)
	esi_1672 = PHI(esi_1774, esi_1565)
	r12d_1673 = PHI(r12d_1767, r12d_1574)
	rdx_1674 = PHI(rdx_1776, rdx_1789)
	edx_1675 = PHI(edx_1775, edx_1788)
	rdx_rax_1676 = PHI(rdx_rax_1777, rdx_rax_1790)
	edx_eax_1677 = PHI(edx_eax_1778, edx_eax_1791)
	dl_1678 = PHI(dl_1779, dl_1787)
	SCZO_1679 = PHI(SCZO_1669, SCZO_1785)
	SZO_1680 = cond(dl_1678 & dl_1678)
	Z_1681 = SZO_1680 (alias)
	C_1682 = false
	branch Test(EQ,Z_1681) l000000000040C788
// DataOut: dil eax ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C788:
	SZO_1764 = cond(eax_1634 & eax_1634)
	Z_1765 = SZO_1764 (alias)
	C_1766 = false
	branch Test(NE,Z_1765) l000000000040C4DB
// DataOut: dil ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C4CF:
	edi_1740 = rax_1635 + 0x0000000000000001
	rdi_1741 = DPB(rdi_1644, edi_1740, 0) (alias)
	dil_1742 = (byte) edi_1740 (alias)
	SCZO_1743 = cond(edi_1740 - 0x0000000A)
	Z_1744 = SCZO_1743 (alias)
	branch Test(EQ,Z_1744) l000000000040C7CE
// DataOut: dil ebx fs r10 r10d r11 r11d r13 r14d r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C7CE:
	r10_1745 = r8_1619 + 0x0000000000000001
	r10d_1746 = (word32) r10_1745 (alias)
	r10b_1747 = (byte) r10_1745 (alias)
	SCZO_1748 = cond(r10_1745 - 0x000000000000000A)
	Z_1749 = SCZO_1748 (alias)
	branch Test(NE,Z_1749) l000000000040C7FF
// DataOut: ebx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C7FF:
	ecx_1759 = 0x00000000
	rcx_1760 = DPB(rcx_1652, ecx_1759, 0) (alias)
	cl_1761 = (byte) ecx_1759 (alias)
	SZO_1762 = cond(0x00000000)
	C_1763 = false
// DataOut: ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C790:
	r10b_1716 = PHI(r10b_1625, r10b_1747)
	r10d_1717 = PHI(r10d_1624, r10d_1746)
	dil_1718 = PHI(dil_1645, dil_1742)
	edi_1719 = PHI(edi_1643, edi_1740)
	r10_1720 = PHI(r10_1623, r10_1745)
	ecx_1721 = PHI(ecx_1651, ecx_1759)
	rcx_1722 = PHI(rcx_1652, rcx_1760)
	cl_1723 = PHI(cl_1653, cl_1761)
	SCZO_1724 = PHI(SCZO_1679, SCZO_1748)
	rdi_1725 = PHI(rdi_1644, rdi_1741)
	SZO_1726 = cond(bLocB0 & 0x08)
	Z_1727 = SZO_1726 (alias)
	C_1728 = false
	branch Test(NE,Z_1727) l000000000040C7C2
// DataOut: ebx ecx fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C7C2:
	r8_1734 = qwLocB8_151
	edi_1735 = 0x00000000
	rdi_1736 = DPB(rdi_1725, edi_1735, 0) (alias)
	dil_1737 = (byte) edi_1735 (alias)
	SZO_1738 = cond(0x00000000)
	C_1739 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C797:
	edi_1729 = 0x00000000
	rdi_1730 = DPB(rdi_1725, edi_1729, 0) (alias)
	dil_1731 = (byte) edi_1729 (alias)
	SZO_1732 = cond(0x00000000)
	C_1733 = false
// DataOut: dil ebx fs r10 r10d r11 r13 r14d r15 r8 r9d rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C7D8:
	r8_1750 = qwLocB8_151
	ecx_1751 = 0x00000000
	rcx_1752 = DPB(rcx_1652, ecx_1751, 0) (alias)
	cl_1753 = (byte) ecx_1751 (alias)
	edi_1754 = 0x00000000
	rdi_1755 = DPB(rdi_1741, edi_1754, 0) (alias)
	dil_1756 = (byte) edi_1754 (alias)
	SZO_1757 = cond(0x00000000)
	C_1758 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C4DB:
	edi_1683 = PHI(edi_1740, edi_1643, edi_1729)
	r10_1684 = PHI(r10_1623, r10_1623, r10_1720)
	rcx_1685 = PHI(rcx_1652, rcx_1652, rcx_1722)
	Z_1686 = PHI(Z_1744, Z_1765, Z_1727)
	SCZO_1687 = PHI(SCZO_1743, SCZO_1679, SCZO_1724)
	rax_1688 = qwLocA0_32
	edi_1689 = edi_1683 + 0x00000030
	dil_1690 = (byte) edi_1689 (alias)
	rdx_1691 = r11_143
	rsi_1692 = r15_130
	dwLoc74_1693 = r9d_1367
	qwLoc90_1694 = r10_1684
	qwLoc80_1695 = r11_143
	r8_1696 = r8_1619 + 0x0000000000000287
	Mem1697[rax_1688 + 0x0000000000000287:byte] = dil_1690
	r8_1698 = r8_1696 - r11_143
	rdi_1699 = r8_1698
	rax_1700 = memcpy(rdi_1699, rsi_1692, rdx_1691)
	r11_1701 = qwLoc80_1695
	r10_1702 = qwLoc90_1694
	r10d_1703 = (word32) r10_1702 (alias)
	r10b_1704 = (byte) r10_1702 (alias)
	r8_1705 = rax_1700
	r9d_1706 = dwLoc74_1693
	r9_1707 = DPB(r9_1368, r9d_1706, 0) (alias)
	ecx_1708 = 0x00000000
	rcx_1709 = DPB(rcx_1685, ecx_1708, 0) (alias)
	cl_1710 = (byte) ecx_1708 (alias)
	edi_1711 = 0x00000000
	rdi_1712 = DPB(rdi_1699, edi_1711, 0) (alias)
	dil_1713 = (byte) edi_1711 (alias)
	SZO_1714 = cond(0x00000000)
	C_1715 = false
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> dl:<invalid> sil:Test(EQ,Z) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C174:
	SCZO_1665 = cond(ebx_1657 - 0x00000008)
	Z_1666 = SCZO_1665 (alias)
	branch Test(EQ,Z_1666) l000000000040C768
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r12d r13 r14d r15 r9d rbp rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C768:
	CZ_1661 = PHI(CZ_1660, CZ_1668)
	Z_1662 = PHI(Z_1666, Z_1655)
	SCZO_1663 = PHI(SCZO_1665, SCZO_1667)
	r8_1664 = qwLocB8_151
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> cl:<invalid> rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C530:
	dwLoc74_1372 = PHI(dwLoc74, dwLoc74, dwLoc74_1693, dwLoc74, dwLoc74, dwLoc74)
	qwLoc90_1373 = PHI(qwLoc90, qwLoc90, qwLoc90_1694, qwLoc90, qwLoc90, qwLoc90)
	qwLoc80_1374 = PHI(qwLoc80_132, qwLoc80_132, qwLoc80_1695, qwLoc80_132, qwLoc80_132, qwLoc80_132)
	r10b_1375 = PHI(r10b_1337, r10b_1625, r10b_1704, r10b_1747, r10b_1716, r10b_1337)
	r10d_1376 = PHI(r10d_1338, r10d_1624, r10d_1703, r10d_1746, r10d_1717, r10d_1338)
	dil_1377 = PHI(dil_1339, dil_1645, dil_1713, dil_1756, dil_1737, dil_1339)
	sil_1378 = PHI(sil_1340, sil_1567, sil_1671, sil_1671, sil_1671, sil_1567)
	esi_1379 = PHI(esi_1342, esi_1565, esi_1672, esi_1672, esi_1672, esi_1565)
	edi_1380 = PHI(edi_1343, edi_1643, edi_1711, edi_1754, edi_1735, edi_1343)
	r10_1381 = PHI(r10_1344, r10_1623, r10_1702, r10_1745, r10_1720, r10_1344)
	r11_1382 = PHI(r11_143, r11_143, r11_1701, r11_143, r11_143, r11_143)
	r8_1383 = PHI(r8_1364, r8_1664, r8_1705, r8_1750, r8_1734, r8_1812)
	r9_1384 = PHI(r9_1368, r9_1368, r9_1707, r9_1368, r9_1368, r9_1368)
	r9d_1385 = PHI(r9d_1367, r9d_1367, r9d_1706, r9d_1367, r9d_1367, r9d_1367)
	r12_1386 = PHI(r12_64, r12_1575, r12_1575, r12_1575, r12_1575, r12_64)
	r12d_1387 = PHI(r12d_85, r12d_1574, r12d_1673, r12d_1673, r12d_1673, r12d_85)
	r14d_1388 = PHI(r14d_87, r14d_1641, r14d_1641, r14d_1641, r14d_1641, r14d_87)
	r14_1389 = PHI(r14_62, r14_1642, r14_1642, r14_1642, r14_1642, r14_62)
	CZ_1390 = PHI(CZ_1346, CZ_1661, CZ_1668, CZ_1668, CZ_1668, CZ_1346)
	ebx_1391 = PHI(ebx_1365, ebx_1657, ebx_1657, ebx_1657, ebx_1657, ebx_1813)
	ecx_1392 = PHI(ecx_1347, ecx_1651, ecx_1708, ecx_1751, ecx_1721, ecx_1347)
	rcx_1393 = PHI(rcx_1348, rcx_1652, rcx_1709, rcx_1752, rcx_1722, rcx_1348)
	cl_1394 = PHI(cl_1349, cl_1653, cl_1710, cl_1753, cl_1723, cl_1349)
	SZO_1395 = PHI(SZO_1369, SZO_1654, SZO_1714, SZO_1757, SZO_1738, SZO_1815)
	C_1396 = PHI(C_1371, C_1656, C_1715, C_1758, C_1739, C_1816)
	rax_1397 = PHI(rax_1350, rax_1635, rax_1700, rax_1635, rax_1635, rax_1350)
	eax_1398 = PHI(eax_1351, eax_1634, eax_1634, eax_1634, eax_1634, eax_1351)
	ah_1399 = PHI(ah_1352, ah_1638, ah_1638, ah_1638, ah_1638, ah_1352)
	ax_1400 = PHI(ax_1353, ax_1639, ax_1639, ax_1639, ax_1639, ax_1353)
	al_1401 = PHI(al_1354, al_1640, al_1640, al_1640, al_1640, al_1354)
	rdx_1402 = PHI(rdx_1355, rdx_1633, rdx_1691, rdx_1674, rdx_1674, rdx_1355)
	edx_1403 = PHI(edx_1356, edx_1632, edx_1675, edx_1675, edx_1675, edx_1356)
	rdx_rax_1404 = PHI(rdx_rax_1357, rdx_rax_1636, rdx_rax_1676, rdx_rax_1676, rdx_rax_1676, rdx_rax_1357)
	edx_eax_1405 = PHI(edx_eax_1358, edx_eax_1637, edx_eax_1677, edx_eax_1677, edx_eax_1677, edx_eax_1358)
	dl_1406 = PHI(dl_1359, dl_1359, dl_1678, dl_1678, dl_1678, dl_1359)
	rbx_1407 = PHI(rbx_1366, rbx_1658, rbx_1658, rbx_1658, rbx_1658, rbx_1814)
	rsi_1408 = PHI(rsi_1361, rsi_1566, rsi_1692, rsi_1566, rsi_1566, rsi_1566)
	rdi_1409 = PHI(rdi_1362, rdi_1644, rdi_1712, rdi_1755, rdi_1736, rdi_1362)
	SCZO_1410 = cond(dwLoc98_30 - 0x00000001)
	Z_1411 = SCZO_1410 (alias)
	branch Test(EQ,Z_1411) l000000000040C6F0
// DataOut: ebx ecx edi fs r10 r10b r10d r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> rsi:<invalid> cl:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C6F0:
	rax_1544 = r10_1381
	eax_1545 = (word32) rax_1544 (alias)
	rcx_1546 = (int64) ecx_1392
	ecx_1547 = (word32) rcx_1546 (alias)
	cl_1548 = (byte) rcx_1546 (alias)
	eax_1549 = eax_1545 & 0x00000001
	rax_1550 = DPB(rax_1544, eax_1549, 0) (alias)
	rax_1551 = rax_1550 + rcx_1546
	SCZO_1552 = cond(rax_1551)
	Z_1553 = SCZO_1552 (alias)
	al_1554 = Test(NE,Z_1553)
	eax_1555 = (word32) al_1554
	edi_1556 = edi_1380 + eax_1555
	SCZO_1557 = cond(edi_1556 - 0x00000005)
	SZO_1558 = SCZO_1557 (alias)
	al_1559 = Test(GT,SZO_1558)
	eax_1560 = DPB(eax_1555, al_1559, 0) (alias)
	rax_1561 = DPB(rax_1551, al_1559, 0) (alias)
	rdx_rax_1562 = DPB(rdx_rax_1404, al_1559, 0) (alias)
	edx_eax_1563 = DPB(edx_eax_1405, al_1559, 0) (alias)
	ax_1564 = DPB(ax_1400, al_1559, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> rsi:<invalid> cl:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C53B:
	esi_1523 = dwLoc98_30
	eax_1524 = 0x00000000
	rax_1525 = DPB(rax_1397, eax_1524, 0) (alias)
	rdx_rax_1526 = DPB(rdx_rax_1404, eax_1524, 0) (alias)
	edx_eax_1527 = SEQ(edx_1403, eax_1524) (alias)
	ax_1528 = (word16) eax_1524 (alias)
	al_1529 = (byte) eax_1524 (alias)
	SZO_1530 = cond(esi_1523 & esi_1523)
	Z_1531 = SZO_1530 (alias)
	C_1532 = false
	branch Test(NE,Z_1531) l000000000040C54C
// DataOut: al ebx ecx edi fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> rsi:<invalid> cl:<invalid> esi:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C545:
	ecx_1533 = ecx_1392 + edi_1380
	rcx_1534 = DPB(rcx_1393, ecx_1533, 0) (alias)
	cl_1535 = (byte) ecx_1533 (alias)
	SZO_1536 = cond(ecx_1533 & ecx_1533)
	C_1537 = false
	al_1538 = Test(GT,SZO_1536)
	eax_1539 = DPB(eax_1524, al_1538, 0) (alias)
	rax_1540 = DPB(rax_1525, al_1538, 0) (alias)
	rdx_rax_1541 = DPB(rdx_rax_1526, al_1538, 0) (alias)
	edx_eax_1542 = DPB(edx_eax_1527, al_1538, 0) (alias)
	ax_1543 = DPB(ax_1528, al_1538, 0) (alias)
// DataOut: al ebx fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:edx & 0x00000003 rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C54C:
	esi_1412 = PHI(esi_1523, esi_1523, esi_1379)
	edi_1413 = PHI(edi_1380, edi_1380, edi_1556)
	ecx_1414 = PHI(ecx_1392, ecx_1533, ecx_1547)
	rcx_1415 = PHI(rcx_1393, rcx_1534, rcx_1546)
	cl_1416 = PHI(cl_1394, cl_1535, cl_1548)
	rax_1417 = PHI(rax_1525, rax_1540, rax_1561)
	eax_1418 = PHI(eax_1524, eax_1539, eax_1560)
	ax_1419 = PHI(ax_1528, ax_1543, ax_1564)
	al_1420 = PHI(al_1529, al_1538, al_1559)
	rdx_rax_1421 = PHI(rdx_rax_1526, rdx_rax_1541, rdx_rax_1562)
	edx_eax_1422 = PHI(edx_eax_1527, edx_eax_1542, edx_eax_1563)
	SCZO_1423 = PHI(SCZO_1410, SCZO_1410, SCZO_1557)
	SZO_1424 = cond(al_1420 & al_1420)
	Z_1425 = SZO_1424 (alias)
	C_1426 = false
	branch Test(EQ,Z_1425) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 r9d rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> al:Test(GT,SZO) rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C550:
	r10_1485 = r10_1381 + 0x0000000000000001
	r10d_1486 = (word32) r10_1485 (alias)
	r10b_1487 = (byte) r10_1485 (alias)
	SZO_1488 = cond(r9d_1385 & r9d_1385)
	Z_1489 = SZO_1488 (alias)
	C_1490 = false
	branch Test(EQ,Z_1489) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> al:Test(GT,SZO) rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C559:
	eax_1491 = dwLocAC_53
	rax_1492 = DPB(rax_1417, eax_1491, 0) (alias)
	rdx_rax_1493 = DPB(rdx_rax_1421, eax_1491, 0) (alias)
	edx_eax_1494 = SEQ(edx_1403, eax_1491) (alias)
	ah_1495 = SLICE(eax_1491, byte, 8) (alias)
	ax_1496 = (word16) eax_1491 (alias)
	al_1497 = (byte) eax_1491 (alias)
	SCZO_1498 = cond(rax_1492 - r10_1485)
	Z_1499 = SCZO_1498 (alias)
	branch Test(NE,Z_1499) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> al:Test(GT,SZO) rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C562:
	SCZO_1500 = cond(ebx_1391 - 0x00000008)
	Z_1501 = SCZO_1500 (alias)
	branch Test(EQ,Z_1501) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> al:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C567:
	ebx_1502 = ebx_1391 + 0x00000001
	rbx_1503 = DPB(rbx_1407, ebx_1502, 0) (alias)
	SZO_1504 = cond(bLocB0 & 0x08)
	Z_1505 = SZO_1504 (alias)
	C_1506 = false
	edx_1507 = 0x00000001
	rdx_rax_1508 = DPB(rdx_rax_1493, edx_1507, 64) (alias)
	edx_eax_1509 = SEQ(edx_1507, eax_1491) (alias)
	branch Test(NE,Z_1505) l000000000040C5A0
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> al:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C577:
	rax_1510 = rax_1492 - 0x0000000000000001
	Mem1511[rax_1510 - 0x0000000000000001:byte] = 0x30
	rdx_1512 = r11_1382
	rsi_1513 = r15_130
	qwLoc98_1514 = r10_1485
	rax_1515 = rax_1510 - r11_1382
	SCZO_1516 = cond(rax_1515)
	rdi_1517 = rax_1515
	rax_1518 = memcpy(rdi_1517, rsi_1513, rdx_1512)
	r10_1519 = qwLoc98_1514
	r10d_1520 = (word32) r10_1519 (alias)
	r10b_1521 = (byte) r10_1519 (alias)
	r8_1522 = rax_1518
// DataOut: ebx fs r10 r10b r11 r11d r13 r14d r15 r8 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:0x00000001 r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> al:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:0x01 sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5A0:
	qwLoc98_1427 = PHI(qwLoc98, qwLoc98, qwLoc98, qwLoc98, qwLoc98, qwLoc98_1514)
	r10b_1428 = PHI(r10b_1375, r10b_1487, r10b_1487, r10b_1487, r10b_1487, r10b_1521)
	r10d_1429 = PHI(r10d_1376, r10d_1486, r10d_1486, r10d_1486, r10d_1486, r10d_1520)
	r10_1430 = PHI(r10_1381, r10_1485, r10_1485, r10_1485, r10_1485, r10_1519)
	r8_1431 = PHI(r8_1383, r8_1383, r8_1383, r8_1383, r8_1383, r8_1522)
	ebx_1432 = PHI(ebx_1391, ebx_1391, ebx_1391, ebx_1391, ebx_1502, ebx_1502)
	SZO_1433 = PHI(SZO_1424, SZO_1488, SZO_1488, SZO_1488, SZO_1504, SZO_1504)
	Z_1434 = PHI(Z_1425, Z_1489, Z_1499, Z_1501, Z_1505, Z_1505)
	C_1435 = PHI(C_1426, C_1490, C_1490, C_1490, C_1506, C_1506)
	rax_1436 = PHI(rax_1417, rax_1417, rax_1492, rax_1492, rax_1492, rax_1518)
	eax_1437 = PHI(eax_1418, eax_1418, eax_1491, eax_1491, eax_1491, eax_1491)
	ah_1438 = PHI(ah_1399, ah_1399, ah_1495, ah_1495, ah_1495, ah_1495)
	ax_1439 = PHI(ax_1419, ax_1419, ax_1496, ax_1496, ax_1496, ax_1496)
	al_1440 = PHI(al_1420, al_1420, al_1497, al_1497, al_1497, al_1497)
	rdx_1441 = PHI(rdx_1402, rdx_1402, rdx_1402, rdx_1402, rdx_1402, rdx_1512)
	edx_1442 = PHI(edx_1403, edx_1403, edx_1403, edx_1403, edx_1507, edx_1507)
	rdx_rax_1443 = PHI(rdx_rax_1421, rdx_rax_1421, rdx_rax_1493, rdx_rax_1493, rdx_rax_1508, rdx_rax_1508)
	edx_eax_1444 = PHI(edx_eax_1422, edx_eax_1422, edx_eax_1494, edx_eax_1494, edx_eax_1509, edx_eax_1509)
	SCZO_1445 = PHI(SCZO_1423, SCZO_1423, SCZO_1498, SCZO_1500, SCZO_1500, SCZO_1516)
	rbx_1446 = PHI(rbx_1407, rbx_1407, rbx_1407, rbx_1407, rbx_1503, rbx_1503)
	rsi_1447 = PHI(rsi_1408, rsi_1408, rsi_1408, rsi_1408, rsi_1408, rsi_1513)
	rdi_1448 = PHI(rdi_1409, rdi_1409, rdi_1409, rdi_1409, rdi_1409, rdi_1517)
	r12_1449 = r8_1431
	r12d_1450 = (word32) r12_1449 (alias)
	r9_1451 = 0x00000000CCCCCCCD
	r9d_1452 = (word32) r9_1451 (alias)
// DataOut: ebx fs r10 r10b r11 r11d r12 r13 r14d r15 r8 r9 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:edx & 0x00000010 ebx:<invalid> esi:<invalid> al:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5B0:
	r10_1453 = PHI(r10_1430, r10_1477)
	r12_1454 = PHI(r12_1449, r12_1456)
	rax_1455 = r10_1453
	r12_1456 = r12_1454 - 0x0000000000000001
	r12d_1457 = (word32) r12_1456 (alias)
	rdx_rax_1458 = rcx_1415 *u rax_1455
	rdx_1459 = SLICE(rdx_rax_1458, word64, 64) (alias)
	rdx_1460 = rdx_1459 >>u 0x0000000000000003
	rax_1461 = rdx_1460 + rdx_1460 * 0x0000000000000004
	rax_1462 = rax_1461 + rax_1461
	eax_1463 = (word32) rax_1462 (alias)
	rdx_rax_1464 = SEQ(rdx_1460, rax_1462) (alias)
	edx_eax_1465 = rax_1462 (alias)
	ah_1466 = SLICE(rax_1462, byte, 8) (alias)
	ax_1467 = (word16) rax_1462 (alias)
	al_1468 = (byte) rax_1462 (alias)
	r10_1469 = r10_1453 - rax_1462
	r10d_1470 = (word32) r10_1469 (alias)
	r10d_1471 = r10d_1470 + 0x00000030
	r10b_1472 = (byte) r10d_1471 (alias)
	SZO_1473 = cond(rdx_1460 & rdx_1460)
	Z_1474 = SZO_1473 (alias)
	C_1475 = false
	Mem1476[r12_1456:byte] = r10b_1472
	r10_1477 = rdx_1460
	r10d_1478 = (word32) r10_1477 (alias)
	r10b_1479 = (byte) r10_1477 (alias)
	branch Test(NE,Z_1474) l000000000040C5B0
// DataOut: ebx fs r10 r10b r11 r11d r12 r13 r14d r15 r8 r9 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:0xCCCCCCCD ebx:<invalid> esi:<invalid> al:<invalid> r9:0x00000000CCCCCCCD Sequence rdx:rax:<invalid> r10d:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5D8:
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> r10:<invalid> edi:<invalid> r9d:0xCCCCCCCD ebx:<invalid> esi:<invalid> al:<invalid> r9:0x00000000CCCCCCCD Sequence rdx:rax:<invalid> r10d:<invalid> rsi:<invalid> cl:<invalid> r12d:<invalid> r14d:<invalid> dl:<invalid> sil:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE59:
	r10b_632 = PHI(r10b_98, r10b_98, r10b_98, r10b_1841)
	r10d_633 = PHI(r10d_97, r10d_97, r10d_97, r10d_1840)
	sil_634 = PHI(sil_93, sil_93, sil_1878, sil_93)
	esi_635 = PHI(esi_84, esi_84, esi_1879, esi_84)
	r10_636 = PHI(r10_80, r10_80, r10_80, r10_1839)
	ecx_637 = PHI(ecx_1835, ecx_70, ecx_70, ecx_1835)
	rcx_638 = PHI(rcx_1834, rcx_66, rcx_66, rcx_1834)
	cl_639 = PHI(cl_1836, cl_82, cl_82, cl_1836)
	Z_640 = PHI(Z_1832, Z_1862, Z_1875, Z_1852)
	rax_641 = PHI(rax_1824, rax_145, rax_1871, rax_1848)
	eax_642 = PHI(eax_1825, eax_136, eax_136, eax_1825)
	ah_643 = PHI(ah_1828, ah_140, ah_140, ah_1828)
	ax_644 = PHI(ax_1829, ax_141, ax_141, ax_1829)
	al_645 = PHI(al_1830, al_142, al_142, al_1830)
	rdx_646 = PHI(rdx_1821, rdx_109, rdx_1868, rdx_1845)
	edx_647 = PHI(edx_1822, edx_108, edx_1869, edx_1846)
	rdx_rax_648 = PHI(rdx_rax_1826, rdx_rax_146, rdx_rax_1872, rdx_rax_1849)
	edx_eax_649 = PHI(edx_eax_1827, edx_eax_147, edx_eax_1873, edx_eax_1850)
	dl_650 = PHI(dl_1823, dl_110, dl_1870, dl_1847)
	SCZO_651 = PHI(SCZO_149, SCZO_149, SCZO_149, SCZO_1851)
	rsi_652 = PHI(rsi_61, rsi_61, rsi_1877, rsi_61)
	qwLoc68_653 = r12_64
	SZO_654 = cond(r12_64 & r12_64)
	S_655 = SZO_654 (alias)
	C_656 = false
	rLoc1_657 = (real64) qwLoc68_653
	branch (r12_64 & r12_64) < 0x0000000000000000 l000000000040C5F0
// DataOut: bl ebx fs r11 r11d r13 r9 rbp rbx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5F0:
	rLoc1_1331 = rLoc1_657 + Mem0[0x0000000000415F08:real32]
	qwLoc68_1332 = rbx_65
	SZO_1333 = cond(rbx_65 & rbx_65)
	S_1334 = SZO_1333 (alias)
	C_1335 = false
	rLoc2_1336 = (real64) qwLoc68_1332
	branch Test(NS,S_1334) l000000000040BE7D
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):rdi -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE6B:
	qwLoc68_1326 = rbx_65
	SZO_1327 = cond(rbx_65 & rbx_65)
	S_1328 = SZO_1327 (alias)
	C_1329 = false
	rLoc2_1330 = (real64) qwLoc68_1326
	branch Test(SG,S_1328) l000000000040C608
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):rdi -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C608:
	rLoc2_1319 = PHI(rLoc2_1330, rLoc2_1336)
	qwLoc68_1320 = PHI(qwLoc68_1326, qwLoc68_1332)
	rLoc1_1321 = PHI(rLoc1_657, rLoc1_1331)
	S_1322 = PHI(S_1328, S_1334)
	SZO_1323 = PHI(SZO_1327, SZO_1333)
	C_1324 = PHI(C_1329, C_1335)
	rLoc2_1325 = rLoc2_1319 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):rcx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE7D:
	rLoc2_658 = PHI(rLoc2_1330, rLoc2_1336, rLoc2_1325)
	rLoc1_659 = PHI(rLoc1_657, rLoc1_1331, rLoc1_1321)
	rax_660 = qwLocA8_36
	rdx_rax_661 = SEQ(rdx_646, rax_660) (alias)
	edx_eax_662 = rax_660 (alias)
	qwLoc68_663 = rax_660
	SZO_664 = cond(rax_660 & rax_660)
	S_665 = SZO_664 (alias)
	C_666 = false
	rLoc3_667 = (real64) qwLoc68_663
	branch (rax_660 & rax_660) < 0x0000000000000000 l000000000040C5E0
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):rcx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C5E0:
	rLoc3_1318 = rLoc3_667 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BE94:
	rLoc3_668 = PHI(rLoc3_667, rLoc3_1318)
	SZO_669 = cond(bLocB0 & 0x10)
	Z_670 = SZO_669 (alias)
	C_671 = false
	rLoc2_672 = rLoc2_658 / rLoc3_668
	rLoc1_673 = rLoc1_659 * rLoc2_672
	branch (bLocB0 & 0x10) == 0x00 l000000000040C1B8
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C1B8:
	SCZO_1151 = cond(dwLoc98_30 - 0x00000001)
	Z_1152 = SCZO_1151 (alias)
	branch Test(EQ,Z_1152) l000000000040C1CD
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C1BF:
	rLoc2_1197 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_1198 = cond(rLoc2_1197 - rLoc1_673)
	CZ_1199 = CZP_1198 (alias)
	branch Test(UGT,CZ_1199) l000000000040C408
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C408:
	rLoc2_1200 = (real64) Mem0[0x0000000000415F0C:real32]
	v69_1201 = rLoc2_1200
	rLoc2_1202 = rLoc1_673
	rLoc1_1203 = v69_1201
	CZP_1204 = cond(rLoc2_1202 - rLoc1_1203)
	C_1205 = CZP_1204 (alias)
	branch Test(UGE,C_1205) l000000000040C6A0
// DataOut: fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C6A0:
	wLoc6A_1296 = __fstcw()
	eax_1297 = (word32) wLoc6A_1296
	ah_1298 = SLICE(eax_1297, byte, 8) (alias)
	rLoc2_1299 = rLoc2_1202 - rLoc1_1203
	v71_1300 = rLoc2_1299
	rLoc2_1301 = rLoc1_1203
	rLoc1_1302 = v71_1300
	r10_1303 = 0x0000000000000000
	ah_1304 = ah_1298 | 0x0C
	ax_1305 = DPB(ax_644, ah_1304, 8) (alias)
	wLoc6C_1306 = ax_1305
	__fldcw(wLoc6C_1306)
	qwLoc68_1307 = (int64) rLoc2_1301
	__fldcw(wLoc6A_1296)
	rax_1308 = qwLoc68_1307
	rax_1309 = rax_1308 ^ rdx_646
	eax_1310 = (word32) rax_1309 (alias)
	rdx_rax_1311 = SEQ(rdx_646, rax_1309) (alias)
	edx_eax_1312 = rax_1309 (alias)
	ah_1313 = SLICE(rax_1309, byte, 8) (alias)
	ax_1314 = (word16) rax_1309 (alias)
	al_1315 = (byte) rax_1309 (alias)
	SZO_1316 = cond(rax_1309)
	C_1317 = false
// DataOut: al ax eax fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C418:
	rLoc1_1278 = rLoc2_1202
	wLoc6A_1279 = __fstcw()
	eax_1280 = (word32) wLoc6A_1279
	ah_1281 = SLICE(eax_1280, byte, 8) (alias)
	ah_1282 = ah_1281 | 0x0C
	ax_1283 = DPB(ax_644, ah_1282, 8) (alias)
	SZO_1284 = cond(ah_1282)
	C_1285 = false
	wLoc6C_1286 = ax_1283
	rLoc2_1287 = rLoc2_1202
	__fldcw(wLoc6C_1286)
	qwLoc68_1288 = (int64) rLoc2_1287
	__fldcw(wLoc6A_1279)
	rax_1289 = qwLoc68_1288
	eax_1290 = (word32) rax_1289 (alias)
	rdx_rax_1291 = SEQ(rdx_646, rax_1289) (alias)
	edx_eax_1292 = rax_1289 (alias)
	ah_1293 = SLICE(rax_1289, byte, 8) (alias)
	ax_1294 = (word16) rax_1289 (alias)
	al_1295 = (byte) rax_1289 (alias)
// DataOut: al ax eax fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C43E:
	wLoc6A_1206 = PHI(wLoc6A_1279, wLoc6A_1296)
	wLoc6C_1207 = PHI(wLoc6C_1286, wLoc6C_1306)
	rLoc2_1208 = PHI(rLoc2_1287, rLoc2_1301)
	qwLoc68_1209 = PHI(qwLoc68_1288, qwLoc68_1307)
	rLoc1_1210 = PHI(rLoc1_1278, rLoc1_1302)
	r10_1211 = PHI(r10_636, r10_1303)
	rax_1212 = PHI(rax_1289, rax_1309)
	eax_1213 = PHI(eax_1290, eax_1310)
	ah_1214 = PHI(ah_1293, ah_1313)
	ax_1215 = PHI(ax_1294, ax_1314)
	al_1216 = PHI(al_1295, al_1315)
	rdx_rax_1217 = PHI(rdx_rax_1291, rdx_rax_1311)
	esi_1218 = dwLoc98_30
	edx_1219 = 0x00000000
	rdx_1220 = DPB(rdx_646, edx_1219, 0) (alias)
	rdx_rax_1221 = DPB(rdx_rax_1217, edx_1219, 64) (alias)
	edx_eax_1222 = SEQ(edx_1219, eax_1213) (alias)
	dl_1223 = (byte) edx_1219 (alias)
	SZO_1224 = cond(esi_1218 & esi_1218)
	Z_1225 = SZO_1224 (alias)
	C_1226 = false
	branch Test(NE,Z_1225) l000000000040C470
// DataOut: al ax eax fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C470:
	rLoc1_1277 = rLoc1_1210
// DataOut: fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ah:<invalid> r10:<invalid> esi:edx & 0x00000003 rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C448:
	qwLoc68_1246 = rax_1212
	SZO_1247 = cond(rax_1212 & rax_1212)
	S_1248 = SZO_1247 (alias)
	C_1249 = false
	rLoc2_1250 = (real64) qwLoc68_1246
	branch Test(SG,S_1248) l000000000040C772
// DataOut: fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ah:<invalid> r10:<invalid> esi:edx & 0x00000003 rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C772:
	rLoc2_1276 = rLoc2_1250 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ah:<invalid> r10:<invalid> esi:edx & 0x00000003 rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C45A:
	rLoc2_1251 = PHI(rLoc2_1250, rLoc2_1276)
	ecx_1252 = 0x00000000
	SZO_1253 = cond(0x00000000)
	edx_1254 = 0x00000001
	rdx_1255 = DPB(rdx_1220, edx_1254, 0) (alias)
	rdx_rax_1256 = DPB(rdx_rax_1221, edx_1254, 64) (alias)
	edx_eax_1257 = SEQ(edx_1254, eax_1213) (alias)
	dl_1258 = (byte) edx_1254 (alias)
	CZP_1259 = cond(rLoc2_1251 - rLoc1_1210)
	Z_1260 = CZP_1259 (alias)
	P_1261 = CZP_1259 (alias)
	rLoc1_1262 = rLoc1_1210
	cl_1263 = Test(PE,P_1261)
	rcx_1264 = DPB(rcx_638, cl_1263, 0) (alias)
	ecx_1265 = DPB(ecx_1252, cl_1263, 0) (alias)
	branch Test(NE,Z_1260) l000000000040C46C
// DataOut: fs r11 r11d r13 r9 rax rbp rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ah:<invalid> r10:<invalid> esi:edx & 0x00000003 rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C468_1:
	rdx_1271 = rcx_1264
	edx_1272 = (word32) rdx_1271 (alias)
	rdx_rax_1273 = SEQ(rdx_1271, rax_1212) (alias)
	edx_eax_1274 = rdx_1271 (alias)
	dl_1275 = (byte) rdx_1271 (alias)
// DataOut: fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:0x00000001 r8:r8 + 648 rdx:<invalid> ah:<invalid> r10:<invalid> esi:edx & 0x00000003 cl:Test(PE,P) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C46C:
	rdx_1266 = PHI(rdx_1255, rdx_1271)
	edx_1267 = PHI(edx_1254, edx_1272)
	rdx_rax_1268 = PHI(rdx_rax_1256, rdx_rax_1273)
	edx_eax_1269 = PHI(edx_eax_1257, edx_eax_1274)
	dl_1270 = PHI(dl_1258, dl_1275)
// DataOut: fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ah:<invalid> r10:<invalid> esi:edx & 0x00000003 cl:Test(PE,P) rsi:<invalid> -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C472:
	rLoc2_1227 = PHI(rLoc2_1251, rLoc2_1208)
	P_1228 = PHI(P_1261, P_90)
	CZP_1229 = PHI(CZP_1259, CZP_1204)
	ecx_1230 = PHI(ecx_1265, ecx_637)
	rcx_1231 = PHI(rcx_1264, rcx_638)
	cl_1232 = PHI(cl_1263, cl_639)
	Z_1233 = PHI(Z_1260, Z_1225)
	rdx_1234 = PHI(rdx_1266, rdx_1220)
	edx_1235 = PHI(edx_1267, edx_1219)
	rdx_rax_1236 = PHI(rdx_rax_1268, rdx_rax_1221)
	edx_eax_1237 = PHI(edx_eax_1269, edx_eax_1222)
	dl_1238 = PHI(dl_1270, dl_1223)
	rax_1239 = rax_1212 + rdx_1234
	qwLoc68_1240 = rax_1239
	SZO_1241 = cond(rax_1239 & rax_1239)
	S_1242 = SZO_1241 (alias)
	C_1243 = false
	rLoc1_1244 = (real64) qwLoc68_1240
	branch Test(NS,S_1242) l000000000040C1CD
// DataOut: fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ah:<invalid> r10:<invalid> esi:edx & 0x00000003 rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C487:
	rLoc1_1245 = rLoc1_1244 + Mem0[0x0000000000415F08:real32]
// DataOut: fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ah:<invalid> r10:<invalid> esi:edx & 0x00000003 rsi:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C1CD:
	wLoc6A_1153 = PHI(wLoc6A, wLoc6A, wLoc6A_1206, wLoc6A_1206)
	wLoc6C_1154 = PHI(wLoc6C, wLoc6C, wLoc6C_1207, wLoc6C_1207)
	rLoc2_1155 = PHI(rLoc2_672, rLoc2_1197, rLoc2_1227, rLoc2_1227)
	qwLoc68_1156 = PHI(qwLoc68_663, qwLoc68_663, qwLoc68_1240, qwLoc68_1240)
	rLoc1_1157 = PHI(rLoc1_673, rLoc1_673, rLoc1_1244, rLoc1_1245)
	P_1158 = PHI(P_90, P_90, P_1228, P_1228)
	CZP_1159 = PHI(CZP_117, CZP_1198, CZP_1229, CZP_1229)
	r10_1160 = PHI(r10_636, r10_636, r10_1211, r10_1211)
	S_1161 = PHI(S_665, S_665, S_1242, S_1242)
	CZ_1162 = PHI(CZ_150, CZ_1199, CZ_1199, CZ_1199)
	rcx_1163 = PHI(rcx_638, rcx_638, rcx_1231, rcx_1231)
	cl_1164 = PHI(cl_639, cl_639, cl_1232, cl_1232)
	Z_1165 = PHI(Z_1152, Z_1152, Z_1233, Z_1233)
	rax_1166 = PHI(rax_660, rax_660, rax_1239, rax_1239)
	edx_1167 = PHI(edx_647, edx_647, edx_1235, edx_1235)
	dl_1168 = PHI(dl_650, dl_650, dl_1238, dl_1238)
	rLocD0_1169 = (real80) rLoc1_1157
	rbx_1170 = qwLocA0_32
	ecx_1171 = 0x00415F18
	rcx_1172 = DPB(rcx_1163, ecx_1171, 0) (alias)
	rdx_1173 = 0xFFFFFFFFFFFFFFFF
	esi_1174 = 0x00000001
	rsi_1175 = DPB(rsi_652, esi_1174, 0) (alias)
	eax_1176 = 0x00000000
	rax_1177 = DPB(rax_1166, eax_1176, 0) (alias)
	r14d_1178 = 0x00000000
	r14_1179 = DPB(r14_62, r14d_1178, 0) (alias)
	SZO_1180 = cond(0x00000000)
	C_1181 = false
	rdi_1182 = rbx_1170
	rax_1183 = DPB(rax_1177, __sprintf_chk(rdi_1182, rsi_1175, 0xFFFFFFFFFFFFFFFF, rcx_1172), 0)
	rdi_1184 = rbx_1170
	ebx_1185 = 0xFFFFFFFF
	rbx_1186 = DPB(rbx_1170, ebx_1185, 0) (alias)
	rax_1187 = DPB(rax_1183, strlen(rdi_1184), 0)
	eax_1188 = (word32) rax_1187 (alias)
	rdx_rax_1189 = SEQ(rdx_1173, rax_1187) (alias)
	edx_eax_1190 = rax_1187 (alias)
	ah_1191 = SLICE(rax_1187, byte, 8) (alias)
	ax_1192 = (word16) rax_1187 (alias)
	al_1193 = (byte) rax_1187 (alias)
	r15_1194 = rax_1187
	r15d_1195 = (word32) r15_1194 (alias)
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:<invalid> rsi:<invalid> ah:<invalid> esi:edx & 0x00000003 cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BEA3:
	rLoc2_746 = (real64) dwLocAC_53
	ebx_747 = 0x00000000
	rbx_748 = DPB(rbx_65, ebx_747, 0) (alias)
	SZO_749 = cond(0x00000000)
	C_750 = false
	rLoc3_751 = rLoc3_668
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:rcx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BEB4:
	rLoc4_753 = PHI(rLoc4, rLoc4_765)
	rLoc3_754 = PHI(rLoc3_751, rLoc3_1147)
	rLoc1_755 = PHI(rLoc1_673, rLoc1_1148)
	ebx_756 = PHI(ebx_747, ebx_760)
	Z_757 = PHI(Z_670, Z_1142)
	rbx_758 = PHI(rbx_748, rbx_761)
	rLoc4_759 = rLoc4_753
	ebx_760 = ebx_756 + 0x00000001
	rbx_761 = DPB(rbx_758, ebx_760, 0) (alias)
	SCZO_762 = cond(ebx_760)
	rLoc4_763 = rLoc4_759 * rLoc2_746
	v45_764 = rLoc4_763
	rLoc4_765 = rLoc1_755
	rLoc1_766 = v45_764
	CZP_767 = cond(rLoc4_765 - rLoc1_766)
	C_768 = CZP_767 (alias)
	branch rLoc4_765 <u rLoc1_766 l000000000040BED0
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BED0:
	rLoc2_1149 = rLoc4_765
	rLoc1_1150 = rLoc3_754
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BEC1:
	SCZO_1141 = cond(ebx_760 - 0x00000008)
	Z_1142 = SCZO_1141 (alias)
	branch Test(NE,Z_1142) l000000000040BEB0
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BEB0:
	rLoc3_1145 = rLoc4_765
	v70_1146 = rLoc3_1145
	rLoc3_1147 = rLoc1_766
	rLoc1_1148 = v70_1146
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BEC6:
	rLoc2_1143 = rLoc4_765
	rLoc1_1144 = rLoc3_754
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BED4:
	rLoc2_769 = PHI(rLoc2_1143, rLoc2_1149)
	rLoc1_770 = PHI(rLoc1_1144, rLoc1_1150)
	rLoc1_771 = rLoc2_769 / rLoc1_770
	SCZO_772 = cond(dwLoc98_30 - 0x00000001)
	Z_773 = SCZO_772 (alias)
	rLoc2_774 = rLoc2_769
	branch dwLoc98_30 == 0x00000001 l000000000040BF70
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BF70:
	v68_1138 = rLoc2_774
	rLoc2_1139 = rLoc1_771
	rLoc1_1140 = v68_1138
// DataOut: ebx fs r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BEE3:
	rLoc2_1015 = rLoc2_774
	rLoc2_1016 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_1017 = cond(rLoc2_1016 - rLoc1_771)
	CZ_1018 = CZP_1017 (alias)
	branch Test(ULE,CZ_1018) l000000000040C498
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C498:
	rLoc2_1135 = rLoc2_1016
// DataOut: ebx fs r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BEF3:
	rLoc2_1019 = (real64) Mem0[0x0000000000415F0C:real32]
	v51_1020 = rLoc2_1019
	rLoc2_1021 = rLoc1_771
	rLoc1_1022 = v51_1020
	CZP_1023 = cond(rLoc2_1021 - rLoc1_1022)
	C_1024 = CZP_1023 (alias)
	branch Test(UGE,C_1024) l000000000040C660
// DataOut: ebx fs r11 r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C660:
	wLoc6A_1113 = __fstcw()
	eax_1114 = (word32) wLoc6A_1113
	ah_1115 = SLICE(eax_1114, byte, 8) (alias)
	rLoc2_1116 = rLoc2_1021 - rLoc1_1022
	v58_1117 = rLoc2_1116
	rLoc2_1118 = rLoc1_1022
	rLoc1_1119 = v58_1117
	r10_1120 = 0x0000000000000000
	ah_1121 = ah_1115 | 0x0C
	ax_1122 = DPB(ax_644, ah_1121, 8) (alias)
	wLoc6C_1123 = ax_1122
	__fldcw(wLoc6C_1123)
	qwLoc68_1124 = (int64) rLoc2_1118
	__fldcw(wLoc6A_1113)
	rax_1125 = qwLoc68_1124
	rax_1126 = rax_1125 ^ rdx_646
	eax_1127 = (word32) rax_1126 (alias)
	rdx_rax_1128 = SEQ(rdx_646, rax_1126) (alias)
	edx_eax_1129 = rax_1126 (alias)
	ah_1130 = SLICE(rax_1126, byte, 8) (alias)
	ax_1131 = (word16) rax_1126 (alias)
	al_1132 = (byte) rax_1126 (alias)
	SZO_1133 = cond(rax_1126)
	C_1134 = false
// DataOut: al ax ebx fs r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BF03:
	rLoc1_1095 = rLoc2_1021
	wLoc6A_1096 = __fstcw()
	eax_1097 = (word32) wLoc6A_1096
	ah_1098 = SLICE(eax_1097, byte, 8) (alias)
	ah_1099 = ah_1098 | 0x0C
	ax_1100 = DPB(ax_644, ah_1099, 8) (alias)
	SZO_1101 = cond(ah_1099)
	C_1102 = false
	wLoc6C_1103 = ax_1100
	rLoc2_1104 = rLoc2_1021
	__fldcw(wLoc6C_1103)
	qwLoc68_1105 = (int64) rLoc2_1104
	__fldcw(wLoc6A_1096)
	rax_1106 = qwLoc68_1105
	eax_1107 = (word32) rax_1106 (alias)
	rdx_rax_1108 = SEQ(rdx_646, rax_1106) (alias)
	edx_eax_1109 = rax_1106 (alias)
	ah_1110 = SLICE(rax_1106, byte, 8) (alias)
	ax_1111 = (word16) rax_1106 (alias)
	al_1112 = (byte) rax_1106 (alias)
// DataOut: al ax ebx fs r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:r8 rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> r10:(uint64) (rdx_rax /u (r8 + 1296)) *s rdi rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -104(fp):r8 + 648 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BF29:
	wLoc6A_1025 = PHI(wLoc6A_1096, wLoc6A_1113)
	wLoc6C_1026 = PHI(wLoc6C_1103, wLoc6C_1123)
	rLoc2_1027 = PHI(rLoc2_1104, rLoc2_1118)
	qwLoc68_1028 = PHI(qwLoc68_1105, qwLoc68_1124)
	rLoc1_1029 = PHI(rLoc1_1095, rLoc1_1119)
	r10_1030 = PHI(r10_636, r10_1120)
	rax_1031 = PHI(rax_1106, rax_1126)
	eax_1032 = PHI(eax_1107, eax_1127)
	ah_1033 = PHI(ah_1110, ah_1130)
	ax_1034 = PHI(ax_1111, ax_1131)
	al_1035 = PHI(al_1112, al_1132)
	rdx_rax_1036 = PHI(rdx_rax_1108, rdx_rax_1128)
	ecx_1037 = dwLoc98_30
	edx_1038 = 0x00000000
	rdx_1039 = DPB(rdx_646, edx_1038, 0) (alias)
	rdx_rax_1040 = DPB(rdx_rax_1036, edx_1038, 64) (alias)
	edx_eax_1041 = SEQ(edx_1038, eax_1032) (alias)
	dl_1042 = (byte) edx_1038 (alias)
	SZO_1043 = cond(ecx_1037 & ecx_1037)
	Z_1044 = SZO_1043 (alias)
	C_1045 = false
	branch Test(NE,Z_1044) l000000000040BF55
// DataOut: al ax ebx fs r11 r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BF33:
	qwLoc68_1070 = rax_1031
	SZO_1071 = cond(rax_1031 & rax_1031)
	S_1072 = SZO_1071 (alias)
	C_1073 = false
	rLoc2_1074 = (real64) qwLoc68_1070
	branch Test(SG,S_1072) l000000000040C77D
// DataOut: ebx fs r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:edx & 0x00000003 r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C77D:
	rLoc2_1094 = rLoc2_1074 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r11 r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:edx & 0x00000003 r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BF45:
	rLoc2_1075 = PHI(rLoc2_1074, rLoc2_1094)
	ecx_1076 = 0x00000000
	SZO_1077 = cond(0x00000000)
	edx_1078 = 0x00000001
	rdx_1079 = DPB(rdx_1039, edx_1078, 0) (alias)
	rdx_rax_1080 = DPB(rdx_rax_1040, edx_1078, 64) (alias)
	edx_eax_1081 = SEQ(edx_1078, eax_1032) (alias)
	dl_1082 = (byte) edx_1078 (alias)
	CZP_1083 = cond(rLoc2_1075 - rLoc1_1029)
	Z_1084 = CZP_1083 (alias)
	P_1085 = CZP_1083 (alias)
	cl_1086 = Test(PE,P_1085)
	rcx_1087 = DPB(rcx_638, cl_1086, 0) (alias)
	ecx_1088 = DPB(ecx_1076, cl_1086, 0) (alias)
	branch Test(NE,Z_1084) l000000000040BF55
// DataOut: ebx fs r11 r13 r9 rax rbp rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:edx & 0x00000003 r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BF51_1:
	rdx_1089 = rcx_1087
	edx_1090 = (word32) rdx_1089 (alias)
	rdx_rax_1091 = SEQ(rdx_1089, rax_1031) (alias)
	edx_eax_1092 = rdx_1089 (alias)
	dl_1093 = (byte) rdx_1089 (alias)
// DataOut: ebx fs r11 r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:0x00000001 r8:r8 + 648 rdx:<invalid> ebx:<invalid> ah:<invalid> r10:<invalid> cl:Test(PE,P) rsi:(uint64) (rdx_rax /u rcx) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BF55:
	P_1046 = PHI(P_1085, P_1085, P_90)
	CZP_1047 = PHI(CZP_1083, CZP_1083, CZP_1023)
	ecx_1048 = PHI(ecx_1088, ecx_1088, ecx_1037)
	rcx_1049 = PHI(rcx_1087, rcx_1087, rcx_638)
	cl_1050 = PHI(cl_1086, cl_1086, cl_639)
	Z_1051 = PHI(Z_1084, Z_1084, Z_1044)
	rdx_1052 = PHI(rdx_1079, rdx_1089, rdx_1039)
	edx_1053 = PHI(edx_1078, edx_1090, edx_1038)
	rdx_rax_1054 = PHI(rdx_rax_1080, rdx_rax_1091, rdx_rax_1040)
	edx_eax_1055 = PHI(edx_eax_1081, edx_eax_1092, edx_eax_1041)
	dl_1056 = PHI(dl_1082, dl_1093, dl_1042)
	rax_1057 = rax_1031 + rdx_1052
	qwLoc68_1058 = rax_1057
	SZO_1059 = cond(rax_1057 & rax_1057)
	S_1060 = SZO_1059 (alias)
	C_1061 = false
	rLoc2_1062 = (real64) qwLoc68_1058
	branch Test(SG,S_1060) l000000000040C758
// DataOut: ebx fs r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C758:
	rLoc2_1066 = rLoc2_1062 + Mem0[0x0000000000415F08:real32]
	v66_1067 = rLoc2_1066
	rLoc2_1068 = rLoc1_1029
	rLoc1_1069 = v66_1067
// DataOut: ebx fs r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BF6A:
	v55_1063 = rLoc2_1062
	rLoc2_1064 = rLoc1_1029
	rLoc1_1065 = v55_1063
// DataOut: ebx fs r11 r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> ah:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BF72:
	wLoc6A_775 = PHI(wLoc6A_1025, wLoc6A_1025, wLoc6A, wLoc6A)
	wLoc6C_776 = PHI(wLoc6C_1026, wLoc6C_1026, wLoc6C, wLoc6C)
	rLoc2_777 = PHI(rLoc2_1064, rLoc2_1068, rLoc2_1135, rLoc2_1139)
	qwLoc68_778 = PHI(qwLoc68_1058, qwLoc68_1058, qwLoc68_663, qwLoc68_663)
	rLoc1_779 = PHI(rLoc1_1065, rLoc1_1069, rLoc1_771, rLoc1_1140)
	P_780 = PHI(P_1046, P_1046, P_90, P_90)
	CZP_781 = PHI(CZP_1047, CZP_1047, CZP_1017, CZP_767)
	r10_782 = PHI(r10_1030, r10_1030, r10_636, r10_636)
	S_783 = PHI(S_1060, S_1060, S_665, S_665)
	rcx_784 = PHI(rcx_1049, rcx_1049, rcx_638, rcx_638)
	cl_785 = PHI(cl_1050, cl_1050, cl_639, cl_639)
	C_786 = PHI(C_1061, C_1061, C_768, C_768)
	rax_787 = PHI(rax_1057, rax_1057, rax_660, rax_660)
	r14_788 = qwLocA0_32
	rdx_789 = 0xFFFFFFFFFFFFFFFF
	ecx_790 = 0x00415F1E
	rcx_791 = DPB(rcx_784, ecx_790, 0) (alias)
	esi_792 = 0x00000001
	rsi_793 = DPB(rsi_652, esi_792, 0) (alias)
	eax_794 = 0x00000000
	rax_795 = DPB(rax_787, eax_794, 0) (alias)
	qwLoc80_796 = r11_143
	rdi_797 = r14_788
	rLoc90_798 = (real80) rLoc2_777
	rLocD0_799 = (real80) rLoc1_779
	rax_800 = DPB(rax_795, __sprintf_chk(rdi_797, rsi_793, 0xFFFFFFFFFFFFFFFF, rcx_791), 0)
	rdi_801 = r14_788
	rax_802 = DPB(rax_800, strlen(rdi_801), 0)
	r11_803 = qwLoc80_796
	edx_804 = dwLoc78_44
	rdx_805 = DPB(rdx_789, edx_804, 0) (alias)
	dl_806 = (byte) edx_804 (alias)
	r15_807 = rax_802
	r15d_808 = (word32) r15_807 (alias)
	eax_809 = 0x00000000
	rLoc1_810 = (real64) rLoc90_798
	SZO_811 = cond(edx_804 & edx_804)
	Z_812 = SZO_811 (alias)
	r14_813 = r11_803 + 0x0000000000000001
	r14d_814 = (word32) r14_813 (alias)
	al_815 = (edx_804 & edx_804) == 0x00000000
	rax_816 = DPB(rax_802, al_815, 0) (alias)
	rax_817 = r14_813 + 0x0000000000000001 + rax_816
	eax_818 = (word32) rax_817 (alias)
	rdx_rax_819 = SEQ(rdx_805, rax_817) (alias)
	edx_eax_820 = rax_817 (alias)
	ah_821 = SLICE(rax_817, byte, 8) (alias)
	ax_822 = (word16) rax_817 (alias)
	al_823 = (byte) rax_817 (alias)
	SCZO_824 = cond(r15_807 - rax_817)
	CZ_825 = SCZO_824 (alias)
	branch r15_807 >u rax_817 l000000000040BFF0
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:rsi r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> r10:<invalid> rsi:(uint64) (rdx_rax /u rcx) ah:<invalid> cl:Test(PE,P) -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BFCB:
	SZO_1001 = cond(bLocB0 & 0x08)
	Z_1002 = SZO_1001 (alias)
	C_1003 = false
	branch Test(EQ,Z_1002) l000000000040C208
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:0x00415F1E r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:edx & 0x00000020 r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> r10:<invalid> rsi:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C208:
	rLoc1_1014 = rLoc1_810
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:0x00415F1E r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:edx & 0x00000020 r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> r10:<invalid> rsi:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BFD6:
	rax_1004 = qwLocA0_32
	eax_1005 = (word32) rax_1004 (alias)
	rdx_rax_1006 = SEQ(rdx_805, rax_1004) (alias)
	edx_eax_1007 = rax_1004 (alias)
	ah_1008 = SLICE(rax_1004, byte, 8) (alias)
	ax_1009 = (word16) rax_1004 (alias)
	al_1010 = (byte) rax_1004 (alias)
	SCZO_1011 = cond(Mem0[rax_1004 - 0x0000000000000001 + r15_807:byte] - 0x30)
	Z_1012 = SCZO_1011 (alias)
	branch Test(NE,Z_1012) l000000000040C210
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:0x00415F1E r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:edx & 0x00000020 r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> r10:<invalid> rsi:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C210:
	rLoc1_1013 = rLoc1_810
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:0x00415F1E r15:<invalid> r13:<invalid> rdi:rsi rax:rsi rbp:<invalid> r11:<invalid> edx:edx & 0x00000020 r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> r10:<invalid> rsi:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BFE7:
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:0x00415F1E r15:<invalid> r13:<invalid> rdi:rsi rax:rsi rbp:<invalid> r11:<invalid> edx:edx & 0x00000020 r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> r10:<invalid> rsi:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(0) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040BFF0:
	SZO_826 = PHI(SZO_811, SZO_1001)
	C_827 = PHI(C_786, C_1003)
	rax_828 = PHI(rax_817, rax_1004)
	eax_829 = PHI(eax_818, eax_1005)
	ah_830 = PHI(ah_821, ah_1008)
	ax_831 = PHI(ax_822, ax_1009)
	al_832 = PHI(al_823, al_1010)
	rdx_rax_833 = PHI(rdx_rax_819, rdx_rax_1006)
	edx_eax_834 = PHI(edx_eax_820, edx_eax_1007)
	SCZO_835 = cond(dwLoc98_30 - 0x00000001)
	Z_836 = SCZO_835 (alias)
	rLoc1_837 = rLoc1_810 * Mem0[0x0000000000415F84:real32]
	branch dwLoc98_30 == 0x00000001 l000000000040C0A0
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:0x00415F1E r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:edx & 0x00000020 r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> r10:<invalid> rsi:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C001:
	rLoc2_880 = (real64) Mem0[0x0000000000415F90:real80]
	CZP_881 = cond(rLoc2_880 - rLoc1_837)
	CZ_882 = CZP_881 (alias)
	branch rLoc2_880 <=u rLoc1_837 l000000000040C0A0
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:0x00415F1E r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:edx & 0x00000020 r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> r10:<invalid> rsi:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C00F:
	rLoc2_883 = (real64) Mem0[0x0000000000415F0C:real32]
	v60_884 = rLoc2_883
	rLoc2_885 = rLoc1_837
	rLoc1_886 = v60_884
	CZP_887 = cond(rLoc2_885 - rLoc1_886)
	C_888 = CZP_887 (alias)
	branch rLoc2_885 >=u rLoc1_886 l000000000040C720
// DataOut: ebx fs r11 r11d r13 r9 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:0x00415F1E r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:edx & 0x00000020 r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> r10:<invalid> rsi:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C720:
	wLoc6A_979 = __fstcw()
	eax_980 = (word32) wLoc6A_979
	ah_981 = SLICE(eax_980, byte, 8) (alias)
	rLoc2_982 = rLoc2_885 - rLoc1_886
	v64_983 = rLoc2_982
	rLoc2_984 = rLoc1_886
	rLoc1_985 = v64_983
	r10_986 = 0x0000000000000000
	ah_987 = ah_981 | 0x0C
	ax_988 = DPB(ax_831, ah_987, 8) (alias)
	wLoc6C_989 = ax_988
	__fldcw(wLoc6C_989)
	qwLoc68_990 = (int64) rLoc2_984
	__fldcw(wLoc6A_979)
	rax_991 = qwLoc68_990
	rax_992 = rax_991 ^ rdx_805
	eax_993 = (word32) rax_992 (alias)
	rdx_rax_994 = SEQ(rdx_805, rax_992) (alias)
	edx_eax_995 = rax_992 (alias)
	ah_996 = SLICE(rax_992, byte, 8) (alias)
	ax_997 = (word16) rax_992 (alias)
	al_998 = (byte) rax_992 (alias)
	SZO_999 = cond(rax_992)
	C_1000 = false
// DataOut: ax ebx fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:0x00415F1E r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:edx & 0x00000020 r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> r10:<invalid> rsi:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C01F:
	rLoc1_961 = rLoc2_885
	wLoc6A_962 = __fstcw()
	eax_963 = (word32) wLoc6A_962
	ah_964 = SLICE(eax_963, byte, 8) (alias)
	ah_965 = ah_964 | 0x0C
	ax_966 = DPB(ax_831, ah_965, 8) (alias)
	SZO_967 = cond(ah_965)
	C_968 = false
	wLoc6C_969 = ax_966
	rLoc2_970 = rLoc2_885
	__fldcw(wLoc6C_969)
	qwLoc68_971 = (int64) rLoc2_970
	__fldcw(wLoc6A_962)
	rax_972 = qwLoc68_971
	eax_973 = (word32) rax_972 (alias)
	rdx_rax_974 = SEQ(rdx_805, rax_972) (alias)
	edx_eax_975 = rax_972 (alias)
	ah_976 = SLICE(rax_972, byte, 8) (alias)
	ax_977 = (word16) rax_972 (alias)
	al_978 = (byte) rax_972 (alias)
// DataOut: ax ebx fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:0x00415F1E r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:edx & 0x00000020 r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> r10:<invalid> rsi:<invalid> ah:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -0098(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C045:
	wLoc6A_889 = PHI(wLoc6A_962, wLoc6A_979)
	wLoc6C_890 = PHI(wLoc6C_969, wLoc6C_989)
	rLoc2_891 = PHI(rLoc2_970, rLoc2_984)
	qwLoc68_892 = PHI(qwLoc68_971, qwLoc68_990)
	rLoc1_893 = PHI(rLoc1_961, rLoc1_985)
	r10_894 = PHI(r10_782, r10_986)
	rax_895 = PHI(rax_972, rax_992)
	eax_896 = PHI(eax_973, eax_993)
	ah_897 = PHI(ah_976, ah_996)
	ax_898 = PHI(ax_977, ax_997)
	al_899 = PHI(al_978, al_998)
	rdx_rax_900 = PHI(rdx_rax_974, rdx_rax_994)
	r14d_901 = dwLoc98_30
	edx_902 = 0x00000000
	rdx_903 = DPB(rdx_805, edx_902, 0) (alias)
	rdx_rax_904 = DPB(rdx_rax_900, edx_902, 64) (alias)
	edx_eax_905 = SEQ(edx_902, eax_896) (alias)
	dl_906 = (byte) edx_902 (alias)
	SZO_907 = cond(r14d_901 & r14d_901)
	Z_908 = SZO_907 (alias)
	C_909 = false
	branch (r14d_901 & r14d_901) != 0x00000000 l000000000040C080
// DataOut: ax ebx fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:0x00415F1E r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:edx & 0x00000020 r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> ah:<invalid> r10:<invalid> rsi:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C080:
	rLoc1_960 = rLoc1_893
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:0x00415F1E r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:edx & 0x00000020 & 0x00000020 ^ (edx & 0x00000020) & 0x00000020 r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> ah:<invalid> r10:<invalid> r14d:edx & 0x00000003 rsi:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C051:
	qwLoc68_929 = rax_895
	SZO_930 = cond(rax_895 & rax_895)
	S_931 = SZO_930 (alias)
	C_932 = false
	rLoc2_933 = (real64) qwLoc68_929
	branch (rax_895 & rax_895) < 0x0000000000000000 l000000000040C79E
// DataOut: ebx fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:0x00415F1E r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:edx & 0x00000020 & 0x00000020 ^ (edx & 0x00000020) & 0x00000020 r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> ah:<invalid> r10:<invalid> r14d:edx & 0x00000003 rsi:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):(int64) rLoc2 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C79E:
	rLoc2_959 = rLoc2_933 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r11 r11d r13 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:0x00415F1E r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:edx & 0x00000020 & 0x00000020 ^ (edx & 0x00000020) & 0x00000020 r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> ah:<invalid> r10:<invalid> r14d:edx & 0x00000003 rsi:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C063:
	rLoc2_934 = PHI(rLoc2_933, rLoc2_959)
	ecx_935 = 0x00000000
	SZO_936 = cond(0x00000000)
	edx_937 = 0x00000001
	rdx_938 = DPB(rdx_903, edx_937, 0) (alias)
	rdx_rax_939 = DPB(rdx_rax_904, edx_937, 64) (alias)
	edx_eax_940 = SEQ(edx_937, eax_896) (alias)
	dl_941 = (byte) edx_937 (alias)
	CZP_942 = cond(rLoc2_934 - rLoc1_893)
	Z_943 = CZP_942 (alias)
	P_944 = CZP_942 (alias)
	rLoc1_945 = rLoc1_893
	cl_946 = Test(PE,P_944)
	rcx_947 = DPB(rcx_791, cl_946, 0) (alias)
	ecx_948 = DPB(ecx_935, cl_946, 0) (alias)
	branch rLoc2_934 != rLoc1_893 l000000000040C075
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:0x00415F1E r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:edx & 0x00000020 & 0x00000020 ^ (edx & 0x00000020) & 0x00000020 r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> ah:<invalid> r10:<invalid> r14d:edx & 0x00000003 rsi:<invalid> cl:0x1E -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C071_1:
	rdx_954 = rcx_947
	edx_955 = (word32) rdx_954 (alias)
	rdx_rax_956 = SEQ(rdx_954, rax_895) (alias)
	edx_eax_957 = rdx_954 (alias)
	dl_958 = (byte) rdx_954 (alias)
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:0x00000001 r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> ah:<invalid> r10:<invalid> r14d:edx & 0x00000003 cl:Test(PE,P) rsi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C075:
	rdx_949 = PHI(rdx_938, rdx_954)
	edx_950 = PHI(edx_937, edx_955)
	rdx_rax_951 = PHI(rdx_rax_939, rdx_rax_956)
	edx_eax_952 = PHI(edx_eax_940, edx_eax_957)
	dl_953 = PHI(dl_941, dl_958)
// DataOut: ebx fs r11 r11d r13 r9 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> ah:<invalid> r10:<invalid> r14d:edx & 0x00000003 cl:Test(PE,P) rsi:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C082:
	rLoc2_910 = PHI(rLoc2_934, rLoc2_891)
	P_911 = PHI(P_944, P_780)
	CZP_912 = PHI(CZP_942, CZP_887)
	ecx_913 = PHI(ecx_948, ecx_790)
	rcx_914 = PHI(rcx_947, rcx_791)
	cl_915 = PHI(cl_946, cl_785)
	Z_916 = PHI(Z_943, Z_908)
	rdx_917 = PHI(rdx_949, rdx_903)
	edx_918 = PHI(edx_950, edx_902)
	rdx_rax_919 = PHI(rdx_rax_951, rdx_rax_904)
	edx_eax_920 = PHI(edx_eax_952, edx_eax_905)
	dl_921 = PHI(dl_953, dl_906)
	rax_922 = rax_895 + rdx_917
	qwLoc68_923 = rax_922
	SZO_924 = cond(rax_922 & rax_922)
	S_925 = SZO_924 (alias)
	C_926 = false
	rLoc1_927 = (real64) qwLoc68_923
	branch (rax_922 & rax_922) >= 0x0000000000000000 l000000000040C0A0
// DataOut: ebx fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> ah:<invalid> r10:<invalid> r14d:edx & 0x00000003 rsi:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C093:
	rLoc1_928 = rLoc1_927 + Mem0[0x0000000000415F08:real32]
// DataOut: ebx fs r11 r11d r13 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> ah:<invalid> r10:<invalid> r14d:edx & 0x00000003 rsi:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C0A0:
	wLoc6A_838 = PHI(wLoc6A_775, wLoc6A_775, wLoc6A_889, wLoc6A_889)
	wLoc6C_839 = PHI(wLoc6C_776, wLoc6C_776, wLoc6C_890, wLoc6C_890)
	rLoc2_840 = PHI(rLoc2_777, rLoc2_880, rLoc2_910, rLoc2_910)
	qwLoc68_841 = PHI(qwLoc68_778, qwLoc68_778, qwLoc68_923, qwLoc68_923)
	rLoc1_842 = PHI(rLoc1_837, rLoc1_837, rLoc1_927, rLoc1_928)
	P_843 = PHI(P_780, P_780, P_911, P_911)
	CZP_844 = PHI(CZP_781, CZP_881, CZP_912, CZP_912)
	r10_845 = PHI(r10_782, r10_782, r10_894, r10_894)
	S_846 = PHI(S_783, S_783, S_925, S_925)
	CZ_847 = PHI(CZ_825, CZ_882, CZ_882, CZ_882)
	rcx_848 = PHI(rcx_791, rcx_791, rcx_914, rcx_914)
	cl_849 = PHI(cl_785, cl_785, cl_915, cl_915)
	Z_850 = PHI(Z_836, Z_836, Z_916, Z_916)
	rax_851 = PHI(rax_828, rax_828, rax_922, rax_922)
	edx_852 = PHI(edx_804, edx_804, edx_918, edx_918)
	dl_853 = PHI(dl_806, dl_806, dl_921, dl_921)
	rLoc1_854 = rLoc1_842 / Mem0[0x0000000000415F84:real32]
	r14_855 = qwLocA0_32
	ecx_856 = 0x00415F18
	rcx_857 = DPB(rcx_848, ecx_856, 0) (alias)
	rdx_858 = 0xFFFFFFFFFFFFFFFF
	esi_859 = 0x00000001
	rsi_860 = DPB(rsi_793, esi_859, 0) (alias)
	eax_861 = 0x00000000
	rax_862 = DPB(rax_851, eax_861, 0) (alias)
	rdi_863 = r14_855
	rLocD0_864 = (real80) rLoc1_854
	rax_865 = DPB(rax_862, __sprintf_chk(rdi_863, rsi_860, 0xFFFFFFFFFFFFFFFF, rcx_857), 0)
	rdi_866 = r14_855
	r14d_867 = 0x00000000
	r14_868 = DPB(r14_855, r14d_867, 0) (alias)
	SZO_869 = cond(0x00000000)
	C_870 = false
	rax_871 = DPB(rax_865, strlen(rdi_866), 0)
	eax_872 = (word32) rax_871 (alias)
	rdx_rax_873 = SEQ(rdx_858, rax_871) (alias)
	edx_eax_874 = rax_871 (alias)
	ah_875 = SLICE(rax_871, byte, 8) (alias)
	ax_876 = (word16) rax_871 (alias)
	al_877 = (byte) rax_871 (alias)
	r15_878 = rax_871
	r15d_879 = (word32) r15_878 (alias)
// DataOut: ebx fs r11 r11d r13 r14 r14d r15 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> ebx:<invalid> esi:0x00000001 al:<invalid> r10:<invalid> rsi:<invalid> ah:<invalid> r14d:edx & 0x00000003 cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C218:
	rLoc4_674 = PHI(rLoc4, rLoc4_765, rLoc4_765, rLoc4_765)
	rLoc3_675 = PHI(rLoc3_668, rLoc3_754, rLoc3_754, rLoc3_754)
	qwLoc80_676 = PHI(qwLoc80_132, qwLoc80_796, qwLoc80_796, qwLoc80_796)
	rLoc90_677 = PHI(rLoc90, rLoc90_798, rLoc90_798, rLoc90_798)
	wLoc6A_678 = PHI(wLoc6A_1153, wLoc6A_775, wLoc6A_775, wLoc6A_838)
	wLoc6C_679 = PHI(wLoc6C_1154, wLoc6C_776, wLoc6C_776, wLoc6C_839)
	rLoc2_680 = PHI(rLoc2_1155, rLoc2_777, rLoc2_777, rLoc2_840)
	qwLoc68_681 = PHI(qwLoc68_1156, qwLoc68_778, qwLoc68_778, qwLoc68_841)
	rLoc1_682 = PHI(rLoc1_1157, rLoc1_1013, rLoc1_1014, rLoc1_854)
	rLocD0_683 = PHI(rLocD0_1169, rLocD0_799, rLocD0_799, rLocD0_864)
	r15_684 = PHI(r15_1194, r15_807, r15_807, r15_878)
	r14_685 = PHI(r14_1179, r14_813, r14_813, r14_868)
	rax_686 = PHI(rax_1187, rax_1004, rax_817, rax_871)
	r12_687 = qwLocB8_151
	rsi_688 = qwLocA0_32
	rdx_689 = r15_684
	rdx_rax_690 = SEQ(rdx_689, rax_686) (alias)
	edx_eax_691 = rdx_689 (alias)
	r12_692 = r12_687 - r15_684
	r12d_693 = (word32) r12_692 (alias)
	r15_694 = r15_684 - r14_685
	r15d_695 = (word32) r15_694 (alias)
	SCZO_696 = cond(r15_694)
	rdi_697 = r12_692
	call memmove (retsize: 8; depth: 216)
		uses: ah_643,al_645,ax_644,bLocB0,C_671,cl_639,CZ_150,CZP_117,dil_120,dl_650,dwLoc04_4,dwLoc08_10,dwLoc0C_15,dwLoc10_18,dwLoc14_22,dwLoc18_25,dwLoc74,dwLoc78_44,dwLoc98_30,dwLocAC_53,dwLocB0_34,eax_642,ebx_79,ecx_637,edi_119,edx_647,esi_635,fs_69,P_90,qwLoc08,qwLoc10,qwLoc18,qwLoc28_40,qwLoc68_681,qwLoc80_676,qwLoc90,qwLoc98,qwLocA0_32,qwLocA8_36,qwLocB8_151,r10_636,r10b_632,r10d_633,r11_143,r12_692,r12d_693,r13_144,r14_685,r14d_87,r15_694,r15d_695,r8_148,r9_95,r9d_83,rax_686,rbp_104,rbx_65,rcx_638,rdi_697,rdx_689,rLoc90_677,rLocD0_683,rsi_688,rsp_55,S_665,SCZO_696,sil_634,SZO_669,wLoc6A_678,wLoc6C_679,Z_670
		defs: ah_734,al_737,ax_735,C_706,cl_728,CZ_722,CZP_732,dil_740,dl_738,eax_703,ebx_725,ecx_716,edi_727,edx_704,esi_730,fs_715,P_736,r10_726,r10b_744,r10d_743,r11_720,r12_710,r12d_731,r13_718,r14_708,r14d_733,r15_717,r15d_742,r8_714,r9_741,r9d_729,rax_719,rbp_709,rbx_711,rcx_712,rdi_702,rdx_721,rsi_707,rsp_701,S_724,SCZO_713,sil_739,SZO_705,Z_723
	r8_745 = r12_710 + r15_717
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:rdi rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:rsi rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:r8 + 648 rdx:<invalid> esi:0x00000001 r14d:<invalid> ebx:<invalid> r10:<invalid> rsi:<invalid> al:<invalid> ah:<invalid> cl:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):edx & 0x00000003 -144(fp):(real80) rLoc2 -128(fp):<invalid> -120(fp):edx & 0x00000020 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C237:
	dwLoc74_152 = PHI(dwLoc74, dwLoc74_1372)
	qwLoc90_153 = PHI(qwLoc90, qwLoc90_1373)
	rLoc4_154 = PHI(rLoc4_674, rLoc4)
	rLoc3_155 = PHI(rLoc3_675, rLoc3)
	qwLoc80_156 = PHI(qwLoc80_676, qwLoc80_1374)
	rLoc90_157 = PHI(rLoc90_677, rLoc90)
	wLoc6A_158 = PHI(wLoc6A_678, wLoc6A)
	wLoc6C_159 = PHI(wLoc6C_679, wLoc6C)
	rLoc2_160 = PHI(rLoc2_680, rLoc2)
	qwLoc68_161 = PHI(qwLoc68_681, qwLoc68)
	rLoc1_162 = PHI(rLoc1_682, rLoc1)
	rLocD0_163 = PHI(rLocD0_683, rLocD0)
	qwLoc98_164 = PHI(qwLoc98, qwLoc98_1427)
	r10b_165 = PHI(r10b_744, r10b_1479)
	r10d_166 = PHI(r10d_743, r10d_1478)
	dil_167 = PHI(dil_740, dil_1377)
	sil_168 = PHI(sil_739, sil_1378)
	P_169 = PHI(P_736, P_90)
	CZP_170 = PHI(CZP_732, CZP_1341)
	esi_171 = PHI(esi_730, esi_1412)
	edi_172 = PHI(edi_727, edi_1413)
	r10_173 = PHI(r10_726, r10_1477)
	S_174 = PHI(S_724, S_1345)
	r11_175 = PHI(r11_720, r11_1382)
	fs_176 = PHI(fs_715, fs_69)
	r8_177 = PHI(r8_745, r8_1431)
	r13_178 = PHI(r13_718, r13_144)
	r15_179 = PHI(r15_717, r15_130)
	r15d_180 = PHI(r15d_742, r15d_131)
	r9_181 = PHI(r9_741, r9_1451)
	r9d_182 = PHI(r9d_729, r9d_1452)
	r12_183 = PHI(r12_710, r12_1456)
	r12d_184 = PHI(r12d_731, r12d_1457)
	r14d_185 = PHI(r14d_733, r14d_1388)
	r14_186 = PHI(r14_708, r14_1389)
	CZ_187 = PHI(CZ_722, CZ_1390)
	ebx_188 = PHI(ebx_725, ebx_1432)
	ecx_189 = PHI(ecx_716, ecx_1414)
	rcx_190 = PHI(rcx_712, rcx_1415)
	cl_191 = PHI(cl_728, cl_1416)
	rax_192 = PHI(rax_719, rax_1462)
	eax_193 = PHI(eax_703, eax_1463)
	ah_194 = PHI(ah_734, ah_1466)
	ax_195 = PHI(ax_735, ax_1467)
	al_196 = PHI(al_737, al_1468)
	rdx_197 = PHI(rdx_721, rdx_1460)
	edx_198 = PHI(edx_704, edx_1442)
	rdx_rax_199 = PHI(rdx_rax_690, rdx_rax_1464)
	edx_eax_200 = PHI(edx_eax_691, edx_eax_1465)
	dl_201 = PHI(dl_738, dl_1406)
	SCZO_202 = PHI(SCZO_713, SCZO_1445)
	rbx_203 = PHI(rbx_711, rbx_1446)
	rbp_204 = PHI(rbp_709, rbp_104)
	rsi_205 = PHI(rsi_707, rsi_1447)
	rdi_206 = PHI(rdi_702, rdi_1448)
	rsp_207 = PHI(rsp_701, rsp_55)
	SZO_209 = cond(bLocB0 & 0x04)
	Z_210 = SZO_209 (alias)
	C_211 = false
	branch (bLocB0 & 0x04) != 0x00 l000000000040C318
// DataOut: ebx fs r11 r11d r12 r13 r14d r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:0xCCCCCCCD al:<invalid> r9:0x00000000CCCCCCCD Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C318:
	r8_496 = r8_177 - r12_183
	SCZO_497 = cond(r8_496)
	rdi_498 = r13_178
	r15_499 = 0xFFFFFFFFFFFFFFFF
	r15d_500 = (word32) r15_499 (alias)
	r14_501 = r8_496
	r14d_502 = (word32) r14_501 (alias)
	rax_503 = DPB(rax_192, strlen(rdi_498), 0)
	rdi_504 = fp - 0x0000000000000060
	rsi_505 = r12_183
	ecx_506 = 0x00000029
	rdx_507 = r14_501
	qwLoc98_508 = rax_503
	call __memcpy_chk (retsize: 8; depth: 216)
		uses: ah_194,al_196,ax_195,bLocB0,C_211,cl_191,CZ_187,CZP_170,dil_167,dl_201,dwLoc04_4,dwLoc08_10,dwLoc0C_15,dwLoc10_18,dwLoc14_22,dwLoc18_25,dwLoc74_152,dwLoc78_44,dwLoc98_30,dwLocAC_53,dwLocB0_34,eax_193,ebx_188,ecx_506,edi_172,edx_198,esi_171,fs_176,P_169,qwLoc08,qwLoc10,qwLoc18,qwLoc28_40,qwLoc68_161,qwLoc80_156,qwLoc90_153,qwLoc98_508,qwLocA0_32,qwLocA8_36,qwLocB8_151,r10_173,r10b_165,r10d_166,r11_175,r12_183,r12d_184,r13_178,r14_501,r14d_502,r15_499,r15d_500,r8_496,r9_181,r9d_182,rax_503,rbp_204,rbx_203,rcx_190,rdi_504,rdx_507,rLoc90_157,rLocD0_163,rsi_505,rsp_207,S_174,SCZO_497,sil_168,SZO_209,wLoc6A_158,wLoc6C_159,Z_210
		defs: ah_542,al_545,ax_543,C_514,cl_536,CZ_530,CZP_540,dil_548,dl_546,eax_511,ebx_533,ecx_524,edi_535,edx_512,esi_538,fs_523,P_544,r10_534,r10b_552,r10d_551,r11_528,r12_518,r12d_539,r13_526,r14_516,r14d_541,r15_525,r15d_550,r8_522,r9_549,r9d_537,rax_527,rbp_517,rbx_519,rcx_520,rdi_510,rdx_529,rsi_515,rsp_509,S_532,SCZO_521,sil_547,SZO_513,Z_531
	r9_553 = r12_518 + r14_516
	r9d_554 = (word32) r9_553 (alias)
	r12_555 = r13_526
	r12d_556 = (word32) r12_555 (alias)
	r13_557 = qwLoc98_508
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:0xCCCCCCCD al:<invalid> r9:0x00000000CCCCCCCD Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C36C:
	r15_558 = PHI(r15_525, r15_590)
	r15d_559 = PHI(r15d_550, r15d_591)
	r9_560 = PHI(r9_553, r9_618)
	r9d_561 = PHI(r9d_554, r9d_619)
	r14d_562 = PHI(r14d_541, r14d_593)
	r14_563 = PHI(r14_516, r14_592)
	CZ_564 = PHI(CZ_530, CZ_588)
	rax_565 = PHI(rax_527, rax_617)
	eax_566 = PHI(eax_511, eax_599)
	ah_567 = PHI(ah_542, ah_602)
	ax_568 = PHI(ax_543, ax_603)
	al_569 = PHI(al_545, al_604)
	rdx_570 = PHI(rdx_529, rdx_614)
	rdx_rax_571 = PHI(rdx_rax_199, rdx_rax_600)
	SCZO_572 = PHI(SCZO_521, SCZO_613)
	rbp_573 = PHI(rbp_517, rbp_586)
	rsi_574 = PHI(rsi_515, rsi_615)
	rdi_575 = PHI(rdi_510, rdi_616)
	edx_576 = (word32) Mem0[rbp_573 + 0x0000000000000000:byte]
	rdx_577 = DPB(rdx_570, edx_576, 0) (alias)
	rdx_rax_578 = DPB(rdx_rax_571, edx_576, 64) (alias)
	edx_eax_579 = SEQ(edx_576, eax_566) (alias)
	dl_580 = (byte) edx_576 (alias)
	SZO_581 = cond(dl_580 & dl_580)
	Z_582 = SZO_581 (alias)
	C_583 = false
	branch (dl_580 & dl_580) == 0x00 l000000000040C383
// DataOut: dl ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> ah:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C374:
	SCZO_622 = cond(dl_580 - 0x7E)
	CZ_623 = SCZO_622 (alias)
	r15d_624 = (word32) dl_580
	r15_625 = DPB(r15_558, r15d_624, 0) (alias)
	branch dl_580 <=u 0x7E l000000000040C37F
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> r15d:<invalid> ah:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C37B_1:
	r15_630 = r14_563
	r15d_631 = (word32) r15_630 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r15d:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C37F:
	r15_626 = PHI(r15_625, r15_630)
	r15d_627 = PHI(r15d_624, r15d_631)
	rbp_628 = rbp_573 + 0x0000000000000001
	SCZO_629 = cond(rbp_628)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r15d:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C383:
	r15_584 = PHI(r15_558, r15_626)
	r15d_585 = PHI(r15d_559, r15d_627)
	rbp_586 = PHI(rbp_573, rbp_628)
	SCZO_587 = cond(r15_584 - r14_563)
	CZ_588 = SCZO_587 (alias)
	rax_589 = fp - 0x0000000000000060
	branch r15_584 <=u r14_563 l000000000040C38F
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C38B_1:
	r15_620 = r14_563
	r15d_621 = (word32) r15_620 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:fp - 0x0000000000000060 rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C38F:
	r15_590 = PHI(r15_584, r15_620)
	r15d_591 = PHI(r15d_585, r15d_621)
	r14_592 = r14_563 - r15_590
	r14d_593 = (word32) r14_592 (alias)
	r9_594 = r9_560 - r15_590
	rdx_595 = r15_590
	rsi_596 = fp - 0x0000000000000060 + r14_592
	rdi_597 = r9_594
	rax_598 = memcpy(rdi_597, rsi_596, rdx_595)
	eax_599 = (word32) rax_598 (alias)
	rdx_rax_600 = SEQ(rdx_595, rax_598) (alias)
	edx_eax_601 = rax_598 (alias)
	ah_602 = SLICE(rax_598, byte, 8) (alias)
	ax_603 = (word16) rax_598 (alias)
	al_604 = (byte) rax_598 (alias)
	SZO_605 = cond(r14_592 & r14_592)
	Z_606 = SZO_605 (alias)
	C_607 = false
	r9_608 = rax_598
	r9d_609 = (word32) r9_608 (alias)
	branch (r14_592 & r14_592) != 0x0000000000000000 l000000000040C358
// DataOut: ebx fs r11 r11d r12 r13 r14 r14d r15 r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:fp - 0x0000000000000060 rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C358:
	r9_612 = r9_608 - r13_557
	SCZO_613 = cond(r9_612)
	rdx_614 = r13_557
	rsi_615 = r12_555
	rdi_616 = r9_612
	rax_617 = memcpy(rdi_616, rsi_615, rdx_614)
	r9_618 = rax_617
	r9d_619 = (word32) r9_618 (alias)
// DataOut: ebx fs r11 r11d r12 r13 r14 r15 r8 r9 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C3AC:
	r12_610 = rax_598
	r12d_611 = (word32) r12_610 (alias)
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r9:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> r15d:<invalid> cl:<invalid> ah:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(0) Local -00B8(64)

l000000000040C242:
	qwLoc98_212 = PHI(qwLoc98_508, qwLoc98_164)
	r10b_213 = PHI(r10b_552, r10b_165)
	r10d_214 = PHI(r10d_551, r10d_166)
	dil_215 = PHI(dil_548, dil_167)
	sil_216 = PHI(sil_547, sil_168)
	P_217 = PHI(P_544, P_169)
	CZP_218 = PHI(CZP_540, CZP_170)
	esi_219 = PHI(esi_538, esi_171)
	edi_220 = PHI(edi_535, edi_172)
	r10_221 = PHI(r10_534, r10_173)
	S_222 = PHI(S_532, S_174)
	r11_223 = PHI(r11_528, r11_175)
	fs_224 = PHI(fs_523, fs_176)
	r8_225 = PHI(r8_522, r8_177)
	r13_226 = PHI(r13_557, r13_178)
	r15_227 = PHI(r15_590, r15_179)
	r15d_228 = PHI(r15d_591, r15d_180)
	r9_229 = PHI(r9_608, r9_181)
	r9d_230 = PHI(r9d_609, r9d_182)
	r12_231 = PHI(r12_610, r12_183)
	r12d_232 = PHI(r12d_611, r12d_184)
	r14d_233 = PHI(r14d_593, r14d_185)
	r14_234 = PHI(r14_592, r14_186)
	CZ_235 = PHI(CZ_588, CZ_187)
	ebx_236 = PHI(ebx_533, ebx_188)
	ecx_237 = PHI(ecx_524, ecx_189)
	rcx_238 = PHI(rcx_520, rcx_190)
	cl_239 = PHI(cl_536, cl_191)
	rax_240 = PHI(rax_598, rax_192)
	eax_241 = PHI(eax_599, eax_193)
	ah_242 = PHI(ah_602, ah_194)
	ax_243 = PHI(ax_603, ax_195)
	al_244 = PHI(al_604, al_196)
	rdx_245 = PHI(rdx_595, rdx_197)
	edx_246 = PHI(edx_576, edx_198)
	rdx_rax_247 = PHI(rdx_rax_600, rdx_rax_199)
	edx_eax_248 = PHI(edx_eax_601, edx_eax_200)
	dl_249 = PHI(dl_580, dl_201)
	SCZO_250 = PHI(SCZO_587, SCZO_202)
	rbx_251 = PHI(rbx_519, rbx_203)
	rbp_252 = PHI(rbp_586, rbp_204)
	rsi_253 = PHI(rsi_596, rsi_205)
	rdi_254 = PHI(rdi_597, rdi_206)
	rsp_255 = PHI(rsp_509, rsp_207)
	SZO_256 = cond(bLocB0 & 0x80)
	Z_257 = SZO_256 (alias)
	C_258 = false
	branch (bLocB0 & 0x80) == 0x00 l000000000040C2BA
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C249:
	SCZO_390 = cond(ebx_236 - 0xFFFFFFFF)
	Z_391 = SCZO_390 (alias)
	branch ebx_236 == 0xFFFFFFFF l000000000040C618
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00A8(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C618:
	rdx_457 = qwLocA8_36
	edx_458 = (word32) rdx_457 (alias)
	rdx_rax_459 = SEQ(rdx_457, rax_240) (alias)
	edx_eax_460 = rdx_457 (alias)
	dl_461 = (byte) rdx_457 (alias)
	SCZO_462 = cond(rdx_457 - 0x0000000000000001)
	CZ_463 = SCZO_462 (alias)
	branch rdx_457 <=u 0x0000000000000001 l000000000040C7A9
// DataOut: fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00AC(32) Local -00B0(32) Local -00B8(64)

l000000000040C7A9:
	ebx_492 = 0x00000000
	rbx_493 = DPB(rbx_251, ebx_492, 0) (alias)
	SZO_494 = cond(0x00000000)
	C_495 = false
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:r8 esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C627:
	r14d_464 = dwLocAC_53
	r14_465 = DPB(r14_234, r14d_464, 0) (alias)
	ebx_466 = 0x00000001
	rbx_467 = DPB(rbx_251, ebx_466, 0) (alias)
	eax_468 = 0x00000001
	rax_469 = DPB(rax_240, eax_468, 0) (alias)
	rdx_rax_470 = DPB(rdx_rax_459, eax_468, 0) (alias)
	edx_eax_471 = SEQ(edx_458, eax_468) (alias)
	ah_472 = SLICE(eax_468, byte, 8) (alias)
	ax_473 = (word16) eax_468 (alias)
	al_474 = (byte) eax_468 (alias)
// DataOut: ebx fs r11 r11d r12 r14 r14d r15 r8 r9 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:r8 esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C640:
	ebx_475 = PHI(ebx_466, ebx_488)
	Z_476 = PHI(Z_391, Z_491)
	rax_477 = PHI(rax_469, rax_479)
	rbx_478 = PHI(rbx_467, rbx_489)
	rax_479 = rax_477 *s r14_465
	eax_480 = (word32) rax_479 (alias)
	rdx_rax_481 = SEQ(rdx_457, rax_479) (alias)
	edx_eax_482 = rax_479 (alias)
	ah_483 = SLICE(rax_479, byte, 8) (alias)
	ax_484 = (word16) rax_479 (alias)
	al_485 = (byte) rax_479 (alias)
	SCZO_486 = cond(rdx_457 - rax_479)
	CZ_487 = SCZO_486 (alias)
	branch rdx_457 <=u rax_479 l000000000040C252
// DataOut: ebx fs r11 r11d r12 r14 r14d r15 r8 r9 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:r8 esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C64D:
	ebx_488 = ebx_475 + 0x00000001
	rbx_489 = DPB(rbx_478, ebx_488, 0) (alias)
	SCZO_490 = cond(ebx_488 - 0x00000008)
	Z_491 = SCZO_490 (alias)
	branch ebx_488 != 0x00000008 l000000000040C640
// DataOut: ebx fs r11 r11d r12 r14 r14d r15 r8 r9 rax rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:r8 esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C655:
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:r8 esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(32) Local -00B8(64)

l000000000040C252:
	r14d_392 = PHI(r14d_233, r14d_464, r14d_464, r14d_233)
	r14_393 = PHI(r14_234, r14_465, r14_465, r14_234)
	CZ_394 = PHI(CZ_235, CZ_487, CZ_487, CZ_463)
	ebx_395 = PHI(ebx_236, ebx_475, ebx_488, ebx_492)
	rax_396 = PHI(rax_240, rax_479, rax_479, rax_240)
	rdx_397 = PHI(rdx_245, rdx_457, rdx_457, rdx_457)
	edx_398 = PHI(edx_246, edx_458, edx_458, edx_458)
	rdx_rax_399 = PHI(rdx_rax_247, rdx_rax_481, rdx_rax_481, rdx_rax_459)
	dl_400 = PHI(dl_249, dl_461, dl_461, dl_461)
	SCZO_401 = PHI(SCZO_390, SCZO_486, SCZO_490, SCZO_462)
	rbx_402 = PHI(rbx_251, rbx_478, rbx_489, rbx_493)
	eax_403 = dwLocB0_34
	ecx_404 = ebx_395
	eax_405 = eax_403 & 0x00000100
	rax_406 = DPB(rax_396, eax_405, 0) (alias)
	rdx_rax_407 = DPB(rdx_rax_399, eax_405, 0) (alias)
	edx_eax_408 = SEQ(edx_398, eax_405) (alias)
	ah_409 = SLICE(eax_405, byte, 8) (alias)
	ax_410 = (word16) eax_405 (alias)
	al_411 = (byte) eax_405 (alias)
	ecx_412 = ecx_404 | eax_405
	SZO_413 = cond(ecx_412)
	Z_414 = SZO_413 (alias)
	C_415 = false
	branch ecx_412 == 0x00000000 l000000000040C2BA
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B0(0) Local -00B8(64)

l000000000040C261:
	SZO_416 = cond(bLocB0 & 0x40)
	Z_417 = SZO_416 (alias)
	C_418 = false
	branch (bLocB0 & 0x40) != 0x00 l000000000040C3E8
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000100 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00A0(64) Local -00B8(64)

l000000000040C3E8:
	rcx_453 = qwLocA0_32
	rsi_454 = rcx_453 + 0x0000000000000289
	Mem455[rcx_453 + 0x0000000000000288:byte] = 0x20
	qwLocB8_456 = rsi_454
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000100 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):rsi -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C26C:
	rcx_419 = PHI(rcx_238, rcx_453)
	qwLocB8_420 = PHI(qwLocB8_151, qwLocB8_456)
	rsi_421 = PHI(rsi_253, rsi_454)
	SZO_422 = cond(ebx_395 & ebx_395)
	Z_423 = SZO_422 (alias)
	C_424 = false
	branch (ebx_395 & ebx_395) == 0x00000000 l000000000040C7EB
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000100 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C274:
	rcx_425 = qwLocB8_420
	rdx_426 = rcx_425 + 0x0000000000000001
	edx_427 = (word32) rdx_426 (alias)
	rdx_rax_428 = SEQ(rdx_426, rax_406) (alias)
	edx_eax_429 = rdx_426 (alias)
	dl_430 = (byte) rdx_426 (alias)
	ecx_431 = dwLoc78_44
	SZO_432 = cond(ecx_431 & ecx_431)
	Z_433 = SZO_432 (alias)
	C_434 = false
	branch (ecx_431 & ecx_431) == 0x00000000 l000000000040C3D0
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000100 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C3D0:
	SCZO_448 = cond(ebx_395 - 0x00000001)
	Z_449 = SCZO_448 (alias)
	ecx_450 = 0x0000006B
	rcx_451 = DPB(rcx_425, ecx_450, 0) (alias)
	cl_452 = (byte) ecx_450 (alias)
	branch ebx_395 != 0x00000001 l000000000040C289
// DataOut: cl eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000100 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:edx & 0x00000020 r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C3DE:
// DataOut: cl eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000100 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:0x0000006B r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:0x6B ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C289:
	Z_442 = PHI(Z_433, Z_449)
	SCZO_443 = PHI(SCZO_401, SCZO_448)
	rcx_444 = (int64) ebx_395
	ecx_445 = (word32) Mem0[rcx_444 + 0x0000000000415F78:byte]
	rcx_446 = DPB(rcx_444, ecx_445, 0) (alias)
	cl_447 = (byte) ecx_445 (alias)
// DataOut: cl eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000100 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C293:
	ecx_435 = PHI(ecx_445, ecx_450)
	rcx_436 = PHI(rcx_446, rcx_451)
	cl_437 = PHI(cl_447, cl_452)
	Z_438 = PHI(Z_442, Z_449)
	SCZO_439 = PHI(SCZO_443, SCZO_448)
	rdi_440 = qwLocB8_420
	Mem441[rdi_440:byte] = cl_437
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000100 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C29A:
	r14d_336 = PHI(r14d_392, r14d_259)
	r14_337 = PHI(r14_393, r14_260)
	CZ_338 = PHI(CZ_394, CZ_261)
	ebx_339 = PHI(ebx_395, ebx_262)
	ecx_340 = PHI(ecx_435, ecx_263)
	rcx_341 = PHI(rcx_436, rcx_264)
	cl_342 = PHI(cl_437, cl_265)
	qwLocB8_343 = PHI(qwLocB8_420, qwLocB8_266)
	rax_344 = PHI(rax_406, rax_270)
	eax_345 = PHI(eax_405, eax_271)
	ah_346 = PHI(ah_409, ah_272)
	ax_347 = PHI(ax_410, ax_273)
	al_348 = PHI(al_411, al_274)
	rdx_349 = PHI(rdx_426, rdx_279)
	edx_350 = PHI(edx_427, edx_280)
	rdx_rax_351 = PHI(rdx_rax_428, rdx_rax_281)
	edx_eax_352 = PHI(edx_eax_429, edx_eax_282)
	dl_353 = PHI(dl_430, dl_283)
	SCZO_354 = PHI(SCZO_439, SCZO_275)
	rbx_355 = PHI(rbx_402, rbx_276)
	rsi_356 = PHI(rsi_421, rsi_277)
	rdi_357 = PHI(rdi_440, rdi_278)
	SZO_358 = cond(eax_345 & eax_345)
	Z_359 = SZO_358 (alias)
	C_360 = false
	branch (eax_345 & eax_345) == 0x00000000 l000000000040C7F5
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C7F5:
	qwLocB8_389 = rdx_349
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C2A2:
	eax_361 = dwLoc78_44
	rdx_rax_362 = DPB(rdx_rax_351, eax_361, 0) (alias)
	edx_eax_363 = SEQ(edx_350, eax_361) (alias)
	SZO_364 = cond(eax_361 & eax_361)
	Z_365 = SZO_364 (alias)
	C_366 = false
	branch (eax_361 & eax_361) != 0x00000000 l000000000040C3B8
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C3B8:
	SZO_379 = cond(ebx_339 & ebx_339)
	Z_380 = SZO_379 (alias)
	C_381 = false
	branch (ebx_339 & ebx_339) == 0x00000000 l000000000040C2AE
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000020 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C3C0:
	Mem382[rdx_349:byte] = 0x69
	rdx_383 = rdx_349 + 0x0000000000000001
	edx_384 = (word32) rdx_383 (alias)
	rdx_rax_385 = SEQ(rdx_383, rax_344) (alias)
	edx_eax_386 = rdx_383 (alias)
	dl_387 = (byte) rdx_383 (alias)
	SCZO_388 = cond(rdx_383)
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000020 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C2AE:
	SZO_367 = PHI(SZO_364, SZO_379, SZO_379)
	Z_368 = PHI(Z_365, Z_380, Z_380)
	C_369 = PHI(C_366, C_381, C_381)
	rdx_370 = PHI(rdx_349, rdx_349, rdx_383)
	edx_371 = PHI(edx_350, edx_350, edx_384)
	rdx_rax_372 = PHI(rdx_rax_362, rdx_rax_362, rdx_rax_385)
	edx_eax_373 = PHI(edx_eax_363, edx_eax_363, edx_eax_386)
	dl_374 = PHI(dl_353, dl_353, dl_387)
	SCZO_375 = PHI(SCZO_354, SCZO_354, SCZO_388)
	rax_376 = rdx_370 + 0x0000000000000001
	Mem377[rdx_370:byte] = 0x42
	qwLocB8_378 = rax_376
// DataOut: ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:edx & 0x00000020 r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C2BA:
	r14d_284 = PHI(r14d_233, r14d_392, r14d_336, r14d_336)
	r14_285 = PHI(r14_234, r14_393, r14_337, r14_337)
	CZ_286 = PHI(CZ_235, CZ_394, CZ_338, CZ_338)
	ebx_287 = PHI(ebx_236, ebx_395, ebx_339, ebx_339)
	ecx_288 = PHI(ecx_237, ecx_412, ecx_340, ecx_340)
	rcx_289 = PHI(rcx_238, rcx_238, rcx_341, rcx_341)
	cl_290 = PHI(cl_239, cl_239, cl_342, cl_342)
	qwLocB8_291 = PHI(qwLocB8_151, qwLocB8_151, qwLocB8_378, qwLocB8_389)
	rdx_292 = PHI(rdx_245, rdx_397, rdx_370, rdx_349)
	edx_293 = PHI(edx_246, edx_398, edx_371, edx_350)
	dl_294 = PHI(dl_249, dl_400, dl_374, dl_353)
	SCZO_295 = PHI(SCZO_250, SCZO_401, SCZO_375, SCZO_354)
	rbx_296 = PHI(rbx_251, rbx_402, rbx_355, rbx_355)
	rsi_297 = PHI(rsi_253, rsi_253, rsi_356, rsi_356)
	rax_298 = qwLocB8_291
	rdi_299 = qwLoc28_40
	rdi_300 = rdi_299 ^ Mem0[fs_224:0x00000028:word64]
	SZO_301 = cond(rdi_300)
	Z_302 = SZO_301 (alias)
	C_303 = false
	Mem304[rax_298:byte] = 0x00
	rax_305 = r12_231
	eax_306 = (word32) rax_305 (alias)
	rdx_rax_307 = SEQ(rdx_292, rax_305) (alias)
	edx_eax_308 = rax_305 (alias)
	ah_309 = SLICE(rax_305, byte, 8) (alias)
	ax_310 = (word16) rax_305 (alias)
	al_311 = (byte) rax_305 (alias)
	branch rdi_300 != 0x0000000000000000 l000000000040C7E6
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9 rax
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C7E6:
	__stack_chk_fail()
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32) Local -00B8(64)

l000000000040C7EB:
	r14d_259 = PHI(r14d_392, r14d_284)
	r14_260 = PHI(r14_393, r14_285)
	CZ_261 = PHI(CZ_394, CZ_286)
	ebx_262 = PHI(ebx_395, ebx_287)
	ecx_263 = PHI(ecx_412, ecx_288)
	rcx_264 = PHI(rcx_419, rcx_289)
	cl_265 = PHI(cl_239, cl_290)
	qwLocB8_266 = PHI(qwLocB8_420, qwLocB8_291)
	SZO_267 = PHI(SZO_422, SZO_301)
	Z_268 = PHI(Z_423, Z_302)
	C_269 = PHI(C_424, C_303)
	rax_270 = PHI(rax_406, rax_305)
	eax_271 = PHI(eax_405, eax_306)
	ah_272 = PHI(ah_409, ah_309)
	ax_273 = PHI(ax_410, ax_310)
	al_274 = PHI(al_411, al_311)
	SCZO_275 = PHI(SCZO_401, SCZO_295)
	rbx_276 = PHI(rbx_402, rbx_296)
	rsi_277 = PHI(rsi_421, rsi_297)
	rdi_278 = PHI(rdi_254, rdi_300)
	rdx_279 = qwLocB8_266
	edx_280 = (word32) rdx_279 (alias)
	rdx_rax_281 = SEQ(rdx_279, rax_270) (alias)
	edx_eax_282 = rdx_279 (alias)
	dl_283 = (byte) rdx_279 (alias)
// DataOut: eax ebx fs r11 r11d r12 r14d r15 r8 r9 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64) Local -0078(32)

l000000000040C2DC:
	rsp_312 = fp - 0x0000000000000018
	SCZO_313 = cond(fp - 0x0000000000000018)
	rbx_315 = qwLoc18
	rsp_316 = fp - 0x0000000000000010
	rbp_318 = qwLoc10
	rsp_319 = fp - 0x0000000000000008
	rsp_321 = qwLoc08
	rsp_322 = rsp_321 + 0x0000000000000008
	rbp_323 = Mem304[rsp_322:word64]
	rsp_324 = rsp_322 + 0x0000000000000008
	rsi_325 = Mem304[rsp_324:word64]
	rsp_326 = rsp_324 + 0x0000000000000008
	rdi_327 = Mem304[rsp_326:word64]
	rsp_328 = rsp_326 + 0x0000000000000008
	return rax_305
// DataOut: fs r11 r11d r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000D0 eax:<invalid> r14:<invalid> r12:<invalid> rbx:<invalid> rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040BD70_exit:
	use rsp_328 (=> rspOut)
	use rbp_323 (=> rbpOut)
	use r8_225 (=> r8Out)
	use r9_229 (=> r9Out)
	use r11_223 (=> r11Out)
	use r14d_284 (=> r14dOut)
	use r15_227 (=> r15Out)
// DataOut: r11 r11d r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 eax:<invalid> r14:<invalid> r12:<invalid> rbx:rbx rcx:<invalid> ecx:<invalid> r15:<invalid> r13:<invalid> rdi:<invalid> rax:<invalid> rbp:<invalid> r11:<invalid> edx:<invalid> r8:<invalid> rdx:<invalid> esi:<invalid> r14d:<invalid> ebx:<invalid> rsi:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> al:<invalid> r9:<invalid> Sequence rdx:rax:<invalid> r10d:<invalid> cl:<invalid> ah:<invalid> r15d:<invalid> r12d:<invalid> dl:<invalid> sil:<invalid> -208(fp):(real80) rLoc1 -184(fp):<invalid> -176(fp):edx -172(fp):<invalid> -168(fp):r8 -160(fp):rsi -152(fp):<invalid> -144(fp):<invalid> -128(fp):<invalid> -120(fp):edx & 0x00000020 -116(fp):edx & 0x00000010 -108(fp):ax -106(fp):<invalid> -104(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040C810(word64 rax, word64 rdx, word64 rdi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8 rax rdi rdx
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040C810_entry:
// DataOut: r8 rax rdi rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C810:
	word64 rbp_105
	word32 ebp_136
	word64 rdi_100
	word64 rdx_150
	word64 r12_11 = rdx
	word64 rbx_119 = rdi
	branch rdi == 0x0000000000000000 l000000000040C910
// DataOut: r12 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040C910:
	rax = getenv(DPB(rdi, 0x004138E4, 0))
	rbx_119 = rax
	branch rax != 0x0000000000000000 l000000000040C82C
// DataOut: r12 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:rdi -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C926:
	rax = getenv(DPB(rdi, 0x00415F24, 0))
	rbx_119 = rax
	branch rax != 0x0000000000000000 l000000000040C82C
// DataOut: r12 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> edi:0x004138E4 rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C93C:
	rdi_100 = DPB(rdi, 0x00415F2E, 0) (alias)
	word64 rdx_269 = 0x0000000000000000 - (getenv(rdi_100) <u 0x0000000000000001)
	word64 rdx_275 = DPB(rdx_269, (word32) rdx_269 & 0x00000200, 0)
	Mem279[rdx:word64] = rdx_275 + 512
	ebp_136 = 0x00000000
	rbp_105 = DPB(rbp, 0x00000000, 0) (alias)
	rdx_150 = rdx_275 + 512
// DataOut: ebp r12 r8 rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> edi:0x00415F24 rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C82C:
	branch Mem0[rbx_119:byte] == 0x27 l000000000040C8A0
// DataOut: r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> edi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8A0:
	rbx_119 = rbx_119 + 0x0000000000000001
// DataOut: r8 rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> ebp:0x00000000 edi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C833:
	word64 rsp_135
	word64 r14_138
	word64 rax_139 = fn0000000000409E50(rax, DPB(rcx, 0x00000004, 0), DPB(rdx, 0x00415F50, 0), DPB(rsi, 0x00415F60, 0), rbx_119, out rsp_135, out ebp_136, out r12_11, out r14_138)
	rdi_100 = rbx_119
	byte al_142 = (byte) rax_139
	branch (word32) rax_139 < 0x00000000 l000000000040C8B0
// DataOut: al ebp r12 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r13:rsi r12:rdx rbx:<invalid> ebp:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8B0:
	rdi_100 = rbx_119
	word64 rsp_165
	word64 r8_167
	branch fn0000000000411360(0x00000000, rsp_135 + 0x0000000000000008, rbx_119, r8, out rsp_165, out rbp_105, out r8_167, out r12_11) != 0x00000000 l000000000040C968
// DataOut: ebp r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:0x00415F50 esi:0x00415F60 rdi:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> rsi:<invalid> ebx:<invalid> rdx:<invalid> eax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C968:
	Mem238[rbp_105:word32] = 0x00000000
	rdx_150 = Mem238[r12_11:word64]
// DataOut: r12 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> rdx:<invalid> r14d:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8D0:
	branch (byte) ((word32) Mem0[rbx_119:byte] - 0x00000030) <=u 0x09 l000000000040C907
// DataOut: ebp r12 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> rdx:<invalid> r14d:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8DA:
	word64 rdx_193 = Mem0[rsp_165 + 0x0000000000000008:word64]
	branch rbx_119 != rdx_193 l000000000040C8F9
// DataOut: ebp r12 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> rdx:<invalid> r14d:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8F9:
	word64 rbx_224 = rbx_119 + 0x0000000000000001
	branch (byte) ((word32) Mem0[rbx_224:byte] - 0x00000030) >u 0x09 l000000000040C8F0
	rbx_119 = rbx_224 + 0x0000000000000001
	branch (byte) ((word32) Mem0[rbx_224 + 0x0000000000000001:byte] - 0x00000030) >u 0x09 l000000000040C8F0
// DataOut: ebp r12 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r14d:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8F0:
	branch rbx_224 + 0x0000000000000001 == rdx_193 l000000000040C980
// DataOut: ebp r12 r8 rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r14d:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C8E4:
// DataOut: ebp r12 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r14d:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C980:
	branch Mem0[rdx_193 - 0x0000000000000001:byte] == 0x42 l000000000040C998
// DataOut: ebp r12 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r14d:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C998:
	ebp_136 = ebp_136 | 0x00000180
	rbp_105 = DPB(rbp_105, ebp_136 | 0x00000180, 0) (alias)
	branch Mem0[rdx_193 - 0x0000000000000002:byte] != 0x69 l000000000040C907
// DataOut: ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r14d:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C9A8:
// DataOut: ebp r12 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> bpl:<invalid> edi:<invalid> rax:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r14d:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C986:
	rbp_105 = DPB(rbp_105, 0x84, 0) (alias)
	ebp_136 = DPB(ebp_136, 0x84, 0) (alias)
// DataOut: ebp r12 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r14d:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C98A:
	ebp_136 = ebp_136 | 0x00000020
	rbp_105 = DPB(rbp_105, ebp_136, 0) (alias)
// DataOut: ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> rdx:<invalid> bpl:<invalid> edi:<invalid> rax:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r14d:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C907:
	rdx_150 = Mem0[r12_11:word64]
// DataOut: ebp r12 r8 rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> bpl:<invalid> edi:<invalid> rax:<invalid> rdx:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r14d:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C84E:
	Mem148[r12_11:word64] = 0x0000000000000001
	ebp_136 = ebp_136 | Mem148[DPB(rax_139, (int16) al_142, 0) * 0x00000004 + 0x00415F50:word32]
	rdx_150 = DPB(rdx, 0x00000001, 0) (alias)
	rbp_105 = DPB(rbp, ebp_136, 0) (alias)
// DataOut: ebp r12 r8 rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:0x00415F50 esi:0x00415F60 rdi:<invalid> bpl:0x04 edi:<invalid> rax:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> rsi:<invalid> ebx:<invalid> rdx:<invalid> eax:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C864:
	Mem107[rbp_105:word32] = ebp_136
// DataOut: r12 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> ax:(int16) al edi:<invalid> rax:<invalid> rdx:<invalid> bpl:<invalid> rsi:<invalid> eax:<invalid> rcx:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r14d:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C86A:
	branch rdx_150 != 0x0000000000000000 l000000000040C894
// DataOut: r12 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> ax:<invalid> edi:<invalid> rax:<invalid> rdx:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> bpl:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r14d:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C86F:
	word64 rax_76 = 0x0000000000000000 - (getenv(DPB(rdi_100, 0x00415F2E, 0)) <u 0x0000000000000001)
	Mem82[r12_11:word64] = DPB(rax_76, (word32) rax_76 & 0x00000200, 0)
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> ax:<invalid> edi:<invalid> rax:<invalid> rdx:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> bpl:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r14d:<invalid> r9d:<invalid> r8:<invalid> cl:<invalid> r8d:0x00000000 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040C894:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> ax:<invalid> edi:<invalid> rax:<invalid> rdx:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid> bpl:<invalid> r15:<invalid> rbp:<invalid> r14:<invalid> ebx:<invalid> r14d:<invalid> r9d:<invalid> cl:<invalid> r8d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn000000000040C810_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> ebp:<invalid> ecx:<invalid> edx:<invalid> esi:<invalid> rdi:<invalid> ax:<invalid> edi:<invalid> rax:<invalid> rdx:<invalid> eax:<invalid> rsi:<invalid> rcx:<invalid> r8:<invalid> rbp:<invalid> bpl:<invalid> r15:<invalid> r14:<invalid> ebx:<invalid> r14d:<invalid> r9d:<invalid> cl:<invalid> r8d:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn000000000040C9B0(word64 rsi, word32 edi, word64 r8, word64 r12, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r12 r8 rsi
// LiveOut: ebp esp r12 r12b rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040C9B0_entry:
	*r12Out = r12
// DataOut: edi fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040C9B0:
	word64 rsp_11 = fp - 0x000000000000000C
	word64 rbx_103 = Mem0[0x000000000061B1F8:word64]
	branch rbx_103 != 0x0000000000000000 l000000000040C9D1
// DataOut: ebp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040C9D1:
	branch Mem0[rbx_103:word32] != edi l000000000040C9C8
	branch Mem0[rbx_103:word32] != edi l000000000040C9C8
// DataOut: ebp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C ebp:edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9C8:
	rbx_103 = Mem0[rbx_103 + 0x0000000000000008:word64]
	branch rbx_103 == 0x0000000000000000 l000000000040C9F0
// DataOut: ebp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C ebp:edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9C2:
// DataOut: ebp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C ebp:edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9F0:
	word64 rax_66 = getpwuid(DPB(rdi, edi, 0))
	word64 rdi_72 = DPB(rdi, 0x00000011, 0)
	branch rax_66 == 0x0000000000000000 l000000000040CA16
// DataOut: ebp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C ebp:edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CA07:
	r12 = Mem0[r8:word64]
	*r12Out = r12
	rdi_72 = DPB(rax_66, strlen(r12), 0) + 0x0000000000000011
// DataOut: ebp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:edi rbx:<invalid> edi:0x00000011 esp:0x00416919 rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CA16:
	word64 rax_79 = fn0000000000410C40(rsi, rdi_72, out rsp_11)
	Mem81[rax_79:word32] = edi
	strcpy(rax_79 + 0x0000000000000010, r12)
	rax = Mem81[0x000000000061B1F8:word64]
	Mem86[0x000000000061B1F8:word64] = rax_79
	Mem87[rax_79 + 0x0000000000000008:word64] = rax
	rbx_103 = rax_79
// DataOut: fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:edi rbx:<invalid> edi:<invalid> esp:0x00416919 rax:<invalid> r12:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9D5:
	word64 rbx_32 = Mem0[rsp_11:word64]
	word64 rsp_36 = Mem0[rsp_11 + 0x0000000000000010:word64]
	branch Mem0[rbx_103 + 0x0000000000000010:byte] == 0x00 l000000000040C9E7
	word64 rax_39 = DPB(rax, 0x00000000, 0)
	word64 rbp_45
	*rbpOut = Mem0[rsp_36 + 0x0000000000000010:word64]
	word64 rsp_49
	*rspOut = Mem0[rsp_36 + 0x0000000000000018:word64] + 0x0000000000000008
	branch Mem0[rbx_32 + 0x0000000000000010:byte] == 0x00 l000000000040C9E7
// DataOut: ebp esp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:edi rbx:<invalid> edi:<invalid> esp:0x00416919 rax:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9E3_1:
	rax_39 = rbx_32 + 0x0000000000000010
// DataOut: ebp esp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> eax:0x00000000 rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> rax:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9E3_1:
	rax_39 = rbx_32 + 0x0000000000000010
// DataOut: ebp esp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> eax:0x00000000 rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> rax:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040C9E7:
	return rax_39
	return rax_39
// DataOut: ebp esp fs r11 r11d r12 r12b r14 r14d r15 r15d r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rax:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040C9B0_exit:
// DataOut: ebp esp r12 r12b rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rax:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040CB40(word64 rax, word64 rsi, word32 edi, word64 r8, word64 r12, ptr64 & rbxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r12 r8 rax rsi
// LiveOut: ebp ebx r12 rax rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040CB40_entry:
	*r12Out = r12
// DataOut: edi fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CB40:
	word64 rbx_102
	word64 rsp_11 = fp - 0x000000000000000C
	word64 rbx_16 = Mem0[0x000000000061B1E8:word64]
	rbx_102 = rbx_16
	branch rbx_16 != 0x0000000000000000 l000000000040CB61
// DataOut: ebp fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CB61:
	branch Mem0[rbx_102:word32] != edi l000000000040CB58
	branch Mem0[rbx_102:word32] != edi l000000000040CB58
// DataOut: ebp fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C ebp:edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB58:
	rbx_102 = Mem0[rbx_102 + 0x0000000000000008:word64]
	branch rbx_102 == 0x0000000000000000 l000000000040CB80
// DataOut: ebp fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C ebp:edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB52:
// DataOut: ebp fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C ebp:edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB80:
	word64 rsp_72
	word64 rbp_73
	word32 ebp_74
	word32 edi_75
	word64 rbx_76
	byte SZO_77
	byte C_78
	byte Z_79
	byte SCZO_80
	word32 eax_81
	word64 rdx_82
	word64 rax_83
	word32 esp_84
	word64 r8_86
	word64 rdi_87
	word64 rsi_88
	word64 r12_107
	call getgrgid (retsize: 8; depth: 8)
		uses: C_19,dwLoc04_4,dwLoc08_7,dwLoc0C_14,eax,ebp_9,edi_62,esp_63,r12,r8,rax,rbp_10,rbx_16,rdi,rdx,rsi,rsp_11,SCZO,SZO_17,Z_18
		defs: C_78,eax_81,ebp_74,edi_75,esp_84,r12_85,r8_86,rax_83,rbp_73,rbx_76,rdi_87,rdx_82,rsi_88,rsp_72,SCZO_80,SZO_77,Z_79
	word64 rdi_110 = DPB(rdi_87, 0x00000011, 0)
	branch rax_83 == 0x0000000000000000 l000000000040CBA6
// DataOut: ebp fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C ebp:edi rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB97:
	r12_107 = Mem0[r8_86:word64]
	*r12Out = r12_107
	rdi_110 = DPB(rax_83, strlen(r12_107), 0) + 0x0000000000000011
// DataOut: ebp fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:edi rbx:<invalid> edi:0x00000011 esp:0x00416919 -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CBA6:
	word64 rax_98 = fn0000000000410C40(rsi_88, rdi_110, out rsp_11)
	Mem100[rax_98:word32] = ebp_74
	strcpy(rax_98 + 0x0000000000000010, r12_107)
	rax = Mem100[0x000000000061B1E8:word64]
	Mem105[0x000000000061B1E8:word64] = rax_98
	Mem106[rax_98 + 0x0000000000000008:word64] = rax
	rbx_102 = rax_98
// DataOut: fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:edi rbx:<invalid> edi:<invalid> esp:0x00416919 r12:<invalid> rdi:<invalid> rax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB65:
	word64 rbx_33 = Mem0[rsp_11:word64]
	word64 rsp_37 = Mem0[rsp_11 + 0x0000000000000010:word64]
	branch Mem0[rbx_102 + 0x0000000000000010:byte] == 0x00 l000000000040CB77
	word64 rax_40 = DPB(rax, 0x00000000, 0)
	word64 rbx_44
	*rbxOut = Mem0[rsp_37 + 0x0000000000000008:word64]
	word64 rbp_46
	*rbpOut = Mem0[rsp_37 + 0x0000000000000010:word64]
	word64 rsp_50
	*rspOut = Mem0[rsp_37 + 0x0000000000000018:word64] + 0x0000000000000008
	branch Mem0[rbx_33 + 0x0000000000000010:byte] == 0x00 l000000000040CB77
// DataOut: ebp ebx fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:edi rbx:<invalid> edi:<invalid> esp:0x00416919 r12:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> edx:<invalid> rdx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB73_1:
	rax_40 = rbx_33 + 0x0000000000000010
// DataOut: ebp ebx fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> eax:0x00000000 rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB73_1:
	rax_40 = rbx_33 + 0x0000000000000010
// DataOut: ebp ebx fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> eax:0x00000000 rbp:<invalid> rdx:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rdi:<invalid> rax:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040CB77:
	return rax_40
	return rax_40
// DataOut: ebp ebx fs r11 r11d r12 r13d r14 r14d r15 r15d r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rax:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040CB40_exit:
// DataOut: ebp ebx r12 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> eax:<invalid> rbp:<invalid> rdx:<invalid> rax:<invalid> edi:<invalid> esp:<invalid> r12:<invalid> rdi:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040CCD0(word64 rsi, word64 rdi, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: r14 r14d rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi r14 r14b r14d r14w r8 r8b r8d r8w rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040CCD0_entry:
// DataOut: dil fs r11 r11d r12 r13 r15 r15b rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CCD0:
	Mem8[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_26 = rsi + 0x0000000000000014
	word64 r14_9
	*r14Out = 0x0000000066666667
	branch rdi < 0x0000000000000000 l000000000040CD28
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD28:
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b r8 rbx rcx rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 r14:0x0000000066666667

l000000000040CD30:
	word64 rdx_69 = (rsi *s rdi >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_26 = rcx_26 - 0x0000000000000001
	Mem80[rcx_26:byte] = (byte) (rsi + (rdx_69 * 0x0000000000000005) * 0x00000002 - edi)
	rdi = rdx_69
	edi = (word32) rdx_69 (alias)
	branch rdx_69 != 0x0000000000000000 l000000000040CD30
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b r8 rbx rcx rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 r8:rsi esi:0x00000030 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CD5B:
	Mem84[rcx_26 - 0x0000000000000001:byte] = 0x2D
	return rcx_26 - 0x0000000000000001
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 r8:rsi esi:0x00000030 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> eax:<invalid> rdi:<invalid>

l000000000040CCE7:
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:rsi + 0x0000000000000014 r14:0x0000000066666667

l000000000040CCF0:
	word64 rdx_35 = (rsi *s rdi >> 0x0000000000000002) - (rdi >> 0x000000000000003F)
	rcx_26 = rcx_26 - 0x0000000000000001
	Mem45[rcx_26:byte] = (byte) ((word32) (rdi - (rdx_35 * 0x0000000000000005) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_35
	branch rdx_35 != 0x0000000000000000 l000000000040CCF0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r15 r15b rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> edi:<invalid>

l000000000040CD20:
	return rcx_26
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> edi:<invalid>

fn000000000040CCD0_exit:
// DataOut: r14 r14d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x0000000066666667 rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> edi:<invalid> r8:rsi esi:0x00000030 eax:<invalid>



word64 fn000000000040CD70(word64 rsi, word64 rdi, ptr64 & r14Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  dil rdi rsi
// LiveOut: eax r14 r14d rax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx r14 r14b r14d r14w rax rcx rdi rdx
// Preserved: rsp
fn000000000040CD70_entry:
// DataOut: dil fs r11 r11d r12 r13 r13d r15 r15b rbp rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD70:
	Mem4[rsi + 0x0000000000000014:byte] = 0x00
	word64 rcx_10 = rsi + 0x0000000000000014
	word64 r14_5
	*r14Out = 0x00000000CCCCCCCD
// DataOut: dil fs r11 r11d r12 r13 r13d r14 r14d r15 r15b rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040CD88:
	word64 rdx_rax_11 = rsi *u rdi
	rcx_10 = rcx_10 - 0x0000000000000001
	Mem23[rcx_10:byte] = (byte) ((word32) (rdi - ((rdx_rax_11 >>u 0x0000000000000003) + (rdx_rax_11 >>u 0x0000000000000003) * 0x0000000000000004) * 0x0000000000000002) + 0x00000030)
	rdi = rdx_rax_11 >>u 0x0000000000000003
	branch rdx_rax_11 >>u 0x0000000000000003 != 0x0000000000000000 l000000000040CD88
// DataOut: dil fs r11 r11d r12 r13 r13d r14 r14d r15 r15b rbp rbx rcx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> edi:<invalid>

l000000000040CDAE:
	return rcx_10
// DataOut: eax fs r11 r11d r12 r13 r13d r14 r14d r15 r15b rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> edi:<invalid>

fn000000000040CD70_exit:
// DataOut: eax r14 r14d rax
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> r14:0x00000000CCCCCCCD rax:<invalid> Sequence rdx:rax:<invalid> rdx:<invalid> rdi:<invalid> edi:<invalid>



void fn000000000040CDC0(word64 rax, word64 rcx, word64 rdx, word64 rsi, word64 rdi, word32 r8d, word32 r9d)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r8d r9b r9d rax rcx rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040CDC0_entry:
// DataOut: r8d r9b r9d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040CDC0:
	word64 r15_1033
	word64 qwLoc40_104
	word64 rbp_1062
	word64 rax_1053
	word64 rcx_120
	word64 rax_123
	word64 rax_34 = DPB(rax, strlen(rdi), 0)
	word64 r13_1039 = rsi
	word64 r12_1047 = rcx
	word32 ebx_1038 = r9d
	byte bl_1035 = (byte) r9d
	word64 r14_1034 = rax_34
	word64 rbp_42 = rax_34
	branch (bl_1035 & 0x02) == 0x00 l000000000040CF60
// DataOut: bl ebx r12 r13 r14 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0)

l000000000040CF60:
	word64 rsp_641
	word64 rdi_642
	word64 rsi_643
	word64 rbx_648
	word32 r9d_650
	byte SCZO_651
	word64 rdx_652
	word32 r8d_653
	word64 rax_654
	byte SZO_656
	byte C_657
	byte Z_659
	word64 r15_660
	word32 ebp_661
	byte CZ_662
	word32 ecx_663
	word32 eax_664
	word32 r12d_665
	word32 edx_666
	word32 edi_667
	word32 r15d_668
	word16 ax_669
	byte al_670
	call __ctype_get_mb_cur_max (retsize: 8; depth: 88)
		uses: al_37,ax_36,bl_26,bLoc21,C_40,CZ,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_35,ebp_43,ebx_24,ecx,edi,edx,qwLoc08,qwLoc10,qwLoc18,qwLoc30,qwLoc38_30,qwLoc40,qwLoc48_28,r12_16,r12d_17,r13_11,r14_41,r15,r15d,r8d,r9d,rax_34,rbp_42,rbx_25,rcx,rdi,rdx,rsi,rsp_27,SCZO,SZO_38,Z_39
		defs: al_670,ax_669,bl_655,C_657,CZ_662,eax_664,ebp_661,ebx_649,ecx_663,edi_667,edx_666,r12_646,r12d_665,r13_645,r14_658,r15_660,r15d_668,r8d_653,r9d_650,rax_654,rbp_644,rbx_648,rcx_647,rdi_642,rdx_652,rsi_643,rsp_641,SCZO_651,SZO_656,Z_659
	branch rax_654 <=u 0x0000000000000001 l000000000040CDFA
// DataOut: bl ebx r12 r13 r14 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:DPB(rax, <invalid>, 0) r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0)

l000000000040CF6F:
	word64 rsp_678
	word64 rdi_679
	word64 rsi_680
	word64 rbp_681
	word64 rbx_685
	word32 r9d_687
	byte SCZO_688
	word64 rdx_689
	word32 r8d_690
	word64 rax_691
	byte SZO_693
	byte C_694
	byte Z_696
	word64 r15_697
	word32 ebp_698
	byte CZ_699
	word32 ecx_700
	word32 eax_701
	word32 r12d_702
	word32 edx_703
	word32 edi_704
	word32 r15d_705
	word16 ax_706
	byte al_707
	call mbstowcs (retsize: 8; depth: 88)
		uses: al_670,ax_669,bl_655,bLoc21,C_677,CZ_672,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_664,ebp_661,ebx_649,ecx_663,edi_675,edx_674,qwLoc08,qwLoc10,qwLoc18,qwLoc30,qwLoc38_30,qwLoc40,qwLoc48_28,r12_646,r12d_665,r13_645,r14_658,r15_660,r15d_668,r8d_653,r9d_650,rax_654,rbp_644,rbx_648,rcx_647,rdi_642,rdx_652,rsi_673,rsp_641,SCZO_671,SZO_676,Z_659
		defs: al_707,ax_706,bl_692,C_694,CZ_699,eax_701,ebp_698,ebx_686,ecx_700,edi_704,edx_703,r12_683,r12d_702,r13_682,r14_695,r15_697,r15d_705,r8d_690,r9d_687,rax_691,rbp_681,rbx_685,rcx_684,rdi_679,rdx_689,rsi_680,rsp_678,SCZO_688,SZO_693,Z_696
	branch rax_691 != 0xFFFFFFFFFFFFFFFF l000000000040CFA8
// DataOut: bl ebx r12 r13 r14 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0)

l000000000040CFA8:
	word64 r15_736 = (rax_691 + 0x0000000000000001) * 0x0000000000000004
	word64 rax_740 = malloc(r15_736)
	qwLoc40_104 = rax_740
	branch rax_740 == 0x0000000000000000 l000000000040D160
// DataOut: bl ebx r12 r13 r14 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D160:
	branch (bl_1035 & 0x01) == 0x00 l000000000040CF8C
// DataOut: bl ebx r12 r13 r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D169:
	r15_1033 = r14_1034
	rbp_1062 = DPB(rbp_681, 0x00000000, 0) (alias)
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CFCF:
	word64 rsp_751
	word64 rdi_752
	word64 rsi_753
	word64 rbx_758
	word32 r9d_760
	byte SCZO_761
	word64 rdx_762
	word32 r8d_763
	word64 rax_764
	byte SZO_766
	byte C_767
	byte Z_769
	word64 r15_770
	word32 ebp_771
	byte CZ_772
	word32 ecx_773
	word32 eax_774
	word32 r12d_775
	word32 edx_776
	word32 edi_777
	word32 r15d_778
	word16 ax_779
	byte al_780
	call mbstowcs (retsize: 8; depth: 88)
		uses: al_743,ax_742,bl_692,bLoc21,C_746,CZ_699,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_741,ebp_698,ebx_686,ecx_700,edi_704,edx_703,qwLoc08,qwLoc10,qwLoc18,qwLoc30_738,qwLoc38_30,qwLoc40_747,qwLoc48_28,r12_683,r12d_702,r13_682,r14_695,r15_736,r15d_737,r8d_690,r9d_687,rax_740,rbp_681,rbx_685,rcx_684,rdi_750,rdx_748,rsi_749,rsp_678,SCZO_708,SZO_744,Z_745
		defs: al_780,ax_779,bl_765,C_767,CZ_772,eax_774,ebp_771,ebx_759,ecx_773,edi_777,edx_776,r12_756,r12d_775,r13_755,r14_768,r15_770,r15d_778,r8d_763,r9d_760,rax_764,rbp_754,rbx_758,rcx_757,rdi_752,rdx_762,rsi_753,rsp_751,SCZO_761,SZO_766,Z_769
	branch rax_764 == 0x0000000000000000 l000000000040CE03
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040CFEC:
	word64 rbp_1049
	word64 qwLoc30_1060
	Mem788[rax_740 - 0x0000000000000004 + r15_770:word32] = 0x00000000
	word32 edi_789 = Mem788[rax_740:word32]
	branch edi_789 == 0x00000000 l000000000040D106
// DataOut: bl eax ebx r12 r13 r14 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D106:
	word64 rsp_1188
	word64 rdi_1189
	word64 rsi_1190
	word64 rbx_1195
	word32 r9d_1197
	byte SCZO_1198
	word64 rdx_1199
	word32 r8d_1200
	word64 rax_1201
	byte SZO_1203
	byte C_1204
	byte Z_1206
	word64 r15_1207
	word32 ebp_1208
	byte CZ_1209
	word32 ecx_1210
	word32 eax_1211
	word32 r12d_1212
	word32 edx_1213
	word32 edi_1214
	word32 r15d_1215
	word16 ax_1216
	byte al_1217
	call wcswidth (retsize: 8; depth: 88)
		uses: al_787,ax_786,bl_765,bLoc21,C_793,CZ_772,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_785,ebp_771,ebx_759,ecx_773,edi_789,edx_776,qwLoc08,qwLoc10,qwLoc18,qwLoc30_738,qwLoc38_30,qwLoc40_747,qwLoc48_28,r12_756,r12d_775,r13_755,r14_768,r15_770,r15d_778,r8d_763,r9d_760,rax_784,rbp_754,rbx_758,rcx_757,rdi_1187,rdx_762,rsi_1186,rsp_751,SCZO_761,SZO_791,Z_792
		defs: al_1217,ax_1216,bl_1202,C_1204,CZ_1209,eax_1211,ebp_1208,ebx_1196,ecx_1210,edi_1214,edx_1213,r12_1193,r12d_1212,r13_1192,r14_1205,r15_1207,r15d_1215,r8d_1200,r9d_1197,rax_1201,rbp_1191,rbx_1195,rcx_1194,rdi_1189,rdx_1199,rsi_1190,rsp_1188,SCZO_1198,SZO_1203,Z_1206
	r15_1033 = (int64) eax_1211
// DataOut: bl ebx r12 r13 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D004:
	byte bLoc21_1067 = 0x00
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D010:
	word64 rsp_1069
	word64 rdi_1070
	word64 rsi_1071
	word64 rbp_1072
	word64 r13_1073
	word64 r12_1074
	word64 rcx_1075
	word64 rbx_1076
	word32 ebx_1077
	word32 r9d_1078
	byte SCZO_1079
	word64 rdx_1080
	word32 r8d_1081
	word64 rax_1082
	byte bl_1083
	byte SZO_1084
	byte C_1085
	word64 r14_1086
	byte Z_1087
	word64 r15_1088
	word32 ebp_1089
	byte CZ_1090
	word32 ecx_1091
	word32 eax_1092
	word32 r12d_1093
	word32 edx_1094
	word32 edi_1095
	word32 r15d_1096
	word16 ax_1097
	byte al_1098
	call iswprint (retsize: 8; depth: 88)
		uses: al_787,ax_786,bl_765,bLoc21_1068,C_793,CZ_772,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_785,ebp_771,ebx_759,ecx_773,edi_789,edx_776,qwLoc08,qwLoc10,qwLoc18,qwLoc30_738,qwLoc38_30,qwLoc40_747,qwLoc48_28,r12_756,r12d_775,r13_755,r14_768,r15_1065,r15d_1066,r8d_763,r9d_760,rax_784,rbp_754,rbx_758,rcx_757,rdi_790,rdx_762,rsi_753,rsp_751,SCZO_761,SZO_791,Z_792
		defs: al_1098,ax_1097,bl_1083,C_1085,CZ_1090,eax_1092,ebp_1089,ebx_1077,ecx_1091,edi_1095,edx_1094,r12_1074,r12d_1093,r13_1073,r14_1086,r15_1088,r15d_1096,r8d_1081,r9d_1078,rax_1082,rbp_1072,rbx_1076,rcx_1075,rdi_1070,rdx_1080,rsi_1071,rsp_1069,SCZO_1079,SZO_1084,Z_1087
	branch eax_1092 != 0x00000000 l000000000040D025
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D019:
	Mem1184[rdi_1070:word32] = 0x0000FFFD
	bLoc21_1067 = 0x01
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D025:
	word32 edi_1105 = Mem788[rdi_1070:word32]
	branch edi_1105 != 0x00000000 l000000000040D010
// DataOut: bl eax ebx r12 r13 r14 r15 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0021(0) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D030:
	word64 rsp_1112
	word64 rdi_1113
	word64 rsi_1114
	word64 rbx_1119
	word32 r9d_1121
	byte SCZO_1122
	word64 rdx_1123
	word32 r8d_1124
	word64 rax_1125
	byte SZO_1127
	byte C_1128
	byte Z_1130
	word64 r15_1131
	word32 ebp_1132
	byte CZ_1133
	word32 ecx_1134
	word32 eax_1135
	word32 r12d_1136
	word32 edx_1137
	word32 edi_1138
	word32 r15d_1139
	word16 ax_1140
	byte al_1141
	call wcswidth (retsize: 8; depth: 88)
		uses: al_1098,ax_1097,bl_1083,bLoc21_1102,C_1109,CZ_1090,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_1092,ebp_1089,ebx_1077,ecx_1091,edi_1105,edx_1094,qwLoc08,qwLoc10,qwLoc18,qwLoc30_738,qwLoc38_30,qwLoc40_747,qwLoc48_28,r12_1074,r12d_1093,r13_1073,r14_1086,r15_1103,r15d_1104,r8d_1081,r9d_1078,rax_1082,rbp_1072,rbx_1076,rcx_1075,rdi_1111,rdx_1080,rsi_1110,rsp_1069,SCZO_1079,SZO_1107,Z_1108
		defs: al_1141,ax_1140,bl_1126,C_1128,CZ_1133,eax_1135,ebp_1132,ebx_1120,ecx_1134,edi_1138,edx_1137,r12_1117,r12d_1136,r13_1116,r14_1129,r15_1131,r15d_1139,r8d_1124,r9d_1121,rax_1125,rbp_1115,rbx_1119,rcx_1118,rdi_1113,rdx_1123,rsi_1114,rsp_1112,SCZO_1122,SZO_1127,Z_1130
	r15_1033 = (int64) eax_1135
	branch bLoc21_1067 == 0x00 l000000000040D118
// DataOut: bl ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D118:
	rax_1053 = Mem788[r12_1047:word64]
	branch r15_1033 <=u rax_1053 l000000000040CF28
// DataOut: bl ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CF28:
	rbp_1062 = DPB(rbp_1049, 0x00000000, 0) (alias)
// DataOut: bl ebx r12 r13 r14 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D125:
	qwLoc30_1060 = rbp_1049 + 0x0000000000000001
// DataOut: bl ebx r12 r13 r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D04D:
	word64 rsp_1151
	word64 rdi_1152
	word64 rsi_1153
	word64 rbp_1154
	word64 rbx_1158
	word32 r9d_1160
	byte SCZO_1161
	word64 rdx_1162
	word32 r8d_1163
	word64 rax_1164
	byte SZO_1166
	byte C_1167
	byte Z_1169
	word32 ebp_1171
	byte CZ_1172
	word32 ecx_1173
	word32 eax_1174
	word32 r12d_1175
	word32 edx_1176
	word32 edi_1177
	word32 r15d_1178
	word16 ax_1179
	byte al_1180
	call wcstombs (retsize: 8; depth: 88)
		uses: al_1141,ax_1140,bl_1126,bLoc21_1102,C_1150,CZ_1133,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_1135,ebp_1132,ebx_1120,ecx_1134,edi_1148,edx_1147,qwLoc08,qwLoc10,qwLoc18,qwLoc30_738,qwLoc38_30,qwLoc40_747,qwLoc48_28,r12_1117,r12d_1136,r13_1116,r14_1129,r15_1144,r15d_1145,r8d_1124,r9d_1121,rax_1125,rbp_1115,rbx_1119,rcx_1118,rdi_1113,rdx_1123,rsi_1146,rsp_1112,SCZO_1142,SZO_1149,Z_1143
		defs: al_1180,ax_1179,bl_1165,C_1167,CZ_1172,eax_1174,ebp_1171,ebx_1159,ecx_1173,edi_1177,edx_1176,r12_1156,r12d_1175,r13_1155,r14_1168,r15_1170,r15d_1178,r8d_1163,r9d_1160,rax_1164,rbp_1154,rbx_1158,rcx_1157,rdi_1152,rdx_1162,rsi_1153,rsp_1151,SCZO_1161,SZO_1166,Z_1169
	qwLoc30_1060 = rax_1164 + 0x0000000000000001
// DataOut: bl ebx r12 r13 r14 r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0030(64) Local -0038(0) Local -0040(64)

l000000000040D064:
	word64 rax_820 = malloc(qwLoc30_1060)
	rbp_1062 = rax_820
	branch rax_820 == 0x0000000000000000 l000000000040D138
// DataOut: bl ebx r12 r13 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D138:
	branch (bl_1035 & 0x01) != 0x00 l000000000040CE08
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D141:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040D07A:
	word64 rax_826 = Mem788[r12_1047:word64]
	word32 edi_832 = Mem788[rax_740:word32]
	branch edi_832 == 0x00000000 l000000000040D173
// DataOut: al bl eax ebx r12 r13 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D173:
// DataOut: bl ebx r12 r13 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D092:
// DataOut: al bl eax ebx r12 r13 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:(int64) eax rdi:<invalid> rdx:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0BA:
	word64 rsp_878
	word64 rdi_879
	word64 rsi_880
	word64 rbp_881
	word64 r13_882
	word64 r12_883
	word64 rcx_884
	word64 rbx_885
	word32 ebx_886
	word32 r9d_887
	byte SCZO_888
	word64 rdx_889
	word32 r8d_890
	word64 rax_891
	byte bl_892
	byte SZO_893
	byte C_894
	word64 r14_895
	byte Z_896
	word64 r15_897
	word32 ebp_898
	byte CZ_899
	word32 ecx_900
	word32 eax_901
	word32 r12d_902
	word32 edx_903
	word32 edi_904
	word32 r15d_905
	word16 ax_906
	byte al_907
	call wcwidth (retsize: 8; depth: 88)
		uses: al_831,ax_830,bl_801,bLoc21_794,C_877,CZ_807,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_829,ebp_825,ebx_804,ecx_806,edi_832,edx_809,qwLoc08,qwLoc10,qwLoc18,qwLoc30_795,qwLoc38_30,qwLoc40_747,qwLoc48_827,r12_814,r12d_798,r13_805,r14_873,r15_875,r15d_874,r8d_802,r9d_803,rax_828,rbp_824,rbx_816,rcx_813,rdi_819,rdx_808,rsi_817,rsp_818,SCZO_815,SZO_876,Z_834
		defs: al_907,ax_906,bl_892,C_894,CZ_899,eax_901,ebp_898,ebx_886,ecx_900,edi_904,edx_903,r12_883,r12d_902,r13_882,r14_895,r15_897,r15d_905,r8d_890,r9d_887,rax_891,rbp_881,rbx_885,rcx_884,rdi_879,rdx_889,rsi_880,rsp_878,SCZO_888,SZO_893,Z_896
	branch eax_901 != 0xFFFFFFFF l000000000040D0A0
	word64 rsp_910
	word64 rdi_911
	word64 rsi_912
	word64 rbp_913
	word64 r13_914
	word64 r12_915
	word64 rcx_916
	word64 rbx_917
	word32 ebx_918
	word32 r9d_919
	byte SCZO_920
	word64 rdx_921
	word32 r8d_922
	word64 rax_923
	byte bl_924
	byte SZO_925
	byte C_926
	word64 r14_927
	byte Z_928
	word64 r15_929
	word32 ebp_930
	byte CZ_931
	word32 ecx_932
	word32 eax_933
	word32 r12d_934
	word32 edx_935
	word32 edi_936
	word32 r15d_937
	word16 ax_938
	byte al_939
	call wcwidth (retsize: 8; depth: 88)
		uses: al_907,ax_906,bl_892,bLoc21_794,C_894,CZ_899,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_901,ebp_898,ebx_886,ecx_900,edi_904,edx_903,qwLoc08,qwLoc10,qwLoc18,qwLoc30_795,qwLoc38_30,qwLoc40_747,qwLoc48_827,r12_883,r12d_902,r13_882,r14_895,r15_897,r15d_905,r8d_890,r9d_887,rax_891,rbp_881,rbx_885,rcx_884,rdi_879,rdx_889,rsi_880,rsp_878,SCZO_908,SZO_893,Z_909
		defs: al_939,ax_938,bl_924,C_926,CZ_931,eax_933,ebp_930,ebx_918,ecx_932,edi_936,edx_935,r12_915,r12d_934,r13_914,r14_927,r15_929,r15d_937,r8d_922,r9d_919,rax_923,rbp_913,rbx_917,rcx_916,rdi_911,rdx_921,rsi_912,rsp_910,SCZO_920,SZO_925,Z_928
	branch eax_933 != 0xFFFFFFFF l000000000040D0A0
	word64 rsp_942
	word64 rdi_943
	word64 rsi_944
	word64 rbp_945
	word64 r13_946
	word64 r12_947
	word64 rcx_948
	word64 rbx_949
	word32 ebx_950
	word32 r9d_951
	byte SCZO_952
	word64 rdx_953
	word32 r8d_954
	word64 rax_955
	byte bl_956
	byte SZO_957
	byte C_958
	word64 r14_959
	byte Z_960
	word64 r15_961
	word32 ebp_962
	byte CZ_963
	word32 ecx_964
	word32 eax_965
	word32 r12d_966
	word32 edx_967
	word32 edi_968
	word32 r15d_969
	word16 ax_970
	byte al_971
	call wcwidth (retsize: 8; depth: 88)
		uses: al_939,ax_938,bl_924,bLoc21_794,C_926,CZ_931,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_933,ebp_930,ebx_918,ecx_932,edi_936,edx_935,qwLoc08,qwLoc10,qwLoc18,qwLoc30_795,qwLoc38_30,qwLoc40_747,qwLoc48_827,r12_915,r12d_934,r13_914,r14_927,r15_929,r15d_937,r8d_922,r9d_919,rax_923,rbp_913,rbx_917,rcx_916,rdi_911,rdx_921,rsi_912,rsp_910,SCZO_940,SZO_925,Z_941
		defs: al_971,ax_970,bl_956,C_958,CZ_963,eax_965,ebp_962,ebx_950,ecx_964,edi_968,edx_967,r12_947,r12d_966,r13_946,r14_959,r15_961,r15d_969,r8d_954,r9d_951,rax_955,rbp_945,rbx_949,rcx_948,rdi_943,rdx_953,rsi_944,rsp_942,SCZO_952,SZO_957,Z_960
	branch eax_965 != 0xFFFFFFFF l000000000040D0A0
// DataOut: al bl ebx r12 r13 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> eax:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0A0:
	branch rax_826 <u DPB(rax_955, (int16) al_971, 0) + r15_961 l000000000040D0E0
// DataOut: al bl eax ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> eax:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0C4:
	Mem992[rsi_944:word32] = 0x0000FFFD
	word64 rax_993 = DPB(rax_955, 0x00000001, 0) + r15_961
	branch rax_826 >=u rax_993 l000000000040D0AC
	Mem998[rsi_944:word32] = 0x0000FFFD
	word64 rax_999 = DPB(rax_993, 0x00000001, 0) + r15_961
	branch rax_826 >=u rax_999 l000000000040D0AC
	Mem1004[rsi_944:word32] = 0x0000FFFD
	branch rax_826 >=u DPB(rax_999, 0x00000001, 0) + r15_961 l000000000040D0AC
// DataOut: al bl eax ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> eax:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0AC:
	branch Mem788[rsi_944:word32] == 0x00000000 l000000000040D0E0
	branch Mem788[rsi_944:word32] == 0x00000000 l000000000040D0E0
// DataOut: al bl eax ebx r12 r13 r14 r15 rax rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> eax:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64) Local -0048(0)

l000000000040D0DA:
// DataOut: bl ebx r12 r13 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> eax:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D0E0:
	Mem840[rax_740:word32] = 0x00000000
	word64 rsp_841
	word64 rdi_842
	word64 rsi_843
	word64 rbx_848
	word32 r9d_850
	byte SCZO_851
	word64 rdx_852
	word32 r8d_853
	word64 rax_854
	byte SZO_856
	byte C_857
	word64 r14_858
	byte Z_859
	word32 ebp_861
	byte CZ_862
	word32 ecx_863
	word32 eax_864
	word32 r12d_865
	word32 edx_866
	word32 edi_867
	word32 r15d_868
	word16 ax_869
	byte al_870
	call wcstombs (retsize: 8; depth: 88)
		uses: al_831,ax_830,bl_801,bLoc21_794,C_835,CZ_807,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_829,ebp_825,ebx_804,ecx_806,edi_832,edx_809,qwLoc08,qwLoc10,qwLoc18,qwLoc30_795,qwLoc38_30,qwLoc40_747,qwLoc48_827,r12_814,r12d_798,r13_805,r14_800,r15_799,r15d_796,r8d_802,r9d_803,rax_828,rbp_836,rbx_816,rcx_813,rdi_839,rdx_837,rsi_838,rsp_818,SCZO_815,SZO_833,Z_834
		defs: al_870,ax_869,bl_855,C_857,CZ_862,eax_864,ebp_861,ebx_849,ecx_863,edi_867,edx_866,r12_846,r12d_865,r13_845,r14_858,r15_860,r15d_868,r8d_853,r9d_850,rax_854,rbp_844,rbx_848,rcx_847,rdi_842,rdx_852,rsi_843,rsp_841,SCZO_851,SZO_856,Z_859
	r14_1034 = rax_854
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> eax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CF83:
	branch (bl_1035 & 0x01) != 0x00 l000000000040D14D
// DataOut: bl ebx r12 r13 r14
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0)

l000000000040D14D:
	r15_1033 = r14_1034
	qwLoc40_104 = 0x0000000000000000
	rbp_1062 = DPB(rbp_681, 0x00000000, 0) (alias)
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CF8C:
	qwLoc40_104 = 0x0000000000000000
	rbp_1062 = DPB(rbp_681, 0x00000000, 0) (alias)
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CDFA:
	qwLoc40_104 = 0x0000000000000000
// DataOut: bl ebx r12 r13 r14 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) -72(fp):rdi -56(fp):rdx -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CE03:
	r15_1033 = rbp_42
	rbp_1062 = DPB(rbp_42, 0x00000000, 0) (alias)
// DataOut: bl ebx r12 r13 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:DPB(rax, <invalid>, 0) rbp:DPB(rax, <invalid>, 0) rsi:<invalid> edx:<invalid> edi:<invalid> r15:<invalid> rdi:<invalid> rdx:<invalid> -72(fp):rdi -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CE08:
	rax_1053 = Mem0[r12_1047:word64]
	branch r15_1033 <=u rax_1053 l000000000040CF2A
// DataOut: bl ebx r12 r13 r14 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> eax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CF2A:
	branch r15_1033 >=u rax_1053 l000000000040D180
// DataOut: bl ebx r12 r13 r14 r15 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> eax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040D180:
	rax_1053 = r15_1033
	rcx_120 = DPB(rcx, 0x00000000, 0) (alias)
// DataOut: bl ebx r12 r13 r14 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> eax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CF33:
	Mem519[r12_1047:word64] = r15_1033
	rcx_120 = rax_1053 - r15_1033
	rax_123 = DPB(r15_1033, r8d, 0) (alias)
	branch r8d != 0x00000000 l000000000040CE2A
// DataOut: bl eax ebx r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> eax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CE15:
	r14_1034 = rax_1053
	rcx_120 = DPB(rcx, 0x00000000, 0) (alias)
// DataOut: bl ebx r12 r13 r14 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> eax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(32) Local -0038(0) Local -0040(64)

l000000000040CE1A:
	Mem473[r12_1047:word64] = rax_1053
	rax_123 = DPB(rax_1053, r8d, 0) (alias)
	branch r8d == 0x00000000 l000000000040CF4C
// DataOut: bl eax ebx r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:0x00000000 rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> eax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CF4C:
	rcx_120 = DPB(rcx_120, 0x00000000, 0) (alias)
// DataOut: bl ebx r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:0x00000000 eax:r8d rcx:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CE2A:
	branch r8d == 0x00000001 l000000000040CE3E
// DataOut: bl ebx r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:rcx ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:0x00000000 eax:r8d rcx:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CE32:
	rcx_120 = DPB(rcx_120, 0x00000000, 0) + (rcx_120 >>u 0x0000000000000001)
// DataOut: bl ebx r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:0x00000000 eax:r8d rcx:<invalid> r12d:0x00000000 rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CE3E:
	word64 rax_130 = DPB(rax_123, 0x00000000, 0)
	branch (bl_1035 & 0x04) == 0x00 l000000000040CE47
// DataOut: ebx r12 r13 r14 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:r8d rcx:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CE43_1:
	rcx_120 = rax_130
// DataOut: ebx r12 r13 r14 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:0x00000000 rcx:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CE47:
	branch (ebx_1038 & 0x00000008) == 0x00000000 l000000000040CE4E
// DataOut: r12 r13 r14 rax rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:r9d rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:0x00000000 rcx:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CE4A_2:
// DataOut: r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:r9d & 0x00000008 rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:0x00000000 rcx:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(0) Local -0040(64)

l000000000040CE4E:
	branch rdx == 0x0000000000000000 l000000000040CEF9
// DataOut: r12 r13 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:r9d & 0x00000008 rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:0x00000000 rcx:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64) Local -0040(64)

l000000000040CE5A:
	word64 rdx_186 = rcx_120 - 0x0000000000000001
	word64 rbx_188 = r13_1039 - 0x0000000000000001 + rdx
	branch rcx_120 == 0x0000000000000000 l000000000040CE97
// DataOut: r12 r13 r14 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:r9d & 0x00000008 rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:0x00000000 rcx:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> r15d:<invalid> ax:0x0000 -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CE6D:
	branch r13_1039 >=u rbx_188 l000000000040CE97
// DataOut: r12 r13 r14 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:<invalid> rax:rdx r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CE72:
	word64 rax_337 = DPB(rdx, 0x00000000, 0)
// DataOut: r12 r13 r14 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:rsi r12:<invalid> ebx:<invalid> rax:rdx r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CE89:
	Mem350[rbp_1062 - 0x0000000000000001:byte] = 0x20
	word64 r13_347 = r13_1039 + 0x0000000000000001
	branch rdx_186 != rax_337 l000000000040CE80
	Mem354[rbp_1062 - 0x0000000000000001:byte] = 0x20
	r13_1039 = r13_347 + 0x0000000000000001
	branch rdx_186 != rax_337 l000000000040CE80
// DataOut: r12 r13 r14 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CE80:
	rax_337 = rax_337 + 0x0000000000000001
	branch r13_347 + 0x0000000000000001 == rbx_188 l000000000040CE97
// DataOut: r12 r13 r14 rax rbp rbx rcx rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CE97:
	Mem201[rbp_1062:byte] = 0x00
	branch rbx_188 - r13_1039 <=u r14_1034 l000000000040CEB6
	Mem208[rbp_1062:byte] = 0x00
	word64 rdx_209 = rbx_188 - r13_1039
	branch rdx_209 <=u r14_1034 l000000000040CEB6
// DataOut: r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):rdx -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64) Local -0040(64)

l000000000040CEB2_1:
// DataOut: r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64) Local -0040(64)

l000000000040CEB2_1:
// DataOut: r12 r14 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0038(64) Local -0040(64)

l000000000040CEB6:
	word64 rsp_214
	word64 rdi_215
	word64 rsi_216
	word64 rbp_217
	word64 r13_218
	word64 r12_219
	word64 rcx_220
	word64 rbx_221
	word32 ebx_222
	word32 r9d_223
	byte SCZO_224
	word64 rdx_225
	word32 r8d_226
	word64 rax_227
	byte bl_228
	byte SZO_229
	byte C_230
	word64 r14_231
	byte Z_232
	word64 r15_233
	word32 ebp_234
	byte CZ_235
	word32 ecx_236
	word32 eax_237
	word32 r12d_238
	word32 edx_239
	word32 edi_240
	word32 r15d_241
	word16 ax_242
	byte al_243
	call mempcpy (retsize: 8; depth: 88)
		uses: al_196,ax_195,bl_190,bLoc21_101,C_193,CZ_213,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_194,ebp_108,ebx_189,ecx_136,edi_106,edx_187,qwLoc08,qwLoc10,qwLoc18,qwLoc30_102,qwLoc38_211,qwLoc40_104,qwLoc48_103,r12_143,r12d_142,r13_191,r14_110,r15_109,r15d_105,r8d_112,r9d_113,rax_198,rbp_125,rbx_188,rcx_137,rdi_210,rdx_209,rsi_207,rsp_128,SCZO_212,SZO_192,Z_197
		defs: al_243,ax_242,bl_228,C_230,CZ_235,eax_237,ebp_234,ebx_222,ecx_236,edi_240,edx_239,r12_219,r12d_238,r13_218,r14_231,r15_233,r15d_241,r8d_226,r9d_223,rax_227,rbp_217,rbx_221,rcx_220,rdi_215,rdx_225,rsi_216,rsp_214,SCZO_224,SZO_229,Z_232
	branch r12_219 == 0x0000000000000000 l000000000040CEF6
	word64 rsp_250
	word64 rdi_251
	word64 rsi_252
	word64 r13_254
	word64 r12_255
	word64 rcx_256
	word64 rbx_257
	word32 ebx_258
	word32 r9d_259
	byte SCZO_260
	word64 rdx_261
	word32 r8d_262
	word64 rax_263
	byte bl_264
	byte SZO_265
	byte C_266
	word64 r14_267
	byte Z_268
	word64 r15_269
	word32 ebp_270
	byte CZ_271
	word32 ecx_272
	word32 eax_273
	word32 r12d_274
	word32 edx_275
	word32 edi_276
	word32 r15d_277
	word16 ax_278
	byte al_279
	call mempcpy (retsize: 8; depth: 88)
		uses: al_243,ax_242,bl_228,bLoc21_101,C_246,CZ_235,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_14,dwLoc14_19,dwLoc18_22,dwLoc28_32,eax_237,ebp_234,ebx_222,ecx_236,edi_240,edx_239,qwLoc08,qwLoc10,qwLoc18,qwLoc30_102,qwLoc38_211,qwLoc40_104,qwLoc48_103,r12_219,r12d_238,r13_218,r14_231,r15_233,r15d_241,r8d_226,r9d_223,rax_227,rbp_217,rbx_221,rcx_249,rdi_215,rdx_247,rsi_248,rsp_214,SCZO_224,SZO_244,Z_245
		defs: al_279,ax_278,bl_264,C_266,CZ_271,eax_273,ebp_270,ebx_258,ecx_272,edi_276,edx_275,r12_255,r12d_274,r13_254,r14_267,r15_269,r15d_277,r8d_262,r9d_259,rax_263,rbp_253,rbx_257,rcx_256,rdi_251,rdx_261,rsi_252,rsp_250,SCZO_260,SZO_265,Z_268
	word64 rdx_283 = rax_263
	branch r12_255 == 0x0000000000000000 l000000000040CEF6
// DataOut: r12 r14 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CECD:
	branch rbx_257 <=u rax_263 l000000000040CEF6
	branch rbx_257 <=u rax_263 l000000000040CEF6
// DataOut: r12 r14 rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CED2:
	word64 rax_307 = DPB(rax_263, 0x00000000, 0)
// DataOut: r12 r14 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEE9:
	word64 rdx_317 = rdx_283 + 0x0000000000000001
	Mem320[rdx_317 - 0x0000000000000001:byte] = 0x20
	branch r12_255 - 0x0000000000000001 != rax_307 l000000000040CEE0
	Mem325[rdx_317:byte] = 0x20
	rdx_283 = rdx_317 + 0x0000000000000001
	branch r12_255 - 0x0000000000000001 != rax_307 l000000000040CEE0
// DataOut: r12 r14 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEE0:
	rax_307 = rax_307 + 0x0000000000000001
	branch rdx_317 + 0x0000000000000001 == rbx_257 l000000000040CEF6
// DataOut: r12 r14 rax rbp rbx rcx rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEF6:
	Mem299[rdx_283:byte] = 0x00
	Mem300[rdx_283:byte] = 0x00
// DataOut: r12 r14 rbp rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx rsi:<invalid> rdi:<invalid> edx:<invalid> edi:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEF9:
// DataOut: rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> r15:<invalid> ebp:0x00000000 ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0040(64)

l000000000040CEFF:
	free(qwLoc40_104)
	free(rbp_1062)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> ebp:0x00000000 r15:<invalid> rdi:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> rbx:rsi - 0x0000000000000001 + rdx r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040CDC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 r13:<invalid> r12:<invalid> ebx:<invalid> rax:<invalid> r14:<invalid> rbp:<invalid> rsi:<invalid> edx:<invalid> edi:<invalid> ebp:<invalid> rdi:<invalid> rbx:rbx r15:<invalid> ecx:<invalid> eax:<invalid> rcx:<invalid> r12d:<invalid> rdx:<invalid> r15d:<invalid> ax:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):r8d -33(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040D240(word32 edx, word64 rsi, word64 rdi, selector fs, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx fs rdi rsi
// LiveOut: eax ebp ebx r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D240_entry:
	def fp
	def rdi
	def edx
	def r15
	def rsi
	def rbp
	def rbx
	def fs
	def Mem0
	def qwLoc18
	def qwLoc10
	def qwLoc08
	def ebxOut
	def rspOut
	def rbpOut
	def rsiOut
	def r12Out
	def r13Out
	def r14Out
	def r15Out
	def qwLoc30
	def dwLoc34
// DataOut: ebx edx fs r11 r11d r12 r12b r14 r14b r14d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0034(32)

l000000000040D240:
	rsp_1 = fp
	rsp_2 = fp - 0x0000000000000004
	dwLoc04_4 = rdi
	r15d_6 = edx
	r15_8 = DPB(r15, r15d_6, 0) (alias)
	rsp_9 = fp - 0x0000000000000008
	dwLoc08_11 = rsi
	rsp_12 = fp - 0x000000000000000C
	dwLoc0C_14 = rbp
	r13_15 = rdi + rsi
	v9_16 = fp - 0x000000000000000C
	rsp_17 = fp - 0x0000000000000010
	dwLoc10_18 = fp - 0x000000000000000C
	rsp_19 = fp - 0x0000000000000014
	dwLoc14_20 = rbp
	rbp_21 = rdi
	rsp_22 = fp - 0x0000000000000018
	dwLoc18_24 = rbx
	rsp_25 = fp - 0x0000000000000040
	rax_28 = Mem0[fs:0x00000028:word64]
	qwLoc28_29 = rax_28
	eax_30 = 0x00000000
	rax_31 = DPB(rax_28, eax_30, 0) (alias)
	al_32 = (byte) eax_30 (alias)
	SZO_33 = cond(0x00000000)
	C_34 = false
	call __ctype_get_mb_cur_max (retsize: 8; depth: 72)
		uses: al_32,C_34,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,eax_30,edx,fs,qwLoc28_29,r13_15,r15_8,r15d_6,rax_31,rbp_21,rbx,rdi,rsi,rsp_25,SZO_33
		defs: al_52,C_48,CZ_49,dh_60,eax_46,ebx_61,edi_57,edx_37,esi_59,fs_44,r12_62,r12d_51,r13_41,r14_63,r14d_50,r15_64,r15d_38,rax_45,rbp_40,rbx_42,rcx_55,rdi_36,rdx_54,rsi_39,rsp_35,S_58,SCZO_43,SO_53,SZO_47,Z_56
	SCZO_65 = cond(rax_45 - 0x0000000000000001)
	CZ_66 = SCZO_65 (alias)
	branch rax_45 <=u 0x0000000000000001 l000000000040D370
// DataOut: fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D370:
	SCZO_694 = cond(rbp_40 - r13_41)
	C_695 = SCZO_694 (alias)
	branch rbp_40 >=u r13_41 l000000000040D406
// DataOut: fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D379:
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: al_52,C_695,CZ_66,dh_60,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,dwLoc34,eax_46,ebx_61,edi_57,edx_37,esi_59,fs_44,qwLoc08,qwLoc10,qwLoc18,qwLoc28_29,qwLoc30,r12_62,r12d_51,r13_41,r14_63,r14d_50,r15_64,r15d_38,rax_45,rbp_40,rbx_42,rcx_55,rdi_36,rdx_54,rsi_39,rsp_35,S_58,SCZO_694,SO_53,SZO_47,Z_56
		defs: al_713,C_709,CZ_710,dh_721,eax_707,ebx_722,edi_718,edx_698,esi_720,fs_705,r12_723,r12d_712,r13_702,r14_724,r14d_711,r15_725,r15d_699,rax_706,rbp_701,rbx_703,rcx_716,rdi_697,rdx_715,rsi_700,rsp_696,S_719,SCZO_704,SO_714,SZO_708,Z_717
	esi_726 = r15d_699
	rcx_727 = Mem0[rax_706:word64]
	eax_728 = 0x00000000
	rax_729 = DPB(rax_706, eax_728, 0) (alias)
	al_730 = (byte) eax_728 (alias)
	esi_731 = esi_726 & 0x00000002
	rsi_732 = DPB(rsi_700, esi_731, 0) (alias)
	SZO_733 = cond(esi_731)
	C_734 = false
// DataOut: eax esi fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D398:
	rdx_735 = PHI(rdx_715, rdx_752)
	rax_736 = PHI(rax_729, rax_760)
	eax_737 = PHI(eax_728, eax_761)
	al_738 = PHI(al_730, al_762)
	SCZO_739 = PHI(SCZO_704, SCZO_763)
	rbp_740 = PHI(rbp_701, rbp_748)
	rbp_741 = rbp_740 + 0x0000000000000001
	edx_742 = (word32) Mem0[rbp_741 - 0x0000000000000001:byte]
	rdx_743 = DPB(rdx_735, edx_742, 0) (alias)
	edx_744 = (word32) Mem0[rcx_727 + rdx_743 * 0x0002:word16]
	dh_745 = SLICE(edx_744, byte, 8) (alias)
	SZO_746 = cond(dh_745 & 0x40)
	Z_747 = SZO_746 (alias)
	branch (dh_745 & 0x40) != 0x00 l000000000040D3B2
	rbp_748 = rbp_741 + 0x0000000000000001
	edx_749 = (word32) Mem0[rbp_748 - 0x0000000000000001:byte]
	rdx_750 = DPB(rdx_743, edx_749, 0) (alias)
	edx_751 = (word32) Mem0[rcx_727 + rdx_750 * 0x0002:word16]
	rdx_752 = DPB(rdx_750, edx_751, 0) (alias)
	dh_753 = SLICE(edx_751, byte, 8) (alias)
	SZO_754 = cond(dh_753 & 0x40)
	Z_755 = SZO_754 (alias)
	C_756 = false
	branch (dh_753 & 0x40) != 0x00 l000000000040D3B2
// DataOut: eax edx esi fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3A9:
	SZO_776 = cond(esi_731 & esi_731)
	Z_777 = SZO_776 (alias)
	branch (esi_731 & esi_731) != 0x00000000 l000000000040D369
	SZO_778 = cond(esi_731 & esi_731)
	Z_779 = SZO_778 (alias)
	C_780 = false
	branch (esi_731 & esi_731) != 0x00000000 l000000000040D369
// DataOut: eax edx esi fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3AD:
	edx_781 = edx_751 & 0x00000002
	SZO_782 = cond(edx_781)
	Z_783 = SZO_782 (alias)
	branch edx_781 != 0x00000000 l000000000040D393
	edx_784 = edx_781 & 0x00000002
	SZO_785 = cond(edx_784)
	Z_786 = SZO_785 (alias)
	C_787 = false
	branch edx_784 != 0x00000000 l000000000040D393
// DataOut: eax esi fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3B2:
	edx_765 = PHI(edx_751, edx_784)
	SZO_766 = PHI(SZO_754, SZO_785)
	C_767 = PHI(C_756, C_787)
	SCZO_768 = cond(eax_737 - 0x7FFFFFFF)
	Z_769 = SCZO_768 (alias)
	branch eax_737 != 0x7FFFFFFF l000000000040D390
	SCZO_770 = cond(eax_737 - 0x7FFFFFFF)
	Z_771 = SCZO_770 (alias)
	branch eax_737 != 0x7FFFFFFF l000000000040D390
// DataOut: eax esi fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D390:
	eax_772 = eax_737 + 0x00000001
	rax_773 = DPB(rax_736, eax_772, 0) (alias)
	al_774 = (byte) eax_772 (alias)
	SCZO_775 = cond(eax_772)
// DataOut: eax esi fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D393:
	edx_757 = PHI(edx_784, edx_765)
	SZO_758 = PHI(SZO_785, SZO_766)
	C_759 = PHI(C_787, C_767)
	rax_760 = PHI(rax_736, rax_773)
	eax_761 = PHI(eax_737, eax_772)
	al_762 = PHI(al_738, al_774)
	SCZO_763 = cond(rbp_748 - r13_702)
	Z_764 = SCZO_763 (alias)
	branch rbp_748 == r13_702 l000000000040D3C5
// DataOut: eax esi fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rcx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3B9:
// DataOut: fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D277:
	SCZO_208 = cond(rbp_40 - r13_41)
	C_209 = SCZO_208 (alias)
	branch rbp_40 >=u r13_41 l000000000040D406
// DataOut: fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D406:
	SCZO_201 = PHI(SCZO_208, SCZO_694)
	eax_202 = 0x00000000
	rax_203 = DPB(rax_45, eax_202, 0) (alias)
	al_204 = (byte) eax_202 (alias)
	SZO_205 = cond(0x00000000)
	C_206 = false
// DataOut: eax fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D280:
	r14d_210 = r15d_38
	r12d_211 = 0x00000000
	r12_212 = DPB(r12_62, r12d_211, 0) (alias)
	r15d_213 = r15d_38 & 0x00000001
	r15_214 = DPB(r15_64, r15d_213, 0) (alias)
	r14d_215 = r14d_210 & 0x00000002
	r14_216 = DPB(r14_63, r14d_215, 0) (alias)
	SZO_217 = cond(r14d_215)
	C_218 = false
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx r13:rdi + rsi rbp:rdi rax:<invalid> eax:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2AC:
	qwLoc30_219 = PHI(qwLoc30, qwLoc30_287, qwLoc30_360)
	dh_220 = PHI(dh_60, dh_288, dh_434)
	S_221 = PHI(S_58, S_289, S_432)
	edi_222 = PHI(edi_57, edi_290, edi_431)
	rcx_223 = PHI(rcx_55, rcx_291, rcx_429)
	rdx_224 = PHI(rdx_54, rdx_292, rdx_428)
	SO_225 = PHI(SO_53, SO_293, SO_427)
	r12d_226 = PHI(r12d_211, r12d_294, r12d_663)
	r14d_227 = PHI(r14d_215, r14d_295, r14d_424)
	fs_228 = PHI(fs_44, fs_296, fs_418)
	r15d_229 = PHI(r15d_213, r15d_297, r15d_412)
	edx_230 = PHI(edx_37, edx_298, edx_411)
	CZ_231 = PHI(CZ_66, CZ_317, CZ_666)
	Z_232 = PHI(Z_56, Z_300, Z_660)
	C_233 = PHI(C_218, C_301, C_661)
	r12_234 = PHI(r12_212, r12_302, r12_664)
	r13_235 = PHI(r13_41, r13_303, r13_415)
	r14_236 = PHI(r14_216, r14_304, r14_437)
	r15_237 = PHI(r15_214, r15_305, r15_438)
	rax_238 = PHI(rax_45, rax_306, rax_419)
	rbx_239 = PHI(rbx_42, rbx_309, rbx_441)
	ebx_240 = PHI(ebx_61, ebx_310, ebx_442)
	rbp_241 = PHI(rbp_40, rbp_311, rbp_662)
	rsi_242 = PHI(rsi_39, rsi_312, rsi_413)
	esi_243 = PHI(esi_59, esi_313, esi_433)
	rdi_244 = PHI(rdi_36, rdi_314, rdi_410)
	rsp_245 = PHI(rsp_35, rsp_315, rsp_409)
	eax_246 = (word32) Mem0[rbp_241 + 0x0000000000000000:byte]
	al_247 = (byte) eax_246 (alias)
	SCZO_248 = cond(al_247 - 0x3F)
	SZO_249 = SCZO_248 (alias)
	branch al_247 <= 0x3F l000000000040D290
	eax_250 = (word32) Mem0[rbp_241 + 0x0000000000000000:byte]
	rax_251 = DPB(rax_238, eax_250, 0) (alias)
	al_252 = (byte) eax_250 (alias)
	SCZO_253 = cond(al_252 - 0x3F)
	SZO_254 = SCZO_253 (alias)
	branch al_252 <= 0x3F l000000000040D290
// DataOut: al eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D290:
	SCZO_687 = cond(al_252 - 0x25)
	SO_688 = SCZO_687 (alias)
	branch al_252 >= 0x25 l000000000040D29B
// DataOut: al eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D294:
	eax_689 = eax_250 - 0x00000020
	rax_690 = DPB(rax_251, eax_689, 0) (alias)
	al_691 = (byte) eax_689 (alias)
	SCZO_692 = cond(al_691 - 0x03)
	CZ_693 = SCZO_692 (alias)
	branch al_691 >u 0x03 l000000000040D2C3
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2B4:
	SCZO_670 = cond(al_252 - 0x41)
	SO_671 = SCZO_670 (alias)
	branch al_252 < 0x41 l000000000040D2C3
	SCZO_672 = cond(al_252 - 0x41)
	SO_673 = SCZO_672 (alias)
	branch al_252 < 0x41 l000000000040D2C3
// DataOut: al eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2B8:
	SCZO_674 = cond(al_252 - 0x5F)
	SZO_675 = SCZO_674 (alias)
	branch al_252 <= 0x5F l000000000040D29B
	SCZO_676 = cond(al_252 - 0x5F)
	SZO_677 = SCZO_676 (alias)
	branch al_252 <= 0x5F l000000000040D29B
// DataOut: al eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2BC:
	eax_678 = eax_250 - 0x00000061
	al_679 = (byte) eax_678 (alias)
	SCZO_680 = cond(al_679 - 0x1D)
	CZ_681 = SCZO_680 (alias)
	branch al_679 <=u 0x1D l000000000040D29B
	eax_682 = eax_678 - 0x00000061
	rax_683 = DPB(rax_251, eax_682, 0) (alias)
	al_684 = (byte) eax_682 (alias)
	SCZO_685 = cond(al_684 - 0x1D)
	CZ_686 = SCZO_685 (alias)
	branch al_684 <=u 0x1D l000000000040D29B
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2C3:
	SO_352 = PHI(SO_673, SO_673, SO_688)
	CZ_353 = PHI(CZ_231, CZ_686, CZ_693)
	SZO_354 = PHI(SZO_254, SZO_677, SZO_254)
	rax_355 = PHI(rax_251, rax_683, rax_690)
	eax_356 = PHI(eax_250, eax_682, eax_689)
	al_357 = PHI(al_252, al_684, al_691)
	SCZO_358 = PHI(SCZO_672, SCZO_685, SCZO_692)
	qwLoc30_359 = 0x0000000000000000
	qwLoc30_360 = 0x0000000000000000
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2F4:
	r13_361 = PHI(r13_235, r13_539)
	rbp_362 = PHI(rbp_241, rbp_538)
	rdx_363 = r13_361
	rcx_364 = fp - 0x0000000000000030
	rdi_365 = fp - 0x0000000000000034
	rdx_366 = rdx_363 - rbp_362
	SCZO_367 = cond(rdx_366)
	rsi_368 = rbp_362
	call mbrtowc (retsize: 8; depth: 72)
		uses: al_357,C_233,CZ_353,dh_220,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,eax_356,ebx_240,edi_222,edx_230,esi_243,fs_228,qwLoc08,qwLoc10,qwLoc18,qwLoc28_29,qwLoc30_360,r12_234,r12d_226,r13_361,r14_236,r14d_227,r15_237,r15d_229,rax_355,rbp_362,rbx_239,rcx_364,rdi_365,rdx_366,rsi_368,rsp_245,S_221,SCZO_367,SO_352,SZO_354,Z_232
		defs: al_386,C_382,CZ_383,dh_394,eax_380,ebx_395,edi_391,edx_371,esi_393,fs_378,r12_396,r12d_385,r13_375,r14_397,r14d_384,r15_398,r15d_372,rax_379,rbp_374,rbx_376,rcx_389,rdi_370,rdx_388,rsi_373,rsp_369,S_392,SCZO_377,SO_387,SZO_381,Z_390
	SCZO_399 = cond(rax_379 - 0xFFFFFFFFFFFFFFFF)
	Z_400 = SCZO_399 (alias)
	rbx_401 = rax_379
	branch rax_379 == 0xFFFFFFFFFFFFFFFF l000000000040D360
	rdx_402 = r13_375
	rcx_403 = fp - 0x0000000000000030
	rdi_404 = fp - 0x0000000000000034
	edi_405 = (word32) rdi_404 (alias)
	rdx_406 = rdx_402 - rbp_374
	SCZO_407 = cond(rdx_406)
	rsi_408 = rbp_374
	call mbrtowc (retsize: 8; depth: 72)
		uses: al_386,C_382,CZ_383,dh_394,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,eax_380,ebx_395,edi_405,edx_371,esi_393,fs_378,qwLoc08,qwLoc10,qwLoc18,qwLoc28_29,qwLoc30_360,r12_396,r12d_385,r13_375,r14_397,r14d_384,r15_398,r15d_372,rax_379,rbp_374,rbx_401,rcx_403,rdi_404,rdx_406,rsi_408,rsp_369,S_392,SCZO_407,SO_387,SZO_381,Z_400
		defs: al_426,C_422,CZ_423,dh_434,eax_420,ebx_435,edi_431,edx_411,esi_433,fs_418,r12_436,r12d_425,r13_415,r14_437,r14d_424,r15_438,r15d_412,rax_419,rbp_414,rbx_416,rcx_429,rdi_410,rdx_428,rsi_413,rsp_409,S_432,SCZO_417,SO_427,SZO_421,Z_430
	SCZO_439 = cond(rax_419 - 0xFFFFFFFFFFFFFFFF)
	Z_440 = SCZO_439 (alias)
	rbx_441 = rax_419
	ebx_442 = (word32) rbx_441 (alias)
	branch rax_419 == 0xFFFFFFFFFFFFFFFF l000000000040D360
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D360:
	SZO_667 = cond(r15d_412 & r15d_412)
	Z_668 = SZO_667 (alias)
	C_669 = false
	branch (r15d_412 & r15d_412) == 0x00000000 l000000000040D29B
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D29B:
	qwLoc30_318 = PHI(qwLoc30_219, qwLoc30_219, qwLoc30_219, qwLoc30_219, qwLoc30_360)
	dh_319 = PHI(dh_220, dh_220, dh_220, dh_220, dh_434)
	S_320 = PHI(S_221, S_221, S_221, S_221, S_432)
	edi_321 = PHI(edi_222, edi_222, edi_222, edi_222, edi_431)
	rcx_322 = PHI(rcx_223, rcx_223, rcx_223, rcx_223, rcx_429)
	rdx_323 = PHI(rdx_224, rdx_224, rdx_224, rdx_224, rdx_428)
	SO_324 = PHI(SO_673, SO_673, SO_688, SO_688, SO_427)
	r12d_325 = PHI(r12d_226, r12d_226, r12d_226, r12d_226, r12d_425)
	r14d_326 = PHI(r14d_227, r14d_227, r14d_227, r14d_227, r14d_424)
	fs_327 = PHI(fs_228, fs_228, fs_228, fs_228, fs_418)
	r15d_328 = PHI(r15d_229, r15d_229, r15d_229, r15d_229, r15d_412)
	edx_329 = PHI(edx_230, edx_230, edx_230, edx_230, edx_411)
	CZ_330 = PHI(CZ_231, CZ_686, CZ_231, CZ_693, CZ_423)
	SZO_331 = PHI(SZO_677, SZO_677, SZO_254, SZO_254, SZO_667)
	Z_332 = PHI(Z_232, Z_232, Z_232, Z_232, Z_668)
	C_333 = PHI(C_233, C_233, C_233, C_233, C_669)
	r12_334 = PHI(r12_234, r12_234, r12_234, r12_234, r12_436)
	r13_335 = PHI(r13_235, r13_235, r13_235, r13_235, r13_415)
	r14_336 = PHI(r14_236, r14_236, r14_236, r14_236, r14_437)
	r15_337 = PHI(r15_237, r15_237, r15_237, r15_237, r15_438)
	rax_338 = PHI(rax_251, rax_683, rax_251, rax_690, rax_419)
	eax_339 = PHI(eax_250, eax_682, eax_250, eax_689, eax_420)
	al_340 = PHI(al_252, al_684, al_252, al_691, al_426)
	rbx_341 = PHI(rbx_239, rbx_239, rbx_239, rbx_239, rbx_441)
	ebx_342 = PHI(ebx_240, ebx_240, ebx_240, ebx_240, ebx_442)
	rbp_343 = PHI(rbp_241, rbp_241, rbp_241, rbp_241, rbp_414)
	rsi_344 = PHI(rsi_242, rsi_242, rsi_242, rsi_242, rsi_413)
	esi_345 = PHI(esi_243, esi_243, esi_243, esi_243, esi_433)
	rdi_346 = PHI(rdi_244, rdi_244, rdi_244, rdi_244, rdi_410)
	rsp_347 = PHI(rsp_245, rsp_245, rsp_245, rsp_245, rsp_409)
	rbp_348 = rbp_343 + 0x0000000000000001
	r12d_349 = r12d_325 + 0x00000001
	r12_350 = DPB(r12_334, r12d_349, 0) (alias)
	SCZO_351 = cond(r12d_349)
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D315:
	SCZO_443 = cond(rax_419 - 0xFFFFFFFFFFFFFFFE)
	Z_444 = SCZO_443 (alias)
	branch rax_419 == 0xFFFFFFFFFFFFFFFE l000000000040D3E8
	SCZO_445 = cond(rax_419 - 0xFFFFFFFFFFFFFFFE)
	Z_446 = SCZO_445 (alias)
	branch rax_419 == 0xFFFFFFFFFFFFFFFE l000000000040D3E8
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D3E8:
	SZO_659 = cond(r15d_412 & r15d_412)
	Z_660 = SZO_659 (alias)
	C_661 = false
	branch (r15d_412 & r15d_412) != 0x00000000 l000000000040D369
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D3F1:
	rbp_662 = r13_415
	r12d_663 = r12d_425 + 0x00000001
	r12_664 = DPB(r12_436, r12d_663, 0) (alias)
	SCZO_665 = cond(r13_415 - rbp_662)
	CZ_666 = SCZO_665 (alias)
	branch r13_415 >u rbp_662 l000000000040D2AC
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D31F:
	edi_448 = dwLoc34
	SZO_449 = cond(rax_419 & rax_419)
	Z_450 = SZO_449 (alias)
	eax_451 = 0x00000001
	rax_452 = DPB(rax_419, eax_451, 0) (alias)
	branch (rax_419 & rax_419) != 0x0000000000000000 l000000000040D32F
	edi_453 = dwLoc34
	rdi_454 = DPB(rdi_410, edi_453, 0) (alias)
	SZO_455 = cond(rax_452 & rax_452)
	Z_456 = SZO_455 (alias)
	C_457 = false
	eax_458 = 0x00000001
	rax_459 = DPB(rax_452, eax_458, 0) (alias)
	al_460 = (byte) eax_458 (alias)
	branch (rax_452 & rax_452) != 0x0000000000000000 l000000000040D32F
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D32B_1:
	rbx_657 = rax_459
	ebx_658 = (word32) rbx_657 (alias)
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:0x00000001 r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D32B_1:
	rbx_655 = rax_459
	ebx_656 = (word32) rbx_655 (alias)
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:0x00000001 r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D32F:
	call wcwidth (retsize: 8; depth: 72)
		uses: al_460,C_457,CZ_423,dh_434,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,dwLoc34,eax_458,ebx_442,edi_453,edx_411,esi_433,fs_418,qwLoc08,qwLoc10,qwLoc18,qwLoc28_29,qwLoc30_360,r12_436,r12d_425,r13_415,r14_437,r14d_424,r15_438,r15d_412,rax_459,rbp_414,rbx_441,rcx_429,rdi_454,rdx_428,rsi_413,rsp_409,S_432,SCZO_445,SO_427,SZO_455,Z_456
		defs: al_478,C_474,CZ_475,dh_486,eax_472,ebx_487,edi_483,edx_463,esi_485,fs_470,r12_488,r12d_477,r13_467,r14_489,r14d_476,r15_490,r15d_464,rax_471,rbp_466,rbx_468,rcx_481,rdi_462,rdx_480,rsi_465,rsp_461,S_484,SCZO_469,SO_479,SZO_473,Z_482
	SZO_491 = cond(0x00000001)
	S_492 = SZO_491 (alias)
	C_493 = false
	branch 0x00000001 >= 0x00000000 l000000000040D2D0
	call wcwidth (retsize: 8; depth: 72)
		uses: al_478,C_493,CZ_475,dh_486,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,dwLoc34,eax_472,ebx_487,edi_483,edx_463,esi_485,fs_470,qwLoc08,qwLoc10,qwLoc18,qwLoc28_29,qwLoc30_360,r12_488,r12d_477,r13_467,r14_489,r14d_476,r15_490,r15d_464,rax_471,rbp_466,rbx_468,rcx_481,rdi_462,rdx_480,rsi_465,rsp_461,S_492,SCZO_469,SO_479,SZO_491,Z_482
		defs: al_511,C_507,CZ_508,dh_519,eax_505,ebx_520,edi_516,edx_496,esi_518,fs_503,r12_521,r12d_510,r13_500,r14_522,r14d_509,r15_523,r15d_497,rax_504,rbp_499,rbx_501,rcx_514,rdi_495,rdx_513,rsi_498,rsp_494,S_517,SCZO_502,SO_512,SZO_506,Z_515
	SZO_524 = cond(0x00000001)
	S_525 = SZO_524 (alias)
	C_526 = false
	branch 0x00000001 >= 0x00000000 l000000000040D2D0
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:0x00000001 r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2D0:
	edx_648 = 0x7FFFFFFF
	edx_649 = 0x7FFFFFFF - r12d_510
	SCZO_650 = cond(eax_505 - edx_649)
	SZO_651 = SCZO_650 (alias)
	branch eax_505 > edx_649 l000000000040D3C0
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2E0:
	r12d_652 = r12d_510 + eax_505
	r12_653 = DPB(r12_521, r12d_652, 0) (alias)
	SCZO_654 = cond(r12d_652)
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D338:
	SZO_566 = cond(r14d_509 & r14d_509)
	Z_567 = SZO_566 (alias)
	branch (r14d_509 & r14d_509) != 0x00000000 l000000000040D369
	SZO_568 = cond(r14d_509 & r14d_509)
	Z_569 = SZO_568 (alias)
	C_570 = false
	branch (r14d_509 & r14d_509) != 0x00000000 l000000000040D369
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D369:
	qwLoc30_169 = PHI(qwLoc30, qwLoc30_360, qwLoc30_360, qwLoc30_360)
	dh_170 = PHI(dh_753, dh_519, dh_434, dh_434)
	S_171 = PHI(S_719, S_525, S_432, S_432)
	edi_172 = PHI(edi_718, edi_516, edi_431, edi_431)
	rcx_173 = PHI(rcx_727, rcx_514, rcx_429, rcx_429)
	rdx_174 = PHI(rdx_752, rdx_513, rdx_428, rdx_428)
	SO_175 = PHI(SO_714, SO_512, SO_427, SO_427)
	r12d_176 = PHI(r12d_712, r12d_510, r12d_425, r12d_425)
	r14d_177 = PHI(r14d_711, r14d_509, r14d_424, r14d_424)
	fs_178 = PHI(fs_705, fs_503, fs_418, fs_418)
	r15d_179 = PHI(r15d_699, r15d_497, r15d_412, r15d_412)
	edx_180 = PHI(edx_751, edx_496, edx_411, edx_411)
	CZ_181 = PHI(CZ_710, CZ_508, CZ_423, CZ_423)
	SZO_182 = PHI(SZO_778, SZO_568, SZO_659, SZO_667)
	Z_183 = PHI(Z_779, Z_569, Z_660, Z_668)
	C_184 = PHI(C_780, C_570, C_661, C_669)
	r12_185 = PHI(r12_723, r12_521, r12_436, r12_436)
	r13_186 = PHI(r13_702, r13_500, r13_415, r13_415)
	r14_187 = PHI(r14_724, r14_522, r14_437, r14_437)
	r15_188 = PHI(r15_725, r15_523, r15_438, r15_438)
	rax_189 = PHI(rax_736, rax_504, rax_419, rax_419)
	SCZO_190 = PHI(SCZO_739, SCZO_502, SCZO_445, SCZO_439)
	rbx_191 = PHI(rbx_703, rbx_501, rbx_441, rbx_441)
	ebx_192 = PHI(ebx_722, ebx_520, ebx_442, ebx_442)
	rbp_193 = PHI(rbp_748, rbp_499, rbp_414, rbp_414)
	rsi_194 = PHI(rsi_732, rsi_498, rsi_413, rsi_413)
	esi_195 = PHI(esi_731, esi_518, esi_433, esi_433)
	rdi_196 = PHI(rdi_697, rdi_495, rdi_410, rdi_410)
	rsp_197 = PHI(rsp_696, rsp_494, rsp_409, rsp_409)
	eax_198 = 0xFFFFFFFF
	rax_199 = DPB(rax_189, eax_198, 0) (alias)
	al_200 = (byte) eax_198 (alias)
// DataOut: eax fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D33D:
	edi_571 = dwLoc34
	call iswcntrl (retsize: 8; depth: 72)
		uses: al_511,C_570,CZ_508,dh_519,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,dwLoc34,eax_505,ebx_520,edi_571,edx_496,esi_518,fs_503,qwLoc08,qwLoc10,qwLoc18,qwLoc28_29,qwLoc30_360,r12_521,r12d_510,r13_500,r14_522,r14d_509,r15_523,r15d_497,rax_504,rbp_499,rbx_501,rcx_514,rdi_495,rdx_513,rsi_498,rsp_494,S_525,SCZO_502,SO_512,SZO_568,Z_569
		defs: al_589,C_585,CZ_586,dh_597,eax_583,ebx_598,edi_594,edx_574,esi_596,fs_581,r12_599,r12d_588,r13_578,r14_600,r14d_587,r15_601,r15d_575,rax_582,rbp_577,rbx_579,rcx_592,rdi_573,rdx_591,rsi_576,rsp_572,S_595,SCZO_580,SO_590,SZO_584,Z_593
	SZO_602 = cond(eax_583 & eax_583)
	Z_603 = SZO_602 (alias)
	C_604 = false
	branch (eax_583 & eax_583) != 0x00000000 l000000000040D2E3
	edi_605 = dwLoc34
	rdi_606 = DPB(rdi_573, edi_605, 0) (alias)
	call iswcntrl (retsize: 8; depth: 72)
		uses: al_589,C_604,CZ_586,dh_597,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,dwLoc34,eax_583,ebx_598,edi_605,edx_574,esi_596,fs_581,qwLoc08,qwLoc10,qwLoc18,qwLoc28_29,qwLoc30_360,r12_599,r12d_588,r13_578,r14_600,r14d_587,r15_601,r15d_575,rax_582,rbp_577,rbx_579,rcx_592,rdi_606,rdx_591,rsi_576,rsp_572,S_595,SCZO_580,SO_590,SZO_602,Z_603
		defs: al_624,C_620,CZ_621,dh_632,eax_618,ebx_633,edi_629,edx_609,esi_631,fs_616,r12_634,r12d_623,r13_613,r14_635,r14d_622,r15_636,r15d_610,rax_617,rbp_612,rbx_614,rcx_627,rdi_608,rdx_626,rsi_611,rsp_607,S_630,SCZO_615,SO_625,SZO_619,Z_628
	SZO_637 = cond(eax_618 & eax_618)
	Z_638 = SZO_637 (alias)
	C_639 = false
	branch (eax_618 & eax_618) != 0x00000000 l000000000040D2E3
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D34A:
	SCZO_640 = cond(r12d_623 - 0x7FFFFFFF)
	Z_641 = SCZO_640 (alias)
	branch r12d_623 == 0x7FFFFFFF l000000000040D3C0
	SCZO_642 = cond(r12d_623 - 0x7FFFFFFF)
	Z_643 = SCZO_642 (alias)
	branch r12d_623 == 0x7FFFFFFF l000000000040D3C0
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D3C0:
	qwLoc30_137 = PHI(qwLoc30, qwLoc30_360, qwLoc30_360)
	dh_138 = PHI(dh_753, dh_632, dh_519)
	S_139 = PHI(S_719, S_630, S_525)
	edi_140 = PHI(edi_718, edi_629, edi_516)
	rcx_141 = PHI(rcx_727, rcx_627, rcx_514)
	rdx_142 = PHI(rdx_752, rdx_626, rdx_513)
	SO_143 = PHI(SO_714, SO_625, SO_512)
	r12d_144 = PHI(r12d_712, r12d_623, r12d_510)
	r14d_145 = PHI(r14d_711, r14d_622, r14d_509)
	fs_146 = PHI(fs_705, fs_616, fs_503)
	r15d_147 = PHI(r15d_699, r15d_610, r15d_497)
	edx_148 = PHI(edx_765, edx_609, edx_649)
	CZ_149 = PHI(CZ_710, CZ_621, CZ_508)
	SZO_150 = PHI(SZO_766, SZO_637, SZO_651)
	Z_151 = PHI(Z_771, Z_643, Z_515)
	C_152 = PHI(C_767, C_639, C_526)
	r12_153 = PHI(r12_723, r12_634, r12_521)
	r13_154 = PHI(r13_702, r13_613, r13_500)
	r14_155 = PHI(r14_724, r14_635, r14_522)
	r15_156 = PHI(r15_725, r15_636, r15_523)
	rax_157 = PHI(rax_736, rax_617, rax_504)
	SCZO_158 = PHI(SCZO_770, SCZO_642, SCZO_650)
	rbx_159 = PHI(rbx_703, rbx_614, rbx_501)
	ebx_160 = PHI(ebx_722, ebx_633, ebx_520)
	rbp_161 = PHI(rbp_748, rbp_612, rbp_499)
	rsi_162 = PHI(rsi_732, rsi_611, rsi_498)
	esi_163 = PHI(esi_731, esi_631, esi_518)
	rdi_164 = PHI(rdi_697, rdi_608, rdi_495)
	rsp_165 = PHI(rsp_696, rsp_607, rsp_494)
	eax_166 = 0x7FFFFFFF
	rax_167 = DPB(rax_157, eax_166, 0) (alias)
	al_168 = (byte) eax_166 (alias)
// DataOut: eax fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D353:
	r12d_644 = r12d_623 + 0x00000001
	r12d_645 = r12d_644 + 0x00000001
	r12_646 = DPB(r12_634, r12d_645, 0) (alias)
	SCZO_647 = cond(r12d_645)
// DataOut: eax fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2E3:
	rbx_527 = PHI(rbx_614, rbx_614, rbx_501)
	rbp_528 = PHI(rbp_612, rbp_612, rbp_499)
	rdi_529 = fp - 0x0000000000000030
	edi_530 = (word32) rdi_529 (alias)
	rbp_531 = rbp_528 + rbx_527
	SCZO_532 = cond(rbp_531)
	call mbsinit (retsize: 8; depth: 72)
		uses: al_511,C_526,CZ_508,dh_519,dwLoc04_4,dwLoc08_11,dwLoc0C_14,dwLoc10_18,dwLoc14_20,dwLoc18_24,dwLoc34,eax_505,ebx_520,edi_530,edx_496,esi_518,fs_503,qwLoc08,qwLoc10,qwLoc18,qwLoc28_29,qwLoc30_360,r12_521,r12d_510,r13_500,r14_522,r14d_509,r15_523,r15d_497,rax_504,rbp_531,rbx_527,rcx_514,rdi_529,rdx_513,rsi_498,rsp_494,S_525,SCZO_532,SO_512,SZO_524,Z_515
		defs: al_550,C_546,CZ_547,dh_558,eax_544,ebx_559,edi_555,edx_535,esi_557,fs_542,r12_560,r12d_549,r13_539,r14_561,r14d_548,r15_562,r15d_536,rax_543,rbp_538,rbx_540,rcx_553,rdi_534,rdx_552,rsi_537,rsp_533,S_556,SCZO_541,SO_551,SZO_545,Z_554
	SZO_563 = cond(eax_544 & eax_544)
	Z_564 = SZO_563 (alias)
	C_565 = false
	branch (eax_544 & eax_544) != 0x00000000 l000000000040D2A3
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D2A3:
	qwLoc30_287 = PHI(qwLoc30_318, qwLoc30_360)
	dh_288 = PHI(dh_319, dh_558)
	S_289 = PHI(S_320, S_556)
	edi_290 = PHI(edi_321, edi_555)
	rcx_291 = PHI(rcx_322, rcx_553)
	rdx_292 = PHI(rdx_323, rdx_552)
	SO_293 = PHI(SO_324, SO_551)
	r12d_294 = PHI(r12d_349, r12d_549)
	r14d_295 = PHI(r14d_326, r14d_548)
	fs_296 = PHI(fs_327, fs_542)
	r15d_297 = PHI(r15d_328, r15d_536)
	edx_298 = PHI(edx_329, edx_535)
	SZO_299 = PHI(SZO_331, SZO_563)
	Z_300 = PHI(Z_332, Z_564)
	C_301 = PHI(C_333, C_565)
	r12_302 = PHI(r12_350, r12_560)
	r13_303 = PHI(r13_335, r13_539)
	r14_304 = PHI(r14_336, r14_561)
	r15_305 = PHI(r15_337, r15_562)
	rax_306 = PHI(rax_338, rax_543)
	eax_307 = PHI(eax_339, eax_544)
	al_308 = PHI(al_340, al_550)
	rbx_309 = PHI(rbx_341, rbx_540)
	ebx_310 = PHI(ebx_342, ebx_559)
	rbp_311 = PHI(rbp_348, rbp_538)
	rsi_312 = PHI(rsi_344, rsi_537)
	esi_313 = PHI(esi_345, esi_557)
	rdi_314 = PHI(rdi_346, rdi_534)
	rsp_315 = PHI(rsp_347, rsp_533)
	SCZO_316 = cond(r13_303 - rbp_311)
	CZ_317 = SCZO_316 (alias)
	branch r13_303 <=u rbp_311 l000000000040D401
// DataOut: fs r11 r11d r12 r12b r12d r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64) Local -0034(32)

l000000000040D401:
	qwLoc30_255 = PHI(qwLoc30_287, qwLoc30_360)
	dh_256 = PHI(dh_288, dh_434)
	S_257 = PHI(S_289, S_432)
	edi_258 = PHI(edi_290, edi_431)
	rcx_259 = PHI(rcx_291, rcx_429)
	rdx_260 = PHI(rdx_292, rdx_428)
	SO_261 = PHI(SO_293, SO_427)
	r12d_262 = PHI(r12d_294, r12d_663)
	r14d_263 = PHI(r14d_295, r14d_424)
	fs_264 = PHI(fs_296, fs_418)
	r15d_265 = PHI(r15d_297, r15d_412)
	edx_266 = PHI(edx_298, edx_411)
	CZ_267 = PHI(CZ_317, CZ_666)
	SZO_268 = PHI(SZO_299, SZO_659)
	Z_269 = PHI(Z_300, Z_660)
	C_270 = PHI(C_301, C_661)
	r12_271 = PHI(r12_302, r12_664)
	r13_272 = PHI(r13_303, r13_415)
	r14_273 = PHI(r14_304, r14_437)
	r15_274 = PHI(r15_305, r15_438)
	rax_275 = PHI(rax_306, rax_419)
	SCZO_276 = PHI(SCZO_316, SCZO_665)
	rbx_277 = PHI(rbx_309, rbx_441)
	ebx_278 = PHI(ebx_310, ebx_442)
	rbp_279 = PHI(rbp_311, rbp_662)
	rsi_280 = PHI(rsi_312, rsi_413)
	esi_281 = PHI(esi_313, esi_433)
	rdi_282 = PHI(rdi_314, rdi_410)
	rsp_283 = PHI(rsp_315, rsp_409)
	eax_284 = r12d_262
	rax_285 = DPB(rax_275, eax_284, 0) (alias)
	al_286 = (byte) eax_284 (alias)
// DataOut: eax fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:edx & 0x00000001 r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> edx:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32) Local -0028(64)

l000000000040D3C5:
	qwLoc30_67 = PHI(qwLoc30_137, qwLoc30_255, qwLoc30_169, qwLoc30, qwLoc30)
	dh_68 = PHI(dh_138, dh_256, dh_170, dh_753, dh_60)
	S_69 = PHI(S_139, S_257, S_171, S_719, S_58)
	edi_70 = PHI(edi_140, edi_258, edi_172, edi_718, edi_57)
	rcx_71 = PHI(rcx_141, rcx_259, rcx_173, rcx_727, rcx_55)
	rdx_72 = PHI(rdx_142, rdx_260, rdx_174, rdx_752, rdx_54)
	SO_73 = PHI(SO_143, SO_261, SO_175, SO_714, SO_53)
	r12d_74 = PHI(r12d_144, r12d_262, r12d_176, r12d_712, r12d_51)
	r14d_75 = PHI(r14d_145, r14d_263, r14d_177, r14d_711, r14d_50)
	fs_76 = PHI(fs_146, fs_264, fs_178, fs_705, fs_44)
	r15d_77 = PHI(r15d_147, r15d_265, r15d_179, r15d_699, r15d_38)
	edx_78 = PHI(edx_148, edx_266, edx_180, edx_757, edx_37)
	CZ_79 = PHI(CZ_149, CZ_267, CZ_181, CZ_710, CZ_66)
	r12_80 = PHI(r12_153, r12_271, r12_185, r12_723, r12_62)
	r13_81 = PHI(r13_154, r13_272, r13_186, r13_702, r13_41)
	r14_82 = PHI(r14_155, r14_273, r14_187, r14_724, r14_63)
	r15_83 = PHI(r15_156, r15_274, r15_188, r15_725, r15_64)
	rax_84 = PHI(rax_167, rax_285, rax_199, rax_760, rax_203)
	eax_85 = PHI(eax_166, eax_284, eax_198, eax_761, eax_202)
	al_86 = PHI(al_168, al_286, al_200, al_762, al_204)
	SCZO_87 = PHI(SCZO_158, SCZO_276, SCZO_190, SCZO_763, SCZO_201)
	rbx_88 = PHI(rbx_159, rbx_277, rbx_191, rbx_703, rbx_42)
	ebx_89 = PHI(ebx_160, ebx_278, ebx_192, ebx_722, ebx_61)
	rbp_90 = PHI(rbp_161, rbp_279, rbp_193, rbp_748, rbp_40)
	rdi_91 = PHI(rdi_164, rdi_282, rdi_196, rdi_697, rdi_36)
	rsp_92 = PHI(rsp_165, rsp_283, rsp_197, rsp_696, rsp_35)
	rsi_93 = qwLoc28_29
	rsi_94 = rsi_93 ^ Mem0[fs_76:0x00000028:word64]
	esi_95 = (word32) rsi_94 (alias)
	SZO_96 = cond(rsi_94)
	Z_97 = SZO_96 (alias)
	C_98 = false
	branch rsi_94 != 0x0000000000000000 l000000000040D40A
// DataOut: eax esi fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> esi:edx & 0x00000002 rcx:<invalid> edx:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rdi:<invalid> rsi:<invalid> rbx:<invalid> edi:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0018(32)

l000000000040D40A:
	__stack_chk_fail()
// DataOut: esi fs r11 r11d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> edi:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64)

l000000000040D40A_thunk_fn000000000040D420:
	rax = fn000000000040D420(rax, esi, rdi, fs, qwLoc48, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	eax = (word32) rax (alias)
	al = (byte) rax (alias)
	return rax
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> edi:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D3D5:
	rsp_99 = fp - 0x0000000000000018
	SCZO_100 = cond(fp - 0x0000000000000018)
	rbx_102 = qwLoc18
	ebx_103 = (word32) rbx_102 (alias)
	rsp_104 = fp - 0x0000000000000010
	rbp_106 = qwLoc10
	rsp_107 = fp - 0x0000000000000008
	rsp_109 = qwLoc08
	rsp_110 = rsp_109 + 0x0000000000000008
	rbp_111 = Mem0[rsp_110:word64]
	rsp_112 = rsp_110 + 0x0000000000000008
	rsi_113 = Mem0[rsp_112:word64]
	esi_114 = (word32) rsi_113 (alias)
	rsp_115 = rsp_112 + 0x0000000000000008
	rdi_116 = Mem0[rsp_115:word64]
	rsp_117 = rsp_115 + 0x0000000000000008
	return rax_84
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r15d:<invalid> r13:rdi + rsi rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> r14d:edx & 0x00000002 r12d:<invalid> rdx:<invalid> rdi:<invalid> rbx:<invalid> edi:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040D240_exit:
	r12_118 = PHI(r12_80, r12)
	r13_119 = PHI(r13_81, r13)
	r14_120 = PHI(r14_82, r14)
	r15_121 = PHI(r15_83, r15)
	rax_122 = PHI(rax_84, rax)
	eax_123 = PHI(eax_85, eax)
	al_124 = PHI(al_86, al)
	ebx_125 = PHI(ebx_103, ebx)
	rbp_126 = PHI(rbp_111, rbp)
	rsi_127 = PHI(rsi_113, rsi)
	rsp_128 = PHI(rsp_117, rsp)
	use ebx_125 (=> ebxOut)
	use rsp_128 (=> rspOut)
	use rbp_126 (=> rbpOut)
	use rsi_127 (=> rsiOut)
	use r12_118 (=> r12Out)
	use r13_119 (=> r13Out)
	use r14_120 (=> r14Out)
	use r15_121 (=> r15Out)
// DataOut: eax ebp ebx r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15d:<invalid> r13:<invalid> rbp:<invalid> rax:<invalid> eax:<invalid> rsi:<invalid> rbx:<invalid> rdi:<invalid> ebp:<invalid> edx:<invalid> esi:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> rdx:<invalid> edi:<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040D420(word64 rax, word32 esi, word64 rdi, selector fs, word64 qwArg00, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs rax rdi
// LiveOut: eax ebp ebx r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn000000000040D420_entry:
// DataOut: esi fs r11 r11d r8 r9 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D420:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rbp
	ebp = esi
	rsp = fp - 0x0000000000000008
	dwLoc08 = rbx
	qwLoc08 = DPB(qwLoc08, dwLoc08, 0) (alias)
	rbx = rdi
	rsp = fp - 0x0000000000000010
	rax = DPB(rax, strlen(rdi), 0)
	rsp = fp - 0x0000000000000008
	SCZO = cond(fp - 0x0000000000000008)
	rdi = rbx
	edi = (word32) rdi (alias)
	edx = ebp
	rdx = DPB(rdx, edx, 0) (alias)
	dh = SLICE(edx, byte, 8) (alias)
	rbx = qwLoc08
	rsp = fp
	rbp = qwArg00
	rsp = fp + 0x0000000000000008
	rsi = rax
	esi = (word32) rsi (alias)
// DataOut: edx fs r11 r11d r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D43B_thunk_fn000000000040D240:
	rax = fn000000000040D240(edx, rsi, rdi, fs, out ebx, out rsp, out rbp, out rsi, out r12, out r13, out r14, out r15)
	eax = (word32) rax (alias)
	al = (byte) rax (alias)
	return rax
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d r8 r9 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000008 ebp:<invalid> rbx:rbx rax:DPB(rax, <invalid>, 0) rdi:rdi edx:esi rbp:SLICE(rbp, word64, 32) rsi:DPB(rax, <invalid>, 0) -8(fp):rbx -4(fp):rbp

fn000000000040D420_exit:
	use ebx (=> ebxOut)
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use rsi (=> rsiOut)
	use r12 (=> r12Out)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax ebp ebx r12 r12b r13 r13d r14 r14b r14d r15 r15b r15d rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ebp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> edx:<invalid> rbp:<invalid> rsi:<invalid> r15d:<invalid> r13:<invalid> eax:<invalid> esi:<invalid> rcx:<invalid> r14d:<invalid> r12d:<invalid> rdx:<invalid> edi:<invalid> -8(fp):rbx -4(fp):rbp



word32 fn000000000040D450(word32 eax, word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15, ptr64 & rspOut, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r11 r15 r8 rdi rsi
// LiveOut: eax r13 r14 r15 rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D450_entry:
// DataOut: eax r11 r13 r14 r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D450:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v6 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rbp = rcx
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rbx = rdi
	rsp = fp - 0x0000000000000050
	SCZO = cond(rsi - 0x0000000000000002)
	Z = SCZO (alias)
	SZO = SCZO (alias)
	CZ = SCZO (alias)
	C = SCZO (alias)
	qwLoc50 = rsi
	qwLoc38 = rdx
	branch Test(UGT,CZ) l000000000040D490
// DataOut: eax r11 r13 r14 r15 r8 rdi rsp
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0050(64)

l000000000040D490:
	rsi = qwLoc50
	rdx = qwLoc38
	rax = rsi
	rax = rax >>u 0x0000000000000001
	r15 = rax
	qwLoc48 = rax
	rax = rdi + rax * 0x0000000000000008
	rsi = rsi - r15
	SCZO = cond(rsi)
	rdi = rax
	qwLoc28 = rax
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(r15 - 0x0000000000000001)
	branch Test(EQ,Z) l000000000040D570
// DataOut: r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D570:
	r12 = Mem0[r11:word64]
	rax = Mem0[rsp + 0x0000000000000018:word64]
	Mem0[r8:word64] = r12
// DataOut: r11 r12 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D4C5:
	rax = Mem0[rsp:word64]
	r15 = Mem0[rsp + 0x0000000000000018:word64]
	rcx = rbp
	rsi = Mem0[rsp + 0x0000000000000008:word64]
	rax = rax >>u 0x0000000000000002
	rdx = r15
	r13 = rbx + rax * 0x0000000000000008
	r14 = rax
	rsi = rsi - rax
	SCZO = cond(rsi)
	Mem0[rsp + 0x0000000000000020:word64] = rax
	rdi = r13
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	rdx = r15
	rcx = rbp
	rsi = r14
	rdi = rbx
	r15 = r15 + 0x0000000000000008
	eax = fn000000000040D450(eax, rsi, rdi, r8, r11, r15, out rsp, out r13, out r14, out r15)
	rsp = rsp + 0x0000000000000008
	r12 = Mem0[r11:word64]
	r13 = Mem0[r13 + 0x0000000000000000:word64]
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):rdi + (rsi >>u 0x0000000000000001) * 0x0000000000000008 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D53B:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4; depth: 4)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D520
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D520:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - r14)
	Mem0[r15 - 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D634
// DataOut: eax r11 r12 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D533:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D547:
	v25 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v25
	Mem0[r15 - 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000020:word64] - rax)
	branch Test(EQ,Z) l000000000040D625
// DataOut: eax r11 r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D625:
	rax = Mem0[rsp + 0x0000000000000008:word64]
	Mem0[rsp + 0x0000000000000010:word64] = r14
	Mem0[rsp + 0x0000000000000020:word64] = rax
// DataOut: r11 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D634:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000020:word64]
	rdi = r15
	rdx = rdx - rax
	rsi = rbx + rax * 0x0000000000000008
	rdx = rdx << 0x0000000000000003
	SCZO = cond(rdx)
	rax = memcpy(rdi, rsi, rdx)
	rax = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[r8:word64]
// DataOut: r11 r12 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D57B:
	rax = Mem0[rsp + 0x0000000000000028:word64]
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	edi = 0x00000001
	Mem0[rsp + 0x0000000000000010:word64] = 0x0000000000000000
	r13 = Mem0[r8:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5B7:
	rsi = r13
	rdi = r12
	call ebp (retsize: 4; depth: 4)
	SZO = cond(eax & eax)
	C = false
	branch Test(GT,SZO) l000000000040D5A0
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5A0:
	r14 = r14 + 0x0000000000000001
	SCZO = cond(Mem0[rsp:word64] - r14)
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r13
	branch Test(EQ,Z) l000000000040D5F0
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5F0:
	rax = Mem0[rsp + 0x0000000000000010:word64]
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r15 = Mem0[rsp + 0x0000000000000008:word64]
	rsp = rsp + 0x0000000000000038
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	r15 = r15 - rax
	SCZO = cond(r15)
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdx = 0x00000000 + r15 * 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D620_thunk_fn00000000004025C0:
	fn00000000004025C0()
	return eax
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5AF:
	r13 = Mem0[rbx + r14 * 0x0000000000000008:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5C3:
	v26 = Mem0[rsp + 0x0000000000000010:word64] + 0x0000000000000001
	Mem0[rsp + 0x0000000000000010:word64] = v26
	Mem0[rbx - 0x0000000000000008 + r15 * 0x0000000000000008:word64] = r12
	rax = Mem0[rsp + 0x0000000000000010:word64]
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - rax)
	branch Test(EQ,Z) l000000000040D479
// DataOut: eax r11 r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5DE:
	rcx = Mem0[rsp + 0x0000000000000018:word64]
	r12 = Mem0[rcx + rax * 0x0000000000000008:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D5B3:
	r15 = r15 + 0x0000000000000001
	SCZO = cond(r15)
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> r14:<invalid> edi:<invalid> r13:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D561:
	r12 = Mem0[rbx + rax * 0x0000000000000008:word64]
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D537:
	r15 = r15 + 0x0000000000000008
	SCZO = cond(r15)
// DataOut: eax r11 r12 r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> r14:<invalid> r12:<invalid> edi:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):rdx -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D473:
	branch Test(EQ,Z) l000000000040D660
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040D660:
	r13 = Mem0[r15 + 0x0000000000000008:word64]
	r12 = Mem0[r15:word64]
	rsi = r13
	rdi = r12
	call ecx (retsize: 4; depth: 84)
	SZO = cond(eax & eax)
	C = false
	branch Test(LE,SZO) l000000000040D479
// DataOut: eax r11 r12 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000040D677:
	Mem0[r11:word64] = r13
	Mem0[r11 + 0x0000000000000008:word64] = r12
	rsp = fp - 0x0000000000000018
	SCZO = cond(fp - 0x0000000000000018)
	rbx = qwLoc18
	rsp = fp - 0x0000000000000010
	rbp = qwLoc10
	rsp = fp - 0x0000000000000008
	rsp = qwLoc08
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return eax
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000050 rbp:rcx rbx:rdi r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> -80(fp):rsi -56(fp):rdx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D479:
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return eax
// DataOut: eax r11 r13 r14 r15 r8 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> r13:<invalid> r12:<invalid> rsi:<invalid> rdi:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> edi:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040D450_exit:
	use rsp (=> rspOut)
	use r13 (=> r13Out)
	use r14 (=> r14Out)
	use r15 (=> r15Out)
// DataOut: eax r13 r14 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rbx:<invalid> rsi:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> rdx:<invalid> rax:<invalid> r15:<invalid> r14:<invalid> edi:<invalid> rcx:<invalid> -80(fp):rsi -72(fp):rsi >>u 0x0000000000000001 -56(fp):<invalid> -40(fp):<invalid> -24(fp):<invalid> -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040D690(word64 rsi, word64 rdi, word64 r8, word64 r11, word64 r15)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi r11 r15 r8 rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040D690_entry:
// DataOut: edi r11 r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D690:
	word32 eax_5 = (word32) (rdi + rsi * 0x0000000000000008)
// DataOut: eax r11 r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D697_thunk_fn000000000040D450:
	word64 rsp_12
	word64 r13_13
	word64 r14_14
	word64 r15_15
	fn000000000040D450(eax_5, rsi, rdi, r8, r11, r15, out rsp_12, out r13_13, out r14_14, out r15_15)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:rdi + rsi * 0x0000000000000008 rcx:rdx rdx:rdi + rsi * 0x0000000000000008

fn000000000040D690_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rax:<invalid> rcx:<invalid> rdx:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> r13:<invalid> r12:<invalid> rbx:<invalid> r15:<invalid> r14:<invalid> edi:<invalid>



void fn000000000040D6A0(word64 rax, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D6A0_entry:
// DataOut: rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D6A0:
	word64 rbx_120 = rdi
	branch rdi == 0x0000000000000000 l000000000040D713
// DataOut: rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D713:
	word64 rax_162 = DPB(rax, fwrite(DPB(rdi, 0x00415FA0, 0), DPB(rsi, 0x00000001, 0), DPB(rdx, 0x00000037, 0), Mem0[0x000000000061A650:word64]), 0)
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

l000000000040D6A9:
	word64 rax_13 = strrchr(rdi, DPB(rsi, 0x0000002F, 0))
	branch rax_13 == 0x0000000000000000 l000000000040D703
// DataOut: rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6B8:
	word64 rcx_50 = rax_13 + 0x0000000000000001 - rdi
	byte SCZO_51 = cond(rcx_50 - 0x0000000000000006)
	byte C_111 = SCZO_51
	byte Z_144 = SCZO_51
	byte CZ_100 = SCZO_51
	branch rcx_50 <= 0x0000000000000006 l000000000040D703
// DataOut: rax rbx rdx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:0x0000002F rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6C8:
	word64 rsi_146 = rax_13 - 0x0000000000000006
	word64 rdi_149 = DPB(rdi, 0x00415FD8, 0)
	word64 rcx_151 = DPB(rcx_50, 0x00000007, 0)
// DataOut: rax rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:0x0000002F rax:<invalid> rdx:<invalid> rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6D6:
	branch rcx_151 == 0x0000000000000000 l000000000040D6D8
// DataOut: rax rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6D6_1:
	byte SCZO_141 = cond(Mem0[rsi_163:byte] - Mem0[rdi_149:byte])
	C_111 = SCZO_141 (alias)
	Z_144 = SCZO_141 (alias)
	CZ_100 = SCZO_141 (alias)
	rsi_146 = rsi_163 + 0x0000000000000001
	rdi_149 = rdi_149 + 0x0000000000000001
	rcx_151 = rcx_151 - 0x0000000000000001
	word64 rsi_163 = rsi_146
	branch Mem0[rsi_163:byte] != Mem0[rdi_149:byte] l000000000040D6D6
// DataOut: rax rbx rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6D8:
	branch Z_144 l000000000040D703
// DataOut: rax rbx rdx
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6DA:
	word64 rcx_105 = DPB(rcx_151, 0x00000003, 0)
	word64 rsi_101 = rax_13 + 0x0000000000000001
	word64 rdi_103 = DPB(rdi_149, 0x00415FE0, 0)
// DataOut: rax rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6E7:
	branch rcx_105 == 0x0000000000000000 l000000000040D6E9
// DataOut: rax rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6E7_2:
	byte SCZO_128 = cond(Mem0[rsi_165:byte] - Mem0[rdi_166:byte])
	C_111 = SCZO_128 (alias)
	CZ_100 = SCZO_128 (alias)
	rsi_101 = rsi_165 + 0x0000000000000001
	rdi_103 = rdi_166 + 0x0000000000000001
	rcx_105 = rcx_105 - 0x0000000000000001
	word64 rsi_165 = rsi_101
	word64 rdi_166 = rdi_103
	branch Mem0[rsi_165:byte] != Mem0[rdi_166:byte] l000000000040D6E7
// DataOut: rax rcx rdi rdx rsi
// DataOut (flags): CZ
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6E9:
	rbx_120 = rax_13 + 0x0000000000000001
	branch CZ_100 != C_111 l000000000040D703
// DataOut: rax rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D6F8:
	Mem126[0x000000000061A600:word64] = rax_13 + 0x0000000000000004
	rbx_120 = rax_13 + 0x0000000000000004
// DataOut: rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx
// LocalsOut: fp(64)

l000000000040D703:
	Mem42[0x000000000061B200:word64] = rbx_120
	Mem43[0x000000000061A648:word64] = rbx_120
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx

fn000000000040D6A0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx esi:<invalid> rax:<invalid> rdx:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> ecx:<invalid> rdi:<invalid> sil:Test(UGT,CZ) cl:Test(ULT,C) -4(fp):rbx



void fn000000000040D740(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx rax rcx rdi rdx
// Preserved: rsp
fn000000000040D740_entry:
// DataOut: ebx esi fs r11 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D740:
	word64 rax_5 = DPB(rax, 0x00000000, 0)
	word64 rcx_10 = DPB(rcx, 0x00000007, 0)
	word64 rdi_11 = fp - 0x0000000000000048
// DataOut: ebx esi fs r11 rax rbp rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D754:
	branch rcx_10 == 0x0000000000000000 l000000000040D757
// DataOut: ebx esi fs r11 rax rbp rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 eax:0x00000000 rdx:rdi ecx:<invalid> rdi:<invalid> rcx:<invalid> -72(fp):rax
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D757:
	branch esi == 0x00000008 l000000000040D7A1
// DataOut: ebx esi fs r11 rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 eax:0x00000000 rdx:rdi ecx:<invalid> rdi:<invalid> rcx:<invalid> -72(fp):rax
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)

l000000000040D7A1:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 eax:0x00000000 rdx:rdi ecx:<invalid> rdi:<invalid> rcx:<invalid> -72(fp):rax

l000000000040D759:
	Mem28[rdi:word64] = DPB(qwLoc48, esi, 0)
	Mem31[rdi + 0x0000000000000008:word64] = qwLoc40
	Mem34[rdi + 0x0000000000000010:word64] = qwLoc38
	Mem37[rdi + 0x0000000000000018:word64] = qwLoc30
	Mem40[rdi + 0x0000000000000020:word64] = qwLoc28
	Mem43[rdi + 0x0000000000000028:word64] = qwLoc20
	Mem46[rdi + 0x0000000000000030:word64] = qwLoc18
	return
// DataOut: ebx fs r11 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000048 eax:0x00000000 rdx:rdi ecx:<invalid> rdi:<invalid> rcx:<invalid> -72(fp):rax

fn000000000040D740_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> rdx:rdi ecx:<invalid> rdi:<invalid> rax:<invalid> rcx:<invalid> -72(fp):esi

l000000000040D754_1:
	Mem20[rdi_11:word64] = rax_5
	rdi_11 = rdi_11 + 0x0000000000000008
	rcx_10 = rcx_10 - 0x0000000000000001
// DataOut: ebx esi fs r11 rax rbp rcx rdi rdx
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000048 eax:0x00000000 rdx:rdi ecx:<invalid> rdi:<invalid> rcx:<invalid> -72(fp):rax
// LocalsOut: fp(64) Local -0018(64) Local -0020(64) Local -0028(64) Local -0030(64) Local -0038(64) Local -0040(64)



void fn000000000040D7B0(word32 esi, word64 rdi, word64 r8, word64 r13, word64 r15, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi fs r13 r15 r8 rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040D7B0_entry:
// DataOut: esi fs r13 r15 r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D7B0:
	word64 r12_14 = DPB(r12, esi, 0)
	word64 rax_27 = dcgettext(DPB(rdi, 0x00000000, 0), rdi, DPB(rdx, 0x00000005, 0))
	branch rax_27 == rdi l000000000040D7E8
// DataOut: fs r12 r13 r15 r8 rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040D7E8:
	word64 rsp_60
	word64 rbp_61
	word32 r12d_62
	word64 rax_63 = fn0000000000411900(rdi, rdi, r8, r12_14, r13, r15, fs, out rsp_60, out rbp_61, out r12d_62)
	byte dl_68 = (byte) ((word32) Mem0[rax_63:byte] & 0xFFFFFFDF)
	branch dl_68 != 0x55 l000000000040D850
// DataOut: dl r12d rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000018 edx:0x00000005 r12d:esi rsi:rdi rbp:rdi edi:0x00000000 rax:<invalid> rbx:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D850:
	branch dl_68 != 0x47 l000000000040D838
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D855:
	branch (byte) ((word32) Mem0[rax_63 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x42 l000000000040D838
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D861:
	branch Mem0[rax_63 + 0x0000000000000002:byte] != 0x31 l000000000040D838
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D867:
	branch Mem0[rax_63 + 0x0000000000000003:byte] != 0x38 l000000000040D838
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D86D:
	branch Mem0[rax_63 + 0x0000000000000004:byte] != 0x30 l000000000040D838
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D873:
	branch Mem0[rax_63 + 0x0000000000000005:byte] != 0x33 l000000000040D838
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D879:
	branch Mem0[rax_63 + 0x0000000000000006:byte] != 0x30 l000000000040D838
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D87F:
	branch Mem0[rax_63 + 0x0000000000000007:byte] != 0x00 l000000000040D838
// DataOut: r12d rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D885:
	branch Mem0[rbp_61:byte] == 0x60 l000000000040D89B
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D897_1:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> r13:<invalid> eax:0x00415FE8 ebx:0x00415FED r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:0xE8 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D89B:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> r13:<invalid> eax:0x00415FE8 ebx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:0xE8 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D7F8:
	branch (byte) ((word32) Mem0[rax_63 + 0x0000000000000001:byte] & 0xFFFFFFDF) != 0x54 l000000000040D838
// DataOut: r12d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D804:
	branch (byte) ((word32) Mem0[rax_63 + 0x0000000000000002:byte] & 0xFFFFFFDF) != 0x46 l000000000040D838
// DataOut: r12d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D810:
	branch Mem0[rax_63 + 0x0000000000000003:byte] != 0x2D l000000000040D838
// DataOut: r12d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D816:
	branch Mem0[rax_63 + 0x0000000000000004:byte] != 0x38 l000000000040D838
// DataOut: r12d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D81C:
	branch Mem0[rax_63 + 0x0000000000000005:byte] != 0x00 l000000000040D838
// DataOut: r12d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D838:
	branch r12d_62 == 0x00000007 l000000000040D84A
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D846_1:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> ebx:0x00415FEB eax:0x00416DEA r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:0xEA -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D84A:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> ebx:<invalid> eax:0x00416DEA r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:0xEA -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D822:
	branch Mem0[rax_27:byte] != 0x60 l000000000040D833
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D82F_1:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:0x00415FF1 ebx:0x00415FE4 r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:0xF1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D833:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> eax:0x00415FF1 ebx:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:0xF1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000040D7D7:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> ebx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r13:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

fn000000000040D7B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> r12d:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> rax:<invalid> rbx:<invalid> ebx:<invalid> eax:<invalid> r14:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> r13:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> esi:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word64 fn000000000040D8A0(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word32 r8d, word32 r9d, selector fs, word64 qwArg20, word64 qwArg28, word64 qwArg30, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r8d r9b r9d rcx rdi rdx rsi
// LiveOut: ebp r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rcx rdx
fn000000000040D8A0_entry:
// DataOut: fs r12 r12b r12d r8d r9b rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040D8A0:
	word64 rdi_53
	word64 rcx_55
	word32 r14d_57
	word32 r8d_58
	word64 rbx_62
	word32 ebx_63
	word32 r9d_64
	byte SCZO_65
	word32 eax_68
	byte SZO_69
	byte C_70
	byte al_71
	byte CZ_72
	word64 r11_73
	word32 esi_74
	byte Z_75
	word64 r9_76
	word32 ebp_78
	word64 r8_79
	byte cl_80
	word32 r12d_82
	byte r12b_83
	word32 r11d_84
	word32 edx_85
	word16 dx_86
	byte dl_87
	word32 edi_88
	byte r11b_89
	byte dil_90
	byte sil_91
	word32 esp_92
	word64 r10_93
	word64 r13_122
	word64 rax_1129
	selector fs_1103
	word64 r12_1010
	word64 r14_1119
	word64 r15_1120
	word32 ecx_1003
	word64 rdx_1143
	word64 rbp_1016
	word64 rsi_1018
	word64 rsp_1140
	call __ctype_get_mb_cur_max (retsize: 8; depth: 232)
		uses: C_51,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_21,dwLoc14_23,dwLoc18_26,dwLoc50_36,dwLocAC_35,eax_48,ebx_28,esp_30,fs,qwLoc28_47,qwLoc70_40,qwLoc78_43,qwLoc88_37,qwLocB8_33,qwLocC0_34,r13_18,r14_13,r14d_11,r15_6,r8d,r9d,rax_49,rbp,rbx,rcx,rdi,rdx,rsi,rsp_29,SZO_50
		defs: al_71,C_70,cl_80,CZ_72,dil_90,dl_87,dx_86,eax_68,ebp_78,ebx_63,ecx_81,edi_88,edx_85,esi_74,esp_92,fs_67,r10_93,r11_73,r11b_89,r11d_84,r12_94,r12b_83,r12d_82,r13_60,r14_77,r14d_57,r15_54,r8_79,r8d_58,r9_76,r9d_64,rax_66,rbp_59,rbx_62,rcx_55,rdi_53,rdx_61,rsi_56,rsp_52,SCZO_65,sil_91,SZO_69,Z_75
	byte al_99 = (byte) (ebx_63 >>u 0x00000001 & 0x00000001)
	branch r14d_57 >u 0x00000008 l000000000040E280
// DataOut: fs r12 r12b r12d r13 r14 r14d r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AD(0) Local -00B8(64) Local -00C0(64)

l000000000040E280:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r9d >>u 0x00000001 & 0x00000001 -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040D92D:
	word64 rbx_1015
	word64 r11_104 = rsi
	word32 r11d_1007 = (word32) rsi
	byte r11b_1008 = (byte) rsi
	switch (r14d_57) { l000000000040D940 l000000000040E070 l000000000040DF10 }
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r9d >>u 0x00000001 & 0x00000001 -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00AD(0) Local -00B8(64)

l000000000040DF10:
	branch al_99 != 0x00 l000000000040E408
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r8d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E408:
	rbx_1015 = DPB(rbx_62, 0x00000000, 0) (alias)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r8d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF1B:
	branch rsi == 0x0000000000000000 l000000000040E2D1
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r8d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0) Local -00B8(64)

l000000000040E2D1:
	rbx_1015 = DPB(rbx_62, 0x00000001, 0) (alias)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r8d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF24:
	Mem1784[rdi:byte] = 0x27
	rax_1129 = rdi
	rbx_1015 = DPB(rbx_62, 0x00000001, 0) (alias)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r8d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E070:
	rbx_1015 = DPB(rbx_62, 0x00000000, 0) (alias)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r8d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D940:
	r14_1119 = DPB(r14_1119, 0x00000000, 0) (alias)
	rbx_1015 = DPB(rbx_62, 0x00000000, 0) (alias)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000E0 r15:rcx r14d:r8d r13:rdx ebx:r9d rax:<invalid> eax:r8d r11:rsi -192(fp):rsi -184(fp):rdi -173(fp):al -172(fp):r8d -136(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -80(fp):r9d -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D960:
	Mem155[rsp_1140 + 0x0000000000000038:byte] = (byte) ((word32) Mem0[rsp_1140 + 0x0000000000000033:byte] ^ 0x00000001)
	Mem161[rsp_1140 + 0x0000000000000095:byte] = (byte) ((word32) Mem155[rsp_1140 + 0x0000000000000020:byte] ^ 0x00000001)
	word64 r9_1115
	*r9Out = r14_1119
	rbp_1016 = DPB(rbp_1016, 0x00000000, 0) (alias)
	*r14Out = r11_104
	word64 r8_1114
	*r8Out = r13_122
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:0x00000001 r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> rbx:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:0x01 -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D986:
	byte al_1741 = rbp_1016 != r15_1120
	word64 rax_1667 = DPB(rax_1129, al_1741, 0)
	branch r15_1120 == 0xFFFFFFFFFFFFFFFF l000000000040DB76
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D996:
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9A0:
	branch al_1741 == 0x00 l000000000040DB86
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rbx:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9A8:
	word64 r13_1672
	byte cl_538 = r9_1115 != 0x0000000000000000
	ecx_1003 = DPB(ecx_1003, cl_538, 0) (alias)
	branch r9_1115 == 0x0000000000000000 l000000000040E0A0
// DataOut: ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9B4:
	branch Mem161[rsp_1140 + 0x0000000000000020:byte] == 0x00 l000000000040E0A0
// DataOut: ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) cl:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9BF:
	rax_1667 = rbp_1016 + r9_1115
	branch r15_1120 <u rax_1667 l000000000040E0A0
// DataOut: eax ecx fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) cl:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0A0:
	r13_1672 = r8_1114 + rbp_1016
	r11d_1007 = 0x00000000
	r11b_1008 = 0x00 (alias)
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040D9CD:
	rsi_1018 = Mem161[rsp_1140 + 0x0000000000000060:word64]
	Mem1688[rsp_1140 + 0x0000000000000050:word32] = ecx_1003
	Mem1689[rsp_1140 + 0x0000000000000048:word64] = r8_1114
	Mem1691[rsp_1140 + 0x0000000000000040:word64] = r9_1115
	r13_1672 = r8_1114 + rbp_1016
	rax_1667 = DPB(rax_1667, memcmp(r13_1672, rsi_1018, r9_1115), 0)
	word32 eax_1693 = memcmp(r13_1672, rsi_1018, r9_1115)
	rdx_1143 = r9_1115
	*r9Out = Mem1691[rsp_1140 + 0x0000000000000040:word64]
	r8_1114 = Mem1691[rsp_1140 + 0x0000000000000048:word64]
	*r8Out = r8_1114
	ecx_1003 = Mem1691[rsp_1140 + 0x0000000000000050:word32]
	branch eax_1693 != 0x00000000 l000000000040E0B0
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0B0:
	r11d_1007 = 0x00000000
	r11b_1008 = 0x00 (alias)
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA05:
	branch Mem1691[rsp_1140 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA10:
	rbx_1015 = DPB(rbx_1015, 0x00000001, 0) (alias)
// DataOut: fs r11b r11d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA20:
	word32 r12d_1005 = (word32) Mem161[r13_1672:byte]
	byte r12b_1006 = (byte) r12d_1005
	r12_1010 = DPB(r12_1010, r12d_1005, 0) (alias)
	*r12Out = r12_1010
	branch r12b_1006 >u 0x7E l000000000040DE18
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> r12d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE18:
	byte dl_1127
	word64 rdx_1124
	byte dl_1142
	branch Mem161[rsp_1140 + 0x0000000000000078:word64] != 0x0000000000000001 l000000000040E0C0
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0C0:
	Mem1221[rsp_1140 + 0x00000000000000B0:word64] = 0x0000000000000000
	branch r15_1120 == 0xFFFFFFFFFFFFFFFF l000000000040E285
// DataOut: fs r11b r11d r12b r13 r14 r15 r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E285:
	Mem1655[rsp_1140 + 0x0000000000000050:word64] = r9_1115
	Mem1656[rsp_1140 + 0x0000000000000048:word32] = r11d_1007
	Mem1657[rsp_1140 + 0x0000000000000040:word64] = r8_1114
	word64 rax_1658 = DPB(rax_1667, strlen(r8_1114), 0)
	r9_1115 = Mem1657[rsp_1140 + 0x0000000000000050:word64]
	r15_1120 = rax_1658
	r11b_1008 = (byte) Mem1657[rsp_1140 + 0x0000000000000048:word32] (alias)
// DataOut: fs r11b r12b r13 r14 r15 r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E0D6:
	Mem1237[rsp_1140 + 0x0000000000000080:word64] = rbx_1015
	Mem1238[rsp_1140 + 0x0000000000000096:byte] = r12b_1006
	Mem1239[rsp_1140 + 0x0000000000000098:word64] = r13_1672
	Mem1242[rsp_1140 + 0x0000000000000048:word64] = rbp_1016
	Mem1243[rsp_1140 + 0x0000000000000088:word64] = r9_1115
	Mem1247[rsp_1140 + 0x0000000000000097:byte] = r11b_1008
	Mem1248[rsp_1140 + 0x0000000000000050:word64] = r14_1119
	Mem1250[rsp_1140 + 0x0000000000000040:word64] = r15_1120
// DataOut: fs r12d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E11D:
	word64 rdi_1270
	word64 r15_1271
	word64 rcx_1272
	word32 r14d_1274
	word32 r8d_1275
	word64 rbp_1276
	word32 ebx_1280
	word32 r9d_1281
	byte SCZO_1282
	word64 rax_1283
	word32 eax_1285
	byte SZO_1286
	byte C_1287
	byte al_1288
	byte CZ_1289
	word64 r11_1290
	word32 esi_1291
	byte Z_1292
	word64 r9_1293
	word64 r14_1294
	word32 ebp_1295
	word64 r8_1296
	byte cl_1297
	word32 r12d_1299
	byte r12b_1300
	word32 r11d_1301
	word32 edx_1302
	word16 dx_1303
	byte dl_1304
	word32 edi_1305
	byte r11b_1306
	byte dil_1307
	byte sil_1308
	word32 esp_1309
	word64 r10_1310
	word64 r12_1311
	word64 rdx_1278
	call mbrtowc (retsize: 8; depth: 8)
		uses: al_1256,bLocAD_108,bLocC0_109,C_1236,cl_538,CZ_608,dil_503,dl_1266,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_21,dwLoc14_23,dwLoc18_26,dwLoc50_36,dwLocAC_107,dx_1265,eax_1255,ebp_530,ebx_1241,ecx_592,edi_502,edx_1264,esi_1232,esp_534,fs_497,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_110,qwLoc88_37,qwLocB8_33,qwLocC0_34,r10_496,r11_1228,r11b_1223,r11d_1222,r12_1246,r12b_1245,r12d_1244,r13_1251,r14_1260,r14d_1261,r15_1262,r8_1226,r8d_1224,r9_1227,r9d_1225,rax_1254,rbp_529,rbx_1252,rcx_1258,rdi_1259,rdx_1263,rsi_1268,rsp_1253,SCZO_1267,sil_499,SZO_1235,Z_1220
		defs: al_1288,C_1287,cl_1297,CZ_1289,dil_1307,dl_1304,dx_1303,eax_1285,ebp_1295,ebx_1280,ecx_1298,edi_1305,edx_1302,esi_1291,esp_1309,fs_1284,r10_1310,r11_1290,r11b_1306,r11d_1301,r12_1311,r12b_1300,r12d_1299,r13_1277,r14_1294,r14d_1274,r15_1271,r8_1296,r8d_1275,r9_1293,r9d_1281,rax_1283,rbp_1276,rbx_1279,rcx_1272,rdi_1270,rdx_1278,rsi_1273,rsp_1269,SCZO_1282,sil_1308,SZO_1286,Z_1292
	branch rax_1283 == 0x0000000000000000 l000000000040E30E
// DataOut: eax fs r12d r13 r14 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> rcx:<invalid> rbp:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E30E:
	r11d_1007 = (word32) Mem1250[rsp_1140 + 0x0000000000000097:byte]
	r12d_1005 = (word32) Mem1250[rsp_1140 + 0x0000000000000096:byte]
	rax_1129 = rbx_1015
	rbp_1016 = Mem1250[rsp_1140 + 0x0000000000000048:word64]
	*r9Out = Mem1250[rsp_1140 + 0x0000000000000088:word64]
	r11b_1008 = (byte) r11d_1007 (alias)
	*r8Out = r13_122
	rbx_1015 = Mem1250[rsp_1140 + 0x0000000000000080:word64]
	r12b_1006 = (byte) r12d_1005 (alias)
	*r12Out = DPB(r12_1311, r12d_1005, 0)
	rdx_1124 = DPB(rdx_1278, r12d_1299 ^ 0x00000001, 0) (alias)
	dl_1127 = (byte) (r12d_1299 ^ 0x00000001) (alias)
	*r14Out = Mem1250[rsp_1140 + 0x0000000000000050:word64]
	*r15Out = Mem1250[rsp_1140 + 0x0000000000000040:word64]
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E157:
	branch rax_1283 == 0xFFFFFFFFFFFFFFFF l000000000040E350
// DataOut: eax fs r12d r13 r14 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E350:
	r12d_1005 = (word32) Mem1250[rsp_1140 + 0x0000000000000096:byte]
	r11d_1007 = (word32) Mem1250[rsp_1140 + 0x0000000000000097:byte]
	rax_1129 = rbx_1015
	rbp_1016 = Mem1250[rsp_1140 + 0x0000000000000048:word64]
	*r9Out = Mem1250[rsp_1140 + 0x0000000000000088:word64]
	r12b_1006 = (byte) r12d_1005 (alias)
	*r12Out = DPB(r12_1311, r12d_1005, 0)
	r11b_1008 = (byte) r11d_1007 (alias)
	*r8Out = r13_122
	rbx_1015 = Mem1250[rsp_1140 + 0x0000000000000080:word64]
	*r14Out = Mem1250[rsp_1140 + 0x0000000000000050:word64]
	rdx_1124 = DPB(rdx_1278, 0x00000001, 0) (alias)
	dl_1127 = 0x01 (alias)
	*r15Out = Mem1250[rsp_1140 + 0x0000000000000040:word64]
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E161:
	branch rax_1283 == 0xFFFFFFFFFFFFFFFE l000000000040E391
// DataOut: eax fs r12d r13 r14 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E391:
	r12d_1005 = (word32) Mem1250[rsp_1140 + 0x0000000000000096:byte]
	r11d_1007 = (word32) Mem1250[rsp_1140 + 0x0000000000000097:byte]
	r15_1120 = Mem1250[rsp_1140 + 0x0000000000000040:word64]
	*r15Out = r15_1120
	rsi_1018 = r14_1294
	rax_1129 = rbx_1015 + 0x0000000000000001
	*r8Out = r13_122
	rbp_1016 = Mem1250[rsp_1140 + 0x0000000000000048:word64]
	*r9Out = Mem1250[rsp_1140 + 0x0000000000000088:word64]
	r12b_1006 = (byte) r12d_1005 (alias)
	*r12Out = DPB(r12_1311, r12d_1005, 0)
	r11b_1008 = (byte) r11d_1007 (alias)
	rbx_1015 = Mem1250[rsp_1140 + 0x0000000000000080:word64]
	*r14Out = Mem1250[rsp_1140 + 0x0000000000000050:word64]
	word64 r13_1575 = Mem1250[rsp_1140 + 0x0000000000000098:word64]
	branch r15_1120 <=u r14_1294 l000000000040E3FE
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3DB:
	branch Mem1250[rdx_1278:byte] != 0x00 l000000000040E3F0
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> r10:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3F0:
	word64 rax_1591 = rax_1129 + 0x0000000000000000
	branch r15_1120 >u rbp_1016 + rax_1591 l000000000040E3E8
	rax_1129 = rax_1591 + 0x0000000000000001
	rdx_1278 = rbp_1016 + (rax_1591 + 0x0000000000000001)
	branch r15_1120 >u rdx_1278 l000000000040E3E8
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> r10:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3E8:
	branch Mem1250[r13_1575 + (rax_1591 + 0x0000000000000001):byte] == 0x00 l000000000040E3FE
// DataOut: fs r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> r10:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3E1:
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> r10:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E3FE:
	rdx_1124 = DPB(rdx_1278, 0x00000001, 0) (alias)
	dl_1127 = 0x01 (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> r10:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E16B:
	branch Mem1250[rsp_1140 + 0x0000000000000033:byte] == 0x00 l000000000040E1BF
// DataOut: eax fs r12d r13 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E172:
	branch Mem1250[rsp_1140 + 0x0000000000000034:word32] != 0x00000002 l000000000040E1BF
// DataOut: eax fs r12d r13 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E179:
	branch rax_1283 == 0x0000000000000001 l000000000040E1BF
// DataOut: eax fs r12d r13 r15 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E17F:
	word64 rdx_1506 = DPB(rdx_1278, 0x00000001, 0)
	word64 rax_1510 = DPB(rax_1283, 0x00000001, 0)
	r15_1512 = r15_1271
	rdi_1522 = rdi_1270
// DataOut: eax fs r12d r13 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E190:
	word64 r15_1512
	word64 rdi_1522
	rdi_1522 = DPB(rdi_1522, (word32) Mem1250[r15_1512 + rdx_1506:byte], 0) (alias)
	ecx_1003 = rdi_1522 - 0x000000000000005B
	byte cl_1527 = (byte) (rdi_1522 - 0x000000000000005B)
	branch cl_1527 >u 0x21 l000000000040E1B6
// DataOut: cl eax fs r12d r13 r15 rax rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:0x00000001 r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:0x01 cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edx:<invalid> ecx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E19D:
	r15_1512 = 0x000000000000002B
	branch (rax_1510 << cl_1527 & rdi_1522) != 0x0000000000000000 l000000000040E260
// DataOut: eax fs r12d r13 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:0x00000001 r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:0x01 cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E260:
	r11_104 = Mem1250[rsp_1140 + 0x0000000000000050:word64]
	r11d_1007 = (word32) r11_104 (alias)
	r11b_1008 = (byte) r11_104 (alias)
	r15_1120 = Mem1250[rsp_1140 + 0x0000000000000040:word64]
// DataOut: fs r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:0x000000000000002B r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:0x00000001 r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:0x01 cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1B6:
	rdx_1506 = rdx_1506 + 0x0000000000000001
	branch rdx_1506 != rax_1283 l000000000040E190
// DataOut: eax fs r12d r13 r15 rax rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:0x00000001 r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:0x01 cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edx:<invalid> edi:<invalid> ecx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1BF:
	word64 rsp_1373
	word64 rdi_1374
	word64 r15_1375
	word64 rcx_1376
	word64 rsi_1377
	word32 r14d_1378
	word32 r8d_1379
	word64 rbp_1380
	word64 r13_1381
	word64 rdx_1382
	word64 rbx_1383
	word32 ebx_1384
	word32 r9d_1385
	byte SCZO_1386
	word64 rax_1387
	selector fs_1388
	word32 eax_1389
	byte SZO_1390
	byte C_1391
	byte al_1392
	byte CZ_1393
	word64 r11_1394
	word32 esi_1395
	byte Z_1396
	word64 r9_1397
	word64 r14_1398
	word32 ebp_1399
	word64 r8_1400
	byte cl_1401
	word32 ecx_1402
	word32 r12d_1403
	byte r12b_1404
	word32 r11d_1405
	word32 edx_1406
	word16 dx_1407
	byte dl_1408
	word32 edi_1409
	byte r11b_1410
	byte dil_1411
	byte sil_1412
	word32 esp_1413
	word64 r10_1414
	word64 r12_1415
	call iswprint (retsize: 8; depth: 8)
		uses: al_1288,bLocAD_108,bLocC0_109,C_1314,cl_1297,CZ_1289,dil_1307,dl_1304,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_21,dwLoc14_23,dwLoc18_26,dwLoc50_36,dwLocAC_107,dx_1303,eax_1285,ebp_1316,ebx_1280,ecx_1298,edi_1372,edx_1302,esi_1291,esp_1309,fs_1284,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_110,qwLoc88_37,qwLocB8_33,qwLocC0_34,r10_1310,r11_1290,r11b_1306,r11d_1301,r12_1311,r12b_1300,r12d_1299,r13_1277,r14_1294,r14d_1274,r15_1271,r8_1296,r8d_1275,r9_1293,r9d_1281,rax_1283,rbp_1315,rbx_1279,rcx_1272,rdi_1270,rdx_1278,rsi_1273,rsp_1269,SCZO_1370,sil_1308,SZO_1312,Z_1371
		defs: al_1392,C_1391,cl_1401,CZ_1393,dil_1411,dl_1408,dx_1407,eax_1389,ebp_1399,ebx_1384,ecx_1402,edi_1409,edx_1406,esi_1395,esp_1413,fs_1388,r10_1414,r11_1394,r11b_1410,r11d_1405,r12_1415,r12b_1404,r12d_1403,r13_1381,r14_1398,r14d_1378,r15_1375,r8_1400,r8d_1379,r9_1397,r9d_1385,rax_1387,rbp_1380,rbx_1383,rcx_1376,rdi_1374,rdx_1382,rsi_1377,rsp_1373,SCZO_1386,sil_1412,SZO_1390,Z_1396
	branch eax_1389 != 0x00000000 l000000000040E1DE
// DataOut: fs r12d r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1DA_1:
// DataOut: fs r12d r13 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:0x00000000 r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:0x00 cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1DE:
	word64 rdi_1425
	word64 r15_1426
	word64 rcx_1427
	word32 r14d_1429
	word32 r8d_1430
	word64 rbp_1431
	word64 r13_1432
	word64 rdx_1433
	word64 rbx_1434
	word32 ebx_1435
	word32 r9d_1436
	byte SCZO_1437
	word64 rax_1438
	word32 eax_1440
	byte SZO_1441
	byte C_1442
	byte al_1443
	byte CZ_1444
	word64 r11_1445
	word32 esi_1446
	byte Z_1447
	word64 r9_1448
	word64 r14_1449
	word32 ebp_1450
	word64 r8_1451
	byte cl_1452
	word32 r12d_1454
	byte r12b_1455
	word32 r11d_1456
	word32 edx_1457
	word16 dx_1458
	byte dl_1459
	word32 edi_1460
	byte r11b_1461
	byte dil_1462
	byte sil_1463
	word32 esp_1464
	word64 r10_1465
	word64 r12_1466
	call mbsinit (retsize: 8; depth: 8)
		uses: al_1392,bLocAD_108,bLocC0_109,C_1419,cl_1401,CZ_1393,dil_1411,dl_1408,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_21,dwLoc14_23,dwLoc18_26,dwLoc50_36,dwLocAC_107,dx_1407,eax_1420,ebp_1399,ebx_1422,ecx_1402,edi_1409,edx_1406,esi_1395,esp_1413,fs_1388,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_110,qwLoc88_37,qwLocB8_33,qwLocC0_34,r10_1414,r11_1394,r11b_1410,r11d_1405,r12_1415,r12b_1404,r12d_1403,r13_1381,r14_1398,r14d_1378,r15_1375,r8_1400,r8d_1379,r9_1397,r9d_1385,rax_1387,rbp_1380,rbx_1421,rcx_1376,rdi_1416,rdx_1382,rsi_1377,rsp_1373,SCZO_1423,sil_1412,SZO_1417,Z_1418
		defs: al_1443,C_1442,cl_1452,CZ_1444,dil_1462,dl_1459,dx_1458,eax_1440,ebp_1450,ebx_1435,ecx_1453,edi_1460,edx_1457,esi_1446,esp_1464,fs_1439,r10_1465,r11_1445,r11b_1461,r11d_1456,r12_1466,r12b_1455,r12d_1454,r13_1432,r14_1449,r14d_1429,r15_1426,r8_1451,r8d_1430,r9_1448,r9d_1436,rax_1438,rbp_1431,rbx_1434,rcx_1427,rdi_1425,rdx_1433,rsi_1428,rsp_1424,SCZO_1437,sil_1463,SZO_1441,Z_1447
	branch 0x00000000 == 0x00000000 l000000000040E11D
// DataOut: fs r12d r13 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:0x00000000 r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:0x00 cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E1EE:
	r11d_1007 = (word32) Mem1250[rsp_1140 + 0x0000000000000097:byte]
	r12d_1005 = (word32) Mem1250[rsp_1140 + 0x0000000000000096:byte]
	r11b_1008 = (byte) r11d_1007 (alias)
	r12b_1006 = (byte) r12d_1005 (alias)
	*r12Out = DPB(r12_1466, r12d_1005, 0)
	rax_1129 = rbx_1434
	rbp_1016 = Mem1250[rsp_1140 + 0x0000000000000048:word64]
	*r9Out = Mem1250[rsp_1140 + 0x0000000000000088:word64]
	rbx_1015 = Mem1250[rsp_1140 + 0x0000000000000080:word64]
	*r14Out = Mem1250[rsp_1140 + 0x0000000000000050:word64]
	*r15Out = Mem1250[rsp_1140 + 0x0000000000000040:word64]
	*r8Out = r13_1432
	rdx_1124 = DPB(rdx_1433, r12d_1454 ^ 0x00000001, 0) (alias)
	dl_1127 = (byte) (r12d_1454 ^ 0x00000001) (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edi:<invalid> ecx:<invalid> edx:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E22D:
	branch rax_1129 <=u 0x0000000000000001 l000000000040DE61
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E237:
	dl_1142 = dl_1127 & Mem1250[rsp_1140 + 0x0000000000000020:byte]
	rdx_1143 = DPB(rdx_1124, dl_1142, 0) (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbx:<invalid> rdx:<invalid> rcx:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> edx:<invalid> ecx:<invalid> r10:<invalid> edi:<invalid> r9d:<invalid> r8d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE24:
	Mem1149[rsp_1140 + 0x0000000000000050:word64] = r8_1114
	Mem1150[rsp_1140 + 0x0000000000000048:word64] = r9_1115
	Mem1151[rsp_1140 + 0x0000000000000040:word32] = r11d_1007
	word64 rdi_1153
	word64 rcx_1155
	word32 r14d_1157
	word32 r8d_1158
	word64 r13_1160
	word64 rdx_1161
	word32 ebx_1163
	word32 r9d_1164
	byte SCZO_1165
	word64 rax_1166
	word32 eax_1168
	byte SZO_1169
	byte C_1170
	byte al_1171
	byte CZ_1172
	word64 r11_1173
	word32 esi_1174
	byte Z_1175
	word64 r9_1176
	word32 ebp_1178
	word64 r8_1179
	byte cl_1180
	word32 r11d_1184
	word32 edx_1185
	word16 dx_1186
	byte dl_1187
	word32 edi_1188
	byte r11b_1189
	byte dil_1190
	byte sil_1191
	word32 esp_1192
	word64 r10_1193
	call __ctype_b_loc (retsize: 8; depth: 8)
		uses: al_596,bLocAD_108,bLocC0_109,C_600,cl_538,CZ_608,dil_503,dl_520,dwLoc04_4,dwLoc08_9,dwLoc0C_16,dwLoc10_21,dwLoc14_23,dwLoc18_26,dwLoc50_36,dwLocAC_107,dx_519,eax_595,ebp_530,ebx_598,ecx_592,edi_502,edx_518,esi_525,esp_534,fs_497,qwLoc28_47,qwLoc68_95,qwLoc70_40,qwLoc78_43,qwLoc80_110,qwLoc88_37,qwLocB8_33,qwLocC0_34,r10_496,r11_590,r11b_585,r11d_584,r12_606,r12b_605,r12d_604,r13_591,r14_513,r14d_498,r15_514,r8_588,r8d_586,r9_589,r9d_587,rax_594,rbp_529,rbx_601,rcx_539,rdi_603,rdx_593,rsi_602,rsp_533,SCZO_957,sil_499,SZO_599,Z_958
		defs: al_1171,C_1170,cl_1180,CZ_1172,dil_1190,dl_1187,dx_1186,eax_1168,ebp_1178,ebx_1163,ecx_1181,edi_1188,edx_1185,esi_1174,esp_1192,fs_1167,r10_1193,r11_1173,r11b_1189,r11d_1184,r12_1194,r12b_1183,r12d_1182,r13_1160,r14_1177,r14d_1157,r15_1154,r8_1179,r8d_1158,r9_1176,r9d_1164,rax_1166,rbp_1159,rbx_1162,rcx_1155,rdi_1153,rdx_1161,rsi_1156,rsp_1152,SCZO_1165,sil_1191,SZO_1169,Z_1175
	word64 rax_1195 = Mem1151[rax_1166:word64]
	word32 edx_1205 = (word32) Mem1151[rax_1195 + DPB(rdx_1161, (word32) r12b_1006, 0) * 0x0002:word16]
	r11d_1007 = Mem1151[rsp_1140 + 0x0000000000000040:word32]
	word32 edx_1213 = (DPB(edx_1205, (word16) edx_1205 >>u 0x000E, 0) ^ 0x00000001) & 0x00000001
	r11b_1008 = (byte) r11d_1007 (alias)
	*r9Out = Mem1151[rsp_1140 + 0x0000000000000048:word64]
	*r8Out = Mem1151[rsp_1140 + 0x0000000000000050:word64]
	rax_1129 = DPB(rax_1195, 0x00000001, 0) (alias)
	rdx_1124 = DPB(rdx_1161, edx_1213, 0) (alias)
	dl_1127 = (byte) edx_1213 (alias)
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE61:
	dl_1142 = dl_1127 & Mem161[rsp_1140 + 0x0000000000000020:byte]
	rdx_1143 = DPB(rdx_1124, dl_1142, 0) (alias)
	branch dl_1142 == 0x00 l000000000040DAF8
// DataOut: dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE6B:
	word64 rcx_1001 = Mem161[rsp_1140 + 0x0000000000000028:word64]
	rax_1129 = rax_1129 + rbp_1016
	byte dil_1000 = (byte) (word32) Mem161[rsp_1140 + 0x0000000000000033:byte]
	ecx_1003 = (word32) rcx_1001 (alias)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF0:
	branch dl_1142 != 0x00 l000000000040DE80
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE80:
	branch dil_1000 != 0x00 l000000000040DC40
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE89:
	branch rbx_1015 >=u r14_1119 l000000000040DE92
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE8E:
	Mem1101[rcx_1001 + rbx_1015:byte] = 0x5C
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE92:
	branch r14_1119 <=u rbx_1015 + 0x0000000000000001 l000000000040DEAA
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DE9B:
	Mem1100[rcx_1001 + 0x0000000000000001 + rbx_1015:byte] = (byte) (DPB(r12d_1005, (byte) r12d_1005 >>u 0x06, 0) + 0x00000030)
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEAA:
	rsi_1018 = rbx_1015 + 0x0000000000000002
	branch r14_1119 <=u rsi_1018 l000000000040DEC5
// DataOut: dil dl fs r11b r11d r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> sil:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEB3:
	Mem1092[rcx_1001 + 0x0000000000000002 + rbx_1015:byte] = (byte) ((DPB(r12d_1005, (byte) r12d_1005 >>u 0x03, 0) & 0x00000007) + 0x00000030)
// DataOut: dil dl fs r11b r11d r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> sil:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEC5:
	word32 r12d_1077 = r12d_1005 & 0x00000007
	rbx_1015 = rbx_1015 + 0x0000000000000003
	r12b_1006 = (byte) (r12d_1077 + 0x00000030) (alias)
	*r12Out = DPB(r12_1010, r12d_1077 + 0x00000030, 0)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> sil:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF4:
	branch r11b_1008 == 0x00 l000000000040DED1
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEF9:
	branch rbx_1015 >=u r14_1119 l000000000040DF02
// DataOut: dil dl fs r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEFE:
	Mem1061[rcx_1001 + rbx_1015:byte] = 0x5C
// DataOut: dil dl fs r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DF02:
	rbx_1015 = rbx_1015 + 0x0000000000000001
	r11d_1007 = 0x00000000
	r11b_1008 = 0x00 (alias)
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> sil:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DED1:
	rbp_1016 = rbp_1016 + 0x0000000000000001
	branch rax_1129 <=u rbp_1016 l000000000040DB54
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> sil:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEDE:
	branch rbx_1015 >=u r14_1119 l000000000040DEE7
// DataOut: dil dl fs r11b r11d r12b r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> sil:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEE3:
	Mem1048[rcx_1001 + rbx_1015:byte] = r12b_1006
// DataOut: dil dl fs r11b r11d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> sil:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DEE7:
	r12d_1005 = (word32) Mem161[r8_1114 + rbp_1016:byte]
	r12b_1006 = (byte) r12d_1005 (alias)
	*r12Out = DPB(r12_1010, r12d_1005, 0)
	rbx_1015 = rbx_1015 + 0x0000000000000001
// DataOut: dil dl fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rbp:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> sil:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> esp:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DA2F:
	rax_1129 = DPB(rax_1667, (word32) r12b_1006, 0) (alias)
	switch (rax_1129) { l000000000040DD20 }
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD20:
	branch Mem161[rsp_1140 + 0x0000000000000020:byte] == 0x00 l000000000040E240
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E240:
	branch (Mem161[rsp_1140 + 0x0000000000000090:byte] & 0x01) == 0x00 l000000000040DAF8
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DAF8:
	branch Mem161[rsp_1140 + 0x0000000000000038:byte] == 0x00 l000000000040DB09
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DAFF:
	branch Mem161[rsp_1140 + 0x0000000000000095:byte] != 0x00 l000000000040DB2E
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E24E:
	rbp_1016 = rbp_1016 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD2B:
	branch Mem161[rsp_1140 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD36:
	branch rbx_1015 >=u r14_1119 l000000000040DD44
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD3B:
	Mem950[Mem161[rsp_1140 + 0x0000000000000028:word64] + rbx_1015:byte] = 0x5C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:(word32) r12b r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD44:
	rdx_1143 = rbp_1016 + 0x0000000000000001
	rax_1129 = rbx_1015 + 0x0000000000000001
	branch r15_1120 <=u rdx_1143 l000000000040DD80
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD51:
	rsi_1018 = DPB(rsi_1018, (word32) Mem161[r8_1114 + 0x0000000000000001 + rbp_1016:byte], 0) (alias)
	branch (byte) (rsi_1018 - 0x0000000000000030) >u 0x09 l000000000040DD80
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rdx:<invalid> rsi:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD5F:
	branch r14_1119 >u rax_1129 l000000000040E300
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E300:
	rsi_1018 = Mem161[rsp_1140 + 0x0000000000000028:word64]
	Mem948[rsi_1018 + rax_1129:byte] = 0x30
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD68:
	branch r14_1119 <=u rbx_1015 + 0x0000000000000002 l000000000040DD7B
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD71:
	Mem946[Mem161[rsp_1140 + 0x0000000000000028:word64] + 0x0000000000000002 + rbx_1015:byte] = 0x30
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD7B:
	rax_1129 = rbx_1015 + 0x0000000000000003
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DD80:
	rbx_1015 = rax_1129
	rsp_1140 = DPB(rsp_1140, 0x00000030, 0) (alias)
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rdx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> ecx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rbp:<invalid> rbx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB09:
	word64 rdi_839 = Mem161[rsp_1140 + 0x0000000000000058:word64]
	branch rdi_839 == 0x0000000000000000 l000000000040DB2E
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> rbx:<invalid> esp:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB13:
	ecx_1003 = r12d_1005 & 0x0000001F
	rdx_1143 = DPB(rdx_1143, (word32) ((byte) r12d_1005 >>u 0x05), 0) (alias)
	branch (Mem161[rdi_839 + rdx_1143 * 0x00000004:word32] & 0x00000001 << (byte) ecx_1003) != 0x00000000 l000000000040DB33
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> rsi:<invalid> rdx:<invalid> ecx:<invalid> rbx:<invalid> esp:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB2E:
	branch r11b_1008 == 0x00 l000000000040DB50
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB33:
	branch Mem161[rsp_1140 + 0x0000000000000033:byte] != 0x00 l000000000040DC40
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC40:
	r11_104 = r14_1119
	r11d_1007 = (word32) r14_1119 (alias)
	r11b_1008 = (byte) r14_1119 (alias)
	r13_122 = r8_1114
// DataOut: fs r11 r13 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> rbx:<invalid> esp:<invalid> r9d:<invalid> r8d:<invalid> rbp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB3E:
	branch rbx_1015 >=u r14_1119 l000000000040DB4C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB43:
	rax_1129 = Mem161[rsp_1140 + 0x0000000000000028:word64]
	Mem758[rax_1129 + rbx_1015:byte] = 0x5C
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB4C:
	rbx_1015 = rbx_1015 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB50:
	rbp_1016 = rbp_1016 + 0x0000000000000001
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> rcx:<invalid> rbp:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> edi:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB54:
	branch rbx_1015 >=u r14_1119 l000000000040DB62
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> rbp:<invalid> edi:<invalid> rcx:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB59:
	rax_1129 = Mem161[rsp_1140 + 0x0000000000000028:word64]
	Mem663[rax_1129 + rbx_1015:byte] = r12b_1006
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> rbp:<invalid> edi:<invalid> rcx:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB62:
	al_1741 = rbp_1016 != r15_1120
	rbx_1015 = rbx_1015 + 0x0000000000000001
	rax_1667 = DPB(rax_1129, al_1741, 0) (alias)
	branch r15_1120 != 0xFFFFFFFFFFFFFFFF l000000000040D9A0
// DataOut: al fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> rdi:<invalid> rbp:<invalid> edi:<invalid> rcx:<invalid> ecx:<invalid> rsi:<invalid> rdx:<invalid> rbx:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> r9d:<invalid> r8d:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB76:
	byte al_490 = Mem161[r8_1114 + rbp_1016:byte] != 0x00
	rax_1667 = DPB(rax_1667, al_490, 0) (alias)
	branch al_490 != 0x00 l000000000040D9A8
// DataOut: fs r11b r11d r12 r12b r12d r14 r14b r14d r15 r15b r8 r9 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB86:
	r11_104 = r14_1119
	*r11Out = r11_104
	r11d_1007 = (word32) r14_1119 (alias)
	r11b_1008 = (byte) r14_1119 (alias)
	r13_122 = r8_1114
	*r13Out = r13_122
	branch rbx_1015 != 0x0000000000000000 l000000000040DBA3
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB91:
	branch Mem161[rsp_1140 + 0x0000000000000034:word32] != 0x00000002 l000000000040DBA3
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DB98:
	branch Mem161[rsp_1140 + 0x0000000000000033:byte] != 0x00 l000000000040DC46
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC46:
	word64 rax_314 = Mem161[rsp_1140 + 0x0000000000000068:word64]
	word32 r9d_315 = Mem161[rsp_1140 + 0x0000000000000090:word32]
	word32 r8d_317 = Mem161[rsp_1140 + 0x0000000000000034:word32]
	word64 rdi_319 = Mem161[rsp_1140 + 0x0000000000000028:word64]
	Mem321[rsp_1140:word64] = 0x0000000000000000
	Mem323[rsp_1140 + 0x0000000000000010:word64] = rax_314
	Mem329[rsp_1140 + 0x0000000000000008:word64] = Mem323[rsp_1140 + 0x0000000000000070:word64]
	rdx_1143 = r13_122
	word64 r8_333
	word64 r9_334
	rax_1129 = fn000000000040D8A0(r15_1120, r13_122, r11_104, rdi_319, r8d_317, r9d_315 & 0xFFFFFFFD, fs_1103, qwArg18, qwArg20, qwArg28, out rsp_1140, out rbp_1016, out r8_333, out r9_334, out r11_104, out r12_1010, out r13_122, out r14_1119, out r15_1120)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> cl:<invalid> rsi:<invalid> rdx:<invalid> rdi:<invalid> ecx:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> rcx:<invalid> r9d:<invalid> r8d:<invalid> rbx:<invalid> esp:<invalid> rbp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBA3:
	branch Mem161[rsp_1140 + 0x0000000000000033:byte] != 0x00 l000000000040DBE4
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBAA:
	branch Mem161[rsp_1140 + 0x0000000000000060:word64] == 0x0000000000000000 l000000000040DBE4
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBB2:
	rdx_1143 = Mem161[rsp_1140 + 0x0000000000000060:word64]
	byte al_415 = (byte) (word32) Mem161[rdx_1143:byte]
	branch al_415 == 0x00 l000000000040DBE4
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:Test(NE,Z) r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBBE:
	word64 rcx_419 = Mem161[rsp_1140 + 0x0000000000000028:word64]
	ecx_1003 = (word32) rcx_419 (alias)
	rdx_1143 = rdx_1143 - rbx_1015
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> rbx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD0:
	branch r14_1119 <=u rbx_1015 l000000000040DBD8
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> r9d:<invalid> r8d:<invalid> rdi:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD5:
	Mem445[rcx_419 + rbx_1015:byte] = al_415
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> r9d:<invalid> r8d:<invalid> rdi:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBD8:
	rbx_1015 = rbx_1015 + 0x0000000000000001
	al_415 = (byte) (word32) Mem161[rdx_1143 + rbx_1015:byte] (alias)
	branch al_415 != 0x00 l000000000040DBD0
// DataOut: al fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> r9d:<invalid> r8d:<invalid> rdi:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBE4:
	rax_1129 = rbx_1015
	branch rbx_1015 >=u r14_1119 l000000000040DC86
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> r9d:<invalid> r8d:<invalid> rdi:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DBF0:
	Mem406[Mem161[rsp_1140 + 0x0000000000000028:word64] + rbx_1015:byte] = 0x00
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> rdx:<invalid> rcx:<invalid> rbx:<invalid> r9d:<invalid> r8d:<invalid> rdi:<invalid> rsi:<invalid> cl:<invalid> r11d:<invalid> r12d:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> sil:<invalid> r10:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC86:
	rsi_1018 = Mem161[rsp_1140 + 0x00000000000000B8:word64] ^ Mem161[fs_1103:0x00000028:word64]
	branch rsi_1018 != 0x0000000000000000 l000000000040E423
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> rbx:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E423:
	__stack_chk_fail()
	Mem278[rsp_1140 + 0x0000000000000020:byte] = 0x01
	Mem280[rsp_1140 + 0x0000000000000060:word64] = 0x0000000000415FEB
	rbx_1015 = DPB(rbx_1015, 0x00000000, 0) (alias)
// DataOut: fs r11 r11b r11d r12 r12b r12d r13 r14 r15 r15b rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> rbx:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040DC9D:
	word64 rsp_259 = Mem161[rsp_1140 + 0x00000000000000D8:word64]
	word64 rbp_261
	*rbpOut = Mem161[rsp_259 + 0x0000000000000008:word64]
	word64 rsp_267
	*rspOut = rsp_259 + 0x0000000000000020
	return rax_1129
// DataOut: ebp fs r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> cl:<invalid> ecx:<invalid> rbp:<invalid> rbx:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040D8A0_exit:
// DataOut: ebp r11 r11b r11d r12 r12b r12d r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> r14d:<invalid> r13:<invalid> ebx:<invalid> rax:<invalid> eax:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r14:<invalid> r8:<invalid> al:<invalid> r9d:<invalid> rcx:<invalid> r8d:<invalid> rdi:<invalid> rdx:<invalid> rsi:<invalid> rbx:<invalid> rbp:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> r12d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -224(fp):0x0000000000000000 -216(fp):<invalid> -208(fp):<invalid> -192(fp):<invalid> -184(fp):rdi -173(fp):<invalid> -172(fp):<invalid> -168(fp):<invalid> -160(fp):<invalid> -152(fp):<invalid> -144(fp):<invalid> -136(fp):<invalid> -128(fp):<invalid> -120(fp):<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):rbx -88(fp):<invalid> -80(fp):r9d -75(fp):<invalid> -74(fp):r12b -73(fp):r11b -72(fp):<invalid> -48(fp):0x0000000000000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn000000000040E450(word64 rcx, word64 rdx, word64 rsi, word64 rdi, word64 r11, selector fs, ptr64 & rbpOut, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 rcx rdi rdx rsi
// LiveOut: r11 r12 r12b r13 r14 r15 r15b rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn000000000040E450_entry:
// DataOut: edi fs r11 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E450:
	word64 r15_6 = (int64) edi
	__errno_location()
	word32 r15d_7 = (word32) r15_6
	word64 rsp_195 = fp - 0x0000000000000060
	word64 r12_192 = Mem0[0x000000000061A5D8:word64]
	branch r15d_7 < 0x00000000 l000000000040E5F7
// DataOut: edi fs r11 r12 r15 r15d rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E5F7:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040E48C:
	branch r15d_7 <u Mem0[0x000000000061A5F0:word32] l000000000040E4FA
// DataOut: edi fs r11 r12 r15 rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E495:
	word64 rdi_194
	word64 r14_182 = DPB(r14, rdi + 0x0000000000000001, 0)
	word64 rsi_184 = r14_182 << 0x0000000000000004
	branch r12_192 != 0x000000000061A5E0 l000000000040E5E0
// DataOut: ebp fs r11 r12 r14 r15 rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> -64(fp):rsi -56(fp):rdx -44(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E5E0:
	word32 ebx_223
	word64 r8_225
	word64 rax_226 = fn0000000000410C90(rdx, r14_182 << 0x0000000000000004, r12_192, out ebx_223, out rsp_195, out r8_225)
	Mem228[0x000000000061A5D8:word64] = rax_226
	rdi_194 = r12_192
	r12_192 = rax_226
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14d:rdi + 0x0000000000000001 rsi:r14 << 0x0000000000000004 -64(fp):rsi -56(fp):rdx -44(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E4B0:
	word32 ebx_212
	word64 r8_214
	word64 rax_215 = fn0000000000410C90(rdx, r14_182 << 0x0000000000000004, DPB(rdi, 0x00000000, 0), out ebx_212, out rsp_195, out r8_214)
	rsi_184 = Mem0[0x000000000061A5E0:word64]
	rdi_194 = Mem0[0x000000000061A5E8:word64]
	Mem219[0x000000000061A5D8:word64] = rax_215
	Mem220[rax_215:word64] = rsi_184
	Mem221[rax_215 + 0x0000000000000008:word64] = rdi_194
	r12_192 = rax_215
// DataOut: ebp fs r11 r12 r14 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000060 r15:(int64) edi rbx:rcx rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14d:rdi + 0x0000000000000001 rsi:r14 << 0x0000000000000004 -64(fp):rsi -56(fp):rdx -44(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E4D6:
	word64 rdi_197 = DPB(rdi_194, Mem0[0x000000000061A5F0:word32], 0)
	memset((rdi_197 << 0x0000000000000004) + r12_192, DPB(rsi_184, 0x00000000, 0), r14_182 - rdi_197 << 0x0000000000000004)
	Mem207[0x000000000061A5F0:word32] = rdi + 0x0000000000000001
// DataOut: fs r11 r12 r15 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14d:rdi + 0x0000000000000001 rsi:<invalid> edi:<invalid> rdi:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> esi:<invalid> r8:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -64(fp):rsi -56(fp):rdx -44(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040E4FA:
	word64 r12_54 = r12_192 + (r15_6 << 0x0000000000000004)
	word32 ebp_53 = Mem0[rcx + 0x0000000000000004:word32]
	word32 r8d_56 = Mem0[r11:word32]
	word64 r11_60 = Mem0[r12_54:word64]
	word64 r14_61 = Mem0[r12_54 + 0x0000000000000008:word64]
	Mem63[rsp_195 + 0x0000000000000010:word64] = Mem0[rcx + 0x0000000000000030:word64]
	word64 rax_64 = Mem63[rcx + 0x0000000000000028:word64]
	word64 rcx_69 = Mem63[rsp_195 + 0x0000000000000028:word64]
	word64 rdx_70 = Mem63[rsp_195 + 0x0000000000000020:word64]
	Mem75[rsp_195:word64] = r11 + 0x0000000000000008
	Mem77[rsp_195 + 0x0000000000000008:word64] = rax_64
	Mem78[rsp_195 + 0x0000000000000038:word64] = r11_60
	word64 r8_85
	word64 r9_86
	word64 r11_87
	word64 r12_88
	word64 r13_89
	word64 r14_90
	word64 r15_91
	word64 rbp_111
	word64 rsp_112
	word64 rax_92 = fn000000000040D8A0(rcx_69, rdx_70, r11_60, r14_61, r8d_56, ebp_53 | 0x00000001, fs, qwArg18, qwArg20, qwArg28, out rsp_112, out rbp_111, out r8_85, out r9_86, out r11_87, out r12_88, out r13_89, out r14_90, out r15_91)
	word64 r11_94 = Mem78[rsp_112 + 0x0000000000000038:word64]
	*r11Out = r11_94
	branch r11_94 >u rax_92 l000000000040E5BF
// DataOut: ebp fs r11 r12 r12b r13 r14 r15 r15b rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:(int64) edi rbx:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:rdi + 0x0000000000000001 r14d:rdi + 0x0000000000000001 rsi:<invalid> edi:<invalid> rdi:<invalid> rdx:<invalid> esi:<invalid> rcx:<invalid> edx:<invalid> r8:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -64(fp):rsi -56(fp):rdx -44(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040E554:
	Mem141[r12_88:word64] = rax_92 + 0x0000000000000001
	word64 rsi_137 = rax_92 + 0x0000000000000001
	branch r14_90 == 0x000000000061B220 l000000000040E577
// DataOut: ebp fs r11 r12 r14 r15 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9d:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> edi:<invalid> esi:<invalid> edx:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> rbp:<invalid> ecx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040E565:
	Mem175[rsp_112 + 0x0000000000000038:word64] = rax_92 + 0x0000000000000001
	free(r14_90)
	rsi_137 = Mem175[rsp_112 + 0x0000000000000038:word64]
// DataOut: ebp fs r11 r12 r15 rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9d:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> edi:<invalid> esi:<invalid> edx:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> rbp:<invalid> ecx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(64) Local -0008(64)

l000000000040E577:
	Mem145[rsp_112 + 0x0000000000000038:word64] = rsi_137
	word64 rsp_146
	word64 rax_147 = fn0000000000410C40(rsi_137, rsi_137, out rsp_146)
	Mem148[r12_88 + 0x0000000000000008:word64] = rax_147
	word32 r8d_152 = Mem148[r11_94:word32]
	word64 rcx_154 = Mem148[rsp_146 + 0x0000000000000028:word64]
	word64 rdx_157 = Mem148[rsp_146 + 0x0000000000000020:word64]
	word64 rsi_158 = Mem148[rsp_146 + 0x0000000000000038:word64]
	Mem160[rsp_146 + 0x0000000000000010:word64] = Mem148[rcx + 0x0000000000000030:word64]
	word64 rax_161 = Mem160[rcx + 0x0000000000000028:word64]
	Mem162[rsp_146:word64] = r15_91
	Mem163[rsp_146 + 0x0000000000000008:word64] = rax_161
	word64 r8_166
	word64 r9_167
	word64 r11_168
	word64 r12_169
	word64 r13_170
	word64 r14_171
	word64 r15_172
	fn000000000040D8A0(rcx_154, rdx_157, rsi_158, rax_147, r8d_152, ebp_53 | 0x00000001, fs, qwArg18, qwArg20, qwArg28, out rsp_112, out rbp_111, out r8_166, out r9_167, out r11_168, out r12_169, out r13_170, out r14_171, out r15_172)
// DataOut: fs r11 r12 r12b r13 r14 r15 r15b rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9d:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> edi:<invalid> esi:<invalid> edx:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> rbp:<invalid> ecx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040E5BF:
	Mem114[rbp_111:word32] = Mem78[rsp_112 + 0x0000000000000034:word32]
	word64 rsp_122 = Mem114[rsp_112 + 0x0000000000000058:word64]
	word64 rbp_124
	*rbpOut = Mem114[rsp_122 + 0x0000000000000008:word64]
	return rsp_122 + 0x0000000000000020
// DataOut: fs r11 r12 r12b r13 r14 r15 r15b rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9d:<invalid> rsi:<invalid> rdi:<invalid> r14d:<invalid> edi:<invalid> esi:<invalid> edx:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> rbp:<invalid> ecx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040E450_exit:
// DataOut: r11 r12 r12b r13 r14 r15 r15b rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r15:<invalid> rbx:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> rdx:<invalid> r9d:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r14d:<invalid> edi:<invalid> esi:<invalid> edx:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> ecx:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -96(fp):r11 + 0x0000000000000008 -88(fp):<invalid> -80(fp):<invalid> -64(fp):rsi -56(fp):rdx -44(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040E600(word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn000000000040E600_entry:
// DataOut: r11 r8 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E600:
	__errno_location()
	word32 r12d_16 = Mem0[r8:word32]
	branch rdi == 0x0000000000000000 l000000000040E61E
// DataOut: r11 r12d
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E61A_1:
// DataOut: r11 r12d
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12d:<invalid> edi:0x0061B320 rbx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l000000000040E61E:
	word64 rsp_26
	word64 rbp_27
	word64 rsi_28
	fn0000000000410E00(DPB(rsi, 0x00000038, 0), out rsp_26, out rbp_27, out rsi_28)
	Mem30[r11:word32] = r12d_16
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rax:<invalid> r12d:<invalid> edi:<invalid> rbx:<invalid> rdi:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040E600_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rax:<invalid> r12d:<invalid> edi:<invalid> rbx:<invalid> rdi:<invalid> esi:0x00000038 rdx:<invalid> rsi:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



void fn000000000040E630(word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E630_entry:
// DataOut: rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E630:
	branch rdi == 0x0000000000000000 l000000000040E63C
// DataOut: rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E638_1:
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0061B320

l000000000040E63C:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> rax:rdi

fn000000000040E630_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> rax:<invalid>



void fn000000000040E640(word32 esi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  esi rdi
// LiveOut:
// Trashed: SCZO ah al ax eax rax
// Preserved: rsp
fn000000000040E640_entry:
// DataOut: esi rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E640:
	word64 rax_13 = DPB(rax, 0x0061B320, 0)
	branch rdi == 0x0000000000000000 l000000000040E64C
// DataOut: esi rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E648_1:
	rax_13 = rdi
// DataOut: esi rax
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0061B320

l000000000040E64C:
	Mem12[rax_13:word32] = esi
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> rax:rdi

fn000000000040E640_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> rax:rdi



void fn000000000040E650(word32 edx, byte sil, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx rdi sil
// LiveOut:
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn000000000040E650_entry:
// DataOut: edx rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E650:
	word64 rax_12 = DPB(rax, 0x0061B320, 0)
	branch rdi == 0x0000000000000000 l000000000040E65E
// DataOut: cl edx rax rdi sil
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E65A_1:
	rax_12 = rdi
// DataOut: cl edx rax sil
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0061B320 ecx:esi

l000000000040E65E:
	word64 rsi_20 = rax_12 + DPB(rsi, (word32) (sil >>u 0x05), 0) * 0x0000000000000004
	byte cl_16 = (byte) (esi & 0x0000001F)
	word32 edi_22 = Mem0[rsi_20 + 0x0000000000000008:word32]
	Mem33[rsi_20 + 0x0000000000000008:word32] = ((edx ^ edi_22 >>u cl_16) & 0x00000001) << cl_16 ^ edi_22
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> ecx:esi rax:rdi

fn000000000040E650_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> ecx:esi & 0x0000001F rax:<invalid> sil:<invalid> esi:<invalid> rsi:rdi + rsi * 0x0000000000000004 edi:<invalid> edx:<invalid>



void fn000000000040E6B0(word64 rdx, word64 rsi, word64 rdi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax di dil eax edi rax rdi
// Preserved: rsp
fn000000000040E6B0_entry:
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6B0:
	word64 rax_5 = DPB(rax, 0x0061B320, 0)
	branch rdi != 0x0000000000000000 l000000000040E6C0
// DataOut: rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6BC_1:
	rdi = rax_5
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:0x0061B320
// LocalsOut: fp(64)

l000000000040E6C0:
	Mem15[rdi:word32] = 0x00000008
	branch rsi == 0x0000000000000000 l000000000040E6DD
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:0x0061B320 rdi:rax
// LocalsOut: fp(64)

l000000000040E6CB:
	branch rdx == 0x0000000000000000 l000000000040E6DD
// DataOut: rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:0x0061B320 rdi:rax
// LocalsOut: fp(64)

l000000000040E6DD:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:0x0061B320 rdi:rax

l000000000040E6D0:
	Mem23[rdi + 0x0000000000000028:word64] = rsi
	Mem24[rdi + 0x0000000000000030:word64] = rdx
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:0x0061B320 rdi:rax

fn000000000040E6B0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:0x0061B320 rdi:rax



word64 fn000000000040E6F0(word64 rcx, word64 rdx, word32 ebx, word32 ebp, word64 rsi, word64 rdi, word64 r8, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp ebx edi fs r11 r8 rcx rdi rdx rsi
// LiveOut: ebp r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rcx rdx
fn000000000040E6F0_entry:
// DataOut: ebp ebx fs r11 r8 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E6F0:
	branch r8 != 0x0000000000000000 l000000000040E716
// DataOut: ebx fs r11 r13 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: Local -0014(32) Local -0018(32)

l000000000040E712_1:
// DataOut: ebx fs r11 r13 r14 r15 r8 rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 eax:0x0061B320 r15:rcx r14:rdx r13:rsi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0014(32) Local -0018(32)

l000000000040E716:
	__errno_location()
	word32 r12d_39 = Mem0[r8:word32]
	word64 rsp_62
	word64 rbp_63
	word64 r8_64
	word64 r9_65
	word64 r11_66
	word64 r12_67
	word64 r13_68
	word64 r14_69
	word64 r15_70
	word64 rax_71 = fn000000000040D8A0(rcx, rdx, rsi, rdi, Mem0[r11:word32], Mem0[r11 + 0x0000000000000004:word32], fs, rdi, qwLoc20, qwLoc18, out rsp_62, out rbp_63, out r8_64, out r9_65, out r11_66, out r12_67, out r13_68, out r14_69, out r15_70)
	Mem73[r13_68:word32] = r12d_39
	word64 rsp_80 = Mem73[rsp_62 + 0x0000000000000038:word64]
	word64 rbp_82
	*rbpOut = Mem73[rsp_80 + 0x0000000000000008:word64]
	word64 rsi_85
	*rsiOut = Mem73[rsp_80 + 0x0000000000000010:word64]
	word64 rdi_87
	*rdiOut = Mem73[rsp_80 + 0x0000000000000018:word64]
	word64 rsp_88
	*rspOut = rsp_80 + 0x0000000000000020
	return rax_71
// DataOut: ebp fs r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 eax:0x0061B320 r15:rcx r14:rdx r13:rsi rbx:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040E6F0_exit:
// DataOut: ebp r11 r11d r12 r12b r13 r14 r14b r14d r15 r15b r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> eax:<invalid> r15:<invalid> r14:<invalid> r13:<invalid> rbx:<invalid> rax:<invalid> r12d:<invalid> rbp:<invalid> r9d:<invalid> rdi:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> r8d:<invalid> r14d:<invalid> ebx:<invalid> r11:<invalid> esi:<invalid> r9:<invalid> ebp:<invalid> r8:<invalid> al:<invalid> cl:<invalid> ecx:<invalid> r11d:<invalid> edx:<invalid> dx:<invalid> dl:<invalid> edi:<invalid> esp:<invalid> r10:<invalid> sil:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):rdi -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn000000000040E930(word64 rdi, word64 r11, selector fs)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040E930_entry:
// DataOut: fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E930:
	word64 rcx_6 = DPB(rcx, 0x0061B320, 0)
	word64 rdi_9 = DPB(rdi, 0x00000000, 0)
// DataOut: edi fs r11 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040E941_thunk_fn000000000040E450:
	word64 rbp_14
	word64 r11_15
	word64 r12_16
	word64 r13_17
	word64 r14_18
	word64 r15_19
	fn000000000040E450(rcx_6, 0xFFFFFFFFFFFFFFFF, rdi, rdi_9, r11, fs, out rbp_14, out r11_15, out r12_16, out r13_17, out r14_18, out r15_19)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi ecx:0x0061B320 rdx:0xFFFFFFFFFFFFFFFF edi:0x00000000

fn000000000040E930_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> ecx:<invalid> rdx:<invalid> edi:<invalid> r15:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> r9d:<invalid> rdi:<invalid> rbp:<invalid> rbx:<invalid> r14d:<invalid> esi:<invalid> edx:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid>



word64 fn000000000040E970(word64 rdx, word32 esi, word32 edi, word64 r11, selector fs, ptr64 & r11Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi fs r11 rdx
// LiveOut: r11 r15 rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: edi
fn000000000040E970_entry:
// DataOut: edi esi fs r11 rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040E970:
	fn000000000040D740(esi, fp - 0x0000000000000050)
	word64 rbp_23
	word64 r11_24
	word64 r12_25
	word64 r13_26
	word64 r14_27
	word64 r15_28
	return fn000000000040E450(fp - 0x0000000000000050, 0xFFFFFFFFFFFFFFFF, rdx, DPB(fp - 0x0000000000000050, edi, 0), r11, fs, out rbp_23, out r11_24, out r12_25, out r13_26, out r14_27, out r15_28) + 0x0000000000000060
// DataOut: fs r11 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn000000000040E970_exit:
// DataOut: r11 r15 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rdi:<invalid> rcx:<invalid> rsi:<invalid> edi:<invalid> rdx:<invalid> rbx:<invalid> eax:<invalid> ecx:<invalid> rax:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> r9d:<invalid> r14d:<invalid> esi:<invalid> edx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn000000000040EAB0(word64 rdi, word64 r11, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12Out, ptr64 & r14Out, ptr64 & r15bOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: r12 r12b r14 r15b rbp rbx rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn000000000040EAB0_entry:
	*r15bOut = r15b
// DataOut: fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EAB0:
// DataOut: fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040EA00:
	word64 r8_14 = DPB(r8, 0x00000001, 0)
	word32 r9d_31 = Mem0[fp - 0x0000000000000040 + r8_14 * 0x00000004:word32]
	Mem44[fp - 0x0000000000000040 + r8_14 * 0x00000004:word32] = ((r9d_31 >>u 0x1A ^ 0x00000001) & 0x00000001) << 0x1A ^ r9d_31
	word64 rbp_47
	word64 r11_48
	word64 r12_49
	word64 r13_50
	word64 r14_51
	word64 r15_52
	word64 rsp_55
	*rspOut = fn000000000040E450(fp - 0x0000000000000048, 0xFFFFFFFFFFFFFFFF, rdi, DPB(rdi, 0x00000000, 0), r11, fs, out rbp_47, out r11_48, out r12_49, out r13_50, out r14_51, out r15_52) + 0x0000000000000050
	return rbx
// DataOut: fs r12 r12b r14 r15b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:0x0000003A rsi:0xFFFFFFFFFFFFFFFF

fn000000000040EAB0_exit:
// DataOut: r12 r12b r14 r15b rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edx:<invalid> rsi:<invalid> rax:<invalid> r8d:<invalid> r8b:<invalid> ecx:<invalid> rdx:<invalid> edi:<invalid> r9d:<invalid> eax:<invalid> rcx:<invalid> r15:<invalid> r13:<invalid> r12:<invalid> ebp:<invalid> r11:<invalid> r14:<invalid> rdi:<invalid> rbp:<invalid> rbx:<invalid> r14d:<invalid> esi:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -32(fp):<invalid> -24(fp):<invalid>



word64 fn000000000040EBF0(word64 rsi, word64 rdi, word64 r11, selector fs, ptr64 & r11Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi fs r11 rdi rsi
// LiveOut: r11 rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EBF0_entry:
// DataOut: edi fs r11 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBF0:
	word64 rcx_4 = DPB(rcx, 0x0061A5A0, 0)
// DataOut: edi fs r11 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EBFC_thunk_fn000000000040E450:
	word64 rbp_10
	word64 r11_11
	word64 r12_12
	word64 r13_13
	word64 r14_14
	word64 r15_15
	fn000000000040E450(rcx_4, 0xFFFFFFFFFFFFFFFF, rsi, rdi, r11, fs, out rbp_10, out r11_11, out r12_12, out r13_13, out r14_14, out r15_15)
	return rbx
// DataOut: fs r11 rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp ecx:0x0061A5A0 rdx:0xFFFFFFFFFFFFFFFF

fn000000000040EBF0_exit:
// DataOut: r11 rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> ecx:<invalid> rdx:<invalid> r15:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> r9d:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> rbx:<invalid> r14d:<invalid> edi:<invalid> esi:<invalid> edx:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid>



word64 fn000000000040EC10(word64 rdi, word64 r11, selector fs, ptr64 & rbpOut, ptr64 & r11Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r11 rdi
// LiveOut: r11 r13 r14 r15 rbp rbx
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn000000000040EC10_entry:
// DataOut: fs r11 rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC10:
	word64 rcx_7 = DPB(rcx, 0x0061A5A0, 0)
	word64 rdi_10 = DPB(rdi, 0x00000000, 0)
// DataOut: edi fs r11 rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000040EC1F_thunk_fn000000000040E450:
	word64 rbp_15
	word64 r11_16
	word64 r12_17
	word64 r13_18
	word64 r14_19
	word64 r15_20
	fn000000000040E450(rcx_7, 0xFFFFFFFFFFFFFFFF, rdi, rdi_10, r11, fs, out rbp_15, out r11_16, out r12_17, out r13_18, out r14_19, out r15_20)
	return rbx
// DataOut: fs r11 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp rsi:rdi ecx:0x0061A5A0 rdx:0xFFFFFFFFFFFFFFFF edi:0x00000000

fn000000000040EC10_exit:
// DataOut: r11 r13 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rsi:<invalid> ecx:<invalid> rdx:<invalid> edi:<invalid> r15:<invalid> rax:<invalid> r13:<invalid> eax:<invalid> r12:<invalid> ebp:<invalid> r8d:<invalid> r11:<invalid> r14:<invalid> rcx:<invalid> r9d:<invalid> rdi:<invalid> rbp:<invalid> rbx:<invalid> r14d:<invalid> esi:<invalid> edx:<invalid> ebx:<invalid> r9:<invalid> r8:<invalid> al:<invalid> cl:<invalid> r10:<invalid> r11d:<invalid> r12d:<invalid> dx:<invalid> dl:<invalid> esp:<invalid> sil:<invalid>



word64 fn000000000040EC30(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 qwArg04, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi rdx rsi
// LiveOut: bpl ebp r12 rax rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esp r12 r12b r12d r12w rax rbp rcx rdx rsp sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn000000000040EC30_entry:
	*r12Out = r12
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC30:
	word64 rbp_13 = rdi
	branch rdx == 0x0000000000000000 l000000000040EC69
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC40:
	word64 rsp_54
	word64 rdx_55
	byte SZO_56
	byte C_57
	word64 rdi_59
	byte Z_61
	word64 r12_62
	word64 rsi_63
	word32 ecx_64
	word64 rax_65
	word32 edx_66
	byte dl_68
	byte SCZO_69
	word32 ebp_70
	word64 rcx_67
	word64 rbx_60
	call __ctype_tolower_loc (retsize: 8; depth: 20)
		uses: C_8,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_17,ebp_14,ecx,edx,qwLoc0C,r12_52,rax,rbp_13,rbx_18,rcx,rdi,rdx,rsi,rsp_15,SCZO,SZO_6,Z_7
		defs: C_57,dl_68,ebp_70,ecx_64,edx_66,r12_62,rax_65,rbp_58,rbx_60,rcx_67,rdi_59,rdx_55,rsi_63,rsp_54,SCZO_69,SZO_56,Z_61
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:rdx - 0x0000000000000001 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC50:
	rcx_67 = DPB(rcx_67, (word32) Mem0[r12_62 + rbx_60:byte], 0) (alias)
	Mem79[rbp_13 + rbx_60:byte] = (byte) Mem0[Mem0[rax_65:word64] + rcx_67 * 0x00000004:word32]
	rbx_60 = rbx_60 - 0x0000000000000001
	branch rbx_60 != 0xFFFFFFFFFFFFFFFF l000000000040EC50
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC69:
	word32 ebp_44
	*ebpOut = (word32) fp
	word64 rsp_48
	*rspOut = qwArg04 + 0x0000000000000008
	return rbp_13
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040EC30_exit:
// DataOut: bpl ebp r12 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp rbx:rbx rax:rdi r12:rsi ecx:<invalid> rdx:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040EC80(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 qwArg04, ptr64 & rspOut, ptr64 & ebpOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi rdx rsi
// LiveOut: bpl ebp r12 rax rsp
// Trashed: SCZO ah al ax bp bpl ch cl cx dh dl dx eax ebp ecx edx esp r12 r12b r12d r12w rax rbp rcx rdx rsp sp spl
// Preserved: rbx
// Stack args: Stack +0004(64)
fn000000000040EC80_entry:
	*r12Out = r12
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC80:
	word64 rbp_13 = rdi
	branch rdx == 0x0000000000000000 l000000000040ECB9
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040EC90:
	word64 rsp_54
	word64 rdx_55
	byte SZO_56
	byte C_57
	word64 rdi_59
	byte Z_61
	word64 r12_62
	word64 rsi_63
	word32 ecx_64
	word64 rax_65
	word32 edx_66
	byte dl_68
	byte SCZO_69
	word32 ebp_70
	word64 rcx_67
	word64 rbx_60
	call __ctype_toupper_loc (retsize: 8; depth: 20)
		uses: C_8,dl,dwLoc04_4,dwLoc08_11,dwLoc0C_17,ebp_14,ecx,edx,qwLoc0C,r12_52,rax,rbp_13,rbx_18,rcx,rdi,rdx,rsi,rsp_15,SCZO,SZO_6,Z_7
		defs: C_57,dl_68,ebp_70,ecx_64,edx_66,r12_62,rax_65,rbp_58,rbx_60,rcx_67,rdi_59,rdx_55,rsi_63,rsp_54,SCZO_69,SZO_56,Z_61
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:rdx - 0x0000000000000001 -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040ECA0:
	rcx_67 = DPB(rcx_67, (word32) Mem0[r12_62 + rbx_60:byte], 0) (alias)
	Mem79[rbp_13 + rbx_60:byte] = (byte) Mem0[Mem0[rax_65:word64] + rcx_67 * 0x00000004:word32]
	rbx_60 = rbx_60 - 0x0000000000000001
	branch rbx_60 != 0xFFFFFFFFFFFFFFFF l000000000040ECA0
// DataOut: fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp
// LocalsOut: fp(64) Stack +0004(64)

l000000000040ECB9:
	word32 ebp_44
	*ebpOut = (word32) fp
	word64 rsp_48
	*rspOut = qwArg04 + 0x0000000000000008
	return rbp_13
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbp:rdi rbx:<invalid> r12:rsi ecx:<invalid> rdx:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn000000000040EC80_exit:
// DataOut: bpl ebp r12 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:fp rbx:rbx rax:rdi r12:rsi ecx:<invalid> rdx:<invalid> edx:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn000000000040ECD0(word64 rax, word64 rcx, word64 rdx, word32 ebp, word64 rsi, word64 rdi, word32 r9d, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & esiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl cl ebp fs r11d r14 r15b r9d rax rcx rdi rdx rsi
// LiveOut: edi esi r11 r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: r11d r9d rbx
fn000000000040ECD0_entry:
	*r8Out = r8
	*r15Out = r15
	*r14Out = r14
	*r9Out = r9
	*r11Out = r11
// DataOut: bpl cl ebp fs r11 r11d r14 r14d r15 r15b r8 r9 r9d rax rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000040ECD0:
	word64 rax_27 = Mem0[rax + 0x0000000000000030:word64]
	word64 r10_457 = rdx
	word64 r12_1029
	*r12Out = rsi
	word64 rbx_1002 = rcx
	word64 rsp_138 = fp - 0x00000000000004F0
	word32 esi_32 = Mem0[rax_27 + 0x0000000000000008:word32]
	branch esi_32 <= 0x0000000C l000000000040EEE0
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0004(0) Local -0008(0) Local -04B0(32)

l000000000040EEE0:
	branch esi_32 == 0x00000000 l000000000040EEEE
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> esi:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040EEEB_1:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> esi:<invalid> eax:0x0000000C -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040EEEE:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED26:
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> esi:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED2B:
	word64 rsi_1037
	word64 r14_1038
	word64 rax_108
	word32 eax_46 = (word32) Mem0[rcx:byte]
	word32 esi_137 = esi_32
	word64 rax_214 = DPB(rax_27, eax_46, 0)
	byte al_307 = (byte) eax_46
	word64 r13_1030
	*r13Out = DPB(r13, 0x00000000, 0)
	branch al_307 == 0x00 l000000000040F053
// DataOut: al bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0004(0) Local -0008(0)

l000000000040ED39:
	rsi_1037 = fp - 0x000000000000042F
	*r14Out = rdx
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000004F0 r10:rdx r12:rsi rbx:rcx rax:<invalid> rsi:<invalid> esi:<invalid> eax:(word32) Mem0[rcx:byte] r13d:0x00000000 -1249(fp):dil -1248(fp):r8 -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED85:
	branch al_307 != 0x25 l000000000040ED50
	branch al_307 != 0x25 l000000000040ED50
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED50:
	rdx = r14_1038 - r13_1030
	branch rdx <=u 0x0000000000000001 l000000000040EE98
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED60:
	branch r12_1029 == 0x0000000000000000 l000000000040ED6D
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED65:
	Mem1034[r12_1029:byte] = al_307
	*r12Out = r12_1029 + 0x0000000000000001
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED6D:
	*r13Out = r13_1030 + 0x0000000000000001
	word64 r8_1033
	*r8Out = rbx_1002
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED89:
	r9d = (word32) Mem0[rsp_138 + 0x000000000000000F:byte]
	byte r9b_634 = (byte) r9d
	r9 = DPB(r9, r9d, 0) (alias)
	*r9Out = r9
	r11d = 0x00000000
	*r11Out = DPB(r11, 0x00000000, 0)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED94:
	rbx_1002 = rbx_1002 + 0x0000000000000001
	byte dil_1004 = (byte) (word32) Mem0[rbx_1002:byte]
	byte SZO_1008 = cond(dil_1004 - 0x30)
	branch dil_1004 == 0x30 l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDA1:
	branch SZO_1008 l000000000040EDD0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDD0:
	branch dil_1004 != 0x5E l000000000040EE70
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE70:
	branch dil_1004 != 0x5F l000000000040EDEE
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE7A:
	r11d = (int32) dil_1004
	*r11Out = DPB(r11, r11d, 0)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDDA:
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDA3:
	branch dil_1004 != 0x23 l000000000040EDE8
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDE8:
	branch dil_1004 == 0x2D l000000000040EDC0
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDEE:
	word32 ebp_683 = 0xFFFFFFFF
	rbp = DPB(rbp, 0xFFFFFFFF, 0) (alias)
	branch (int32) dil_1004 >u 0x00000039 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDFF:
	ebp_683 = 0x00000000
	rbp = DPB(rbp, 0x00000000, 0) (alias)
// DataOut: ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:0xFFFFFFFF ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE28:
	branch ebp_683 <= 0x0CCCCCCC l000000000040EE08
	branch ebp_683 <= 0x0CCCCCCC l000000000040EE08
// DataOut: ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE08:
	word32 edx_987 = (int32) Mem0[rbx_1002:byte]
	rdx = DPB(rdx, edx_987, 0) (alias)
	byte dl_989 = (byte) edx_987
	branch ebp_683 == 0x0CCCCCCC l000000000040EE88
// DataOut: dl ebp edx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE88:
	branch dl_989 <= 0x37 l000000000040EE0D
// DataOut: ebp edx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE8D:
	ebp_683 = 0x7FFFFFFF
	rbp = DPB(rbp, 0x7FFFFFFF, 0) (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE0D:
	rcx = DPB(rcx, rbp * 0x00000005, 0) (alias)
	ebp_683 = rdx - 0x0000000000000030 + rcx * 0x00000002
	rbp = DPB(rbp, ebp_683, 0) (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE30:
	ebp_683 = 0x7FFFFFFF
	rbp = DPB(rbp, 0x7FFFFFFF, 0) (alias)
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE15:
	rbx_1002 = rbx_1002 + 0x0000000000000001
	dil_1004 = (byte) (word32) Mem0[rbx_1002:byte] (alias)
	branch (int32) dil_1004 >u 0x00000039 l000000000040EE40
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE40:
	branch dil_1004 == 0x45 l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE4A:
	branch dil_1004 == 0x4F l000000000040EEC8
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EEC8:
	rbx_1002 = rbx_1002 + 0x0000000000000001
	dil_1004 = (byte) (word32) Mem0[rbx_1002:byte] (alias)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE52:
	word64 r8_716
	esi_137 = (int32) dil_1004
	branch dil_1004 >u 0x7A l000000000040FF4D
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040FF4D:
	r8_716 = rbx_1002
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE60:
	switch (DPB(rdx, (word32) dil_1004, 0)) { l000000000040FEFB }
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(int32) dil - 0x00000030 ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040FEFB:
	r8_716 = r11 - 0x0000000000000001
	dil_1004 = (byte) (word32) Mem0[rbx_1002 - 0x0000000000000001:byte] (alias)
// DataOut: bpl dil ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:(word32) dil ebp:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F39F:
	word64 r15_723
	branch dil_1004 != 0x25 l000000000040F0B2
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r8 r9 r9b r9d rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r13:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0B2:
	rax_214 = r8_716 - 0x0000000000000001
	word32 ecx_909 = 0x00000001
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r13:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0C1:
	*r15Out = rax_214
	rax_214 = rax_214 - 0x0000000000000001
	ecx_909 = ecx_909 + 0x00000001
	branch Mem0[rax_214 + 0x0000000000000001:byte] != 0x25 l000000000040F0C1
// DataOut: bpl ebp ecx fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9b r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0D1:
	rcx = (int64) ecx_909
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> r13:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F3A9:
	*r15Out = r8_716
	rcx = DPB(rcx, 0x00000001, 0) (alias)
	cl = 0x01 (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> rdx:<invalid> r13:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0D7:
	word64 r8_724 = r8_716
	*r8Out = r8_724
	word64 rax_733 = DPB(rax_214, 0x00000000, 0)
	byte al_734 = 0x00
	branch ebp_683 < 0x00000000 l000000000040F0E1
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rcx:<invalid> rdx:<invalid> r13:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0DE_1:
	rax_733 = DPB(rax_214, ebp_683, 0) (alias)
	al_734 = (byte) ebp_683 (alias)
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:rdx rcx:<invalid> r13:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0E1:
	rax_214 = DPB(rax_733, (int16) al_734, 0) (alias)
	rbx_1002 = rax_214
	branch rcx <u rax_214 l000000000040F0ED
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:rdx rcx:<invalid> r13:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0E9_2:
	rbx_1002 = rcx
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:rdx ax:(int16) al rcx:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0ED:
	rdx = r14_1038 - r13_1030
	branch rbx_1002 >=u rdx l000000000040EE98
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:rdx ax:(int16) al rcx:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0F9:
	branch r12_1029 == 0x0000000000000000 l000000000040F16E
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:(int16) al rcx:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F0FE:
	branch rax_214 <=u rcx l000000000040F144
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:(int16) al rcx:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F103:
	Mem852[rsp_138 + 0x0000000000000030:word64] = rcx
	Mem853[rsp_138 + 0x0000000000000028:word32] = r9d
	Mem858[rsp_138 + 0x0000000000000018:word64] = r8_716
	rbp = (int64) ebp_683 - rcx
	branch r11d == 0x00000030 l000000000040F1C1
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:(int16) al rcx:<invalid> r13:<invalid> rdi:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F1C1:
	rax_214 = memset(r12_1029, DPB(rsi_1037, 0x00000030, 0), rbp)
	r9d = Mem858[rsp_138 + 0x0000000000000028:word32]
	r12_1029 = r12_1029 + rbp
	r8_724 = Mem858[rsp_138 + 0x0000000000000018:word64]
	r9b_634 = (byte) r9d (alias)
	*r9Out = DPB(r9, r9d, 0)
	rcx = Mem858[rsp_138 + 0x0000000000000030:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:(int16) al rbp:<invalid> rcx:<invalid> r13:<invalid> rdi:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F125:
	rax_214 = memset(r12_1029, DPB(rsi_1037, 0x00000020, 0), rbp)
	r9d = Mem858[rsp_138 + 0x0000000000000028:word32]
	r12_1029 = r12_1029 + rbp
	rcx = Mem858[rsp_138 + 0x0000000000000030:word64]
	r9b_634 = (byte) r9d (alias)
	*r9Out = DPB(r9, r9d, 0)
	r8_724 = Mem858[rsp_138 + 0x0000000000000018:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:(int32) dil eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:(int16) al rbp:<invalid> rcx:<invalid> r13:<invalid> rdi:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F144:
	Mem809[rsp_138 + 0x0000000000000028:word64] = r8_724
	Mem813[rsp_138 + 0x0000000000000018:word64] = rcx
	rdx = rcx
	rsi_1037 = r15_723
	esi_137 = (word32) r15_723 (alias)
	branch r9b_634 == 0x00 l000000000040F180
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:<invalid> rbp:<invalid> rdi:<invalid> rcx:<invalid> r13:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F180:
	rax_214 = memcpy(r12_1029, r15_723, rcx)
	rcx = Mem813[rsp_138 + 0x0000000000000018:word64]
	word64 r8_847
	*r8Out = Mem813[rsp_138 + 0x0000000000000028:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> r13:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F15C:
	word32 ebp_833
	rax_214 = fn000000000040EC80(rax_214, rcx, r15_723, r12_1029, qwLoc04, out rsp_138, out ebp_833, out r12_1029)
	rcx = Mem813[rsp_138 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
	word64 r8_842
	*r8Out = Mem813[rsp_138 + 0x0000000000000028:word64]
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> r13:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F16B:
	*r12Out = r12_1029 + rcx
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:<invalid> rdi:<invalid> rbp:<invalid> rcx:<invalid> r13:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F16E:
	*r13Out = r13_1030 + rbx_1002
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r8:<invalid> r15:<invalid> rdx:<invalid> ax:<invalid> rcx:<invalid> rdi:<invalid> rbp:<invalid> r13:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040ED74:
	word32 eax_580 = (word32) Mem0[rax_214 + 0x0000000000000001:byte]
	rax_214 = DPB(rax_214, eax_580, 0) (alias)
	al_307 = (byte) eax_580 (alias)
	rbx_1002 = rax_214 + 0x0000000000000001
	branch al_307 == 0x00 l000000000040F050
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F050:
	r10_457 = r14_1038
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F053:
	branch r12_1029 == 0x0000000000000000 l000000000040F191
// DataOut: bpl cl ebp fs r10 r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F05C:
	branch r10_457 == 0x0000000000000000 l000000000040F191
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F191:
	rax_108 = r13_1030
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F065:
	Mem502[r12_1029:byte] = 0x00
	rax_108 = r13_1030
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:rdx r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE9A:
	word64 rsi_150 = Mem0[rsp_138 + 0x00000000000004C8:word64] ^ Mem0[fs:0x00000028:word64]
	branch rsi_150 != 0x0000000000000000 l00000000004105EA
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l00000000004105EA:
	__stack_chk_fail()
	Mem183[rsp_138 + 0x0000000000000018:word32] = 0x00000000
// DataOut: bpl cl ebp fs r11d r12 r13 r14 r14d r15 r15b r9d rbx rsp sil
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F25D:
	Mem184[rsp_138 + 0x00000000000000B2:byte] = cl
	byte dil_186 = (byte) esi_137
	word64 rax_189 = rsp_138 + 0x00000000000000B3
// DataOut: bpl dil ebp fs r11d r12 r13 r14 r14d r15 r15b r8 r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF37:
	Mem196[rax_189:byte] = dil_186
	Mem199[rax_189 + 0x0000000000000001:byte] = 0x00
	Mem201[rsp_138 + 0x0000000000000038:word32] = r9d
	Mem202[rsp_138 + 0x0000000000000030:word32] = r11d
	Mem203[rsp_138 + 0x0000000000000028:word64] = rbx_1002
	word64 rdi_205
	word64 r10_206
	word64 rbx_211
	byte SCZO_213
	byte SZO_217
	byte C_218
	word64 r8_219
	word32 r9d_220
	byte dil_221
	word32 eax_222
	word32 r13d_223
	byte al_224
	byte Z_225
	word32 r11d_227
	word32 edi_228
	byte CZ_230
	word32 ecx_231
	word32 edx_232
	word32 ebp_233
	word64 r11_234
	word64 r15_235
	byte S_236
	word16 ax_237
	byte dl_238
	byte r9b_239
	byte r15b_241
	word64 r9_242
	call strftime (retsize: 8; depth: 8)
		uses: al_191,ax_192,bLoc04E1_38,C_153,cl_195,CZ_145,dil_186,dl_124,dwLoc04_4,dwLoc04AC_36,dwLoc04B0_43,dwLoc08_9,dwLoc0C_12,dwLoc10_15,dwLoc14_18,dwLoc18_21,eax_190,ebp_136,ecx_194,edi_185,edx_123,esi_200,fs_117,qwLoc04A8_39,qwLoc04D0_113,qwLoc04E0_34,qwLoc28_30,r10_118,r11_148,r11d_147,r12_129,r13_133,r13d_134,r14_116,r15_115,r15b_114,r8_188,r9_121,r9b_120,r9d_119,rax_189,rbp_135,rbx_139,rcx_193,rdi_198,rdx_197,rsi_150,rsp_138,S_146,SCZO_144,SZO_151,Z_152
		defs: al_224,ax_237,C_218,cl_240,CZ_230,dil_221,dl_238,eax_222,ebp_233,ecx_231,edi_228,edx_232,esi_216,fs_215,r10_206,r11_234,r11d_227,r12_210,r13_229,r13d_223,r14_226,r15_235,r15b_241,r8_219,r9_242,r9b_239,r9d_220,rax_214,rbp_209,rbx_211,rcx_212,rdi_205,rdx_207,rsi_208,rsp_204,S_236,SCZO_213,SZO_217,Z_225
	r11d = Mem203[rsp_138 + 0x0000000000000030:word32]
	r9d = Mem203[rsp_138 + 0x0000000000000038:word32]
	word64 r8_246 = Mem203[rsp_138 + 0x0000000000000028:word64]
	*r8Out = r8_246
	r11 = DPB(r11_234, r11d, 0) (alias)
	*r11Out = r11
	byte r9b_250 = (byte) r9d
	r9 = DPB(r9_242, r9d, 0) (alias)
	*r9Out = r9
	branch rax_214 == 0x0000000000000000 l000000000040ED74
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> r14:rdx rdx:<invalid> r13:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF84:
	rbx_1002 = rax_214 - 0x0000000000000001
	word64 rax_254 = DPB(rax_214, 0x00000000, 0)
	byte al_255 = 0x00
	branch ebp_233 < 0x00000000 l000000000040EF8F
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> r14:rdx r13:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF8C_1:
	rax_254 = DPB(rax_214, ebp_233, 0) (alias)
	al_255 = (byte) ebp_233 (alias)
// DataOut: al bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> r14:rdx r13:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF8F:
	word16 ax_266 = (int16) al_255
	rax_214 = DPB(rax_254, ax_266, 0) (alias)
	rcx = rax_214 - 0x0000000000000001
	cl = (byte) (rax_214 - 0x0000000000000001) (alias)
	branch rax_214 <u rax_214 - 0x0000000000000001 l000000000040EF9E
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> r14:rdx r13:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF9A_2:
	rcx = rax_214
	cl = (byte) ax_266 (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:(int16) al r14:rdx r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EF9E:
	rdx = r14_1038 - r13_1030
	branch rcx >=u rdx l000000000040EE98
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:(int16) al r14:rdx r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EE98:
	rax_108 = DPB(rax_214, 0x00000000, 0) (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFAA:
	branch r12_1029 == 0x0000000000000000 l000000000040F03A
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:(int16) al r14:rdx r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFB3:
	branch rax_214 - 0x0000000000000001 >=u rax_214 l000000000040F001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:(int16) al r14:rdx r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFB8:
	word32 eax_395 = Mem203[rsp_138 + 0x0000000000000018:word32]
	rax_214 = DPB(rax_254, eax_395, 0) (alias)
	branch eax_395 != 0x00000000 l000000000040F001
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:(int16) al r14:rdx r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFC0:
	Mem403[rsp_138 + 0x0000000000000030:word64] = rcx
	Mem404[rsp_138 + 0x0000000000000028:word32] = r9d
	Mem409[rsp_138 + 0x0000000000000018:word64] = r8_246
	rbp = (int64) ebp_233 - (rax_214 - 0x0000000000000001)
	branch r11d == 0x00000030 l0000000000410239
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b rbp rbx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> r14:rdx r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l0000000000410239:
	rax_214 = memset(r12_1029, DPB(rsi_1037, 0x00000030, 0), rbp)
	r9d = Mem409[rsp_138 + 0x0000000000000028:word32]
	r12_1029 = r12_1029 + rbp
	r8_246 = Mem409[rsp_138 + 0x0000000000000018:word64]
	r9b_250 = (byte) r9d (alias)
	*r9Out = DPB(r9_242, r9d, 0)
	rcx = Mem409[rsp_138 + 0x0000000000000030:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> r14:rdx r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EFE2:
	rax_214 = memset(r12_1029, DPB(rsi_1037, 0x00000020, 0), rbp)
	r9d = Mem409[rsp_138 + 0x0000000000000028:word32]
	r12_1029 = r12_1029 + rbp
	rcx = Mem409[rsp_138 + 0x0000000000000030:word64]
	r9b_250 = (byte) r9d (alias)
	*r9Out = DPB(r9_242, r9d, 0)
	r8_246 = Mem409[rsp_138 + 0x0000000000000018:word64]
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9b r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> r14:rdx r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F001:
	Mem335[rsp_138 + 0x0000000000000028:word64] = rcx
	Mem336[rsp_138 + 0x0000000000000018:word64] = r8_246
	rsi_1037 = Mem336[rsp_138 + 0x0000000000000020:word64]
	rdx = rax_214 - 0x0000000000000001
	esi_137 = (word32) rsi_1037 (alias)
	branch r15b_241 != 0x00 l000000000040F1AD
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9b r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F1AD:
	word32 ebp_385
	rax_214 = fn000000000040EC30(rax_214, rax_214 - 0x0000000000000001, rsi_1037, r12_1029, qwLoc04, out rsp_138, out ebp_385, out r12_1029)
	rcx = Mem336[rsp_138 + 0x0000000000000028:word64]
	word64 r8_391
	*r8Out = Mem336[rsp_138 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F01F:
	branch r9b_250 == 0x00 l000000000040F199
// DataOut: bpl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r9 r9d rax rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F199:
	rax_214 = memcpy(r12_1029, rsi_1037, rax_214 - 0x0000000000000001)
	rcx = Mem336[rsp_138 + 0x0000000000000028:word64]
	cl = (byte) rcx (alias)
	word64 r8_383
	*r8Out = Mem336[rsp_138 + 0x0000000000000018:word64]
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F028:
	word32 ebp_366
	rax_214 = fn000000000040EC80(rax_214, rax_214 - 0x0000000000000001, rsi_1037, r12_1029, qwLoc04, out rsp_138, out ebp_366, out r12_1029)
	rcx = Mem336[rsp_138 + 0x0000000000000028:word64]
	word64 r8_372
	*r8Out = Mem336[rsp_138 + 0x0000000000000018:word64]
	cl = (byte) rcx (alias)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> r14:rdx rbp:<invalid> r13:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F037:
	*r12Out = r12_1029 + (rax_214 - 0x0000000000000001)
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rcx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> rbp:<invalid> ecx:<invalid> edx:<invalid> r14:rdx r13:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F03A:
	word32 eax_305 = (word32) Mem203[rax_214 + 0x0000000000000001:byte]
	rax_214 = DPB(rax_214, eax_305, 0) (alias)
	al_307 = (byte) eax_305 (alias)
	*r13Out = r13_1030 + rcx
	rbx_1002 = rax_214 + 0x0000000000000001
	branch al_307 != 0x00 l000000000040ED85
// DataOut: al bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> r14:rdx rbp:<invalid> ecx:<invalid> edx:<invalid> r13:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040F04E:
// DataOut: bpl cl ebp fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> edi:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> r13:<invalid> r14:rdx rbp:<invalid> ecx:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EEB1:
	word64 rsp_160 = Mem0[rsp_138 + 0x00000000000004E8:word64]
	word64 rbp_162
	*rbpOut = Mem0[rsp_160 + 0x0000000000000008:word64]
	word32 esi_166
	*esiOut = (word32) Mem0[rsp_160 + 0x0000000000000010:word64]
	word64 rdi_168
	*rdiOut = Mem0[rsp_160 + 0x0000000000000018:word64]
	word64 rsp_171
	*rspOut = rsp_160 + 0x0000000000000020
	return rax_108
// DataOut: edi esi fs r11 r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> rdi:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbp:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn000000000040ECD0_exit:
// DataOut: edi esi r11 r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> rbp:<invalid> rdi:<invalid> r14:rdx rdx:<invalid> r13:<invalid> r8:<invalid> edi:<invalid> rcx:<invalid> r11d:<invalid> r9d:<invalid> ax:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000040EDA9:
	rbx_1002 = rbx_1002 + 0x0000000000000001
	dil_1004 = (byte) (word32) Mem0[rbx_1002:byte] (alias)
	SZO_1008 = cond(dil_1004 - 0x30) (alias)
	branch dil_1004 != 0x30 l000000000040EDA1
// DataOut: dil fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): SZO
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDBB:
// DataOut: dil fs r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:0x00000001 r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:0x0001 rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)

l000000000040EDC0:
	r11d = (int32) dil_1004
	*r11Out = DPB(r11, r11d, 0)
// DataOut: fs r11 r11d r12 r13 r14 r14d r9 r9b r9d rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r10:<invalid> r12:<invalid> rbx:<invalid> rax:<invalid> rsi:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> r14:rdx r9d:<invalid> r11d:<invalid> edi:<invalid> ecx:<invalid> rdx:<invalid> r13:<invalid> r8:<invalid> rcx:<invalid> rdi:<invalid> ax:<invalid> rbp:<invalid> edx:<invalid> ebp:<invalid> r15:<invalid> -1249(fp):dil -1248(fp):r8 -1240(fp):<invalid> -1232(fp):fp - 0x000000000000042F -1224(fp):<invalid> -1216(fp):<invalid> -1208(fp):<invalid> -1200(fp):<invalid> -1196(fp):r9d -1192(fp):<invalid> -1086(fp):cl -1085(fp):dil -1084(fp):0x00 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: Local -0004(0) Local -0008(0)



word64 fn0000000000410600(word64 rax, word64 rdx, word32 ebp, word64 rsi, word64 rdi, word32 r8d, word32 r11d, word64 r14, byte r15b, selector fs, ptr64 & rbpOut, ptr64 & esiOut, ptr64 & rdiOut, ptr64 & r8Out, ptr64 & r9Out, ptr64 & r11Out, ptr64 & r12Out, ptr64 & r13Out, ptr64 & r14Out, ptr64 & r15Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  bpl ebp fs r11d r14 r15b r8d rax rdi rdx rsi
// LiveOut: edi esi r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r11 r11b r11d r11w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410600_entry:
// DataOut: bpl ebp fs r11d r14 r15b r8d rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410600:
	word64 rsp_29
	word64 rbp_30
	word32 esi_31
	word64 rdi_32
	word64 r8_33
	word64 r9_34
	word64 r11_35
	word64 r12_36
	word64 r13_37
	word64 r14_38
	word64 r15_39
	return fn000000000040ECD0(rax, rdx, rsi, ebp, rdi, DPB(rdi, 0x00000000, 0), r8d, r11d, r14, r15b, fs, out rsp_29, out rbp_30, out esi_31, out rdi_32, out r8_33, out r9_34, out r11_35, out r12_36, out r13_37, out r14_38, out r15_39)
// DataOut: edi esi fs r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000410600_exit:
// DataOut: edi esi r11 r11d r12 r13 r14 r14d r15 r15b r8 r9 rax rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9d:<invalid> r8:<invalid> rcx:<invalid> rdx:<invalid> rsi:<invalid> edi:<invalid> r10:<invalid> r12:<invalid> rax:<invalid> esi:<invalid> eax:<invalid> r13d:<invalid> rbp:<invalid> rdi:<invalid> r14:<invalid> r13:<invalid> ax:<invalid> r11d:<invalid> edx:<invalid> ebp:<invalid> ecx:<invalid> r15:<invalid> rbx:<invalid> -24(fp):r9d



word64 fn0000000000410630(word64 rsi, word64 rdi, word64 r8, word64 r9, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 r9 rdi rsi
// LiveOut: rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved:
fn0000000000410630_entry:
// DataOut: r11 r8 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410630:
	word64 rsi_220
	word64 rdx_218
	branch rsi == 0x0000000000000000 l0000000000410A30
// DataOut: r11 r12 rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64)

l0000000000410A30:
	rsi_220 = DPB(rsi, 0x00000001, 0) (alias)
	rdx_218 = DPB(rdx, 0x004168CC, 0) (alias)
	word64 rax_237 = DPB(rax, __fprintf_chk(rdi, rsi_220, rdx_218), 0)
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410650:
	rdx_218 = DPB(rdx, 0x004168C0, 0) (alias)
	rsi_220 = DPB(rsi, 0x00000001, 0) (alias)
	word64 rax_226 = DPB(rax, __fprintf_chk(rdi, rsi_220, rdx_218), 0)
// DataOut: r11 r12 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041066A:
	word64 rax_47 = DPB(dcgettext(DPB(rdi, 0x00000000, 0), DPB(rsi_220, 0x004168D3, 0), DPB(rdx_218, 0x00000005, 0)), __fprintf_chk(rdi, DPB(rsi_220, 0x00000001, 0), DPB(rdx_218, 0x00416BA0, 0)), 0)
	word64 rdx_53 = DPB(rdx_218, 0x00000005, 0)
	word64 rax_56 = dcgettext(DPB(rdi, 0x00000000, 0), DPB(rsi_220, 0x00416930, 0), rdx_53)
	word64 rsp_59
	word64 rdi_60
	word64 rsi_61
	word64 rbp_62
	word64 r12_63
	word64 r9_64
	word64 rbx_65
	word64 r8_66
	byte SCZO_67
	byte SZO_68
	byte C_69
	byte Z_70
	word64 rcx_71
	word64 rdx_72
	word32 edx_73
	word32 esi_74
	word32 eax_75
	word64 rax_76
	word32 edi_77
	byte CZ_78
	word64 r10_79
	word64 r11_80
	word64 r13_81
	word64 r15_82
	word64 r14_83
	call fputs_unlocked (retsize: 8; depth: 120)
		uses: C_51,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_17,dwLoc18_21,eax_45,edi_48,edx_52,esi_54,r12_15,r8,r9,rax_56,rbp_18,rbx_23,rcx_39,rdi_58,rdx_53,rsi_57,rsp_24,SZO_50,Z_26
		defs: C_69,CZ_78,eax_75,edi_77,edx_73,esi_74,r10_79,r11_80,r12_63,r13_81,r14_83,r15_82,r8_66,r9_64,rax_76,rbp_62,rbx_65,rcx_71,rdi_60,rdx_72,rsi_61,rsp_59,SCZO_67,SZO_68,Z_70
	branch r12_63 >u 0x0000000000000009 l0000000000410A50
// DataOut: r11 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:rcx r8:<invalid> rcx:<invalid> edx:<invalid> esi:0x00000001 eax:<invalid> rax:DPB(rax, <invalid>, 0) -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410A50:
	word64 rdx_160 = DPB(rdx_72, 0x00000005, 0)
	word64 rsi_164 = DPB(rsi_61, 0x00416B08, 0)
// DataOut: rbp rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:<invalid> r8:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> rax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004107A1:
	word64 rax_176 = dcgettext(DPB(rdi_60, 0x00000000, 0), rsi_164, rdx_160)
	word64 rax_194 = DPB(rax_176, __fprintf_chk(rbp_62, DPB(rsi_61, 0x00000001, 0), rax_176), 0)
	return qwLoc08 + 0x0000000000000020
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:<invalid> rbp:rdi rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> edx:0x00000005 esi:0x00416B08 eax:<invalid> rax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> r10:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004106BE:
	word64 rsp_132
	word64 rdi_133
	word64 rsi_134
	word64 rbp_135
	word64 r12_136
	word64 r9_137
	word64 rbx_138
	word64 r8_139
	byte SCZO_140
	byte SZO_141
	byte C_142
	byte Z_143
	word64 rcx_144
	word64 rdx_145
	word32 edx_146
	word32 esi_147
	word32 eax_148
	word64 rax_149
	word32 edi_150
	byte CZ_151
	word64 r10_152
	word64 r11_153
	word64 r13_154
	word64 r15_155
	word64 r14_156
	call Mem0[0x00416B48:word32] (retsize: 4; depth: 116)
		uses: C_69,CZ_85,dwLoc04_4,dwLoc08_7,dwLoc0C_10,dwLoc10_13,dwLoc14_17,dwLoc18_21,eax_75,edi_77,edx_73,esi_74,qwLoc28,qwLoc30,qwLoc38,qwLoc40,qwLoc48,qwLoc50,qwLoc58,qwLoc60,qwLoc68,qwLoc70,r10_79,r11_80,r12_63,r13_81,r14_83,r15_82,r8_66,r9_64,rax_76,rbp_62,rbx_65,rcx_71,rdi_60,rdx_72,rsi_61,rsp_59,SCZO_84,SZO_68,Z_70
		defs: C_142,CZ_151,eax_148,edi_150,edx_146,esi_147,r10_152,r11_153,r12_136,r13_154,r14_156,r15_155,r8_139,r9_137,rax_149,rbp_135,rbx_138,rcx_144,rdi_133,rdx_145,rsi_134,rsp_132,SCZO_140,SZO_141,Z_143
	return rsp_132
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000070 r12:r9 rbp:rdi rbx:r8 r9:<invalid> r8:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> rax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000410630_exit:
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> r9:<invalid> r8:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> eax:<invalid> rax:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> r10:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> rdx:<invalid> -112(fp):<invalid> -104(fp):<invalid> -96(fp):<invalid> -88(fp):<invalid> -80(fp):<invalid> -72(fp):<invalid> -64(fp):<invalid> -56(fp):<invalid> -48(fp):<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn0000000000410AC0(word64 rax, word64 rdx, word64 rsi, word64 rdi, word64 r8, word64 r11)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  r11 r8 rax rdi rdx rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rsp
fn0000000000410AC0_entry:
// DataOut: r11 r8 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AC0:
	word64 r9_16 = DPB(r9, 0x00000000, 0)
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410AF3:
	word32 eax_20 = Mem0[rax:word32]
	word64 rax_21 = DPB(rax, eax_20, 0)
	branch eax_20 <u 0x00000030 l0000000000410AD0
	word32 eax_24 = Mem0[rax_21:word32]
	branch eax_24 <u 0x00000030 l0000000000410AD0
// DataOut: eax r11 r8 r9 rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9d:<invalid> eax:<invalid> r10:<invalid> rax:<invalid> r10d:<invalid> r9:<invalid>
// LocalsOut: fp(64)

l0000000000410AD0:
	Mem77[DPB(rax, eax_24 + 0x00000008, 0):word32] = eax_24 + 0x00000008
	rax = Mem77[rdx:word64]
	Mem83[fp - 0x0000000000000058 + r9_16 * 0x0000000000000008:word64] = rax
	branch rax == 0x0000000000000000 l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9d:<invalid> eax:<invalid> r10:<invalid> rax:<invalid> r10d:<invalid> r9:<invalid>
// LocalsOut: fp(64)

l0000000000410AFB:
	Mem58[rdx + 0x0000000000000010:word64] = rdx + 0x0000000000000008
	word64 rax_59 = Mem58[rdx:word64]
	Mem62[fp - 0x0000000000000058 + r9_16 * 0x0000000000000008:word64] = rax_59
	branch rax_59 != 0x0000000000000000 l0000000000410AE9
	Mem65[rdx + 0x0000000000000010:word64] = rdx + 0x0000000000000008
	rax = Mem65[rdx:word64]
	Mem71[fp - 0x0000000000000058 + r9_16 * 0x0000000000000008:word64] = rax
	branch rax != 0x0000000000000000 l0000000000410AE9
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9d:<invalid> eax:<invalid> r10:<invalid> rax:<invalid> r10d:<invalid> r9:<invalid>
// LocalsOut: fp(64)

l0000000000410AE9:
	r9_16 = r9_16 + 0x0000000000000001
	branch r9_16 == 0x000000000000000A l0000000000410B18
// DataOut: r11 r8 r9 rax rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9d:<invalid> eax:<invalid> r10:<invalid> rax:<invalid> r10d:<invalid> r9:<invalid>
// LocalsOut: fp(64)

l0000000000410B13:
// DataOut: r11 r9 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9d:<invalid> eax:<invalid> r10:<invalid> rax:<invalid> r10d:<invalid> r9:<invalid>
// LocalsOut: fp(64)

l0000000000410B18:
	fn0000000000410630(rsi, rdi, fp - 0x0000000000000058, r9_16, r11)
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000058 r9d:<invalid> eax:<invalid> r10d:<invalid> r10:<invalid> rax:<invalid> r9:<invalid>

fn0000000000410AC0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> r9d:<invalid> eax:<invalid> r10d:<invalid> r10:<invalid> rax:<invalid> r9:<invalid> r8:<invalid> r12:<invalid> rbp:<invalid> rbx:<invalid> rcx:<invalid> edx:<invalid> esi:<invalid> edi:<invalid> rdi:<invalid> rsi:<invalid> r13:<invalid> r15:<invalid> r14:<invalid> rdx:<invalid>



word64 fn0000000000410C40(word64 rsi, word64 rdi, ptr64 & rspOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rsi
// LiveOut: al eax rax rsp
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esp rax rdi rdx rsp sp spl
// Preserved: rbx
fn0000000000410C40_entry:
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14b r14d r15 r15d r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C40:
	word64 rax_15 = malloc(rdi)
	branch rax_15 == 0x0000000000000000 l0000000000410C50
// DataOut: al eax ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14b r14d r15 r15d r8 r9 rax rbp rbx rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp edx:<invalid> rax:(uint64) (rdx_rax /u rsi) rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C50:
	branch rdi == 0x0000000000000000 l0000000000410C4E
// DataOut: al eax ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14b r14d r15 r15d r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> edx:<invalid> rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C55:
	fn0000000000410E50()
	word128 rdx_rax_32 = SEQ(rdx, 0xFFFFFFFFFFFFFFFF)
	rdx = (uint64) (rdx_rax_32 % rsi)
	word64 rax_36 = (uint64) (rdx_rax_32 /u rsi)
	branch rax_36 <u rdi l0000000000410C7A
// DataOut: eax ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14b r14d r15 r15d r8 r9 rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> edx:<invalid> rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C7A:
	Mem42[fp - 0x0000000000000008:word32] = rax_36
	fn0000000000410E50()
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14b r14d r15 r15d r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: edx:<invalid> rax:(uint64) (rdx_rax /u rsi) rdx:(uint64) (rdx_rax % rsi) -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410C71:
	rdi = rdi *s rsi
// DataOut: ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14b r14d r15 r15d r8 r9 rbp rdi rsi
// DataOut (flags): 
// SymbolicIn: edx:<invalid> rax:(uint64) (rdx_rax /u rsi) rdx:(uint64) (rdx_rax % rsi) -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410C4E:
	word64 rsp_25
	*rspOut = fp + 0x0000000000000004
	return rax_15
// DataOut: al eax ebp fs r11 r11d r12 r12b r12d r13 r13b r13d r14 r14b r14d r15 r15d r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rax:<invalid> edx:<invalid> rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx

fn0000000000410C40_exit:
// DataOut: al eax rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> edx:<invalid> rdx:(uint64) (rdx_rax % rsi) rdi:rdi *s rsi -4(fp):rbx



word64 fn0000000000410C90(word64 rdx, word64 rsi, word64 rdi, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & r8Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi rdx rsi
// LiveOut: al ebx r8 rax rsp
// Trashed: SCZO ah al ax bh bl bx ch cl cx dh di dil dl dx eax ebx ecx edi edx esi esp r10 r10b r10d r10w r8 r8b r8d r8w rax rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000410C90_entry:
	*r8Out = r8
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410C90:
	branch rsi == 0x0000000000000000 l0000000000410CB0
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp rcx:<invalid> rax:<invalid> edx:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l0000000000410CB0:
	branch rdi == 0x0000000000000000 l0000000000410C99
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rbx rdi rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> edx:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l0000000000410CB5:
	free(rdi)
	word32 ebx_244
	*ebxOut = (word32) qwLoc04
	word64 rsp_245
	*rspOut = fp + 0x0000000000000004
	return DPB(rax, 0x00000000, 0)
// DataOut: al ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> edx:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx

l0000000000410C99:
	word64 rax_66 = realloc(rdi, rsi)
	word128 rdx_rax_67 = SEQ(rdx, rax_66)
	branch rax_66 == 0x0000000000000000 l0000000000410CBE
// DataOut: al ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rbx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rcx:<invalid> rax:<invalid> edx:<invalid> rdx:<invalid> rsi:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l0000000000410CBE:
	branch rsi == 0x0000000000000000 l0000000000410CA6
// DataOut: al ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64) Local -0004(32)

l0000000000410CC3:
	fn0000000000410E50()
	word128 rdx_rax_87 = DPB(rdx_rax_67, 0x00000000, 64)
	rdx = (uint64) (rdx_rax_87 % rdx)
	rax = (uint64) (rdx_rax_87 /u rdx)
	word128 rdx_rax_92 = SEQ(rdx, rax)
	branch rax <u rsi l0000000000410CED
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410CED:
	Mem100[fp - 0x0000000000000008:word32] = rax
	fn0000000000410E50()
	word64 r8_104
	*r8Out = rdx
	word64 rcx_105 = Mem100[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410D40
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:(uint64) (rdx_rax /u rdx) edx:<invalid> rdx:(uint64) (rdx_rax % rdx) -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410D40:
	branch rcx_105 != 0x0000000000000000 l0000000000410D29
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D45:
	word128 rdx_rax_220 = DPB(rdx_rax_92, 0x00000080, 0)
	rax = (uint64) (rdx_rax_220 /u rdx)
	rdx = (uint64) (rdx_rax_220 % rdx)
	rcx_105 = DPB(rcx_105, rax == 0x0000000000000000, 0) + rax
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D0B:
	word128 rdx_rax_126 = DPB(rdx_rax_92, 0x00000000, 64)
	r8_104 = 0x00000000AAAAAAAA
	*r8Out = r8_104
	rdx = (uint64) (rdx_rax_126 % 0x00000000AAAAAAAA)
	word64 rax_131 = (uint64) (rdx_rax_126 /u 0x00000000AAAAAAAA)
	branch rcx_105 >=u rax_131 l0000000000410D5C
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: r8:rdx rcx:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D5C:
	Mem144[fp - 0x000000000000000C:word32] = rax_131
	fn0000000000410E50()
	rax = Mem144[rsi:word64]
	branch rdi == 0x0000000000000000 l0000000000410DA0
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi rsp
// DataOut (flags): 
// SymbolicIn: r8:0x00000000AAAAAAAA rcx:<invalid> edx:<invalid> rdx:(uint64) (rdx_rax % 0x00000000AAAAAAAA) rax:(uint64) (rdx_rax /u 0x00000000AAAAAAAA) -4(fp):rbx
// LocalsOut: fp(64)
// Terminates process

l0000000000410DA0:
	rdx = DPB(rdx, 0x00000080, 0) (alias)
	branch rax != 0x0000000000000000 l0000000000410DAC
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DA8_1:
	rax = rdx
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> edx:0x00000080 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DAC:
	Mem209[rsi:word64] = rax
	rsi = rax
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> edx:0x00000080 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D78:
	branch rax >u rdx l0000000000410DB7
// DataOut: eax ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rdi rsi rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410DB7:
	Mem164[fp - 0x0000000000000010:word32] = rax
	fn0000000000410E50()
	Mem166[fp - 0x0000000000000014:word32] = rsi
	word64 rsp_168
	word64 rax_169 = fn0000000000410C40(rsi, rdi, out rsp_168)
// DataOut: al ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// Terminates process

l0000000000402480:
	word64 rsp_180
	word64 rsi_181
	byte SZO_182
	byte C_183
	word64 rbx_184
	byte Z_185
	word64 rax_186
	word64 rdi_187
	word32 eax_188
	word64 rcx_189
	word64 rdx_190
	word32 edx_191
	byte SCZO_192
	word64 r8_193
	word32 ecx_194
	byte cl_195
	word64 r10_196
	byte CZ_197
	word32 esi_198
	word32 ebx_199
	call Mem166[0x000000000061A188:word32] (retsize: 4; depth: 4)
		uses: C_175,cl_107,CZ_153,dwLoc04_36,eax_170,ebx_178,ecx_106,edx_130,esi_173,qwLoc04,r10_151,r8_127,rax_169,rbx_177,rcx_105,rdi_176,rdx_171,rsi_63,rsp_179,SCZO_152,SZO_174,Z_146
		defs: C_183,cl_195,CZ_197,eax_188,ebx_199,ecx_194,edx_191,esi_198,r10_196,r8_193,rax_186,rbx_184,rcx_189,rdi_187,rdx_190,rsi_181,rsp_180,SCZO_192,SZO_182,Z_185
	return rax_186
// DataOut: al ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> edx:<invalid> rdx:rdi rdi:<invalid> esi:0x00000000 -4(fp):rbx

l0000000000410D87:
	rdx = rax + 0x0000000000000001 >>u 0x0000000000000001
	rax = rax + rdx
	Mem160[rsi:word64] = rax
	rsi = rax
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rax:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D1F:
	rax = rcx_105 + 0x0000000000000001 >>u 0x0000000000000001
	rcx_105 = rcx_105 + rax
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rcx rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:0x00000000AAAAAAAA rcx:<invalid> edx:<invalid> rdx:(uint64) (rdx_rax % 0x00000000AAAAAAAA) rax:(uint64) (rdx_rax /u 0x00000000AAAAAAAA) -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410D29:
	Mem120[rsi:word64] = rcx_105
	rsi = rcx_105 *s r8_104
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: r8:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> rax:<invalid> eax:<invalid> ecx:<invalid> cl:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CE4:
	rsi = rsi *s rdx
// DataOut: ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rbp rdi rdx rsi
// DataOut (flags): 
// SymbolicIn: rcx:rdx rax:(uint64) (rdx_rax /u rdx) edx:<invalid> rdx:(uint64) (rdx_rax % rdx) -4(fp):rbx
// LocalsOut: fp(64)

l0000000000410CA6:
	word32 ebx_77
	*ebxOut = (word32) qwLoc04
	word64 rsp_78
	*rspOut = fp + 0x0000000000000004
	return rax_66
// DataOut: al ebp ebx fs r11 r11d r12 r12b r13 r13d r14 r14d r15 r8 r9 rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:<invalid> rsi:<invalid> rax:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> eax:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx

fn0000000000410C90_exit:
// DataOut: al ebx r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rsi:<invalid> rax:<invalid> eax:<invalid> rcx:<invalid> edx:<invalid> rdx:<invalid> rdi:<invalid> esi:<invalid> r8:<invalid> ecx:<invalid> cl:<invalid> r10:0x00000000AAAAAAA9 -4(fp):rbx



word64 fn0000000000410E00(word64 rsi, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rsi
// LiveOut: eax rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000410E00_entry:
// DataOut: fs r11 r12 r12d r13 r13b r14 r14b r15 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E00:
	word64 rsp_15
	word64 rax_16 = fn0000000000410C40(rsi, rsi, out rsp_15)
// DataOut: eax fs r11 r12 r12d r13 r13b r14 r14b r15 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004025C0:
	word64 rsp_27
	word64 rbp_28
	word64 rdi_29
	word64 rsi_30
	word64 rbx_31
	byte SCZO_32
	word64 rdx_33
	word64 rax_34
	call Mem0[0x000000000061A228:word32] (retsize: 4; depth: 4)
		uses: dwLoc04_4,dwLoc08_11,rax_16,rbp_24,rbx_22,rdi_26,rdx_19,rsi_20,rsp_25,SCZO_18
		defs: rax_34,rbp_28,rbx_31,rdi_29,rdx_33,rsi_30,rsp_27,SCZO_32
	return rax_34
// DataOut: eax fs r11 r12 r12d r13 r13b r14 r14b r15 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rdi:<invalid> rbx:<invalid> rdx:rsi rsi:<invalid> rax:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp

fn0000000000410E00_exit:
// DataOut: eax rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> rdi:<invalid> rbx:<invalid> rdx:<invalid> rsi:<invalid> rax:<invalid> edx:<invalid> -8(fp):rbx -4(fp):rbp



word64 fn0000000000410E30(word64 rax, word64 rdi, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rax rdi
// LiveOut: eax rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000410E30_entry:
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E30:
	word64 rax_10 = DPB(rax, strlen(rdi), 0)
// DataOut: fs r11 r12 r13 r13b r14 r14b r15 rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000410E40_thunk_fn0000000000410E00:
	word64 rsp_15
	word64 rbp_16
	word64 rsi_17
	return fn0000000000410E00(rax_10 + 0x0000000000000001, out rsp_15, out rbp_16, out rsi_17)
// DataOut: eax fs r11 r12 r13 r13b r14 r14b r15 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:DPB(rax, <invalid>, 0) rdi:rdi rsi:DPB(rax, <invalid>, 0) + 0x0000000000000001 -4(fp):rbx

fn0000000000410E30_exit:
// DataOut: eax rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rsi:<invalid> rbp:<invalid> rdx:<invalid> edx:<invalid> -4(fp):rbx



void fn0000000000410E50()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn0000000000410E50_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn0000000000410E50_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000410E50:
	word64 rdx_5 = DPB(rdx, 0x00000005, 0)
	word64 rsi_8 = DPB(rsi, 0x00416BCF, 0)
	word64 rdi_11 = DPB(rdi, 0x00000000, 0)
	word64 rax_12 = dcgettext(rdi_11, rsi_8, rdx_5)
	word64 rsp_21
	byte SCZO_22
	word32 edx_23
	word32 esi_24
	word32 edi_25
	byte SZO_26
	byte C_27
	word64 rax_28
	word64 rdi_29
	word64 rsi_30
	word64 rdx_31
	word64 rcx_32
	word32 eax_33
	call error (retsize: 8; depth: 16)
		uses: C_20,eax_18,edi_14,edx_16,esi_17,rax_12,rcx_15,rdi_11,rdx_5,rsi_8,rsp_2,SZO_19
		defs: C_27,eax_33,edi_25,edx_23,esi_24,rax_28,rcx_32,rdi_29,rdx_31,rsi_30,rsp_21,SCZO_22,SZO_26
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



void fn0000000000410E90(word32 edx, word64 rsi, word64 rdi, word64 r8)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rdi rsi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000410E90_entry:
// DataOut: edx r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0028(64)

l0000000000410E90:
	branch edx >u 0x00000024 l00000000004112B0
// DataOut: r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l00000000004112B0:
	__assert_fail(DPB(rdi, 0x00416BF0, 0), DPB(rsi, 0x00416BE0, 0), DPB(rdx, 0x00000060, 0), DPB(rcx, 0x00416DC8, 0))
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000410EAA:
	branch rsi != 0x0000000000000000 l0000000000410EC2
// DataOut: r12 r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000410EBE_1:
// DataOut: r12 r15 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:fp - 0x0000000000000028 rbp:rdi r15:rsi r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000410EC2:
	word64 rsp_39
	word64 rdi_40
	word64 rsi_41
	word32 r14d_42
	word32 edx_43
	word64 rbp_44
	word64 rbx_45
	byte SCZO_46
	byte CZ_47
	word64 rax_48
	word64 r15_49
	byte SZO_50
	byte C_51
	word64 r13_52
	word64 rcx_53
	word64 r12_54
	word64 r8_55
	byte Z_56
	word32 ebx_57
	word64 rdx_58
	word32 ecx_59
	word32 esi_60
	word32 edi_61
	word32 r9d_62
	word32 eax_65
	word64 r14_66
	word32 ebp_67
	byte dl_68
	byte al_69
	word32 r8d_70
	byte S_71
	byte cl_72
	word64 r9_64
	byte bl_1058
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: bl_38,C_30,CZ_23,dwLoc04_4,dwLoc08_7,dwLoc0C_12,dwLoc10_15,dwLoc14_17,dwLoc18_20,ebp_26,ebx_36,edx,r12_34,r13_32,r14d_9,r15_27,r8,rax_24,rbp_25,rbx_37,rcx,rdi,rsi,rsp_21,SCZO_22,SZO_28,Z_29
		defs: al_69,bl_63,C_51,cl_72,CZ_47,dl_68,eax_65,ebp_67,ebx_57,ecx_59,edi_61,edx_43,esi_60,r12_54,r13_52,r14_66,r14d_42,r15_49,r8_55,r8d_70,r9_64,r9d_62,rax_48,rbp_44,rbx_45,rcx_53,rdi_40,rdx_58,rsi_41,rsp_39,S_71,SCZO_46,SZO_50,Z_56
	word64 rax_1051 = rbp_44
// DataOut: bl r12 r15 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:fp - 0x0000000000000028 rbp:rdi r15:<invalid> r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410EDF:
	word32 r9d_90 = (word32) bl_1058
	r9_64 = DPB(r9_64, r9d_90, 0) (alias)
	branch (Mem0[qwLoc28 + 0x0000000000000001 + r9_64 * 0x02:byte] & 0x20) != 0x00 l0000000000410ED8
// DataOut: bl r12 r15 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410ED8:
	rax_1051 = rax_1051 + 0x0000000000000001
	bl_1058 = (byte) (word32) Mem0[rax_1051:byte] (alias)
// DataOut: bl r12 r15 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410EEB:
	branch bl_1058 != 0x2D l0000000000410F08
// DataOut: r12 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F08:
	word64 rbp_1017
	word32 ebp_1016
	word64 rsi_1005
	word64 rdx_1013
	word32 edx_1012
	word64 rax_221 = __errno_location()
	Mem223[rax_221:word32] = 0x00000000
	word64 rsp_228
	word64 rdi_229
	word64 rsi_230
	word32 r14d_231
	word32 edx_232
	word64 rbp_233
	word64 rbx_234
	byte SCZO_235
	byte CZ_236
	word64 rax_237
	word64 r15_238
	byte SZO_239
	byte C_240
	word64 r13_241
	word64 rcx_242
	word64 r12_243
	word64 r8_244
	byte Z_245
	word32 ebx_246
	word64 rdx_247
	word32 ecx_248
	word32 esi_249
	word32 edi_250
	word32 r9d_251
	byte bl_252
	word64 r9_253
	word32 eax_254
	word64 r14_255
	word32 ebp_256
	byte dl_257
	byte al_258
	word32 r8d_259
	byte S_260
	byte cl_261
	call strtoul (retsize: 8; depth: 72)
		uses: al_86,bl_83,C_94,cl_72,CZ_47,dl_76,dwLoc04_4,dwLoc08_7,dwLoc0C_12,dwLoc10_15,dwLoc14_17,dwLoc18_20,dwLoc38,eax_87,ebp_67,ebx_82,ecx_59,edi_61,edx_222,esi_225,qwLoc08,qwLoc10,qwLoc18,qwLoc28,qwLoc38_227,r12_54,r13_52,r14_66,r14d_42,r15_49,r8_55,r8d_70,r9_91,r9d_90,rax_221,rbp_44,rbx_89,rcx_53,rdi_226,rdx_74,rsi_224,rsp_39,S_71,SCZO_95,SZO_92,Z_96
		defs: al_258,bl_252,C_240,cl_261,CZ_236,dl_257,eax_254,ebp_256,ebx_246,ecx_248,edi_250,edx_232,esi_249,r12_243,r13_241,r14_255,r14d_231,r15_238,r8_244,r8d_259,r9_253,r9d_251,rax_237,rbp_233,rbx_234,rcx_242,rdi_229,rdx_247,rsi_230,rsp_228,S_260,SCZO_235,SZO_239,Z_245
	word64 r14_262 = Mem223[r15_238:word64]
	word64 rbx_1041 = rax_237
	branch r14_262 == rbp_233 l0000000000410FE7
// DataOut: r12 r14 r15 rbp rbx rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FE7:
	branch r12_243 == 0x0000000000000000 l0000000000410EF0
// DataOut: r12 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FF0:
	word32 edx_1027 = (word32) Mem223[rbp_233:byte]
	byte dl_1030 = (byte) edx_1027
	branch dl_1030 == 0x00 l0000000000410EF0
// DataOut: dl r12 r14 r15
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FFC:
	rsi_1005 = DPB(rsi_230, (int32) dl_1030, 0) (alias)
	ebp_1016 = 0x00000000
	rbp_1017 = DPB(rbp_233, 0x00000000, 0) (alias)
	rbx_1041 = DPB(rax_237, 0x00000001, 0) (alias)
	edx_1012 = edx_1027
	rdx_1013 = DPB(rdx_247, edx_1027, 0) (alias)
	branch strchr(r12_243, rsi_1005) != 0x0000000000000000 l0000000000410F94
// DataOut: dl ebp r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) Mem0[rdi + 0x0000000000000000:byte] rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041101F:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:<invalid> edx:(word32) Mem0[rdi + 0x0000000000000000:byte] rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:(int32) dl ebp:0x00000000 -56(fp):(word32) Mem0[rdi + 0x0000000000000000:byte] -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F3A:
	word32 eax_984 = Mem223[rax_221:word32]
	branch eax_984 != 0x00000000 l0000000000410F68
// DataOut: eax r12 r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F68:
	ebp_1016 = 0x00000001
	rbp_1017 = DPB(rbp_233, 0x00000001, 0) (alias)
	branch eax_984 != 0x00000022 l0000000000410EF0
// DataOut: ebp r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F76:
// DataOut: ebp r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> ebp:0x00000001 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F40:
	ebp_1016 = 0x00000000
	rbp_1017 = DPB(rbp_233, 0x00000000, 0) (alias)
// DataOut: ebp r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F42:
	branch r12_243 == 0x0000000000000000 l0000000000410F4F
// DataOut: ebp r12 r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F47:
	word32 edx_997 = (word32) Mem223[rsi_230:byte]
	byte dl_1000 = (byte) edx_997
	branch dl_1000 != 0x00 l0000000000410F78
// DataOut: dl ebp r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F78:
	rsi_1005 = DPB(rsi_230, (int32) dl_1000, 0) (alias)
	edx_1012 = edx_997
	rdx_1013 = DPB(rdx_247, edx_997, 0) (alias)
	branch strchr(r12_243, rsi_1005) == 0x0000000000000000 l0000000000411028
// DataOut: dl ebp r12 r14 r15 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F94:
	word32 eax_370
	word64 rax_366
	word32 ecx_363
	word64 rsi_352 = DPB(rsi_1005, 0x00000030, 0)
	word64 rax_355 = strchr(r12_243, rsi_352)
	branch rax_355 == 0x0000000000000000 l0000000000410FCB
// DataOut: dl ebp r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:(int32) dl ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FAE:
	word32 eax_953 = (word32) Mem223[rsi_352 + 0x0000000000000001:byte]
	rax_355 = DPB(rax_355, eax_953, 0) (alias)
	byte al_956 = (byte) eax_953
	branch al_956 == 0x44 l0000000000411262
// DataOut: al dl ebp r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FBB:
	branch al_956 == 0x69 l000000000041124A
// DataOut: al dl ebp r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041124A:
	word64 rcx_980 = DPB(rax_221, Mem223[rsi_352 + 0x0000000000000002:byte] == 0x42, 0)
	eax_370 = 0x00000400
	rax_366 = DPB(rax_355, 0x00000400, 0) (alias)
	ecx_363 = rcx_980 + 0x0000000000000001 + rcx_980
// DataOut: dl eax ebp ecx r14 r15 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FC3:
	branch al_956 == 0x42 l0000000000411262
// DataOut: dl ebp r14 r15 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411262:
	ecx_363 = 0x00000002
	eax_370 = 0x000003E8
	rax_366 = DPB(rax_355, 0x000003E8, 0) (alias)
// DataOut: dl eax ebp ecx r14 r15 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FCB:
	ecx_363 = 0x00000001
	eax_370 = 0x00000400
	rax_366 = DPB(rax_355, 0x00000400, 0) (alias)
// DataOut: dl eax ebp ecx r14 r15 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FD5:
	byte dl_374 = (byte) (edx_1012 - 0x00000042)
	branch dl_374 >u 0x35 l0000000000411028
// DataOut: dl eax ebp ecx r14 r15 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410FDD:
	word64 rdi_584
	word32 edx_388
	word64 rdx_378 = DPB(rdx_1013, (word32) dl_374, 0)
	switch (rdx_378) { l0000000000411201 l0000000000411028 l0000000000411028 l00000000004111C2 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l000000000041112C l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110BA l000000000041107F l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411064 l0000000000411036 l0000000000411028 l0000000000411028 l0000000000411028 l000000000041121B l0000000000411028 l0000000000411028 l0000000000411028 l000000000041119E l0000000000411028 l000000000041116B l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l0000000000411028 l00000000004110F9 l0000000000411028 l0000000000411028 l0000000000411054 }
// DataOut: eax ebp ecx r14 r15 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411054:
	branch rbx_1041 < 0x0000000000000000 l0000000000411283
// DataOut: ebp ecx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041105D:
	rbx_1041 = rbx_1041 * 0x0000000000000002
	edx_388 = 0x00000000
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411036:
	edx_388 = 0x00000000
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411064:
	branch rbx_1041 >u rax_366 l0000000000411283
// DataOut: ebp ecx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411077:
	rbx_1041 = rbx_1041 << 0x0000000000000009
	edx_388 = 0x00000000
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041107F:
	word64 rdi_844 = (int64) eax_370
	word64 rax_851 = (uint64) (SEQ(rdx_378, 0xFFFFFFFFFFFFFFFF) /u rdi_844)
	word32 esi_854 = 0x00000007
	rsi_352 = DPB(rsi_1005, 0x00000007, 0) (alias)
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110A6:
	branch rax_851 >=u rbx_1041 l0000000000411097
	branch rax_851 >=u rbx_1041 l0000000000411097
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411097:
	rbx_1041 = rbx_1041 *s rdi_844
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110AB:
	rbx_1041 = 0xFFFFFFFFFFFFFFFF
	rax_851 = DPB(rax_851, 0x00000001, 0) (alias)
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041109E:
	esi_854 = esi_854 - 0x00000001
	edx_388 = 0x00000000
	rsi_352 = DPB(rsi_352, esi_854, 0) (alias)
	branch esi_854 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110BA:
	word64 rdi_776 = (int64) eax_370
	word64 rax_783 = (uint64) (SEQ(rdx_378, 0xFFFFFFFFFFFFFFFF) /u rdi_776)
	word32 esi_786 = 0x00000008
	rsi_352 = DPB(rsi_1005, 0x00000008, 0) (alias)
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110E5:
	branch rax_783 >=u rbx_1041 l00000000004110D2
	branch rax_783 >=u rbx_1041 l00000000004110D2
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110D2:
	rbx_1041 = rbx_1041 *s rdi_776
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110EA:
	rbx_1041 = 0xFFFFFFFFFFFFFFFF
	rax_783 = DPB(rax_783, 0x00000001, 0) (alias)
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110D9:
	esi_786 = esi_786 - 0x00000001
	edx_388 = 0x00000000
	rsi_352 = DPB(rsi_352, esi_786, 0) (alias)
	branch esi_786 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004110F9:
	rsi_352 = (int64) eax_370
	word64 rax_717 = (uint64) (SEQ(rdx_378, 0xFFFFFFFFFFFFFFFF) /u rsi_352)
	word32 edi_720 = 0x00000004
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041110F:
	branch rax_717 <u rbx_1041 l0000000000411271
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411271:
	rbx_1041 = 0xFFFFFFFFFFFFFFFF
	rax_717 = DPB(rax_717, 0x00000001, 0) (alias)
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411118:
	rbx_1041 = rbx_1041 *s rsi_352
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041111F:
	edx_388 = 0x00000000
	edi_720 = edi_720 - 0x00000001
	branch edi_720 != 0x00000000 l000000000041110F
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411127:
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041112C:
	rsi_352 = (int64) eax_370
	word64 rax_649 = (uint64) (SEQ(rdx_378, 0xFFFFFFFFFFFFFFFF) /u rsi_352)
	word32 edi_652 = 0x00000005
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411157:
	branch rax_649 >=u rbx_1041 l0000000000411144
	branch rax_649 >=u rbx_1041 l0000000000411144
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411144:
	rbx_1041 = rbx_1041 *s rsi_352
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041115C:
	rbx_1041 = 0xFFFFFFFFFFFFFFFF
	rax_649 = DPB(rax_649, 0x00000001, 0) (alias)
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041114B:
	edx_388 = 0x00000000
	edi_652 = edi_652 - 0x00000001
	branch edi_652 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041116B:
	rdi_584 = (int64) eax_370
	rsi_352 = 0xFFFFFFFFFFFFFFFF
	word64 rax_622 = (uint64) (SEQ(rdx_378, 0xFFFFFFFFFFFFFFFF) /u rdi_584)
	branch rbx_1041 >u rax_622 l00000000004112A3
// DataOut: ebp ecx r14 r15 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411186:
	rbx_1041 = rbx_1041 *s rdi_584
	branch rax_622 <u rbx_1041 l00000000004112A3
// DataOut: ebp ecx r14 r15 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0xFFFFFFFF ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004112A3:
	edx_388 = 0x00000001
	rbx_1041 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0xFFFFFFFF ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041119E:
	rdi_584 = (int64) eax_370
	rsi_352 = 0xFFFFFFFFFFFFFFFF
	branch rbx_1041 <=u (uint64) (SEQ(rdx_378, 0xFFFFFFFFFFFFFFFF) /u rdi_584) l0000000000411193
// DataOut: ebp ecx r14 r15 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411193:
	rsi_352 = 0xFFFFFFFFFFFFFFFF
	rbx_1041 = rbx_1041 *s rdi_584
	edx_388 = 0x00000000
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0xFFFFFFFF ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111B5:
	rbx_1041 = 0xFFFFFFFFFFFFFFFF
	edx_388 = 0x00000001
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0xFFFFFFFF ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041121B:
	rsi_352 = (int64) eax_370
	word64 rax_514 = (uint64) (SEQ(rdx_378, 0xFFFFFFFFFFFFFFFF) /u rsi_352)
	word32 edi_517 = 0x00000003
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411231:
	branch rax_514 <u rbx_1041 l0000000000411294
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411294:
	rbx_1041 = 0xFFFFFFFFFFFFFFFF
	rax_514 = DPB(rax_514, 0x00000001, 0) (alias)
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411236:
	rbx_1041 = rbx_1041 *s rsi_352
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041123D:
	edx_388 = 0x00000000
	edi_517 = edi_517 - 0x00000001
	branch edi_517 != 0x00000000 l0000000000411231
// DataOut: ebp ecx edi edx r14 r15 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411245:
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111C2:
	word64 rdi_439 = (int64) eax_370
	word64 rax_446 = (uint64) (SEQ(rdx_378, 0xFFFFFFFFFFFFFFFF) /u rdi_439)
	word32 esi_449 = 0x00000006
	rsi_352 = DPB(rsi_1005, 0x00000006, 0) (alias)
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111ED:
	branch rax_446 >=u rbx_1041 l00000000004111DA
	branch rax_446 >=u rbx_1041 l00000000004111DA
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111DA:
	rbx_1041 = rbx_1041 *s rdi_439
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111F2:
	rbx_1041 = 0xFFFFFFFFFFFFFFFF
	rax_446 = DPB(rax_446, 0x00000001, 0) (alias)
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004111E1:
	esi_449 = esi_449 - 0x00000001
	edx_388 = 0x00000000
	rsi_352 = DPB(rsi_352, esi_449, 0) (alias)
	branch esi_449 == 0x00000000 l0000000000411038
// DataOut: ebp ecx edx esi r14 r15 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411028:
	Mem335[rbp_1017:word64] = rbx_1041
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411201:
	branch rbx_1041 >u rax_366 l0000000000411283
// DataOut: ebp ecx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411283:
	rbx_1041 = 0xFFFFFFFFFFFFFFFF
	edx_388 = 0x00000001
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411210:
	rbx_1041 = rbx_1041 << 0x000000000000000A
	edx_388 = 0x00000000
// DataOut: ebp ecx edx r14 r15 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> rcx:<invalid> esi:0x00000030 ebp:<invalid> ecx:<invalid> eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411038:
	Mem407[r15_238:word64] = r14_262 + (int64) ecx_363
	word32 ebp_398 = ebp_1016 | edx_388
	rbp_1017 = DPB(rbp_1017, ebp_398, 0) (alias)
	branch Mem407[rsi_352:byte] == 0x00 l000000000041104F
// DataOut: eax rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041104C_1:
	rbp_1017 = DPB(rbp_1017, ebp_398 | 0x00000002, 0) (alias)
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041104F:
// DataOut: rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> esi:<invalid> ebp:<invalid> ecx:<invalid> eax:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410F4F:
	Mem297[rbp_1017:word64] = rbx_1041
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> r8:0x00000000FFFFFFFF cl:<invalid> r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000410EF0:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> eax:<invalid> ebp:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000410EF5:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> eax:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> rcx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000410E90_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> eax:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> edx:<invalid> r14:<invalid> rcx:<invalid> ebp:<invalid> esi:<invalid> ecx:<invalid> cl:<invalid> r8:0x00000000FFFFFFFF r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



void fn00000000004112D0(word64 rcx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi esi rcx
// LiveOut:
// Trashed:
// Preserved:
// Terminates process
fn00000000004112D0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn:

fn00000000004112D0_entry:
// DataOut: edi esi rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004112D0:
	word64 rsi_131
	word64 r10_6 = (int64) esi
	word32 r10d_7 = (word32) r10_6
	branch edi >u 0x00000003 l000000000041133B
// DataOut: edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l000000000041133B:
	rsi_131 = DPB(rsi, 0x00416DD1, 0) (alias)
	branch edi == 0x00000004 l00000000004112FA
// DataOut: r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l0000000000411345:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 ebp:<invalid> esi:0x00416DD1 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l00000000004112EB:
	branch edi >=u 0x00000002 l0000000000411334
// DataOut: edi r10 r10d rcx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l0000000000411334:
	rsi_131 = DPB(rsi, 0x00416E10, 0) (alias)
// DataOut: r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l00000000004112F0:
	rsi_131 = DPB(rsi, 0x00416DEC, 0) (alias)
	branch edi != 0x00000001 l000000000041132F
// DataOut: r10 r10d rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 ebp:<invalid> -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l00000000004112FA:
	branch r10d_7 < 0x00000000 l0000000000411347
// DataOut: r10 rcx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 ebp:<invalid> esi:<invalid> edi:edi - 0x00000001 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp
// LocalsOut: fp(64)

l0000000000411347:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 ebp:<invalid> esi:<invalid> edi:edi - 0x00000001 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l00000000004112FF:
// DataOut: rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:(int64) esi r12:r8 ebp:<invalid> esi:<invalid> edi:edi - 0x00000001 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000041130C:
	word64 rdi_70 = DPB(rdi, 0x00000000, 0)
	word64 rax_71 = dcgettext(rdi_70, rsi_131, DPB(rdx, 0x00000005, 0))
	word64 rsp_83
	word64 rbp_84
	word64 r10_85
	word32 esi_86
	word64 r12_87
	word64 r8_88
	word64 rbx_89
	byte SCZO_90
	word32 edi_91
	word32 ebp_92
	byte CZ_93
	byte C_94
	byte Z_95
	word32 r10d_96
	byte SZO_97
	byte S_98
	word32 ebx_99
	word64 r13_100
	word64 rcx_101
	word32 edx_102
	word64 rax_103
	word64 rdi_104
	word64 rsi_105
	word64 rdx_106
	word64 r9_107
	word32 eax_108
	byte dl_109
	call error (retsize: 8; depth: 48)
		uses: bLoc27_62,bLoc28_61,C_80,CZ_21,dl,dwLoc04_4,dwLoc08_10,dwLoc0C_14,dwLoc10_17,eax_78,ebp_23,ebx,edi_77,edx_65,esi_76,r10_6,r10d_7,r12_12,r13_63,r8_74,r9_72,rax_71,rbp,rbx_64,rcx_75,rdi_70,rdx_73,rsi_53,rsp_18,S_59,SCZO_56,SZO_79,Z_54
		defs: C_94,CZ_93,dl_109,eax_108,ebp_92,ebx_99,edi_91,edx_102,esi_86,r10_85,r10d_96,r12_87,r13_100,r8_88,r9_107,rax_103,rbp_84,rbx_89,rcx_101,rdi_104,rdx_106,rsi_105,rsp_83,S_98,SCZO_90,SZO_97,Z_95
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:<invalid> r12:r8 ebp:<invalid> esi:<invalid> edi:edi - 0x00000001 ebx:<invalid> r13:<invalid> rbx:rbx - (int64) esi -40(fp):dl -39(fp):0x00 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp

l000000000041132F:
	abort()
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000028 r10:<invalid> r12:r8 ebp:<invalid> edi:<invalid> esi:<invalid> ebx:<invalid> r13:<invalid> rbx:rbx - (int64) esi edx:<invalid> rax:<invalid> r9:<invalid> rdx:<invalid> r8:<invalid> rcx:<invalid> eax:<invalid> -40(fp):dl -39(fp):0x00 -16(fp):rbx -12(fp):rbp -8(fp):fp - 0x0000000000000004 -4(fp):rbp



word32 fn0000000000411360(word32 edx, word64 rsi, word64 rdi, word64 r8, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r8Out, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edx r8 rdi rsi
// LiveOut: eax ebp r12 r8 rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w r9 r9b r9d r9w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411360_entry:
// DataOut: edx r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0028(64)

l0000000000411360:
	branch edx >u 0x00000024 l0000000000411788
// DataOut: r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000411788:
	__assert_fail(DPB(rdi, 0x00416BF0, 0), DPB(rsi, 0x00416BE0, 0), DPB(rdx, 0x00000060, 0), DPB(rcx, 0x00416FE8, 0))
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041137A:
	branch rsi != 0x0000000000000000 l0000000000411392
// DataOut: r12 r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l000000000041138E_1:
// DataOut: r12 r15 r8 rbp rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:fp - 0x0000000000000028 rbp:rdi r15:rsi r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64) Local -0028(64)

l0000000000411392:
	word64 rsp_39
	word64 rdi_40
	word64 rsi_41
	word32 r14d_42
	word32 edx_43
	word64 rbp_44
	word64 rbx_45
	byte SCZO_46
	byte CZ_47
	word64 rax_48
	word64 r15_49
	byte SZO_50
	byte C_51
	word64 r13_52
	word64 rcx_53
	word64 r12_54
	word64 r8_55
	byte Z_56
	word32 ebx_57
	word64 rdx_58
	word32 ecx_59
	word32 esi_60
	word32 edi_61
	word32 r9d_62
	word32 eax_65
	word64 r14_66
	word32 ebp_67
	byte dl_68
	byte al_69
	word32 r8d_70
	byte S_71
	byte cl_72
	word64 r9_64
	byte bl_1095
	call __ctype_b_loc (retsize: 8; depth: 72)
		uses: bl_38,C_30,CZ_23,dwLoc04_4,dwLoc08_7,dwLoc0C_12,dwLoc10_15,dwLoc14_17,dwLoc18_20,ebp_26,ebx_36,edx,r12_34,r13_32,r14d_9,r15_27,r8,rax_24,rbp_25,rbx_37,rcx,rdi,rsi,rsp_21,SCZO_22,SZO_28,Z_29
		defs: al_69,bl_63,C_51,cl_72,CZ_47,dl_68,eax_65,ebp_67,ebx_57,ecx_59,edi_61,edx_43,esi_60,r12_54,r13_52,r14_66,r14d_42,r15_49,r8_55,r8d_70,r9_64,r9d_62,rax_48,rbp_44,rbx_45,rcx_53,rdi_40,rdx_58,rsi_41,rsp_39,S_71,SCZO_46,SZO_50,Z_56
	word64 rax_1088 = rbp_44
// DataOut: bl r12 r15 r8 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:fp - 0x0000000000000028 rbp:rdi r15:<invalid> r13:rcx r12:r8 -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113AF:
	word32 r9d_90 = (word32) bl_1095
	r9_64 = DPB(r9_64, r9d_90, 0) (alias)
	branch (Mem0[qwLoc28 + 0x0000000000000001 + r9_64 * 0x02:byte] & 0x20) != 0x00 l00000000004113A8
// DataOut: bl r12 r15 r8 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113A8:
	rax_1088 = rax_1088 + 0x0000000000000001
	bl_1095 = (byte) (word32) Mem0[rax_1088:byte] (alias)
// DataOut: bl r12 r15 r8 rax rbp rdx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113BB:
	word32 eax_166
	branch bl_1095 != 0x2D l00000000004113D8
// DataOut: r12 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113D8:
	word32 ebp_1030
	word64 rbp_1029
	word64 rsi_1042
	word64 rdx_1050
	word32 edx_1049
	word64 rax_227 = __errno_location()
	Mem235[rax_227:word32] = 0x00000000
	word64 rsp_240
	word64 rdi_241
	word64 rsi_242
	word32 r14d_243
	word32 edx_244
	word64 rbp_245
	word64 rbx_246
	byte SCZO_247
	byte CZ_248
	word64 rax_249
	word64 r15_250
	byte SZO_251
	byte C_252
	word64 r13_253
	word64 rcx_254
	word64 r12_255
	word64 r8_256
	byte Z_257
	word32 ebx_258
	word64 rdx_259
	word32 ecx_260
	word32 esi_261
	word32 edi_262
	word32 r9d_263
	byte bl_264
	word64 r9_265
	word32 eax_266
	word64 r14_267
	word32 ebp_268
	byte dl_269
	byte al_270
	word32 r8d_271
	byte S_272
	byte cl_273
	call __strtoul_internal (retsize: 8; depth: 72)
		uses: al_229,bl_83,C_232,cl_72,CZ_47,dl_76,dwLoc04_4,dwLoc08_7,dwLoc0C_12,dwLoc10_15,dwLoc14_17,dwLoc18_20,dwLoc38,eax_228,ebp_67,ebx_82,ecx_230,edi_61,edx_233,esi_237,qwLoc08,qwLoc10,qwLoc18,qwLoc28,qwLoc38_239,r12_54,r13_52,r14_66,r14d_42,r15_49,r8_55,r8d_70,r9_91,r9d_90,rax_227,rbp_44,rbx_89,rcx_53,rdi_238,rdx_74,rsi_236,rsp_39,S_71,SCZO_95,SZO_231,Z_96
		defs: al_270,bl_264,C_252,cl_273,CZ_248,dl_269,eax_266,ebp_268,ebx_258,ecx_260,edi_262,edx_244,esi_261,r12_255,r13_253,r14_267,r14d_243,r15_250,r8_256,r8d_271,r9_265,r9d_263,rax_249,rbp_245,rbx_246,rcx_254,rdi_241,rdx_259,rsi_242,rsp_240,S_272,SCZO_247,SZO_251,Z_257
	word64 r14_274 = Mem235[r15_250:word64]
	word64 rbx_1078 = rax_249
	word64 r8_279 = rax_227
	*r8Out = r8_279
	branch r14_274 == rbp_245 l00000000004114BF
// DataOut: r12 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:edx rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:(word32) bl -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114BF:
	branch r12_255 == 0x0000000000000000 l00000000004113C0
// DataOut: r12 r14 r15 r8 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114C8:
	word32 edx_1064 = (word32) Mem235[rbp_245:byte]
	byte dl_1067 = (byte) edx_1064
	branch dl_1067 == 0x00 l00000000004113C0
// DataOut: dl r12 r14 r15 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114D4:
	rsi_1042 = DPB(rsi_242, (int32) dl_1067, 0) (alias)
	ebp_1030 = 0x00000000
	rbp_1029 = DPB(rbp_245, 0x00000000, 0) (alias)
	rbx_1078 = DPB(rax_249, 0x00000001, 0) (alias)
	edx_1049 = edx_1064
	rdx_1050 = DPB(rdx_259, edx_1064, 0) (alias)
	branch strchr(r12_255, rsi_1042) != 0x0000000000000000 l000000000041146C
// DataOut: dl ebp r12 r14 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) Mem0[rdi + 0x0000000000000000:byte] rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114F7:
// DataOut: r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:0x00000001 rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) Mem0[rdi + 0x0000000000000000:byte] rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:(int32) dl ebp:0x00000000 -56(fp):(word32) Mem0[rdi + 0x0000000000000000:byte] -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041140C:
	word32 eax_1021 = Mem235[rax_249:word32]
	branch eax_1021 != 0x00000000 l0000000000411440
// DataOut: eax r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411440:
	ebp_1030 = 0x00000001
	rbp_1029 = DPB(rbp_245, 0x00000001, 0) (alias)
	branch eax_1021 != 0x00000022 l00000000004113C0
// DataOut: ebp r12 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041144E:
// DataOut: ebp r12 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> ebp:0x00000001 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411413:
	ebp_1030 = 0x00000000
	rbp_1029 = DPB(rbp_245, 0x00000000, 0) (alias)
// DataOut: ebp r12 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:rdi r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411415:
	branch r12_255 == 0x0000000000000000 l0000000000411422
// DataOut: ebp r12 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041141A:
	word32 edx_1034 = (word32) Mem235[rsi_242:byte]
	byte dl_1037 = (byte) edx_1034
	branch dl_1037 != 0x00 l0000000000411450
// DataOut: dl ebp r12 r14 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411450:
	rsi_1042 = DPB(rsi_242, (int32) dl_1037, 0) (alias)
	edx_1049 = edx_1034
	rdx_1050 = DPB(rdx_259, edx_1034, 0) (alias)
	branch strchr(r12_255, rsi_1042) == 0x0000000000000000 l0000000000411500
// DataOut: dl ebp r12 r14 r15 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> ebp:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041146C:
	word64 rax_1002
	word32 eax_1001
	word32 ecx_1018
	word64 rsi_368 = DPB(rsi_1042, 0x00000030, 0)
	word64 rax_371 = strchr(r12_255, rsi_368)
	branch rax_371 == 0x0000000000000000 l00000000004114A3
// DataOut: dl ebp r12 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:(int32) dl ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411486:
	word32 eax_990 = (word32) Mem235[rsi_368 + 0x0000000000000001:byte]
	rax_371 = DPB(rax_371, eax_990, 0) (alias)
	byte al_993 = (byte) eax_990
	branch al_993 == 0x44 l000000000041173A
// DataOut: al dl ebp r12 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411493:
	branch al_993 == 0x69 l0000000000411722
// DataOut: al dl ebp r12 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411722:
	word64 rcx_1017 = DPB(rcx_254, Mem235[rsi_368 + 0x0000000000000002:byte] == 0x42, 0)
	eax_1001 = 0x00000400
	rax_1002 = DPB(rax_371, 0x00000400, 0) (alias)
	ecx_1018 = rcx_1017 + 0x0000000000000001 + rcx_1017
// DataOut: dl eax ebp ecx r12 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041149B:
	branch al_993 == 0x42 l000000000041173A
// DataOut: dl ebp r12 r14 r15 r8 rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041173A:
	ecx_1018 = 0x00000002
	eax_1001 = 0x000003E8
	rax_1002 = DPB(rax_371, 0x000003E8, 0) (alias)
// DataOut: dl eax ebp ecx r12 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114A3:
	ecx_1018 = 0x00000001
	eax_1001 = 0x00000400
	rax_1002 = DPB(rax_371, 0x00000400, 0) (alias)
// DataOut: dl eax ebp ecx r12 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114AD:
	byte dl_390 = (byte) (edx_1049 - 0x00000042)
	branch dl_390 >u 0x35 l0000000000411500
// DataOut: dl eax ebp ecx r12 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004114B5:
	word64 rdi_608
	word32 edx_404
	word64 rdx_394 = DPB(rdx_1050, (word32) dl_390, 0)
	switch (rdx_394) { l00000000004116D9 l0000000000411500 l0000000000411500 l000000000041169A l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411604 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411592 l0000000000411557 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l000000000041153C l000000000041150E l0000000000411500 l0000000000411500 l0000000000411500 l00000000004116F3 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411676 l0000000000411500 l0000000000411643 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l0000000000411500 l00000000004115D1 l0000000000411500 l0000000000411500 l000000000041152C }
// DataOut: eax ebp ecx r12 r14 r15 r8 rax rbp rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041152C:
	branch rbx_1078 < 0x0000000000000000 l000000000041175B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411535:
	rbx_1078 = rbx_1078 * 0x0000000000000002
	edx_404 = 0x00000000
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041150E:
	edx_404 = 0x00000000
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041153C:
	word64 r8_948 = 0x00000000FFFFFFFF
	*r8Out = r8_948
	branch rbx_1078 >u rax_1002 l000000000041175B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041154F:
	rbx_1078 = rbx_1078 << 0x0000000000000009
	edx_404 = 0x00000000
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:0x00000000FFFFFFFF esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411557:
	word64 rdi_877 = (int64) eax_1001
	word64 rax_884 = (uint64) (SEQ(rdx_394, 0xFFFFFFFFFFFFFFFF) /u rdi_877)
	word32 esi_887 = 0x00000007
	rsi_368 = DPB(rsi_1042, 0x00000007, 0) (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041157E:
	branch rax_884 >=u rbx_1078 l000000000041156F
	branch rax_884 >=u rbx_1078 l000000000041156F
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041156F:
	rbx_1078 = rbx_1078 *s rdi_877
	*r8Out = DPB(r8_279, 0x00000000, 0)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411583:
	rbx_1078 = 0xFFFFFFFFFFFFFFFF
	rax_884 = DPB(rax_884, 0x00000001, 0) (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411576:
	esi_887 = esi_887 - 0x00000001
	edx_404 = 0x00000000
	rsi_368 = DPB(rsi_368, esi_887, 0) (alias)
	branch esi_887 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411592:
	word64 rdi_806 = (int64) eax_1001
	word64 rax_813 = (uint64) (SEQ(rdx_394, 0xFFFFFFFFFFFFFFFF) /u rdi_806)
	word32 esi_816 = 0x00000008
	rsi_368 = DPB(rsi_1042, 0x00000008, 0) (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115BD:
	branch rax_813 >=u rbx_1078 l00000000004115AA
	branch rax_813 >=u rbx_1078 l00000000004115AA
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115AA:
	rbx_1078 = rbx_1078 *s rdi_806
	*r8Out = DPB(r8_279, 0x00000000, 0)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115C2:
	rbx_1078 = 0xFFFFFFFFFFFFFFFF
	rax_813 = DPB(rax_813, 0x00000001, 0) (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115B1:
	esi_816 = esi_816 - 0x00000001
	edx_404 = 0x00000000
	rsi_368 = DPB(rsi_368, esi_816, 0) (alias)
	branch esi_816 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115D1:
	rsi_368 = (int64) eax_1001
	word64 rax_744 = (uint64) (SEQ(rdx_394, 0xFFFFFFFFFFFFFFFF) /u rsi_368)
	word32 edi_747 = 0x00000004
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115E7:
	branch rax_744 <u rbx_1078 l0000000000411749
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411749:
	rbx_1078 = 0xFFFFFFFFFFFFFFFF
	rax_744 = DPB(rax_744, 0x00000001, 0) (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115F0:
	rbx_1078 = rbx_1078 *s rsi_368
	*r8Out = DPB(r8_279, 0x00000000, 0)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115F7:
	edx_404 = 0x00000000
	edi_747 = edi_747 - 0x00000001
	branch edi_747 != 0x00000000 l00000000004115E7
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004115FF:
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411604:
	rsi_368 = (int64) eax_1001
	word64 rax_673 = (uint64) (SEQ(rdx_394, 0xFFFFFFFFFFFFFFFF) /u rsi_368)
	word32 edi_676 = 0x00000005
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041162F:
	branch rax_673 >=u rbx_1078 l000000000041161C
	branch rax_673 >=u rbx_1078 l000000000041161C
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041161C:
	rbx_1078 = rbx_1078 *s rsi_368
	*r8Out = DPB(r8_279, 0x00000000, 0)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411634:
	rbx_1078 = 0xFFFFFFFFFFFFFFFF
	rax_673 = DPB(rax_673, 0x00000001, 0) (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411623:
	edx_404 = 0x00000000
	edi_676 = edi_676 - 0x00000001
	branch edi_676 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411643:
	rdi_608 = (int64) eax_1001
	rsi_368 = 0xFFFFFFFFFFFFFFFF
	word64 rax_646 = (uint64) (SEQ(rdx_394, 0xFFFFFFFFFFFFFFFF) /u rdi_608)
	branch rbx_1078 >u rax_646 l000000000041177B
// DataOut: ebp ecx r12 r14 r15 r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041165E:
	rbx_1078 = rbx_1078 *s rdi_608
	branch rax_646 <u rbx_1078 l000000000041177B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:0xFFFFFFFF ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041177B:
	edx_404 = 0x00000001
	rbx_1078 = 0xFFFFFFFFFFFFFFFF
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:0xFFFFFFFF ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411676:
	rdi_608 = (int64) eax_1001
	rsi_368 = 0xFFFFFFFFFFFFFFFF
	branch rbx_1078 <=u (uint64) (SEQ(rdx_394, 0xFFFFFFFFFFFFFFFF) /u rdi_608) l000000000041166B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041166B:
	rsi_368 = 0xFFFFFFFFFFFFFFFF
	rbx_1078 = rbx_1078 *s rdi_608
	edx_404 = 0x00000000
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:0xFFFFFFFF ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041168D:
	rbx_1078 = 0xFFFFFFFFFFFFFFFF
	edx_404 = 0x00000001
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:0xFFFFFFFFFFFFFFFF rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:0xFFFFFFFF ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116F3:
	rsi_368 = (int64) eax_1001
	word64 rax_535 = (uint64) (SEQ(rdx_394, 0xFFFFFFFFFFFFFFFF) /u rsi_368)
	word32 edi_538 = 0x00000003
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411709:
	branch rax_535 <u rbx_1078 l000000000041176C
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041176C:
	rbx_1078 = 0xFFFFFFFFFFFFFFFF
	rax_535 = DPB(rax_535, 0x00000001, 0) (alias)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041170E:
	rbx_1078 = rbx_1078 *s rsi_368
	*r8Out = DPB(r8_279, 0x00000000, 0)
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411715:
	edx_404 = 0x00000000
	edi_538 = edi_538 - 0x00000001
	branch edi_538 != 0x00000000 l0000000000411709
// DataOut: ebp ecx edi edx r12 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041171D:
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> edi:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041169A:
	word64 rdi_457 = (int64) eax_1001
	word64 rax_464 = (uint64) (SEQ(rdx_394, 0xFFFFFFFFFFFFFFFF) /u rdi_457)
	word32 esi_467 = 0x00000006
	rsi_368 = DPB(rsi_1042, 0x00000006, 0) (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116C5:
	branch rax_464 >=u rbx_1078 l00000000004116B2
	branch rax_464 >=u rbx_1078 l00000000004116B2
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116B2:
	rbx_1078 = rbx_1078 *s rdi_457
	*r8Out = DPB(r8_279, 0x00000000, 0)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116CA:
	rbx_1078 = 0xFFFFFFFFFFFFFFFF
	rax_464 = DPB(rax_464, 0x00000001, 0) (alias)
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116B9:
	esi_467 = esi_467 - 0x00000001
	edx_404 = 0x00000000
	rsi_368 = DPB(rsi_368, esi_467, 0) (alias)
	branch esi_467 == 0x00000000 l0000000000411510
// DataOut: ebp ecx edx esi r12 r14 r15 r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> r8d:0x00000000 cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411500:
	Mem348[rbp_1029:word64] = rbx_1078
	eax_166 = ebp_1030 | 0x00000002
// DataOut: eax r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> ebp:<invalid> esi:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116D9:
	word64 r8_444
	*r8Out = 0x00000000FFFFFFFF
	branch rbx_1078 >u rax_1002 l000000000041175B
// DataOut: ebp ecx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l000000000041175B:
	rbx_1078 = 0xFFFFFFFFFFFFFFFF
	edx_404 = 0x00000001
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:<invalid> esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004116E8:
	rbx_1078 = rbx_1078 << 0x000000000000000A
	edx_404 = 0x00000000
// DataOut: ebp ecx edx r12 r14 r15 r8 rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:(word32) dl rsi:<invalid> rdi:r8 r14:<invalid> rbx:<invalid> r8:0x00000000FFFFFFFF esi:0x00000030 ebp:<invalid> eax:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411510:
	Mem423[r15_250:word64] = r14_274 + (int64) ecx_1018
	ebp_1030 = ebp_1030 | edx_404
	rbp_1029 = DPB(rbp_1029, ebp_1030, 0) (alias)
	branch Mem423[rsi_368:byte] == 0x00 l0000000000411527
// DataOut: eax ebp r12 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> cl:<invalid> r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411524_1:
	ebp_1030 = ebp_1030 | 0x00000002
	rbp_1029 = DPB(rbp_1029, ebp_1030 | 0x00000002, 0) (alias)
// DataOut: ebp r12 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> rcx:<invalid> cl:<invalid> r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411527:
// DataOut: ebp r12 r8 rbp rbx
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> esi:<invalid> ebp:<invalid> eax:<invalid> rcx:<invalid> cl:<invalid> r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l0000000000411422:
	Mem307[rbp_1029:word64] = rbx_1078
	word64 rbp_320
	*rbpOut = Mem307[qwLoc08 + 0x0000000000000008:word64]
	return ebp_1030
// DataOut: eax ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> ebp:<invalid> esi:<invalid> rcx:<invalid> cl:<invalid> r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004113C0:
	eax_166 = 0x00000004
// DataOut: eax r12 r8
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> eax:<invalid> ebp:<invalid> esi:(int32) dl -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi
// LocalsOut: fp(64) Local -0008(64)

l00000000004113C5:
	word64 rbp_181
	*rbpOut = Mem0[qwLoc08 + 0x0000000000000008:word64]
	return eax_166
// DataOut: eax ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000040 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> eax:<invalid> ecx:<invalid> edx:<invalid> rsi:<invalid> rdi:<invalid> r14:<invalid> rbx:<invalid> r8:<invalid> ebp:<invalid> esi:<invalid> cl:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000411360_exit:
// DataOut: eax ebp r12 r8 rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:rsi + 0x0000000000000020 r14d:<invalid> rax:<invalid> rbp:<invalid> r15:<invalid> r13:rcx r12:r8 ebx:<invalid> rdx:<invalid> r9d:<invalid> eax:<invalid> rbx:rbx rsi:<invalid> rdi:<invalid> ecx:<invalid> edx:<invalid> r14:<invalid> r8:<invalid> ebp:<invalid> esi:<invalid> cl:<invalid> rcx:<invalid> r8d:0x00000000 edi:<invalid> -56(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word32 fn00000000004117B0(word64 rsi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi rax rcx rdi rdx rsi si sil
// Preserved: rsp
fn00000000004117B0_entry:
// DataOut: edi fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l00000000004117B0:
	word32 eax_16
	branch edi == 0x00000000 l0000000000411800
// DataOut: edi fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411800:
	Mem85[__errno_location():word32] = 0x0000005F
	eax_16 = 0xFFFFFFFF
// DataOut: eax fs r11 r12 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008
// LocalsOut: fp(64)

l00000000004117B8:
	byte Z_22 = cond(edi - 0x0000000A)
	eax_16 = edi
	branch edi == 0x0000000A l00000000004117C8
// DataOut: eax fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008
// LocalsOut: fp(64)

l00000000004117C8:
	word64 rdx_33 = Mem0[rsi:word64]
	word64 rdi_35 = DPB(rdi, 0x004137B1, 0)
	word64 rcx_37 = DPB(rcx, 0x0000000A, 0)
	word64 rsi_38 = rdx_33
// DataOut: eax fs r11 r12 r14 r15 rbp rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:edi
// LocalsOut: fp(64)

l00000000004117D8:
	branch rcx_37 == 0x0000000000000000 l00000000004117DA
// DataOut: eax fs r11 r12 r14 r15 rbp rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:edi rdx:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l00000000004117D8_1:
	Z_22 = cond(Mem0[rsi_89:byte] - Mem0[rdi_88:byte]) (alias)
	rsi_38 = rsi_89 + 0x0000000000000001
	rdi_35 = rdi_88 + 0x0000000000000001
	rcx_37 = rcx_37 - 0x0000000000000001
	word64 rdi_88 = rdi_35
	word64 rsi_89 = rsi_38
	branch Mem0[rsi_89:byte] != Mem0[rdi_88:byte] l00000000004117D8
// DataOut: eax fs r11 r12 r14 r15 rbp rcx rdi rsi
// DataOut (flags): Z
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:edi rdx:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l00000000004117DA:
	branch Z_22 l00000000004117BF
// DataOut: eax fs r11 r12 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:edi rdx:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l00000000004117DC:
	word64 rsp_58
	byte SCZO_59
	word32 edi_60
	byte SZO_61
	byte C_62
	byte Z_63
	word32 eax_64
	word64 rsi_65
	word64 rdx_66
	word32 ecx_67
	word64 rcx_68
	word64 rdi_69
	word64 rax_70
	call freecon (retsize: 8; depth: 16)
		uses: C_53,eax_24,ecx_50,edi_55,rax_26,rcx_49,rdi_57,rdx_33,rsi_51,rsp_2,SCZO_56,SZO_54,Z_52
		defs: C_62,eax_64,ecx_67,edi_60,rax_70,rcx_68,rdi_69,rdx_66,rsi_65,rsp_58,SCZO_59,SZO_61,Z_63
	Mem72[__errno_location():word32] = 0x0000003D
	eax_16 = 0xFFFFFFFF
// DataOut: eax fs r11 r12 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:edi rdx:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid>
// LocalsOut: fp(64)

l00000000004117BF:
	return eax_16
// DataOut: eax fs r11 r12 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000008 eax:<invalid> rax:<invalid> rdx:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid>

fn00000000004117B0_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp eax:<invalid> rax:<invalid> rdx:<invalid> edi:<invalid> ecx:<invalid> rsi:<invalid> rdi:<invalid> rcx:<invalid>



word32 fn0000000000411820(word32 eax, word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000411820_entry:
// DataOut: eax fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411820:
	word64 rsp_9
	word64 rbx_10
	word64 rsi_11
	word32 edi_12
	word32 eax_13
	call getfilecon (retsize: 8; depth: 12)
		uses: dwLoc04_4,qwLoc04_6,rbx_8,rsi,rsp_2
		defs: eax_13,edi_12,rbx_10,rsi_11,rsp_9
// DataOut: edi fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041182F_thunk_fn00000000004117B0:
	return fn00000000004117B0(rbx_10, eax_13)
// DataOut: eax fs r11 r12 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:rsi edi:eax -4(fp):rbx

fn0000000000411820_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:<invalid> edi:<invalid> eax:<invalid> rax:<invalid> rdx:<invalid> ecx:<invalid> rdi:<invalid> rcx:<invalid> -4(fp):rbx



word32 fn0000000000411840(word32 eax, word64 rsi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rsi
// LiveOut: eax
// Trashed: SCZO ah al ax ch cl cx dh di dil dl dx eax ecx edi edx esi esp rax rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rsi
fn0000000000411840_entry:
// DataOut: eax fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411840:
	word64 rsp_9
	word64 rbx_10
	word64 rsi_11
	word32 edi_12
	word32 eax_13
	byte SCZO_14
	byte SZO_15
	byte C_16
	byte Z_17
	word64 rax_18
	word64 rdx_19
	word32 ecx_20
	word64 rcx_21
	word64 rdi_22
	call lgetfilecon (retsize: 8; depth: 12)
		uses: dwLoc04_4,qwLoc04_6,rbx_8,rsi,rsp_2
		defs: C_16,eax_13,ecx_20,edi_12,rax_18,rbx_10,rcx_21,rdi_22,rdx_19,rsi_11,rsp_9,SCZO_14,SZO_15,Z_17
// DataOut: edi fs r11 r12 r14 r15 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp

l000000000041184E_thunk_fn00000000004117B0:
	return fn00000000004117B0(rbx_10, eax_13)
// DataOut: eax fs r11 r12 r14 r15 rbp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:rsi edi:eax -4(fp):rbx

fn0000000000411840_exit:
// DataOut: eax
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rsi:<invalid> edi:<invalid> eax:<invalid> rax:<invalid> rdx:<invalid> ecx:<invalid> rdi:<invalid> rcx:<invalid> -4(fp):rbx



void fn0000000000411880(word64 rax, word64 rdi, word64 r8, word64 r13)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r13 r8 rax rdi
// LiveOut:
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx rdi
fn0000000000411880_entry:
// DataOut: eax r13 r8 rax rdi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411880:
	word64 rsp_13
	word64 rbp_14
	word64 rdi_15
	word64 rbx_16
	word32 ebx_17
	word64 r12_18
	word64 rax_19
	byte SZO_20
	byte C_21
	word32 eax_22
	byte dl_23
	byte Z_24
	byte SCZO_25
	byte bl_26
	word64 r8_27
	word64 r13_28
	word64 rsi_29
	call __fpending (retsize: 8; depth: 20)
		uses: dwLoc04_4,dwLoc08_7,dwLoc0C_12,rbp_9,rbx,rdi,rsp_10
		defs: bl_26,C_21,dl_23,eax_22,ebx_17,r12_18,r13_28,r8_27,rax_19,rbp_14,rbx_16,rdi_15,rsi_29,rsp_13,SCZO_25,SZO_20,Z_24
	word32 ebx_34
	word64 rsp_35
	word64 rbp_36
	word64 rsi_37
	word64 r12_38
	word32 eax_40 = (word32) fn0000000000411D30(rax_19, rbp_14, r8_27, r13_28, out ebx_34, out rsp_35, out rbp_36, out rsi_37, out r12_38)
	branch (ebx_34 & 0x00000020) != 0x00000000 l00000000004118C0
// DataOut: dl r12 rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l00000000004118C0:
	branch eax_40 != 0x00000000 != 0x00 l00000000004118B4
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rdi:<invalid> r12:rax dl:Test(NE,Z) rax:<invalid> r12d:<invalid> eax:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rbx:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118C9:
	Mem98[__errno_location():word32] = 0x00000000
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:0xFFFFFFFF rdi:<invalid> r12:rax dl:Test(NE,Z) rax:<invalid> r12d:<invalid> eax:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rbx:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118A6:
	branch eax_40 != 0x00000000 == 0x00 l00000000004118B4
// DataOut: r12 rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rdi:<invalid> r12:rax dl:Test(NE,Z) rax:<invalid> r12d:<invalid> eax:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rbx:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118AA:
	branch r12_38 == 0x0000000000000000 l00000000004118E0
// DataOut: rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rdi:<invalid> r12:rax dl:Test(NE,Z) rax:<invalid> r12d:<invalid> eax:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rbx:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118E0:
	__errno_location()
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:0xFFFFFFFF rdi:<invalid> r12:rax dl:Test(NE,Z) rax:<invalid> r12d:<invalid> eax:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rbx:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l00000000004118B4:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rdi:<invalid> r12:rax dl:Test(NE,Z) rax:<invalid> r12d:<invalid> eax:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rbx:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000411880_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbp:<invalid> ebx:<invalid> rdi:<invalid> r12:rax dl:Test(NE,Z) eax:<invalid> rbx:<invalid> rax:<invalid> bl:<invalid> r12d:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn0000000000411900(word64 rbp, word64 rsi, word64 r8, word64 r12, word64 r13, word64 r15, selector fs, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & r12dOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  fs r12 r13 r15 r8 rbp rsi
// LiveOut: r12d rax rbp rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx ch cl cx dh di dil dl dx eax ebp ebx ecx edi edx esi esp r10 r10b r10d r10w r12 r12b r12d r12w r13 r13b r13d r13w r14 r14b r14d r14w r15 r15b r15d r15w r8 r8b r8d r8w rax rbp rbx rcx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411900_entry:
// DataOut: fs r12 r12d r13 r15 r8 rbp rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411900:
	rsp = fp
	rsp = fp - 0x0000000000000004
	dwLoc04 = rdi
	edi = 0x0000000E
	rsp = fp - 0x0000000000000008
	dwLoc08 = rsi
	rsp = fp - 0x000000000000000C
	dwLoc0C = rbp
	v7 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000010
	dwLoc10 = fp - 0x000000000000000C
	rsp = fp - 0x0000000000000014
	dwLoc14 = rbp
	rsp = fp - 0x0000000000000018
	dwLoc18 = rbx
	rsp = fp - 0x00000000000000C0
	rax = Mem0[fs:0x00000028:word64]
	qwLoc28 = rax
	eax = 0x00000000
	SZO = cond(0x00000000)
	C = false
	call nl_langinfo (retsize: 8; depth: 200)
	r14 = Mem0[0x000000000061B358:word64]
	SZO = cond(rax & rax)
	C = false
	rbx = rax
	eax = 0x00416919
	rax = DPB(rax, eax, 0) (alias)
	branch Test(NE,Z) l0000000000411944
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411940_1:
	rbx = rax
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 edi:<invalid> rax:<invalid> eax:0x00416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411944:
	SZO = cond(r14 & r14)
	C = false
	branch Test(NE,Z) l000000000041196A
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 edi:<invalid> rax:<invalid> eax:0x00416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411949:
// DataOut: fs r12 r12d r13 r14 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 edi:<invalid> rax:<invalid> eax:0x00416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119D4:
	edi = 0x00417002
	rax = getenv(rdi)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l00000000004119EF
// DataOut: fs r12 r12d r13 r14 r15 r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 edi:<invalid> rax:<invalid> eax:0x00416919 r14:<invalid> rbx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119E6:
	SCZO = cond(Mem0[rax:byte] - 0x00)
	branch Test(NE,Z) l0000000000411C52
// DataOut: fs r12 r12d r13 r14 r15 r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 edi:0x00417002 rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C52:
	rdi = rax
	rax = DPB(rax, strlen(rdi), 0)
	SZO = cond(rax & rax)
	C = false
	r12 = rax
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r12 r12d r13 r14 r15 r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 edi:0x00417002 rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C62:
	rax = rax - 0x0000000000000001
// DataOut: fs r12 r12d r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119EF:
	eax = 0x00000007
	esp = 0x00000008
	edi = 0x00416FF3
// DataOut: fs r12 r12d r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x00000000000000C0 edi:0x00417002 rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A00:
	SCZO = cond(Mem0[r15 + rax:byte] - 0x2F)
	ebp = 0x00000001
	Mem0[rsp + 0x0000000000000008:word32] = 0x00000001
	branch Test(EQ,Z) l0000000000411C42
// DataOut: fs r12 r12d r13 r14 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 rdi:<invalid> r12:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C42:
	r13d = 0x00000000
	SZO = cond(0x00000000)
	C = false
	Mem0[rsp + 0x0000000000000008:word32] = 0x00000000
// DataOut: fs r12 r12d r13 r14 r15 r8 rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> rdi:<invalid> r12:<invalid> esp:0x00000008 ebp:0x00000001 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A19:
	r13 = r13 + r12
	rdi = rbp + 0x000000000000000E
	rax = malloc(rdi)
	SZO = cond(rax & rax)
	C = false
	rbp = rax
	branch Test(EQ,Z) l0000000000411CF2
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:0x00000001 rdi:<invalid> r12:<invalid> r13d:0x00000000 -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CF2:
	esi = 0x00416919
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:rbp + 0x000000000000000E r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A31:
	rdx = r12
	rsi = r15
	rdi = rax
	rax = memcpy(rdi, rsi, rdx)
	edx = Mem0[rsp + 0x0000000000000008:word32]
	SZO = cond(edx & edx)
	C = false
	branch Test(EQ,Z) l0000000000411A4D
// DataOut: fs r13 r14 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:rbp + 0x000000000000000E r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A47:
	Mem0[rbp + 0x0000000000000000:byte] = 0x2F
// DataOut: fs r13 r14 r15 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A4D:
	r13 = r13 + rbp
	r8 = 0x0000000072616863
	esi = 0x00020000
	Mem0[rbp + 0x0000000000000000:word64] = rax
	eax = 0x00000073
	Mem0[rbp + 0x0000000000000008:word32] = 0x61696C61
	Mem0[rbp + 0x000000000000000C:word16] = ax
	rdi = rbp
	eax = 0x00000000
	rax = DPB(rax, open(rdi, rsi), 0)
	SZO = cond(eax & eax)
	C = false
	r12d = eax
	branch Test(SG,S) l0000000000411C28
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411A8A:
	esi = 0x00413A21
	edi = eax
	rax = fdopen(rdi, rsi)
	SZO = cond(rax & rax)
	C = false
	r15 = rax
	branch Test(EQ,Z) l0000000000411C20
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbp rbx rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:0x0000000072616863 esi:0x00020000 r12d:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C20:
	edi = r12d
	rax = DPB(rax, close(rdi), 0)
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbp rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:0x0000000072616863 esi:0x00413A21 r12d:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AA2:
	r12 = rsp + 0x0000000000000020
	Mem0[rsp + 0x0000000000000008:word64] = 0x0000000000000000
// DataOut: fs r12 r13 r14 r15 r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:0x0000000072616863 esi:0x00413A21 r12d:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AB0:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411C01
// DataOut: eax fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ABE:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	edi = (word32) Mem0[rax:byte]
// DataOut: edi fs r12 r13 r14 r15 r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AC9:
	SCZO = cond(edi - 0x00000020)
	branch Test(EQ,Z) l0000000000411AB0
// DataOut: edi fs r12 r13 r14 r15 r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ACE:
	eax = rdi - 0x0000000000000009
	SCZO = cond(eax - 0x00000001)
	branch Test(ULE,CZ) l0000000000411AB0
// DataOut: edi fs r12 r13 r14 r15 r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411AD6:
	SCZO = cond(edi - 0x00000023)
	branch Test(EQ,Z) l0000000000411C75
// DataOut: fs r12 r13 r14 r15 r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C75:
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411D1D
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(UGE,C) l0000000000411D1D
// DataOut: eax fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411D1D:
	rdi = r15
	call __uflow (retsize: 8; depth: 8)
// DataOut: eax fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C83:
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	eax = (word32) Mem0[rax:byte]
	rdx = rax + 0x0000000000000001
	Mem0[rdi + 0x0000000000000008:word64] = rdx
	eax = (word32) Mem0[rax:byte]
// DataOut: eax fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C8E:
	SCZO = cond(eax - 0x0000000A)
	branch Test(NE,Z) l0000000000411C70
// DataOut: eax fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C70:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(EQ,Z) l0000000000411C93
// DataOut: eax fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C93:
	SCZO = cond(eax - 0xFFFFFFFF)
	branch Test(NE,Z) l0000000000411AB0
// DataOut: eax fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411ADF:
	rsi = r15
	call ungetc (retsize: 8; depth: 8)
	rcx = rsp + 0x0000000000000060
	eax = 0x00000000
	SZO = cond(0x00000000)
	C = false
	rdx = r12
	esi = 0x00417012
	rdi = r15
	call fscanf (retsize: 8; depth: 8)
	SCZO = cond(0xFFFFFFFF)
	branch Test(LE,SZO) l0000000000411C9C
// DataOut: eax fs r12 r13 r14 r15 r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B07:
	rdx = r12
// DataOut: fs r12 r14 r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B0A:
	ecx = Mem0[rdx:word32]
	rdx = rdx + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	ecx = ~ecx
	eax = eax & ecx
	eax = eax & 0x80808080
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B0A
// DataOut: al eax fs r12 r14 r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B21:
	ecx = eax
	r10 = rsp + 0x0000000000000060
	ecx = ecx >>u 0x00000010
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B33
// DataOut: al cl fs r10 r12 r14 r15 r8 rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B30_1:
	eax = ecx
// DataOut: al fs r10 r12 r14 r15 r8 rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B33:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B3B
// DataOut: al fs r10 r12 r14 r15 r8 rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B37_2:
	rdx = rcx
// DataOut: al fs r10 r12 r14 r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B3B:
	al = al + al
	SCZO = cond(al)
	rdx = rdx - 0x03 - C
	rdx = rdx - r12
	SCZO = cond(rdx)
// DataOut: fs r10 r12 r14 r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B44:
	ecx = Mem0[rdx:word32]
	r10 = r10 + 0x0000000000000004
	eax = rcx + 0xFFFFFFFFFEFEFEFF
	ecx = ~ecx
	eax = eax & ecx
	eax = eax & 0x80808080
	SZO = cond(eax)
	C = false
	branch Test(EQ,Z) l0000000000411B44
// DataOut: al eax fs r10 r12 r14 r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B5C:
	ecx = eax
	ecx = ecx >>u 0x00000010
	SZO = cond(eax & 0x00008080)
	C = false
	branch Test(NE,Z) l0000000000411B69
// DataOut: al cl fs r10 r12 r14 r15 r8 rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B66_3:
	eax = ecx
// DataOut: al fs r10 r12 r14 r15 r8 rdx rsp
// DataOut (flags): Z
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B69:
	rcx = rdx + 0x0000000000000002
	branch Test(NE,Z) l0000000000411B71
// DataOut: al fs r10 r12 r14 r15 r8 rcx rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B6D_4:
	r10 = rcx
// DataOut: al fs r10 r12 r14 r15 r8 rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B71:
	al = al + al
	SCZO = cond(al)
	rax = rsp + 0x0000000000000060
	r10 = r10 - 0x03 - C
	r10 = r10 - rax
	SCZO = cond(Mem0[rsp + 0x0000000000000008:word64] - 0x0000000000000000)
	rax = r10 + rdx
	branch Test(NE,Z) l0000000000411CBC
// DataOut: fs r10 r12 r14 r15 r8 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CBC:
	rax = rax + Mem0[rsp + 0x0000000000000008:word64]
	SCZO = cond(rax)
	rdi = r14
	Mem0[rsp + 0x0000000000000018:word64] = r10
	Mem0[rsp + 0x0000000000000010:word64] = rdx
	rcx = rax + 0x0000000000000002
	rsi = rax + 0x0000000000000003
	Mem0[rsp + 0x0000000000000008:word64] = rcx
	rax = realloc(rdi, rsi)
	r10 = Mem0[rsp + 0x0000000000000018:word64]
	r13 = rax
	rdx = Mem0[rsp + 0x0000000000000010:word64]
// DataOut: eax fs r10 r12 r13 r14 r15 r8 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411B8F:
	rcx = rax + 0x0000000000000002
	rdi = rax + 0x0000000000000003
	Mem0[rsp + 0x0000000000000018:word64] = rdx
	Mem0[rsp + 0x0000000000000010:word64] = r10
	Mem0[rsp + 0x0000000000000008:word64] = rcx
	rax = malloc(rdi)
	r10 = Mem0[rsp + 0x0000000000000010:word64]
	rdx = Mem0[rsp + 0x0000000000000018:word64]
	r13 = rax
// DataOut: eax fs r10 r12 r13 r14 r15 r8 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411BB8:
	SZO = cond(r13 & r13)
	C = false
	branch Test(EQ,Z) l0000000000411D02
// DataOut: eax fs r10 r12 r13 r14 r15 r8 rax rdx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411BC1:
	r14 = Mem0[rsp + 0x0000000000000008:word64]
	rdi = 0xFFFFFFFFFFFFFFFE
	rsi = r12
	rdi = 0xFFFFFFFFFFFFFFFE - rdx
	r14 = r14 - r10
	rdi = rdi + r14
	rdi = rdi + r13
	rax = strcpy(rdi, rsi)
	rdi = r13 - 0x0000000000000001 + r14
	rsi = rsp + 0x0000000000000060
	r14 = r13
	rax = strcpy(rdi, rsi)
	rax = Mem0[rdi + 0x0000000000000008:word64]
	SCZO = cond(rax - Mem0[rdi + 0x0000000000000010:word64])
	branch Test(ULT,C) l0000000000411ABE
// DataOut: eax fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C01:
	rdi = r15
	call __uflow (retsize: 8; depth: 8)
	SCZO = cond(eax - 0xFFFFFFFF)
	edi = eax
	branch Test(EQ,Z) l0000000000411C9C
// DataOut: eax edi fs r12 r13 r14 r15 r8 rax rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C9C:
	rdi = r15
	rax = fn0000000000411D30(rax, rdi, r8, r13, out ebx, out rsp, out rbp, out rsi, out r12)
	rax = Mem0[rsp + 0x0000000000000008:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411C28
	rdi = r15
	rax = fn0000000000411D30(rax, rdi, r8, r13, out ebx, out rsp, out rbp, out rsi, out r12)
	rax = Mem0[rsp + 0x0000000000000008:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000411C28
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C28:
	esi = 0x00416919
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CB2:
	Mem0[r14 + rax:byte] = 0x00
	Mem0[r14 + rax:byte] = 0x00
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C2E:
	rdi = rbp
	free(rdi)
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rdi:<invalid> esi:<invalid> rbp:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C36:
	Mem0[0x000000000061B358:word64] = r14
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> rsi:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041196A:
	ebp = (word32) Mem0[rsi:byte]
	SZO = cond(bpl & bpl)
	C = false
	branch Test(EQ,Z) l000000000041199C
// DataOut: bpl eax fs r12d r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411973:
	rsi = r14
	rdi = rbx
	rax = DPB(rax, strcmp(rdi, rsi), 0)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000041198F
// DataOut: bpl fs r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411982:
	SCZO = cond(bpl - 0x2A)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411988:
	SCZO = cond(Mem0[rsi + 0x0000000000000001:byte] - 0x00)
	branch Test(NE,Z) l0000000000411950
// DataOut: fs r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411950:
	rdi = r14
	rax = DPB(rax, strlen(rdi), 0)
	rbp = r14 + 0x0000000000000001 + rax
	rdi = rbp
	rax = DPB(rax, strlen(rdi), 0)
	r14 = rbp + 0x0000000000000001 + rax
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041198F:
	rdi = r14
	rax = DPB(rax, strlen(rdi), 0)
	rbx = r14 + 0x0000000000000001 + rax
// DataOut: fs r12d r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l000000000041199C:
	SCZO = cond(Mem0[rbx:byte] - 0x00)
	eax = 0x00416FFC
	branch Test(NE,Z) l00000000004119A8
// DataOut: fs r12d r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119A4_1:
	rbx = rax
// DataOut: fs r12d r13 r14 r15 r8 rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:0x00416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:0xFC -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119A8:
	rcx = Mem0[rsp + 0x0000000000000098:word64]
	rcx = rcx ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rcx)
	C = false
	rax = rbx
	branch Test(NE,Z) l0000000000411CFD
// DataOut: eax fs r12d r13 r14 r15 r8 rax rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:0x00416FFC r14:<invalid> rbx:<invalid> ebp:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> rcx:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:0xFC -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411CFD:
	__stack_chk_fail()
// DataOut: eax fs r13 r14 r15 r8 rax
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411D02:
	rdi = r14
	esi = 0x00416919
	free(rdi)
	rdi = r15
	rax = fn0000000000411D30(rax, rdi, r8, r13, out ebx, out rsp, out rbp, out rsi, out r12)
// DataOut: eax fs r12d r13 r14 r15 r8 rax rbp rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l00000000004119C2:
	rsp = rsp + 168
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return rax
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rsi:<invalid> rdi:<invalid> rbp:<invalid> r15:<invalid> esp:0x00000008 r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

fn0000000000411900_exit:
	use rsp (=> rspOut)
	use rbp (=> rbpOut)
	use r12d (=> r12dOut)
// DataOut: r12d rax rbp rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> ebp:<invalid> rcx:<invalid> rbp:<invalid> rsi:<invalid> rdi:<invalid> r15:<invalid> esp:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> esi:<invalid> r12d:<invalid> edx:<invalid> rdx:<invalid> r8:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi

l0000000000411C14:
// DataOut: edi fs r12 r13 r14 r15 r8 rdi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> edi:<invalid> rax:<invalid> eax:<invalid> r14:<invalid> rbx:<invalid> r15:<invalid> esp:0x00000008 ebp:<invalid> rdi:<invalid> r12:<invalid> r13d:<invalid> r13:<invalid> rbp:<invalid> rdx:<invalid> rsi:<invalid> edx:<invalid> r8:<invalid> esi:<invalid> r12d:<invalid> rcx:<invalid> ecx:<invalid> r10:<invalid> al:<invalid> -40(fp):<invalid> -24(fp):rbx -20(fp):rbp -16(fp):fp - 0x000000000000000C -12(fp):rbp -8(fp):rsi -4(fp):rdi



word64 fn0000000000411D30(word64 rax, word64 rdi, word64 r8, word64 r13, ptr64 & ebxOut, ptr64 & rspOut, ptr64 & rbpOut, ptr64 & rsiOut, ptr64 & r12Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax r13 r8 rax rdi
// LiveOut: eax ebx r12 r12d rax rbp rsi rsp
// Trashed: SCZO ah al ax bh bl bp bpl bx dh di dil dl dx eax ebp ebx edi edx esi esp r12 r12b r12d r12w rax rbp rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411D30_entry:
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411D30:
	word64 rax_15 = DPB(rax, fileno(rdi), 0)
	word32 eax_16 = fileno(rdi)
	branch eax_16 < 0x00000000 l0000000000411D9F
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411D43:
	word64 rsp_101
	word64 rbp_102
	word64 rdi_104
	word64 rax_105
	byte SZO_107
	byte C_108
	byte S_109
	byte Z_110
	word32 r12d_111
	word32 esi_114
	word32 edx_115
	word32 edi_116
	byte SCZO_117
	word32 ebx_118
	word64 rsi_119
	word64 r13_113
	word64 r8_112
	word64 r12_120
	word32 eax_106
	word64 rbx_103
	call __freading (retsize: 8; depth: 20)
		uses: C_19,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_16,ebx_13,edi,edx,esi,r12,r12d,r13,r8,rax_15,rbp,rbx_12,rdi_20,rsi,rsp_8,S_18,SCZO,SZO_17,Z
		defs: C_108,eax_106,ebx_118,edi_116,edx_115,esi_114,r12_120,r12d_111,r13_113,r8_112,rax_105,rbp_102,rbx_103,rdi_104,rsi_119,rsp_101,S_109,SCZO_117,SZO_107,Z_110
	branch eax_106 != 0x00000000 l0000000000411D80
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi rax:DPB(rax, <invalid>, 0) rdi:rdi -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D80:
	word64 rax_188 = DPB(rax_105, fileno(rbx_103), 0)
	word64 rsp_196
	word64 rbp_197
	word64 rdi_199
	word64 rax_200
	byte SZO_202
	byte C_203
	byte S_204
	byte Z_205
	word32 r12d_206
	word32 esi_209
	word32 edx_210
	word32 edi_211
	byte SCZO_212
	word32 ebx_213
	word64 rsi_214
	call lseek (retsize: 8; depth: 20)
		uses: C_193,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_189,ebx_118,edi_195,edx_194,esi_190,r12_120,r12d_111,r13_113,r8_112,rax_188,rbp_102,rbx_103,rdi_187,rsi_191,rsp_101,S_109,SCZO_117,SZO_192,Z_122
		defs: C_203,eax_201,ebx_213,edi_211,edx_210,esi_209,r12_215,r12d_206,r13_208,r8_207,rax_200,rbp_197,rbx_198,rdi_199,rsi_214,rsp_196,S_204,SCZO_212,SZO_202,Z_205
	branch rax_200 != 0xFFFFFFFFFFFFFFFF l0000000000411D4C
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi rax:<invalid> rdi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D4C:
	word64 rsp_158
	word64 rsi_159
	branch (word32) fn0000000000411DB0(eax_106, rbx_103, out rsp_158, out rsi_159) == 0x00000000 l0000000000411D9C
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x000000000000000C rbx:rdi rax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D9C:
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rsi:<invalid> eax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D9F:
// DataOut: eax ebx fs r12 r12d r13 r14 r15 r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rsi:<invalid> eax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000402310:
	word64 rsp_81
	word64 rbp_82
	word64 rbx_83
	word64 rdi_84
	word64 rax_85
	word32 eax_86
	byte SZO_87
	byte C_88
	byte S_89
	byte Z_90
	word32 r12d_91
	word64 r8_92
	word64 r13_93
	word32 esi_94
	word32 edx_95
	word32 edi_96
	byte SCZO_97
	word32 ebx_98
	word64 rsi_99
	word64 r12_100
	call Mem0[0x000000000061A0D0:word32] (retsize: 4; depth: 4)
		uses: C_69,dwLoc04_4,dwLoc08_7,dwLoc0C_10,eax_70,ebx_75,edi_58,edx_59,esi_60,r12_65,r12d_64,r13_61,r8_62,rax_71,rbp_77,rbx_74,rdi_66,rsi_56,rsp_80,S_63,SCZO_57,SZO_67,Z_68
		defs: C_88,eax_86,ebx_98,edi_96,edx_95,esi_94,r12_100,r12d_91,r13_93,r8_92,rax_85,rbp_82,rbx_83,rdi_84,rsi_99,rsp_81,S_89,SCZO_97,SZO_87,Z_90
	return rax_85
// DataOut: eax ebx fs r12 r12d r13 r14 r15 r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rbp:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rsi:<invalid> eax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D58:
	word64 rax_165 = __errno_location()
	word32 r12d_166 = Mem0[r8_112:word32]
	word64 r12_167
	*r12Out = DPB(r12_120, r12d_166, 0)
	word64 rax_170 = DPB(rax_165, fclose(rbx_103), 0)
	branch r12d_166 == 0x00000000 l0000000000411D79
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rsi:<invalid> eax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D70:
	Mem184[r13_113:word32] = r12d_166
	rax_170 = DPB(rax_165, 0xFFFFFFFF, 0) (alias)
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r12d:<invalid> rbp:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rsi:<invalid> eax:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

l0000000000411D79:
	word32 ebx_178
	*ebxOut = (word32) Mem0[rsp_158:word64]
	word64 rbp_180
	*rbpOut = Mem0[rsp_158 + 0x0000000000000008:word64]
	word64 rsp_183
	*rspOut = Mem0[rsp_158 + 0x0000000000000010:word64] + 0x0000000000000008
	return rax_170
// DataOut: eax ebx fs r12 r12d r13 r14 r15 r8 rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> r12d:<invalid> rbp:<invalid> eax:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp

fn0000000000411D30_exit:
// DataOut: eax ebx r12 r12d rax rbp rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rax:<invalid> rdi:<invalid> rbp:<invalid> r12d:<invalid> eax:<invalid> esi:<invalid> edx:<invalid> edi:<invalid> rsi:<invalid> -12(fp):rbx -8(fp):rbp -4(fp):fp



word64 fn0000000000411DB0(word32 eax, word64 rdi, ptr64 & rspOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  eax rdi
// LiveOut: eax rax rsi rsp
// Trashed: SCZO ah al ax bh bl bx dh di dil dl dx eax ebx edi edx esi esp rax rbx rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411DB0_entry:
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB0:
	branch rdi == 0x0000000000000000 l0000000000411DC2
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DB9:
	word64 rsp_42
	word64 rdi_43
	byte SZO_44
	byte C_45
	word64 rbx_46
	byte Z_47
	word32 eax_48
	word32 edx_49
	word32 esi_50
	word64 rax_51
	word64 rsi_52
	call __freading (retsize: 8; depth: 12)
		uses: C_5,dwLoc04_8,eax,edx,esi,qwLoc04,rax,rbx_9,rdi,rsi,rsp_6,SZO_3,Z_4
		defs: C_45,eax_48,edx_49,esi_50,rax_51,rbx_46,rdi_43,rsi_52,rsp_42,SZO_44,Z_47
	branch eax_48 != 0x00000000 l0000000000411DD0
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411DD0:
	branch (Mem0[rbx_46:word32] & 0x00000100) == 0x00000000 l0000000000411DC2
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411DD8:
	word64 rsp_65
	word64 rsi_66
	fn0000000000411DF0(rbx_46, out rsp_65, out rsi_66)
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

l0000000000411DC2:
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000004 rbx:rdi -4(fp):rbx

l0000000000402650:
	word64 rsp_16
	word64 rdi_17
	byte SZO_18
	byte C_19
	word64 rbx_20
	byte Z_21
	word32 eax_22
	word32 edx_23
	word32 esi_24
	word64 rax_25
	word64 rsi_26
	call Mem0[0x000000000061A270:word32] (retsize: 4; depth: 4)
		uses: C_5,dwLoc04_8,eax,edx,esi,rax,rbx_9,rdi,rsi,rsp_6,SZO_3,Z_4
		defs: C_19,eax_22,edx_23,esi_24,rax_25,rbx_20,rdi_17,rsi_26,rsp_16,SZO_18,Z_21
	return rax_25
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdi:rdi edx:<invalid> esi:0x00000000 rax:<invalid> rsi:<invalid> edi:<invalid> eax:0x00000000 -4(fp):rbx

fn0000000000411DB0_exit:
// DataOut: eax rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:<invalid> rbx:<invalid> rdi:<invalid> edx:<invalid> esi:<invalid> rax:<invalid> rsi:<invalid> edi:<invalid> eax:<invalid> -4(fp):rbx



word64 fn0000000000411DF0(word64 rdi, ptr64 & rspOut, ptr64 & rsiOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  rdi
// LiveOut: eax rax rsi rsp
// Trashed: SCZO ah al ax dh di dil dl dx eax edi edx esi esp rax rdi rdx rsi rsp si sil sp spl
// Preserved: rbx
fn0000000000411DF0_entry:
// DataOut: fs r12 r12d r13 r14 r15 r8 rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411DF0:
	branch Mem0[rdi + 0x0000000000000010:word64] == Mem0[rdi + 0x0000000000000008:word64] l0000000000411E10
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411E10:
	word64 rax_57 = Mem0[rdi + 0x0000000000000020:word64]
	branch Mem0[rdi + 0x0000000000000028:word64] != rax_57 l0000000000411E02
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E1A:
	branch Mem0[rdi + 0x0000000000000048:word64] != 0x0000000000000000 l0000000000411E02
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rdi rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E21:
	word64 rax_65 = DPB(rax_57, fileno(rdi), 0)
	word64 rsp_70
	word64 rbx_71
	word64 rdi_72
	byte SCZO_73
	byte Z_75
	word32 edx_76
	word64 rsi_77
	word32 edi_78
	word32 eax_79
	byte SZO_80
	byte C_81
	word64 rax_74
	call lseek (retsize: 8; depth: 28)
		uses: C,dwLoc04_4,dwLoc08_63,eax_66,edi_69,edx_67,qwLoc04,qwLoc14_64,rax_65,rbx_6,rdi,rsi_68,rsp_7,SCZO_61,SZO,Z_62
		defs: C_81,eax_79,edi_78,edx_76,rax_74,rbx_71,rdi_72,rsi_77,rsp_70,SCZO_73,SZO_80,Z_75
	branch rax_74 == 0xFFFFFFFFFFFFFFFF l0000000000411E4F
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rbx rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E43:
	Mem93[rbx_71:word32] = Mem0[rbx_71:word32] & 0xFFFFFFEF
	Mem95[rbx_71 + 0x0000000000000090:word64] = rax_74
	rax_74 = DPB(rax_74, 0x00000000, 0) (alias)
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> -20(fp):rsi -8(fp):edx -4(fp):rbx
// LocalsOut: fp(64)

l0000000000411E4F:
	word64 rsp_91
	*rspOut = fp + 0x0000000000000004
	return rax_74
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> eax:0x00000000 -20(fp):rsi -8(fp):edx -4(fp):rbx

l0000000000411E02:
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp - 0x0000000000000014 rbx:rdi rax:<invalid> -4(fp):rbx

l0000000000402790:
	word64 rsp_45
	word64 rbx_46
	word64 rdi_47
	byte SCZO_48
	word64 rax_49
	byte Z_50
	word32 edx_51
	word64 rsi_52
	word32 edi_53
	word32 eax_54
	byte SZO_55
	byte C_56
	call Mem0[0x000000000061A310:word32] (retsize: 4;)
		uses: C,dwLoc04_4,dwLoc08,eax_29,edi,edx,qwLoc04,qwLoc14,rax_31,rbx_36,rdi_34,rsi,rsp_37,SCZO_33,SZO,Z_30
		defs: C_56,eax_54,edi_53,edx_51,rax_49,rbx_46,rdi_47,rsi_52,rsp_45,SCZO_48,SZO_55,Z_50
	return rax_49
// DataOut: eax fs r12 r12d r13 r14 r15 r8 rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdi:rdi -4(fp):rbx

fn0000000000411DF0_exit:
// DataOut: eax rax rsi rsp
// DataOut (flags): 
// SymbolicIn: rsp:fp + 0x0000000000000004 rbx:rbx rax:<invalid> rdi:<invalid> edx:<invalid> rsi:<invalid> edi:<invalid> eax:0x00000000 -20(fp):rsi -8(fp):edx -4(fp):rbx



void fn0000000000411EE0()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO ah al ax dh dl dx eax edx esi rax rdx rsi si sil
// Preserved: rsp
fn0000000000411EE0_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EE0:
	branch 0x000000000061A3A8 == 0x0000000000000000 l0000000000411EF6
// DataOut: rax
// DataOut (flags): 
// SymbolicIn: rsp:fp

l0000000000411EF6:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEC:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8

l0000000000411EEF:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8 rdx:<invalid> edx:0x00000000

l00000000004027B0:
	word64 rsp_12
	word64 rax_13
	byte SZO_14
	byte C_15
	byte Z_16
	word64 rdx_17
	word32 esi_18
	word32 edx_19
	call Mem0[0x000000000061A320:word32] (retsize: 4; depth: 4)
		uses: C_10,edx_6,esi_8,rax_2,rdx_7,rsp_1,SZO_9,Z_4
		defs: C_15,edx_19,esi_18,rax_13,rdx_17,rsp_12,SZO_14,Z_16
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:000000000061A3A8 rdx:<invalid> edx:0x00000000 esi:0x00000000

fn0000000000411EE0_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp rax:<invalid> rdx:<invalid> edx:<invalid> esi:<invalid>



void _fini()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO
// Preserved: rsp
fn0000000000411EFC_entry:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp
// LocalsOut: fp(64)

l0000000000411EFC:
	return
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp

fn0000000000411EFC_exit:
// DataOut:
// DataOut (flags): 
// SymbolicIn: rsp:fp



