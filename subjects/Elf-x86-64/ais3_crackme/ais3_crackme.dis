// _init
// Return size: 8
void _init()
_init_entry:
	// succ:  l00000000004003C8
l00000000004003C8:
	rsp = fp
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	call call_gmon_start (retsize: 8;)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	return
	// succ:  _init_exit
_init_exit:


// _start
// Return size: 0
void _start()
_start_entry:
	// succ:  l0000000000400410
l0000000000400410:
	rsp = fp
	ebp = ebp ^ ebp
	SZO = cond(ebp)
	C = false
	r9 = rdx
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdx = rsp
	__align(rsp)
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rax
	v10 = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = v10
	r8 = 0x00000000004006B0
	rcx = 0x0000000000400620
	rdi = 0x00000000004005C5
	rax = DPB(rax, __libc_start_main(rdi, rsi, rdx, rcx, r8, r9, Mem0[rsp:(ptr void)]), 0)
	__hlt()
_start_exit:


// call_gmon_start
// Return size: 8
void call_gmon_start()
call_gmon_start_entry:
	// succ:  l000000000040043C
l000000000040043C:
	rsp = fp
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000600FE0:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l000000000040044E
	// succ:  l000000000040044C l000000000040044E
l000000000040044C:
	call eax (retsize: 4;)
	// succ:  l000000000040044E
l000000000040044E:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	return
	// succ:  call_gmon_start_exit
call_gmon_start_exit:


// deregister_tm_clones
// Return size: 8
void deregister_tm_clones()
deregister_tm_clones_entry:
	// succ:  l0000000000400460
l0000000000400460:
	rsp = fp
	eax = 0x0060103F
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r8 = r8 - 6295608
	SCZO = cond(r8)
	SCZO = cond(rax - 0x000000000000000E)
	rbp = rsp
	branch Test(UGT,CZ) l0000000000400477
	// succ:  l0000000000400475 l0000000000400477
l0000000000400475:
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  deregister_tm_clones_exit
l0000000000400477:
	eax = 0x00000000
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000400475
	// succ:  l0000000000400481 l0000000000400475
l0000000000400481:
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	edi = 0x00601038
	call eax (retsize: 4;)
	return
	// succ:  deregister_tm_clones_exit
deregister_tm_clones_exit:


// register_tm_clones
// Return size: 0
void register_tm_clones()
register_tm_clones_entry:
	// succ:  l0000000000400490
l0000000000400490:
	rsp = fp
	eax = 0x00601038
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r8 = r8 - 6295608
	SCZO = cond(r8)
	rax = rax >> 0x0000000000000003
	SCZO = cond(rax)
	rbp = rsp
	rdx = rax
	rdx = rdx >>u 0x000000000000003F
	SCZO = cond(rdx)
	rax = rax + rdx
	SCZO = cond(rax)
	rax = rax >> 0x0000000000000001
	SCZO = cond(rax)
	branch Test(NE,Z) l00000000004004B4
	// succ:  l00000000004004B2 l00000000004004B4
l00000000004004B2:
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  register_tm_clones_exit
l00000000004004B4:
	edx = 0x00000000
	SZO = cond(rdx & rdx)
	C = false
	branch Test(EQ,Z) l00000000004004B2
	// succ:  l00000000004004BE l00000000004004B2
l00000000004004BE:
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = rax
	edi = 0x00601038
	call edx (retsize: 4;)
	return
	// succ:  register_tm_clones_exit
register_tm_clones_exit:


// __do_global_dtors_aux
// Return size: 8
void __do_global_dtors_aux()
__do_global_dtors_aux_entry:
	// succ:  l00000000004004D0
l00000000004004D0:
	rsp = fp
	SCZO = cond(Mem0[0x0000000000601038:byte] - 0x00)
	branch Test(NE,Z) l00000000004004EA
	// succ:  l00000000004004D9 l00000000004004EA
l00000000004004D9:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsp
	call deregister_tm_clones (retsize: 8;)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	Mem0[0x0000000000601038:byte] = 0x01
	// succ:  l00000000004004EA
l00000000004004EA:
	return
	// succ:  __do_global_dtors_aux_exit
__do_global_dtors_aux_exit:


// frame_dummy
// Return size: 8
void frame_dummy()
frame_dummy_entry:
	// succ:  l00000000004004F0
l00000000004004F0:
	rsp = fp
	SCZO = cond(Mem0[0x0000000000600E08:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000400518
	// succ:  l00000000004004FA l0000000000400518
l00000000004004FA:
	eax = 0x00000000
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000400518
	// succ:  l0000000000400504 l0000000000400518
l0000000000400504:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	edi = 0x00600E08
	rbp = rsp
	call eax (retsize: 4;)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	// succ:  l000000000040050F_thunk_register_tm_clones
l000000000040050F_thunk_register_tm_clones:
	call register_tm_clones (retsize: 0;)
	return
	// succ:  frame_dummy_exit
l0000000000400518:
	call register_tm_clones (retsize: 0;)
	return
	// succ:  l0000000000400490 frame_dummy_exit
frame_dummy_exit:


// verify
// Return size: 8
void verify()
verify_entry:
	// succ:  l0000000000400520
l0000000000400520:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsp
	Mem0[rbp - 0x0000000000000018:word64] = rdi
	Mem0[rbp - 0x0000000000000004:word32] = 0x00000000
	goto l00000000004005A1
	// succ:  l00000000004005A1
l0000000000400531:
	eax = Mem0[rbp - 0x0000000000000004:word32]
	rdx = (int64) eax
	rax = Mem0[rbp - 0x0000000000000018:word64]
	rax = rax + rdx
	SCZO = cond(rax)
	eax = (word32) Mem0[rax:byte]
	edx = eax
	eax = Mem0[rbp - 0x0000000000000004:word32]
	eax = eax ^ edx
	SZO = cond(eax)
	C = false
	Mem0[rbp - 0x0000000000000005:byte] = al
	edx = (word32) Mem0[rbp - 0x0000000000000005:byte]
	eax = Mem0[rbp - 0x0000000000000004:word32]
	eax = eax ^ 0x00000009
	SZO = cond(eax)
	C = false
	eax = eax & 0x00000003
	SZO = cond(eax)
	C = false
	ecx = eax
	edx = edx << cl
	SCZO = cond(edx)
	eax = edx
	edx = eax
	esi = (word32) Mem0[rbp - 0x0000000000000005:byte]
	eax = Mem0[rbp - 0x0000000000000004:word32]
	eax = eax ^ 0x00000009
	SZO = cond(eax)
	C = false
	eax = eax & 0x00000003
	SZO = cond(eax)
	C = false
	ecx = eax
	eax = 0x00000008
	eax = eax - ecx
	SCZO = cond(eax)
	ecx = eax
	esi = esi >> cl
	SCZO = cond(esi)
	eax = esi
	eax = eax | edx
	SZO = cond(eax)
	C = false
	Mem0[rbp - 0x0000000000000005:byte] = al
	v17 = Mem0[rbp - 0x0000000000000005:byte] + 0x08
	Mem0[rbp - 0x0000000000000005:byte] = v17
	SCZO = cond(v17)
	eax = Mem0[rbp - 0x0000000000000004:word32]
	ax = (int16) al
	eax = (word32) Mem0[rax + 0x0000000000601020:byte]
	SCZO = cond(al - Mem0[rbp - 0x0000000000000005:byte])
	branch Test(EQ,Z) l000000000040059D
	// succ:  l0000000000400596 l000000000040059D
l0000000000400596:
	eax = 0x00000000
	goto l00000000004005C3
	// succ:  l00000000004005C3
l000000000040059D:
	v19 = Mem0[rbp - 0x0000000000000004:word32] + 0x00000001
	Mem0[rbp - 0x0000000000000004:word32] = v19
	SCZO = cond(v19)
	// succ:  l00000000004005A1
l00000000004005A1:
	eax = Mem0[rbp - 0x0000000000000004:word32]
	rdx = (int64) eax
	rax = Mem0[rbp - 0x0000000000000018:word64]
	rax = rax + rdx
	SCZO = cond(rax)
	eax = (word32) Mem0[rax:byte]
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l0000000000400531
	// succ:  l00000000004005B9 l0000000000400531
l00000000004005B9:
	SCZO = cond(Mem0[rbp - 0x0000000000000004:word32] - 0x00000017)
	al = Test(EQ,Z)
	eax = (word32) al
	// succ:  l00000000004005C3
l00000000004005C3:
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  verify_exit
verify_exit:


// main
// Return size: 8
void main()
main_entry:
	// succ:  l00000000004005C5
l00000000004005C5:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsp
	rsp = rsp - 0x0000000000000010
	SCZO = cond(rsp)
	Mem0[rbp - 0x0000000000000004:word32] = edi
	Mem0[rbp - 0x0000000000000010:word64] = rsi
	SCZO = cond(Mem0[rbp - 0x0000000000000004:word32] - 0x00000002)
	branch Test(EQ,Z) l00000000004005EB
	// succ:  l00000000004005DA l00000000004005EB
l00000000004005DA:
	edi = 0x004006C8
	rax = DPB(rax, puts(rdi), 0)
	eax = 0xFFFFFFFF
	goto l000000000040061D
	// succ:  l000000000040061D
l00000000004005EB:
	rax = Mem0[rbp - 0x0000000000000010:word64]
	rax = rax + 0x0000000000000008
	SCZO = cond(rax)
	rax = Mem0[rax:word64]
	rdi = rax
	call verify (retsize: 8;)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040060E
	// succ:  l0000000000400602 l000000000040060E
l0000000000400602:
	edi = 0x004006F0
	rax = DPB(rax, puts(rdi), 0)
	goto l0000000000400618
	// succ:  l0000000000400618
l000000000040060E:
	edi = 0x00400718
	rax = DPB(rax, puts(rdi), 0)
	// succ:  l0000000000400618
l0000000000400618:
	eax = 0x00000000
	// succ:  l000000000040061D
l000000000040061D:
	rsp = Mem0
	Mem0 = Mem0[rsp:<unknown>]
	rsp = rsp + 0x0000000000000000
	return
	// succ:  main_exit
main_exit:


// __libc_csu_init
// Return size: 8
void __libc_csu_init()
__libc_csu_init_entry:
	// succ:  l0000000000400620
l0000000000400620:
	rsp = fp
	Mem0[rsp - 0x0000000000000028:word64] = rbp
	Mem0[rsp - 0x0000000000000020:word64] = r12
	rbp = 0x0000000000600E00
	r12 = 0x0000000000600DF8
	Mem0[rsp - 0x0000000000000018:word64] = r13
	Mem0[rsp - 0x0000000000000010:word64] = r14
	Mem0[rsp - 0x0000000000000008:word64] = r15
	Mem0[rsp - 0x0000000000000030:word64] = rbx
	rsp = rsp - 0x0000000000000038
	SCZO = cond(rsp)
	rbp = rbp - r12
	SCZO = cond(rbp)
	r13d = edi
	r14 = rsi
	rbp = rbp >> 0x0000000000000003
	SCZO = cond(rbp)
	r15 = rdx
	call _init (retsize: 8;)
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l0000000000400686
	// succ:  l000000000040066A l0000000000400686
l000000000040066A:
	ebx = ebx ^ ebx
	SZO = cond(ebx)
	C = false
	// succ:  l0000000000400670
l0000000000400670:
	rdx = r15
	rsi = r14
	edi = r13d
	call Mem0[r12 + rbx * 0x00000008:word32] (retsize: 4;)
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	SCZO = cond(rbx - rbp)
	branch Test(NE,Z) l0000000000400670
	// succ:  l0000000000400686 l0000000000400670
l0000000000400686:
	rbx = Mem0[rsp + 0x0000000000000008:word64]
	rbp = Mem0[rsp + 0x0000000000000010:word64]
	r12 = Mem0[rsp + 0x0000000000000018:word64]
	r13 = Mem0[rsp + 0x0000000000000020:word64]
	r14 = Mem0[rsp + 0x0000000000000028:word64]
	r15 = Mem0[rsp + 0x0000000000000030:word64]
	rsp = rsp + 0x0000000000000038
	SCZO = cond(rsp)
	return
	// succ:  __libc_csu_init_exit
__libc_csu_init_exit:


// __libc_csu_fini
// Return size: 8
void __libc_csu_fini()
__libc_csu_fini_entry:
	// succ:  l00000000004006B0
l00000000004006B0:
	rsp = fp
	return
	// succ:  __libc_csu_fini_exit
__libc_csu_fini_exit:


// _fini
// Return size: 8
void _fini()
_fini_entry:
	// succ:  l00000000004006B4
l00000000004006B4:
	rsp = fp
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	return
	// succ:  _fini_exit
_fini_exit:


