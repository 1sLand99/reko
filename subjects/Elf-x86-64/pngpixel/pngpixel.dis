// _init
// Return size: 8
define _init
_init_entry:
	// succ:  l0000000000400AE8
l0000000000400AE8:
	rsp = fp
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	rax = Mem0[0x0000000000601FF8:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000400AFD
	// succ:  l0000000000400AF8 l0000000000400AFD
l0000000000400AF8:
	call fn0000000000400CC0 (retsize: 8;)
	// succ:  l0000000000400AFD
l0000000000400AFD:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	return
	// succ:  _init_exit
_init_exit:


// fn0000000000400CC0
// Return size: 0
define fn0000000000400CC0
fn0000000000400CC0_entry:
	// succ:  l0000000000400CC0
l0000000000400CC0:
	rsp = fp
	call Mem0[0x0000000000601FF8:word32] (retsize: 4;)
	return
	// succ:  fn0000000000400CC0_exit
fn0000000000400CC0_exit:


// _start
// Return size: 0
define _start
_start_entry:
	// succ:  l0000000000400CD0
l0000000000400CD0:
	rsp = fp
	rbp = (uint64) (ebp ^ ebp)
	SZO = cond(ebp)
	C = false
	r9 = rdx
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdx = rsp
	__align(rsp)
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rax
	v11 = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = v11
	r8 = 0x00000000004017F0
	rcx = 0x0000000000401780
	rdi = 0x00000000004012F9
	rax = DPB(rax, __libc_start_main(rdi, rsi, rdx, rcx, r8, r9, Mem0[rsp:(ptr void)]), 0)
	__hlt()
_start_exit:


// deregister_tm_clones
// Return size: 8
define deregister_tm_clones
deregister_tm_clones_entry:
	// succ:  l0000000000400D00
l0000000000400D00:
	rsp = fp
	rax = (uint64) 0x006020FF
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	r8 = r8 - 6299896
	SCZO = cond(r8)
	SCZO = cond(rax - 0x000000000000000E)
	rbp = rsp
	branch Test(ULE,CZ) l0000000000400D30
	// succ:  l0000000000400D15 l0000000000400D30
l0000000000400D15:
	rax = (uint64) 0x00000000
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000400D30
	// succ:  l0000000000400D1F l0000000000400D30
l0000000000400D1F:
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = (uint64) 0x006020F8
	call eax (retsize: 4;)
	return
	// succ:  deregister_tm_clones_exit
l0000000000400D30:
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  deregister_tm_clones_exit
deregister_tm_clones_exit:


// register_tm_clones
// Return size: 0
define register_tm_clones
register_tm_clones_entry:
	// succ:  l0000000000400D40
l0000000000400D40:
	rsp = fp
	rsi = (uint64) 0x006020F8
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rsi = rsi - 6299896
	SCZO = cond(rsi)
	rsi = rsi >> 0x0000000000000003
	SCZO = cond(rsi)
	rbp = rsp
	rax = rsi
	rax = rax >>u 0x000000000000003F
	SCZO = cond(rax)
	rsi = rsi + rax
	SCZO = cond(rsi)
	rsi = rsi >> 0x0000000000000001
	SCZO = cond(rsi)
	branch Test(EQ,Z) l0000000000400D78
	// succ:  l0000000000400D63 l0000000000400D78
l0000000000400D63:
	rax = (uint64) 0x00000000
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000400D78
	// succ:  l0000000000400D6D l0000000000400D78
l0000000000400D6D:
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = (uint64) 0x006020F8
	call eax (retsize: 4;)
	return
	// succ:  register_tm_clones_exit
l0000000000400D78:
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  register_tm_clones_exit
register_tm_clones_exit:


// __do_global_dtors_aux
// Return size: 8
define __do_global_dtors_aux
__do_global_dtors_aux_entry:
	// succ:  l0000000000400D80
l0000000000400D80:
	rsp = fp
	SCZO = cond(Mem0[0x0000000000602108:byte] - 0x00)
	branch Test(NE,Z) l0000000000400D9A
	// succ:  l0000000000400D89 l0000000000400D9A
l0000000000400D89:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsp
	call deregister_tm_clones (retsize: 8;)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	Mem0[0x0000000000602108:byte] = 0x01
	// succ:  l0000000000400D9A
l0000000000400D9A:
	return
	// succ:  __do_global_dtors_aux_exit
__do_global_dtors_aux_exit:


// frame_dummy
// Return size: 8
define frame_dummy
frame_dummy_entry:
	// succ:  l0000000000400DA0
l0000000000400DA0:
	rsp = fp
	rdi = (uint64) 0x00601E10
	SCZO = cond(Mem0[rdi:word64] - 0x0000000000000000)
	branch Test(NE,Z) l0000000000400DB0
	// succ:  l0000000000400DAB l0000000000400DB0
l0000000000400DAB:
	call register_tm_clones (retsize: 0;)
	return
	// succ:  l0000000000400D40 frame_dummy_exit
l0000000000400DB0:
	rax = (uint64) 0x00000000
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l0000000000400DAB
	// succ:  l0000000000400DBA l0000000000400DAB
l0000000000400DBA:
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsp
	call eax (retsize: 4;)
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	// succ:  l0000000000400DC0_thunk_register_tm_clones
l0000000000400DC0_thunk_register_tm_clones:
	call register_tm_clones (retsize: 0;)
	return
	// succ:  frame_dummy_exit
frame_dummy_exit:


// component
// Return size: 0
define component
component_entry:
	// succ:  l0000000000400DC6
l0000000000400DC6:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsp
	rsp = rsp - 0x0000000000000030
	SCZO = cond(rsp)
	Mem0[rbp - 0x0000000000000018:word64] = rdi
	Mem0[rbp - 0x000000000000001C:word32] = esi
	Mem0[rbp - 0x0000000000000020:word32] = edx
	Mem0[rbp - 0x0000000000000024:word32] = ecx
	Mem0[r13 - 0x0000000000000028:word32] = r8d
	rax = (uint64) Mem0[rbp - 0x000000000000001C:word32]
	rax = (uint64) (eax >>u 0x00000006)
	SCZO = cond(eax)
	rax = (uint64) (eax *s Mem0[rbp - 0x0000000000000028:word32])
	SCZO = cond(eax)
	rax = (uint64) (eax *s Mem0[rbp - 0x0000000000000024:word32])
	SCZO = cond(eax)
	Mem0[rbp - 0x0000000000000008:word32] = eax
	rax = (uint64) Mem0[rbp - 0x000000000000001C:word32]
	rax = (uint64) (eax & 0x0000003F)
	SZO = cond(eax)
	C = false
	rax = (uint64) (eax *s Mem0[rbp - 0x0000000000000028:word32])
	SCZO = cond(eax)
	rdx = (uint64) eax
	rax = (uint64) Mem0[rbp - 0x0000000000000020:word32]
	rax = (uint64) (eax + edx)
	SCZO = cond(eax)
	rax = (uint64) (eax *s Mem0[rbp - 0x0000000000000024:word32])
	SCZO = cond(eax)
	Mem0[rbp - 0x0000000000000004:word32] = eax
	rax = (uint64) Mem0[rbp - 0x0000000000000008:word32]
	rax = rax << 0x0000000000000003
	SCZO = cond(rax)
	v16 = Mem0[rbp - 0x0000000000000018:word64] + rax
	Mem0[rbp - 0x0000000000000018:word64] = v16
	SCZO = cond(v16)
	rax = (uint64) Mem0[rbp - 0x0000000000000004:word32]
	rax = (uint64) (eax >>u 0x00000003)
	SCZO = cond(eax)
	rax = (uint64) eax
	v17 = Mem0[rbp - 0x0000000000000018:word64] + rax
	Mem0[rbp - 0x0000000000000018:word64] = v17
	SCZO = cond(v17)
	v18 = Mem0[rbp - 0x0000000000000004:word32] & 0x00000007
	Mem0[rbp - 0x0000000000000004:word32] = v18
	SZO = cond(Mem0[rbp - 0x0000000000000004:word32])
	C = false
	SCZO = cond(Mem0[rbp - 0x0000000000000024:word32] - 0x00000010)
	branch Test(UGT,CZ) l0000000000400EC1
	// succ:  l0000000000400E2D l0000000000400EC1
l0000000000400E2D:
	rax = (uint64) Mem0[rbp - 0x0000000000000024:word32]
	rax = Mem0[0x00401828 + rax * 0x0000000000000008:word64]
	call eax (retsize: 4;)
	return
	// succ:  component_exit
l0000000000400EC1:
	rax = Mem0[0x0000000000602100:word64]
	rdx = (uint64) Mem0[rbp - 0x0000000000000024:word32]
	rsi = (uint64) 0x00401808
	rdi = rax
	rax = (uint64) 0x00000000
	rax = DPB(rax, fprintf(rdi, rsi, 0x00000000), 0)
	rdi = (uint64) 0x00000001
	exit(rdi)
component_exit:


// print_pixel
// Return size: 8
define print_pixel
print_pixel_entry:
	// succ:  l0000000000400EE9
l0000000000400EE9:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	v4 = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = v4
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	rsp = rsp - 0x0000000000000058
	SCZO = cond(rsp)
	Mem0[rbp - 0x0000000000000058:word64] = rdi
	Mem0[rbp - 0x0000000000000060:word64] = rsi
	Mem0[rbp - 0x0000000000000068:word64] = rdx
	Mem0[rbp - 0x000000000000006C:word32] = ecx
	rax = Mem0[fs:0x00000028:word64]
	Mem0[rbp - 0x0000000000000028:word64] = rax
	rax = (uint64) (eax ^ eax)
	SZO = cond(eax)
	C = false
	rdx = Mem0[rbp - 0x0000000000000060:word64]
	rax = Mem0[rbp - 0x0000000000000058:word64]
	rsi = rdx
	rdi = rax
	call png_get_bit_depth (retsize: 8;)
	eax = (word32) al
	Mem0[rbp - 0x0000000000000040:word32] = eax
	rdx = Mem0[rbp - 0x0000000000000060:word64]
	rax = Mem0[rbp - 0x0000000000000058:word64]
	rsi = rdx
	rdi = rax
	call png_get_color_type (retsize: 8;)
	eax = (word32) al
	SCZO = cond(eax - 0x00000006)
	branch Test(UGT,CZ) l00000000004012C9
	// succ:  l0000000000400F4C l00000000004012C9
l0000000000400F4C:
	rax = (uint64) eax
	rax = Mem0[0x00401958 + rax * 0x0000000000000008:word64]
	call eax (retsize: 4;)
	return
	// succ:  print_pixel_exit
l00000000004012C9:
	rax = Mem0[rbp - 0x0000000000000058:word64]
	rsi = (uint64) 0x00401938
	rdi = rax
	call png_error (retsize: 8;)
	rax = Mem0[rbp - 0x0000000000000028:word64]
	rax = rax ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rax)
	C = false
	branch Test(EQ,Z) l00000000004012EE
	// succ:  l00000000004012E9 l00000000004012EE
l00000000004012E9:
	__stack_chk_fail()
	// succ:  l00000000004012EE
l00000000004012EE:
	rsp = rsp + 0x0000000000000058
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  print_pixel_exit
print_pixel_exit:


// main
// Return size: 8
define main
main_entry:
	// succ:  l00000000004012F9
l00000000004012F9:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = rsp
	rsp = rsp - 160
	SCZO = cond(rsp)
	Mem0[rbp - 0x0000000000000094:word32] = edi
	Mem0[rbp - 0x00000000000000A0:word64] = rsi
	rax = Mem0[fs:0x00000028:word64]
	Mem0[rbp - 0x0000000000000008:word64] = rax
	rax = (uint64) (eax ^ eax)
	SZO = cond(eax)
	C = false
	Mem0[rbp - 0x0000000000000084:word32] = 0x00000001
	SCZO = cond(Mem0[rbp - 0x0000000000000094:word32] - 0x00000004)
	branch Test(NE,Z) l000000000040173F
	// succ:  l0000000000401337 l000000000040173F
l0000000000401337:
	rax = Mem0[rbp - 0x00000000000000A0:word64]
	rax = rax + 0x0000000000000008
	SCZO = cond(rax)
	rax = Mem0[rax:word64]
	rdi = rax
	call atol (retsize: 8;)
	Mem0[rbp - 0x0000000000000028:word64] = rax
	rax = Mem0[rbp - 0x00000000000000A0:word64]
	rax = rax + 0x0000000000000010
	SCZO = cond(rax)
	rax = Mem0[rax:word64]
	rdi = rax
	call atol (retsize: 8;)
	Mem0[rbp - 0x0000000000000020:word64] = rax
	rax = Mem0[rbp - 0x00000000000000A0:word64]
	rax = rax + 0x0000000000000018
	SCZO = cond(rax)
	rax = Mem0[rax:word64]
	rsi = (uint64) 0x00401990
	rdi = rax
	rax = fopen(rdi, rsi)
	Mem0[rbp - 0x0000000000000018:word64] = rax
	Mem0[rbp - 0x0000000000000040:word64] = 0x0000000000000000
	SCZO = cond(Mem0[rbp - 0x0000000000000018:word64] - 0x0000000000000000)
	branch Test(EQ,Z) l0000000000401716
	// succ:  l000000000040139D l0000000000401716
l000000000040139D:
	rcx = (uint64) 0x00000000
	rdx = (uint64) 0x00000000
	rsi = (uint64) 0x00000000
	rdi = (uint64) 0x00401993
	call png_create_read_struct (retsize: 8;)
	Mem0[rbp - 0x0000000000000038:word64] = rax
	rax = Mem0[rbp - 0x0000000000000038:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004016F6
	// succ:  l00000000004013C7 l00000000004016F6
l00000000004013C7:
	rax = Mem0[rbp - 0x0000000000000038:word64]
	rdi = rax
	call png_create_info_struct (retsize: 8;)
	Mem0[rbp - 0x0000000000000030:word64] = rax
	rax = Mem0[rbp - 0x0000000000000030:word64]
	SZO = cond(rax & rax)
	C = false
	branch Test(EQ,Z) l00000000004016C0
	// succ:  l00000000004013E4 l00000000004016C0
l00000000004013E4:
	rax = Mem0[rbp - 0x0000000000000038:word64]
	rdx = Mem0[rbp - 0x0000000000000018:word64]
	rsi = rdx
	rdi = rax
	call png_init_io (retsize: 8;)
	rdx = Mem0[rbp - 0x0000000000000030:word64]
	rax = Mem0[rbp - 0x0000000000000038:word64]
	rsi = rdx
	rdi = rax
	call png_read_info (retsize: 8;)
	rdx = Mem0[rbp - 0x0000000000000030:word64]
	rax = Mem0[rbp - 0x0000000000000038:word64]
	rsi = rdx
	rdi = rax
	call png_get_rowbytes (retsize: 8;)
	rdx = rax
	rax = Mem0[rbp - 0x0000000000000038:word64]
	rsi = rdx
	rdi = rax
	call png_malloc (retsize: 8;)
	Mem0[rbp - 0x0000000000000040:word64] = rax
	rax = Mem0[rbp - 0x0000000000000040:word64]
	Mem0[rbp - 0x0000000000000010:word64] = rax
	rsi = Mem0[rbp - 0x0000000000000030:word64]
	rax = Mem0[rbp - 0x0000000000000038:word64]
	r9 = r13 - 0x0000000000000074
	r8 = r13 - 0x0000000000000078
	rcx = rbp - 0x000000000000007C
	rdx = rbp - 0x0000000000000080
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	rdi = rbp - 0x0000000000000068
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rdi = rbp - 0x000000000000006C
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rdi = rbp - 0x0000000000000070
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rdi = rax
	call png_get_IHDR (retsize: 8;)
	rsp = rsp + 0x0000000000000020
	SCZO = cond(rsp)
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l00000000004016AF
	// succ:  l000000000040147A l00000000004016AF
l000000000040147A:
	rax = (uint64) Mem0[rbp - 0x0000000000000070:word32]
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l0000000000401488
	// succ:  l0000000000401481 l0000000000401488
l0000000000401481:
	SCZO = cond(eax - 0x00000001)
	branch Test(EQ,Z) l0000000000401491
	// succ:  l0000000000401486 l0000000000401491
l0000000000401486:
	goto l000000000040149A
	// succ:  l000000000040149A
l0000000000401488:
	Mem0[rbp - 0x0000000000000064:word32] = 0x00000001
	goto l00000000004014AB
	// succ:  l00000000004014AB
l0000000000401491:
	Mem0[rbp - 0x0000000000000064:word32] = 0x00000007
	goto l00000000004014AB
	// succ:  l00000000004014AB
l000000000040149A:
	rax = Mem0[rbp - 0x0000000000000038:word64]
	rsi = (uint64) 0x0040199A
	rdi = rax
	call png_error (retsize: 8;)
	// succ:  l00000000004014AB
l00000000004014AB:
	rax = Mem0[rbp - 0x0000000000000038:word64]
	rdi = rax
	call png_start_read_image (retsize: 8;)
	Mem0[rbp - 0x0000000000000060:word32] = 0x00000000
l00000000004014C3:
	rax = (uint64) Mem0[rbp - 0x0000000000000070:word32]
	SCZO = cond(eax - 0x00000001)
	branch Test(NE,Z) l00000000004015CE
	// succ:  l00000000004014CF l00000000004015CE
l00000000004014CF:
	SCZO = cond(Mem0[rbp - 0x0000000000000060:word32] - 0x00000001)
	branch Test(LE,SZO) l00000000004014EF
	// succ:  l00000000004014D5 l00000000004014EF
l00000000004014D5:
	rax = (uint64) 0x00000007
	rax = (uint64) (eax - Mem0[rbp - 0x0000000000000060:word32])
	SCZO = cond(eax)
	rax = (uint64) (eax >> 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) 0x00000001
	rcx = (uint64) eax
	rdx = (uint64) (edx << cl)
	SCZO = cond(edx)
	rax = (uint64) edx
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	goto l00000000004014F4
	// succ:  l00000000004014F4
l00000000004014EF:
	rax = (uint64) 0x00000007
	// succ:  l00000000004014F4
l00000000004014F4:
	rdx = (uint64) Mem0[rbp - 0x0000000000000060:word32]
	rsi = (uint64) edx
	rsi = (uint64) (esi & 0x00000001)
	SZO = cond(esi)
	C = false
	rdx = (uint64) Mem0[rbp - 0x0000000000000060:word32]
	rdx = (uint64) (edx + 0x00000001)
	SCZO = cond(edx)
	rdx = (uint64) (edx >> 0x00000001)
	SCZO = cond(edx)
	rcx = (uint64) 0x00000003
	rcx = (uint64) (ecx - edx)
	SCZO = cond(ecx)
	rdx = (uint64) ecx
	rcx = (uint64) edx
	rsi = (uint64) (esi << cl)
	SCZO = cond(esi)
	rdx = (uint64) esi
	rdx = (uint64) (edx & 0x00000007)
	SZO = cond(edx)
	C = false
	rax = (uint64) (eax - edx)
	SCZO = cond(eax)
	rdx = (uint64) eax
	rax = (uint64) Mem0[rbp - 0x0000000000000080:word32]
	rdx = (uint64) (edx + eax)
	SCZO = cond(edx)
	SCZO = cond(Mem0[rbp - 0x0000000000000060:word32] - 0x00000001)
	branch Test(LE,SZO) l0000000000401531
	// succ:  l0000000000401525 l0000000000401531
l0000000000401525:
	rax = (uint64) 0x00000007
	rax = (uint64) (eax - Mem0[rbp - 0x0000000000000060:word32])
	SCZO = cond(eax)
	rax = (uint64) (eax >> 0x00000001)
	SCZO = cond(eax)
	goto l0000000000401536
	// succ:  l0000000000401536
l0000000000401531:
	rax = (uint64) 0x00000003
	// succ:  l0000000000401536
l0000000000401536:
	rcx = (uint64) eax
	rdx = (uint64) (edx >>u cl)
	SCZO = cond(edx)
	rax = (uint64) edx
	SZO = cond(eax & eax)
	C = false
	branch Test(EQ,Z) l000000000040166E
	// succ:  l0000000000401544 l000000000040166E
l0000000000401544:
	rax = (uint64) Mem0[rbp - 0x0000000000000060:word32]
	rax = (uint64) (eax & 0x00000001)
	SZO = cond(eax)
	C = false
	rdx = (uint64) eax
	rax = (uint64) Mem0[rbp - 0x0000000000000060:word32]
	rax = (uint64) (eax + 0x00000001)
	SCZO = cond(eax)
	rax = (uint64) (eax >> 0x00000001)
	SCZO = cond(eax)
	rcx = (uint64) 0x00000003
	rcx = (uint64) (ecx - eax)
	SCZO = cond(ecx)
	rax = (uint64) ecx
	rcx = (uint64) eax
	rdx = (uint64) (edx << cl)
	SCZO = cond(edx)
	rax = (uint64) edx
	rax = (uint64) (eax & 0x00000007)
	SZO = cond(eax)
	C = false
	Mem0[rbp - 0x0000000000000058:word32] = eax
	rax = (uint64) Mem0[rbp - 0x0000000000000060:word32]
	rax = (uint64) (eax & 0x00000001)
	SZO = cond(eax)
	C = false
	SZO = cond(eax & eax)
	C = false
	al = Test(EQ,Z)
	edx = (word32) al
	rax = (uint64) Mem0[rbp - 0x0000000000000060:word32]
	rax = (uint64) (eax >> 0x00000001)
	SCZO = cond(eax)
	rcx = (uint64) 0x00000003
	rcx = (uint64) (ecx - eax)
	SCZO = cond(ecx)
	rax = (uint64) ecx
	rcx = (uint64) eax
	rdx = (uint64) (edx << cl)
	SCZO = cond(edx)
	rax = (uint64) edx
	rax = (uint64) (eax & 0x00000007)
	SZO = cond(eax)
	C = false
	Mem0[rbp - 0x000000000000005C:word32] = eax
	rax = (uint64) 0x00000007
	rax = (uint64) (eax - Mem0[rbp - 0x0000000000000060:word32])
	SCZO = cond(eax)
	rax = (uint64) (eax >> 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) 0x00000001
	rcx = (uint64) eax
	rdx = (uint64) (edx << cl)
	SCZO = cond(edx)
	rax = (uint64) edx
	Mem0[rbp - 0x0000000000000050:word32] = eax
	SCZO = cond(Mem0[rbp - 0x0000000000000060:word32] - 0x00000002)
	branch Test(LE,SZO) l00000000004015C4
	// succ:  l00000000004015AF l00000000004015C4
l00000000004015AF:
	rax = (uint64) Mem0[rbp - 0x0000000000000060:word32]
	rax = (uint64) (eax - 0x00000001)
	SCZO = cond(eax)
	rax = (uint64) (eax >> 0x00000001)
	SCZO = cond(eax)
	rdx = (uint64) 0x00000008
	rcx = (uint64) eax
	rdx = (uint64) (edx >> cl)
	SCZO = cond(edx)
	rax = (uint64) edx
	goto l00000000004015C9
	// succ:  l00000000004015C9
l00000000004015C4:
	rax = (uint64) 0x00000008
	// succ:  l00000000004015C9
l00000000004015C9:
	Mem0[rbp - 0x0000000000000054:word32] = eax
	goto l00000000004015E8
	// succ:  l00000000004015E8
l00000000004015CE:
	Mem0[rbp - 0x0000000000000058:word32] = 0x00000000
	rax = (uint64) Mem0[rbp - 0x0000000000000058:word32]
	Mem0[rbp - 0x000000000000005C:word32] = eax
	Mem0[rbp - 0x0000000000000050:word32] = 0x00000001
	rax = (uint64) Mem0[rbp - 0x0000000000000050:word32]
	Mem0[rbp - 0x0000000000000054:word32] = eax
	// succ:  l00000000004015E8
l00000000004015E8:
	rax = (uint64) Mem0[rbp - 0x000000000000005C:word32]
	Mem0[rbp - 0x000000000000004C:word32] = eax
	// succ:  l0000000000401673 l0000000000401664
l00000000004015F0:
	rdi = (uint64) 0x004019B6
	rax = DPB(rax, puts(rdi), 0)
	rax = Mem0[rbp - 0x0000000000000038:word64]
	rcx = Mem0[rbp - 0x0000000000000010:word64]
	rdx = (uint64) 0x00000000
	rsi = rcx
	rdi = rax
	call png_read_row (retsize: 8;)
	rax = (uint64) Mem0[rbp - 0x000000000000004C:word32]
	SCZO = cond(rax - Mem0[rbp - 0x0000000000000020:word64])
	branch Test(NE,Z) l000000000040165E
	// succ:  l000000000040161B l000000000040165E
l000000000040161B:
	rax = (uint64) Mem0[rbp - 0x0000000000000058:word32]
	Mem0[rbp - 0x0000000000000048:word32] = eax
	Mem0[rbp - 0x0000000000000044:word32] = 0x00000000
	goto l0000000000401656
	// succ:  l0000000000401656
l000000000040162A:
	rax = (uint64) Mem0[rbp - 0x0000000000000048:word32]
	SCZO = cond(rax - Mem0[rbp - 0x0000000000000028:word64])
	branch Test(NE,Z) l000000000040164C
	// succ:  l0000000000401633 l000000000040164C
l0000000000401633:
	rsi = Mem0[rbp - 0x0000000000000030:word64]
	rax = Mem0[rbp - 0x0000000000000038:word64]
	rcx = (uint64) Mem0[rbp - 0x0000000000000044:word32]
	rdx = Mem0[rbp - 0x0000000000000010:word64]
	rdi = rax
	call print_pixel (retsize: 8;)
	goto l000000000040167F
	// succ:  l000000000040167F
l000000000040164C:
	rax = (uint64) Mem0[rbp - 0x0000000000000050:word32]
	v27 = Mem0[rbp - 0x0000000000000048:word32] + eax
	Mem0[rbp - 0x0000000000000048:word32] = v27
	SCZO = cond(v27)
	v28 = Mem0[rbp - 0x0000000000000044:word32] + 0x00000001
	Mem0[rbp - 0x0000000000000044:word32] = v28
	SCZO = cond(v28)
	// succ:  l0000000000401656
l0000000000401656:
	rax = (uint64) Mem0[rbp - 0x0000000000000080:word32]
	SCZO = cond(Mem0[rbp - 0x0000000000000048:word32] - eax)
	branch Test(ULT,C) l000000000040162A
	// succ:  l000000000040165E l000000000040162A
l000000000040165E:
	rax = (uint64) Mem0[rbp - 0x0000000000000054:word32]
	v26 = Mem0[rbp - 0x000000000000004C:word32] + eax
	Mem0[rbp - 0x000000000000004C:word32] = v26
	SCZO = cond(v26)
	// succ:  l0000000000401664
l0000000000401664:
	rax = (uint64) Mem0[rbp - 0x000000000000007C:word32]
	SCZO = cond(Mem0[rbp - 0x000000000000004C:word32] - eax)
	branch Test(ULT,C) l00000000004015F0
	// succ:  l000000000040166C l00000000004015F0
l000000000040166C:
	goto l000000000040166F
	// succ:  l000000000040166F
l000000000040166E:
	// succ:  l000000000040166F
l000000000040166F:
	v25 = Mem0[rbp - 0x0000000000000060:word32] + 0x00000001
	Mem0[rbp - 0x0000000000000060:word32] = v25
	SCZO = cond(v25)
	// succ:  l0000000000401673
l0000000000401673:
	rax = (uint64) Mem0[rbp - 0x0000000000000060:word32]
	SCZO = cond(eax - Mem0[rbp - 0x0000000000000064:word32])
	branch Test(LT,SO) l00000000004014C3
	// succ:  l000000000040167F l00000000004014C3
l000000000040167F:
	Mem0[rbp - 0x0000000000000040:word64] = 0x0000000000000000
	rax = Mem0[rbp - 0x0000000000000038:word64]
	rdx = Mem0[rbp - 0x0000000000000010:word64]
	rsi = rdx
	rdi = rax
	call png_free (retsize: 8;)
	rax = Mem0[rbp - 0x0000000000000038:word64]
	rdx = rbp - 0x0000000000000030
	rsi = rdx
	rdi = rax
	call png_destroy_info_struct (retsize: 8;)
	goto l00000000004016DE
	// succ:  l00000000004016DE
l00000000004016AF:
	rax = Mem0[rbp - 0x0000000000000038:word64]
	rsi = (uint64) 0x004019C3
	rdi = rax
	call png_error (retsize: 8;)
	// succ:  l00000000004016C0
l00000000004016C0:
	rax = Mem0[0x0000000000602100:word64]
	rcx = rax
	rdx = (uint64) 0x0000002C
	rsi = (uint64) 0x00000001
	rdi = (uint64) 0x004019E8
	rax = DPB(rax, fwrite(rdi, rsi, rdx, rcx), 0)
	// succ:  l00000000004016DE
l00000000004016DE:
	rax = rbp - 0x0000000000000038
	rdx = (uint64) 0x00000000
	rsi = (uint64) 0x00000000
	rdi = rax
	call png_destroy_read_struct (retsize: 8;)
	goto l000000000040175D
	// succ:  l000000000040175D
l00000000004016F6:
	rax = Mem0[0x0000000000602100:word64]
	rcx = rax
	rdx = (uint64) 0x0000002E
	rsi = (uint64) 0x00000001
	rdi = (uint64) 0x00401A18
	rax = DPB(rax, fwrite(rdi, rsi, rdx, rcx), 0)
	goto l000000000040175D
	// succ:  l000000000040175D
l0000000000401716:
	rax = Mem0[rbp - 0x00000000000000A0:word64]
	rax = rax + 0x0000000000000018
	SCZO = cond(rax)
	rdx = Mem0[rax:word64]
	rax = Mem0[0x0000000000602100:word64]
	rsi = (uint64) 0x00401A48
	rdi = rax
	rax = (uint64) 0x00000000
	rax = DPB(rax, fprintf(rdi, rsi, 0x00000000), 0)
	goto l000000000040175D
	// succ:  l000000000040175D
l000000000040173F:
	rax = Mem0[0x0000000000602100:word64]
	rcx = rax
	rdx = (uint64) 0x00000027
	rsi = (uint64) 0x00000001
	rdi = (uint64) 0x00401A70
	rax = DPB(rax, fwrite(rdi, rsi, rdx, rcx), 0)
	// succ:  l000000000040175D
l000000000040175D:
	rax = (uint64) Mem0[rbp - 0x0000000000000084:word32]
	rdi = Mem0[rbp - 0x0000000000000008:word64]
	rdi = rdi ^ Mem0[fs:0x00000028:word64]
	SZO = cond(rdi)
	C = false
	branch Test(EQ,Z) l0000000000401777
	// succ:  l0000000000401772 l0000000000401777
l0000000000401772:
	__stack_chk_fail()
	// succ:  l0000000000401777
l0000000000401777:
	rsp = rbp
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  main_exit
main_exit:


// __libc_csu_init
// Return size: 8
define __libc_csu_init
__libc_csu_init_entry:
	// succ:  l0000000000401780
l0000000000401780:
	rsp = fp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rdi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rsi
	r15 = (uint64) edi
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	v9 = rsp
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = v9
	r12 = 0x0000000000601E00
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbp
	rbp = 0x0000000000601E08
	rsp = rsp - 0x0000000000000004
	Mem0[rsp:word32] = rbx
	r14 = rsi
	r13 = rdx
	rbp = rbp - r12
	SCZO = cond(rbp)
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	rbp = rbp >> 0x0000000000000003
	SCZO = cond(rbp)
	call _init (retsize: 8;)
	SZO = cond(rbp & rbp)
	C = false
	branch Test(EQ,Z) l00000000004017D6
	// succ:  l00000000004017B6 l00000000004017D6
l00000000004017B6:
	rbx = (uint64) (ebx ^ ebx)
	SZO = cond(ebx)
	C = false
	// succ:  l00000000004017C0
l00000000004017C0:
	rdx = r13
	rsi = r14
	rdi = (uint64) r15d
	call Mem0[r12 + rbx * 0x0000000000000008:word32] (retsize: 4;)
	rbx = rbx + 0x0000000000000001
	SCZO = cond(rbx)
	SCZO = cond(rbx - rbp)
	branch Test(NE,Z) l00000000004017C0
	// succ:  l00000000004017D6 l00000000004017C0
l00000000004017D6:
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	rbx = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rbp = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rsi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	rdi = Mem0[rsp:word64]
	rsp = rsp + 0x0000000000000008
	return
	// succ:  __libc_csu_init_exit
__libc_csu_init_exit:


// __libc_csu_fini
// Return size: 8
define __libc_csu_fini
__libc_csu_fini_entry:
	// succ:  l00000000004017F0
l00000000004017F0:
	rsp = fp
	return
	// succ:  __libc_csu_fini_exit
__libc_csu_fini_exit:


// _fini
// Return size: 8
define _fini
_fini_entry:
	// succ:  l00000000004017F4
l00000000004017F4:
	rsp = fp
	rsp = rsp - 0x0000000000000008
	SCZO = cond(rsp)
	rsp = rsp + 0x0000000000000008
	SCZO = cond(rsp)
	return
	// succ:  _fini_exit
_fini_exit:


