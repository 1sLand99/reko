// fn0017_0000
// Return size: 4
void fn0017_0000()
fn0017_0000_entry:
	// succ:  l0017_0000
l0017_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x006C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x000E:word16]
	Mem0[ds:0x3D28:word16] = di
	GetWinFlags()
	SZO = cond(al & 0x01)
	C = false
	branch Test(NE,Z) l0017_0028
	// succ:  l0017_001F l0017_0028
l0017_001F:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x03CC
	goto l0017_0035
	// succ:  l0017_0035
l0017_0028:
	si = Mem0[ss:bp + 0x000C:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0017_003E
	// succ:  l0017_002F l0017_003E
l0017_002F:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x03D3
	// succ:  l0017_0035
l0017_0035:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0157
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	goto l0017_0188
	// succ:  l0017_0188
l0017_003E:
	call fn002F_04CA (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0017_0050
	// succ:  l0017_0047 l0017_0050
l0017_0047:
	call fn002F_0AF0 (retsize: 4;)
	goto l0017_017A
	// succ:  l0017_017A
l0017_0050:
	call fn002F_2242 (retsize: 4;)
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0017_0065
	// succ:  l0017_0059 l0017_0065
l0017_0059:
	call fn002F_0000 (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0017_0065
	// succ:  l0017_0062 l0017_0065
l0017_0062:
	goto l0017_017A
	// succ:  l0017_017A
l0017_0065:
	ax = 0x0157
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x006C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x006C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x00CF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x8000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D26:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0017_00A4
	// succ:  l0017_00A1 l0017_00A4
l0017_00A1:
	goto l0017_017A
	// succ:  l0017_017A
l0017_00A4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	dx = 0x9280
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0017_00F0
	// succ:  l0017_00ED l0017_00F0
l0017_00ED:
	goto l0017_017A
	// succ:  l0017_017A
l0017_00F0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	call fn002F_027A (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0017_017A
	// succ:  l0017_0109 l0017_017A
l0017_0109:
	call fn002F_03BA (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0017_017A
	// succ:  l0017_0112 l0017_017A
l0017_0112:
	call fn002F_0326 (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0017_017A
	// succ:  l0017_011B l0017_017A
l0017_011B:
	call fn002F_0448 (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0017_017A
	// succ:  l0017_0124 l0017_017A
l0017_0124:
	call fn002F_0DBA (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0017_017A
	// succ:  l0017_012D l0017_017A
l0017_012D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0017_1E96 (retsize: 2;)
	sp = sp + 0x0002
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetMessage(Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0017_0174
	// succ:  l0017_014D l0017_0174
l0017_014D:
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	TranslateMessage(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	DispatchMessage(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetMessage(Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0017_014D
	// succ:  l0017_0174 l0017_014D
l0017_0174:
	ax = Mem0[ss:bp - 0x0018:word16]
	goto l0017_0190
	// succ:  l0017_0190
l0017_017A:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x03CD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0157
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0010
	// succ:  l0017_0188
l0017_0188:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D72 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0017_0190
l0017_0190:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0017_0000_exit
fn0017_0000_exit:


// LEARNSPELLDLGPROC
// Return size: 4
void LEARNSPELLDLGPROC()
LEARNSPELLDLGPROC_entry:
	// succ:  l0017_019C
l0017_019C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0066
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x000C:word16]
	ax = di
	SCZO = cond(ax - 0x001C)
	branch Test(NE,Z) l0017_01B8
	// succ:  l0017_01B5 l0017_01B8
l0017_01B5:
	goto l0017_0B4E
	// succ:  l0017_0B4E
l0017_01B8:
	branch Test(UGT,CZ) l0017_01EE
	// succ:  l0017_01BA l0017_01EE
l0017_01BA:
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0010)
	branch Test(ULE,CZ) l0017_01C3
	// succ:  l0017_01C0 l0017_01C3
l0017_01C0:
	goto l0017_0B54
	// succ:  l0017_0B54
l0017_01C3:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v15 = ax
	ax = bx
	bx = v15
	switch (ax) { l0017_022C l0017_02B8 l0017_0B54 l0017_0B54 l0017_0300 l0017_0B54 l0017_03A2 l0017_0B54 l0017_0B54 l0017_0B54 l0017_0B54 l0017_0B54 l0017_0B54 l0017_0B54 l0017_0B54 l0017_03AA l0017_042A }
	// succ:  l0017_022C l0017_02B8 l0017_0B54 l0017_0B54 l0017_0300 l0017_0B54 l0017_03A2 l0017_0B54 l0017_0B54 l0017_0B54 l0017_0B54 l0017_0B54 l0017_0B54 l0017_0B54 l0017_0B54 l0017_03AA l0017_042A
l0017_01EE:
	SCZO = cond(ax - 0x0117)
	branch Test(NE,Z) l0017_01F6
	// succ:  l0017_01F3 l0017_01F6
l0017_01F3:
	goto l0017_0AD4
	// succ:  l0017_0AD4
l0017_01F6:
	branch Test(UGT,CZ) l0017_0212
	// succ:  l0017_01F8 l0017_0212
l0017_01F8:
	ax = ax - 0x0100
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_0200
	// succ:  l0017_01FD l0017_0200
l0017_01FD:
	goto l0017_04AC
	// succ:  l0017_04AC
l0017_0200:
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0017_0207
	// succ:  l0017_0204 l0017_0207
l0017_0204:
	goto l0017_053C
	// succ:  l0017_053C
l0017_0207:
	ax = ax - 0x000F
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_020F
	// succ:  l0017_020C l0017_020F
l0017_020C:
	goto l0017_0614
	// succ:  l0017_0614
l0017_020F:
	goto l0017_0B54
	// succ:  l0017_0B54
l0017_0212:
	ax = ax - 0x0200
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_021A
	// succ:  l0017_0217 l0017_021A
l0017_0217:
	goto l0017_0B00
	// succ:  l0017_0B00
l0017_021A:
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0017_0221
	// succ:  l0017_021E l0017_0221
l0017_021E:
	goto l0017_0B40
	// succ:  l0017_0B40
l0017_0221:
	ax = ax - 0x0003
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_0229
	// succ:  l0017_0226 l0017_0229
l0017_0226:
	goto l0017_0B40
	// succ:  l0017_0B40
l0017_0229:
	goto l0017_0B54
	// succ:  l0017_0B54
l0017_022C:
	di = Mem0[ss:bp + 0x000E:word16]
	Mem0[ds:0x4CC0:word16] = di
	ax = bp - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0846 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	call fn00F7_038E (retsize: 4;)
	sp = sp + 0x0004
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = 0x00DC
	dx = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0017_028E
	// succ:  l0017_0270 l0017_028E
l0017_0270:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0130
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = ax
	DialogBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	FreeProcInstance(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	// succ:  l0017_028E
l0017_028E:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GlobalCompact(Mem0[ss:sp:word32])
	sp = sp + 0x0004
	SCZO = cond(dx - 0x0004)
	branch Test(UGT,CZ) l0017_02A9
	// succ:  l0017_029C l0017_02A9
l0017_029C:
	branch Test(ULT,C) l0017_02A3
	// succ:  l0017_029E l0017_02A3
l0017_029E:
	SCZO = cond(ax - 0xB000)
	branch Test(UGE,C) l0017_02A9
	// succ:  l0017_02A3 l0017_02A9
l0017_02A3:
	Mem0[ds:0x4C6E:word16] = 0x0001
	// succ:  l0017_02A9
l0017_02A9:
	ax = 0x0013
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetSystemMetrics(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x4136:word16] = ax
	goto l0017_0B4E
	// succ:  l0017_0B4E
l0017_02B8:
	SCZO = cond(Mem0[ds:0x009A:word16] - 0x0000)
	branch Test(EQ,Z) l0017_02CB
	// succ:  l0017_02BF l0017_02CB
l0017_02BF:
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0017_1DBE (retsize: 2;)
	sp = sp + 0x0006
l0017_02CB:
	call fn01F7_215A (retsize: 4;)
	call fn01F7_2CF2 (retsize: 4;)
	call fn01BF_20F2 (retsize: 4;)
	SCZO = cond(Mem0[ds:0x4D88:word16] - 0x0000)
	branch Test(EQ,Z) l0017_02EA
	// succ:  l0017_02E1 l0017_02EA
l0017_02E1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	DestroyWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0017_02EA
l0017_02EA:
	call fn002F_1D4C (retsize: 4;)
	call fn002F_0AF0 (retsize: 4;)
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	PostQuitMessage(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l0017_0B4E
	// succ:  l0017_0B4E
l0017_0300:
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x0001)
	branch Test(NE,Z) l0017_030C
	// succ:  l0017_0306 l0017_030C
l0017_0306:
	ax = 0x0001
	goto l0017_030E
	// succ:  l0017_030E
l0017_030C:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0017_030E
l0017_030E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0017_23B4 (retsize: 2;)
	sp = sp + 0x0002
	ax = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:0x4128:word16] = ax
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:0x412A:word16] = ax
	cx = Mem0[ds:0x4134:word16]
	dx = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + dx
	SCZO = cond(cx)
	ax = ax - cx
	SCZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0017_1AB8 (retsize: 2;)
	sp = sp + 0x0004
	di = di - di
	SCZO = cond(di)
	SCZO = cond(Mem0[ds:0x4CBC:word16] - di)
	branch Test(LE,SZO) l0017_035B
	// succ:  l0017_0347 l0017_035B
l0017_0347:
	si = 0x4B60
	// succ:  l0017_034A
l0017_034A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	call fn0077_0956 (retsize: 4;)
	sp = sp + 0x0002
	si = si + 0x0011
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(Mem0[ds:0x4CBC:word16] - di)
	branch Test(GT,SZO) l0017_034A
	// succ:  l0017_035B l0017_034A
l0017_035B:
	SCZO = cond(Mem0[ds:0x3D7A:word16] - 0x0000)
	branch Test(EQ,Z) l0017_037B
	// succ:  l0017_0362 l0017_037B
l0017_0362:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D7A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4128:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x412A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveWindow(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	// succ:  l0017_037B
l0017_037B:
	SCZO = cond(Mem0[ds:0x4D88:word16] - 0x0000)
	branch Test(NE,Z) l0017_0385
	// succ:  l0017_0382 l0017_0385
l0017_0382:
	goto l0017_0B4E
	// succ:  l0017_0B4E
l0017_0385:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4128:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x412A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveWindow(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	goto l0017_0B4E
	// succ:  l0017_0B4E
l0017_03A2:
	sp = sp - 0x0002
	call fn0017_2348 (retsize: 2;)
	goto l0017_0B4E
	// succ:  l0017_0B4E
l0017_03AA:
	al = Mem0[ds:0x4EB6:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0064:word16] = ax
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0017_03C4
	// succ:  l0017_03B5 l0017_03C4
l0017_03B5:
	SCZO = cond(Mem0[ss:bp - 0x0064:word16] - 0x0002)
	branch Test(EQ,Z) l0017_03C4
	// succ:  l0017_03BB l0017_03C4
l0017_03BB:
	SCZO = cond(Mem0[ss:bp - 0x0064:word16] - 0x0003)
	branch Test(EQ,Z) l0017_03C4
	// succ:  l0017_03C1 l0017_03C4
l0017_03C1:
	goto l0017_0B54
	// succ:  l0017_0B54
l0017_03C4:
	ax = Mem0[ds:0x0834:word16]
	dx = Mem0[ds:0x0836:word16]
	SCZO = cond(Mem0[ds:0x3CFA:word16] - ax)
	branch Test(NE,Z) l0017_03DA
	// succ:  l0017_03D1 l0017_03DA
l0017_03D1:
	SCZO = cond(Mem0[ds:0x3CFC:word16] - dx)
	branch Test(NE,Z) l0017_03DA
	// succ:  l0017_03D7 l0017_03DA
l0017_03D7:
	goto l0017_0B54
	// succ:  l0017_0B54
l0017_03DA:
	ax = 0x0293
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0062
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = bp - 0x0062
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0013
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	si = ax
	SCZO = cond(si - 0x0006)
	branch Test(NE,Z) l0017_0424
	// succ:  l0017_0405 l0017_0424
l0017_0405:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(EQ,Z) l0017_0414
	// succ:  l0017_040C l0017_0414
l0017_040C:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0017_1E96 (retsize: 2;)
	sp = sp + 0x0002
l0017_0414:
	call fn01F7_0000 (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	// succ:  l0017_041B
l0017_041B:
	branch Test(EQ,Z) l0017_0420
	// succ:  l0017_041D l0017_0420
l0017_041D:
	goto l0017_0B54
	// succ:  l0017_0B54
l0017_0420:
	goto l0017_0B4E
	// succ:  l0017_0B4E
l0017_0424:
	SCZO = cond(si - 0x0002)
	goto l0017_041B
	// succ:  l0017_041B
l0017_042A:
	al = Mem0[ds:0x4EB6:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0064:word16] = ax
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0017_0444
	// succ:  l0017_0435 l0017_0444
l0017_0435:
	SCZO = cond(Mem0[ss:bp - 0x0064:word16] - 0x0002)
	branch Test(EQ,Z) l0017_0444
	// succ:  l0017_043B l0017_0444
l0017_043B:
	SCZO = cond(Mem0[ss:bp - 0x0064:word16] - 0x0003)
	branch Test(EQ,Z) l0017_0444
	// succ:  l0017_0441 l0017_0444
l0017_0441:
	goto l0017_0B54
	// succ:  l0017_0B54
l0017_0444:
	ax = Mem0[ds:0x0834:word16]
	dx = Mem0[ds:0x0836:word16]
	SCZO = cond(Mem0[ds:0x3CFA:word16] - ax)
	branch Test(NE,Z) l0017_045A
	// succ:  l0017_0451 l0017_045A
l0017_0451:
	SCZO = cond(Mem0[ds:0x3CFC:word16] - dx)
	branch Test(NE,Z) l0017_045A
	// succ:  l0017_0457 l0017_045A
l0017_0457:
	goto l0017_0B54
	// succ:  l0017_0B54
l0017_045A:
	ax = 0x0293
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0062
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = bp - 0x0062
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0013
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	si = ax
	SCZO = cond(si - 0x0006)
	branch Test(NE,Z) l0017_049E
	// succ:  l0017_0485 l0017_049E
l0017_0485:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(EQ,Z) l0017_0494
	// succ:  l0017_048C l0017_0494
l0017_048C:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0017_1E96 (retsize: 2;)
	sp = sp + 0x0002
l0017_0494:
	call fn01F7_0000 (retsize: 4;)
	// succ:  l0017_0499
l0017_0499:
	dx_ax = (int32) ax
	goto l0017_0B66
	// succ:  l0017_0B66
l0017_049E:
	SCZO = cond(si - 0x0002)
	branch Test(NE,Z) l0017_04A6
	// succ:  l0017_04A3 l0017_04A6
l0017_04A3:
	goto l0017_0B4E
	// succ:  l0017_0B4E
l0017_04A6:
	ax = 0x0001
	goto l0017_0499
	// succ:  l0017_0499
l0017_04AC:
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0003)
	branch Test(EQ,Z) l0017_04B6
	// succ:  l0017_04B3 l0017_04B6
l0017_04B3:
	goto l0017_03A2
	// succ:  l0017_03A2
l0017_04B6:
	si = si - si
	SCZO = cond(si)
	di = si
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - 0x0021
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0007)
	branch Test(UGT,CZ) l0017_04F4
	// succ:  l0017_04C5 l0017_04F4
l0017_04C5:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v19 = ax
	ax = bx
	bx = v19
	switch (ax) { l0017_04DE l0017_04E6 l0017_04EE l0017_052A l0017_0530 l0017_04E1 l0017_0536 l0017_04F1 }
	// succ:  l0017_04DE l0017_04E6 l0017_04EE l0017_052A l0017_0530 l0017_04E1 l0017_0536 l0017_04F1
l0017_04DE:
	di = 0x0001
	// succ:  l0017_04E1
l0017_04E1:
	si = 0xFFFF
	goto l0017_04F4
	// succ:  l0017_04F4
l0017_04E6:
	si = 0x0001
	// succ:  l0017_04E9
l0017_04E9:
	di = si
	goto l0017_04F4
	// succ:  l0017_04F4
l0017_04EE:
	di = 0xFFFF
	// succ:  l0017_04F1
l0017_04F1:
	si = 0x0001
	// succ:  l0017_04F4
l0017_04F4:
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetAsyncKeyState(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SZO = cond(ah & 0x80)
	C = false
	branch Test(EQ,Z) l0017_0510
	// succ:  l0017_0502 l0017_0510
l0017_0502:
	ax = 0x000A
	dx_ax = di *s ax
	SCZO = cond(dx_ax)
	di = ax
	ax = 0x000A
	dx_ax = si *s ax
	SCZO = cond(dx_ax)
	si = ax
	// succ:  l0017_0510
l0017_0510:
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetCursorPos(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	di = di + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	si = si + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(si)
	// succ:  l0017_0521
l0017_0521:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SetCursorPos(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l0017_0B4E
	// succ:  l0017_0B4E
l0017_052A:
	si = 0xFFFF
	goto l0017_04E9
	// succ:  l0017_04E9
l0017_0530:
	di = 0xFFFF
	goto l0017_04F4
	// succ:  l0017_04F4
l0017_0536:
	di = 0x0001
	goto l0017_04F4
	// succ:  l0017_04F4
l0017_053C:
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0003)
	branch Test(EQ,Z) l0017_0546
	// succ:  l0017_0543 l0017_0546
l0017_0543:
	goto l0017_03A2
	// succ:  l0017_03A2
l0017_0546:
	si = Mem0[ss:bp + 0x000A:word16]
	di = di - di
	SCZO = cond(di)
	Mem0[ss:bp - 0x0004:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00AF_0000 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - 0x0032)
	branch Test(NE,Z) l0017_055C
	// succ:  l0017_0559 l0017_055C
l0017_0559:
	goto l0017_05FA
	// succ:  l0017_05FA
l0017_055C:
	branch Test(UGT,CZ) l0017_05A0
	// succ:  l0017_055E l0017_05A0
l0017_055E:
	SCZO = cond(al - 0x2B)
	branch Test(EQ,Z) l0017_05DB
	// succ:  l0017_0562 l0017_05DB
l0017_0562:
	branch Test(GT,SZO) l0017_0584
	// succ:  l0017_0564 l0017_0584
l0017_0564:
	al = al - 0x01
	SZO = cond(al)
	SCZO = cond(ax - 0x0007)
	branch Test(UGT,CZ) l0017_05A0
	// succ:  l0017_056B l0017_05A0
l0017_056B:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v21 = ax
	ax = bx
	bx = v21
	switch (ax) { l0017_05B1 l0017_05AE l0017_05B6 l0017_05BE l0017_05C7 l0017_05C4 l0017_05CC l0017_05D2 }
	// succ:  l0017_05B1 l0017_05AE l0017_05B6 l0017_05BE l0017_05C7 l0017_05C4 l0017_05CC l0017_05D2
l0017_0584:
	al = al - 0x2C
	SCZO = cond(al)
	SCZO = cond(ax - 0x0005)
	branch Test(UGT,CZ) l0017_05A0
	// succ:  l0017_058B l0017_05A0
l0017_058B:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v24 = ax
	ax = bx
	bx = v24
	switch (ax) { l0017_05D8 l0017_05E0 l0017_05E6 l0017_05EF l0017_05EC l0017_05F4 }
	// succ:  l0017_05D8 l0017_05E0 l0017_05E6 l0017_05EF l0017_05EC l0017_05F4
l0017_05A0:
	SCZO = cond(si - 0x000D)
	branch Test(NE,Z) l0017_05A8
	// succ:  l0017_05A5 l0017_05A8
l0017_05A5:
	goto l0017_0B47
	// succ:  l0017_0B47
l0017_05A8:
	ax = 0x0001
	goto l0017_0B49
	// succ:  l0017_0B49
l0017_05AE:
	di = 0x0001
	// succ:  l0017_05B1
l0017_05B1:
	si = 0xFFFF
	goto l0017_05FF
	// succ:  l0017_05FF
l0017_05B6:
	di = 0x0001
	// succ:  l0017_05B9
l0017_05B9:
	si = Mem0[ss:bp - 0x0004:word16]
	goto l0017_05FF
	// succ:  l0017_05FF
l0017_05BE:
	si = 0x0001
	goto l0017_05FD
	// succ:  l0017_05FD
l0017_05C4:
	di = 0xFFFF
	// succ:  l0017_05C7
l0017_05C7:
	si = 0x0001
	goto l0017_05FF
	// succ:  l0017_05FF
l0017_05CC:
	di = 0xFFFF
	goto l0017_05B9
	// succ:  l0017_05B9
l0017_05D2:
	si = 0xFFFF
	goto l0017_05FD
	// succ:  l0017_05FD
l0017_05D8:
	di = 0x000A
	// succ:  l0017_05DB
l0017_05DB:
	si = 0xFFF6
	goto l0017_05FF
	// succ:  l0017_05FF
l0017_05E0:
	di = 0x000A
	goto l0017_05B9
	// succ:  l0017_05B9
l0017_05E6:
	si = 0x000A
	goto l0017_05FD
	// succ:  l0017_05FD
l0017_05EC:
	di = 0xFFF6
	// succ:  l0017_05EF
l0017_05EF:
	si = 0x000A
	goto l0017_05FF
	// succ:  l0017_05FF
l0017_05F4:
	di = 0xFFF6
	goto l0017_05B9
	// succ:  l0017_05B9
l0017_05FA:
	si = 0xFFF6
	// succ:  l0017_05FD
l0017_05FD:
	di = si
	// succ:  l0017_05FF
l0017_05FF:
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetCursorPos(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	di = di + Mem0[ss:bp - 0x000E:word16]
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	si = si + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(si)
	goto l0017_0521
	// succ:  l0017_0521
l0017_0614:
	si = Mem0[ss:bp + 0x000A:word16]
	ax = si
	ax = ax - 0x0065
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0070)
	branch Test(ULE,CZ) l0017_0624
	// succ:  l0017_0621 l0017_0624
l0017_0621:
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_0624:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v22 = ax
	ax = bx
	bx = v22
	switch (ax) { l0017_070E l0017_0714 l0017_0728 l0017_076A l0017_0AB7 l0017_0770 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_07CE l0017_07E8 l0017_0AB7 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_0896 l0017_0896 l0017_0896 l0017_0896 l0017_0896 l0017_0896 l0017_0896 l0017_0896 l0017_0896 l0017_0896 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_08AE l0017_08B4 l0017_08BA l0017_08C0 l0017_08C6 l0017_0AB7 l0017_08CC l0017_08DE l0017_08E8 l0017_0AB7 l0017_0AB7 l0017_08F0 l0017_08F6 l0017_08FC l0017_0926 l0017_0962 l0017_0968 l0017_097E l0017_0988 l0017_0AB7 l0017_098E l0017_0AB7 l0017_0996 l0017_099C l0017_09A2 l0017_09AC l0017_09B4 l0017_0926 l0017_09BC l0017_09C6 l0017_0AB7 l0017_09D0 l0017_0AB7 l0017_0AB7 l0017_09FA l0017_0A02 l0017_0A08 l0017_0A0E l0017_0A14 l0017_0AB7 l0017_0AB7 l0017_0A1C l0017_0AB7 l0017_0A26 l0017_0A2E l0017_0A38 l0017_0AB7 l0017_0A5C l0017_0A80 l0017_0A8A l0017_0AB7 l0017_0AAE }
	// succ:  l0017_070E l0017_0714 l0017_0728 l0017_076A l0017_0AB7 l0017_0770 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_07CE l0017_07E8 l0017_0AB7 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0888 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_0896 l0017_0896 l0017_0896 l0017_0896 l0017_0896 l0017_0896 l0017_0896 l0017_0896 l0017_0896 l0017_0896 l0017_0AB7 l0017_0AB7 l0017_0AB7 l0017_08AE l0017_08B4 l0017_08BA l0017_08C0 l0017_08C6 l0017_0AB7 l0017_08CC l0017_08DE l0017_08E8 l0017_0AB7 l0017_0AB7 l0017_08F0 l0017_08F6 l0017_08FC l0017_0926 l0017_0962 l0017_0968 l0017_097E l0017_0988 l0017_0AB7 l0017_098E l0017_0AB7 l0017_0996 l0017_099C l0017_09A2 l0017_09AC l0017_09B4 l0017_0926 l0017_09BC l0017_09C6 l0017_0AB7 l0017_09D0 l0017_0AB7 l0017_0AB7 l0017_09FA l0017_0A02 l0017_0A08 l0017_0A0E l0017_0A14 l0017_0AB7 l0017_0AB7 l0017_0A1C l0017_0AB7 l0017_0A26 l0017_0A2E l0017_0A38 l0017_0AB7 l0017_0A5C l0017_0A80 l0017_0A8A l0017_0AB7 l0017_0AAE
l0017_070E:
	ax = 0x003E
	goto l0017_0AB1
	// succ:  l0017_0AB1
l0017_0714:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendMessage(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_0728:
	ax = 0x0000
	dx = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l0017_0745
	// succ:  l0017_0742 l0017_0745
l0017_0742:
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_0745:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x012F
	// succ:  l0017_074C
l0017_074C:
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = ax
	DialogBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	FreeProcInstance(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_076A:
	ax = 0x0033
	goto l0017_0AB1
	// succ:  l0017_0AB1
l0017_0770:
	ax = 0x269A
	dx = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0017_07AB
	// succ:  l0017_078A l0017_07AB
l0017_078A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x013A
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = ax
	DialogBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	FreeProcInstance(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	// succ:  l0017_07AB
l0017_07AB:
	SCZO = cond(Mem0[ds:0x032C:word16] - 0x0029)
	branch Test(EQ,Z) l0017_07B5
	// succ:  l0017_07B2 l0017_07B5
l0017_07B2:
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_07B5:
	si = Mem0[ds:0x0830:word16]
	Mem0[ds:0x032C:word16] = 0x0000
	Mem0[ds:0x0830:word16] = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	// succ:  l0017_07C6
l0017_07C6:
	call fn01D7_00E4 (retsize: 4;)
	sp = sp + 0x0002
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_07CE:
	call fn01F7_0BA6 (retsize: 4;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BEA:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_07E8:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(NE,Z) l0017_0830
	// succ:  l0017_07EF l0017_0830
l0017_07EF:
	ax = 0x03A7
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0062
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = bp - 0x0062
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	SCZO = cond(ax - 0x0006)
	branch Test(EQ,Z) l0017_081B
	// succ:  l0017_0818 l0017_081B
l0017_0818:
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_081B:
	Mem0[ds:0x4D8E:byte] = 0x00
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0017_1E96 (retsize: 2;)
	sp = sp + 0x0002
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0017_1E96 (retsize: 2;)
	sp = sp + 0x0002
l0017_0830:
	ax = 0x14D2
	dx = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0017_087F
	// succ:  l0017_084A l0017_087F
l0017_084A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0134
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DialogBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0017_0875
	// succ:  l0017_0864 l0017_0875
l0017_0864:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendMessage(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l0017_0875
l0017_0875:
	ax = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	FreeProcInstance(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	// succ:  l0017_087F
l0017_087F:
	Mem0[ds:0x48C2:byte] = 0x00
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_0888:
	si = si << 0x0001
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x406A:word16]
	call fn0137_1522 (retsize: 4;)
	sp = sp + 0x0002
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_0896:
	bx = si
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x06F2:word16]
	Mem0[ss:bp - 0x0066:word16] = ax
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l0017_08A9
	// succ:  l0017_08A6 l0017_08A9
l0017_08A6:
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_08A9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0017_07C6
	// succ:  l0017_07C6
l0017_08AE:
	ax = 0x0009
	goto l0017_0AB1
	// succ:  l0017_0AB1
l0017_08B4:
	ax = 0x000A
	goto l0017_0AB1
	// succ:  l0017_0AB1
l0017_08BA:
	ax = 0x002A
	goto l0017_0AB1
	// succ:  l0017_0AB1
l0017_08C0:
	ax = 0x001C
	goto l0017_0AB1
	// succ:  l0017_0AB1
l0017_08C6:
	ax = 0x0019
	goto l0017_0AB1
	// succ:  l0017_0AB1
l0017_08CC:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0100
	// succ:  l0017_08D3
l0017_08D3:
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	// succ:  l0017_08D6
l0017_08D6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0017_1DBE (retsize: 2;)
	sp = sp + 0x0006
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_08DE:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0101
	goto l0017_08D3
	// succ:  l0017_08D3
l0017_08E8:
	call fn002F_29E6 (retsize: 4;)
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_08F0:
	ax = 0x0038
	goto l0017_0AB1
	// succ:  l0017_0AB1
l0017_08F6:
	ax = 0x0037
	goto l0017_0AB1
	// succ:  l0017_0AB1
l0017_08FC:
	ax = Mem0[ds:0x4128:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4134:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x412A:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0017_1AB8 (retsize: 2;)
	sp = sp + 0x0004
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_0926:
	ax = Mem0[ds:0x4138:word16]
	Mem0[ds:0x4EA4:word16] = ax
	ax = Mem0[ds:0x413A:word16]
	Mem0[ds:0x4EA6:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x4EA4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EA4:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EA6:word16]
	SetCursorPos(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	SCZO = cond(si - 0x00B0)
	branch Test(NE,Z) l0017_0958
	// succ:  l0017_0953 l0017_0958
l0017_0953:
	ax = 0x0001
	goto l0017_095A
	// succ:  l0017_095A
l0017_0958:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0017_095A
l0017_095A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0017_1CB4 (retsize: 2;)
	sp = sp + 0x0002
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_0962:
	ax = 0x0034
	goto l0017_0AB1
	// succ:  l0017_0AB1
l0017_0968:
	si = Mem0[ds:0x01CA:word16]
	Mem0[ds:0x01CA:word16] = 0x0001
	call fn0087_0000 (retsize: 4;)
	Mem0[ds:0x01CA:word16] = si
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_097E:
	ax = 0x0003
	// succ:  l0017_0981
l0017_0981:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0017_08D6
	// succ:  l0017_08D6
l0017_0988:
	ax = 0x0004
	goto l0017_0981
	// succ:  l0017_0981
l0017_098E:
	call fn0137_1B7C (retsize: 4;)
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_0996:
	ax = 0x003A
	goto l0017_0AB1
	// succ:  l0017_0AB1
l0017_099C:
	ax = 0x003B
	goto l0017_0AB1
	// succ:  l0017_0AB1
l0017_09A2:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0102
	goto l0017_08D3
	// succ:  l0017_08D3
l0017_09AC:
	call fn0087_143A (retsize: 4;)
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_09B4:
	call fn0097_1B90 (retsize: 4;)
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_09BC:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0103
	goto l0017_08D3
	// succ:  l0017_08D3
l0017_09C6:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0104
	goto l0017_08D3
	// succ:  l0017_08D3
l0017_09D0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	GetMenu(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x01CA:word16] - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x0008
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CheckMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	SCZO = cond(Mem0[ds:0x01CA:word16] - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	Mem0[ds:0x01CA:word16] = ax
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_09FA:
	call fn0067_0F7A (retsize: 4;)
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_0A02:
	ax = 0x0036
	goto l0017_0AB1
	// succ:  l0017_0AB1
l0017_0A08:
	ax = 0x000C
	goto l0017_0AB1
	// succ:  l0017_0AB1
l0017_0A0E:
	ax = 0x0017
	goto l0017_0AB1
	// succ:  l0017_0AB1
l0017_0A14:
	call fn0177_2134 (retsize: 4;)
	goto l0017_0AB7
	// succ:  l0017_0AB7
l0017_0A1C:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0107
	goto l0017_08D3
	// succ:  l0017_08D3
l0017_0A26:
	ax = 0x003D
	goto l0017_0AB1
	// succ:  l0017_0AB1
l0017_0A2E:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0108
	goto l0017_08D3
	// succ:  l0017_08D3
l0017_0A38:
	ax = 0x2930
	dx = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0017_0AB7
	// succ:  l0017_0A52 l0017_0AB7
l0017_0A52:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x013D
	goto l0017_074C
	// succ:  l0017_074C
l0017_0A5C:
	ax = 0x27CA
	dx = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0017_0AB7
	// succ:  l0017_0A76 l0017_0AB7
l0017_0A76:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x013B
	goto l0017_074C
	// succ:  l0017_074C
l0017_0A80:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x010C
	goto l0017_08D3
	// succ:  l0017_08D3
l0017_0A8A:
	ax = 0x2A40
	dx = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0017_0AB7
	// succ:  l0017_0AA4 l0017_0AB7
l0017_0AA4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x013E
	goto l0017_074C
	// succ:  l0017_074C
l0017_0AAE:
	ax = 0x0050
	// succ:  l0017_0AB1
l0017_0AB1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00AF_04A4 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0017_0AB7
l0017_0AB7:
	SCZO = cond(Mem0[ds:0x032C:word16] - 0x0000)
	branch Test(NE,Z) l0017_0AC1
	// succ:  l0017_0ABE l0017_0AC1
l0017_0ABE:
	goto l0017_0B4E
	// succ:  l0017_0B4E
l0017_0AC1:
	si = Mem0[ds:0x032C:word16]
	Mem0[ds:0x032C:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00AF_04A4 (retsize: 4;)
	sp = sp + 0x0002
	goto l0017_0B4E
	// succ:  l0017_0B4E
l0017_0AD4:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0005)
	branch Test(NE,Z) l0017_0AEA
	// succ:  l0017_0ADA l0017_0AEA
l0017_0ADA:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(NE,Z) l0017_0AEA
	// succ:  l0017_0AE0 l0017_0AEA
l0017_0AE0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	call fn0087_0692 (retsize: 4;)
	sp = sp + 0x0002
	goto l0017_0B4E
	// succ:  l0017_0B4E
l0017_0AEA:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0006)
	branch Test(NE,Z) l0017_0B4E
	// succ:  l0017_0AF0 l0017_0B4E
l0017_0AF0:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(NE,Z) l0017_0B4E
	// succ:  l0017_0AF6 l0017_0B4E
l0017_0AF6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	call fn0017_2406 (retsize: 2;)
	sp = sp + 0x0002
	goto l0017_0B4E
	// succ:  l0017_0B4E
l0017_0B00:
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0003)
	branch Test(NE,Z) l0017_0B54
	// succ:  l0017_0B07 l0017_0B54
l0017_0B07:
	di = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0017_0B4E
	// succ:  l0017_0B16 l0017_0B4E
l0017_0B16:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x4EA4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1C4E (retsize: 4;)
	sp = sp + 0x0004
	ax = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:0x4EA4:word16] = ax
	ax = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:0x4EA6:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x4EA4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1C4E (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l0017_0B4E
	// succ:  l0017_0B4E
l0017_0B40:
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0003)
	branch Test(NE,Z) l0017_0B54
	// succ:  l0017_0B47 l0017_0B54
l0017_0B47:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0017_0B49
l0017_0B49:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0017_1D32 (retsize: 2;)
	sp = sp + 0x0002
l0017_0B4E:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0017_0499
	// succ:  l0017_0499
l0017_0B54:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	DefWindowProc(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l0017_0B66
l0017_0B66:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  LEARNSPELLDLGPROC_exit
LEARNSPELLDLGPROC_exit:


// POPUPWNDPROC
// Return size: 4
void POPUPWNDPROC()
POPUPWNDPROC_entry:
	// succ:  l0017_0B72
l0017_0B72:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x002A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000C:word16]
	ax = si
	SCZO = cond(ax - 0x0102)
	branch Test(NE,Z) l0017_0B8E
	// succ:  l0017_0B8B l0017_0B8E
l0017_0B8B:
	goto l0017_0DD4
	// succ:  l0017_0DD4
l0017_0B8E:
	branch Test(UGT,CZ) l0017_0BAC
	// succ:  l0017_0B90 l0017_0BAC
l0017_0B90:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0017_0BDE
	// succ:  l0017_0B93 l0017_0BDE
l0017_0B93:
	ax = ax - 0x0004
	SCZO = cond(ax)
	branch Test(EQ,Z) l0017_0C08
	// succ:  l0017_0B98 l0017_0C08
l0017_0B98:
	ax = ax - 0x000A
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_0BA0
	// succ:  l0017_0B9D l0017_0BA0
l0017_0B9D:
	goto l0017_0D30
	// succ:  l0017_0D30
l0017_0BA0:
	ax = ax - 0x00F1
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_0BA8
	// succ:  l0017_0BA5 l0017_0BA8
l0017_0BA5:
	goto l0017_0DB0
	// succ:  l0017_0DB0
l0017_0BA8:
	goto l0017_0FB2
	// succ:  l0017_0FB2
l0017_0BAC:
	SCZO = cond(ax - 0x0115)
	branch Test(NE,Z) l0017_0BB4
	// succ:  l0017_0BB1 l0017_0BB4
l0017_0BB1:
	goto l0017_0EBE
	// succ:  l0017_0EBE
l0017_0BB4:
	branch Test(UGT,CZ) l0017_0BC2
	// succ:  l0017_0BB6 l0017_0BC2
l0017_0BB6:
	ax = ax - 0x0114
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_0BBE
	// succ:  l0017_0BBB l0017_0BBE
l0017_0BBB:
	goto l0017_0DE8
	// succ:  l0017_0DE8
l0017_0BBE:
	goto l0017_0FB2
	// succ:  l0017_0FB2
l0017_0BC2:
	ax = ax - 0x0200
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_0BCA
	// succ:  l0017_0BC7 l0017_0BCA
l0017_0BC7:
	goto l0017_0F82
	// succ:  l0017_0F82
l0017_0BCA:
	ax = ax - 0x0001
	SCZO = cond(ax)
	branch Test(UGE,C) l0017_0BD2
	// succ:  l0017_0BCF l0017_0BD2
l0017_0BCF:
	goto l0017_0FB2
	// succ:  l0017_0FB2
l0017_0BD2:
	ax = ax - 0x0004
	SCZO = cond(ax)
	branch Test(UGT,CZ) l0017_0BDA
	// succ:  l0017_0BD7 l0017_0BDA
l0017_0BD7:
	goto l0017_0F8B
	// succ:  l0017_0F8B
l0017_0BDA:
	goto l0017_0FB2
	// succ:  l0017_0FB2
l0017_0BDE:
	ax = Mem0[ss:bp + 0x000E:word16]
	Mem0[ds:0x4EAE:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollRange(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollRange(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	goto l0017_0FA1
	// succ:  l0017_0FA1
l0017_0C08:
	cl = 0x05
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax >>u cl
	SCZO = cond(ax)
	Mem0[ds:0x4D68:word16] = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax >>u cl
	SCZO = cond(ax)
	Mem0[ds:0x495E:word16] = ax
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x03)
	branch Test(NE,Z) l0017_0C50
	// succ:  l0017_0C21 l0017_0C50
l0017_0C21:
	dx_ax = (int32) ax
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	cl = Mem0[ds:0x4D1D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	cx = cx - ax
	SCZO = cond(cx)
	branch Test(NS,S) l0017_0C32
	// succ:  l0017_0C30 l0017_0C32
l0017_0C30:
	cx = cx - cx
	SCZO = cond(cx)
	// succ:  l0017_0C32
l0017_0C32:
	Mem0[ds:0x495A:word16] = cx
	ax = Mem0[ds:0x4D68:word16]
	dx_ax = (int32) ax
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	dl = Mem0[ds:0x4D1C:byte]
	dh = dh - dh
	SCZO = cond(dh)
	dx = dx - ax
	SCZO = cond(dx)
	branch Test(NS,S) l0017_0C4A
	// succ:  l0017_0C48 l0017_0C4A
l0017_0C48:
	dx = dx - dx
	SCZO = cond(dx)
	// succ:  l0017_0C4A
l0017_0C4A:
	Mem0[ds:0x4CE2:word16] = dx
	goto l0017_0C7D
	// succ:  l0017_0C7D
l0017_0C50:
	dx_ax = (int32) ax
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	cl = Mem0[ds:0x4D1D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	cx = cx - ax
	SCZO = cond(cx)
	branch Test(NS,S) l0017_0C61
	// succ:  l0017_0C5F l0017_0C61
l0017_0C5F:
	cx = cx - cx
	SCZO = cond(cx)
	// succ:  l0017_0C61
l0017_0C61:
	Mem0[ds:0x3D84:word16] = cx
	ax = Mem0[ds:0x4D68:word16]
	dx_ax = (int32) ax
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	dl = Mem0[ds:0x4D1C:byte]
	dh = dh - dh
	SCZO = cond(dh)
	dx = dx - ax
	SCZO = cond(dx)
	branch Test(NS,S) l0017_0C79
	// succ:  l0017_0C77 l0017_0C79
l0017_0C77:
	dx = dx - dx
	SCZO = cond(dx)
	// succ:  l0017_0C79
l0017_0C79:
	Mem0[ds:0x4BE8:word16] = dx
	// succ:  l0017_0C7D
l0017_0C7D:
	dx = dx + Mem0[ds:0x4D68:word16]
	SCZO = cond(dx)
	Mem0[ds:0x3CF6:word16] = dx
	cx = cx + Mem0[ds:0x495E:word16]
	SCZO = cond(cx)
	Mem0[ds:0x4DDE:word16] = cx
	SCZO = cond(Mem0[ds:0x4D68:word16] - 0x0005)
	branch Test(UGE,C) l0017_0CA2
	// succ:  l0017_0C94 l0017_0CA2
l0017_0C94:
	Mem0[ds:0x0334:word16] = 0x0000
	Mem0[ds:0x0338:word16] = 0x0001
	goto l0017_0CB0
	// succ:  l0017_0CB0
l0017_0CA2:
	Mem0[ds:0x0334:word16] = 0x0003
	ax = Mem0[ds:0x4D68:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	Mem0[ds:0x0338:word16] = ax
	// succ:  l0017_0CB0
l0017_0CB0:
	SCZO = cond(Mem0[ds:0x495E:word16] - 0x0005)
	branch Test(UGE,C) l0017_0CC6
	// succ:  l0017_0CB7 l0017_0CC6
l0017_0CB7:
	Mem0[ds:0x0336:word16] = 0x0000
	Mem0[ds:0x033A:word16] = 0x0001
	goto l0017_0CD4
	// succ:  l0017_0CD4
l0017_0CC6:
	Mem0[ds:0x0336:word16] = 0x0003
	ax = Mem0[ds:0x495E:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	Mem0[ds:0x033A:word16] = ax
	// succ:  l0017_0CD4
l0017_0CD4:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(EQ,Z) l0017_0CDE
	// succ:  l0017_0CDB l0017_0CDE
l0017_0CDB:
	goto l0017_0FA1
	// succ:  l0017_0FA1
l0017_0CDE:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = Mem0[ds:0x0480:word16]
	dx = dx - Mem0[ds:0x4D68:word16]
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SetScrollRange(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = Mem0[ds:0x0482:word16]
	cx = cx - Mem0[ds:0x495E:word16]
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollRange(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BE8:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D84:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	goto l0017_0FA1
	// succ:  l0017_0FA1
l0017_0D30:
	al = Mem0[ds:0x4EB6:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0017_0D4A
	// succ:  l0017_0D38 l0017_0D4A
l0017_0D38:
	ax = ax - 0x0003
	SCZO = cond(ax)
	branch Test(EQ,Z) l0017_0D58
	// succ:  l0017_0D3D l0017_0D58
l0017_0D3D:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0017_0D68
	// succ:  l0017_0D40 l0017_0D68
l0017_0D40:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0017_0D5F
	// succ:  l0017_0D43 l0017_0D5F
l0017_0D43:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0017_0D70
	// succ:  l0017_0D46 l0017_0D70
l0017_0D46:
	goto l0017_0FB2
	// succ:  l0017_0FB2
l0017_0D4A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_0000 (retsize: 4;)
	sp = sp + 0x0004
	goto l0017_0FA1
	// succ:  l0017_0FA1
l0017_0D58:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0017_0D68
	// succ:  l0017_0D5F l0017_0D68
l0017_0D5F:
	call fn002F_1B94 (retsize: 4;)
	call fn002F_1B94 (retsize: 4;)
	goto l0017_0FA1
	// succ:  l0017_0FA1
l0017_0D68:
	call fn002F_18B8 (retsize: 4;)
	goto l0017_0FA1
	// succ:  l0017_0FA1
l0017_0D70:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x002A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BeginPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0017_0D92
	// succ:  l0017_0D8F l0017_0D92
l0017_0D8F:
	goto l0017_0FA1
	// succ:  l0017_0FA1
l0017_0D92:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CE2:word16]
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x002A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	goto l0017_0FA1
	// succ:  l0017_0FA1
l0017_0DB0:
	cx = Mem0[ss:bp + 0x000A:word16]
	ax = cx
	ax = ax - 0x0021
	SCZO = cond(ax)
	branch Test(UGE,C) l0017_0DBD
	// succ:  l0017_0DBA l0017_0DBD
l0017_0DBA:
	goto l0017_0FB2
	// succ:  l0017_0FB2
l0017_0DBD:
	ax = ax - 0x0007
	SCZO = cond(ax)
	branch Test(ULE,CZ) l0017_0DC5
	// succ:  l0017_0DC2 l0017_0DC5
l0017_0DC2:
	goto l0017_0FB2
	// succ:  l0017_0FB2
l0017_0DC5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn00AF_0328 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0017_0DCB
l0017_0DCB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00AF_04A4 (retsize: 4;)
	sp = sp + 0x0002
	goto l0017_0FA1
	// succ:  l0017_0FA1
l0017_0DD4:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(EQ,Z) l0017_0DDE
	// succ:  l0017_0DDB l0017_0DDE
l0017_0DDB:
	goto l0017_0FA1
	// succ:  l0017_0FA1
l0017_0DDE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	call fn00AF_0000 (retsize: 4;)
	sp = sp + 0x0002
	goto l0017_0DCB
	// succ:  l0017_0DCB
l0017_0DE8:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(EQ,Z) l0017_0DF2
	// succ:  l0017_0DEF l0017_0DF2
l0017_0DEF:
	goto l0017_0FA1
	// succ:  l0017_0FA1
l0017_0DF2:
	di = Mem0[ds:0x3D84:word16]
	ax = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax - 0x0007)
	branch Test(UGT,CZ) l0017_0E7C
	// succ:  l0017_0DFE l0017_0E7C
l0017_0DFE:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v26 = ax
	ax = bx
	bx = v26
	switch (ax) { l0017_0E16 l0017_0E28 l0017_0E3C l0017_0E4E l0017_0E6C l0017_0E7C l0017_0E1A l0017_0E72 }
	// succ:  l0017_0E16 l0017_0E28 l0017_0E3C l0017_0E4E l0017_0E6C l0017_0E7C l0017_0E1A l0017_0E72
l0017_0E16:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0017_0E22
	// succ:  l0017_0E1A l0017_0E22
l0017_0E1A:
	Mem0[ds:0x3D84:word16] = 0x0000
	Mem0[ds:0x3D84:word16] = 0x0000
	goto l0017_0E7C
	// succ:  l0017_0E7C
l0017_0E22:
	v29 = Mem0[ds:0x3D84:word16] - 0x0001
	Mem0[ds:0x3D84:word16] = v29
	SZO = cond(v29)
	goto l0017_0E7C
	// succ:  l0017_0E7C
l0017_0E28:
	ax = Mem0[ds:0x0482:word16]
	ax = ax - Mem0[ds:0x495E:word16]
	SCZO = cond(ax)
	cx = di
	cx = cx + 0x0001
	SZO = cond(cx)
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	ax = ax & dx
	SZO = cond(ax)
	C = false
	ax = ax + cx
	SCZO = cond(ax)
	goto l0017_0E79
	// succ:  l0017_0E79
l0017_0E3C:
	ax = di
	SCZO = cond(Mem0[ds:0x495E:word16] - ax)
	branch Test(UGT,CZ) l0017_0E1A
	// succ:  l0017_0E44 l0017_0E1A
l0017_0E44:
	ax = Mem0[ds:0x495E:word16]
	v27 = Mem0[ds:0x3D84:word16] - ax
	Mem0[ds:0x3D84:word16] = v27
	SCZO = cond(v27)
	goto l0017_0E7C
	// succ:  l0017_0E7C
l0017_0E4E:
	ax = Mem0[ds:0x495E:word16]
	ax = ax - Mem0[ds:0x0482:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	cx = Mem0[ds:0x495E:word16]
	cx = cx + di
	SCZO = cond(cx)
	cx = cx - ax
	SCZO = cond(cx)
	dx = dx - dx - C
	SCZO = cond(dx)
	cx = cx & dx
	SZO = cond(cx)
	C = false
	cx = cx + ax
	SCZO = cond(cx)
	Mem0[ds:0x3D84:word16] = cx
	goto l0017_0E7C
	// succ:  l0017_0E7C
l0017_0E6C:
	ax = Mem0[ss:bp + 0x0006:word16]
	goto l0017_0E79
	// succ:  l0017_0E79
l0017_0E72:
	ax = Mem0[ds:0x0482:word16]
	ax = ax - Mem0[ds:0x495E:word16]
	SCZO = cond(ax)
	// succ:  l0017_0E79
l0017_0E79:
	Mem0[ds:0x3D84:word16] = ax
	// succ:  l0017_0E7C
l0017_0E7C:
	ax = Mem0[ds:0x495E:word16]
	ax = ax + Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	Mem0[ds:0x4DDE:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	cl = 0x05
	di = di - Mem0[ds:0x3D84:word16]
	SCZO = cond(di)
	di = di << cl
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ScrollWindow(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D84:word16]
	ax = 0x0001
	// succ:  l0017_0EAD
l0017_0EAD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l0017_0FA1
	// succ:  l0017_0FA1
l0017_0EBE:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(EQ,Z) l0017_0EC8
	// succ:  l0017_0EC5 l0017_0EC8
l0017_0EC5:
	goto l0017_0FA1
	// succ:  l0017_0FA1
l0017_0EC8:
	di = Mem0[ds:0x4BE8:word16]
	ax = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax - 0x0007)
	branch Test(UGT,CZ) l0017_0F52
	// succ:  l0017_0ED4 l0017_0F52
l0017_0ED4:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v24 = ax
	ax = bx
	bx = v24
	switch (ax) { l0017_0EEC l0017_0EFE l0017_0F12 l0017_0F24 l0017_0F42 l0017_0F52 l0017_0EF0 l0017_0F48 }
	// succ:  l0017_0EEC l0017_0EFE l0017_0F12 l0017_0F24 l0017_0F42 l0017_0F52 l0017_0EF0 l0017_0F48
l0017_0EEC:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0017_0EF8
	// succ:  l0017_0EF0 l0017_0EF8
l0017_0EF0:
	Mem0[ds:0x4BE8:word16] = 0x0000
	Mem0[ds:0x4BE8:word16] = 0x0000
	goto l0017_0F52
	// succ:  l0017_0F52
l0017_0EF8:
	v30 = Mem0[ds:0x4BE8:word16] - 0x0001
	Mem0[ds:0x4BE8:word16] = v30
	SZO = cond(v30)
	goto l0017_0F52
	// succ:  l0017_0F52
l0017_0EFE:
	ax = Mem0[ds:0x0480:word16]
	ax = ax - Mem0[ds:0x4D68:word16]
	SCZO = cond(ax)
	cx = di
	cx = cx + 0x0001
	SZO = cond(cx)
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	ax = ax & dx
	SZO = cond(ax)
	C = false
	ax = ax + cx
	SCZO = cond(ax)
	goto l0017_0F4F
	// succ:  l0017_0F4F
l0017_0F12:
	ax = di
	SCZO = cond(Mem0[ds:0x4D68:word16] - ax)
	branch Test(UGT,CZ) l0017_0EF0
	// succ:  l0017_0F1A l0017_0EF0
l0017_0F1A:
	ax = Mem0[ds:0x4D68:word16]
	v28 = Mem0[ds:0x4BE8:word16] - ax
	Mem0[ds:0x4BE8:word16] = v28
	SCZO = cond(v28)
	goto l0017_0F52
	// succ:  l0017_0F52
l0017_0F24:
	ax = Mem0[ds:0x4D68:word16]
	ax = ax - Mem0[ds:0x0480:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	cx = Mem0[ds:0x4D68:word16]
	cx = cx + di
	SCZO = cond(cx)
	cx = cx - ax
	SCZO = cond(cx)
	dx = dx - dx - C
	SCZO = cond(dx)
	cx = cx & dx
	SZO = cond(cx)
	C = false
	cx = cx + ax
	SCZO = cond(cx)
	Mem0[ds:0x4BE8:word16] = cx
	goto l0017_0F52
	// succ:  l0017_0F52
l0017_0F42:
	ax = Mem0[ss:bp + 0x0006:word16]
	goto l0017_0F4F
	// succ:  l0017_0F4F
l0017_0F48:
	ax = Mem0[ds:0x0480:word16]
	ax = ax - Mem0[ds:0x4D68:word16]
	SCZO = cond(ax)
	// succ:  l0017_0F4F
l0017_0F4F:
	Mem0[ds:0x4BE8:word16] = ax
	// succ:  l0017_0F52
l0017_0F52:
	ax = Mem0[ds:0x4D68:word16]
	ax = ax + Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	Mem0[ds:0x3CF6:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cl = 0x05
	di = di - Mem0[ds:0x4BE8:word16]
	SCZO = cond(di)
	di = di << cl
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScrollWindow(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BE8:word16]
	goto l0017_0EAD
	// succ:  l0017_0EAD
l0017_0F82:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAC:word16]
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0017_0F8B
l0017_0F8B:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(NE,Z) l0017_0FA1
	// succ:  l0017_0F92 l0017_0FA1
l0017_0F92:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn00AF_081E (retsize: 4;)
	sp = sp + 0x0008
	// succ:  l0017_0FA1
l0017_0FA1:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x04)
	branch Test(NE,Z) l0017_0FAD
	// succ:  l0017_0FA8 l0017_0FAD
l0017_0FA8:
	call fn002F_35B8 (retsize: 4;)
	// succ:  l0017_0FAD
l0017_0FAD:
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (int32) ax
	goto l0017_0FC4
	// succ:  l0017_0FC4
l0017_0FB2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	DefWindowProc(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l0017_0FC4
l0017_0FC4:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  POPUPWNDPROC_exit
POPUPWNDPROC_exit:


// REVIEWHISTORYDLGPROC
// Return size: 4
void REVIEWHISTORYDLGPROC()
REVIEWHISTORYDLGPROC_entry:
	// succ:  l0017_0FD0
l0017_0FD0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0036
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x000C:word16]
	ax = di
	SCZO = cond(ax - 0x0020)
	branch Test(NE,Z) l0017_0FEC
	// succ:  l0017_0FE9 l0017_0FEC
l0017_0FE9:
	goto l0017_10E8
	// succ:  l0017_10E8
l0017_0FEC:
	branch Test(UGT,CZ) l0017_1006
	// succ:  l0017_0FEE l0017_1006
l0017_0FEE:
	SCZO = cond(ax - 0x000F)
	branch Test(NE,Z) l0017_0FF6
	// succ:  l0017_0FF3 l0017_0FF6
l0017_0FF3:
	goto l0017_1098
	// succ:  l0017_1098
l0017_0FF6:
	branch Test(ULE,CZ) l0017_0FFB
	// succ:  l0017_0FF8 l0017_0FFB
l0017_0FF8:
	goto l0017_1246
	// succ:  l0017_1246
l0017_0FFB:
	al = al - 0x02
	SCZO = cond(al)
	branch Test(EQ,Z) l0017_1022
	// succ:  l0017_0FFF l0017_1022
l0017_0FFF:
	al = al - 0x03
	SCZO = cond(al)
	branch Test(EQ,Z) l0017_1048
	// succ:  l0017_1003 l0017_1048
l0017_1003:
	goto l0017_1246
	// succ:  l0017_1246
l0017_1006:
	ax = ax - 0x0084
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_100E
	// succ:  l0017_100B l0017_100E
l0017_100B:
	goto l0017_1106
	// succ:  l0017_1106
l0017_100E:
	ax = ax - 0x001D
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_1016
	// succ:  l0017_1013 l0017_1016
l0017_1013:
	goto l0017_1148
	// succ:  l0017_1148
l0017_1016:
	ax = ax - 0x0074
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_101E
	// succ:  l0017_101B l0017_101E
l0017_101B:
	goto l0017_1168
	// succ:  l0017_1168
l0017_101E:
	goto l0017_1246
	// succ:  l0017_1246
l0017_1022:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(NE,Z) l0017_103F
	// succ:  l0017_1029 l0017_103F
l0017_1029:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	GetMenu(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x006C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	// succ:  l0017_103F
l0017_103F:
	Mem0[ds:0x4BEA:word16] = 0x0000
	goto l0017_1246
	// succ:  l0017_1246
l0017_1048:
	di = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = Mem0[ss:bp + 0x0008:word16]
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % Mem0[ds:0x4134:word16]
	ax = dx_ax /u Mem0[ds:0x4134:word16]
	SCZO = cond(ax)
	Mem0[ds:0x4912:word16] = ax
	SCZO = cond(ax - 0x0005)
	branch Test(UGE,C) l0017_106C
	// succ:  l0017_1064 l0017_106C
l0017_1064:
	si = 0x0005
	si = si - ax
	SCZO = cond(si)
	goto l0017_106E
	// succ:  l0017_106E
l0017_106C:
	si = si - si
	SCZO = cond(si)
	// succ:  l0017_106E
l0017_106E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollRange(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = si
	cx = cx - Mem0[ds:0x4152:word16]
	SCZO = cond(cx)
	dx = dx - dx - C
	SCZO = cond(dx)
	cx = cx & dx
	SZO = cond(cx)
	C = false
	cx = cx + Mem0[ds:0x4152:word16]
	SCZO = cond(cx)
	Mem0[ds:0x4152:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	goto l0017_1241
	// succ:  l0017_1241
l0017_1098:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(NE,Z) l0017_10A8
	// succ:  l0017_109F l0017_10A8
l0017_109F:
	call fn00CF_030C (retsize: 4;)
	goto l0017_1241
	// succ:  l0017_1241
l0017_10A8:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0036
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BeginPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0017_10CA
	// succ:  l0017_10C7 l0017_10CA
l0017_10C7:
	goto l0017_1241
	// succ:  l0017_1241
l0017_10CA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CE2:word16]
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0036
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	goto l0017_1241
	// succ:  l0017_1241
l0017_10E8:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x000C)
	branch Test(NE,Z) l0017_10F1
	// succ:  l0017_10EE l0017_10F1
l0017_10EE:
	goto l0017_1246
	// succ:  l0017_1246
l0017_10F1:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x000A)
	branch Test(NE,Z) l0017_10FA
	// succ:  l0017_10F7 l0017_10FA
l0017_10F7:
	goto l0017_1246
	// succ:  l0017_1246
l0017_10FA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D72:word16]
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l0017_1241
	// succ:  l0017_1241
l0017_1106:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0016
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScreenToClient(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0001)
	branch Test(GE,SO) l0017_113A
	// succ:  l0017_1131 l0017_113A
l0017_1131:
	ax = 0x000C
	// succ:  l0017_1134
l0017_1134:
	dx = dx - dx
	SCZO = cond(dx)
	goto l0017_1258
	// succ:  l0017_1258
l0017_113A:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0002)
	branch Test(LT,SO) l0017_1143
	// succ:  l0017_1140 l0017_1143
l0017_1140:
	goto l0017_1246
	// succ:  l0017_1246
l0017_1143:
	ax = 0x000A
	goto l0017_1134
	// succ:  l0017_1134
l0017_1148:
	bx = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(bx - 0x000C)
	branch Test(NE,Z) l0017_115C
	// succ:  l0017_1150 l0017_115C
l0017_1150:
	ax = 0x0001
	// succ:  l0017_1153
l0017_1153:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0017_1CB4 (retsize: 2;)
	sp = sp + 0x0002
	goto l0017_1241
	// succ:  l0017_1241
l0017_115C:
	SCZO = cond(bx - 0x000A)
	branch Test(EQ,Z) l0017_1164
	// succ:  l0017_1161 l0017_1164
l0017_1161:
	goto l0017_1246
	// succ:  l0017_1246
l0017_1164:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0017_1153
	// succ:  l0017_1153
l0017_1168:
	di = Mem0[ds:0x4152:word16]
	ax = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax - 0x0007)
	branch Test(UGT,CZ) l0017_11F2
	// succ:  l0017_1174 l0017_11F2
l0017_1174:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v20 = ax
	ax = bx
	bx = v20
	switch (ax) { l0017_118E l0017_11A0 l0017_11B4 l0017_11C6 l0017_11E2 l0017_11F2 l0017_1192 l0017_11E8 }
	// succ:  l0017_118E l0017_11A0 l0017_11B4 l0017_11C6 l0017_11E2 l0017_11F2 l0017_1192 l0017_11E8
l0017_118E:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0017_119A
	// succ:  l0017_1192 l0017_119A
l0017_1192:
	Mem0[ds:0x4152:word16] = 0x0000
	goto l0017_11F2
	// succ:  l0017_11F2
l0017_119A:
	v21 = Mem0[ds:0x4152:word16] - 0x0001
	Mem0[ds:0x4152:word16] = v21
	SZO = cond(v21)
	goto l0017_11F2
	// succ:  l0017_11F2
l0017_11A0:
	ax = di
	ax = ax + 0x0001
	SZO = cond(ax)
	cx = 0x0005
	cx = cx - Mem0[ds:0x4912:word16]
	SCZO = cond(cx)
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	ax = ax & dx
	SZO = cond(ax)
	C = false
	ax = ax + cx
	SCZO = cond(ax)
	goto l0017_11EF
	// succ:  l0017_11EF
l0017_11B4:
	ax = di
	SCZO = cond(Mem0[ds:0x4912:word16] - ax)
	branch Test(UGT,CZ) l0017_1192
	// succ:  l0017_11BC l0017_1192
l0017_11BC:
	ax = Mem0[ds:0x4912:word16]
	v22 = Mem0[ds:0x4152:word16] - ax
	Mem0[ds:0x4152:word16] = v22
	SCZO = cond(v22)
	goto l0017_11F2
	// succ:  l0017_11F2
l0017_11C6:
	ax = Mem0[ds:0x4912:word16]
	ax = ax - 0x0005
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	cx = Mem0[ds:0x4912:word16]
	cx = cx + di
	SCZO = cond(cx)
	cx = cx - ax
	SCZO = cond(cx)
	dx = dx - dx - C
	SCZO = cond(dx)
	cx = cx & dx
	SZO = cond(cx)
	C = false
	cx = cx + ax
	SCZO = cond(cx)
	Mem0[ds:0x4152:word16] = cx
	goto l0017_11F2
	// succ:  l0017_11F2
l0017_11E2:
	ax = Mem0[ss:bp + 0x0006:word16]
	goto l0017_11EF
	// succ:  l0017_11EF
l0017_11E8:
	ax = 0x0005
	ax = ax - Mem0[ds:0x4912:word16]
	SCZO = cond(ax)
	// succ:  l0017_11EF
l0017_11EF:
	Mem0[ds:0x4152:word16] = ax
	// succ:  l0017_11F2
l0017_11F2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = Mem0[ds:0x4134:word16]
	dx_ax = Mem0[ds:0x4912:word16] *u ax
	SCZO = cond(dx_ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = di
	ax = ax - Mem0[ds:0x4152:word16]
	SCZO = cond(ax)
	dx_ax = Mem0[ds:0x4134:word16] *u ax
	SCZO = cond(dx_ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScrollWindow(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4152:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0017_1241
l0017_1241:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0017_1134
	// succ:  l0017_1134
l0017_1246:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	DefWindowProc(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l0017_1258
l0017_1258:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  REVIEWHISTORYDLGPROC_exit
REVIEWHISTORYDLGPROC_exit:


// ATTRIBUTESDLGPROC
// Return size: 4
void ATTRIBUTESDLGPROC()
ATTRIBUTESDLGPROC_entry:
	// succ:  l0017_1264
l0017_1264:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x003C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000C:word16]
	ax = si
	SCZO = cond(ax - 0x0019)
	branch Test(NE,Z) l0017_1280
	// succ:  l0017_127D l0017_1280
l0017_127D:
	goto l0017_13C8
	// succ:  l0017_13C8
l0017_1280:
	branch Test(UGT,CZ) l0017_1290
	// succ:  l0017_1282 l0017_1290
l0017_1282:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0017_12AC
	// succ:  l0017_1285 l0017_12AC
l0017_1285:
	ax = ax - 0x0009
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_128D
	// succ:  l0017_128A l0017_128D
l0017_128A:
	goto l0017_13A0
	// succ:  l0017_13A0
l0017_128D:
	goto l0017_16AA
	// succ:  l0017_16AA
l0017_1290:
	ax = ax - 0x002B
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_1298
	// succ:  l0017_1295 l0017_1298
l0017_1295:
	goto l0017_13E0
	// succ:  l0017_13E0
l0017_1298:
	ax = ax - 0x00E6
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_12A0
	// succ:  l0017_129D l0017_12A0
l0017_129D:
	goto l0017_165E
	// succ:  l0017_165E
l0017_12A0:
	ax = ax - 0x00FF
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_12A8
	// succ:  l0017_12A5 l0017_12A8
l0017_12A5:
	goto l0017_1678
	// succ:  l0017_1678
l0017_12A8:
	goto l0017_16AA
	// succ:  l0017_16AA
l0017_12AC:
	ax = Mem0[ds:0x4134:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax - 0x001A
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	cx = ~cx
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + 0x001A
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	si = 0x000A
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000C:word16] = ax
	di = di - di
	SCZO = cond(di)
	Mem0[ss:bp - 0x0008:word16] = 0x16C8
	// succ:  l0017_12DB
l0017_12DB:
	bx = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0017:bx:word16]
	ax = bp - 0x003C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = bp - 0x003C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetTextExtent(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	cx = Mem0[ds:0x4132:word16]
	cx = cx << 0x0001
	SCZO = cond(cx)
	ax = ax + cx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = 0x0126
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x003C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x5000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	si = si + ax
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	v18 = Mem0[ss:bp - 0x0008:word16] + 0x0002
	Mem0[ss:bp - 0x0008:word16] = v18
	SCZO = cond(v18)
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x16D4)
	branch Test(ULT,C) l0017_12DB
	// succ:  l0017_1349 l0017_12DB
l0017_1349:
	si = si + 0x000A
	SCZO = cond(si)
	di = di - di
	SCZO = cond(di)
	// succ:  l0017_134E
l0017_134E:
	ax = 0x0126
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x003C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000B
	dx = 0x5000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = di + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	si = si + 0x001B
	SCZO = cond(si)
	ax = si + 0x001C
	SCZO = cond(ax - Mem0[ds:0x4124:word16])
	branch Test(UGT,CZ) l0017_1392
	// succ:  l0017_138C l0017_1392
l0017_138C:
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - 0x000A)
	branch Test(ULT,C) l0017_134E
	// succ:  l0017_1392 l0017_134E
l0017_1392:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l0017_16A5
	// succ:  l0017_16A5
l0017_13A0:
	si = si - si
	SCZO = cond(si)
	// succ:  l0017_13A2
l0017_13A2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EA8:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0017_13B5
	// succ:  l0017_13B2 l0017_13B5
l0017_13B2:
	goto l0017_16A5
	// succ:  l0017_16A5
l0017_13B5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x0010)
	branch Test(LT,SO) l0017_13A2
	// succ:  l0017_13C4 l0017_13A2
l0017_13C4:
	goto l0017_16A5
	// succ:  l0017_16A5
l0017_13C8:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0003)
	branch Test(EQ,Z) l0017_13D1
	// succ:  l0017_13CE l0017_13D1
l0017_13CE:
	goto l0017_16AA
	// succ:  l0017_16AA
l0017_13D1:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0017_13DA
l0017_13DA:
	dx = dx - dx
	SCZO = cond(dx)
l0017_13E0:
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	Mem0[ss:bp - 0x0010:word16] = bx
	Mem0[ss:bp - 0x000E:word16] = es
	ax = Mem0[es:bx + 0x000C:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	di = bp - 0x001C
	si = bx + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ax = ss
	es = ax
	v21 = Mem0[si:word16]
	Mem0[di:word16] = v21
	si = si + 0x0002
	di = di + 0x0002
	v22 = Mem0[si:word16]
	Mem0[di:word16] = v22
	si = si + 0x0002
	di = di + 0x0002
	v23 = Mem0[si:word16]
	Mem0[di:word16] = v23
	si = si + 0x0002
	di = di + 0x0002
	v24 = Mem0[si:word16]
	Mem0[di:word16] = v24
	si = si + 0x0002
	di = di + 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetSysColor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0014:word16] = ax
	Mem0[ss:bp - 0x0012:word16] = dx
	es_bx = Mem0[ss:bp - 0x0010:segptr32]
	al = Mem0[es:bx + 0x0008:byte]
	ax = ax & 0x0001
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0016:word16]
	Rectangle(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0000)
	branch Test(EQ,Z) l0017_14AE
	// succ:  l0017_1450 l0017_14AE
l0017_1450:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CF4:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[ss:bp - 0x001C:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x001A:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0018:word16]
	ax = ax - Mem0[ss:bp - 0x001C:word16]
	SCZO = cond(ax)
	ax = ax - 0x0003
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0021
	dx = 0x00F0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	PatBlt(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[ss:bp - 0x001C:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x001A:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0016:word16]
	ax = ax - Mem0[ss:bp - 0x001A:word16]
	SCZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0021
	dx = 0x00F0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	PatBlt(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000E
	goto l0017_15A0
	// succ:  l0017_15A0
l0017_14AE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CF2:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[ss:bp - 0x001C:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x001A:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0018:word16]
	ax = ax - Mem0[ss:bp - 0x001C:word16]
	SCZO = cond(ax)
	ax = ax - 0x0003
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0021
	dx = 0x00F0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	PatBlt(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[ss:bp - 0x001C:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x001A:word16]
	ax = ax + 0x0003
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = Mem0[ss:bp - 0x0016:word16]
	cx = cx - Mem0[ss:bp - 0x001A:word16]
	SCZO = cond(cx)
	cx = cx - 0x0005
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0021
	dx = 0x00F0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	PatBlt(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CF4:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[ss:bp - 0x001C:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0016:word16]
	ax = ax - 0x0003
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0018:word16]
	ax = ax - Mem0[ss:bp - 0x001C:word16]
	SCZO = cond(ax)
	ax = ax - 0x0003
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0021
	dx = 0x00F0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	PatBlt(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[ss:bp - 0x0018:word16]
	ax = ax - 0x0003
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x001A:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = Mem0[ss:bp - 0x0016:word16]
	cx = cx - Mem0[ss:bp - 0x001A:word16]
	SCZO = cond(cx)
	cx = cx - 0x0004
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0021
	dx = 0x00F0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	PatBlt(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[ss:bp - 0x0018:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x001A:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	SetPixel(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[ss:bp - 0x001C:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0016:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	SetPixel(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l0017_15A0
l0017_15A0:
	es_bx = Mem0[ss:bp - 0x0010:segptr32]
	bx = Mem0[es:bx + 0x0002:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x0810:word16]
	di = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0017_15B5
	// succ:  l0017_15B2 l0017_15B5
l0017_15B2:
	goto l0017_16A5
	// succ:  l0017_16A5
l0017_15B5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn00F7_1E92 (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0017_15C6
	// succ:  l0017_15C3 l0017_15C6
l0017_15C3:
	goto l0017_16A5
	// succ:  l0017_16A5
l0017_15C6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C6C:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0017_1656
	// succ:  l0017_15D7 l0017_1656
l0017_15D7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	es_bx = Mem0[ss:bp - 0x0010:segptr32]
	ax = Mem0[es:bx + 0x000E:word16]
	ax = ax + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	ax = ax + 0x0003
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0016:word16]
	ax = ax - Mem0[ss:bp - 0x001A:word16]
	SCZO = cond(ax)
	ax = ax - 0x001A
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	ax = ax + Mem0[es:bx + 0x0010:word16]
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	ax = ax + 0x0003
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0015
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0013
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = di
	cx = 0x0008
	bx = di
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	ax = dx
	di = 0x0018
	dx_ax = di *s ax
	SCZO = cond(dx_ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bx
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0003
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0016
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BitBlt(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	ax = 0x0001
	goto l0017_13DA
	// succ:  l0017_13DA
l0017_1656:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	goto l0017_16A5
	// succ:  l0017_16A5
l0017_165E:
	bx = Mem0[ss:bp + 0x000A:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0017:bx + 0x16D4:word16]
	call fn00AF_04A4 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0017_16BC l0017_16A5
l0017_1678:
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x0204)
	branch Test(NE,Z) l0017_16A5
	// succ:  l0017_167F l0017_16A5
l0017_167F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ChildWindowFromPoint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0006
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	GetDlgCtrlID(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn00AF_1162 (retsize: 4;)
	sp = sp + 0x0008
	// succ:  l0017_16A5
l0017_16A5:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0017_13DA
	// succ:  l0017_13DA
l0017_16AA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	DefWindowProc(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l0017_16BC
l0017_16BC:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  ATTRIBUTESDLGPROC_exit
ATTRIBUTESDLGPROC_exit:


// CREATECHARDLGPROC
// Return size: 4
void CREATECHARDLGPROC()
CREATECHARDLGPROC_entry:
	// succ:  l0017_16F4
l0017_16F4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	cx = Mem0[ss:bp + 0x000C:word16]
	ax = cx
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0017_1732
	// succ:  l0017_1709 l0017_1732
l0017_1709:
	ax = ax - 0x000E
	SCZO = cond(ax)
	branch Test(EQ,Z) l0017_173A
	// succ:  l0017_170E l0017_173A
l0017_170E:
	ax = ax - 0x00F1
	SCZO = cond(ax)
	branch Test(EQ,Z) l0017_1748
	// succ:  l0017_1713 l0017_1748
l0017_1713:
	ax = ax - 0x0101
	SCZO = cond(ax)
	branch Test(EQ,Z) l0017_1754
	// succ:  l0017_1718 l0017_1754
l0017_1718:
	ax = ax - 0x0003
	SCZO = cond(ax)
	branch Test(EQ,Z) l0017_175A
	// succ:  l0017_171D l0017_175A
l0017_171D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	DefWindowProc(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	goto l0017_177E
	// succ:  l0017_177E
l0017_1732:
	ax = Mem0[ss:bp + 0x000E:word16]
	Mem0[ds:0x3D7A:word16] = ax
	goto l0017_177B
	// succ:  l0017_177B
l0017_173A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_0000 (retsize: 4;)
	sp = sp + 0x0004
	goto l0017_177B
	// succ:  l0017_177B
l0017_1748:
	ax = 0x0038
	// succ:  l0017_174B
l0017_174B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00AF_04A4 (retsize: 4;)
	sp = sp + 0x0002
	goto l0017_177B
	// succ:  l0017_177B
l0017_1754:
	ax = 0x003C
	goto l0017_174B
	// succ:  l0017_174B
l0017_175A:
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn00F7_00EA (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00CF_09B2 (retsize: 4;)
	sp = sp + 0x000A
	// succ:  l0017_177B
l0017_177B:
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (int32) ax
	// succ:  l0017_177E
l0017_177E:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  CREATECHARDLGPROC_exit
CREATECHARDLGPROC_exit:


// EDITCHARACTERDLGPROC
// Return size: 4
void EDITCHARACTERDLGPROC()
EDITCHARACTERDLGPROC_entry:
	// succ:  l0017_1788
l0017_1788:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x000C:word16]
	ax = di
	SCZO = cond(ax - 0x0020)
	branch Test(NE,Z) l0017_17A4
	// succ:  l0017_17A1 l0017_17A4
l0017_17A1:
	goto l0017_184C
	// succ:  l0017_184C
l0017_17A4:
	branch Test(UGT,CZ) l0017_17BE
	// succ:  l0017_17A6 l0017_17BE
l0017_17A6:
	SCZO = cond(ax - 0x000F)
	branch Test(NE,Z) l0017_17AE
	// succ:  l0017_17AB l0017_17AE
l0017_17AB:
	goto l0017_1844
	// succ:  l0017_1844
l0017_17AE:
	branch Test(ULE,CZ) l0017_17B3
	// succ:  l0017_17B0 l0017_17B3
l0017_17B0:
	goto l0017_195C
	// succ:  l0017_195C
l0017_17B3:
	al = al - 0x02
	SCZO = cond(al)
	branch Test(EQ,Z) l0017_17DA
	// succ:  l0017_17B7 l0017_17DA
l0017_17B7:
	al = al - 0x03
	SCZO = cond(al)
	branch Test(EQ,Z) l0017_1800
	// succ:  l0017_17BB l0017_1800
l0017_17BB:
	goto l0017_195C
	// succ:  l0017_195C
l0017_17BE:
	ax = ax - 0x0084
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_17C6
	// succ:  l0017_17C3 l0017_17C6
l0017_17C3:
	goto l0017_1862
	// succ:  l0017_1862
l0017_17C6:
	ax = ax - 0x001D
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_17CE
	// succ:  l0017_17CB l0017_17CE
l0017_17CB:
	goto l0017_1898
	// succ:  l0017_1898
l0017_17CE:
	ax = ax - 0x0074
	SCZO = cond(ax)
	branch Test(NE,Z) l0017_17D6
	// succ:  l0017_17D3 l0017_17D6
l0017_17D3:
	goto l0017_18AC
	// succ:  l0017_18AC
l0017_17D6:
	goto l0017_195C
	// succ:  l0017_195C
l0017_17DA:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(NE,Z) l0017_17F7
	// succ:  l0017_17E1 l0017_17F7
l0017_17E1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	GetMenu(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x006B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	// succ:  l0017_17F7
l0017_17F7:
	Mem0[ds:0x4958:word16] = 0x0000
	goto l0017_195C
	// succ:  l0017_195C
l0017_1800:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = Mem0[ss:bp + 0x0008:word16]
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % Mem0[ds:0x4134:word16]
	ax = dx_ax /u Mem0[ds:0x4134:word16]
	SCZO = cond(ax)
	Mem0[ds:0x48C0:word16] = ax
	ax = ax - 0x001E
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SetScrollRange(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x001E
	cx = cx - Mem0[ds:0x48C0:word16]
	SCZO = cond(cx)
	Mem0[ds:0x4CBA:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00CF_020A (retsize: 4;)
	sp = sp + 0x0002
	goto l0017_1957
	// succ:  l0017_1957
l0017_1844:
	call fn00CF_0000 (retsize: 4;)
	goto l0017_1957
	// succ:  l0017_1957
l0017_184C:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x000C)
	branch Test(NE,Z) l0017_1855
	// succ:  l0017_1852 l0017_1855
l0017_1852:
	goto l0017_195C
	// succ:  l0017_195C
l0017_1855:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D72:word16]
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l0017_1957
	// succ:  l0017_1957
l0017_1862:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScreenToClient(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0001)
	branch Test(LT,SO) l0017_1890
	// succ:  l0017_188D l0017_1890
l0017_188D:
	goto l0017_195C
	// succ:  l0017_195C
l0017_1890:
	ax = 0x000C
	// succ:  l0017_1893
l0017_1893:
	dx = dx - dx
	SCZO = cond(dx)
	goto l0017_196E
	// succ:  l0017_196E
l0017_1898:
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x000C)
	branch Test(EQ,Z) l0017_18A1
	// succ:  l0017_189E l0017_18A1
l0017_189E:
	goto l0017_195C
	// succ:  l0017_195C
l0017_18A1:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0017_1CB4 (retsize: 2;)
	sp = sp + 0x0002
	goto l0017_1957
	// succ:  l0017_1957
l0017_18AC:
	di = Mem0[ds:0x4CBA:word16]
	ax = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax - 0x0007)
	branch Test(UGT,CZ) l0017_1922
	// succ:  l0017_18B8 l0017_1922
l0017_18B8:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v15 = ax
	ax = bx
	bx = v15
	switch (ax) { l0017_18D0 l0017_18E2 l0017_18F4 l0017_1902 l0017_1912 l0017_1922 l0017_18D4 l0017_1918 }
	// succ:  l0017_18D0 l0017_18E2 l0017_18F4 l0017_1902 l0017_1912 l0017_1922 l0017_18D4 l0017_1918
l0017_18D0:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0017_18DC
	// succ:  l0017_18D4 l0017_18DC
l0017_18D4:
	Mem0[ds:0x4CBA:word16] = 0x0000
	Mem0[ds:0x4CBA:word16] = 0x0000
	goto l0017_1922
	// succ:  l0017_1922
l0017_18DC:
	v20 = Mem0[ds:0x4CBA:word16] - 0x0001
	Mem0[ds:0x4CBA:word16] = v20
	SZO = cond(v20)
	goto l0017_1922
	// succ:  l0017_1922
l0017_18E2:
	ax = 0x001E
	ax = ax - Mem0[ds:0x48C0:word16]
	SCZO = cond(ax)
	cx = di
	cx = cx + 0x0001
	SZO = cond(cx)
	// succ:  l0017_18EC
l0017_18EC:
	SCZO = cond(ax - cx)
	branch Test(LE,SZO) l0017_191F
	// succ:  l0017_18F0 l0017_191F
l0017_18F0:
	ax = cx
	goto l0017_191F
	// succ:  l0017_191F
l0017_18F4:
	ax = Mem0[ds:0x48C0:word16]
	SCZO = cond(di - ax)
	branch Test(LT,SO) l0017_18D4
	// succ:  l0017_18FB l0017_18D4
l0017_18FB:
	v18 = Mem0[ds:0x4CBA:word16] - ax
	Mem0[ds:0x4CBA:word16] = v18
	SCZO = cond(v18)
	goto l0017_1922
	// succ:  l0017_1922
l0017_1902:
	ax = di
	ax = ax + Mem0[ds:0x48C0:word16]
	SCZO = cond(ax)
	cx = 0x001E
	cx = cx - Mem0[ds:0x48C0:word16]
	SCZO = cond(cx)
	goto l0017_18EC
	// succ:  l0017_18EC
l0017_1912:
	ax = Mem0[ss:bp + 0x0006:word16]
	goto l0017_191F
	// succ:  l0017_191F
l0017_1918:
	ax = 0x001E
	ax = ax - Mem0[ds:0x48C0:word16]
	SCZO = cond(ax)
	// succ:  l0017_191F
l0017_191F:
	Mem0[ds:0x4CBA:word16] = ax
	// succ:  l0017_1922
l0017_1922:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = di
	ax = ax - Mem0[ds:0x4CBA:word16]
	SCZO = cond(ax)
	dx_ax = Mem0[ds:0x4134:word16] *s ax
	SCZO = cond(dx_ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScrollWindow(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CBA:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0017_1957
l0017_1957:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0017_1893
	// succ:  l0017_1893
l0017_195C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	DefWindowProc(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l0017_196E
l0017_196E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  EDITCHARACTERDLGPROC_exit
EDITCHARACTERDLGPROC_exit:


// OBJLISTWNDPROC
// Return size: 4
void OBJLISTWNDPROC()
OBJLISTWNDPROC_entry:
	// succ:  l0017_197A
l0017_197A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x002C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(cx - 0x000F)
	branch Test(EQ,Z) l0017_1994
	// succ:  l0017_1991 l0017_1994
l0017_1991:
	goto l0017_1A22
	// succ:  l0017_1A22
l0017_1994:
	di = Mem0[ds:0x4134:word16]
	di = di >>u 0x0001
	SCZO = cond(di)
	ax = Mem0[ds:0x4132:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = 0x4C2A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = bp - 0x002C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BeginPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0017_19BD
	// succ:  l0017_19BA l0017_19BD
l0017_19BA:
	goto l0017_1A6F
	// succ:  l0017_1A6F
l0017_19BD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D82:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	Mem0[ss:bp - 0x000A:word16] = si
	si = Mem0[ss:bp - 0x0004:word16]
	// succ:  l0017_19D5
l0017_19D5:
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(EQ,Z) l0017_1A02
	// succ:  l0017_19DA l0017_1A02
l0017_19DA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	bx = Mem0[ds:si:word16]
	ax = Mem0[ds:bx:word16]
	bx = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:bx:byte]
	ax = (int16) al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	TextOut(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	di = di + Mem0[ds:si + 0x0002:word16]
	SCZO = cond(di)
	si = si + 0x0004
	SCZO = cond(si)
	v18 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v18
	SZO = cond(v18)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x000A)
	branch Test(LT,SO) l0017_19D5
	// succ:  l0017_1A02 l0017_19D5
l0017_1A02:
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l0017_1A13
	// succ:  l0017_1A08 l0017_1A13
l0017_1A08:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0017_1A13
l0017_1A13:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = bp - 0x002C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	goto l0017_1A6F
	// succ:  l0017_1A6F
l0017_1A22:
	SCZO = cond(cx - 0x0205)
	branch Test(EQ,Z) l0017_1A48
	// succ:  l0017_1A28 l0017_1A48
l0017_1A28:
	SCZO = cond(cx - 0x0202)
	branch Test(EQ,Z) l0017_1A48
	// succ:  l0017_1A2E l0017_1A48
l0017_1A2E:
	SCZO = cond(cx - 0x0101)
	branch Test(EQ,Z) l0017_1A48
	// succ:  l0017_1A34 l0017_1A48
l0017_1A34:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	DefWindowProc(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	goto l0017_1A72
	// succ:  l0017_1A72
l0017_1A48:
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0000)
	branch Test(EQ,Z) l0017_1A5A
	// succ:  l0017_1A4F l0017_1A5A
l0017_1A4F:
	ReleaseCapture()
	Mem0[ds:0x0098:word16] = 0x0000
	// succ:  l0017_1A5A
l0017_1A5A:
	sp = sp - 0x0002
	call fn0017_1A7E (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendMessage(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l0017_1A6F
l0017_1A6F:
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (int32) ax
	// succ:  l0017_1A72
l0017_1A72:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  OBJLISTWNDPROC_exit
OBJLISTWNDPROC_exit:


// fn0017_1A7E
// Return size: 4
void fn0017_1A7E()
fn0017_1A7E_entry:
	// succ:  l0017_1A7E
l0017_1A7E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = 0x4C2A
	di = di - di
	SCZO = cond(di)
	// succ:  l0017_1A92
l0017_1A92:
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(EQ,Z) l0017_1AAE
	// succ:  l0017_1A97 l0017_1AAE
l0017_1A97:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:si:word16] = ax
	Mem0[ds:si + 0x0002:word16] = ax
	si = si + 0x0004
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - 0x000A)
	branch Test(LT,SO) l0017_1A92
	// succ:  l0017_1AAE l0017_1A92
l0017_1AAE:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0017_1A7E_exit
fn0017_1A7E_exit:


// fn0017_1AB8
// Return size: 4
void fn0017_1AB8()
fn0017_1AB8_entry:
	// succ:  l0017_1AB8
l0017_1AB8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	si = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:0x4138:word16] = di
	Mem0[ds:0x413A:word16] = si
	ax = Mem0[ds:0x4128:word16]
	Mem0[ds:0x412C:word16] = ax
	ax = si
	Mem0[ds:0x412E:word16] = ax
	SCZO = cond(Mem0[ds:0x009E:word16] - 0x0000)
	branch Test(EQ,Z) l0017_1B0C
	// succ:  l0017_1AE7 l0017_1B0C
l0017_1AE7:
	ax = Mem0[ds:0x4134:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax - 0x001A
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	cx = ~cx
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + 0x001A
	SCZO = cond(ax)
	cx = ax
	ax = ax + 0x0005
	SCZO = cond(ax)
	v14 = Mem0[ds:0x412E:word16] - ax
	Mem0[ds:0x412E:word16] = v14
	SCZO = cond(v14)
	cx = cx + 0x0005
	SCZO = cond(cx)
	goto l0017_1B0E
	// succ:  l0017_1B0E
l0017_1B0C:
	cx = cx - cx
	SCZO = cond(cx)
	// succ:  l0017_1B0E
l0017_1B0E:
	SCZO = cond(Mem0[ds:0x4EAE:word16] - 0x0000)
	branch Test(EQ,Z) l0017_1B2E
	// succ:  l0017_1B15 l0017_1B2E
l0017_1B15:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x412C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x412E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveWindow(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	// succ:  l0017_1B2E
l0017_1B2E:
	SCZO = cond(Mem0[ds:0x4BEA:word16] - 0x0000)
	branch Test(EQ,Z) l0017_1B50
	// succ:  l0017_1B35 l0017_1B50
l0017_1B35:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BEA:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x4128:word16]
	ax = ax - di
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x412A:word16]
	ax = ax - si
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveWindow(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	// succ:  l0017_1B50
l0017_1B50:
	SCZO = cond(Mem0[ds:0x4958:word16] - 0x0000)
	branch Test(EQ,Z) l0017_1B70
	// succ:  l0017_1B57 l0017_1B70
l0017_1B57:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4958:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	si = si - Mem0[ds:0x412A:word16]
	SCZO = cond(si)
	si = -si
	SCZO = cond(si)
	C = si == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveWindow(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	// succ:  l0017_1B70
l0017_1B70:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0017_1AB8_exit
fn0017_1AB8_exit:


// fn0017_1B7C
// Return size: 4
void fn0017_1B7C()
fn0017_1B7C_entry:
	// succ:  l0017_1B7C
l0017_1B7C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	GetMenu(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	ax = di
	SCZO = cond(ax - 0x0006)
	branch Test(ULE,CZ) l0017_1BA3
	// succ:  l0017_1BA0 l0017_1BA3
l0017_1BA0:
	goto l0017_1C9A
	// succ:  l0017_1C9A
l0017_1BA3:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v12 = ax
	ax = bx
	bx = v12
	switch (ax) { l0017_1BBA l0017_1C2A l0017_1C84 l0017_1C9A l0017_1C9A l0017_1BBA l0017_1BBA }
	// succ:  l0017_1BBA l0017_1C2A l0017_1C84 l0017_1C9A l0017_1C9A l0017_1BBA l0017_1BBA
l0017_1BBA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0068
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00BC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0076
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EA8:word16]
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0017_1C22
l0017_1C22:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l0017_1C9A
	// succ:  l0017_1C9A
l0017_1C2A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0068
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00BC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EA8:word16]
	ax = 0x0001
	goto l0017_1C22
	// succ:  l0017_1C22
l0017_1C84:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00C1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SCZO = cond(Mem0[ds:0x01CA:word16] - 0x0001)
	C = !C
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x0008
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CheckMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	// succ:  l0017_1C9A
l0017_1C9A:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0017_1CA7
	// succ:  l0017_1C9E l0017_1CA7
l0017_1C9E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	DrawMenuBar(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0017_1CA7
l0017_1CA7:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0017_1B7C_exit
fn0017_1B7C_exit:


// fn0017_1CB4
// Return size: 4
void fn0017_1CB4()
fn0017_1CB4_entry:
	// succ:  l0017_1CB4
l0017_1CB4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ds:0x0098:word16] = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	SetCapture(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ds:0x3D78:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = 0x4EA4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetCursorPos(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	ax = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:0x009C:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x4EA4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScreenToClient(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0017_1D27
	// succ:  l0017_1D13 l0017_1D27
l0017_1D13:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x4EA4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1C4E (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0017_1D27
l0017_1D27:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0017_1CB4_exit
fn0017_1CB4_exit:


// fn0017_1D32
// Return size: 4
void fn0017_1D32()
fn0017_1D32_entry:
	// succ:  l0017_1D32
l0017_1D32:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ReleaseCapture()
	Mem0[ds:0x0098:word16] = 0x0000
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0017_1D7A
	// succ:  l0017_1D66 l0017_1D7A
l0017_1D66:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x4EA4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1C4E (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0017_1D7A
l0017_1D7A:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l0017_1DB3
	// succ:  l0017_1D80 l0017_1DB3
l0017_1D80:
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetCursorPos(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScreenToClient(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	SCZO = cond(Mem0[ds:0x009C:word16] - 0x0000)
	branch Test(EQ,Z) l0017_1DA8
	// succ:  l0017_1D9F l0017_1DA8
l0017_1D9F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4138:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	goto l0017_1DAF
	// succ:  l0017_1DAF
l0017_1DA8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x413A:word16]
	// succ:  l0017_1DAF
l0017_1DAF:
	sp = sp - 0x0002
	call fn0017_1AB8 (retsize: 2;)
	sp = sp + 0x0004
l0017_1DB3:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0017_1D32_exit
fn0017_1D32_exit:


// fn0017_1DBE
// Return size: 4
void fn0017_1DBE()
fn0017_1DBE_entry:
	// succ:  l0017_1DBE
l0017_1DBE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0102
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn00F7_1CD2 (retsize: 4;)
	sp = sp + 0x0004
	di = 0x012E
	si = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0017_1DEA
l0017_1DEA:
	branch cx == 0x0000 l0017_1DEC
	// succ:  l0017_1DEA_1 l0017_1DEC
l0017_1DEA_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0017_1DEA
	// succ:  l0017_1DEC l0017_1DEA
l0017_1DEC:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	bx = cx
	v17 = si
	si = di
	di = v17
	cx = 0xFFFF
	// succ:  l0017_1DF7
l0017_1DF7:
	branch cx == 0x0000 l0017_1DF9
	// succ:  l0017_1DF7_2 l0017_1DF9
l0017_1DF7_2:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0017_1DF7
	// succ:  l0017_1DF9 l0017_1DF7
l0017_1DF9:
	di = di - 0x0001
	SZO = cond(di)
	cx = bx
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0017_1DFE
l0017_1DFE:
	branch cx == 0x0000 l0017_1E00
	// succ:  l0017_1DFE_3 l0017_1E00
l0017_1DFE_3:
	v18 = Mem0[si:word16]
	Mem0[di:word16] = v18
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0017_1DFE
	// succ:  l0017_1DFE
l0017_1E00:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0017_1E02
l0017_1E02:
	branch cx == 0x0000 l0017_1E04
	// succ:  l0017_1E02_1 l0017_1E04
l0017_1E02_1:
	v19 = Mem0[si:byte]
	Mem0[di:byte] = v19
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0017_1E02
	// succ:  l0017_1E02
l0017_1E04:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	WinHelp(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	Mem0[ds:0x009A:word16] = 0x0001
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0017_1DBE_exit
fn0017_1DBE_exit:


// fn0017_1E2E
// Return size: 4
void fn0017_1E2E()
fn0017_1E2E_entry:
	// succ:  l0017_1E2E
l0017_1E2E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0017_1E2E_exit
fn0017_1E2E_exit:


// fn0017_1E46
// Return size: 4
void fn0017_1E46()
fn0017_1E46_entry:
	// succ:  l0017_1E46
l0017_1E46:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0014
	SCZO = cond(sp)
	// succ:  l0017_1E53
l0017_1E53:
	ax = bp - 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0108
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	PeekMessage(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0017_1E53
	// succ:  l0017_1E70 l0017_1E53
l0017_1E70:
	ax = bp - 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0200
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0209
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	PeekMessage(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0017_1E70
	// succ:  l0017_1E8D l0017_1E70
l0017_1E8D:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0017_1E46_exit
fn0017_1E46_exit:


// fn0017_1E96
// Return size: 4
void fn0017_1E96()
fn0017_1E96_entry:
	// succ:  l0017_1E96
l0017_1E96:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0122
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	dl = Mem0[ds:0x4EB6:byte]
	dh = dh - dh
	SCZO = cond(dh)
	ax = di
	cx = di
	cl = cl & 0xFF
	SZO = cond(cl)
	C = false
	al = cl
	ah = Mem0[ds:0x4EB7:byte]
	Mem0[ds:0x4EB6:word16] = ax
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - 0x0007)
	branch Test(ULE,CZ) l0017_1EC9
	// succ:  l0017_1EC6 l0017_1EC9
l0017_1EC6:
	goto l0017_232E
	// succ:  l0017_232E
l0017_1EC9:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v19 = ax
	ax = bx
	bx = v19
	switch (ax) { l0017_1EE2 l0017_1EEA l0017_20BC l0017_21A4 l0017_21F0 l0017_22DA l0017_22DA l0017_22DA }
	// succ:  l0017_1EE2 l0017_1EEA l0017_20BC l0017_21A4 l0017_21F0 l0017_22DA l0017_22DA l0017_22DA
l0017_1EE2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn0017_1B7C (retsize: 2;)
	sp = sp + 0x0002
	goto l0017_232E
	// succ:  l0017_232E
l0017_1EEA:
	SCZO = cond(dx - 0x0003)
	branch Test(NE,Z) l0017_1F42
	// succ:  l0017_1EEF l0017_1F42
l0017_1EEF:
	ax = Mem0[ds:0x495A:word16]
	Mem0[ds:0x3D84:word16] = ax
	cx = Mem0[ds:0x4CE2:word16]
	Mem0[ds:0x4BE8:word16] = cx
	cx = cx + Mem0[ds:0x4D68:word16]
	SCZO = cond(cx)
	Mem0[ds:0x3CF6:word16] = cx
	ax = ax + Mem0[ds:0x495E:word16]
	SCZO = cond(ax)
	Mem0[ds:0x4DDE:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BE8:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D84:word16]
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D7A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l0017_206A
	// succ:  l0017_206A
l0017_1F42:
	SCZO = cond(dx - 0x0002)
	branch Test(EQ,Z) l0017_1F4A
	// succ:  l0017_1F47 l0017_1F4A
l0017_1F47:
	goto l0017_200E
	// succ:  l0017_200E
l0017_1F4A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB0:word16]
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetSubMenu(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB0:word16]
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	RemoveMenu(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = 0x0203
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0017_1F8A
	// succ:  l0017_1F7B l0017_1F8A
l0017_1F7B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D26:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0410
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	goto l0017_1F9A
	// succ:  l0017_1F9A
l0017_1F8A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D26:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0076
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l0017_1F9A
l0017_1F9A:
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InsertMenu(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB0:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetSubMenu(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB0:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	RemoveMenu(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = 0x0422
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D26:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0410
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InsertMenu(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	call fn0067_0F06 (retsize: 4;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0017_23B4 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0xFFFF)
	branch Test(EQ,Z) l0017_206A
	// succ:  l0017_2007 l0017_206A
l0017_2007:
	call fn0177_0AB6 (retsize: 4;)
	goto l0017_206A
	// succ:  l0017_206A
l0017_200E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = Mem0[ds:0x0480:word16]
	dx = dx - Mem0[ds:0x4D68:word16]
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SetScrollRange(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = Mem0[ds:0x0482:word16]
	cx = cx - Mem0[ds:0x495E:word16]
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollRange(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BE8:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D84:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn0017_1B7C (retsize: 2;)
	sp = sp + 0x0002
l0017_206A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D26:word16]
	SetMenu(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0017_2077
l0017_2077:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l0017_2085
l0017_2085:
	SCZO = cond(Mem0[ds:0x4BEA:word16] - 0x0000)
	branch Test(EQ,Z) l0017_209A
	// succ:  l0017_208C l0017_209A
l0017_208C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BEA:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l0017_209A
l0017_209A:
	SCZO = cond(Mem0[ds:0x4958:word16] - 0x0000)
	branch Test(EQ,Z) l0017_20AF
	// succ:  l0017_20A1 l0017_20AF
l0017_20A1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4958:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l0017_20AF
l0017_20AF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	// succ:  l0017_20B3
l0017_20B3:
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l0017_232E
	// succ:  l0017_232E
l0017_20BC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D26:word16]
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetSubMenu(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D26:word16]
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	RemoveMenu(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = 0x0203
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0017_20FE
	// succ:  l0017_20EE l0017_20FE
l0017_20EE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB0:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0410
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	goto l0017_210E
	// succ:  l0017_210E
l0017_20FE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB0:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0076
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l0017_210E
l0017_210E:
	ax = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InsertMenu(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D26:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetSubMenu(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D26:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	RemoveMenu(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = 0x0422
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB0:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0410
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InsertMenu(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB0:word16]
	SetMenu(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0017_23B4 (retsize: 2;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	BringWindowToTop(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l0017_1EE2
	// succ:  l0017_1EE2
l0017_21A4:
	ax = Mem0[ds:0x4BE8:word16]
	Mem0[ds:0x4CE2:word16] = ax
	ax = Mem0[ds:0x3D84:word16]
	Mem0[ds:0x495A:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:0x4BE8:word16] = ax
	Mem0[ds:0x3D84:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D8A:word16]
	SetMenu(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D7A:word16]
	BringWindowToTop(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D7A:word16]
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D7A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D7A:word16]
	goto l0017_20B3
	// succ:  l0017_20B3
l0017_21F0:
	SCZO = cond(dx - 0x0002)
	branch Test(EQ,Z) l0017_21F8
	// succ:  l0017_21F5 l0017_21F8
l0017_21F5:
	goto l0017_232E
	// succ:  l0017_232E
l0017_21F8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB0:word16]
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetSubMenu(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB0:word16]
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	RemoveMenu(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = 0x0203
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0017_223A
	// succ:  l0017_222A l0017_223A
l0017_222A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D26:word16]
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0410
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	goto l0017_224A
	// succ:  l0017_224A
l0017_223A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D26:word16]
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0076
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l0017_224A
l0017_224A:
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InsertMenu(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB0:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetSubMenu(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB0:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	RemoveMenu(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = 0x0422
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D26:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0410
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InsertMenu(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	call fn0067_0F06 (retsize: 4;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0017_23B4 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0xFFFF)
	branch Test(EQ,Z) l0017_22BF
	// succ:  l0017_22BA l0017_22BF
l0017_22BA:
	call fn0177_0AB6 (retsize: 4;)
	// succ:  l0017_22BF
l0017_22BF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D26:word16]
	SetMenu(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0017_22D6
	// succ:  l0017_22D3 l0017_22D6
l0017_22D3:
	goto l0017_2085
	// succ:  l0017_2085
l0017_22D6:
	goto l0017_2077
	// succ:  l0017_2077
l0017_22DA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollRange(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollRange(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	call fn002F_336C (retsize: 4;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn0017_1B7C (retsize: 2;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	SCZO = cond(Mem0[ds:0x4BEA:word16] - 0x0000)
	branch Test(EQ,Z) l0017_232E
	// succ:  l0017_2320 l0017_232E
l0017_2320:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BEA:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l0017_232E
l0017_232E:
	ax = di
	al = al & 0xFF
	SZO = cond(al)
	C = false
	cl = al
	ch = Mem0[ds:0x4EB7:byte]
	Mem0[ds:0x4EB6:word16] = cx
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0017_1E96_exit
fn0017_1E96_exit:


// fn0017_2348
// Return size: 4
void fn0017_2348()
fn0017_2348_entry:
	// succ:  l0017_2348
l0017_2348:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0003)
	branch Test(EQ,Z) l0017_23AB
	// succ:  l0017_235C l0017_23AB
l0017_235C:
	al = Mem0[ds:0x4EB6:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - 0x0007)
	branch Test(UGT,CZ) l0017_23AB
	// succ:  l0017_2366 l0017_23AB
l0017_2366:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v13 = ax
	ax = bx
	bx = v13
	switch (ax) { l0017_237E l0017_237E l0017_2384 l0017_23A2 l0017_237E l0017_237E l0017_237E l0017_237E }
	// succ:  l0017_237E l0017_237E l0017_2384 l0017_23A2 l0017_237E l0017_237E l0017_237E l0017_237E
l0017_237E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	goto l0017_23A6
	// succ:  l0017_23A6
l0017_2384:
	SCZO = cond(Mem0[ds:0x4914:word16] - 0xFFFF)
	branch Test(NE,Z) l0017_2392
	// succ:  l0017_238B l0017_2392
l0017_238B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	goto l0017_23A6
	// succ:  l0017_23A6
l0017_2392:
	ax = 0x0011
	dx_ax = Mem0[ds:0x4914:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4B60:word16]
	goto l0017_23A6
	// succ:  l0017_23A6
l0017_23A2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D7A:word16]
	// succ:  l0017_23A6
l0017_23A6:
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0017_23AB
l0017_23AB:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0017_2348_exit
fn0017_2348_exit:


// fn0017_23B4
// Return size: 4
void fn0017_23B4()
fn0017_23B4_entry:
	// succ:  l0017_23B4
l0017_23B4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0052
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0017_23D2
	// succ:  l0017_23C7 l0017_23D2
l0017_23C7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	goto l0017_23F5
	// succ:  l0017_23F5
l0017_23D2:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x02)
	branch Test(NE,Z) l0017_23E0
	// succ:  l0017_23D9 l0017_23E0
l0017_23D9:
	call fn0077_1B86 (retsize: 4;)
	goto l0017_23FB
	// succ:  l0017_23FB
l0017_23E0:
	ax = 0x0157
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	// succ:  l0017_23F5
l0017_23F5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowText(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	// succ:  l0017_23FB
l0017_23FB:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0017_23B4_exit
fn0017_23B4_exit:


// fn0017_2406
// Return size: 4
void fn0017_2406()
fn0017_2406_entry:
	// succ:  l0017_2406
l0017_2406:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0054
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	di = di - di
	SCZO = cond(di)
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	cl = 0x06
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE2:byte]
	Mem0[ss:bp - 0x0003:byte] = al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SCZO = cond(al - 0x12)
	branch Test(NE,Z) l0017_2446
	// succ:  l0017_2441 l0017_2446
l0017_2441:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0017_2449
	// succ:  l0017_2449
l0017_2446:
	ax = 0x0001
	// succ:  l0017_2449
l0017_2449:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00A3
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SCZO = cond(Mem0[ss:bp - 0x0003:byte] - 0x13)
	branch Test(NE,Z) l0017_245E
	// succ:  l0017_245A l0017_245E
l0017_245A:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0017_2461
	// succ:  l0017_2461
l0017_245E:
	ax = 0x0001
	// succ:  l0017_2461
l0017_2461:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	al = Mem0[ss:bp - 0x0003:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2210 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax - 0x0005
	SCZO = cond(ax)
	branch Test(EQ,Z) l0017_247E
	// succ:  l0017_2477 l0017_247E
l0017_2477:
	ax = ax - 0x0004
	SCZO = cond(ax)
	branch Test(EQ,Z) l0017_2484
	// succ:  l0017_247C l0017_2484
l0017_247C:
	goto l0017_2487
	// succ:  l0017_2487
l0017_247E:
	di = 0x0399
	goto l0017_2487
	// succ:  l0017_2487
l0017_2484:
	di = 0x039A
	// succ:  l0017_2487
l0017_2487:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00C8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	DeleteMenu(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0017_24B4
	// succ:  l0017_2498 l0017_24B4
l0017_2498:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = bp - 0x0054
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00C8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0054
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	AppendMenu(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000A
	// succ:  l0017_24B4
l0017_24B4:
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	Mem0[ss:bp - 0x0003:byte] = al
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0017_250A
	// succ:  l0017_24D6 l0017_250A
l0017_24D6:
	bl = al
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l0017_250A
	// succ:  l0017_24E8 l0017_250A
l0017_24E8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00A5
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx + 0x004E:word16] - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	goto l0017_2520
	// succ:  l0017_2520
l0017_250A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00A5
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	// succ:  l0017_2520
l0017_2520:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0017_2406_exit
fn0017_2406_exit:


// fn002F_0000
// Return size: 4
void fn002F_0000()
fn002F_0000_entry:
	// succ:  l002F_0000
l002F_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x001C
	SCZO = cond(sp)
	Mem0[ss:bp - 0x001C:word16] = 0x000B
	Mem0[ss:bp - 0x001A:word16] = 0x019C
	Mem0[ss:bp - 0x0018:word16] = 0x0017
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0016:word16] = ax
	Mem0[ss:bp - 0x0014:word16] = ax
	ax = Mem0[ds:0x3D28:word16]
	Mem0[ss:bp - 0x0012:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0010:word16] = ax
	Mem0[ss:bp - 0x000E:word16] = 0x0000
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = 0x00B8
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = ds
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = ds
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	RegisterClass(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_0069
	// succ:  l002F_0066 l002F_0069
l002F_0066:
	goto l002F_0271
	// succ:  l002F_0271
l002F_0069:
	Mem0[ss:bp - 0x001A:word16] = 0x0B72
	Mem0[ss:bp - 0x0018:word16] = 0x0017
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = 0x00D4
	Mem0[ss:bp - 0x0004:word16] = ds
	Mem0[ss:bp - 0x0010:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	RegisterClass(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_009A
	// succ:  l002F_0097 l002F_009A
l002F_0097:
	goto l002F_0271
	// succ:  l002F_0271
l002F_009A:
	Mem0[ss:bp - 0x001A:word16] = 0x16F4
	Mem0[ss:bp - 0x0018:word16] = 0x0017
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = 0x00DC
	Mem0[ss:bp - 0x0004:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	RegisterClass(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_00CE
	// succ:  l002F_00CB l002F_00CE
l002F_00CB:
	goto l002F_0271
	// succ:  l002F_0271
l002F_00CE:
	Mem0[ss:bp - 0x001A:word16] = 0x0FD0
	Mem0[ss:bp - 0x0018:word16] = 0x0017
	Mem0[ss:bp - 0x0006:word16] = 0x00C0
	Mem0[ss:bp - 0x0004:word16] = ds
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	RegisterClass(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_00F1
	// succ:  l002F_00EE l002F_00F1
l002F_00EE:
	goto l002F_0271
	// succ:  l002F_0271
l002F_00F1:
	Mem0[ss:bp - 0x001A:word16] = 0x1788
	Mem0[ss:bp - 0x0018:word16] = 0x0017
	Mem0[ss:bp - 0x0006:word16] = 0x00C8
	Mem0[ss:bp - 0x0004:word16] = ds
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	RegisterClass(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_0114
	// succ:  l002F_0111 l002F_0114
l002F_0111:
	goto l002F_0271
	// succ:  l002F_0271
l002F_0114:
	Mem0[ss:bp - 0x001A:word16] = 0x0000
	Mem0[ss:bp - 0x0018:word16] = 0x0067
	Mem0[ss:bp - 0x0006:word16] = 0x00E2
	Mem0[ss:bp - 0x0004:word16] = ds
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	RegisterClass(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_0137
	// succ:  l002F_0134 l002F_0137
l002F_0134:
	goto l002F_0271
	// succ:  l002F_0271
l002F_0137:
	Mem0[ss:bp - 0x001A:word16] = 0x0000
	Mem0[ss:bp - 0x0018:word16] = 0x0077
	Mem0[ss:bp - 0x0006:word16] = 0x00EC
	Mem0[ss:bp - 0x0004:word16] = ds
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0014:word16] = 0x0008
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	RegisterClass(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_0167
	// succ:  l002F_0164 l002F_0167
l002F_0164:
	goto l002F_0271
	// succ:  l002F_0271
l002F_0167:
	Mem0[ss:bp - 0x001A:word16] = 0x197A
	Mem0[ss:bp - 0x0018:word16] = 0x0017
	Mem0[ss:bp - 0x0006:word16] = 0x00FC
	Mem0[ss:bp - 0x0004:word16] = ds
	Mem0[ss:bp - 0x0014:word16] = 0x0000
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	RegisterClass(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_018F
	// succ:  l002F_018C l002F_018F
l002F_018C:
	goto l002F_0271
	// succ:  l002F_0271
l002F_018F:
	Mem0[ss:bp - 0x001A:word16] = 0x12EC
	Mem0[ss:bp - 0x0018:word16] = 0x0097
	Mem0[ss:bp - 0x0006:word16] = 0x010A
	Mem0[ss:bp - 0x0004:word16] = ds
	Mem0[ss:bp - 0x0014:word16] = 0x0006
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	RegisterClass(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_01B7
	// succ:  l002F_01B4 l002F_01B7
l002F_01B4:
	goto l002F_0271
	// succ:  l002F_0271
l002F_01B7:
	Mem0[ss:bp - 0x001A:word16] = 0x0E0C
	Mem0[ss:bp - 0x0018:word16] = 0x002F
	Mem0[ss:bp - 0x0006:word16] = 0x0102
	Mem0[ss:bp - 0x0004:word16] = ds
	Mem0[ss:bp - 0x0014:word16] = 0x0000
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	RegisterClass(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_01EB
	// succ:  l002F_01E8 l002F_01EB
l002F_01E8:
	goto l002F_0271
	// succ:  l002F_0271
l002F_01EB:
	Mem0[ss:bp - 0x001A:word16] = 0x1C4A
	Mem0[ss:bp - 0x0018:word16] = 0x0177
	Mem0[ss:bp - 0x0006:word16] = 0x0112
	Mem0[ss:bp - 0x0004:word16] = ds
	Mem0[ss:bp - 0x0014:word16] = 0x0004
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	RegisterClass(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_0271
	// succ:  l002F_021B l002F_0271
l002F_021B:
	Mem0[ss:bp - 0x001A:word16] = 0x2A74
	Mem0[ss:bp - 0x0018:word16] = 0x002F
	Mem0[ss:bp - 0x0006:word16] = 0x011C
	Mem0[ss:bp - 0x0004:word16] = ds
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0014:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	RegisterClass(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_0271
	// succ:  l002F_0249 l002F_0271
l002F_0249:
	Mem0[ss:bp - 0x001A:word16] = 0x1264
	Mem0[ss:bp - 0x0018:word16] = 0x0017
	Mem0[ss:bp - 0x0006:word16] = 0x00F4
	Mem0[ss:bp - 0x0004:word16] = ds
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	RegisterClass(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	// succ:  l002F_0271
l002F_0271:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_0000_exit
fn002F_0000_exit:


// fn002F_027A
// Return size: 4
void fn002F_027A()
fn002F_027A_entry:
	// succ:  l002F_027A
l002F_027A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x4128:word16]
	Mem0[ds:0x412C:word16] = ax
	ax = Mem0[ds:0x4134:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x412A:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	Mem0[ds:0x412E:word16] = ax
	SCZO = cond(Mem0[ds:0x009E:word16] - 0x0000)
	branch Test(EQ,Z) l002F_02D0
	// succ:  l002F_02AB l002F_02D0
l002F_02AB:
	ax = cx
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax - 0x001A
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	cx = ~cx
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + 0x001A
	SCZO = cond(ax)
	cx = ax
	ax = ax + 0x0005
	SCZO = cond(ax)
	v13 = Mem0[ds:0x412E:word16] - ax
	Mem0[ds:0x412E:word16] = v13
	SCZO = cond(v13)
	si = cx
	si = si + 0x0005
	SCZO = cond(si)
	goto l002F_02D2
	// succ:  l002F_02D2
l002F_02D0:
	si = si - si
	SCZO = cond(si)
	// succ:  l002F_02D2
l002F_02D2:
	ax = 0x00D4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x46B0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x412C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x412E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	Mem0[ds:0x4EAE:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_031C
	// succ:  l002F_0306 l002F_031C
l002F_0306:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = 0x0001
	// succ:  l002F_031C
l002F_031C:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_027A_exit
fn002F_027A_exit:


// fn002F_0326
// Return size: 4
void fn002F_0326()
fn002F_0326_entry:
	// succ:  l002F_0326
l002F_0326:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x00C0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x4420
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4128:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4134:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	cx = ax
	ax = ax - Mem0[ds:0x412A:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4128:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx + 0x0001
	SZO = cond(cx)
	cx = cx + 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	Mem0[ds:0x4BEA:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_03B2
	// succ:  l002F_038C l002F_03B2
l002F_038C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BEA:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(Mem0[ds:0x4EAE:word16] - 0x0000)
	branch Test(EQ,Z) l002F_03AF
	// succ:  l002F_03A6 l002F_03AF
l002F_03A6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_03AF
l002F_03AF:
	ax = 0x0001
	// succ:  l002F_03B2
l002F_03B2:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_0326_exit
fn002F_0326_exit:


// fn002F_03BA
// Return size: 4
void fn002F_03BA()
fn002F_03BA_entry:
	// succ:  l002F_03BA
l002F_03BA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x00C8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x4420
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4134:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	cx = ax
	ax = ax - Mem0[ds:0x412A:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4128:word16]
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx + 0x0001
	SZO = cond(cx)
	cx = cx + 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	Mem0[ds:0x4958:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_043F
	// succ:  l002F_0419 l002F_043F
l002F_0419:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4958:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(Mem0[ds:0x4EAE:word16] - 0x0000)
	branch Test(EQ,Z) l002F_043C
	// succ:  l002F_0433 l002F_043C
l002F_0433:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_043C
l002F_043C:
	ax = 0x0001
	// succ:  l002F_043F
l002F_043F:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_03BA_exit
fn002F_03BA_exit:


// fn002F_0448
// Return size: 4
void fn002F_0448()
fn002F_0448_entry:
	// succ:  l002F_0448
l002F_0448:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x00F4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x4600
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4128:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4134:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax - 0x001A
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	cx = ~cx
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + 0x001A
	SCZO = cond(ax)
	ax = ax + 0x0006
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	Mem0[ds:0x4EA8:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_04C1
	// succ:  l002F_04A4 l002F_04C1
l002F_04A4:
	SCZO = cond(Mem0[ds:0x009E:word16] - 0x0000)
	branch Test(EQ,Z) l002F_04BE
	// succ:  l002F_04AB l002F_04BE
l002F_04AB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EA8:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_04BE
l002F_04BE:
	ax = 0x0001
	// succ:  l002F_04C1
l002F_04C1:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_0448_exit
fn002F_0448_exit:


// fn002F_04CA
// Return size: 4
void fn002F_04CA()
fn002F_04CA_entry:
	// succ:  l002F_04CA
l002F_04CA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	GetVersion()
	si = ax
	SCZO = cond(al - 0x03)
	branch Test(NE,Z) l002F_04EF
	// succ:  l002F_04E4 l002F_04EF
l002F_04E4:
	al = ah
	SCZO = cond(al - 0x01)
	branch Test(ULT,C) l002F_04EF
	// succ:  l002F_04EA l002F_04EF
l002F_04EA:
	v15 = Mem0[ds:0x4EB7:byte] | 0x02
	Mem0[ds:0x4EB7:byte] = v15
	SZO = cond(Mem0[ds:0x4EB7:byte])
	C = false
	// succ:  l002F_04EF
l002F_04EF:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x3D00:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0002
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l002F_0516
	// succ:  l002F_0510 l002F_0516
l002F_0510:
	ax = ax - ax
	SCZO = cond(ax)
	goto l002F_0AE6
	// succ:  l002F_0AE6
l002F_0516:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	CreatePatternBrush(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l002F_052A
	// succ:  l002F_0522 l002F_052A
l002F_0522:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	// succ:  l002F_0523
l002F_0523:
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l002F_0510
	// succ:  l002F_0510
l002F_052A:
	Mem0[ds:0x3D02:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0004
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l002F_0510
	// succ:  l002F_0549 l002F_0510
l002F_0549:
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	CreatePatternBrush(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l002F_055A
	// succ:  l002F_0557 l002F_055A
l002F_0557:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	goto l002F_0523
	// succ:  l002F_0523
l002F_055A:
	Mem0[ds:0x3D04:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = 0x8080
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateSolidBrush(Mem0[ss:sp:word32])
	sp = sp + 0x0004
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l002F_0510
	// succ:  l002F_0576 l002F_0510
l002F_0576:
	Mem0[ds:0x3D06:word16] = si
	ax = 0x8000
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateSolidBrush(Mem0[ss:sp:word32])
	sp = sp + 0x0004
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l002F_0510
	// succ:  l002F_058C l002F_0510
l002F_058C:
	Mem0[ss:bp - 0x0008:word16] = si
	di = ax
	Mem0[ds:0x3D08:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x00B4
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l002F_05AD
	// succ:  l002F_05AA l002F_05AD
l002F_05AA:
	goto l002F_0510
	// succ:  l002F_0510
l002F_05AD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	CreatePatternBrush(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l002F_05BC
	// succ:  l002F_05B9 l002F_05BC
l002F_05B9:
	goto l002F_0522
	// succ:  l002F_0522
l002F_05BC:
	Mem0[ds:0x3D0A:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x00B5
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l002F_05DE
	// succ:  l002F_05DB l002F_05DE
l002F_05DB:
	goto l002F_0510
	// succ:  l002F_0510
l002F_05DE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	CreatePatternBrush(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l002F_05ED
	// succ:  l002F_05EA l002F_05ED
l002F_05EA:
	goto l002F_0522
	// succ:  l002F_0522
l002F_05ED:
	Mem0[ds:0x3D0C:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x00B6
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l002F_060F
	// succ:  l002F_060C l002F_060F
l002F_060C:
	goto l002F_0510
	// succ:  l002F_0510
l002F_060F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	CreatePatternBrush(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l002F_061E
	// succ:  l002F_061B l002F_061E
l002F_061B:
	goto l002F_0522
	// succ:  l002F_0522
l002F_061E:
	Mem0[ds:0x3D0E:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = 0x8080
	dx = 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateSolidBrush(Mem0[ss:sp:word32])
	sp = sp + 0x0004
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l002F_063E
	// succ:  l002F_063B l002F_063E
l002F_063B:
	goto l002F_0510
	// succ:  l002F_0510
l002F_063E:
	Mem0[ds:0x3D10:word16] = di
	ax = Mem0[ds:0x3D08:word16]
	Mem0[ds:0x3D12:word16] = ax
	ax = Mem0[ds:0x3D00:word16]
	Mem0[ds:0x3D14:word16] = ax
	cx = Mem0[ds:0x3D02:word16]
	Mem0[ds:0x3D16:word16] = cx
	cx = Mem0[ds:0x3D04:word16]
	Mem0[ds:0x3D18:word16] = cx
	Mem0[ds:0x3D1A:word16] = ax
	ax = Mem0[ds:0x3D06:word16]
	Mem0[ds:0x3D1C:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x3D1E:word16] = ax
	Mem0[ds:0x3D20:word16] = ax
	ax = Mem0[ds:0x3D02:word16]
	Mem0[ds:0x3D22:word16] = ax
	ax = Mem0[ds:0x3D04:word16]
	Mem0[ds:0x3D24:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0078
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l002F_0699
	// succ:  l002F_0696 l002F_0699
l002F_0696:
	goto l002F_0510
	// succ:  l002F_0510
l002F_0699:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	CreatePatternBrush(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x41DE:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_06A9
	// succ:  l002F_06A6 l002F_06A9
l002F_06A6:
	goto l002F_0522
	// succ:  l002F_0522
l002F_06A9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0079
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l002F_06C7
	// succ:  l002F_06C4 l002F_06C7
l002F_06C4:
	goto l002F_0510
	// succ:  l002F_0510
l002F_06C7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	CreatePatternBrush(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x4EAA:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_06D7
	// succ:  l002F_06D4 l002F_06D7
l002F_06D4:
	goto l002F_0522
	// succ:  l002F_0522
l002F_06D7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x007A
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l002F_06F5
	// succ:  l002F_06F2 l002F_06F5
l002F_06F2:
	goto l002F_0510
	// succ:  l002F_0510
l002F_06F5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	CreatePatternBrush(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x495C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_0705
	// succ:  l002F_0702 l002F_0705
l002F_0702:
	goto l002F_0522
	// succ:  l002F_0522
l002F_0705:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x007B
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l002F_0723
	// succ:  l002F_0720 l002F_0723
l002F_0720:
	goto l002F_0510
	// succ:  l002F_0510
l002F_0723:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	CreatePatternBrush(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x3CF8:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_0733
	// succ:  l002F_0730 l002F_0733
l002F_0730:
	goto l002F_0522
	// succ:  l002F_0522
l002F_0733:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x007C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l002F_0751
	// succ:  l002F_074E l002F_0751
l002F_074E:
	goto l002F_0510
	// succ:  l002F_0510
l002F_0751:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	CreatePatternBrush(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x4EA2:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_0761
	// succ:  l002F_075E l002F_0761
l002F_075E:
	goto l002F_0522
	// succ:  l002F_0522
l002F_0761:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x007D
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l002F_077F
	// succ:  l002F_077C l002F_077F
l002F_077C:
	goto l002F_0510
	// succ:  l002F_0510
l002F_077F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	CreatePatternBrush(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x4EA0:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_078F
	// succ:  l002F_078C l002F_078F
l002F_078C:
	goto l002F_0522
	// succ:  l002F_0522
l002F_078F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = 0x0001
	di = 0x4E2A
	// succ:  l002F_079D
l002F_079D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x00D1
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l002F_07B9
	// succ:  l002F_07B6 l002F_07B9
l002F_07B6:
	goto l002F_0510
	// succ:  l002F_0510
l002F_07B9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	CreatePatternBrush(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_07C9
	// succ:  l002F_07C6 l002F_07C9
l002F_07C6:
	goto l002F_0522
	// succ:  l002F_0522
l002F_07C9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x0008:word16]
	di = di + 0x0001
	SZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	Mem0[ds:di - 0x0002:word16] = ax
	v19 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v19
	SZO = cond(v19)
	SCZO = cond(di - 0x4E42)
	branch Test(ULT,C) l002F_079D
	// succ:  l002F_07E0 l002F_079D
l002F_07E0:
	ax = Mem0[ds:0x3D00:word16]
	Mem0[ds:0x4E42:word16] = ax
	ax = 0x0080
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateSolidBrush(Mem0[ss:sp:word32])
	sp = sp + 0x0004
	Mem0[ds:0x4E44:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0106
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ds:0x4C6C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_080D
	// succ:  l002F_080A l002F_080D
l002F_080A:
	goto l002F_0510
	// succ:  l002F_0510
l002F_080D:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x3CE2:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_081F
	// succ:  l002F_081C l002F_081F
l002F_081C:
	goto l002F_0510
	// succ:  l002F_0510
l002F_081F:
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x3CE8:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_0832
	// succ:  l002F_082F l002F_0832
l002F_082F:
	goto l002F_0510
	// succ:  l002F_0510
l002F_0832:
	ax = 0x00FF
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateSolidBrush(Mem0[ss:sp:word32])
	sp = sp + 0x0004
	Mem0[ds:0x3CE4:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_0847
	// succ:  l002F_0844 l002F_0847
l002F_0844:
	goto l002F_0510
	// succ:  l002F_0510
l002F_0847:
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x00FF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateSolidBrush(Mem0[ss:sp:word32])
	sp = sp + 0x0004
	Mem0[ds:0x3CE6:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_085D
	// succ:  l002F_085A l002F_085D
l002F_085A:
	goto l002F_0510
	// succ:  l002F_0510
l002F_085D:
	ax = 0xFF00
	dx = 0x00FF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateSolidBrush(Mem0[ss:sp:word32])
	sp = sp + 0x0004
	Mem0[ds:0x3CF0:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_0874
	// succ:  l002F_0871 l002F_0874
l002F_0871:
	goto l002F_0510
	// succ:  l002F_0510
l002F_0874:
	ax = 0xFF00
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateSolidBrush(Mem0[ss:sp:word32])
	sp = sp + 0x0004
	Mem0[ds:0x3CEA:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_088A
	// succ:  l002F_0887 l002F_088A
l002F_0887:
	goto l002F_0510
	// succ:  l002F_0510
l002F_088A:
	ax = 0xFFFF
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateSolidBrush(Mem0[ss:sp:word32])
	sp = sp + 0x0004
	Mem0[ds:0x3CEC:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_08A0
	// succ:  l002F_089D l002F_08A0
l002F_089D:
	goto l002F_0510
	// succ:  l002F_0510
l002F_08A0:
	ax = 0x00FF
	dx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateSolidBrush(Mem0[ss:sp:word32])
	sp = sp + 0x0004
	Mem0[ds:0x3CEE:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_08B6
	// succ:  l002F_08B3 l002F_08B6
l002F_08B3:
	goto l002F_0510
	// succ:  l002F_0510
l002F_08B6:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l002F_08D8
	// succ:  l002F_08BD l002F_08D8
l002F_08BD:
	ax = 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetSysColor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_08C6
l002F_08C6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateSolidBrush(Mem0[ss:sp:word32])
	sp = sp + 0x0004
	Mem0[ds:0x3CF2:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_08E0
	// succ:  l002F_08D4 l002F_08E0
l002F_08D4:
	goto l002F_0510
	// succ:  l002F_0510
l002F_08D8:
	ax = 0xFFFF
	dx = 0x00FF
	goto l002F_08C6
	// succ:  l002F_08C6
l002F_08E0:
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetSysColor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateSolidBrush(Mem0[ss:sp:word32])
	sp = sp + 0x0004
	Mem0[ds:0x3CF4:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_08FA
	// succ:  l002F_08F7 l002F_08FA
l002F_08F7:
	goto l002F_0510
	// succ:  l002F_0510
l002F_08FA:
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00FF
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreatePen(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	Mem0[ds:0x4916:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_0917
	// succ:  l002F_0914 l002F_0917
l002F_0914:
	goto l002F_0510
	// succ:  l002F_0510
l002F_0917:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x7F00
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LoadCursor(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ds:0x3D72:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x7F03
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LoadCursor(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ds:0x3D74:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x7F02
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LoadCursor(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ds:0x3D76:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x7F80
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadCursor(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ds:0x3D78:word16] = ax
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x4C66:word16] = ax
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x4C68:word16] = ax
	ax = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x4C6A:word16] = ax
	di = 0x0001
	si = 0x4C72
	// succ:  l002F_0988
l002F_0988:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = di + 0x0012
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ds:si:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_09A1
	// succ:  l002F_099E l002F_09A1
l002F_099E:
	goto l002F_0510
	// succ:  l002F_0510
l002F_09A1:
	di = di + 0x0001
	SZO = cond(di)
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x4CBA)
	branch Test(ULT,C) l002F_0988
	// succ:  l002F_09AA l002F_0988
l002F_09AA:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetSystemMetrics(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x4124:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetSystemMetrics(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x4126:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l002F_09D2
	// succ:  l002F_09CF l002F_09D2
l002F_09CF:
	goto l002F_0510
	// succ:  l002F_0510
l002F_09D2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x4CC2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetTextMetrics(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = Mem0[ds:0x4CCC:word16]
	Mem0[ds:0x4132:word16] = ax
	ax = Mem0[ds:0x4CCA:word16]
	ax = ax + Mem0[ds:0x4CC2:word16]
	SCZO = cond(ax)
	Mem0[ds:0x4134:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	CreateCompatibleDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x413C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_0A06
	// succ:  l002F_09FA l002F_0A06
l002F_09FA:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l002F_0510
	// succ:  l002F_0510
l002F_0A06:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	CreateCompatibleDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x413E:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_09FA
	// succ:  l002F_0A13 l002F_09FA
l002F_0A13:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateCompatibleBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	Mem0[ds:0x4144:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_09FA
	// succ:  l002F_0A25 l002F_09FA
l002F_0A25:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateCompatibleBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	Mem0[ds:0x4146:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_09FA
	// succ:  l002F_0A37 l002F_09FA
l002F_0A37:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x413C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4144:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ds:0x4148:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_09FA
	// succ:  l002F_0A4B l002F_09FA
l002F_0A4B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x413E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4146:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_09FA
	// succ:  l002F_0A5C l002F_09FA
l002F_0A5C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDeviceCaps(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ds:0x4130:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0058
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDeviceCaps(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ds:0x414A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x005A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDeviceCaps(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ds:0x414C:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	call fn0087_07A8 (retsize: 4;)
	SCZO = cond(Mem0[ds:0x3D82:word16] - 0x0000)
	branch Test(NE,Z) l002F_0A9B
	// succ:  l002F_0A98 l002F_0A9B
l002F_0A98:
	goto l002F_0510
	// succ:  l002F_0510
l002F_0A9B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadMenu(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ds:0x3D26:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_0AB3
	// succ:  l002F_0AB0 l002F_0AB3
l002F_0AB0:
	goto l002F_0510
	// succ:  l002F_0510
l002F_0AB3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x00E2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadMenu(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ds:0x4EB0:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_0ACB
	// succ:  l002F_0AC8 l002F_0ACB
l002F_0AC8:
	goto l002F_0510
	// succ:  l002F_0510
l002F_0ACB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x00DC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadMenu(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ds:0x4D8A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_0AE3
	// succ:  l002F_0AE0 l002F_0AE3
l002F_0AE0:
	goto l002F_0510
	// succ:  l002F_0510
l002F_0AE3:
	ax = 0x0001
	// succ:  l002F_0AE6
l002F_0AE6:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_04CA_exit
fn002F_04CA_exit:


// fn002F_0AF0
// Return size: 4
void fn002F_0AF0()
fn002F_0AF0_entry:
	// succ:  l002F_0AF0
l002F_0AF0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	si = 0x3D02
	di = Mem0[ss:bp - 0x0004:word16]
	// succ:  l002F_0B0A
l002F_0B0A:
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0B16
	// succ:  l002F_0B0F l002F_0B16
l002F_0B0F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0B16
l002F_0B16:
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x3D12)
	branch Test(ULT,C) l002F_0B0A
	// succ:  l002F_0B1E l002F_0B0A
l002F_0B1E:
	si = 0x4E2A
	di = Mem0[ss:bp - 0x0004:word16]
	// succ:  l002F_0B24
l002F_0B24:
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0B30
	// succ:  l002F_0B29 l002F_0B30
l002F_0B29:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0B30
l002F_0B30:
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x4E42)
	branch Test(ULT,C) l002F_0B24
	// succ:  l002F_0B38 l002F_0B24
l002F_0B38:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4E44:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(Mem0[ds:0x3CE2:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0B51
	// succ:  l002F_0B48 l002F_0B51
l002F_0B48:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CE2:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0B51
l002F_0B51:
	SCZO = cond(Mem0[ds:0x3CE8:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0B61
	// succ:  l002F_0B58 l002F_0B61
l002F_0B58:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CE8:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0B61
l002F_0B61:
	SCZO = cond(Mem0[ds:0x3CE4:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0B71
	// succ:  l002F_0B68 l002F_0B71
l002F_0B68:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CE4:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0B71
l002F_0B71:
	SCZO = cond(Mem0[ds:0x3CE6:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0B81
	// succ:  l002F_0B78 l002F_0B81
l002F_0B78:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CE6:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0B81
l002F_0B81:
	SCZO = cond(Mem0[ds:0x3CF0:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0B91
	// succ:  l002F_0B88 l002F_0B91
l002F_0B88:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CF0:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0B91
l002F_0B91:
	SCZO = cond(Mem0[ds:0x3CEA:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0BA1
	// succ:  l002F_0B98 l002F_0BA1
l002F_0B98:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CEA:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0BA1
l002F_0BA1:
	SCZO = cond(Mem0[ds:0x3CEC:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0BB1
	// succ:  l002F_0BA8 l002F_0BB1
l002F_0BA8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CEC:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0BB1
l002F_0BB1:
	SCZO = cond(Mem0[ds:0x3CEE:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0BC1
	// succ:  l002F_0BB8 l002F_0BC1
l002F_0BB8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CEE:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0BC1
l002F_0BC1:
	SCZO = cond(Mem0[ds:0x3CF2:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0BD1
	// succ:  l002F_0BC8 l002F_0BD1
l002F_0BC8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CF2:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0BD1
l002F_0BD1:
	SCZO = cond(Mem0[ds:0x3CF4:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0BE1
	// succ:  l002F_0BD8 l002F_0BE1
l002F_0BD8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CF4:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0BE1
l002F_0BE1:
	SCZO = cond(Mem0[ds:0x41DE:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0BF1
	// succ:  l002F_0BE8 l002F_0BF1
l002F_0BE8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x41DE:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0BF1
l002F_0BF1:
	SCZO = cond(Mem0[ds:0x4EAA:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0C01
	// succ:  l002F_0BF8 l002F_0C01
l002F_0BF8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAA:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0C01
l002F_0C01:
	SCZO = cond(Mem0[ds:0x495C:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0C11
	// succ:  l002F_0C08 l002F_0C11
l002F_0C08:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x495C:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0C11
l002F_0C11:
	SCZO = cond(Mem0[ds:0x3CF8:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0C21
	// succ:  l002F_0C18 l002F_0C21
l002F_0C18:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CF8:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0C21
l002F_0C21:
	SCZO = cond(Mem0[ds:0x4EA2:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0C31
	// succ:  l002F_0C28 l002F_0C31
l002F_0C28:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EA2:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0C31
l002F_0C31:
	SCZO = cond(Mem0[ds:0x4EA0:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0C41
	// succ:  l002F_0C38 l002F_0C41
l002F_0C38:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EA0:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0C41
l002F_0C41:
	SCZO = cond(Mem0[ds:0x4C6C:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0C51
	// succ:  l002F_0C48 l002F_0C51
l002F_0C48:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C6C:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0C51
l002F_0C51:
	SCZO = cond(Mem0[ds:0x4916:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0C61
	// succ:  l002F_0C58 l002F_0C61
l002F_0C58:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4916:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0C61
l002F_0C61:
	SCZO = cond(Mem0[ds:0x3D82:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0C71
	// succ:  l002F_0C68 l002F_0C71
l002F_0C68:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D82:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0C71
l002F_0C71:
	si = 0x4C70
	di = Mem0[ss:bp - 0x0004:word16]
	// succ:  l002F_0C77
l002F_0C77:
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0C83
	// succ:  l002F_0C7C l002F_0C83
l002F_0C7C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0C83
l002F_0C83:
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x4CBA)
	branch Test(ULT,C) l002F_0C77
	// succ:  l002F_0C8B l002F_0C77
l002F_0C8B:
	SCZO = cond(Mem0[ds:0x413C:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0C9B
	// succ:  l002F_0C92 l002F_0C9B
l002F_0C92:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x413C:word16]
	DeleteDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0C9B
l002F_0C9B:
	SCZO = cond(Mem0[ds:0x413E:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0CAB
	// succ:  l002F_0CA2 l002F_0CAB
l002F_0CA2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x413E:word16]
	DeleteDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0CAB
l002F_0CAB:
	SCZO = cond(Mem0[ds:0x4144:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0CBB
	// succ:  l002F_0CB2 l002F_0CBB
l002F_0CB2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4144:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0CBB
l002F_0CBB:
	SCZO = cond(Mem0[ds:0x4146:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0CCB
	// succ:  l002F_0CC2 l002F_0CCB
l002F_0CC2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4146:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0CCB
l002F_0CCB:
	si = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(Mem0[ds:0x4CC0:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0CE0
	// succ:  l002F_0CD5 l002F_0CE0
l002F_0CD5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	GetMenu(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	// succ:  l002F_0CE0
l002F_0CE0:
	SCZO = cond(Mem0[ds:0x4EB0:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0CF6
	// succ:  l002F_0CE7 l002F_0CF6
l002F_0CE7:
	SCZO = cond(Mem0[ds:0x4EB0:word16] - si)
	branch Test(EQ,Z) l002F_0CF6
	// succ:  l002F_0CED l002F_0CF6
l002F_0CED:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB0:word16]
	DestroyMenu(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0CF6
l002F_0CF6:
	SCZO = cond(Mem0[ds:0x4D8A:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0D0C
	// succ:  l002F_0CFD l002F_0D0C
l002F_0CFD:
	SCZO = cond(Mem0[ds:0x4D8A:word16] - si)
	branch Test(EQ,Z) l002F_0D0C
	// succ:  l002F_0D03 l002F_0D0C
l002F_0D03:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D8A:word16]
	DestroyMenu(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0D0C
l002F_0D0C:
	SCZO = cond(Mem0[ds:0x3D26:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0D22
	// succ:  l002F_0D13 l002F_0D22
l002F_0D13:
	SCZO = cond(si - Mem0[ds:0x3D26:word16])
	branch Test(EQ,Z) l002F_0D22
	// succ:  l002F_0D19 l002F_0D22
l002F_0D19:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D26:word16]
	DestroyMenu(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0D22
l002F_0D22:
	SCZO = cond(Mem0[ds:0x4DEC:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0D32
	// succ:  l002F_0D29 l002F_0D32
l002F_0D29:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEC:word16]
	DeleteMetaFile(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0D32
l002F_0D32:
	SCZO = cond(Mem0[ds:0x4E46:word16] - 0x0000)
	branch Test(EQ,Z) l002F_0D42
	// succ:  l002F_0D39 l002F_0D42
l002F_0D39:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4E46:word16]
	DeleteMetaFile(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_0D42
l002F_0D42:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_0AF0_exit
fn002F_0AF0_exit:


// fn002F_0D4C
// Return size: 4
void fn002F_0D4C()
fn002F_0D4C_entry:
	// succ:  l002F_0D4C
l002F_0D4C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x00E2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x4680
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4128:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x412A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	SCZO = cond(Mem0[ds:0x4D88:word16] - 0x0000)
	branch Test(NE,Z) l002F_0DAC
	// succ:  l002F_0D90 l002F_0DAC
l002F_0D90:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x013C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	ax = ax - ax
	SCZO = cond(ax)
	goto l002F_0DAF
	// succ:  l002F_0DAF
l002F_0DAC:
	ax = 0x0001
	// succ:  l002F_0DAF
l002F_0DAF:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_0D4C_exit
fn002F_0D4C_exit:


// fn002F_0DBA
// Return size: 4
void fn002F_0DBA()
fn002F_0DBA_entry:
	// succ:  l002F_0DBA
l002F_0DBA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x00DC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x4280
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4128:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x412A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	SCZO = cond(Mem0[ds:0x3D7A:word16] - 0x0000)
	branch Test(NE,Z) l002F_0E00
	// succ:  l002F_0DFB l002F_0E00
l002F_0DFB:
	ax = ax - ax
	SCZO = cond(ax)
	goto l002F_0E03
	// succ:  l002F_0E03
l002F_0E00:
	ax = 0x0001
	// succ:  l002F_0E03
l002F_0E03:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_0DBA_exit
fn002F_0DBA_exit:


// CALLOBJECTDLGPROC
// Return size: 4
void CALLOBJECTDLGPROC()
CALLOBJECTDLGPROC_entry:
	// succ:  l002F_0E0C
l002F_0E0C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0014
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000C:word16]
	ax = si
	SCZO = cond(ax - 0x0007)
	branch Test(NE,Z) l002F_0E28
	// succ:  l002F_0E25 l002F_0E28
l002F_0E25:
	goto l002F_1094
	// succ:  l002F_1094
l002F_0E28:
	branch Test(UGT,CZ) l002F_0E3E
	// succ:  l002F_0E2A l002F_0E3E
l002F_0E2A:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l002F_0E5A
	// succ:  l002F_0E2D l002F_0E5A
l002F_0E2D:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l002F_0E33
	// succ:  l002F_0E30 l002F_0E33
l002F_0E30:
	goto l002F_0F46
	// succ:  l002F_0F46
l002F_0E33:
	ax = ax - 0x0003
	SCZO = cond(ax)
	branch Test(NE,Z) l002F_0E3B
	// succ:  l002F_0E38 l002F_0E3B
l002F_0E38:
	goto l002F_0FC2
	// succ:  l002F_0FC2
l002F_0E3B:
	goto l002F_111E
	// succ:  l002F_111E
l002F_0E3E:
	ax = ax - 0x000F
	SCZO = cond(ax)
	branch Test(NE,Z) l002F_0E46
	// succ:  l002F_0E43 l002F_0E46
l002F_0E43:
	goto l002F_10A8
	// succ:  l002F_10A8
l002F_0E46:
	ax = ax - 0x000A
	SCZO = cond(ax)
	branch Test(NE,Z) l002F_0E4E
	// succ:  l002F_0E4B l002F_0E4E
l002F_0E4B:
	goto l002F_10B2
	// succ:  l002F_10B2
l002F_0E4E:
	ax = ax - 0x00F8
	SCZO = cond(ax)
	branch Test(NE,Z) l002F_0E56
	// succ:  l002F_0E53 l002F_0E56
l002F_0E53:
	goto l002F_10C6
	// succ:  l002F_10C6
l002F_0E56:
	goto l002F_111E
	// succ:  l002F_111E
l002F_0E5A:
	ax = 0x1168
	dx = 0x002F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	ax = 0x0126
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x114D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	dx = 0x5000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowLong(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ds:0x4C5C:word16] = ax
	Mem0[ds:0x4C5E:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0012:word16] = si
	Mem0[ss:bp - 0x0010:word16] = cx
	SetWindowLong(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	ax = 0x0126
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x113C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x5000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	bx = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	si = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	si = si - si
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	SetWindowLong(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	ax = 0x0126
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x115D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x5000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	SetWindowLong(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	goto l002F_1119
	// succ:  l002F_1119
l002F_0F46:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowLong(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5C:word16]
	SetWindowLong(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5C:word16]
	SetWindowLong(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5C:word16]
	SetWindowLong(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	FreeProcInstance(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	goto l002F_1119
	// succ:  l002F_1119
l002F_0FC2:
	di = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = 0xFFBA
	dx_ax = Mem0[ds:0x4132:word16] *u ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	Mem0[ss:bp - 0x0014:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	ax = Mem0[ds:0x4134:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax - Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0014
	dx_ax = Mem0[ds:0x4132:word16] *u ax
	SCZO = cond(dx_ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4134:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveWindow(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0019
	dx_ax = Mem0[ds:0x4132:word16] *u ax
	SCZO = cond(dx_ax)
	ax = ax + si
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4134:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax - Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0014
	dx_ax = Mem0[ds:0x4132:word16] *u ax
	SCZO = cond(dx_ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4134:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveWindow(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0032
	dx_ax = Mem0[ds:0x4132:word16] *u ax
	SCZO = cond(dx_ax)
	si = si + ax
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x4134:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax - Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0014
	dx_ax = Mem0[ds:0x4132:word16] *u ax
	SCZO = cond(dx_ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4134:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveWindow(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	goto l002F_1119
	// succ:  l002F_1119
l002F_1094:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l002F_1119
	// succ:  l002F_1119
l002F_10A8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	call fn002F_1328 (retsize: 2;)
	sp = sp + 0x0002
	goto l002F_1119
	// succ:  l002F_1119
l002F_10B2:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0003)
	branch Test(NE,Z) l002F_111E
	// succ:  l002F_10B8 l002F_111E
l002F_10B8:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	dx = dx - dx
	SCZO = cond(dx)
	goto l002F_1130
	// succ:  l002F_1130
l002F_10C6:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l002F_10D4
	// succ:  l002F_10CC l002F_10D4
l002F_10CC:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l002F_10FC
	// succ:  l002F_10CF l002F_10FC
l002F_10CF:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l002F_110A
	// succ:  l002F_10D2 l002F_110A
l002F_10D2:
	goto l002F_1119
	// succ:  l002F_1119
l002F_10D4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x0111
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0075
	// succ:  l002F_10DF
l002F_10DF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	PostMessage(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	PostMessage(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	goto l002F_1119
	// succ:  l002F_1119
l002F_10FC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x0111
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0074
	goto l002F_10DF
	// succ:  l002F_10DF
l002F_110A:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0109
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1DBE (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l002F_1119
l002F_1119:
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (int32) ax
	goto l002F_1130
	// succ:  l002F_1130
l002F_111E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	DefWindowProc(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l002F_1130
l002F_1130:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  CALLOBJECTDLGPROC_exit
CALLOBJECTDLGPROC_exit:


// ZOOMWNDPROC
// Return size: 4
void ZOOMWNDPROC()
ZOOMWNDPROC_entry:
	// succ:  l002F_1168
l002F_1168:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0100)
	branch Test(EQ,Z) l002F_1181
	// succ:  l002F_117E l002F_1181
l002F_117E:
	goto l002F_1262
	// succ:  l002F_1262
l002F_1181:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFF8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = ax
	ax = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax - 0x001B)
	branch Test(NE,Z) l002F_119B
	// succ:  l002F_1198 l002F_119B
l002F_1198:
	goto l002F_1256
	// succ:  l002F_1256
l002F_119B:
	branch Test(ULE,CZ) l002F_11A0
	// succ:  l002F_119D l002F_11A0
l002F_119D:
	goto l002F_1301
	// succ:  l002F_1301
l002F_11A0:
	al = al - 0x09
	SCZO = cond(al)
	branch Test(EQ,Z) l002F_11AE
	// succ:  l002F_11A4 l002F_11AE
l002F_11A4:
	al = al - 0x04
	SCZO = cond(al)
	branch Test(NE,Z) l002F_11AB
	// succ:  l002F_11A8 l002F_11AB
l002F_11A8:
	goto l002F_123A
	// succ:  l002F_123A
l002F_11AB:
	goto l002F_1301
	// succ:  l002F_1301
l002F_11AE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFF4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	ax = ax + 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0004)
	branch Test(NE,Z) l002F_1236
	// succ:  l002F_11BE l002F_1236
l002F_11BE:
	cx = 0x0001
	// succ:  l002F_11C1
l002F_11C1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x000A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFF0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowLong(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0008:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFF0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	v17 = Mem0[ss:bp - 0x0008:byte] & 0xFE
	Mem0[ss:bp - 0x0008:byte] = v17
	SZO = cond(Mem0[ss:bp - 0x0008:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	SetWindowLong(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	ax = 0xFFF0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowLong(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0008:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	ax = 0xFFF0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0008:word16]
	al = al | 0x01
	SZO = cond(al)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowLong(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l002F_1301
	// succ:  l002F_1301
l002F_1236:
	cx = ax
	goto l002F_11C1
	// succ:  l002F_11C1
l002F_123A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0111
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFF4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	// succ:  l002F_124E
l002F_124E:
	PostMessage(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	goto l002F_1301
	// succ:  l002F_1301
l002F_1256:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l002F_124E
	// succ:  l002F_124E
l002F_1262:
	si = Mem0[ss:bp + 0x000E:word16]
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0104)
	branch Test(EQ,Z) l002F_126F
	// succ:  l002F_126C l002F_126F
l002F_126C:
	goto l002F_1301
	// succ:  l002F_1301
l002F_126F:
	di = di - di
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFF8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax - 0x0073)
	branch Test(EQ,Z) l002F_12B4
	// succ:  l002F_1286 l002F_12B4
l002F_1286:
	branch Test(UGT,CZ) l002F_12BE
	// succ:  l002F_1288 l002F_12BE
l002F_1288:
	SCZO = cond(al - 0x53)
	branch Test(EQ,Z) l002F_12B4
	// succ:  l002F_128C l002F_12B4
l002F_128C:
	branch Test(UGT,CZ) l002F_1298
	// succ:  l002F_128E l002F_1298
l002F_128E:
	al = al - 0x4C
	SCZO = cond(al)
	// succ:  l002F_1290
l002F_1290:
	branch Test(EQ,Z) l002F_129C
	// succ:  l002F_1292 l002F_129C
l002F_1292:
	al = al - 0x03
	SCZO = cond(al)
	branch Test(EQ,Z) l002F_12A8
	// succ:  l002F_1296 l002F_12A8
l002F_1296:
	goto l002F_12BE
	// succ:  l002F_12BE
l002F_1298:
	al = al - 0x6C
	SCZO = cond(al)
	goto l002F_1290
	// succ:  l002F_1290
l002F_129C:
	SZO = cond(Mem0[ss:bp + 0x0008:word16] & 0x2000)
	C = false
	branch Test(EQ,Z) l002F_12BE
	// succ:  l002F_12A3 l002F_12BE
l002F_12A3:
	di = 0x0002
	goto l002F_12BE
	// succ:  l002F_12BE
l002F_12A8:
	SZO = cond(Mem0[ss:bp + 0x0008:word16] & 0x2000)
	C = false
	branch Test(EQ,Z) l002F_12BE
	// succ:  l002F_12AF l002F_12BE
l002F_12AF:
	di = 0x0003
	goto l002F_12BE
	// succ:  l002F_12BE
l002F_12B4:
	SZO = cond(Mem0[ss:bp + 0x0008:word16] & 0x2000)
	C = false
	branch Test(EQ,Z) l002F_12BE
	// succ:  l002F_12BB l002F_12BE
l002F_12BB:
	di = 0x0001
	// succ:  l002F_12BE
l002F_12BE:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l002F_1301
	// succ:  l002F_12C2 l002F_1301
l002F_12C2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cx = 0x0403
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	Mem0[ss:bp - 0x000E:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = 0x0111
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	PostMessage(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0403
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	// succ:  l002F_1301
l002F_1301:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	CallWindowProc(Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000E
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  ZOOMWNDPROC_exit
ZOOMWNDPROC_exit:


// fn002F_1328
// Return size: 4
void fn002F_1328()
fn002F_1328_entry:
	// succ:  l002F_1328
l002F_1328:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x00D4
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BeginPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0026:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_1357
	// succ:  l002F_1354 l002F_1357
l002F_1354:
	goto l002F_1863
	// succ:  l002F_1863
l002F_1357:
	cl = Mem0[ds:0x4EB7:byte]
	cl = cl & 0x04
	SZO = cond(cl)
	C = false
	SCZO = cond(cl - 0x04)
	branch Test(EQ,Z) l002F_1366
	// succ:  l002F_1363 l002F_1366
l002F_1363:
	goto l002F_1418
	// succ:  l002F_1418
l002F_1366:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	cx = 0x000A
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0024:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_1380
	// succ:  l002F_137D l002F_1380
l002F_137D:
	goto l002F_1851
	// succ:  l002F_1851
l002F_1380:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = bp - 0x0038
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	GetObject(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = bp - 0x0040
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = Mem0[ss:bp - 0x003A:word16]
	ax = ax - 0x0150
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x002A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	cx = Mem0[ss:bp - 0x003C:word16]
	cx = cx - Mem0[ss:bp - 0x0036:word16]
	SCZO = cond(cx)
	cx = cx >> 0x0001
	SCZO = cond(cx)
	Mem0[ss:bp - 0x0028:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0024:word16]
	call fn01BF_0E3E (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0024:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x000B
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0024:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_13E0
	// succ:  l002F_13DD l002F_13E0
l002F_13DD:
	goto l002F_1851
	// succ:  l002F_1851
l002F_13E0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0038
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetObject(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	ax = Mem0[ss:bp - 0x003C:word16]
	ax = ax - Mem0[ss:bp - 0x0036:word16]
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0028:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x002A:word16]
	ax = ax + 0x00E6
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0024:word16]
	call fn01BF_0E3E (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0024:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l002F_1851
	// succ:  l002F_1851
l002F_1418:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0026
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDeviceCaps(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	SZO = cond(ah & 0x01)
	C = false
	branch Test(NE,Z) l002F_142A
	// succ:  l002F_1427 l002F_142A
l002F_1427:
	goto l002F_16B0
	// succ:  l002F_16B0
l002F_142A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	ax = 0x0068
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDeviceCaps(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	SCZO = cond(ax - 0x0040)
	branch Test(GE,SO) l002F_143E
	// succ:  l002F_143B l002F_143E
l002F_143B:
	goto l002F_16B0
	// succ:  l002F_16B0
l002F_143E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = bp - 0x00BA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0048
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x00BE:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_1463
	// succ:  l002F_1460 l002F_1463
l002F_1460:
	goto l002F_1851
	// succ:  l002F_1851
l002F_1463:
	bx = ax
	Mem0[ds:bx:word16] = 0x0300
	Mem0[ds:bx + 0x0002:word16] = 0x0010
	Mem0[ss:bp - 0x0044:word16] = 0x0000
	// succ:  l002F_1473
l002F_1473:
	ax = Mem0[0x002F:0x1878:word16]
	dx = Mem0[0x002F:0x187A:word16]
	si = Mem0[ss:bp - 0x0044:word16]
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	bx = Mem0[ss:bp - 0x00BE:word16]
	Mem0[ds:bx + 0x0004 + si:word16] = ax
	Mem0[ds:bx + 0x0006 + si:word16] = dx
	v21 = Mem0[ss:bp - 0x0044:word16] + 0x0001
	Mem0[ss:bp - 0x0044:word16] = v21
	SZO = cond(v21)
	SCZO = cond(Mem0[ss:bp - 0x0044:word16] - 0x0010)
	branch Test(LT,SO) l002F_1473
	// succ:  l002F_1496 l002F_1473
l002F_1496:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x00BE:word16]
	CreatePalette(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0028:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_14AA
	// succ:  l002F_14A7 l002F_14AA
l002F_14A7:
	goto l002F_16A4
	// succ:  l002F_16A4
l002F_14AA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SelectPalette(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0040:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_14C0
	// succ:  l002F_14BD l002F_14C0
l002F_14BD:
	goto l002F_169C
	// succ:  l002F_169C
l002F_14C0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	RealizePalette(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x000A
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FindResource(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000A
	Mem0[ss:bp - 0x00BC:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_14E8
	// succ:  l002F_14E5 l002F_14E8
l002F_14E5:
	goto l002F_168E
	// succ:  l002F_168E
l002F_14E8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadResource(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x00B2:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_14FD
	// succ:  l002F_14FA l002F_14FD
l002F_14FA:
	goto l002F_168E
	// succ:  l002F_168E
l002F_14FD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LockResource(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0038:word16] = ax
	Mem0[ss:bp - 0x0036:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l002F_1510
	// succ:  l002F_150D l002F_1510
l002F_150D:
	goto l002F_1685
	// succ:  l002F_1685
l002F_1510:
	dx = Mem0[ss:bp - 0x0036:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	di = bp - 0x00B0
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ds = dx
	cx = 0x0014
	// succ:  l002F_1521
l002F_1521:
	branch cx == 0x0000 l002F_1523
	// succ:  l002F_1521_1 l002F_1523
l002F_1521_1:
	v28 = Mem0[si:word16]
	Mem0[di:word16] = v28
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l002F_1521
	// succ:  l002F_1521
l002F_1523:
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x00B0:word16]
	ax = ax + 0x0040
	SCZO = cond(ax)
	v29 = Mem0[ss:bp - 0x0038:word16] + ax
	Mem0[ss:bp - 0x0038:word16] = v29
	SCZO = cond(v29)
	ax = bp - 0x0088
	Mem0[ss:bp - 0x002A:word16] = ax
	Mem0[ss:bp - 0x0044:word16] = 0x0000
	// succ:  l002F_153A
l002F_153A:
	ax = Mem0[ss:bp - 0x0044:word16]
	bx = Mem0[ss:bp - 0x002A:word16]
	v30 = Mem0[ss:bp - 0x002A:word16] + 0x0002
	Mem0[ss:bp - 0x002A:word16] = v30
	SCZO = cond(v30)
	Mem0[ds:bx:word16] = ax
	v31 = Mem0[ss:bp - 0x0044:word16] + 0x0001
	Mem0[ss:bp - 0x0044:word16] = v31
	SZO = cond(v31)
	SCZO = cond(Mem0[ss:bp - 0x0044:word16] - 0x0010)
	branch Test(LT,SO) l002F_153A
	// succ:  l002F_154F l002F_153A
l002F_154F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	ax = bp - 0x00B0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0036:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0038:word16]
	ax = bp - 0x00B0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateDIBitmap(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 14:segptr32], Mem0[ss:sp + 10:word32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0014
	Mem0[ss:bp - 0x0024:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_157D
	// succ:  l002F_157A l002F_157D
l002F_157A:
	goto l002F_167C
	// succ:  l002F_167C
l002F_157D:
	ax = Mem0[ss:bp - 0x00B4:word16]
	ax = ax - Mem0[ss:bp - 0x00A8:word16]
	SCZO = cond(ax)
	ax = ax - 0x006A
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0046:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	cx = Mem0[ss:bp - 0x00B6:word16]
	cx = cx - Mem0[ss:bp - 0x00AC:word16]
	SCZO = cond(cx)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	Mem0[ss:bp - 0x0042:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0024:word16]
	call fn01BF_0E3E (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0048:word16] = 0x0000
	// succ:  l002F_15AC
l002F_15AC:
	Mem0[ss:bp - 0x0044:word16] = 0x0000
	// succ:  l002F_15B1
l002F_15B1:
	bx = Mem0[ss:bp - 0x0044:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	al = Mem0[0x002F:bx + 0x1878:byte]
	cx = bx
	bx = bx + Mem0[ss:bp - 0x00BE:word16]
	SCZO = cond(bx)
	ah = ah - ah
	SCZO = cond(ah)
	dx_ax = Mem0[ss:bp - 0x0048:word16] *s ax
	SCZO = cond(dx_ax)
	si = 0x0031
	dx_ax = (int32) ax
	dx = dx_ax % si
	ax = dx_ax / si
	SCZO = cond(ax)
	Mem0[ds:bx + 0x0004:byte] = al
	di = cx
	al = Mem0[0x002F:di + 0x1879:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx_ax = Mem0[ss:bp - 0x0048:word16] *s ax
	SCZO = cond(dx_ax)
	dx_ax = (int32) ax
	dx = dx_ax % si
	ax = dx_ax / si
	SCZO = cond(ax)
	Mem0[ds:bx + 0x0005:byte] = al
	al = Mem0[0x002F:di + 0x187A:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx_ax = Mem0[ss:bp - 0x0048:word16] *s ax
	SCZO = cond(dx_ax)
	dx_ax = (int32) ax
	dx = dx_ax % si
	ax = dx_ax / si
	SCZO = cond(ax)
	Mem0[ds:bx + 0x0006:byte] = al
	v33 = Mem0[ss:bp - 0x0044:word16] + 0x0001
	Mem0[ss:bp - 0x0044:word16] = v33
	SZO = cond(v33)
	SCZO = cond(Mem0[ss:bp - 0x0044:word16] - 0x0010)
	branch Test(LT,SO) l002F_15B1
	// succ:  l002F_15FC l002F_15B1
l002F_15FC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0028:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x00BE:word16]
	ax = ax + 0x0004
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	AnimatePalette(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000A
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01D7_1CB4 (retsize: 4;)
	sp = sp + 0x0002
	v34 = Mem0[ss:bp - 0x0048:word16] + 0x0001
	Mem0[ss:bp - 0x0048:word16] = v34
	SZO = cond(v34)
	SCZO = cond(Mem0[ss:bp - 0x0048:word16] - 0x0032)
	branch Test(LT,SO) l002F_15AC
	// succ:  l002F_1626 l002F_15AC
l002F_1626:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0024:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x000B
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0024:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_167C
	// succ:  l002F_1644 l002F_167C
l002F_1644:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetObject(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	ax = Mem0[ss:bp - 0x00B6:word16]
	ax = ax - Mem0[ss:bp - 0x00CA:word16]
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0042:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0046:word16]
	ax = ax + 0x00E6
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0024:word16]
	call fn01BF_0E3E (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0024:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_167C
l002F_167C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x00B2:word16]
	GlobalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_1685
l002F_1685:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x00B2:word16]
	FreeResource(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_168E
l002F_168E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0040:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SelectPalette(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	// succ:  l002F_169C
l002F_169C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0028:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_16A4
l002F_16A4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x00BE:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	goto l002F_1851
	// succ:  l002F_1851
l002F_16B0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	call fn00F7_1E92 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0046:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x00AE:word16] = ax
	Mem0[ss:bp - 0x00B0:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x000A
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x00BE:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_16DF
	// succ:  l002F_16DC l002F_16DF
l002F_16DC:
	goto l002F_1849
	// succ:  l002F_1849
l002F_16DF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0046:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x00CC:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_16F3
	// succ:  l002F_16F0 l002F_16F3
l002F_16F0:
	goto l002F_17F2
	// succ:  l002F_17F2
l002F_16F3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x00BE:word16]
	ax = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0038
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetObject(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = bp - 0x00D4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = Mem0[ss:bp - 0x00D0:word16]
	ax = ax - Mem0[ss:bp - 0x0036:word16]
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x00BC:word16] = ax
	ax = Mem0[ss:bp - 0x00CE:word16]
	ax = ax - Mem0[ss:bp - 0x0034:word16]
	SCZO = cond(ax)
	ax = ax - 0x006A
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x00B2:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x003E:word16] = ax
	Mem0[ss:bp - 0x0040:word16] = ax
	goto l002F_1742
	// succ:  l002F_1742
l002F_173A:
	v25 = Mem0[ss:bp - 0x0040:word16] + 0x0001
	Mem0[ss:bp - 0x0040:word16] = v25
	SCZO = cond(v25)
	v26 = Mem0[ss:bp - 0x003E:word16] + 0x00 + C
	Mem0[ss:bp - 0x003E:word16] = v26
	SCZO = cond(v26)
	// succ:  l002F_1742
l002F_1742:
	SCZO = cond(Mem0[ss:bp - 0x003E:word16] - 0x0000)
	branch Test(LE,SZO) l002F_174B
	// succ:  l002F_1748 l002F_174B
l002F_1748:
	goto l002F_17E6
	// succ:  l002F_17E6
l002F_174B:
	branch Test(LT,SO) l002F_1757
	// succ:  l002F_174D l002F_1757
l002F_174D:
	SCZO = cond(Mem0[ss:bp - 0x0040:word16] - 0x0B52)
	branch Test(ULT,C) l002F_1757
	// succ:  l002F_1754 l002F_1757
l002F_1754:
	goto l002F_17E6
	// succ:  l002F_17E6
l002F_1757:
	ax = Mem0[ss:bp - 0x00B0:word16]
	dx = Mem0[ss:bp - 0x00AE:word16]
	bx = 0x003F
	dx = dx_ax % bx
	ax = dx_ax /u bx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x00BA:word16] = ax
	Mem0[ss:bp - 0x0048:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	ax = Mem0[ss:bp - 0x0048:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	cx = ax
	ax = ax + Mem0[ss:bp - 0x00BC:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x00BA:word16]
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	dx = ax
	ax = ax + Mem0[ss:bp - 0x00B2:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0046:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = 0x0020
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BitBlt(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0014
	v22 = Mem0[ss:bp - 0x00B0:word16] + 0x0349
	Mem0[ss:bp - 0x00B0:word16] = v22
	SCZO = cond(v22)
	v23 = Mem0[ss:bp - 0x00AE:word16] + 0x00 + C
	Mem0[ss:bp - 0x00AE:word16] = v23
	SCZO = cond(v23)
	SCZO = cond(Mem0[ss:bp - 0x00AE:word16] - 0x0000)
	branch Test(NE,Z) l002F_17CC
	// succ:  l002F_17C1 l002F_17CC
l002F_17C1:
	SCZO = cond(Mem0[ss:bp - 0x00B0:word16] - 0x0B52)
	branch Test(UGT,CZ) l002F_17CC
	// succ:  l002F_17C9 l002F_17CC
l002F_17C9:
	goto l002F_173A
	// succ:  l002F_173A
l002F_17CC:
	ax = Mem0[ss:bp - 0x00B0:word16]
	dx = Mem0[ss:bp - 0x00AE:word16]
	ax = ax - 0x0B52
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x00B0:word16] = ax
	Mem0[ss:bp - 0x00AE:word16] = dx
	goto l002F_173A
	// succ:  l002F_173A
l002F_17E6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0046:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x00CC:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l002F_17F2
l002F_17F2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x00BE:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x000B
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0024:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_1849
	// succ:  l002F_1811 l002F_1849
l002F_1811:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0038
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetObject(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	ax = Mem0[ss:bp - 0x00D0:word16]
	ax = ax - Mem0[ss:bp - 0x0036:word16]
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x00BC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x00B2:word16]
	ax = ax + 0x00E6
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0024:word16]
	call fn01BF_0E3E (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0024:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_1849
l002F_1849:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0046:word16]
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l002F_1851
l002F_1851:
	v19 = Mem0[ds:0x4EB7:byte] | 0x04
	Mem0[ds:0x4EB7:byte] = v19
	SZO = cond(Mem0[ds:0x4EB7:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	// succ:  l002F_1863
l002F_1863:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_1328_exit
fn002F_1328_exit:


// fn002F_18B8
// Return size: 4
void fn002F_18B8()
fn002F_18B8_entry:
	// succ:  l002F_18B8
l002F_18B8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x014A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x0048
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BeginPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_18EE
	// succ:  l002F_18EB l002F_18EE
l002F_18EB:
	goto l002F_1B8A
	// succ:  l002F_1B8A
l002F_18EE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0044
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CE2:word16]
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x000C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l002F_194A
	// succ:  l002F_1912 l002F_194A
l002F_1912:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0028
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetObject(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	ax = Mem0[ss:bp - 0x0014:word16]
	ax = ax - Mem0[ss:bp - 0x0024:word16]
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	cx = Mem0[ss:bp - 0x0016:word16]
	cx = cx - Mem0[ss:bp - 0x0026:word16]
	SCZO = cond(cx)
	cx = cx >> 0x0001
	SCZO = cond(cx)
	Mem0[ss:bp - 0x0006:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn01BF_0E3E (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_194A
l002F_194A:
	ax = 0xFFE8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1A66 (retsize: 4;)
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_196A
	// succ:  l002F_1961 l002F_196A
l002F_1961:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l002F_196A
l002F_196A:
	Mem0[ss:bp - 0x000C:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetBkMode(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	ax = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax + 0x0064
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x000A:word16]
	ax = ax + 0x005A
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax + 0x00FA
	SCZO = cond(ax)
	Mem0[ss:bp - 0x014A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	SCZO = cond(Mem0[ds:0x40AE:byte] - 0x00)
	branch Test(NE,Z) l002F_19B5
	// succ:  l002F_19A6 l002F_19B5
l002F_19A6:
	ax = 0x40AE
	di = ax
	si = 0x0169
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v17 = Mem0[si:word16]
	Mem0[di:word16] = v17
	si = si + 0x0002
	di = di + 0x0002
	v18 = Mem0[si:word16]
	Mem0[di:word16] = v18
	si = si + 0x0002
	di = di + 0x0002
	v19 = Mem0[si:word16]
	Mem0[di:word16] = v19
	si = si + 0x0002
	di = di + 0x0002
	v20 = Mem0[si:word16]
	Mem0[di:word16] = v20
	si = si + 0x0002
	di = di + 0x0002
	v21 = Mem0[si:byte]
	Mem0[di:byte] = v21
	si = si + 0x0001
	di = di + 0x0001
	// succ:  l002F_19B5
l002F_19B5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = 0x40AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l002F_19C6
l002F_19C6:
	branch cx == 0x0000 l002F_19C8
	// succ:  l002F_19C6_1 l002F_19C8
l002F_19C6_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l002F_19C6
	// succ:  l002F_19C8 l002F_19C6
l002F_19C8:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	Mem0[ss:bp - 0x000A:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0411
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	DrawText(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	ax = Mem0[ss:bp - 0x014A:word16]
	Mem0[ss:bp - 0x0016:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	cx = 0x40AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	cx = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0011
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	DrawText(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	ax = Mem0[ss:bp - 0x0014:word16]
	Mem0[ss:bp - 0x0018:word16] = ax
	Mem0[ss:bp - 0x0014:word16] = 0x0000
	ax = Mem0[ss:bp - 0x014A:word16]
	Mem0[ss:bp - 0x0016:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	cx = bp - 0x0148
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0226
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	dx = bp - 0x0148
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax - 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0411
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	DrawText(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	ax = Mem0[ss:bp - 0x014A:word16]
	Mem0[ss:bp - 0x0016:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	cx = bp - 0x0148
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	dx = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	dx = 0x0011
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	DrawText(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	ax = Mem0[ss:bp - 0x0014:word16]
	Mem0[ss:bp - 0x0018:word16] = ax
	Mem0[ss:bp - 0x0014:word16] = 0x0000
	ax = Mem0[ss:bp - 0x014A:word16]
	Mem0[ss:bp - 0x0016:word16] = ax
	cx = bp - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_0A00 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	al = Mem0[ss:bp - 0x0012:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0011:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0172
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0148
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_07E6 (retsize: 4;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = bp - 0x0148
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = bp - 0x0148
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l002F_1AAA
l002F_1AAA:
	branch cx == 0x0000 l002F_1AAC
	// succ:  l002F_1AAA_2 l002F_1AAC
l002F_1AAA_2:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l002F_1AAA
	// succ:  l002F_1AAC l002F_1AAA
l002F_1AAC:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0411
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	si = cx
	DrawText(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	ax = Mem0[ss:bp - 0x014A:word16]
	Mem0[ss:bp - 0x0016:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	cx = bp - 0x0148
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0011
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	DrawText(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	ax = Mem0[ss:bp - 0x0014:word16]
	Mem0[ss:bp - 0x0018:word16] = ax
	ax = Mem0[ss:bp - 0x014A:word16]
	Mem0[ss:bp - 0x0016:word16] = ax
	ax = 0xFFEE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0014:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1A66 (retsize: 4;)
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l002F_1B0E
	// succ:  l002F_1B05 l002F_1B0E
l002F_1B05:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l002F_1B0E
l002F_1B0E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = 0x4D8E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l002F_1B1F
l002F_1B1F:
	branch cx == 0x0000 l002F_1B21
	// succ:  l002F_1B1F_1 l002F_1B21
l002F_1B1F_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l002F_1B1F
	// succ:  l002F_1B21 l002F_1B1F
l002F_1B21:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0411
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = cx
	DrawText(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	ax = Mem0[ss:bp - 0x014A:word16]
	Mem0[ss:bp - 0x0016:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = 0x4D8E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0011
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	DrawText(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l002F_1B64
	// succ:  l002F_1B59 l002F_1B64
l002F_1B59:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l002F_1B64
l002F_1B64:
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l002F_1B72
	// succ:  l002F_1B6A l002F_1B72
l002F_1B6A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_1B72
l002F_1B72:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l002F_1B7C
	// succ:  l002F_1B76 l002F_1B7C
l002F_1B76:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_1B7C
l002F_1B7C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x0048
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	// succ:  l002F_1B8A
l002F_1B8A:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_18B8_exit
fn002F_18B8_exit:


// fn002F_1B94
// Return size: 4
void fn002F_1B94()
fn002F_1B94_entry:
	// succ:  l002F_1B94
l002F_1B94:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x014A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x004A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BeginPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l002F_1BC9
	// succ:  l002F_1BC6 l002F_1BC9
l002F_1BC6:
	goto l002F_1D41
	// succ:  l002F_1D41
l002F_1BC9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0046
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CE2:word16]
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x000E
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l002F_1C18
	// succ:  l002F_1BED l002F_1C18
l002F_1BED:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x002A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetObject(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp - 0x0018:word16]
	ax = ax - Mem0[ss:bp - 0x0028:word16]
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn01BF_0E3E (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_1C18
l002F_1C18:
	ax = 0xFFE8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1A66 (retsize: 4;)
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_1C3C
	// succ:  l002F_1C2F l002F_1C3C
l002F_1C2F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x000C:word16] = ax
	goto l002F_1C41
	// succ:  l002F_1C41
l002F_1C3C:
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	// succ:  l002F_1C41
l002F_1C41:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetBkMode(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x40AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l002F_1C5A
l002F_1C5A:
	branch cx == 0x0000 l002F_1C5C
	// succ:  l002F_1C5A_1 l002F_1C5C
l002F_1C5A_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l002F_1C5A
	// succ:  l002F_1C5C l002F_1C5A
l002F_1C5C:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	Mem0[ss:bp - 0x000E:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetTextExtent(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp - 0x0018:word16]
	ax = ax - Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x000A:word16]
	ax = ax + 0x012C
	SCZO = cond(ax)
	cx = Mem0[ds:0x412E:word16]
	cx = cx - 0x0032
	SCZO = cond(cx)
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	ax = ax & dx
	SZO = cond(ax)
	C = false
	ax = ax + cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x40AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	TextOut(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	ax = bp - 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A00 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	al = Mem0[ss:bp - 0x0014:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0013:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x017B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x014A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_07E6 (retsize: 4;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x014A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = bp - 0x014A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l002F_1CD7
l002F_1CD7:
	branch cx == 0x0000 l002F_1CD9
	// succ:  l002F_1CD7_2 l002F_1CD9
l002F_1CD7_2:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l002F_1CD7
	// succ:  l002F_1CD9 l002F_1CD7
l002F_1CD9:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	di = cx
	GetTextExtent(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp - 0x0018:word16]
	ax = ax - Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x000A:word16]
	ax = ax + 0x0140
	SCZO = cond(ax)
	cx = Mem0[ds:0x412E:word16]
	cx = cx - 0x001E
	SCZO = cond(cx)
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	ax = ax & dx
	SZO = cond(ax)
	C = false
	ax = ax + cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x014A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	TextOut(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l002F_1D25
	// succ:  l002F_1D1C l002F_1D25
l002F_1D1C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l002F_1D25
l002F_1D25:
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l002F_1D33
	// succ:  l002F_1D2B l002F_1D33
l002F_1D2B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_1D33
l002F_1D33:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x004A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	// succ:  l002F_1D41
l002F_1D41:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_1B94_exit
fn002F_1B94_exit:


// fn002F_1D4C
// Return size: 4
void fn002F_1D4C()
fn002F_1D4C_entry:
	// succ:  l002F_1D4C
l002F_1D4C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0122
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn00F7_1CD2 (retsize: 4;)
	sp = sp + 0x0004
	si = ax
	Mem0[ss:bp - 0x0123 + si:byte] = 0x5C
	ax = 0x02E2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0123 + si
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	si = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	ax = 0x0199
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_01E0 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_00BC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x2174
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x40AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	WritePrivateProfileString(Mem0[ss:sp + 12:segptr32], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0010
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x2211
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x418E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	WritePrivateProfileString(Mem0[ss:sp + 12:segptr32], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0010
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x2208
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x48C2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	WritePrivateProfileString(Mem0[ss:sp + 12:segptr32], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0010
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C6E:word16]
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x2163
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	WritePrivateProfileString(Mem0[ss:sp + 12:segptr32], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0010
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x00B2:word16]
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x21DA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	WritePrivateProfileString(Mem0[ss:sp + 12:segptr32], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0010
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x00B4:word16]
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x21F4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	WritePrivateProfileString(Mem0[ss:sp + 12:segptr32], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0010
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5A:word16]
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x2226
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	WritePrivateProfileString(Mem0[ss:sp + 12:segptr32], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0010
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x05B2:word16]
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x2232
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	WritePrivateProfileString(Mem0[ss:sp + 12:segptr32], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0010
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dl = Mem0[ds:0x4D23:byte]
	dh = dh - dh
	SCZO = cond(dh)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x21D1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	WritePrivateProfileString(Mem0[ss:sp + 12:segptr32], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0010
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x01CA:word16]
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x221A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	WritePrivateProfileString(Mem0[ss:sp + 12:segptr32], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0010
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x00B6:word16]
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x217F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	WritePrivateProfileString(Mem0[ss:sp + 12:segptr32], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0010
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x009E:word16]
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x21A4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	WritePrivateProfileString(Mem0[ss:sp + 12:segptr32], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0010
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dl = Mem0[ds:0x4D6C:byte]
	dh = dh - dh
	SCZO = cond(dh)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x21C8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	WritePrivateProfileString(Mem0[ss:sp + 12:segptr32], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0010
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = Mem0[ds:0x4D6C:word16]
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x21BB
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	WritePrivateProfileString(Mem0[ss:sp + 12:segptr32], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0010
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dl = Mem0[ds:0x4D6E:byte]
	dh = dh - dh
	SCZO = cond(dh)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x2197
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	WritePrivateProfileString(Mem0[ss:sp + 12:segptr32], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0010
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D6F:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x218D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	WritePrivateProfileString(Mem0[ss:sp + 12:segptr32], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0010
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_1D4C_exit
fn002F_1D4C_exit:


// fn002F_2242
// Return size: 4
void fn002F_2242()
fn002F_2242_entry:
	// succ:  l002F_2242
l002F_2242:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x010A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0009:byte] = 0x00
	ax = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn00F7_1CD2 (retsize: 4;)
	sp = sp + 0x0004
	si = ax
	Mem0[ss:bp - 0x008B + si:byte] = 0x5C
	ax = 0x02E2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x008B + si
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x2174
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0009
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x40AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	GetPrivateProfileString(Mem0[ss:sp + 18:segptr32], Mem0[ss:sp + 14:segptr32], Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0016
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x2211
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0009
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x418E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetPrivateProfileString(Mem0[ss:sp + 18:segptr32], Mem0[ss:sp + 14:segptr32], Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0016
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x2208
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0009
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x48C2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetPrivateProfileString(Mem0[ss:sp + 18:segptr32], Mem0[ss:sp + 14:segptr32], Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0016
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x2163
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C6E:word16]
	ax = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetPrivateProfileInt(Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	Mem0[ds:0x4C6E:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x21DA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetPrivateProfileInt(Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	Mem0[ds:0x00B2:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x21F4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetPrivateProfileInt(Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	Mem0[ds:0x00B4:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x2226
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetPrivateProfileInt(Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	Mem0[ds:0x4C5A:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x2232
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetPrivateProfileInt(Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	Mem0[ds:0x05B2:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x21D1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetPrivateProfileInt(Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	Mem0[ds:0x4D23:byte] = al
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x221A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetPrivateProfileInt(Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	Mem0[ds:0x01CA:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x217F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetPrivateProfileInt(Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	Mem0[ds:0x00B6:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x21A4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetPrivateProfileInt(Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	Mem0[ds:0x009E:word16] = ax
	si = si - si
	SCZO = cond(si)
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x21C8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0008:word16] = si
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = di - di
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetPrivateProfileInt(Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	dx = dx - dx
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	SCZO = cond(ax - 0x0014)
	branch Test(ULT,C) l002F_24F2
	// succ:  l002F_24E3 l002F_24F2
l002F_24E3:
	SCZO = cond(ax - 0x0048)
	branch Test(UGT,CZ) l002F_24F2
	// succ:  l002F_24E8 l002F_24F2
l002F_24E8:
	Mem0[ds:0x4D6C:word16] = ax
	Mem0[ds:0x4D6E:word16] = dx
	goto l002F_24F5
	// succ:  l002F_24F5
l002F_24F2:
	di = 0x0001
	// succ:  l002F_24F5
l002F_24F5:
	si = Mem0[ss:bp - 0x0006:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l002F_2550
	// succ:  l002F_24FC l002F_2550
l002F_24FC:
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x21BB
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetPrivateProfileInt(Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	dx = dx - dx
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	SCZO = cond(ax - 0x0014)
	branch Test(ULT,C) l002F_254A
	// succ:  l002F_2532 l002F_254A
l002F_2532:
	SCZO = cond(ax - 0x0048)
	branch Test(UGT,CZ) l002F_254A
	// succ:  l002F_2537 l002F_254A
l002F_2537:
	dh = dl
	dl = ah
	ah = al
	al = al - al
	SCZO = cond(al)
	v21 = Mem0[ds:0x4D6C:word16] | ax
	Mem0[ds:0x4D6C:word16] = v21
	SZO = cond(Mem0[ds:0x4D6C:word16])
	C = false
	v22 = Mem0[ds:0x4D6E:word16] | dx
	Mem0[ds:0x4D6E:word16] = v22
	SZO = cond(Mem0[ds:0x4D6E:word16])
	C = false
	goto l002F_254D
	// succ:  l002F_254D
l002F_254A:
	di = 0x0001
	// succ:  l002F_254D
l002F_254D:
	si = si + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(si)
	// succ:  l002F_2550
l002F_2550:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l002F_259E
	// succ:  l002F_2554 l002F_259E
l002F_2554:
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x2197
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetPrivateProfileInt(Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	dx = dx - dx
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	SCZO = cond(ax - 0x0014)
	branch Test(ULT,C) l002F_2598
	// succ:  l002F_258A l002F_2598
l002F_258A:
	SCZO = cond(ax - 0x0048)
	branch Test(UGT,CZ) l002F_2598
	// succ:  l002F_258F l002F_2598
l002F_258F:
	cx = cx - cx
	SCZO = cond(cx)
	v23 = Mem0[ds:0x4D6E:word16] | ax
	Mem0[ds:0x4D6E:word16] = v23
	SZO = cond(Mem0[ds:0x4D6E:word16])
	C = false
	goto l002F_259B
	// succ:  l002F_259B
l002F_2598:
	di = 0x0001
	// succ:  l002F_259B
l002F_259B:
	si = si + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(si)
	// succ:  l002F_259E
l002F_259E:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l002F_25F0
	// succ:  l002F_25A2 l002F_25F0
l002F_25A2:
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x218D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D3A (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetPrivateProfileInt(Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	dx = dx - dx
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	SCZO = cond(ax - 0x0014)
	branch Test(ULT,C) l002F_25EA
	// succ:  l002F_25D8 l002F_25EA
l002F_25D8:
	SCZO = cond(ax - 0x0048)
	branch Test(UGT,CZ) l002F_25EA
	// succ:  l002F_25DD l002F_25EA
l002F_25DD:
	ah = Mem0[ss:bp - 0x0006:byte]
	al = al - al
	SCZO = cond(al)
	cx = cx - cx
	SCZO = cond(cx)
	v24 = Mem0[ds:0x4D6E:word16] | ax
	Mem0[ds:0x4D6E:word16] = v24
	SZO = cond(Mem0[ds:0x4D6E:word16])
	C = false
	goto l002F_25ED
	// succ:  l002F_25ED
l002F_25EA:
	di = 0x0001
	// succ:  l002F_25ED
l002F_25ED:
	si = si + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(si)
	// succ:  l002F_25F0
l002F_25F0:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l002F_25FA
	// succ:  l002F_25F4 l002F_25FA
l002F_25F4:
	SCZO = cond(si - 0x00E6)
	branch Test(EQ,Z) l002F_2602
	// succ:  l002F_25FA l002F_2602
l002F_25FA:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:0x4D6E:word16] = ax
	Mem0[ds:0x4D6C:word16] = ax
	// succ:  l002F_2602
l002F_2602:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_2242_exit
fn002F_2242_exit:


// fn002F_260C
// Return size: 4
void fn002F_260C()
fn002F_260C_entry:
	// succ:  l002F_260C
l002F_260C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0106
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0106
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn00F7_1CD2 (retsize: 4;)
	sp = sp + 0x0004
	si = ax
	Mem0[ss:bp - 0x0107 + si:byte] = 0x5C
	ax = 0x027A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0107 + si
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	ax = 0x019C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0106
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01E0 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l002F_2668
	// succ:  l002F_2657 l002F_2668
l002F_2657:
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x41E0
	cx = 0x06E0
	di = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l002F_2663
l002F_2663:
	branch cx == 0x0000 l002F_2665
	// succ:  l002F_2663_1 l002F_2665
l002F_2663_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l002F_2663
	// succ:  l002F_2663
l002F_2665:
	goto l002F_26E1
	// succ:  l002F_26E1
l002F_2668:
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_0522 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_05A4 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	SCZO = cond(ax - 0x06E0)
	branch Test(NE,Z) l002F_26CA
	// succ:  l002F_2687 l002F_26CA
l002F_2687:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_0522 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00B0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x41E0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	di = 0x06E0
	Mem0[ss:bp - 0x0004:word16] = 0x41E0
	Mem0[ss:bp - 0x0006:word16] = si
	bx = Mem0[ss:bp - 0x0004:word16]
	goto l002F_26BE
	// succ:  l002F_26BE
l002F_26BA:
	v18 = Mem0[ds:bx:byte] ^ 0x55
	Mem0[ds:bx:byte] = v18
	SZO = cond(Mem0[ds:bx:byte])
	C = false
	bx = bx + 0x0001
	SZO = cond(bx)
	// succ:  l002F_26BE
l002F_26BE:
	ax = di
	di = di - 0x0001
	SZO = cond(di)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_26BA
	// succ:  l002F_26C5 l002F_26BA
l002F_26C5:
	si = Mem0[ss:bp - 0x0006:word16]
	goto l002F_26D8
	// succ:  l002F_26D8
l002F_26CA:
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x41E0
	cx = 0x06E0
	di = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l002F_26D6
l002F_26D6:
	branch cx == 0x0000 l002F_26D8
	// succ:  l002F_26D6_1 l002F_26D8
l002F_26D6_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l002F_26D6
	// succ:  l002F_26D6
l002F_26D8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_00BC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l002F_26E1
l002F_26E1:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_260C_exit
fn002F_260C_exit:


// fn002F_26EC
// Return size: 4
void fn002F_26EC()
fn002F_26EC_entry:
	// succ:  l002F_26EC
l002F_26EC:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0104
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetModuleHandle(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetModuleFileName(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	di = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l002F_2721
l002F_2721:
	branch cx == 0x0000 l002F_2723
	// succ:  l002F_2721_1 l002F_2723
l002F_2721_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l002F_2721
	// succ:  l002F_2723 l002F_2721
l002F_2723:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	di = cx
	si = bp - 0x0104 + di
	ax = bp - 0x0104
	SCZO = cond(si - ax)
	branch Test(ULE,CZ) l002F_273E
	// succ:  l002F_2734 l002F_273E
l002F_2734:
	SCZO = cond(Mem0[ds:si:byte] - 0x5C)
	branch Test(EQ,Z) l002F_273E
	// succ:  l002F_2739 l002F_273E
l002F_2739:
	si = si - 0x0001
	SZO = cond(si)
	SCZO = cond(si - ax)
	branch Test(UGT,CZ) l002F_2734
	// succ:  l002F_273E l002F_2734
l002F_273E:
	ax = 0x027A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	ax = 0x01A0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01E0 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l002F_277A
	// succ:  l002F_2762 l002F_277A
l002F_2762:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x01A4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	goto l002F_27AF
	// succ:  l002F_27AF
l002F_277A:
	dx = 0x06E0
	bx = 0x41E0
	Mem0[ss:bp - 0x0004:word16] = di
	goto l002F_278A
	// succ:  l002F_278A
l002F_2786:
	v19 = Mem0[ds:bx:byte] ^ 0x55
	Mem0[ds:bx:byte] = v19
	SZO = cond(Mem0[ds:bx:byte])
	C = false
	bx = bx + 0x0001
	SZO = cond(bx)
	// succ:  l002F_278A
l002F_278A:
	ax = dx
	dx = dx - 0x0001
	SZO = cond(dx)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_2786
	// succ:  l002F_2791 l002F_2786
l002F_2791:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00B0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x41E0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_00BC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l002F_27AF
l002F_27AF:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_26EC_exit
fn002F_26EC_exit:


// fn002F_27BA
// Return size: 4
void fn002F_27BA()
fn002F_27BA_entry:
	// succ:  l002F_27BA
l002F_27BA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = 0x4810
	sp = sp - 0x0002
	call fn002F_260C (retsize: 2;)
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x01)
	C = false
	branch Test(NE,Z) l002F_27DA
	// succ:  l002F_27D7 l002F_27DA
l002F_27D7:
	goto l002F_289E
	// succ:  l002F_289E
l002F_27DA:
	SZO = cond(Mem0[ds:0x486C:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l002F_280A
	// succ:  l002F_27E1 l002F_280A
l002F_27E1:
	al = Mem0[ds:0x486C:byte]
	ax = ax & 0x000E
	SZO = cond(ax)
	C = false
	al = al >>u 0x01
	SCZO = cond(al)
	SCZO = cond(ax - Mem0[ds:0x4C60:word16])
	branch Test(ULT,C) l002F_280A
	// succ:  l002F_27EF l002F_280A
l002F_27EF:
	ax = Mem0[ds:0x4868:word16]
	dx = Mem0[ds:0x486A:word16]
	SCZO = cond(Mem0[ds:0x3CFC:word16] - dx)
	branch Test(ULT,C) l002F_280A
	// succ:  l002F_27FC l002F_280A
l002F_27FC:
	branch Test(UGT,CZ) l002F_2804
	// succ:  l002F_27FE l002F_2804
l002F_27FE:
	SCZO = cond(Mem0[ds:0x3CFA:word16] - ax)
	branch Test(ULE,CZ) l002F_280A
	// succ:  l002F_2804 l002F_280A
l002F_2804:
	ax = ax - ax
	SCZO = cond(ax)
	goto l002F_29DB
	// succ:  l002F_29DB
l002F_280A:
	di = 0x0009
	// succ:  l002F_280D
l002F_280D:
	SZO = cond(Mem0[ds:si - 0x0054:byte] & 0x01)
	C = false
	branch Test(NE,Z) l002F_281A
	// succ:  l002F_2813 l002F_281A
l002F_2813:
	si = si - 0x00B0
	SCZO = cond(si)
	di = di - 0x0001
	SZO = cond(di)
	branch Test(NE,Z) l002F_280D
	// succ:  l002F_281A l002F_280D
l002F_281A:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l002F_2833
	// succ:  l002F_281E l002F_2833
l002F_281E:
	al = Mem0[ds:si - 0x0054:byte]
	ax = ax & 0x000E
	SZO = cond(ax)
	C = false
	al = al >>u 0x01
	SCZO = cond(al)
	SCZO = cond(ax - Mem0[ds:0x4C60:word16])
	branch Test(UGE,C) l002F_2833
	// succ:  l002F_282C l002F_2833
l002F_282C:
	si = si - 0x00B0
	SCZO = cond(si)
	di = di - 0x0001
	SZO = cond(di)
	branch Test(NE,Z) l002F_281E
	// succ:  l002F_2833 l002F_281E
l002F_2833:
	Mem0[ss:bp - 0x0004:word16] = si
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l002F_2865
	// succ:  l002F_283A l002F_2865
l002F_283A:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	SCZO = cond(Mem0[ds:si - 0x0056:word16] - dx)
	branch Test(ULT,C) l002F_2862
	// succ:  l002F_2846 l002F_2862
l002F_2846:
	branch Test(UGT,CZ) l002F_284D
	// succ:  l002F_2848 l002F_284D
l002F_2848:
	SCZO = cond(Mem0[ds:si - 0x0058:word16] - ax)
	branch Test(ULE,CZ) l002F_2862
	// succ:  l002F_284D l002F_2862
l002F_284D:
	al = Mem0[ds:si - 0x0054:byte]
	ax = ax & 0x000E
	SZO = cond(ax)
	C = false
	al = al >>u 0x01
	SCZO = cond(al)
	SCZO = cond(ax - Mem0[ds:0x4C60:word16])
	branch Test(NE,Z) l002F_2862
	// succ:  l002F_285B l002F_2862
l002F_285B:
	si = si - 0x00B0
	SCZO = cond(si)
	di = di - 0x0001
	SZO = cond(di)
	branch Test(NE,Z) l002F_283A
	// succ:  l002F_2862 l002F_283A
l002F_2862:
	Mem0[ss:bp - 0x0004:word16] = si
	Mem0[ss:bp - 0x0004:word16] = si
	// succ:  l002F_2865
l002F_2865:
	SCZO = cond(di - 0x0009)
	branch Test(GE,SO) l002F_2883
	// succ:  l002F_286A l002F_2883
l002F_286A:
	ax = 0x0009
	ax = ax - di
	SCZO = cond(ax)
	cx = 0x00B0
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = si
	ax = ax + cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0932 (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l002F_2883
l002F_2883:
	SCZO = cond(Mem0[ds:0x40AE:byte] - 0x00)
	branch Test(EQ,Z) l002F_288D
	// succ:  l002F_288A l002F_288D
l002F_288A:
	goto l002F_2932
	// succ:  l002F_2932
l002F_288D:
	si = 0x01BA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp - 0x0004:word16]
	v22 = Mem0[si:word16]
	Mem0[di:word16] = v22
	si = si + 0x0002
	di = di + 0x0002
	v23 = Mem0[si:word16]
	Mem0[di:word16] = v23
	si = si + 0x0002
	di = di + 0x0002
	v24 = Mem0[si:word16]
	Mem0[di:word16] = v24
	si = si + 0x0002
	di = di + 0x0002
	v25 = Mem0[si:word16]
	Mem0[di:word16] = v25
	si = si + 0x0002
	di = di + 0x0002
	v26 = Mem0[si:byte]
	Mem0[di:byte] = v26
	si = si + 0x0001
	di = di + 0x0001
	goto l002F_294F
	// succ:  l002F_294F
l002F_289E:
	ax = Mem0[ds:0x4D06:word16]
	dx = Mem0[ds:0x4D08:word16]
	SCZO = cond(Mem0[ds:0x4862:word16] - dx)
	branch Test(LT,SO) l002F_28C4
	// succ:  l002F_28AB l002F_28C4
l002F_28AB:
	branch Test(GT,SZO) l002F_28B3
	// succ:  l002F_28AD l002F_28B3
l002F_28AD:
	SCZO = cond(Mem0[ds:0x4860:word16] - ax)
	branch Test(ULE,CZ) l002F_28C4
	// succ:  l002F_28B3 l002F_28C4
l002F_28B3:
	al = Mem0[ds:0x486C:byte]
	ax = ax & 0x000E
	SZO = cond(ax)
	C = false
	al = al >>u 0x01
	SCZO = cond(al)
	SCZO = cond(ax - Mem0[ds:0x4C60:word16])
	branch Test(ULT,C) l002F_28C4
	// succ:  l002F_28C1 l002F_28C4
l002F_28C1:
	goto l002F_2804
	// succ:  l002F_2804
l002F_28C4:
	di = 0x0009
	// succ:  l002F_28C7
l002F_28C7:
	ax = Mem0[ds:si - 0x0054:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	SZO = cond(al & 0x01)
	C = false
	branch Test(NE,Z) l002F_28E6
	// succ:  l002F_28D1 l002F_28E6
l002F_28D1:
	al = Mem0[ss:bp - 0x0006:byte]
	ax = ax & 0x000E
	SZO = cond(ax)
	C = false
	al = al >>u 0x01
	SCZO = cond(al)
	SCZO = cond(ax - Mem0[ds:0x4C60:word16])
	branch Test(UGE,C) l002F_28E6
	// succ:  l002F_28DF l002F_28E6
l002F_28DF:
	si = si - 0x00B0
	SCZO = cond(si)
	di = di - 0x0001
	SZO = cond(di)
	branch Test(NE,Z) l002F_28C7
	// succ:  l002F_28E6 l002F_28C7
l002F_28E6:
	Mem0[ss:bp - 0x0004:word16] = si
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l002F_28F0
	// succ:  l002F_28ED l002F_28F0
l002F_28ED:
	goto l002F_2865
	// succ:  l002F_2865
l002F_28F0:
	ax = Mem0[ds:si - 0x0054:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	SZO = cond(al & 0x01)
	C = false
	branch Test(EQ,Z) l002F_28FD
	// succ:  l002F_28FA l002F_28FD
l002F_28FA:
	goto l002F_2862
	// succ:  l002F_2862
l002F_28FD:
	al = Mem0[ss:bp - 0x0006:byte]
	ax = ax & 0x000E
	SZO = cond(ax)
	C = false
	al = al >>u 0x01
	SCZO = cond(al)
	SCZO = cond(ax - Mem0[ds:0x4C60:word16])
	branch Test(EQ,Z) l002F_290E
	// succ:  l002F_290B l002F_290E
l002F_290B:
	goto l002F_2862
	// succ:  l002F_2862
l002F_290E:
	ax = Mem0[ds:0x4D06:word16]
	dx = Mem0[ds:0x4D08:word16]
	SCZO = cond(Mem0[ds:si - 0x005E:word16] - dx)
	branch Test(LE,SZO) l002F_291D
	// succ:  l002F_291A l002F_291D
l002F_291A:
	goto l002F_2862
	// succ:  l002F_2862
l002F_291D:
	branch Test(LT,SO) l002F_2927
	// succ:  l002F_291F l002F_2927
l002F_291F:
	SCZO = cond(Mem0[ds:si - 0x0060:word16] - ax)
	branch Test(ULE,CZ) l002F_2927
	// succ:  l002F_2924 l002F_2927
l002F_2924:
	goto l002F_2862
	// succ:  l002F_2862
l002F_2927:
	si = si - 0x00B0
	SCZO = cond(si)
	di = di - 0x0001
	SZO = cond(di)
	branch Test(NE,Z) l002F_28F0
	// succ:  l002F_292E l002F_28F0
l002F_292E:
	goto l002F_2862
	// succ:  l002F_2862
l002F_2932:
	di = 0x40AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	si = Mem0[ss:bp - 0x0004:word16]
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l002F_293F
l002F_293F:
	branch cx == 0x0000 l002F_2941
	// succ:  l002F_293F_1 l002F_2941
l002F_293F_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l002F_293F
	// succ:  l002F_2941 l002F_293F
l002F_2941:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v20 = si
	si = di
	di = v20
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l002F_2949
l002F_2949:
	branch cx == 0x0000 l002F_294B
	// succ:  l002F_2949_2 l002F_294B
l002F_2949_2:
	v21 = Mem0[si:word16]
	Mem0[di:word16] = v21
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l002F_2949
	// succ:  l002F_2949
l002F_294B:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l002F_294D
l002F_294D:
	branch cx == 0x0000 l002F_294F
	// succ:  l002F_294D_1 l002F_294F
l002F_294D_1:
	v27 = Mem0[si:byte]
	Mem0[di:byte] = v27
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l002F_294D
	// succ:  l002F_294D
l002F_294F:
	ax = Mem0[ds:0x4D06:word16]
	dx = Mem0[ds:0x4D08:word16]
	bx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:bx + 0x0050:word16] = ax
	Mem0[ds:bx + 0x0052:word16] = dx
	ax = 0x0064
	dx_ax = (word32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_16B6 (retsize: 4;)
	si = ax
	di = dx
	call fn00F7_16E4 (retsize: 4;)
	si = si + ax
	SCZO = cond(si)
	di = di + dx + C
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	bx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:bx + 0x0054:word16] = ax
	Mem0[ds:bx + 0x0056:word16] = dx
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	Mem0[ds:bx + 0x0058:word16] = ax
	Mem0[ds:bx + 0x005A:word16] = dx
	al = Mem0[ds:bx + 0x005C:byte]
	al = al ^ Mem0[ds:0x4EB7:byte]
	SZO = cond(al)
	C = false
	ax = ax & 0x0001
	SZO = cond(ax)
	C = false
	v29 = Mem0[ds:bx + 0x005C:word16] ^ ax
	Mem0[ds:bx + 0x005C:word16] = v29
	SZO = cond(Mem0[ds:bx + 0x005C:word16])
	C = false
	al = Mem0[ds:bx + 0x005C:byte]
	cx = Mem0[ds:0x4C60:word16]
	cx = cx << 0x0001
	SCZO = cond(cx)
	al = al ^ cl
	SZO = cond(al)
	C = false
	ax = ax & 0x000E
	SZO = cond(ax)
	C = false
	v31 = Mem0[ds:bx + 0x005C:word16] ^ ax
	Mem0[ds:bx + 0x005C:word16] = v31
	SZO = cond(Mem0[ds:bx + 0x005C:word16])
	C = false
	v32 = Mem0[ds:bx + 0x005E:word16] & 0xE000
	Mem0[ds:bx + 0x005E:word16] = v32
	SZO = cond(Mem0[ds:bx + 0x005E:word16])
	C = false
	di = 0x4D8E
	si = bx + 0x0060
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l002F_29C4
l002F_29C4:
	branch cx == 0x0000 l002F_29C6
	// succ:  l002F_29C4_1 l002F_29C6
l002F_29C4_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l002F_29C4
	// succ:  l002F_29C6 l002F_29C4
l002F_29C6:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v33 = si
	si = di
	di = v33
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l002F_29CE
l002F_29CE:
	branch cx == 0x0000 l002F_29D0
	// succ:  l002F_29CE_2 l002F_29D0
l002F_29CE_2:
	v34 = Mem0[si:word16]
	Mem0[di:word16] = v34
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l002F_29CE
	// succ:  l002F_29CE
l002F_29D0:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l002F_29D2
l002F_29D2:
	branch cx == 0x0000 l002F_29D4
	// succ:  l002F_29D2_1 l002F_29D4
l002F_29D2_1:
	v35 = Mem0[si:byte]
	Mem0[di:byte] = v35
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l002F_29D2
	// succ:  l002F_29D2
l002F_29D4:
	sp = sp - 0x0002
	call fn002F_26EC (retsize: 2;)
	ax = 0x0001
	// succ:  l002F_29DB
l002F_29DB:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_27BA_exit
fn002F_27BA_exit:


// fn002F_29E6
// Return size: 4
void fn002F_29E6()
fn002F_29E6_entry:
	// succ:  l002F_29E6
l002F_29E6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	dx = 0x9240
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4132:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + 0x01C2
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x4124:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + Mem0[ds:0x4124:word16]
	SCZO = cond(ax)
	cx = ax
	ax = ax - Mem0[ds:0x4124:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4134:word16]
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax + 0x017C
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x4126:word16]
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	ax = ax & dx
	SZO = cond(ax)
	C = false
	ax = ax + Mem0[ds:0x4126:word16]
	SCZO = cond(ax)
	dx = ax
	ax = ax - Mem0[ds:0x4126:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_2A6B
	// succ:  l002F_2A5F l002F_2A6B
l002F_2A5F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l002F_2A6B
l002F_2A6B:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_29E6_exit
fn002F_29E6_exit:


// COPYRIGHTDLGPROC
// Return size: 4
void COPYRIGHTDLGPROC()
COPYRIGHTDLGPROC_entry:
	// succ:  l002F_2A74
l002F_2A74:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0158
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000C:word16]
	ax = si
	SCZO = cond(ax - 0x0007)
	branch Test(NE,Z) l002F_2A91
	// succ:  l002F_2A8E l002F_2A91
l002F_2A8E:
	goto l002F_2C8E
	// succ:  l002F_2C8E
l002F_2A91:
	branch Test(UGT,CZ) l002F_2AA8
	// succ:  l002F_2A93 l002F_2AA8
l002F_2A93:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l002F_2AC2
	// succ:  l002F_2A96 l002F_2AC2
l002F_2A96:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l002F_2A9C
	// succ:  l002F_2A99 l002F_2A9C
l002F_2A99:
	goto l002F_2B88
	// succ:  l002F_2B88
l002F_2A9C:
	ax = ax - 0x0003
	SCZO = cond(ax)
	branch Test(NE,Z) l002F_2AA4
	// succ:  l002F_2AA1 l002F_2AA4
l002F_2AA1:
	goto l002F_2BE8
	// succ:  l002F_2BE8
l002F_2AA4:
	goto l002F_301A
	// succ:  l002F_301A
l002F_2AA8:
	ax = ax - 0x000F
	SCZO = cond(ax)
	branch Test(NE,Z) l002F_2AB0
	// succ:  l002F_2AAD l002F_2AB0
l002F_2AAD:
	goto l002F_2CA4
	// succ:  l002F_2CA4
l002F_2AB0:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l002F_2AB6
	// succ:  l002F_2AB3 l002F_2AB6
l002F_2AB3:
	goto l002F_2FC2
	// succ:  l002F_2FC2
l002F_2AB6:
	ax = ax - 0x0101
	SCZO = cond(ax)
	branch Test(NE,Z) l002F_2ABE
	// succ:  l002F_2ABB l002F_2ABE
l002F_2ABB:
	goto l002F_2FD2
	// succ:  l002F_2FD2
l002F_2ABE:
	goto l002F_301A
	// succ:  l002F_301A
l002F_2AC2:
	di = Mem0[ss:bp + 0x000E:word16]
	ax = 0x304C
	dx = 0x002F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp - 0x0006:word16] = dx
	ax = 0x0126
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x3038
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	dx = 0x5000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetWindowLong(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ds:0x4C5C:word16] = ax
	Mem0[ds:0x4C5E:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x014E:word16] = si
	Mem0[ss:bp - 0x014C:word16] = cx
	SetWindowLong(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	ax = 0x0126
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x3045
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x5000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	si = ax
	GetWindowLong(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ds:0x4C5C:word16] = ax
	Mem0[ds:0x4C5E:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x014C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x014E:word16]
	SetWindowLong(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	goto l002F_3014
	// succ:  l002F_3014
l002F_2B88:
	di = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowLong(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5C:word16]
	SetWindowLong(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5C:word16]
	SetWindowLong(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	FreeProcInstance(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	goto l002F_3014
	// succ:  l002F_3014
l002F_2BE8:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x001E:word16]
	cx = 0x0003
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	dx = Mem0[ds:0x4132:word16]
	bx = dx
	dx = dx << 0x0001
	SCZO = cond(dx)
	dx = dx << 0x0001
	SCZO = cond(dx)
	dx = dx + bx
	SCZO = cond(dx)
	dx = dx << 0x0001
	SCZO = cond(dx)
	bx = dx
	dx = dx >>u 0x0001
	SCZO = cond(dx)
	ax = ax - dx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4134:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax - Mem0[ss:bp - 0x001C:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	ax = Mem0[ds:0x4134:word16]
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveWindow(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x001E:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	cx = 0x0003
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	cx = Mem0[ds:0x4132:word16]
	dx = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + dx
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	dx = cx
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	ax = ax - cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4134:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax - Mem0[ss:bp - 0x001C:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = Mem0[ds:0x4134:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveWindow(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	goto l002F_3014
	// succ:  l002F_3014
l002F_2C8E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l002F_3014
	// succ:  l002F_3014
l002F_2CA4:
	sp = sp - 0x0002
	call fn002F_260C (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = bp - 0x004A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BeginPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l002F_2CBE
	// succ:  l002F_2CBB l002F_2CBE
l002F_2CBB:
	goto l002F_3014
	// succ:  l002F_3014
l002F_2CBE:
	Mem0[ss:bp - 0x0010:word16] = 0x0000
	ax = Mem0[ds:0x4132:word16]
	si = ax
	cx = Mem0[ds:0x4134:word16]
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	Mem0[ss:bp - 0x0004:word16] = cx
	ax = ax + 0x001E
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	cx = cx + 0x0041
	SCZO = cond(cx)
	Mem0[ss:bp - 0x0014:word16] = cx
	SCZO = cond(Mem0[ds:0x4126:word16] - 0x01E0)
	branch Test(UGE,C) l002F_2CEA
	// succ:  l002F_2CE5 l002F_2CEA
l002F_2CE5:
	ax = 0x0001
	goto l002F_2CEC
	// succ:  l002F_2CEC
l002F_2CEA:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l002F_2CEC
l002F_2CEC:
	Mem0[ss:bp - 0x000C:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = bp - 0x0046
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CE2:word16]
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x00B9
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_2D27
	// succ:  l002F_2D14 l002F_2D27
l002F_2D14:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_0E3E (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_2D27
l002F_2D27:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x00BB
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_2D6C
	// succ:  l002F_2D3D l002F_2D6C
l002F_2D3D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x0041
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	Mem0[ss:bp - 0x0150:word16] = ax
	call fn01BF_0E3E (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = si + 0x0189
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0150:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn01BF_0EBC (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_2D6C
l002F_2D6C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x00BA
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_2DB1
	// succ:  l002F_2D82 l002F_2DB1
l002F_2D82:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l002F_2D9A
	// succ:  l002F_2D8A l002F_2D9A
l002F_2D8A:
	ax = Mem0[ds:0x4126:word16]
	cx = Mem0[ds:0x4134:word16]
	cx = cx << 0x0001
	SCZO = cond(cx)
	ax = ax - cx
	SCZO = cond(ax)
	ax = ax - 0x0041
	SCZO = cond(ax)
	goto l002F_2DA0
	// succ:  l002F_2DA0
l002F_2D9A:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x013B
	SCZO = cond(ax)
	// succ:  l002F_2DA0
l002F_2DA0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn01BF_0E3E (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_2DB1
l002F_2DB1:
	SCZO = cond(Mem0[ds:0x4130:word16] - 0x0002)
	branch Test(ULE,CZ) l002F_2DC0
	// succ:  l002F_2DB8 l002F_2DC0
l002F_2DB8:
	ax = 0x8080
	dx = dx - dx
	SCZO = cond(dx)
	goto l002F_2DC6
	// succ:  l002F_2DC6
l002F_2DC0:
	ax = 0xFFFF
	dx = 0x00FF
	// succ:  l002F_2DC6
l002F_2DC6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateSolidBrush(Mem0[ss:sp:word32])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_2E0B
	// succ:  l002F_2DD4 l002F_2E0B
l002F_2DD4:
	ax = bp - 0x002A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x001F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x0041
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x0189
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x013B
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = bp - 0x002A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_2E0B
l002F_2E0B:
	ax = 0x0023
	dx_ax = Mem0[ds:0x4132:word16] *u ax
	SCZO = cond(dx_ax)
	Mem0[ss:bp - 0x001A:word16] = ax
	ax = 0x0032
	dx_ax = Mem0[ds:0x4132:word16] *u ax
	SCZO = cond(dx_ax)
	Mem0[ss:bp - 0x0018:word16] = ax
	ax = 0x0041
	dx_ax = Mem0[ds:0x4132:word16] *u ax
	SCZO = cond(dx_ax)
	Mem0[ss:bp - 0x0016:word16] = ax
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1A66 (retsize: 4;)
	sp = sp + 0x0006
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	SCZO = cond(Mem0[ds:0x4130:word16] - 0x0002)
	branch Test(ULE,CZ) l002F_2E4A
	// succ:  l002F_2E43 l002F_2E4A
l002F_2E43:
	ax = 0x8080
	dx = dx - dx
	SCZO = cond(dx)
	goto l002F_2E50
	// succ:  l002F_2E50
l002F_2E4A:
	ax = 0xFFFF
	dx = 0x00FF
	// succ:  l002F_2E50
l002F_2E50:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetBkColor(Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0006
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l002F_2E65
	// succ:  l002F_2E5B l002F_2E65
l002F_2E5B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0010:word16] = ax
	// succ:  l002F_2E65
l002F_2E65:
	Mem0[ss:bp - 0x0012:word16] = si
	Mem0[ss:bp - 0x000E:word16] = di
	dx = 0x41E0
	Mem0[ss:bp - 0x000A:word16] = 0x0000
	ax = Mem0[ss:bp - 0x0014:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	si = dx
	// succ:  l002F_2E7E
l002F_2E7E:
	SCZO = cond(Mem0[ds:si:byte] - 0x00)
	branch Test(NE,Z) l002F_2E86
	// succ:  l002F_2E83 l002F_2E86
l002F_2E83:
	goto l002F_2F93
	// succ:  l002F_2F93
l002F_2E86:
	ax = bp - 0x014A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0039
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0050:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0052:word16]
	bl = Mem0[ds:si + 0x005C:byte]
	bx = bx & 0x000E
	SZO = cond(bx)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x002F:bx + 0x303D:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	ax = bp - 0x014A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = bp - 0x014A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l002F_2EC3
l002F_2EC3:
	branch cx == 0x0000 l002F_2EC5
	// succ:  l002F_2EC3_1 l002F_2EC5
l002F_2EC3_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l002F_2EC3
	// succ:  l002F_2EC5 l002F_2EC3
l002F_2EC5:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	TextOut(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	ax = bp - 0x014A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x00DB
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = si + 0x0060
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0018
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	bx = 0x003C
	di = di - di
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	ax = 0x000A
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x005A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0058:word16]
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = ax
	Mem0[ss:bp - 0x0154:word16] = di
	Mem0[ss:bp - 0x0152:word16] = dx
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = ax
	Mem0[ss:bp - 0x0158:word16] = di
	Mem0[ss:bp - 0x0156:word16] = dx
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0018
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0156:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0158:word16]
	call fn004F_0C18 (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0152:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0154:word16]
	call fn004F_0C18 (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax + 0x000F
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x014A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = bp - 0x014A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l002F_2F74
l002F_2F74:
	branch cx == 0x0000 l002F_2F76
	// succ:  l002F_2F74_2 l002F_2F76
l002F_2F74_2:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l002F_2F74
	// succ:  l002F_2F76 l002F_2F74
l002F_2F76:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	TextOut(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	v22 = Mem0[ss:bp - 0x0006:word16] + 0x001E
	Mem0[ss:bp - 0x0006:word16] = v22
	SCZO = cond(v22)
	si = si + 0x00B0
	SCZO = cond(si)
	v23 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v23
	SZO = cond(v23)
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0008)
	branch Test(GE,SO) l002F_2F93
	// succ:  l002F_2F90 l002F_2F93
l002F_2F90:
	goto l002F_2E7E
	// succ:  l002F_2E7E
l002F_2F93:
	SCZO = cond(Mem0[ss:bp - 0x0010:word16] - 0x0000)
	branch Test(EQ,Z) l002F_2FA4
	// succ:  l002F_2F99 l002F_2FA4
l002F_2F99:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l002F_2FA4
l002F_2FA4:
	SCZO = cond(Mem0[ss:bp - 0x0012:word16] - 0x0000)
	branch Test(EQ,Z) l002F_2FB2
	// succ:  l002F_2FAA l002F_2FB2
l002F_2FAA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_2FB2
l002F_2FB2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x004A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	goto l002F_3014
	// succ:  l002F_3014
l002F_2FC2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l002F_301A
	// succ:  l002F_301A
l002F_2FD2:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l002F_2FDE
	// succ:  l002F_2FD8 l002F_2FDE
l002F_2FD8:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l002F_2FF2
	// succ:  l002F_2FDB l002F_2FF2
l002F_2FDB:
	goto l002F_3014
	// succ:  l002F_3014
l002F_2FDE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	PostMessage(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	goto l002F_3014
	// succ:  l002F_3014
l002F_2FF2:
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x41E0
	cx = 0x06E0
	di = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l002F_2FFE
l002F_2FFE:
	branch cx == 0x0000 l002F_3000
	// succ:  l002F_2FFE_1 l002F_3000
l002F_2FFE_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l002F_2FFE
	// succ:  l002F_2FFE
l002F_3000:
	sp = sp - 0x0002
	call fn002F_26EC (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l002F_3014
l002F_3014:
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (int32) ax
	goto l002F_302C
	// succ:  l002F_302C
l002F_301A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	DefWindowProc(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l002F_302C
l002F_302C:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  COPYRIGHTDLGPROC_exit
COPYRIGHTDLGPROC_exit:


// BUTTONWNDPROC1
// Return size: 4
void BUTTONWNDPROC1()
BUTTONWNDPROC1_entry:
	// succ:  l002F_304C
l002F_304C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000E:word16]
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0100)
	branch Test(EQ,Z) l002F_3068
	// succ:  l002F_3065 l002F_3068
l002F_3065:
	goto l002F_3141
	// succ:  l002F_3141
l002F_3068:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFF8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = ax
	ax = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax - 0x001B)
	branch Test(NE,Z) l002F_307F
	// succ:  l002F_307C l002F_307F
l002F_307C:
	goto l002F_3132
	// succ:  l002F_3132
l002F_307F:
	branch Test(ULE,CZ) l002F_3084
	// succ:  l002F_3081 l002F_3084
l002F_3081:
	goto l002F_3141
	// succ:  l002F_3141
l002F_3084:
	al = al - 0x09
	SCZO = cond(al)
	branch Test(EQ,Z) l002F_3092
	// succ:  l002F_3088 l002F_3092
l002F_3088:
	al = al - 0x04
	SCZO = cond(al)
	branch Test(NE,Z) l002F_308F
	// succ:  l002F_308C l002F_308F
l002F_308C:
	goto l002F_311C
	// succ:  l002F_311C
l002F_308F:
	goto l002F_3141
	// succ:  l002F_3141
l002F_3092:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFF4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	ax = ax + 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0003)
	branch Test(NE,Z) l002F_3118
	// succ:  l002F_30A2 l002F_3118
l002F_30A2:
	cx = 0x0001
	// succ:  l002F_30A5
l002F_30A5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0008:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFF0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowLong(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFF0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	v15 = Mem0[ss:bp - 0x0006:byte] & 0xFE
	Mem0[ss:bp - 0x0006:byte] = v15
	SZO = cond(Mem0[ss:bp - 0x0006:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	SetWindowLong(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = 0xFFF0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowLong(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = 0xFFF0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	al = al | 0x01
	SZO = cond(al)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowLong(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l002F_3141
	// succ:  l002F_3141
l002F_3118:
	cx = ax
	goto l002F_30A5
	// succ:  l002F_30A5
l002F_311C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0111
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFF4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	goto l002F_313C
	// succ:  l002F_313C
l002F_3132:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l002F_313C
l002F_313C:
	PostMessage(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l002F_3141
l002F_3141:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	CallWindowProc(Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000E
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  BUTTONWNDPROC1_exit
BUTTONWNDPROC1_exit:


// fn002F_3168
// Return size: 4
void fn002F_3168()
fn002F_3168_entry:
	// succ:  l002F_3168
l002F_3168:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00CF_05F2 (retsize: 4;)
	SCZO = cond(Mem0[ds:0x4958:word16] - 0x0000)
	branch Test(EQ,Z) l002F_3194
	// succ:  l002F_3183 l002F_3194
l002F_3183:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4958:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l002F_3194
l002F_3194:
	ax = 0x000A
	Mem0[ds:0x4CFE:word16] = ax
	Mem0[ds:0x4CFC:word16] = ax
	ax = 0x0005
	Mem0[ds:0x4D02:word16] = ax
	Mem0[ds:0x4D00:word16] = ax
	ax = Mem0[ds:0x4CEC:word16]
	dx = Mem0[ds:0x4CEE:word16]
	Mem0[ds:0x4CE8:word16] = ax
	Mem0[ds:0x4CEA:word16] = dx
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x4CF4
	cx = 0x0004
	di = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l002F_31C0
l002F_31C0:
	branch cx == 0x0000 l002F_31C2
	// succ:  l002F_31C0_1 l002F_31C2
l002F_31C0_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l002F_31C0
	// succ:  l002F_31C0
l002F_31C2:
	dx = 0x4CF0
	cx = 0x0004
	di = dx
	// succ:  l002F_31CA
l002F_31CA:
	branch cx == 0x0000 l002F_31CC
	// succ:  l002F_31CA_1 l002F_31CC
l002F_31CA_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l002F_31CA
	// succ:  l002F_31CA
l002F_31CC:
	dx = 0x4CF8
	cx = 0x0004
	di = dx
	// succ:  l002F_31D4
l002F_31D4:
	branch cx == 0x0000 l002F_31D6
	// succ:  l002F_31D4_1 l002F_31D6
l002F_31D4_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l002F_31D4
	// succ:  l002F_31D4
l002F_31D6:
	dx = 0x4D2E
	cx = 0x0010
	di = dx
	// succ:  l002F_31DE
l002F_31DE:
	branch cx == 0x0000 l002F_31E0
	// succ:  l002F_31DE_1 l002F_31E0
l002F_31DE_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l002F_31DE
	// succ:  l002F_31DE
l002F_31E0:
	ax = 0x0064
	Mem0[ds:0x4D14:word16] = ax
	Mem0[ds:0x4D16:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:0x4D08:word16] = ax
	Mem0[ds:0x4D06:word16] = ax
	Mem0[ds:0x4D0C:word16] = ax
	Mem0[ds:0x4D0A:word16] = ax
	ax = 0x0001
	Mem0[ds:0x4D04:word16] = ax
	Mem0[ds:0x4D20:word16] = ax
	v16 = Mem0[ds:0x4D1A:byte] & 0xFD
	Mem0[ds:0x4D1A:byte] = v16
	SZO = cond(Mem0[ds:0x4D1A:byte])
	C = false
	si = si - si
	SCZO = cond(si)
	Mem0[ds:0x4D0E:word16] = si
	Mem0[ds:0x4D12:word16] = si
	Mem0[ds:0x4D10:word16] = si
	// succ:  l002F_3213
l002F_3213:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_15A0 (retsize: 4;)
	sp = sp + 0x0004
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x0003)
	branch Test(LE,SZO) l002F_3213
	// succ:  l002F_3223 l002F_3213
l002F_3223:
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x4918
	cx = 0x0040
	di = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l002F_322F
l002F_322F:
	branch cx == 0x0000 l002F_3231
	// succ:  l002F_322F_1 l002F_3231
l002F_322F_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l002F_322F
	// succ:  l002F_322F
l002F_3231:
	Mem0[ds:0x4C64:word16] = ax
	Mem0[ds:0x4C62:word16] = ax
	Mem0[ds:0x3CFA:word16] = 0x0001
	Mem0[ds:0x3CFC:word16] = ax
	dx = 0x4C52
	cx = 0x0007
	di = dx
	// succ:  l002F_3248
l002F_3248:
	branch cx == 0x0000 l002F_324A
	// succ:  l002F_3248_1 l002F_324A
l002F_3248_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l002F_3248
	// succ:  l002F_3248
l002F_324A:
	call fn0137_1A62 (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_3258
	// succ:  l002F_3253 l002F_3258
l002F_3253:
	ax = ax - ax
	SCZO = cond(ax)
	goto l002F_3360
	// succ:  l002F_3360
l002F_3258:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_07C2 (retsize: 4;)
	sp = sp + 0x0008
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l002F_3253
	// succ:  l002F_326F l002F_3253
l002F_326F:
	bx = Mem0[ds:si:word16]
	v19 = Mem0[ds:bx + 0x0009:byte] | 0x01
	Mem0[ds:bx + 0x0009:byte] = v19
	SZO = cond(Mem0[ds:bx + 0x0009:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	ax = 0x000D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_3253
	// succ:  l002F_328B l002F_3253
l002F_328B:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_07C2 (retsize: 4;)
	sp = sp + 0x0008
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l002F_3253
	// succ:  l002F_32A5 l002F_3253
l002F_32A5:
	bx = Mem0[ds:si:word16]
	v20 = Mem0[ds:bx + 0x0009:byte] | 0x01
	Mem0[ds:bx + 0x0009:byte] = v20
	SZO = cond(Mem0[ds:bx + 0x0009:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l002F_3253
	// succ:  l002F_32C1 l002F_3253
l002F_32C1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_134C (retsize: 4;)
	sp = sp + 0x0004
	call fn0137_1CE4 (retsize: 4;)
	call fn0137_1AFA (retsize: 4;)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l002F_32DE
	// succ:  l002F_32DB l002F_32DE
l002F_32DB:
	goto l002F_3253
	// succ:  l002F_3253
l002F_32DE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	ax = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_32F7
	// succ:  l002F_32F4 l002F_32F7
l002F_32F4:
	goto l002F_3253
	// succ:  l002F_3253
l002F_32F7:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn002F_0D4C (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l002F_3305
	// succ:  l002F_3302 l002F_3305
l002F_3302:
	goto l002F_3253
	// succ:  l002F_3253
l002F_3305:
	ax = 0x05DC
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_18F6 (retsize: 4;)
	sp = sp + 0x0006
	ax = 0x2308
	dx = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l002F_3350
	// succ:  l002F_332D l002F_3350
l002F_332D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0133
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = ax
	DialogBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	FreeProcInstance(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	goto l002F_3359
	// succ:  l002F_3359
l002F_3350:
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01D7_0000 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l002F_3359
l002F_3359:
	sp = sp - 0x0002
	call fn002F_350C (retsize: 2;)
	ax = 0x0001
	// succ:  l002F_3360
l002F_3360:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_3168_exit
fn002F_3168_exit:


// fn002F_336C
// Return size: 4
void fn002F_336C()
fn002F_336C_entry:
	// succ:  l002F_336C
l002F_336C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0000)
	branch Test(EQ,Z) l002F_338D
	// succ:  l002F_3382 l002F_338D
l002F_3382:
	ReleaseCapture()
	Mem0[ds:0x0098:word16] = 0x0000
	// succ:  l002F_338D
l002F_338D:
	call fn00DF_1B22 (retsize: 4;)
	call fn00DF_1AF4 (retsize: 4;)
	call fn01F7_215A (retsize: 4;)
	call fn01F7_2CF2 (retsize: 4;)
	call fn01BF_20F2 (retsize: 4;)
	Mem0[ds:0x0096:word16] = 0xFFFF
	v12 = Mem0[ds:0x4EB7:byte] & 0xE6
	Mem0[ds:0x4EB7:byte] = v12
	SZO = cond(Mem0[ds:0x4EB7:byte])
	C = false
	SCZO = cond(Mem0[ds:0x4DEA:word16] - 0x0000)
	branch Test(EQ,Z) l002F_33C1
	// succ:  l002F_33B8 l002F_33C1
l002F_33B8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	call fn0137_00F0 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l002F_33C1
l002F_33C1:
	Mem0[ds:0x4DEA:word16] = 0x0000
	Mem0[ds:0x0090:word16] = 0x0002
	Mem0[ds:0x0092:word16] = 0x0001
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:0x0094:word16] = ax
	Mem0[ds:0x4D26:word16] = ax
	call fn0137_19E8 (retsize: 4;)
	call fn0087_04C4 (retsize: 4;)
	SCZO = cond(Mem0[ds:0x4D88:word16] - 0x0000)
	branch Test(EQ,Z) l002F_33F5
	// succ:  l002F_33EC l002F_33F5
l002F_33EC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	DestroyWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_33F5
l002F_33F5:
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x4B60
	cx = 0x0088
	di = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l002F_3401
l002F_3401:
	branch cx == 0x0000 l002F_3403
	// succ:  l002F_3401_1 l002F_3403
l002F_3401_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l002F_3401
	// succ:  l002F_3401
l002F_3403:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	si = 0x0522
	Mem0[ss:bp - 0x0004:word16] = 0x000A
	di = Mem0[ss:bp - 0x0004:word16]
	// succ:  l002F_341D
l002F_341D:
	SCZO = cond(Mem0[ds:si + 0x000A:word16] - 0x0000)
	branch Test(EQ,Z) l002F_3430
	// succ:  l002F_3423 l002F_3430
l002F_3423:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x000A:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:si + 0x000A:word16] = 0x0000
	// succ:  l002F_3430
l002F_3430:
	SCZO = cond(Mem0[ds:si + 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l002F_3443
	// succ:  l002F_3436 l002F_3443
l002F_3436:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x000C:word16]
	call fn0137_00F0 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:si + 0x000C:word16] = 0x0000
	// succ:  l002F_3443
l002F_3443:
	si = si + 0x000E
	SCZO = cond(si)
	di = di - 0x0001
	SZO = cond(di)
	branch Test(NE,Z) l002F_341D
	// succ:  l002F_3449 l002F_341D
l002F_3449:
	SCZO = cond(Mem0[ds:0x4CE6:word16] - 0x0000)
	branch Test(EQ,Z) l002F_345F
	// succ:  l002F_3450 l002F_345F
l002F_3450:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CE6:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:0x4CE6:word16] = 0x0000
	// succ:  l002F_345F
l002F_345F:
	Mem0[ds:0x4E1E:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x4154:word16] - 0x0000)
	branch Test(EQ,Z) l002F_347B
	// succ:  l002F_346C l002F_347B
l002F_346C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4154:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:0x4154:word16] = 0x0000
	// succ:  l002F_347B
l002F_347B:
	Mem0[ds:0x4DE0:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x0504:word16] - 0x0000)
	branch Test(EQ,Z) l002F_3497
	// succ:  l002F_3488 l002F_3497
l002F_3488:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0504:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:0x0504:word16] = 0x0000
	// succ:  l002F_3497
l002F_3497:
	SCZO = cond(Mem0[ds:0x0506:word16] - 0x0000)
	branch Test(EQ,Z) l002F_34AD
	// succ:  l002F_349E l002F_34AD
l002F_349E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0506:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:0x0506:word16] = 0x0000
	// succ:  l002F_34AD
l002F_34AD:
	Mem0[ds:0x0508:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	GetMenu(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = 0x063A
	// succ:  l002F_34BF
l002F_34BF:
	SCZO = cond(Mem0[ds:si + 0x0004:byte] - 0xFE)
	branch Test(EQ,Z) l002F_34C9
	// succ:  l002F_34C5 l002F_34C9
l002F_34C5:
	Mem0[ds:si + 0x0004:byte] = 0xFF
	// succ:  l002F_34C9
l002F_34C9:
	si = si + 0x000C
	SCZO = cond(si)
	SCZO = cond(si - 0x07EA)
	branch Test(ULT,C) l002F_34BF
	// succ:  l002F_34D2 l002F_34BF
l002F_34D2:
	ax = 0xFFFF
	dx = 0x081C
	cx = 0x0014
	di = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l002F_34DF
l002F_34DF:
	branch cx == 0x0000 l002F_34E1
	// succ:  l002F_34DF_1 l002F_34E1
l002F_34DF_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l002F_34DF
	// succ:  l002F_34DF
l002F_34E1:
	call fn01D7_1E5C (retsize: 4;)
	SCZO = cond(Mem0[ds:0x4D23:byte] - 0x00)
	branch Test(EQ,Z) l002F_34FC
	// succ:  l002F_34ED l002F_34FC
l002F_34ED:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D24:word16]
	DestroyIcon(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x4D24:word16] = 0x0000
	// succ:  l002F_34FC
l002F_34FC:
	call fn0017_1E46 (retsize: 4;)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_336C_exit
fn002F_336C_exit:


// fn002F_350C
// Return size: 4
void fn002F_350C()
fn002F_350C_entry:
	// succ:  l002F_350C
l002F_350C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4D22:byte] - 0x00)
	branch Test(NE,Z) l002F_3568
	// succ:  l002F_3521 l002F_3568
l002F_3521:
	SCZO = cond(Mem0[ds:0x4DEC:word16] - 0x0000)
	branch Test(NE,Z) l002F_3562
	// succ:  l002F_3528 l002F_3562
l002F_3528:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0001
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0105
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FindResource(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadResource(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l002F_3562
	// succ:  l002F_354D l002F_3562
l002F_354D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LockResource(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SetMetaFileBits(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x4DEC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	GlobalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_3562
l002F_3562:
	ax = Mem0[ds:0x4DEC:word16]
	goto l002F_35AC
	// succ:  l002F_35AC
l002F_3568:
	SCZO = cond(Mem0[ds:0x4E46:word16] - 0x0000)
	branch Test(NE,Z) l002F_35A9
	// succ:  l002F_356F l002F_35A9
l002F_356F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0002
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0105
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FindResource(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadResource(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l002F_35A9
	// succ:  l002F_3594 l002F_35A9
l002F_3594:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LockResource(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SetMetaFileBits(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x4E46:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	GlobalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l002F_35A9
l002F_35A9:
	ax = Mem0[ds:0x4E46:word16]
	// succ:  l002F_35AC
l002F_35AC:
	Mem0[ds:0x4CBE:word16] = ax
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_350C_exit
fn002F_350C_exit:


// fn002F_35B8
// Return size: 4
void fn002F_35B8()
fn002F_35B8_entry:
	// succ:  l002F_35B8
l002F_35B8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = si - si
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:0x4D8E:byte] - 0x00)
	branch Test(EQ,Z) l002F_35EA
	// succ:  l002F_35D0 l002F_35EA
l002F_35D0:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x01)
	C = false
	branch Test(NE,Z) l002F_35E4
	// succ:  l002F_35D7 l002F_35E4
l002F_35D7:
	ax = 0x01C9
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l002F_35E4
l002F_35E4:
	sp = sp - 0x0002
	call fn002F_27BA (retsize: 2;)
	si = ax
	// succ:  l002F_35EA
l002F_35EA:
	call fn00F7_16B6 (retsize: 4;)
	di = ax
	Mem0[ss:bp - 0x0006:word16] = di
	Mem0[ss:bp - 0x0004:word16] = dx
	call fn00F7_16E4 (retsize: 4;)
	ax = ax + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp - 0x0004:word16] + C
	SCZO = cond(dx)
	Mem0[ds:0x0834:word16] = ax
	Mem0[ds:0x0836:word16] = dx
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l002F_3616
	// succ:  l002F_3610 l002F_3616
l002F_3610:
	ax = 0x0006
	goto l002F_3619
	// succ:  l002F_3619
l002F_3616:
	ax = 0x0005
	// succ:  l002F_3619
l002F_3619:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1E96 (retsize: 4;)
	sp = sp + 0x0002
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l002F_3627
	// succ:  l002F_3623 l002F_3627
l002F_3623:
	sp = sp - 0x0002
	call fn002F_29E6 (retsize: 2;)
l002F_3627:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn002F_35B8_exit
fn002F_35B8_exit:


// fn004F_001A
// Return size: 0
void fn004F_001A()
fn004F_001A_entry:
	goto l004F_001A
	// succ:  l004F_001A
l004F_0012:
	al = 0xFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_0E13 (retsize: 2;)
l004F_001A:
	sp = fp
	bp = bp ^ bp
	SZO = cond(bp)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	InitTask()
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_0012
	// succ:  l004F_0026 l004F_0012
l004F_0026:
	Mem0[ds:0x089C:word16] = es
	cx = cx + 0x0100
	SCZO = cond(cx)
	branch Test(ULT,C) l004F_0012
	// succ:  l004F_0030 l004F_0012
l004F_0030:
	Mem0[ds:0x0862:word16] = cx
	Mem0[ds:0x0864:word16] = si
	Mem0[ds:0x0866:word16] = di
	Mem0[ds:0x0868:word16] = bx
	Mem0[ds:0x086A:word16] = es
	Mem0[ds:0x086C:word16] = dx
	GetVersion()
	Mem0[ds:0x089E:word16] = ax
	ah = 0x30
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_0062
	// succ:  l004F_005B l004F_0062
l004F_005B:
	DOS3Call()
	goto l004F_0064
	// succ:  l004F_0064
l004F_0062:
	__syscall(0x21)
	// succ:  l004F_0064
l004F_0064:
	Mem0[ds:0x08A0:word16] = ax
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(NE,Z) l004F_0075
	// succ:  l004F_0070 l004F_0075
l004F_0070:
	al = 0x00
	Mem0[ds:0x08A3:byte] = al
	// succ:  l004F_0075
l004F_0075:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	WaitEvent(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0866:word16]
	InitApp(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_0012
	// succ:  l004F_008A l004F_0012
l004F_008A:
	sp = sp - 0x0002
	call fn004F_0D26 (retsize: 2;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	call fn004F_0F04 (retsize: 2;)
	sp = sp - 0x0002
	call fn004F_1086 (retsize: 2;)
	call fn004F_21BC (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x08D8:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x08D6:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x08D4:word16]
	sp = sp - 0x0002
	call fn004F_0CFA (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_0E05 (retsize: 2;)
	ax = 0x0015
	// succ:  l004F_00B9_thunk_fn004F_111B
l004F_00B9_thunk_fn004F_111B:
	call fn004F_111B (retsize: 0;)
	return
	// succ:  fn004F_001A_exit
fn004F_001A_exit:


// fn004F_00BC
// Return size: 4
void fn004F_00BC()
fn004F_00BC_entry:
	// succ:  l004F_00BC
l004F_00BC:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0014
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = 0xFFFF
	ax = Mem0[ss:bp + 0x0006:word16]
	si = ax
	bx = ax
	SZO = cond(Mem0[ds:bx + 0x0006:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l004F_00DE
	// succ:  l004F_00D6 l004F_00DE
l004F_00D6:
	Mem0[ds:bx + 0x0006:byte] = 0x00
	goto l004F_01A4
	// succ:  l004F_01A4
l004F_00DE:
	SZO = cond(Mem0[ds:si + 0x0006:byte] & 0x83)
	C = false
	branch Test(NE,Z) l004F_00E7
	// succ:  l004F_00E4 l004F_00E7
l004F_00E4:
	goto l004F_01A0
	// succ:  l004F_01A0
l004F_00E7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_151C (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	di = ax
	bx = si
	bx = bx - 0x0A30
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x0AD4:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_1368 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	al = Mem0[ds:si + 0x0007:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0014:word16] = ax
	SCZO = cond(ax - Mem0[ds:0x08A6:word16])
	branch Test(LE,SZO) l004F_012A
	// succ:  l004F_0112 l004F_012A
l004F_0112:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	sp = sp - 0x0002
	call fn004F_21C1 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l004F_013C
	// succ:  l004F_0124 l004F_013C
l004F_0124:
	ax = 0x0001
	goto l004F_013E
	// succ:  l004F_013E
l004F_012A:
	al = Mem0[ds:si + 0x0007:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_1B46 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l004F_0124
	// succ:  l004F_013C l004F_0124
l004F_013C:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l004F_013E
l004F_013E:
	Mem0[ss:bp - 0x0012:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l004F_019D
	// succ:  l004F_0145 l004F_019D
l004F_0145:
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - ax)
	branch Test(EQ,Z) l004F_01A0
	// succ:  l004F_014A l004F_01A0
l004F_014A:
	ax = 0x0876
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_1F96 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = bp - 0x000C
	Mem0[ss:bp - 0x0010:word16] = ax
	SCZO = cond(Mem0[ss:bp - 0x000E:byte] - 0x5C)
	branch Test(EQ,Z) l004F_0178
	// succ:  l004F_0166 l004F_0178
l004F_0166:
	ax = 0x0878
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_1F56 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	goto l004F_017B
	// succ:  l004F_017B
l004F_0178:
	v17 = Mem0[ss:bp - 0x0010:word16] - 0x0001
	Mem0[ss:bp - 0x0010:word16] = v17
	SZO = cond(v17)
	// succ:  l004F_017B
l004F_017B:
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	call fn004F_03FE (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_09DC (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_01A0
	// succ:  l004F_019D l004F_01A0
l004F_019D:
	di = 0xFFFF
	di = 0xFFFF
	// succ:  l004F_01A0
l004F_01A0:
	Mem0[ds:si + 0x0006:byte] = 0x00
	// succ:  l004F_01A4
l004F_01A4:
	ax = di
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_00BC_exit
fn004F_00BC_exit:


// fn004F_01B0
// Return size: 4
void fn004F_01B0()
fn004F_01B0_entry:
	// succ:  l004F_01B0
l004F_01B0:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn004F_1B0A (retsize: 2;)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l004F_01C6
	// succ:  l004F_01C1 l004F_01C6
l004F_01C1:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l004F_01D8
	// succ:  l004F_01D8
l004F_01C6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn004F_1394 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	// succ:  l004F_01D8
l004F_01D8:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_01B0_exit
fn004F_01B0_exit:


// fn004F_01E0
// Return size: 4
void fn004F_01E0()
fn004F_01E0_entry:
	// succ:  l004F_01E0
l004F_01E0:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn004F_01B0 (retsize: 2;)
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_01E0_exit
fn004F_01E0_exit:


// fn004F_01FA
// Return size: 4
void fn004F_01FA()
fn004F_01FA_entry:
	// succ:  l004F_01FA
l004F_01FA:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = Mem0[ss:bp + 0x0008:word16]
	dx_ax = Mem0[ss:bp + 0x000A:word16] *u ax
	SCZO = cond(dx_ax)
	cx = ax
	branch cx == 0x0000 l004F_0270
	// succ:  l004F_0213 l004F_0270
l004F_0213:
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = Mem0[ss:bp + 0x0006:word16]
	si = Mem0[ss:bp + 0x000C:word16]
	di = 0x0AD0
	ax = si
	ax = ax - 0x0A30
	SCZO = cond(ax)
	di = di + ax
	SCZO = cond(di)
	SZO = cond(Mem0[ds:si + 0x0006:byte] & 0x0C)
	C = false
	branch Test(NE,Z) l004F_0231
	// succ:  l004F_022C l004F_0231
l004F_022C:
	SZO = cond(Mem0[ds:di:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l004F_0236
	// succ:  l004F_0231 l004F_0236
l004F_0231:
	ax = Mem0[ds:di + 0x0002:word16]
	goto l004F_0239
	// succ:  l004F_0239
l004F_0236:
	ax = 0x0200
	// succ:  l004F_0239
l004F_0239:
	Mem0[ss:bp - 0x0006:word16] = ax
	// succ:  l004F_023C
l004F_023C:
	SZO = cond(Mem0[ds:si + 0x0006:byte] & 0x0C)
	C = false
	branch Test(NE,Z) l004F_0247
	// succ:  l004F_0242 l004F_0247
l004F_0242:
	SZO = cond(Mem0[ds:di:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l004F_0276
	// succ:  l004F_0247 l004F_0276
l004F_0247:
	ax = Mem0[ds:si + 0x0002:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_0276
	// succ:  l004F_024E l004F_0276
l004F_024E:
	SCZO = cond(ax - cx)
	branch Test(ULE,CZ) l004F_0254
	// succ:  l004F_0252 l004F_0254
l004F_0252:
	ax = cx
	// succ:  l004F_0254
l004F_0254:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	call fn004F_2118 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = cx - ax
	SCZO = cond(cx)
	v18 = Mem0[ds:si + 0x0002:word16] - ax
	Mem0[ds:si + 0x0002:word16] = v18
	SCZO = cond(v18)
	bx = bx + ax
	SCZO = cond(bx)
	v19 = Mem0[ds:si:word16] + ax
	Mem0[ds:si:word16] = v19
	SCZO = cond(v19)
	goto l004F_0272
	// succ:  l004F_0272
l004F_0270:
	goto l004F_02DE
	// succ:  l004F_02DE
l004F_0272:
	branch cx == 0x0000 l004F_02CD
	// succ:  l004F_0274 l004F_02CD
l004F_0274:
	goto l004F_023C
	// succ:  l004F_023C
l004F_0276:
	SCZO = cond(cx - Mem0[ss:bp - 0x0006:word16])
	branch Test(ULT,C) l004F_02A8
	// succ:  l004F_027B l004F_02A8
l004F_027B:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = cx
	dx = dx_ax % Mem0[ss:bp - 0x0006:word16]
	ax = dx_ax /u Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax)
	ax = cx
	ax = ax - dx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	al = Mem0[ds:si + 0x0007:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_1C52 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_02C3
	// succ:  l004F_029D l004F_02C3
l004F_029D:
	SCZO = cond(ax - 0xFFFF)
	branch Test(EQ,Z) l004F_02C9
	// succ:  l004F_02A2 l004F_02C9
l004F_02A2:
	cx = cx - ax
	SCZO = cond(cx)
	bx = bx + ax
	SCZO = cond(bx)
	goto l004F_0272
	// succ:  l004F_0272
l004F_02A8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn004F_11D2 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	SCZO = cond(ax - 0xFFFF)
	branch Test(EQ,Z) l004F_02CD
	// succ:  l004F_02B7 l004F_02CD
l004F_02B7:
	Mem0[ds:bx:byte] = al
	bx = bx + 0x0001
	SZO = cond(bx)
	cx = cx - 0x0001
	SZO = cond(cx)
	ax = Mem0[ds:di + 0x0002:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	goto l004F_0272
	// succ:  l004F_0272
l004F_02C3:
	v22 = Mem0[ds:si + 0x0006:byte] | 0x10
	Mem0[ds:si + 0x0006:byte] = v22
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	goto l004F_02CD
	// succ:  l004F_02CD
l004F_02C9:
	v21 = Mem0[ds:si + 0x0006:byte] | 0x20
	Mem0[ds:si + 0x0006:byte] = v21
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	// succ:  l004F_02CD
l004F_02CD:
	branch cx == 0x0000 l004F_02DB
	// succ:  l004F_02CF l004F_02DB
l004F_02CF:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	dx = dx_ax % Mem0[ss:bp + 0x0008:word16]
	ax = dx_ax /u Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(ax)
	goto l004F_02DE
	// succ:  l004F_02DE
l004F_02DB:
	ax = Mem0[ss:bp + 0x000A:word16]
	// succ:  l004F_02DE
l004F_02DE:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_01FA_exit
fn004F_01FA_exit:


// fn004F_02EA
// Return size: 4
void fn004F_02EA()
fn004F_02EA_entry:
	// succ:  l004F_02EA
l004F_02EA:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = Mem0[ss:bp + 0x0008:word16]
	dx_ax = Mem0[ss:bp + 0x000A:word16] *u ax
	SCZO = cond(dx_ax)
	cx = ax
	branch cx == 0x0000 l004F_0360
	// succ:  l004F_0303 l004F_0360
l004F_0303:
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = Mem0[ss:bp + 0x0006:word16]
	si = Mem0[ss:bp + 0x000C:word16]
	di = 0x0AD0
	ax = si
	ax = ax - 0x0A30
	SCZO = cond(ax)
	di = di + ax
	SCZO = cond(di)
	SZO = cond(Mem0[ds:si + 0x0006:byte] & 0x0C)
	C = false
	branch Test(NE,Z) l004F_0321
	// succ:  l004F_031C l004F_0321
l004F_031C:
	SZO = cond(Mem0[ds:di:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l004F_0326
	// succ:  l004F_0321 l004F_0326
l004F_0321:
	ax = Mem0[ds:di + 0x0002:word16]
	goto l004F_0329
	// succ:  l004F_0329
l004F_0326:
	ax = 0x0200
	// succ:  l004F_0329
l004F_0329:
	Mem0[ss:bp - 0x0006:word16] = ax
	// succ:  l004F_032C
l004F_032C:
	SZO = cond(Mem0[ds:si + 0x0006:byte] & 0x08)
	C = false
	branch Test(NE,Z) l004F_0337
	// succ:  l004F_0332 l004F_0337
l004F_0332:
	SZO = cond(Mem0[ds:di:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l004F_0369
	// succ:  l004F_0337 l004F_0369
l004F_0337:
	ax = Mem0[ds:si + 0x0002:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_0369
	// succ:  l004F_033E l004F_0369
l004F_033E:
	SCZO = cond(ax - cx)
	branch Test(ULE,CZ) l004F_0344
	// succ:  l004F_0342 l004F_0344
l004F_0342:
	ax = cx
	// succ:  l004F_0344
l004F_0344:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	sp = sp - 0x0002
	call fn004F_2118 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = cx - ax
	SCZO = cond(cx)
	v18 = Mem0[ds:si + 0x0002:word16] - ax
	Mem0[ds:si + 0x0002:word16] = v18
	SCZO = cond(v18)
	bx = bx + ax
	SCZO = cond(bx)
	v19 = Mem0[ds:si:word16] + ax
	Mem0[ds:si:word16] = v19
	SCZO = cond(v19)
	goto l004F_0363
	// succ:  l004F_0363
l004F_0360:
	goto l004F_03EF
	// succ:  l004F_03EF
l004F_0363:
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(NE,Z) l004F_032C
	// succ:  l004F_0367 l004F_032C
l004F_0367:
	goto l004F_03DE
	// succ:  l004F_03DE
l004F_0369:
	SCZO = cond(cx - Mem0[ss:bp - 0x0006:word16])
	branch Test(ULT,C) l004F_03B5
	// succ:  l004F_036E l004F_03B5
l004F_036E:
	SZO = cond(Mem0[ds:si + 0x0006:byte] & 0x08)
	C = false
	branch Test(NE,Z) l004F_0379
	// succ:  l004F_0374 l004F_0379
l004F_0374:
	SZO = cond(Mem0[ds:di:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l004F_0386
	// succ:  l004F_0379 l004F_0386
l004F_0379:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_151C (retsize: 2;)
	dx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l004F_03DE
	// succ:  l004F_0386 l004F_03DE
l004F_0386:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = cx
	dx = dx_ax % Mem0[ss:bp - 0x0006:word16]
	ax = dx_ax /u Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax)
	ax = cx
	ax = ax - dx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	al = Mem0[ds:si + 0x0007:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_1DBC (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	dx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	SCZO = cond(ax - 0xFFFF)
	branch Test(EQ,Z) l004F_03DA
	// succ:  l004F_03AB l004F_03DA
l004F_03AB:
	cx = cx - ax
	SCZO = cond(cx)
	SCZO = cond(ax - dx)
	branch Test(NE,Z) l004F_03DA
	// succ:  l004F_03B1 l004F_03DA
l004F_03B1:
	bx = bx + ax
	SCZO = cond(bx)
	goto l004F_0363
	// succ:  l004F_0363
l004F_03B5:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	al = Mem0[ds:bx:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_1276 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	SCZO = cond(ax - 0xFFFF)
	branch Test(EQ,Z) l004F_03DE
	// succ:  l004F_03CB l004F_03DE
l004F_03CB:
	bx = bx + 0x0001
	SZO = cond(bx)
	cx = cx - 0x0001
	SZO = cond(cx)
	ax = Mem0[ds:di + 0x0002:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l004F_03D5
	// succ:  l004F_03D4 l004F_03D5
l004F_03D4:
	ax = ax + 0x0001
	SZO = cond(ax)
	// succ:  l004F_03D5
l004F_03D5:
	Mem0[ss:bp - 0x0006:word16] = ax
	goto l004F_0363
	// succ:  l004F_0363
l004F_03DA:
	v21 = Mem0[ds:si + 0x0006:byte] | 0x20
	Mem0[ds:si + 0x0006:byte] = v21
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	// succ:  l004F_03DE
l004F_03DE:
	branch cx == 0x0000 l004F_03EC
	// succ:  l004F_03E0 l004F_03EC
l004F_03E0:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	dx = dx_ax % Mem0[ss:bp + 0x0008:word16]
	ax = dx_ax /u Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(ax)
	goto l004F_03EF
	// succ:  l004F_03EF
l004F_03EC:
	ax = Mem0[ss:bp + 0x000A:word16]
	// succ:  l004F_03EF
l004F_03EF:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_02EA_exit
fn004F_02EA_exit:


// fn004F_03FA
// Return size: 4
void fn004F_03FA()
fn004F_03FA_entry:
	// succ:  l004F_03FA
l004F_03FA:
	sp = fp
	// succ:  l004F_1FC8
l004F_1FC8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx_ax = (int32) ax
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	// succ:  l004F_1FD5
l004F_1FD5:
	al = Mem0[si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x20)
	branch Test(EQ,Z) l004F_1FD5
	// succ:  l004F_1FDA l004F_1FD5
l004F_1FDA:
	SCZO = cond(al - 0x09)
	branch Test(EQ,Z) l004F_1FD5
	// succ:  l004F_1FDE l004F_1FD5
l004F_1FDE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SCZO = cond(al - 0x2D)
	branch Test(EQ,Z) l004F_1FE7
	// succ:  l004F_1FE3 l004F_1FE7
l004F_1FE3:
	SCZO = cond(al - 0x2B)
	branch Test(NE,Z) l004F_1FE8
	// succ:  l004F_1FE7 l004F_1FE8
l004F_1FE7:
	al = Mem0[si:byte]
	si = si + 0x0001
	// succ:  l004F_1FE8
l004F_1FE8:
	SCZO = cond(al - 0x39)
	branch Test(UGT,CZ) l004F_200B
	// succ:  l004F_1FEC l004F_200B
l004F_1FEC:
	al = al - 0x30
	SCZO = cond(al)
	branch Test(ULT,C) l004F_200B
	// succ:  l004F_1FF0 l004F_200B
l004F_1FF0:
	bx = bx << 0x0001
	SCZO = cond(bx)
	v17 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v17
	cx = bx
	di = dx
	bx = bx << 0x0001
	SCZO = cond(bx)
	v19 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v19
	bx = bx << 0x0001
	SCZO = cond(bx)
	v20 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v20
	bx = bx + cx
	SCZO = cond(bx)
	dx = dx + di + C
	SCZO = cond(dx)
	bx = bx + ax
	SCZO = cond(bx)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	goto l004F_1FE7
	// succ:  l004F_1FE7
l004F_200B:
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	SCZO = cond(al - 0x2D)
	v21 = ax
	ax = bx
	bx = v21
	branch Test(NE,Z) l004F_2018
	// succ:  l004F_2011 l004F_2018
l004F_2011:
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	// succ:  l004F_2018
l004F_2018:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_03FA_exit
fn004F_03FA_exit:


// fn004F_03FE
// Return size: 0
void fn004F_03FE()
fn004F_03FE_entry:
	// succ:  l004F_03FE
l004F_03FE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	bl = 0x01
	cx = Mem0[ss:bp + 0x000A:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	SCZO = cond(cx - 0x000A)
	branch Test(NE,Z) l004F_0413
	// succ:  l004F_0412 l004F_0413
l004F_0412:
	dx_ax = (int32) ax
	// succ:  l004F_0413
l004F_0413:
	di = Mem0[ss:bp + 0x0008:word16]
	// succ:  l004F_0416_thunk_fn004F_2150
l004F_0416_thunk_fn004F_2150:
	call fn004F_2150 (retsize: 0;)
	return
	// succ:  fn004F_03FE_exit
fn004F_03FE_exit:


// fn004F_041A
// Return size: 0
void fn004F_041A()
fn004F_041A_entry:
	// succ:  l004F_041A
l004F_041A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	bl = 0x01
	// succ:  l004F_0421_thunk_fn004F_2144
l004F_0421_thunk_fn004F_2144:
	call fn004F_2144 (retsize: 0;)
	return
	// succ:  fn004F_041A_exit
fn004F_041A_exit:


// fn004F_0424
// Return size: 4
void fn004F_0424()
fn004F_0424_entry:
	// succ:  l004F_0424
l004F_0424:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	bl = 0x00
	// succ:  l004F_0429_thunk_fn004F_2144
l004F_0429_thunk_fn004F_2144:
	call fn004F_2144 (retsize: 0;)
	return
	// succ:  fn004F_0424_exit
fn004F_0424_exit:


// fn004F_042E
// Return size: 4
void fn004F_042E()
fn004F_042E_entry:
	// succ:  l004F_042E
l004F_042E:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(LT,SO) l004F_0449
	// succ:  l004F_0441 l004F_0449
l004F_0441:
	ax = Mem0[ds:0x08AA:word16]
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - ax)
	branch Test(LT,SO) l004F_044E
	// succ:  l004F_0449 l004F_044E
l004F_0449:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l004F_0518
	// succ:  l004F_0518
l004F_044E:
	sp = sp - 0x0002
	call fn004F_1B0A (retsize: 2;)
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l004F_0449
	// succ:  l004F_0459 l004F_0449
l004F_0459:
	ax = ax - 0x0A30
	SCZO = cond(ax)
	ax = ax + 0x0AD0
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	al = Mem0[ds:si:byte]
	ax = (int16) al
	SCZO = cond(ax - 0x0077)
	branch Test(EQ,Z) l004F_04C0
	// succ:  l004F_046A l004F_04C0
l004F_046A:
	branch Test(UGT,CZ) l004F_0474
	// succ:  l004F_046C l004F_0474
l004F_046C:
	al = al - 0x61
	SCZO = cond(al)
	branch Test(EQ,Z) l004F_04C0
	// succ:  l004F_0470 l004F_04C0
l004F_0470:
	al = al - 0x11
	SCZO = cond(al)
	branch Test(EQ,Z) l004F_047A
	// succ:  l004F_0474 l004F_047A
l004F_0474:
	di = di ^ di
	SZO = cond(di)
	C = false
	goto l004F_0516
	// succ:  l004F_0516
l004F_047A:
	Mem0[ds:di + 0x0006:byte] = 0x01
	// succ:  l004F_047E
l004F_047E:
	Mem0[ss:bp - 0x0006:word16] = 0x0001
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = ax
	al = Mem0[ds:0x0964:byte]
	bx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:bx:byte] = al
	// succ:  l004F_0493
l004F_0493:
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(Mem0[ds:si:byte] - 0x00)
	branch Test(EQ,Z) l004F_050C
	// succ:  l004F_0499 l004F_050C
l004F_0499:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l004F_050C
	// succ:  l004F_049F l004F_050C
l004F_049F:
	al = Mem0[ds:si:byte]
	ax = (int16) al
	SCZO = cond(ax - 0x0074)
	branch Test(EQ,Z) l004F_04D6
	// succ:  l004F_04A7 l004F_04D6
l004F_04A7:
	branch Test(UGT,CZ) l004F_04B9
	// succ:  l004F_04A9 l004F_04B9
l004F_04A9:
	al = al - 0x2B
	SCZO = cond(al)
	branch Test(EQ,Z) l004F_04C6
	// succ:  l004F_04AD l004F_04C6
l004F_04AD:
	al = al - 0x37
	SCZO = cond(al)
	branch Test(EQ,Z) l004F_04D6
	// succ:  l004F_04B1 l004F_04D6
l004F_04B1:
	al = al - 0x01
	SZO = cond(al)
	branch Test(EQ,Z) l004F_04E4
	// succ:  l004F_04B5 l004F_04E4
l004F_04B5:
	al = al - 0x0B
	SCZO = cond(al)
	branch Test(EQ,Z) l004F_04F8
	// succ:  l004F_04B9 l004F_04F8
l004F_04B9:
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	goto l004F_0493
	// succ:  l004F_0493
l004F_04C0:
	Mem0[ds:di + 0x0006:byte] = 0x02
	goto l004F_047E
	// succ:  l004F_047E
l004F_04C6:
	al = Mem0[ds:di + 0x0006:byte]
	ax = (int16) al
	SCZO = cond(ax - 0x0080)
	branch Test(EQ,Z) l004F_04B9
	// succ:  l004F_04CF l004F_04B9
l004F_04CF:
	Mem0[ds:di + 0x0006:byte] = 0x80
	goto l004F_0493
	// succ:  l004F_0493
l004F_04D6:
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0000)
	branch Test(NE,Z) l004F_04B9
	// succ:  l004F_04DC l004F_04B9
l004F_04DC:
	Mem0[ss:bp - 0x0008:word16] = 0x0001
	goto l004F_0493
	// succ:  l004F_0493
l004F_04E4:
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0000)
	branch Test(NE,Z) l004F_04B9
	// succ:  l004F_04EA l004F_04B9
l004F_04EA:
	Mem0[ss:bp - 0x000A:word16] = 0x0001
	bx = Mem0[ss:bp - 0x0004:word16]
	v19 = Mem0[ds:bx:byte] | 0x40
	Mem0[ds:bx:byte] = v19
	SZO = cond(Mem0[ds:bx:byte])
	C = false
	goto l004F_0493
	// succ:  l004F_0493
l004F_04F8:
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0000)
	branch Test(NE,Z) l004F_04B9
	// succ:  l004F_04FE l004F_04B9
l004F_04FE:
	Mem0[ss:bp - 0x000A:word16] = 0x0001
	bx = Mem0[ss:bp - 0x0004:word16]
	v18 = Mem0[ds:bx:byte] & 0xBF
	Mem0[ds:bx:byte] = v18
	SZO = cond(Mem0[ds:bx:byte])
	C = false
	goto l004F_0493
	// succ:  l004F_0493
l004F_050C:
	v17 = Mem0[ds:0x08FE:word16] + 0x0001
	Mem0[ds:0x08FE:word16] = v17
	SZO = cond(v17)
	al = Mem0[ss:bp + 0x0006:byte]
	Mem0[ds:di + 0x0007:byte] = al
	// succ:  l004F_0516
l004F_0516:
	ax = di
	// succ:  l004F_0518
l004F_0518:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_042E_exit
fn004F_042E_exit:


// fn004F_0522
// Return size: 4
void fn004F_0522()
fn004F_0522_entry:
	// succ:  l004F_0522
l004F_0522:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	SZO = cond(Mem0[ds:si + 0x0006:byte] & 0x83)
	C = false
	branch Test(EQ,Z) l004F_053D
	// succ:  l004F_0531 l004F_053D
l004F_0531:
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0002)
	branch Test(GT,SZO) l004F_053D
	// succ:  l004F_0537 l004F_053D
l004F_0537:
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0000)
	branch Test(GE,SO) l004F_0546
	// succ:  l004F_053D l004F_0546
l004F_053D:
	Mem0[ds:0x0896:word16] = 0x0016
	goto l004F_0595
	// succ:  l004F_0595
l004F_0546:
	v12 = Mem0[ds:si + 0x0006:byte] & 0xEF
	Mem0[ds:si + 0x0006:byte] = v12
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0001)
	branch Test(NE,Z) l004F_0564
	// succ:  l004F_0550 l004F_0564
l004F_0550:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn004F_05A4 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	v14 = Mem0[ss:bp + 0x0008:word16] + ax
	Mem0[ss:bp + 0x0008:word16] = v14
	SCZO = cond(v14)
	v16 = Mem0[ss:bp + 0x000A:word16] + dx + C
	Mem0[ss:bp + 0x000A:word16] = v16
	SCZO = cond(v16)
	Mem0[ss:bp + 0x000C:word16] = 0x0000
	// succ:  l004F_0564
l004F_0564:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_151C (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	SZO = cond(Mem0[ds:si + 0x0006:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l004F_0575
	// succ:  l004F_0571 l004F_0575
l004F_0571:
	v17 = Mem0[ds:si + 0x0006:byte] & 0xFC
	Mem0[ds:si + 0x0006:byte] = v17
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	// succ:  l004F_0575
l004F_0575:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[ds:si + 0x0007:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_1B7E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l004F_059A
	// succ:  l004F_0591 l004F_059A
l004F_0591:
	SCZO = cond(dx - ax)
	branch Test(NE,Z) l004F_059A
	// succ:  l004F_0595 l004F_059A
l004F_0595:
	ax = 0xFFFF
	ax = 0xFFFF
	goto l004F_059C
	// succ:  l004F_059C
l004F_059A:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l004F_059C
l004F_059C:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_0522_exit
fn004F_0522_exit:


// fn004F_05A4
// Return size: 4
void fn004F_05A4()
fn004F_05A4_entry:
	// succ:  l004F_05A4
l004F_05A4:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0012
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	ax = si
	ax = ax - 0x0A30
	SCZO = cond(ax)
	ax = ax + 0x0AD0
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	al = Mem0[ds:si + 0x0007:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x000E:word16] = ax
	SCZO = cond(Mem0[ds:si + 0x0002:word16] - 0x0000)
	branch Test(GE,SO) l004F_05CF
	// succ:  l004F_05CA l004F_05CF
l004F_05CA:
	Mem0[ds:si + 0x0002:word16] = 0x0000
	// succ:  l004F_05CF
l004F_05CF:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	call fn004F_1B7E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(GE,SO) l004F_05F4
	// succ:  l004F_05EC l004F_05F4
l004F_05EC:
	ax = 0xFFFF
	dx_ax = (int32) ax
	goto l004F_071A
	// succ:  l004F_071A
l004F_05F4:
	SZO = cond(Mem0[ds:si + 0x0006:byte] & 0x08)
	C = false
	branch Test(NE,Z) l004F_0618
	// succ:  l004F_05FA l004F_0618
l004F_05FA:
	bx = Mem0[ss:bp - 0x0004:word16]
	SZO = cond(Mem0[ds:bx:byte] & 0x01)
	C = false
	branch Test(NE,Z) l004F_0618
	// succ:  l004F_0602 l004F_0618
l004F_0602:
	ax = Mem0[ds:si + 0x0002:word16]
	dx_ax = (int32) ax
	cx = ax
	bx = dx
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx - bx - C
	SCZO = cond(dx)
	goto l004F_071A
	// succ:  l004F_071A
l004F_0618:
	ax = Mem0[ds:si:word16]
	ax = ax - Mem0[ds:si + 0x0004:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	SZO = cond(Mem0[ds:si + 0x0006:byte] & 0x03)
	C = false
	branch Test(EQ,Z) l004F_0654
	// succ:  l004F_0626 l004F_0654
l004F_0626:
	bx = Mem0[ss:bp - 0x000E:word16]
	SZO = cond(Mem0[ds:bx + 0x08AC:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l004F_0643
	// succ:  l004F_0630 l004F_0643
l004F_0630:
	di = Mem0[ds:si + 0x0004:word16]
	goto l004F_063F
	// succ:  l004F_063F
l004F_0636:
	SCZO = cond(Mem0[ds:di:byte] - 0x0A)
	branch Test(NE,Z) l004F_063E
	// succ:  l004F_063B l004F_063E
l004F_063B:
	v21 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v21
	SZO = cond(v21)
	// succ:  l004F_063E
l004F_063E:
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l004F_063F
l004F_063F:
	SCZO = cond(Mem0[ds:si:word16] - di)
	branch Test(UGT,CZ) l004F_0636
	// succ:  l004F_0643 l004F_0636
l004F_0643:
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax | Mem0[ss:bp - 0x000A:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l004F_0662
	// succ:  l004F_064B l004F_0662
l004F_064B:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = dx - dx
	SCZO = cond(dx)
	goto l004F_071A
	// succ:  l004F_071A
l004F_0654:
	SZO = cond(Mem0[ds:si + 0x0006:byte] & 0x80)
	C = false
	branch Test(NE,Z) l004F_0643
	// succ:  l004F_065A l004F_0643
l004F_065A:
	Mem0[ds:0x0896:word16] = 0x0016
	goto l004F_05EC
	// succ:  l004F_05EC
l004F_0662:
	SZO = cond(Mem0[ds:si + 0x0006:byte] & 0x01)
	C = false
	branch Test(NE,Z) l004F_066B
	// succ:  l004F_0668 l004F_066B
l004F_0668:
	goto l004F_070E
	// succ:  l004F_070E
l004F_066B:
	SCZO = cond(Mem0[ds:si + 0x0002:word16] - 0x0000)
	branch Test(NE,Z) l004F_067A
	// succ:  l004F_0671 l004F_067A
l004F_0671:
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	goto l004F_070E
	// succ:  l004F_070E
l004F_067A:
	ax = Mem0[ds:si:word16]
	ax = ax - Mem0[ds:si + 0x0004:word16]
	SCZO = cond(ax)
	ax = ax + Mem0[ds:si + 0x0002:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0010:word16] = ax
	bx = Mem0[ss:bp - 0x000E:word16]
	SZO = cond(Mem0[ds:bx + 0x08AC:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l004F_0703
	// succ:  l004F_068F l004F_0703
l004F_068F:
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	Mem0[ss:bp - 0x0012:word16] = ax
	sp = sp - 0x0002
	call fn004F_1B7E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - Mem0[ss:bp - 0x000A:word16])
	branch Test(NE,Z) l004F_06D8
	// succ:  l004F_06A8 l004F_06D8
l004F_06A8:
	SCZO = cond(dx - Mem0[ss:bp - 0x0008:word16])
	branch Test(NE,Z) l004F_06D8
	// succ:  l004F_06AD l004F_06D8
l004F_06AD:
	ax = Mem0[ss:bp - 0x0012:word16]
	ax = ax + Mem0[ds:si + 0x0004:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	di = Mem0[ds:si + 0x0004:word16]
	goto l004F_06C5
	// succ:  l004F_06C5
l004F_06BC:
	SCZO = cond(Mem0[ds:di:byte] - 0x0A)
	branch Test(NE,Z) l004F_06C4
	// succ:  l004F_06C1 l004F_06C4
l004F_06C1:
	v25 = Mem0[ss:bp - 0x0010:word16] + 0x0001
	Mem0[ss:bp - 0x0010:word16] = v25
	SZO = cond(v25)
	// succ:  l004F_06C4
l004F_06C4:
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l004F_06C5
l004F_06C5:
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - di)
	branch Test(UGT,CZ) l004F_06BC
	// succ:  l004F_06CA l004F_06BC
l004F_06CA:
	bx = Mem0[ss:bp - 0x0004:word16]
	SZO = cond(Mem0[ds:bx:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l004F_0703
	// succ:  l004F_06D2 l004F_0703
l004F_06D2:
	v24 = Mem0[ss:bp - 0x0010:word16] + 0x0001
	Mem0[ss:bp - 0x0010:word16] = v24
	SZO = cond(v24)
	goto l004F_0703
	// succ:  l004F_0703
l004F_06D8:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	call fn004F_1B7E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	bx = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[ds:bx + 0x0002:word16]
	Mem0[ss:bp - 0x0010:word16] = ax
	bx = Mem0[ss:bp - 0x000E:word16]
	SZO = cond(Mem0[ds:bx + 0x08AC:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l004F_0703
	// succ:  l004F_06FF l004F_0703
l004F_06FF:
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x0010:word16] = ax
	// succ:  l004F_0703
l004F_0703:
	ax = Mem0[ss:bp - 0x0010:word16]
	dx = dx - dx
	SCZO = cond(dx)
	v22 = Mem0[ss:bp - 0x000A:word16] - ax
	Mem0[ss:bp - 0x000A:word16] = v22
	SCZO = cond(v22)
	v23 = Mem0[ss:bp - 0x0008:word16] - dx - C
	Mem0[ss:bp - 0x0008:word16] = v23
	SCZO = cond(v23)
	// succ:  l004F_070E
l004F_070E:
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	ax = ax + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	// succ:  l004F_071A
l004F_071A:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_05A4_exit
fn004F_05A4_exit:


// fn004F_0724
// Return size: 4
void fn004F_0724()
fn004F_0724_entry:
	// succ:  l004F_0724
l004F_0724:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x0004)
	branch Test(EQ,Z) l004F_0758
	// succ:  l004F_0739 l004F_0758
l004F_0739:
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l004F_0752
	// succ:  l004F_073F l004F_0752
l004F_073F:
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x7FFF)
	branch Test(UGT,CZ) l004F_0752
	// succ:  l004F_0746 l004F_0752
l004F_0746:
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x0000)
	branch Test(EQ,Z) l004F_0758
	// succ:  l004F_074C l004F_0758
l004F_074C:
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x0040)
	branch Test(EQ,Z) l004F_0758
	// succ:  l004F_0752 l004F_0758
l004F_0752:
	ax = 0xFFFF
	goto l004F_07DD
	// succ:  l004F_07DD
l004F_0758:
	si = Mem0[ss:bp + 0x0006:word16]
	di = si
	di = di - 0x0A30
	SCZO = cond(di)
	di = di + 0x0AD0
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_151C (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_1368 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	SZO = cond(Mem0[ss:bp + 0x000A:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l004F_078E
	// succ:  l004F_0779 l004F_078E
l004F_0779:
	v14 = Mem0[ds:si + 0x0006:byte] | 0x04
	Mem0[ds:si + 0x0006:byte] = v14
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	Mem0[ds:di:byte] = 0x00
	ax = di + 0x0001
	Mem0[ss:bp + 0x0008:word16] = ax
	Mem0[ss:bp + 0x000C:word16] = 0x0001
	goto l004F_07C7
	// succ:  l004F_07C7
l004F_078E:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(NE,Z) l004F_07BC
	// succ:  l004F_0794 l004F_07BC
l004F_0794:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	call fn004F_25F8 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	Mem0[ss:bp + 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l004F_07AE
	// succ:  l004F_07A6 l004F_07AE
l004F_07A6:
	Mem0[ss:bp - 0x0004:word16] = 0xFFFF
	goto l004F_07DA
	// succ:  l004F_07DA
l004F_07AE:
	v17 = Mem0[ds:si + 0x0006:byte] & 0xFB
	Mem0[ds:si + 0x0006:byte] = v17
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	v18 = Mem0[ds:si + 0x0006:byte] | 0x08
	Mem0[ds:si + 0x0006:byte] = v18
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	Mem0[ds:di:byte] = 0x00
	goto l004F_07C7
	// succ:  l004F_07C7
l004F_07BC:
	v15 = Mem0[ds:0x08FE:word16] + 0x0001
	Mem0[ds:0x08FE:word16] = v15
	SZO = cond(v15)
	v16 = Mem0[ds:si + 0x0006:byte] & 0xF3
	Mem0[ds:si + 0x0006:byte] = v16
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	Mem0[ds:di:byte] = 0x01
	// succ:  l004F_07C7
l004F_07C7:
	ax = Mem0[ss:bp + 0x000C:word16]
	Mem0[ds:di + 0x0002:word16] = ax
	ax = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:si + 0x0004:word16] = ax
	Mem0[ds:si:word16] = ax
	Mem0[ds:si + 0x0002:word16] = 0x0000
	// succ:  l004F_07DA
l004F_07DA:
	ax = Mem0[ss:bp - 0x0004:word16]
	// succ:  l004F_07DD
l004F_07DD:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_0724_exit
fn004F_0724_exit:


// fn004F_07E6
// Return size: 4
void fn004F_07E6()
fn004F_07E6_entry:
	// succ:  l004F_07E6
l004F_07E6:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ds:0x0CD2:byte] = 0x42
	ax = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:0x0CD0:word16] = ax
	si = 0x0CCC
	Mem0[ds:si:word16] = ax
	Mem0[ds:0x0CCE:word16] = 0x7FFF
	ax = bp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_1622 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	di = ax
	v11 = Mem0[ds:0x0CCE:word16] - 0x0001
	Mem0[ds:0x0CCE:word16] = v11
	SZO = cond(v11)
	branch Test(SG,S) l004F_082E
	// succ:  l004F_0820 l004F_082E
l004F_0820:
	bx = Mem0[ds:0x0CCC:word16]
	v14 = Mem0[ds:0x0CCC:word16] + 0x0001
	Mem0[ds:0x0CCC:word16] = v14
	SZO = cond(v14)
	Mem0[ds:bx:byte] = 0x00
	goto l004F_083A
	// succ:  l004F_083A
l004F_082E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_1276 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l004F_083A
l004F_083A:
	ax = di
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_07E6_exit
fn004F_07E6_exit:


// fn004F_0846
// Return size: 4
void fn004F_0846()
fn004F_0846_entry:
	// succ:  l004F_0846
l004F_0846:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ah = 0x2A
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_0863
	// succ:  l004F_085C l004F_0863
l004F_085C:
	DOS3Call()
	goto l004F_0865
	// succ:  l004F_0865
l004F_0863:
	__syscall(0x21)
	// succ:  l004F_0865
l004F_0865:
	bx = dx
	si = cx
	ah = 0x2C
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_087B
	// succ:  l004F_0874 l004F_087B
l004F_0874:
	DOS3Call()
	goto l004F_087D
	// succ:  l004F_087D
l004F_087B:
	__syscall(0x21)
	// succ:  l004F_087D
l004F_087D:
	ah = 0x00
	al = dh
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = cl
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = ch
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ah = 0x2A
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_089B
	// succ:  l004F_0894 l004F_089B
l004F_0894:
	DOS3Call()
	goto l004F_089D
	// succ:  l004F_089D
l004F_089B:
	__syscall(0x21)
	// succ:  l004F_089D
l004F_089D:
	SCZO = cond(bx - dx)
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	branch Test(EQ,Z) l004F_08AA
	// succ:  l004F_08A2 l004F_08AA
l004F_08A2:
	SCZO = cond(al - 0x17)
	branch Test(NE,Z) l004F_08AA
	// succ:  l004F_08A6 l004F_08AA
l004F_08A6:
	dx = bx
	cx = si
	// succ:  l004F_08AA
l004F_08AA:
	ah = 0x00
	al = dl
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = dh
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - 0x07BC
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn004F_201C (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l004F_08CD
	// succ:  l004F_08C5 l004F_08CD
l004F_08C5:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx + 0x0002:word16] = dx
	Mem0[ds:bx:word16] = ax
	// succ:  l004F_08CD
l004F_08CD:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_0846_exit
fn004F_0846_exit:


// fn004F_08D8
// Return size: 4
void fn004F_08D8()
fn004F_08D8_entry:
	// succ:  l004F_08D8
l004F_08D8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0020
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	si = Mem0[ss:bp + 0x0008:word16]
	ax = ss
	es = ax
	cx = 0x0010
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = bp - 0x0020
	// succ:  l004F_08EF
l004F_08EF:
	branch cx == 0x0000 l004F_08F1
	// succ:  l004F_08EF_1 l004F_08F1
l004F_08EF_1:
	Mem0[di:word16] = ax
	di = di + 0x0002
	cx = cx - 0x0001
	goto l004F_08EF
	// succ:  l004F_08EF
l004F_08F1:
	al = Mem0[si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l004F_090A
	// succ:  l004F_08F6 l004F_090A
l004F_08F6:
	di = ax
	cx = ax
	al = 0x01
	cl = cl & 0x07
	SZO = cond(cl)
	C = false
	al = al << cl
	SCZO = cond(al)
	cl = 0x03
	di = di >>u cl
	SCZO = cond(di)
	v16 = Mem0[ss:bp - 0x0020 + di:byte] | al
	Mem0[ss:bp - 0x0020 + di:byte] = v16
	SZO = cond(Mem0[ss:bp - 0x0020 + di:byte])
	C = false
	goto l004F_08F1
	// succ:  l004F_08F1
l004F_090A:
	si = Mem0[ss:bp + 0x0006:word16]
	bx = 0xFFFF
	// succ:  l004F_0910
l004F_0910:
	bx = bx + 0x0001
	SZO = cond(bx)
	al = Mem0[si:byte]
	si = si + 0x0001
	ax = ax & 0x00FF
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_092B
	// succ:  l004F_0917 l004F_092B
l004F_0917:
	di = ax
	cx = ax
	al = 0x01
	cl = cl & 0x07
	SZO = cond(cl)
	C = false
	al = al << cl
	SCZO = cond(al)
	cl = 0x03
	di = di >>u cl
	SCZO = cond(di)
	al = al & Mem0[ss:(bp - 0x0020) + di:byte]
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l004F_0910
	// succ:  l004F_092B l004F_0910
l004F_092B:
	v18 = ax
	ax = bx
	bx = v18
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_08D8_exit
fn004F_08D8_exit:


// fn004F_0932
// Return size: 4
void fn004F_0932()
fn004F_0932_entry:
	// succ:  l004F_0932
l004F_0932:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = di
	bx = si
	ax = ds
	es = ax
	si = Mem0[ss:bp + 0x0008:word16]
	di = Mem0[ss:bp + 0x0006:word16]
	ax = di
	cx = Mem0[ss:bp + 0x000A:word16]
	branch cx == 0x0000 l004F_0974
	// succ:  l004F_094A l004F_0974
l004F_094A:
	SCZO = cond(di - si)
	branch Test(ULE,CZ) l004F_0964
	// succ:  l004F_094E l004F_0964
l004F_094E:
	ax = si
	ax = ax + cx
	SCZO = cond(ax)
	SCZO = cond(di - ax)
	branch Test(UGE,C) l004F_0964
	// succ:  l004F_0956 l004F_0964
l004F_0956:
	ax = di
	si = si + cx
	SCZO = cond(si)
	di = di + cx
	SCZO = cond(di)
	si = si - 0x0001
	SZO = cond(si)
	di = di - 0x0001
	SZO = cond(di)
	D = true
	// succ:  l004F_095F
l004F_095F:
	branch cx == 0x0000 l004F_0961
	// succ:  l004F_095F_1 l004F_0961
l004F_095F_1:
	v18 = Mem0[si:byte]
	Mem0[di:byte] = v18
	si = si - 0x0001
	di = di - 0x0001
	cx = cx - 0x0001
	goto l004F_095F
	// succ:  l004F_095F
l004F_0961:
	D = false
	goto l004F_0974
	// succ:  l004F_0974
l004F_0964:
	ax = di
	SZO = cond(al & 0x01)
	C = false
	branch Test(EQ,Z) l004F_096C
	// succ:  l004F_096A l004F_096C
l004F_096A:
	v21 = Mem0[si:byte]
	Mem0[di:byte] = v21
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l004F_096C
l004F_096C:
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l004F_096E
l004F_096E:
	branch cx == 0x0000 l004F_0970
	// succ:  l004F_096E_1 l004F_0970
l004F_096E_1:
	v22 = Mem0[si:word16]
	Mem0[di:word16] = v22
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l004F_096E
	// succ:  l004F_096E
l004F_0970:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l004F_0972
l004F_0972:
	branch cx == 0x0000 l004F_0974
	// succ:  l004F_0972_1 l004F_0974
l004F_0972_1:
	v23 = Mem0[si:byte]
	Mem0[di:byte] = v23
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l004F_0972
	// succ:  l004F_0972
l004F_0974:
	si = bx
	di = dx
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_0932_exit
fn004F_0932_exit:


// fn004F_097A
// Return size: 0
void fn004F_097A()
fn004F_097A_entry:
	// succ:  l004F_097A
l004F_097A:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = 0x4300
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_099A
	// succ:  l004F_0993 l004F_099A
l004F_0993:
	DOS3Call()
	goto l004F_099C
	// succ:  l004F_099C
l004F_099A:
	__syscall(0x21)
	// succ:  l004F_099C
l004F_099C:
	branch Test(ULT,C) l004F_09AD
	// succ:  l004F_099E l004F_09AD
l004F_099E:
	SZO = cond(Mem0[ss:bp + 0x0008:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l004F_09AD
	// succ:  l004F_09A4 l004F_09AD
l004F_09A4:
	SZO = cond(cl & 0x01)
	C = false
	branch Test(EQ,Z) l004F_09AD
	// succ:  l004F_09A9 l004F_09AD
l004F_09A9:
	ax = 0x0D00
	C = true
	// succ:  l004F_09AD
l004F_09AD:
	// succ:  l004F_115E_in_fn004F_097A
l004F_115E_in_fn004F_097A:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_097A_exit
fn004F_097A_exit:


// fn004F_09B0
// Return size: 0
void fn004F_09B0()
fn004F_09B0_entry:
	// succ:  l004F_09B0
l004F_09B0:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	dx = Mem0[ss:bp + 0x0006:word16]
	di = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ah = 0x56
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_09D5
	// succ:  l004F_09CE l004F_09D5
l004F_09CE:
	DOS3Call()
	goto l004F_09D7
	// succ:  l004F_09D7
l004F_09D5:
	__syscall(0x21)
	// succ:  l004F_09D7
l004F_09D7:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l004F_115E_in_fn004F_09B0
l004F_115E_in_fn004F_09B0:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_09B0_exit
fn004F_09B0_exit:


// fn004F_09DC
// Return size: 0
void fn004F_09DC()
fn004F_09DC_entry:
	// succ:  l004F_09DC
l004F_09DC:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	dx = Mem0[ss:bp + 0x0006:word16]
	ah = 0x41
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_09FB
	// succ:  l004F_09F4 l004F_09FB
l004F_09F4:
	DOS3Call()
	goto l004F_09FD
	// succ:  l004F_09FD
l004F_09FB:
	__syscall(0x21)
	// succ:  l004F_09FD
l004F_09FD:
	// succ:  l004F_115E_in_fn004F_09DC
l004F_115E_in_fn004F_09DC:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_09DC_exit
fn004F_09DC_exit:


// fn004F_0A00
// Return size: 4
void fn004F_0A00()
fn004F_0A00_entry:
	// succ:  l004F_0A00
l004F_0A00:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	ah = 0x2A
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_0A1C
	// succ:  l004F_0A15 l004F_0A1C
l004F_0A15:
	DOS3Call()
	goto l004F_0A1E
	// succ:  l004F_0A1E
l004F_0A1C:
	__syscall(0x21)
	// succ:  l004F_0A1E
l004F_0A1E:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx + 0x0002:word16] = cx
	Mem0[ds:bx + 0x0001:byte] = dh
	Mem0[ds:bx:byte] = dl
	Mem0[ds:bx + 0x0004:byte] = al
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_0A00_exit
fn004F_0A00_exit:


// fn004F_0A38
// Return size: 4
void fn004F_0A38()
fn004F_0A38_entry:
	// succ:  l004F_0A38
l004F_0A38:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	ah = 0x2C
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_0A54
	// succ:  l004F_0A4D l004F_0A54
l004F_0A4D:
	DOS3Call()
	goto l004F_0A56
	// succ:  l004F_0A56
l004F_0A54:
	__syscall(0x21)
	// succ:  l004F_0A56
l004F_0A56:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:byte] = ch
	Mem0[ds:bx + 0x0001:byte] = cl
	Mem0[ds:bx + 0x0002:byte] = dh
	Mem0[ds:bx + 0x0003:byte] = dl
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_0A38_exit
fn004F_0A38_exit:


// fn004F_0A70
// Return size: 4
void fn004F_0A70()
fn004F_0A70_entry:
	// succ:  l004F_0A70
l004F_0A70:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	di = di ^ di
	SZO = cond(di)
	C = false
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l004F_0A90
	// succ:  l004F_0A7F l004F_0A90
l004F_0A7F:
	di = di + 0x0001
	SZO = cond(di)
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = ax - 0x00 - C
	SCZO = cond(ax)
	Mem0[ss:bp + 0x0008:word16] = ax
	Mem0[ss:bp + 0x0006:word16] = dx
	// succ:  l004F_0A90
l004F_0A90:
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l004F_0AA8
	// succ:  l004F_0A97 l004F_0AA8
l004F_0A97:
	di = di + 0x0001
	SZO = cond(di)
	dx = Mem0[ss:bp + 0x000A:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = ax - 0x00 - C
	SCZO = cond(ax)
	Mem0[ss:bp + 0x000C:word16] = ax
	Mem0[ss:bp + 0x000A:word16] = dx
	// succ:  l004F_0AA8
l004F_0AA8:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l004F_0AC1
	// succ:  l004F_0AAC l004F_0AC1
l004F_0AAC:
	cx = Mem0[ss:bp + 0x000A:word16]
	ax = Mem0[ss:bp + 0x0008:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	bx = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	dx = bx
	goto l004F_0AF9
	// succ:  l004F_0AF9
l004F_0AC1:
	bx = ax
	cx = Mem0[ss:bp + 0x000A:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	// succ:  l004F_0ACC
l004F_0ACC:
	bx = bx >>u 0x0001
	SCZO = cond(bx)
	v17 = (cx & 0x0001 << 0x01) != 0x0000
	cx = __rcr(cx, 0x01, C)
	C = v17
	dx = dx >>u 0x0001
	SCZO = cond(dx)
	v18 = (ax & 0x0001 << 0x01) != 0x0000
	ax = __rcr(ax, 0x01, C)
	C = v18
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(NE,Z) l004F_0ACC
	// succ:  l004F_0AD8 l004F_0ACC
l004F_0AD8:
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	si = ax
	dx_ax = Mem0[ss:bp + 0x000C:word16] *u ax
	SCZO = cond(dx_ax)
	v19 = ax
	ax = cx
	cx = v19
	ax = Mem0[ss:bp + 0x000A:word16]
	dx_ax = si *u ax
	SCZO = cond(dx_ax)
	dx = dx + cx
	SCZO = cond(dx)
	branch Test(ULT,C) l004F_0AF5
	// succ:  l004F_0AE9 l004F_0AF5
l004F_0AE9:
	SCZO = cond(dx - Mem0[ss:bp + 0x0008:word16])
	branch Test(UGT,CZ) l004F_0AF5
	// succ:  l004F_0AEE l004F_0AF5
l004F_0AEE:
	branch Test(ULT,C) l004F_0AF6
	// succ:  l004F_0AF0 l004F_0AF6
l004F_0AF0:
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(ULE,CZ) l004F_0AF6
	// succ:  l004F_0AF5 l004F_0AF6
l004F_0AF5:
	si = si - 0x0001
	SZO = cond(si)
	// succ:  l004F_0AF6
l004F_0AF6:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	v21 = ax
	ax = si
	si = v21
	// succ:  l004F_0AF9
l004F_0AF9:
	di = di - 0x0001
	SZO = cond(di)
	branch Test(NE,Z) l004F_0B03
	// succ:  l004F_0AFC l004F_0B03
l004F_0AFC:
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	// succ:  l004F_0B03
l004F_0B03:
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_0A70_exit
fn004F_0A70_exit:


// fn004F_0B0A
// Return size: 4
void fn004F_0B0A()
fn004F_0B0A_entry:
	// succ:  l004F_0B0A
l004F_0B0A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 0x0008:word16]
	cx = Mem0[ss:bp + 0x000C:word16]
	cx = cx | ax
	SZO = cond(cx)
	C = false
	cx = Mem0[ss:bp + 0x000A:word16]
	branch Test(NE,Z) l004F_0B23
	// succ:  l004F_0B1A l004F_0B23
l004F_0B1A:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_0B0A_exit
l004F_0B23:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	bx = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	dx_ax = Mem0[ss:bp + 0x000C:word16] *u ax
	SCZO = cond(dx_ax)
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[ss:bp + 0x0006:word16]
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	dx = dx + bx
	SCZO = cond(dx)
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_0B0A_exit
fn004F_0B0A_exit:


// fn004F_0B3C
// Return size: 4
void fn004F_0B3C()
fn004F_0B3C_entry:
	// succ:  l004F_0B3C
l004F_0B3C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	bx = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	call fn004F_0B0A (retsize: 2;)
	sp = sp + 0x0008
	Mem0[ds:bx:word16] = ax
	Mem0[ds:bx + 0x0002:word16] = dx
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_0B3C_exit
fn004F_0B3C_exit:


// fn004F_0B5C
// Return size: 4
void fn004F_0B5C()
fn004F_0B5C_entry:
	// succ:  l004F_0B5C
l004F_0B5C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	bx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ds:bx:word16]
	dx = Mem0[ds:bx + 0x0002:word16]
	cx = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	call fn004F_21A4 (retsize: 2;)
	Mem0[ds:bx:word16] = ax
	Mem0[ds:bx + 0x0002:word16] = dx
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_0B5C_exit
fn004F_0B5C_exit:


// fn004F_0B7A
// Return size: 4
void fn004F_0B7A()
fn004F_0B7A_entry:
	// succ:  l004F_0B7A
l004F_0B7A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	bx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ds:bx:word16]
	dx = Mem0[ds:bx + 0x0002:word16]
	cx = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	call fn004F_21B0 (retsize: 2;)
	Mem0[ds:bx:word16] = ax
	Mem0[ds:bx + 0x0002:word16] = dx
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_0B7A_exit
fn004F_0B7A_exit:


// fn004F_0B98
// Return size: 4
void fn004F_0B98()
fn004F_0B98_entry:
	// succ:  l004F_0B98
l004F_0B98:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	bx = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	call fn004F_0BB8 (retsize: 2;)
	sp = sp + 0x0008
	Mem0[ds:bx + 0x0002:word16] = dx
	Mem0[ds:bx:word16] = ax
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_0B98_exit
fn004F_0B98_exit:


// fn004F_0BB8
// Return size: 4
void fn004F_0BB8()
fn004F_0BB8_entry:
	// succ:  l004F_0BB8
l004F_0BB8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l004F_0BD9
	// succ:  l004F_0BC4 l004F_0BD9
l004F_0BC4:
	cx = Mem0[ss:bp + 0x000A:word16]
	ax = Mem0[ss:bp + 0x0008:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	bx = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	dx = bx
	goto l004F_0C11
	// succ:  l004F_0C11
l004F_0BD9:
	cx = ax
	bx = Mem0[ss:bp + 0x000A:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	// succ:  l004F_0BE4
l004F_0BE4:
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	v15 = (bx & 0x0001 << 0x01) != 0x0000
	bx = __rcr(bx, 0x01, C)
	C = v15
	dx = dx >>u 0x0001
	SCZO = cond(dx)
	v16 = (ax & 0x0001 << 0x01) != 0x0000
	ax = __rcr(ax, 0x01, C)
	C = v16
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(NE,Z) l004F_0BE4
	// succ:  l004F_0BF0 l004F_0BE4
l004F_0BF0:
	dx = dx_ax % bx
	ax = dx_ax /u bx
	SCZO = cond(ax)
	si = ax
	dx_ax = Mem0[ss:bp + 0x000C:word16] *u ax
	SCZO = cond(dx_ax)
	v17 = ax
	ax = cx
	cx = v17
	ax = Mem0[ss:bp + 0x000A:word16]
	dx_ax = si *u ax
	SCZO = cond(dx_ax)
	dx = dx + cx
	SCZO = cond(dx)
	branch Test(ULT,C) l004F_0C0D
	// succ:  l004F_0C01 l004F_0C0D
l004F_0C01:
	SCZO = cond(dx - Mem0[ss:bp + 0x0008:word16])
	branch Test(UGT,CZ) l004F_0C0D
	// succ:  l004F_0C06 l004F_0C0D
l004F_0C06:
	branch Test(ULT,C) l004F_0C0E
	// succ:  l004F_0C08 l004F_0C0E
l004F_0C08:
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(ULE,CZ) l004F_0C0E
	// succ:  l004F_0C0D l004F_0C0E
l004F_0C0D:
	si = si - 0x0001
	SZO = cond(si)
	// succ:  l004F_0C0E
l004F_0C0E:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	v19 = ax
	ax = si
	si = v19
	// succ:  l004F_0C11
l004F_0C11:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_0BB8_exit
fn004F_0BB8_exit:


// fn004F_0C18
// Return size: 4
void fn004F_0C18()
fn004F_0C18_entry:
	// succ:  l004F_0C18
l004F_0C18:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l004F_0C38
	// succ:  l004F_0C23 l004F_0C38
l004F_0C23:
	cx = Mem0[ss:bp + 0x000A:word16]
	ax = Mem0[ss:bp + 0x0008:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	ax = dx
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	goto l004F_0C7D
	// succ:  l004F_0C7D
l004F_0C38:
	cx = ax
	bx = Mem0[ss:bp + 0x000A:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	// succ:  l004F_0C43
l004F_0C43:
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	v14 = (bx & 0x0001 << 0x01) != 0x0000
	bx = __rcr(bx, 0x01, C)
	C = v14
	dx = dx >>u 0x0001
	SCZO = cond(dx)
	v15 = (ax & 0x0001 << 0x01) != 0x0000
	ax = __rcr(ax, 0x01, C)
	C = v15
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(NE,Z) l004F_0C43
	// succ:  l004F_0C4F l004F_0C43
l004F_0C4F:
	dx = dx_ax % bx
	ax = dx_ax /u bx
	SCZO = cond(ax)
	cx = ax
	dx_ax = Mem0[ss:bp + 0x000C:word16] *u ax
	SCZO = cond(dx_ax)
	v16 = ax
	ax = cx
	cx = v16
	dx_ax = Mem0[ss:bp + 0x000A:word16] *u ax
	SCZO = cond(dx_ax)
	dx = dx + cx
	SCZO = cond(dx)
	branch Test(ULT,C) l004F_0C6A
	// succ:  l004F_0C5E l004F_0C6A
l004F_0C5E:
	SCZO = cond(dx - Mem0[ss:bp + 0x0008:word16])
	branch Test(UGT,CZ) l004F_0C6A
	// succ:  l004F_0C63 l004F_0C6A
l004F_0C63:
	branch Test(ULT,C) l004F_0C70
	// succ:  l004F_0C65 l004F_0C70
l004F_0C65:
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(ULE,CZ) l004F_0C70
	// succ:  l004F_0C6A l004F_0C70
l004F_0C6A:
	ax = ax - Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp + 0x000C:word16] - C
	SCZO = cond(dx)
	// succ:  l004F_0C70
l004F_0C70:
	ax = ax - Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp + 0x0008:word16] - C
	SCZO = cond(dx)
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	// succ:  l004F_0C7D
l004F_0C7D:
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_0C18_exit
fn004F_0C18_exit:


// fn004F_0C82
// Return size: 4
void fn004F_0C82()
fn004F_0C82_entry:
	// succ:  l004F_0C82
l004F_0C82:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	cx = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	branch cx == 0x0000 l004F_0CD5
	// succ:  l004F_0C8D l004F_0CD5
l004F_0C8D:
	ds_si = Mem0[ss:bp + 0x000A:segptr32]
	es_di = Mem0[ss:bp + 0x0006:segptr32]
	// succ:  l004F_0C93
l004F_0C93:
	ax = cx
	ax = ax - 0x0001
	SZO = cond(ax)
	dx = di
	dx = ~dx
	ax = ax - dx
	SCZO = cond(ax)
	bx = bx - bx - C
	SCZO = cond(bx)
	ax = ax & bx
	SZO = cond(ax)
	C = false
	ax = ax + dx
	SCZO = cond(ax)
	dx = si
	dx = ~dx
	ax = ax - dx
	SCZO = cond(ax)
	bx = bx - bx - C
	SCZO = cond(bx)
	ax = ax & bx
	SZO = cond(ax)
	C = false
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	v18 = ax
	ax = cx
	cx = v18
	ax = ax - cx
	SCZO = cond(ax)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l004F_0CB4
l004F_0CB4:
	branch cx == 0x0000 l004F_0CB6
	// succ:  l004F_0CB4_1 l004F_0CB6
l004F_0CB4_1:
	v19 = Mem0[si:word16]
	Mem0[di:word16] = v19
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l004F_0CB4
	// succ:  l004F_0CB4
l004F_0CB6:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l004F_0CB8
l004F_0CB8:
	branch cx == 0x0000 l004F_0CBA
	// succ:  l004F_0CB8_1 l004F_0CBA
l004F_0CB8_1:
	v20 = Mem0[si:byte]
	Mem0[di:byte] = v20
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l004F_0CB8
	// succ:  l004F_0CB8
l004F_0CBA:
	v21 = ax
	ax = cx
	cx = v21
	branch cx == 0x0000 l004F_0CD5
	// succ:  l004F_0CBD l004F_0CD5
l004F_0CBD:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l004F_0CC8
	// succ:  l004F_0CC1 l004F_0CC8
l004F_0CC1:
	ax = ds
	ax = ax + 0x03A0
	SCZO = cond(ax)
	ds = ax
	// succ:  l004F_0CC8
l004F_0CC8:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l004F_0C93
	// succ:  l004F_0CCC l004F_0C93
l004F_0CCC:
	ax = es
	ax = ax + 0x03A0
	SCZO = cond(ax)
	es = ax
	goto l004F_0C93
	// succ:  l004F_0C93
l004F_0CD5:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_0C82_exit
fn004F_0C82_exit:


// fn004F_0CE0
// Return size: 4
void fn004F_0CE0()
fn004F_0CE0_entry:
	// succ:  l004F_0CE0
l004F_0CE0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = di
	es_di = Mem0[ss:bp + 0x0006:segptr32]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l004F_0CED
l004F_0CED:
	branch cx == 0x0000 l004F_0CEF
	// succ:  l004F_0CED_1 l004F_0CEF
l004F_0CED_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l004F_0CED
	// succ:  l004F_0CEF l004F_0CED
l004F_0CEF:
	cx = ~cx
	branch Test(NE,Z) l004F_0CF4
	// succ:  l004F_0CF3 l004F_0CF4
l004F_0CF3:
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l004F_0CF4
l004F_0CF4:
	v16 = ax
	ax = cx
	cx = v16
	di = dx
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_0CE0_exit
fn004F_0CE0_exit:


// fn004F_0CFA
// Return size: 4
void fn004F_0CFA()
fn004F_0CFA_entry:
	// succ:  l004F_0CFA
l004F_0CFA:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0866:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0864:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x086A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0868:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x086C:word16]
	call fn0017_0000 (retsize: 4;)
	sp = sp + 0x000A
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_0CFA_exit
fn004F_0CFA_exit:


// fn004F_0D26
// Return size: 0
void fn004F_0D26()
fn004F_0D26_entry:
	// succ:  l004F_0D26
l004F_0D26:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	ax = 0x3500
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_0D43
	// succ:  l004F_0D3C l004F_0D43
l004F_0D3C:
	DOS3Call()
	goto l004F_0D45
	// succ:  l004F_0D45
l004F_0D43:
	__syscall(0x21)
	// succ:  l004F_0D45
l004F_0D45:
	Mem0[ds:0x0888:word16] = bx
	Mem0[ds:0x088A:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ax = 0x2500
	dx = 0x1116
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_0D65
	// succ:  l004F_0D5E l004F_0D65
l004F_0D5E:
	DOS3Call()
	goto l004F_0D67
	// succ:  l004F_0D67
l004F_0D65:
	__syscall(0x21)
	// succ:  l004F_0D67
l004F_0D67:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = Mem0[ds:0x0A22:word16]
	branch cx == 0x0000 l004F_0D98
	// succ:  l004F_0D6F l004F_0D98
l004F_0D6F:
	es = Mem0[ds:0x089C:selector]
	si = Mem0[es:0x002C:word16]
	ax = Mem0[ds:0x0A24:word16]
	dx = Mem0[ds:0x0A26:word16]
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	call Mem0[ds:0x0A20:ptr32] (retsize: 4;)
	branch Test(UGE,C) l004F_0D8A
	// succ:  l004F_0D87 l004F_0D8A
l004F_0D87:
	goto l004F_21C8
	// succ:  l004F_21C8
l004F_0D8A:
	ax = Mem0[ds:0x0A28:word16]
	dx = Mem0[ds:0x0A2A:word16]
	bx = 0x0003
	call Mem0[ds:0x0A20:ptr32] (retsize: 4;)
	// succ:  l004F_0D98
l004F_0D98:
	es = Mem0[ds:0x089C:selector]
	cx = Mem0[es:0x002C:word16]
	branch cx == 0x0000 l004F_0DE1
	// succ:  l004F_0DA3 l004F_0DE1
l004F_0DA3:
	es = cx
	di = di ^ di
	SZO = cond(di)
	C = false
	// succ:  l004F_0DA7
l004F_0DA7:
	SCZO = cond(Mem0[es:di:byte] - 0x00)
	branch Test(EQ,Z) l004F_0DE1
	// succ:  l004F_0DAD l004F_0DE1
l004F_0DAD:
	cx = 0x000D
	si = 0x087A
	// succ:  l004F_0DB3
l004F_0DB3:
	branch cx == 0x0000 l004F_0DB5
	// succ:  l004F_0DB3_1 l004F_0DB5
l004F_0DB3_1:
	SCZO = cond(Mem0[si:byte] - Mem0[di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l004F_0DB3
	// succ:  l004F_0DB5 l004F_0DB3
l004F_0DB5:
	branch Test(EQ,Z) l004F_0DC2
	// succ:  l004F_0DB7 l004F_0DC2
l004F_0DB7:
	cx = 0x7FFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l004F_0DBC
l004F_0DBC:
	branch cx == 0x0000 l004F_0DBE
	// succ:  l004F_0DBC_2 l004F_0DBE
l004F_0DBC_2:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l004F_0DBC
	// succ:  l004F_0DBE l004F_0DBC
l004F_0DBE:
	branch Test(NE,Z) l004F_0DE1
	// succ:  l004F_0DC0 l004F_0DE1
l004F_0DC0:
	goto l004F_0DA7
	// succ:  l004F_0DA7
l004F_0DC2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	si = di
	di = 0x08AC
	cl = 0x04
	// succ:  l004F_0DCD
l004F_0DCD:
	al = Mem0[si:byte]
	si = si + 0x0001
	al = al - 0x41
	SCZO = cond(al)
	branch Test(ULT,C) l004F_0DDF
	// succ:  l004F_0DD2 l004F_0DDF
l004F_0DD2:
	al = al << cl
	SCZO = cond(al)
	v20 = ax
	ax = dx
	dx = v20
	al = Mem0[si:byte]
	si = si + 0x0001
	al = al - 0x41
	SCZO = cond(al)
	branch Test(ULT,C) l004F_0DDF
	// succ:  l004F_0DDA l004F_0DDF
l004F_0DDA:
	al = al | dl
	SZO = cond(al)
	C = false
	Mem0[di:byte] = al
	di = di + 0x0001
	goto l004F_0DCD
	// succ:  l004F_0DCD
l004F_0DDF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l004F_0DE1
l004F_0DE1:
	si = 0x0A2C
	di = 0x0A2C
	call fn004F_0ECC (retsize: 2;)
	si = 0x0A2C
	di = 0x0A2C
	call fn004F_0ECC (retsize: 2;)
	si = 0x0A30
	di = 0x0A30
	call fn004F_0ECC (retsize: 2;)
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_0D26_exit
l004F_21C8:
	ax = 0x0002
	// succ:  l004F_21CB_thunk_fn004F_111B
l004F_21CB_thunk_fn004F_111B:
	call fn004F_111B (retsize: 0;)
	return
	// succ:  fn004F_0D26_exit
fn004F_0D26_exit:


// fn004F_0E05
// Return size: 0
void fn004F_0E05()
fn004F_0E05_entry:
	// succ:  l004F_0E05
l004F_0E05:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	// succ:  l004F_0E11_thunk_fn004F_0E42
l004F_0E11_thunk_fn004F_0E42:
	call fn004F_0E42 (retsize: 0;)
	return
	// succ:  fn004F_0E05_exit
fn004F_0E05_exit:


// fn004F_0E13
// Return size: 4
void fn004F_0E13()
fn004F_0E13_entry:
	// succ:  l004F_0E13
l004F_0E13:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	cx = 0x0001
	// succ:  l004F_0E1D_thunk_fn004F_0E42
l004F_0E1D_thunk_fn004F_0E42:
	call fn004F_0E42 (retsize: 0;)
	return
	// succ:  fn004F_0E13_exit
fn004F_0E13_exit:


// fn004F_0E42
// Return size: 0
void fn004F_0E42()
fn004F_0E42_entry:
	// succ:  l004F_0E42
l004F_0E42:
	Mem0[ds:0x08E1:byte] = ch
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cl = cl | cl
	SZO = cond(cl)
	C = false
	branch Test(NE,Z) l004F_0E67
	// succ:  l004F_0E4B l004F_0E67
l004F_0E4B:
	si = 0x0CD6
	di = 0x0CD6
	call fn004F_0ECC (retsize: 2;)
	si = 0x0A2C
	di = 0x0A30
	call fn004F_0ECC (retsize: 2;)
	si = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_21BC (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l004F_0E67
l004F_0E67:
	si = 0x0A30
	di = 0x0A30
	call fn004F_0ECC (retsize: 2;)
	si = 0x0A30
	di = 0x0A30
	call fn004F_0ECC (retsize: 2;)
	call fn004F_0EA3 (retsize: 2;)
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ah = ah | ah
	SZO = cond(ah)
	C = false
	branch Test(NE,Z) l004F_0E98
	// succ:  l004F_0E81 l004F_0E98
l004F_0E81:
	ax = Mem0[ss:bp + 0x0006:word16]
	ah = 0x4C
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_0E96
	// succ:  l004F_0E8F l004F_0E96
l004F_0E8F:
	DOS3Call()
	goto l004F_0E98
	// succ:  l004F_0E98
l004F_0E96:
	__syscall(0x21)
	// succ:  l004F_0E98
l004F_0E98:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_0E42_exit
fn004F_0E42_exit:


// fn004F_0EA3
// Return size: 2
void fn004F_0EA3()
fn004F_0EA3_entry:
	// succ:  l004F_0EA3
l004F_0EA3:
	sp = fp
	cx = Mem0[ds:0x0A22:word16]
	branch cx == 0x0000 l004F_0EB0
	// succ:  l004F_0EA9 l004F_0EB0
l004F_0EA9:
	bx = 0x0002
	call Mem0[ds:0x0A20:ptr32] (retsize: 4;)
	// succ:  l004F_0EB0
l004F_0EB0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds_dx = Mem0[ds:0x0888:segptr32]
	ax = 0x2500
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_0EC8
	// succ:  l004F_0EC1 l004F_0EC8
l004F_0EC1:
	DOS3Call()
	goto l004F_0ECA
	// succ:  l004F_0ECA
l004F_0EC8:
	__syscall(0x21)
	// succ:  l004F_0ECA
l004F_0ECA:
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	return
	// succ:  fn004F_0EA3_exit
fn004F_0EA3_exit:


// fn004F_0ECC
// Return size: 2
void fn004F_0ECC()
fn004F_0ECC_entry:
	// succ:  l004F_0ECC
l004F_0ECC:
	sp = fp
	SCZO = cond(si - di)
	branch Test(UGE,C) l004F_0EDE
	// succ:  l004F_0ED0 l004F_0EDE
l004F_0ED0:
	di = di - 0x0004
	SCZO = cond(di)
	ax = Mem0[ds:di:word16]
	ax = ax | Mem0[ds:di + 0x0002:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_0ECC
	// succ:  l004F_0EDA l004F_0ECC
l004F_0EDA:
	call Mem0[ds:di:ptr32] (retsize: 4;)
	goto l004F_0ECC
	// succ:  l004F_0ECC
l004F_0EDE:
	return
	// succ:  fn004F_0ECC_exit
fn004F_0ECC_exit:


// fn004F_0EE0
// Return size: 4
void fn004F_0EE0()
fn004F_0EE0_entry:
	// succ:  l004F_0EE0
l004F_0EE0:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	ax = 0x00FC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_2259 (retsize: 2;)
	sp = sp + 0x0002
	ax = 0x00FF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_2259 (retsize: 2;)
	sp = sp + 0x0002
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_0EE0_exit
fn004F_0EE0_exit:


// fn004F_0F04
// Return size: 0
void fn004F_0F04()
fn004F_0F04_entry:
	// succ:  l004F_0F04
l004F_0F04:
	sp = fp
	Mem0[ds:0x08E6:word16] = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	Mem0[ds:0x08E8:word16] = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = 0x0104
	cx = 0x0008
	call fn004F_2296 (retsize: 2;)
	sp = sp + 0x0002
	Mem0[ds:0x08DC:word16] = dx
	Mem0[ds:0x08DA:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0866:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetModuleFileName(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[es:bx:byte] = 0x00
	dx = 0x0001
	di = 0x0001
	si = 0x0081
	ds = Mem0[ds:0x089C:selector]
	// succ:  l004F_0F42
l004F_0F42:
	al = Mem0[si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x20)
	branch Test(EQ,Z) l004F_0F42
	// succ:  l004F_0F47 l004F_0F42
l004F_0F47:
	SCZO = cond(al - 0x09)
	branch Test(EQ,Z) l004F_0F42
	// succ:  l004F_0F4B l004F_0F42
l004F_0F4B:
	SCZO = cond(al - 0x0D)
	branch Test(EQ,Z) l004F_0FBE
	// succ:  l004F_0F4F l004F_0FBE
l004F_0F4F:
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l004F_0FBE
	// succ:  l004F_0F53 l004F_0FBE
l004F_0F53:
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l004F_0F54
l004F_0F54:
	si = si - 0x0001
	SZO = cond(si)
	// succ:  l004F_0F55
l004F_0F55:
	al = Mem0[si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x20)
	branch Test(EQ,Z) l004F_0F42
	// succ:  l004F_0F5A l004F_0F42
l004F_0F5A:
	SCZO = cond(al - 0x09)
	branch Test(EQ,Z) l004F_0F42
	// succ:  l004F_0F5E l004F_0F42
l004F_0F5E:
	SCZO = cond(al - 0x0D)
	branch Test(EQ,Z) l004F_0FBE
	// succ:  l004F_0F62 l004F_0FBE
l004F_0F62:
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l004F_0FBE
	// succ:  l004F_0F66 l004F_0FBE
l004F_0F66:
	SCZO = cond(al - 0x22)
	branch Test(EQ,Z) l004F_0F8E
	// succ:  l004F_0F6A l004F_0F8E
l004F_0F6A:
	SCZO = cond(al - 0x5C)
	branch Test(EQ,Z) l004F_0F71
	// succ:  l004F_0F6E l004F_0F71
l004F_0F6E:
	dx = dx + 0x0001
	SZO = cond(dx)
	goto l004F_0F55
	// succ:  l004F_0F55
l004F_0F71:
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	// succ:  l004F_0F73
l004F_0F73:
	cx = cx + 0x0001
	SZO = cond(cx)
	al = Mem0[si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x5C)
	branch Test(EQ,Z) l004F_0F73
	// succ:  l004F_0F79 l004F_0F73
l004F_0F79:
	SCZO = cond(al - 0x22)
	branch Test(EQ,Z) l004F_0F81
	// succ:  l004F_0F7D l004F_0F81
l004F_0F7D:
	dx = dx + cx
	SCZO = cond(dx)
	goto l004F_0F54
	// succ:  l004F_0F54
l004F_0F81:
	ax = cx
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	dx = dx + cx + C
	SCZO = cond(dx)
	SZO = cond(al & 0x01)
	C = false
	branch Test(NE,Z) l004F_0F55
	// succ:  l004F_0F8B l004F_0F55
l004F_0F8B:
	goto l004F_0F8E
	// succ:  l004F_0F8E
l004F_0F8D:
	si = si - 0x0001
	SZO = cond(si)
	// succ:  l004F_0F8E
l004F_0F8E:
	al = Mem0[si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x0D)
	branch Test(EQ,Z) l004F_0FBE
	// succ:  l004F_0F93 l004F_0FBE
l004F_0F93:
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l004F_0FBE
	// succ:  l004F_0F97 l004F_0FBE
l004F_0F97:
	SCZO = cond(al - 0x22)
	branch Test(EQ,Z) l004F_0F55
	// succ:  l004F_0F9B l004F_0F55
l004F_0F9B:
	SCZO = cond(al - 0x5C)
	branch Test(EQ,Z) l004F_0FA2
	// succ:  l004F_0F9F l004F_0FA2
l004F_0F9F:
	dx = dx + 0x0001
	SZO = cond(dx)
	goto l004F_0F8E
	// succ:  l004F_0F8E
l004F_0FA2:
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	// succ:  l004F_0FA4
l004F_0FA4:
	cx = cx + 0x0001
	SZO = cond(cx)
	al = Mem0[si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x5C)
	branch Test(EQ,Z) l004F_0FA4
	// succ:  l004F_0FAA l004F_0FA4
l004F_0FAA:
	SCZO = cond(al - 0x22)
	branch Test(EQ,Z) l004F_0FB2
	// succ:  l004F_0FAE l004F_0FB2
l004F_0FAE:
	dx = dx + cx
	SCZO = cond(dx)
	goto l004F_0F8D
	// succ:  l004F_0F8D
l004F_0FB2:
	ax = cx
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	dx = dx + cx + C
	SCZO = cond(dx)
	SZO = cond(al & 0x01)
	C = false
	branch Test(NE,Z) l004F_0F8E
	// succ:  l004F_0FBC l004F_0F8E
l004F_0FBC:
	goto l004F_0F55
	// succ:  l004F_0F55
l004F_0FBE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	Mem0[ds:0x08D4:word16] = di
	dx = dx + di
	SCZO = cond(dx)
	di = di + 0x0001
	SZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	dx = dx + di
	SCZO = cond(dx)
	dx = dx + 0x0001
	SZO = cond(dx)
	dl = dl & 0xFE
	SZO = cond(dl)
	C = false
	sp = sp - dx
	SCZO = cond(sp)
	ax = sp
	Mem0[ds:0x08D6:word16] = ax
	bx = ax
	di = di + bx
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ds_si = Mem0[ds:0x08DA:segptr32]
	Mem0[ss:bx:word16] = si
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	ds = Mem0[ss:0x089C:selector]
	si = 0x0081
	goto l004F_0FF2
	// succ:  l004F_0FF2
l004F_0FEF:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[di:byte] = al
	di = di + 0x0001
	// succ:  l004F_0FF2
l004F_0FF2:
	al = Mem0[si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x20)
	branch Test(EQ,Z) l004F_0FF2
	// succ:  l004F_0FF7 l004F_0FF2
l004F_0FF7:
	SCZO = cond(al - 0x09)
	branch Test(EQ,Z) l004F_0FF2
	// succ:  l004F_0FFB l004F_0FF2
l004F_0FFB:
	SCZO = cond(al - 0x0D)
	branch Test(EQ,Z) l004F_107B
	// succ:  l004F_0FFF l004F_107B
l004F_0FFF:
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l004F_107B
	// succ:  l004F_1003 l004F_107B
l004F_1003:
	Mem0[ss:bx:word16] = di
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	// succ:  l004F_1008
l004F_1008:
	si = si - 0x0001
	SZO = cond(si)
	// succ:  l004F_1009
l004F_1009:
	al = Mem0[si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x20)
	branch Test(EQ,Z) l004F_0FEF
	// succ:  l004F_100E l004F_0FEF
l004F_100E:
	SCZO = cond(al - 0x09)
	branch Test(EQ,Z) l004F_0FEF
	// succ:  l004F_1012 l004F_0FEF
l004F_1012:
	SCZO = cond(al - 0x0D)
	branch Test(EQ,Z) l004F_1078
	// succ:  l004F_1016 l004F_1078
l004F_1016:
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l004F_1078
	// succ:  l004F_101A l004F_1078
l004F_101A:
	SCZO = cond(al - 0x22)
	branch Test(EQ,Z) l004F_1045
	// succ:  l004F_101E l004F_1045
l004F_101E:
	SCZO = cond(al - 0x5C)
	branch Test(EQ,Z) l004F_1025
	// succ:  l004F_1022 l004F_1025
l004F_1022:
	Mem0[di:byte] = al
	di = di + 0x0001
	goto l004F_1009
	// succ:  l004F_1009
l004F_1025:
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	// succ:  l004F_1027
l004F_1027:
	cx = cx + 0x0001
	SZO = cond(cx)
	al = Mem0[si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x5C)
	branch Test(EQ,Z) l004F_1027
	// succ:  l004F_102D l004F_1027
l004F_102D:
	SCZO = cond(al - 0x22)
	branch Test(EQ,Z) l004F_1037
	// succ:  l004F_1031 l004F_1037
l004F_1031:
	al = 0x5C
	// succ:  l004F_1033
l004F_1033:
	branch cx == 0x0000 l004F_1035
	// succ:  l004F_1033_1 l004F_1035
l004F_1033_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l004F_1033
	// succ:  l004F_1033
l004F_1035:
	goto l004F_1008
	// succ:  l004F_1008
l004F_1037:
	al = 0x5C
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l004F_103B
l004F_103B:
	branch cx == 0x0000 l004F_103D
	// succ:  l004F_103B_1 l004F_103D
l004F_103B_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l004F_103B
	// succ:  l004F_103B
l004F_103D:
	branch Test(UGE,C) l004F_1045
	// succ:  l004F_103F l004F_1045
l004F_103F:
	al = 0x22
	Mem0[di:byte] = al
	di = di + 0x0001
	goto l004F_1009
	// succ:  l004F_1009
l004F_1044:
	si = si - 0x0001
	SZO = cond(si)
	// succ:  l004F_1045
l004F_1045:
	al = Mem0[si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x0D)
	branch Test(EQ,Z) l004F_1078
	// succ:  l004F_104A l004F_1078
l004F_104A:
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l004F_1078
	// succ:  l004F_104E l004F_1078
l004F_104E:
	SCZO = cond(al - 0x22)
	branch Test(EQ,Z) l004F_1009
	// succ:  l004F_1052 l004F_1009
l004F_1052:
	SCZO = cond(al - 0x5C)
	branch Test(EQ,Z) l004F_1059
	// succ:  l004F_1056 l004F_1059
l004F_1056:
	Mem0[di:byte] = al
	di = di + 0x0001
	goto l004F_1045
	// succ:  l004F_1045
l004F_1059:
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	// succ:  l004F_105B
l004F_105B:
	cx = cx + 0x0001
	SZO = cond(cx)
	al = Mem0[si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x5C)
	branch Test(EQ,Z) l004F_105B
	// succ:  l004F_1061 l004F_105B
l004F_1061:
	SCZO = cond(al - 0x22)
	branch Test(EQ,Z) l004F_106B
	// succ:  l004F_1065 l004F_106B
l004F_1065:
	al = 0x5C
	// succ:  l004F_1067
l004F_1067:
	branch cx == 0x0000 l004F_1069
	// succ:  l004F_1067_1 l004F_1069
l004F_1067_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l004F_1067
	// succ:  l004F_1067
l004F_1069:
	goto l004F_1044
	// succ:  l004F_1044
l004F_106B:
	al = 0x5C
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l004F_106F
l004F_106F:
	branch cx == 0x0000 l004F_1071
	// succ:  l004F_106F_1 l004F_1071
l004F_106F_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l004F_106F
	// succ:  l004F_106F
l004F_1071:
	branch Test(UGE,C) l004F_1009
	// succ:  l004F_1073 l004F_1009
l004F_1073:
	al = 0x22
	Mem0[di:byte] = al
	di = di + 0x0001
	goto l004F_1045
	// succ:  l004F_1045
l004F_1078:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[di:byte] = al
	di = di + 0x0001
	// succ:  l004F_107B
l004F_107B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	Mem0[ds:bx:word16] = 0x0000
	call Mem0[ds:0x08E6:ptr32] (retsize: 4;)
	return
	// succ:  fn004F_0F04_exit
fn004F_0F04_exit:


// fn004F_1086
// Return size: 4
void fn004F_1086()
fn004F_1086_entry:
	// succ:  l004F_1086
l004F_1086:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	GetDOSEnvironment()
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_109C
	// succ:  l004F_109A l004F_109C
l004F_109A:
	dx = ax
	// succ:  l004F_109C
l004F_109C:
	bx = dx
	es = dx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	si = si ^ si
	SZO = cond(si)
	C = false
	di = di ^ di
	SZO = cond(di)
	C = false
	cx = 0xFFFF
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l004F_10BB
	// succ:  l004F_10AD l004F_10BB
l004F_10AD:
	SCZO = cond(Mem0[es:0x0000:byte] - 0x00)
	branch Test(EQ,Z) l004F_10BB
	// succ:  l004F_10B5 l004F_10BB
l004F_10B5:
	branch cx == 0x0000 l004F_10B7
	// succ:  l004F_10B5_1 l004F_10B7
l004F_10B5_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l004F_10B5
	// succ:  l004F_10B7 l004F_10B5
l004F_10B7:
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	branch Test(NE,Z) l004F_10B5
	// succ:  l004F_10BB l004F_10B5
l004F_10BB:
	ax = di
	ax = ax + 0x0001
	SZO = cond(ax)
	al = al & 0xFE
	SZO = cond(al)
	C = false
	si = si + 0x0001
	SZO = cond(si)
	di = si
	si = si << 0x0001
	SCZO = cond(si)
	cx = 0x0009
	call fn004F_2296 (retsize: 2;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si
	call fn004F_2296 (retsize: 2;)
	sp = sp + 0x0002
	Mem0[ds:0x08D8:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = di
	bx = ax
	si = si ^ si
	SZO = cond(si)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = cx - 0x0001
	SZO = cond(cx)
	branch cx == 0x0000 l004F_1108
	// succ:  l004F_10E2 l004F_1108
l004F_10E2:
	ax = Mem0[ds:si:word16]
	SCZO = cond(ax - Mem0[ss:0x087A:word16])
	branch Test(NE,Z) l004F_10FB
	// succ:  l004F_10EB l004F_10FB
l004F_10EB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	di = 0x087A
	cx = 0x0006
	// succ:  l004F_10F4
l004F_10F4:
	branch cx == 0x0000 l004F_10F6
	// succ:  l004F_10F4_2 l004F_10F6
l004F_10F4_2:
	SCZO = cond(Mem0[si:word16] - Mem0[di:word16])
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	branch Test(NE,Z) l004F_10F4
	// succ:  l004F_10F6 l004F_10F4
l004F_10F6:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	branch Test(EQ,Z) l004F_1100
	// succ:  l004F_10FB l004F_1100
l004F_10FB:
	Mem0[es:bx:word16] = di
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	// succ:  l004F_1100
l004F_1100:
	al = Mem0[si:byte]
	si = si + 0x0001
	Mem0[di:byte] = al
	di = di + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l004F_1100
	// succ:  l004F_1106 l004F_1100
l004F_1106:
	cx = cx - 0x0001
	branch cx != 0x0000 l004F_10E2
	// succ:  l004F_1108 l004F_10E2
l004F_1108:
	Mem0[es:bx:word16] = cx
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_1086_exit
fn004F_1086_exit:


// fn004F_111B
// Return size: 0
void fn004F_111B()
fn004F_111B_entry:
	// succ:  l004F_111B
l004F_111B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_0EE0 (retsize: 2;)
	sp = sp - 0x0002
	call fn004F_2259 (retsize: 2;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	call fn004F_2222 (retsize: 2;)
	sp = sp + 0x0002
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_114C
	// succ:  l004F_112F l004F_114C
l004F_112F:
	di = ax
	ax = 0x0009
	SCZO = cond(Mem0[ds:di:byte] - 0x4D)
	branch Test(NE,Z) l004F_113C
	// succ:  l004F_1139 l004F_113C
l004F_1139:
	ax = 0x000F
	// succ:  l004F_113C
l004F_113C:
	di = di + ax
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	al = 0x0D
	cx = 0x0022
	// succ:  l004F_1146
l004F_1146:
	branch cx == 0x0000 l004F_1148
	// succ:  l004F_1146_1 l004F_1148
l004F_1146_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l004F_1146
	// succ:  l004F_1148 l004F_1146
l004F_1148:
	Mem0[ds:di - 0x0001:byte] = bl
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l004F_114C
l004F_114C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FatalAppExit(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = 0x00FF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FatalExit()
	v19 = Mem0[ss:bp + 0x001F + si:byte] + dh
	Mem0[ss:bp + 0x001F + si:byte] = v19
	SCZO = cond(v19)
	// succ:  l004F_115E
l004F_115E:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_111B_exit
fn004F_111B_exit:


// fn004F_117D
// Return size: 0
void fn004F_117D()
fn004F_117D_entry:
	// succ:  l004F_117D
l004F_117D:
	branch Test(UGE,C) l004F_1186
	// succ:  l004F_117F l004F_1186
l004F_117F:
	call fn004F_1195 (retsize: 2;)
	ax = 0xFFFF
	dx_ax = (int32) ax
	// succ:  l004F_1186
l004F_1186:
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_117D_exit
fn004F_117D_exit:


// fn004F_1195
// Return size: 2
void fn004F_1195()
fn004F_1195_entry:
	// succ:  l004F_1195
l004F_1195:
	sp = fp
	Mem0[ds:0x08A4:byte] = al
	ah = ah | ah
	SZO = cond(ah)
	C = false
	branch Test(NE,Z) l004F_11B7
	// succ:  l004F_119C l004F_11B7
l004F_119C:
	SCZO = cond(al - 0x22)
	branch Test(UGE,C) l004F_11AC
	// succ:  l004F_11A0 l004F_11AC
l004F_11A0:
	SCZO = cond(al - 0x20)
	branch Test(ULT,C) l004F_11A8
	// succ:  l004F_11A4 l004F_11A8
l004F_11A4:
	al = 0x05
	goto l004F_11AE
	// succ:  l004F_11AE
l004F_11A8:
	SCZO = cond(al - 0x13)
	branch Test(ULE,CZ) l004F_11AE
	// succ:  l004F_11AC l004F_11AE
l004F_11AC:
	al = 0x13
	// succ:  l004F_11AE
l004F_11AE:
	bx = 0x08EA
	al = Mem0[ds:bx + (uint16) al:byte]
	// succ:  l004F_11B2
l004F_11B2:
	ax = (int16) al
	Mem0[ds:0x0896:word16] = ax
	return
	// succ:  fn004F_1195_exit
l004F_11B7:
	al = ah
	goto l004F_11B2
	// succ:  l004F_11B2
fn004F_1195_exit:


// fn004F_11D2
// Return size: 4
void fn004F_11D2()
fn004F_11D2_entry:
	// succ:  l004F_11D2
l004F_11D2:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	si = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ds:si + 0x0006:byte]
	SZO = cond(al & 0x83)
	C = false
	branch Test(EQ,Z) l004F_1241
	// succ:  l004F_11E8 l004F_1241
l004F_11E8:
	SZO = cond(al & 0x40)
	C = false
	branch Test(NE,Z) l004F_1241
	// succ:  l004F_11EC l004F_1241
l004F_11EC:
	SZO = cond(al & 0x02)
	C = false
	branch Test(NE,Z) l004F_1232
	// succ:  l004F_11F0 l004F_1232
l004F_11F0:
	al = al | 0x01
	SZO = cond(al)
	C = false
	Mem0[ds:si + 0x0006:byte] = al
	di = si
	di = di - 0x0A30
	SCZO = cond(di)
	di = di + 0x0AD0
	SCZO = cond(di)
	SZO = cond(al & 0x0C)
	C = false
	branch Test(NE,Z) l004F_120D
	// succ:  l004F_1203 l004F_120D
l004F_1203:
	SZO = cond(Mem0[ds:di:byte] & 0x01)
	C = false
	branch Test(NE,Z) l004F_120D
	// succ:  l004F_1208 l004F_120D
l004F_1208:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_22C4 (retsize: 2;)
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l004F_120D
l004F_120D:
	ax = Mem0[ds:si + 0x0004:word16]
	Mem0[ds:si:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	bl = Mem0[ds:si + 0x0007:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	call fn004F_1C52 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_1238
	// succ:  l004F_1227 l004F_1238
l004F_1227:
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l004F_1246
	// succ:  l004F_122C l004F_1246
l004F_122C:
	v17 = Mem0[ds:si + 0x0006:byte] | 0x20
	Mem0[ds:si + 0x0006:byte] = v17
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	goto l004F_123C
	// succ:  l004F_123C
l004F_1232:
	v14 = Mem0[ds:si + 0x0006:byte] | 0x20
	Mem0[ds:si + 0x0006:byte] = v14
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	goto l004F_1241
	// succ:  l004F_1241
l004F_1238:
	v20 = Mem0[ds:si + 0x0006:byte] | 0x10
	Mem0[ds:si + 0x0006:byte] = v20
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	// succ:  l004F_123C
l004F_123C:
	Mem0[ds:si + 0x0002:word16] = 0x0000
	// succ:  l004F_1241
l004F_1241:
	ax = 0xFFFF
	goto l004F_126A
	// succ:  l004F_126A
l004F_1246:
	bh = Mem0[ds:bx + 0x08AC:byte]
	bh = bh & 0x82
	SZO = cond(bh)
	C = false
	SCZO = cond(bh - 0x82)
	branch Test(NE,Z) l004F_125D
	// succ:  l004F_1252 l004F_125D
l004F_1252:
	bh = Mem0[ds:si + 0x0006:byte]
	SZO = cond(bh & 0x82)
	C = false
	branch Test(NE,Z) l004F_125D
	// succ:  l004F_125A l004F_125D
l004F_125A:
	v19 = Mem0[ds:di:byte] | 0x20
	Mem0[ds:di:byte] = v19
	SZO = cond(Mem0[ds:di:byte])
	C = false
	// succ:  l004F_125D
l004F_125D:
	ax = ax - 0x0001
	SZO = cond(ax)
	Mem0[ds:si + 0x0002:word16] = ax
	bx = Mem0[ds:si:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	al = Mem0[ds:bx:byte]
	bx = bx + 0x0001
	SZO = cond(bx)
	Mem0[ds:si:word16] = bx
	// succ:  l004F_126A
l004F_126A:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_11D2_exit
fn004F_11D2_exit:


// fn004F_1276
// Return size: 4
void fn004F_1276()
fn004F_1276_entry:
	// succ:  l004F_1276
l004F_1276:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	si = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[ds:si + 0x0006:byte]
	SZO = cond(al & 0x82)
	C = false
	branch Test(EQ,Z) l004F_12F6
	// succ:  l004F_128C l004F_12F6
l004F_128C:
	SZO = cond(al & 0x40)
	C = false
	branch Test(NE,Z) l004F_12F6
	// succ:  l004F_1290 l004F_12F6
l004F_1290:
	Mem0[ds:si + 0x0002:word16] = 0x0000
	SZO = cond(al & 0x01)
	C = false
	branch Test(EQ,Z) l004F_12A4
	// succ:  l004F_1299 l004F_12A4
l004F_1299:
	SZO = cond(al & 0x10)
	C = false
	branch Test(EQ,Z) l004F_12F6
	// succ:  l004F_129D l004F_12F6
l004F_129D:
	cx = Mem0[ds:si + 0x0004:word16]
	Mem0[ds:si:word16] = cx
	al = al & 0xFE
	SZO = cond(al)
	C = false
	// succ:  l004F_12A4
l004F_12A4:
	al = al | 0x02
	SZO = cond(al)
	C = false
	al = al & 0xEF
	SZO = cond(al)
	C = false
	Mem0[ds:si + 0x0006:byte] = al
	di = si
	di = di - 0x0A30
	SCZO = cond(di)
	di = di + 0x0AD0
	SCZO = cond(di)
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	bl = Mem0[ds:si + 0x0007:byte]
	SZO = cond(al & 0x08)
	C = false
	branch Test(NE,Z) l004F_130C
	// succ:  l004F_12BE l004F_130C
l004F_12BE:
	SZO = cond(al & 0x04)
	C = false
	branch Test(NE,Z) l004F_12E1
	// succ:  l004F_12C2 l004F_12E1
l004F_12C2:
	SZO = cond(Mem0[ds:di:byte] & 0x01)
	C = false
	branch Test(NE,Z) l004F_130C
	// succ:  l004F_12C7 l004F_130C
l004F_12C7:
	SCZO = cond(Mem0[ds:0x0966:word16] - 0x0000)
	branch Test(EQ,Z) l004F_12FF
	// succ:  l004F_12CE l004F_12FF
l004F_12CE:
	SCZO = cond(si - 0x0A38)
	branch Test(EQ,Z) l004F_12DA
	// succ:  l004F_12D4 l004F_12DA
l004F_12D4:
	SCZO = cond(si - 0x0A40)
	branch Test(NE,Z) l004F_12FF
	// succ:  l004F_12DA l004F_12FF
l004F_12DA:
	SZO = cond(Mem0[ds:bx + 0x08AC:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l004F_12FF
	// succ:  l004F_12E1 l004F_12FF
l004F_12E1:
	cx = 0x0001
	di = bp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	call fn004F_1DBC (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	cx = 0x0001
	goto l004F_1335
	// succ:  l004F_1335
l004F_12F6:
	ax = 0xFFFF
	v14 = Mem0[ds:si + 0x0006:byte] | 0x20
	Mem0[ds:si + 0x0006:byte] = v14
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	goto l004F_135D
	// succ:  l004F_135D
l004F_12FF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_22C4 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	SZO = cond(Mem0[ds:si + 0x0006:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l004F_12E1
	// succ:  l004F_130C l004F_12E1
l004F_130C:
	cx = Mem0[ds:si:word16]
	dx = Mem0[ds:si + 0x0004:word16]
	cx = cx - dx
	SCZO = cond(cx)
	dx = dx + 0x0001
	SZO = cond(dx)
	Mem0[ds:si:word16] = dx
	dx = Mem0[ds:di + 0x0002:word16]
	dx = dx - 0x0001
	SZO = cond(dx)
	Mem0[ds:si + 0x0002:word16] = dx
	branch cx == 0x0000 l004F_1340
	// succ:  l004F_131F l004F_1340
l004F_131F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	call fn004F_1DBC (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l004F_132D
l004F_132D:
	di = Mem0[ds:si + 0x0004:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:di:byte] = dl
	// succ:  l004F_1335
l004F_1335:
	SCZO = cond(ax - cx)
	branch Test(NE,Z) l004F_12F6
	// succ:  l004F_1339 l004F_12F6
l004F_1339:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	al = Mem0[ss:bp + 0x0006:byte]
	goto l004F_135D
	// succ:  l004F_135D
l004F_1340:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	SZO = cond(Mem0[ds:bx + 0x08AC:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l004F_132D
	// succ:  l004F_1349 l004F_132D
l004F_1349:
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	call fn004F_1B7E (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = ax
	goto l004F_132D
	// succ:  l004F_132D
l004F_135D:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_1276_exit
fn004F_1276_exit:


// fn004F_1368
// Return size: 2
void fn004F_1368()
fn004F_1368_entry:
	// succ:  l004F_1368
l004F_1368:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0004:word16]
	al = Mem0[ds:si + 0x0006:byte]
	SZO = cond(al & 0x83)
	C = false
	branch Test(EQ,Z) l004F_1391
	// succ:  l004F_1376 l004F_1391
l004F_1376:
	SZO = cond(al & 0x08)
	C = false
	branch Test(EQ,Z) l004F_1391
	// succ:  l004F_137A l004F_1391
l004F_137A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0004:word16]
	sp = sp - 0x0002
	call fn004F_2654 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	v12 = Mem0[ds:si + 0x0006:byte] & 0xF7
	Mem0[ds:si + 0x0006:byte] = v12
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ds:si + 0x0004:word16] = ax
	Mem0[ds:si:word16] = ax
	Mem0[ds:si + 0x0002:word16] = ax
	// succ:  l004F_1391
l004F_1391:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_1368_exit
fn004F_1368_exit:


// fn004F_1394
// Return size: 4
void fn004F_1394()
fn004F_1394_entry:
	// succ:  l004F_1394
l004F_1394:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	al = Mem0[ds:0x0964:byte]
	Mem0[ss:bp - 0x0006:byte] = al
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	bx = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[ds:bx:byte]
	ax = (int16) al
	SCZO = cond(ax - 0x0077)
	branch Test(EQ,Z) l004F_1408
	// succ:  l004F_13B4 l004F_1408
l004F_13B4:
	branch Test(UGT,CZ) l004F_13BE
	// succ:  l004F_13B6 l004F_13BE
l004F_13B6:
	al = al - 0x61
	SCZO = cond(al)
	branch Test(EQ,Z) l004F_1412
	// succ:  l004F_13BA l004F_1412
l004F_13BA:
	al = al - 0x11
	SCZO = cond(al)
	branch Test(EQ,Z) l004F_13C4
	// succ:  l004F_13BE l004F_13C4
l004F_13BE:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l004F_14BC
	// succ:  l004F_14BC
l004F_13C4:
	si = si ^ si
	SZO = cond(si)
	C = false
	Mem0[ss:bp - 0x0004:byte] = 0x01
	// succ:  l004F_13CA
l004F_13CA:
	Mem0[ss:bp - 0x000A:word16] = 0x0001
	// succ:  l004F_13CF
l004F_13CF:
	v16 = Mem0[ss:bp + 0x0008:word16] + 0x0001
	Mem0[ss:bp + 0x0008:word16] = v16
	SZO = cond(v16)
	bx = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x00)
	branch Test(NE,Z) l004F_13DD
	// succ:  l004F_13DA l004F_13DD
l004F_13DA:
	goto l004F_1466
	// succ:  l004F_1466
l004F_13DD:
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0000)
	branch Test(NE,Z) l004F_13E6
	// succ:  l004F_13E3 l004F_13E6
l004F_13E3:
	goto l004F_1466
	// succ:  l004F_1466
l004F_13E6:
	al = Mem0[ds:bx:byte]
	ax = (int16) al
	SCZO = cond(ax - 0x0074)
	branch Test(EQ,Z) l004F_142A
	// succ:  l004F_13EE l004F_142A
l004F_13EE:
	branch Test(UGT,CZ) l004F_1400
	// succ:  l004F_13F0 l004F_1400
l004F_13F0:
	al = al - 0x2B
	SCZO = cond(al)
	branch Test(EQ,Z) l004F_1418
	// succ:  l004F_13F4 l004F_1418
l004F_13F4:
	al = al - 0x37
	SCZO = cond(al)
	branch Test(EQ,Z) l004F_1436
	// succ:  l004F_13F8 l004F_1436
l004F_13F8:
	al = al - 0x01
	SZO = cond(al)
	branch Test(EQ,Z) l004F_1442
	// succ:  l004F_13FC l004F_1442
l004F_13FC:
	al = al - 0x0B
	SCZO = cond(al)
	branch Test(EQ,Z) l004F_1454
	// succ:  l004F_1400 l004F_1454
l004F_1400:
	Mem0[ss:bp - 0x000A:word16] = 0x0000
	goto l004F_13CF
	// succ:  l004F_13CF
l004F_1408:
	si = 0x0301
	// succ:  l004F_140B
l004F_140B:
	Mem0[ss:bp - 0x0004:byte] = 0x02
	goto l004F_13CA
	// succ:  l004F_13CA
l004F_1412:
	si = 0x0109
	goto l004F_140B
	// succ:  l004F_140B
l004F_1418:
	SZO = cond(si & 0x0002)
	C = false
	branch Test(NE,Z) l004F_1400
	// succ:  l004F_141E l004F_1400
l004F_141E:
	si = si | 0x0002
	SZO = cond(si)
	C = false
	si = si & 0xFFFE
	SZO = cond(si)
	C = false
	Mem0[ss:bp - 0x0004:byte] = 0x80
	goto l004F_13CF
	// succ:  l004F_13CF
l004F_142A:
	SZO = cond(si & 0xC000)
	C = false
	branch Test(NE,Z) l004F_1400
	// succ:  l004F_1430 l004F_1400
l004F_1430:
	si = si | 0x4000
	SZO = cond(si)
	C = false
	goto l004F_13CF
	// succ:  l004F_13CF
l004F_1436:
	SZO = cond(si & 0xC000)
	C = false
	branch Test(NE,Z) l004F_1400
	// succ:  l004F_143C l004F_1400
l004F_143C:
	si = si | 0x8000
	SZO = cond(si)
	C = false
	goto l004F_13CF
	// succ:  l004F_13CF
l004F_1442:
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0000)
	branch Test(NE,Z) l004F_1400
	// succ:  l004F_1448 l004F_1400
l004F_1448:
	Mem0[ss:bp - 0x0008:word16] = 0x0001
	v20 = Mem0[ss:bp - 0x0006:byte] | 0x40
	Mem0[ss:bp - 0x0006:byte] = v20
	SZO = cond(Mem0[ss:bp - 0x0006:byte])
	C = false
	goto l004F_13CF
	// succ:  l004F_13CF
l004F_1454:
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0000)
	branch Test(NE,Z) l004F_1400
	// succ:  l004F_145A l004F_1400
l004F_145A:
	Mem0[ss:bp - 0x0008:word16] = 0x0001
	v19 = Mem0[ss:bp - 0x0006:byte] & 0xBF
	Mem0[ss:bp - 0x0006:byte] = v19
	SZO = cond(Mem0[ss:bp - 0x0006:byte])
	C = false
	goto l004F_13CF
	// succ:  l004F_13CF
l004F_1466:
	ax = 0x01A4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn004F_2308 (retsize: 2;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l004F_1483
	// succ:  l004F_1480 l004F_1483
l004F_1480:
	goto l004F_13BE
	// succ:  l004F_13BE
l004F_1483:
	v18 = Mem0[ds:0x08FE:word16] + 0x0001
	Mem0[ds:0x08FE:word16] = v18
	SZO = cond(v18)
	ax = Mem0[ss:bp + 0x000C:word16]
	di = ax
	ax = ax - 0x0A30
	SCZO = cond(ax)
	ax = ax + 0x0AD0
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000E:word16] = ax
	al = Mem0[ss:bp - 0x0004:byte]
	bx = di
	Mem0[ds:bx + 0x0006:byte] = al
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ds:di:word16] = ax
	Mem0[ds:di + 0x0004:word16] = ax
	al = Mem0[ss:bp - 0x000C:byte]
	Mem0[ds:di + 0x0007:byte] = al
	al = Mem0[ss:bp - 0x0006:byte]
	bx = Mem0[ss:bp - 0x000E:word16]
	Mem0[ds:bx:byte] = al
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ds:di + 0x0002:word16] = ax
	Mem0[ds:bx + 0x0004:word16] = ax
	ax = di
	// succ:  l004F_14BC
l004F_14BC:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_1394_exit
fn004F_1394_exit:


// fn004F_151C
// Return size: 2
void fn004F_151C()
fn004F_151C_entry:
	// succ:  l004F_151C
l004F_151C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = di ^ di
	SZO = cond(di)
	C = false
	ax = Mem0[ss:bp + 0x0004:word16]
	si = ax
	bx = ax
	cl = Mem0[ds:bx + 0x0006:byte]
	dx = cx
	cl = cl & 0x03
	SZO = cond(cl)
	C = false
	SCZO = cond(cl - 0x02)
	branch Test(NE,Z) l004F_1581
	// succ:  l004F_153A l004F_1581
l004F_153A:
	SZO = cond(dl & 0x08)
	C = false
	branch Test(NE,Z) l004F_154A
	// succ:  l004F_153F l004F_154A
l004F_153F:
	bx = bx - 0x0A30
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0AD0:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l004F_1581
	// succ:  l004F_154A l004F_1581
l004F_154A:
	ax = Mem0[ds:si:word16]
	ax = ax - Mem0[ds:si + 0x0004:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0002:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l004F_1581
	// succ:  l004F_1556 l004F_1581
l004F_1556:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0004:word16]
	al = Mem0[ds:si + 0x0007:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_1DBC (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	SCZO = cond(ax - Mem0[ss:bp - 0x0002:word16])
	branch Test(NE,Z) l004F_157A
	// succ:  l004F_156D l004F_157A
l004F_156D:
	SZO = cond(Mem0[ds:si + 0x0006:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l004F_1581
	// succ:  l004F_1573 l004F_1581
l004F_1573:
	v20 = Mem0[ds:si + 0x0006:byte] & 0xFD
	Mem0[ds:si + 0x0006:byte] = v20
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	goto l004F_1581
	// succ:  l004F_1581
l004F_157A:
	v21 = Mem0[ds:si + 0x0006:byte] | 0x20
	Mem0[ds:si + 0x0006:byte] = v21
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	di = 0xFFFF
	// succ:  l004F_1581
l004F_1581:
	ax = Mem0[ds:si + 0x0004:word16]
	Mem0[ds:si:word16] = ax
	Mem0[ds:si + 0x0002:word16] = 0x0000
	ax = di
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_151C_exit
fn004F_151C_exit:


// fn004F_1622
// Return size: 4
void fn004F_1622()
fn004F_1622_entry:
	// succ:  l004F_1622
l004F_1622:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	ax = 0x0214
	sp = sp - 0x0002
	call fn004F_21EE (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0007:byte] = al
	si = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[si:byte]
	si = si + 0x0001
	Mem0[ss:bp + 0x0008:word16] = si
	Mem0[ss:bp - 0x0004:byte] = al
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l004F_1651
	// succ:  l004F_164B l004F_1651
l004F_164B:
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0000)
	branch Test(GE,SO) l004F_1657
	// succ:  l004F_1651 l004F_1657
l004F_1651:
	ax = Mem0[ss:bp - 0x000A:word16]
	goto l004F_1AFE
	// succ:  l004F_1AFE
l004F_1657:
	bx = 0x0902
	al = al - 0x20
	SCZO = cond(al)
	SCZO = cond(al - 0x58)
	branch Test(UGT,CZ) l004F_1665
	// succ:  l004F_1660 l004F_1665
l004F_1660:
	al = Mem0[ds:bx + (uint16) al:byte]
	al = al & 0x0F
	SZO = cond(al)
	C = false
	goto l004F_1667
	// succ:  l004F_1667
l004F_1665:
	al = 0x00
	// succ:  l004F_1667
l004F_1667:
	cl = 0x03
	al = al << cl
	SCZO = cond(al)
	al = al + Mem0[ss:bp - 0x0007:byte]
	SCZO = cond(al)
	al = Mem0[ds:bx + (uint16) al:byte]
	cl = cl + 0x01
	SZO = cond(cl)
	al = al >>u cl
	SCZO = cond(al)
	Mem0[ss:bp - 0x0007:byte] = al
	ax = (int16) al
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	call Mem0[0x004F:bx + 0x1612:word16] (retsize: 4;)
	return
	// succ:  fn004F_1622_exit
l004F_1AFE:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_1622_exit
fn004F_1622_exit:


// fn004F_1B0A
// Return size: 4
void fn004F_1B0A()
fn004F_1B0A_entry:
	// succ:  l004F_1B0A
l004F_1B0A:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = 0x0A30
	di = di ^ di
	SZO = cond(di)
	C = false
	goto l004F_1B1B
	// succ:  l004F_1B1B
l004F_1B18:
	si = si + 0x0008
	SCZO = cond(si)
	// succ:  l004F_1B1B
l004F_1B1B:
	SCZO = cond(Mem0[ds:0x0900:word16] - si)
	branch Test(ULT,C) l004F_1B3B
	// succ:  l004F_1B21 l004F_1B3B
l004F_1B21:
	SZO = cond(Mem0[ds:si + 0x0006:byte] & 0x83)
	C = false
	branch Test(NE,Z) l004F_1B18
	// succ:  l004F_1B27 l004F_1B18
l004F_1B27:
	Mem0[ds:si + 0x0006:byte] = 0x00
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ds:si + 0x0002:word16] = ax
	Mem0[ds:si + 0x0004:word16] = ax
	Mem0[ds:si:word16] = ax
	Mem0[ds:si + 0x0007:byte] = 0xFF
	di = si
	// succ:  l004F_1B3B
l004F_1B3B:
	ax = di
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_1B0A_exit
fn004F_1B0A_exit:


// fn004F_1B46
// Return size: 0
void fn004F_1B46()
fn004F_1B46_entry:
	goto l004F_1B46
	// succ:  l004F_1B46
l004F_115E_in_fn004F_1B46:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_1B46_exit
l004F_1B46:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	bx = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx - Mem0[ds:0x08A6:word16])
	branch Test(ULT,C) l004F_1B5F
	// succ:  l004F_1B59 l004F_1B5F
l004F_1B59:
	ax = 0x0900
	C = true
	goto l004F_1B7A
	// succ:  l004F_1B7A
l004F_1B5F:
	ah = 0x3E
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_1B71
	// succ:  l004F_1B6A l004F_1B71
l004F_1B6A:
	DOS3Call()
	goto l004F_1B73
	// succ:  l004F_1B73
l004F_1B71:
	__syscall(0x21)
	// succ:  l004F_1B73
l004F_1B73:
	branch Test(ULT,C) l004F_1B7A
	// succ:  l004F_1B75 l004F_1B7A
l004F_1B75:
	Mem0[ds:bx + 0x08AC:byte] = 0x00
	// succ:  l004F_1B7A
l004F_1B7A:
	goto l004F_115E_in_fn004F_1B46
	// succ:  l004F_115E_in_fn004F_1B46
fn004F_1B46_exit:


// fn004F_1B7E
// Return size: 0
void fn004F_1B7E()
fn004F_1B7E_entry:
	// succ:  l004F_1B7E
l004F_1B7E:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx - Mem0[ds:0x08A6:word16])
	branch Test(ULT,C) l004F_1BA5
	// succ:  l004F_1B94 l004F_1BA5
l004F_1B94:
	SCZO = cond(Mem0[ds:0x0966:word16] - 0x0000)
	branch Test(EQ,Z) l004F_1BA5
	// succ:  l004F_1B9B l004F_1BA5
l004F_1B9B:
	SCZO = cond(bx - 0x0002)
	branch Test(UGT,CZ) l004F_1BA5
	// succ:  l004F_1BA0 l004F_1BA5
l004F_1BA0:
	ax = 0x0900
	goto l004F_1BE6
	// succ:  l004F_1BE6
l004F_1BA5:
	SCZO = cond(Mem0[ds:0x096C:word16] - 0x0000)
	branch Test(EQ,Z) l004F_1C2B
	// succ:  l004F_1BAC l004F_1C2B
l004F_1BAC:
	SZO = cond(Mem0[ss:bp + 0x000A:word16] & 0x8000)
	C = false
	branch Test(EQ,Z) l004F_1C2B
	// succ:  l004F_1BB3 l004F_1C2B
l004F_1BB3:
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l004F_1BE3
	// succ:  l004F_1BB9 l004F_1BE3
l004F_1BB9:
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	dx = cx
	ax = 0x4201
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_1BD0
	// succ:  l004F_1BC9 l004F_1BD0
l004F_1BC9:
	DOS3Call()
	goto l004F_1BD2
	// succ:  l004F_1BD2
l004F_1BD0:
	__syscall(0x21)
	// succ:  l004F_1BD2
l004F_1BD2:
	branch Test(ULT,C) l004F_1C4F
	// succ:  l004F_1BD4 l004F_1C4F
l004F_1BD4:
	SZO = cond(Mem0[ss:bp + 0x000C:word16] & 0x0002)
	C = false
	branch Test(NE,Z) l004F_1BE9
	// succ:  l004F_1BDB l004F_1BE9
l004F_1BDB:
	ax = ax + Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp + 0x000A:word16] + C
	SCZO = cond(dx)
	branch Test(NS,S) l004F_1C2B
	// succ:  l004F_1BE3 l004F_1C2B
l004F_1BE3:
	ax = 0x1600
	ax = 0x1600
	// succ:  l004F_1BE6
l004F_1BE6:
	C = true
	goto l004F_1C4F
	// succ:  l004F_1C4F
l004F_1BE9:
	Mem0[ss:bp - 0x0004:word16] = dx
	Mem0[ss:bp - 0x0006:word16] = ax
	dx = cx
	ax = 0x4202
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_1C04
	// succ:  l004F_1BFD l004F_1C04
l004F_1BFD:
	DOS3Call()
	goto l004F_1C06
	// succ:  l004F_1C06
l004F_1C04:
	__syscall(0x21)
	// succ:  l004F_1C06
l004F_1C06:
	ax = ax + Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp + 0x000A:word16] + C
	SCZO = cond(dx)
	branch Test(NS,S) l004F_1C2B
	// succ:  l004F_1C0E l004F_1C2B
l004F_1C0E:
	cx = Mem0[ss:bp - 0x0004:word16]
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = 0x4200
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_1C27
	// succ:  l004F_1C20 l004F_1C27
l004F_1C20:
	DOS3Call()
	goto l004F_1C29
	// succ:  l004F_1C29
l004F_1C27:
	__syscall(0x21)
	// succ:  l004F_1C29
l004F_1C29:
	goto l004F_1BE3
	// succ:  l004F_1BE3
l004F_1C2B:
	dx = Mem0[ss:bp + 0x0008:word16]
	cx = Mem0[ss:bp + 0x000A:word16]
	al = Mem0[ss:bp + 0x000C:byte]
	ah = 0x42
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_1C46
	// succ:  l004F_1C3F l004F_1C46
l004F_1C3F:
	DOS3Call()
	goto l004F_1C48
	// succ:  l004F_1C48
l004F_1C46:
	__syscall(0x21)
	// succ:  l004F_1C48
l004F_1C48:
	branch Test(ULT,C) l004F_1C4F
	// succ:  l004F_1C4A l004F_1C4F
l004F_1C4A:
	v18 = Mem0[ds:bx + 0x08AC:byte] & 0xFD
	Mem0[ds:bx + 0x08AC:byte] = v18
	SZO = cond(Mem0[ds:bx + 0x08AC:byte])
	C = false
	// succ:  l004F_1C4F
l004F_1C4F:
	// succ:  l004F_1C4F_thunk_fn004F_117D
l004F_1C4F_thunk_fn004F_117D:
	call fn004F_117D (retsize: 0;)
	return
	// succ:  fn004F_1B7E_exit
fn004F_1B7E_exit:


// fn004F_1C52
// Return size: 0
void fn004F_1C52()
fn004F_1C52_entry:
	// succ:  l004F_1C52
l004F_1C52:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ds:0x08A6:word16]
	SCZO = cond(Mem0[ds:0x0966:word16] - 0x0000)
	branch Test(EQ,Z) l004F_1C78
	// succ:  l004F_1C6C l004F_1C78
l004F_1C6C:
	ax = Mem0[ds:0x08AA:word16]
	SCZO = cond(bx - 0x0002)
	branch Test(UGT,CZ) l004F_1C78
	// succ:  l004F_1C74 l004F_1C78
l004F_1C74:
	bx = Mem0[ds:0x08A6:word16]
	// succ:  l004F_1C78
l004F_1C78:
	SCZO = cond(bx - ax)
	branch Test(ULT,C) l004F_1C82
	// succ:  l004F_1C7C l004F_1C82
l004F_1C7C:
	C = true
	ax = 0x0900
l004F_1C80:
	goto l004F_1CF9
	// succ:  l004F_1CF9
l004F_1C82:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = Mem0[ss:bp + 0x000A:word16]
	branch cx == 0x0000 l004F_1C80
	// succ:  l004F_1C89 l004F_1C80
l004F_1C89:
	SZO = cond(Mem0[ds:bx + 0x08AC:byte] & 0x02)
	C = false
	branch Test(NE,Z) l004F_1C80
	// succ:  l004F_1C90 l004F_1C80
l004F_1C90:
	cx = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(bx - Mem0[ds:0x08A6:word16])
	dx = Mem0[ss:bp + 0x0008:word16]
	branch Test(ULT,C) l004F_1CA1
	// succ:  l004F_1C9C l004F_1CA1
l004F_1C9C:
	call fn004F_21C1 (retsize: 2;)
	goto l004F_1CB5
	// succ:  l004F_1CB5
l004F_1CA1:
	ah = 0x3F
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_1CB3
	// succ:  l004F_1CAC l004F_1CB3
l004F_1CAC:
	DOS3Call()
	goto l004F_1CB5
	// succ:  l004F_1CB5
l004F_1CB3:
	__syscall(0x21)
	// succ:  l004F_1CB5
l004F_1CB5:
	branch Test(UGE,C) l004F_1CBB
	// succ:  l004F_1CB7 l004F_1CBB
l004F_1CB7:
	ah = 0x09
	goto l004F_1CF9
	// succ:  l004F_1CF9
l004F_1CBB:
	SZO = cond(Mem0[ds:bx + 0x08AC:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l004F_1CF9
	// succ:  l004F_1CC2 l004F_1CF9
l004F_1CC2:
	v16 = Mem0[ds:bx + 0x08AC:byte] & 0xFB
	Mem0[ds:bx + 0x08AC:byte] = v16
	SZO = cond(Mem0[ds:bx + 0x08AC:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	D = false
	si = dx
	di = dx
	cx = ax
	branch cx == 0x0000 l004F_1CF7
	// succ:  l004F_1CD2 l004F_1CF7
l004F_1CD2:
	ah = 0x0D
	SCZO = cond(Mem0[ds:si:byte] - 0x0A)
	branch Test(NE,Z) l004F_1CDE
	// succ:  l004F_1CD9 l004F_1CDE
l004F_1CD9:
	v20 = Mem0[ds:bx + 0x08AC:byte] | 0x04
	Mem0[ds:bx + 0x08AC:byte] = v20
	SZO = cond(Mem0[ds:bx + 0x08AC:byte])
	C = false
	// succ:  l004F_1CDE
l004F_1CDE:
	al = Mem0[si:byte]
	si = si + 0x0001
	SCZO = cond(al - ah)
	branch Test(EQ,Z) l004F_1CFC
	// succ:  l004F_1CE3 l004F_1CFC
l004F_1CE3:
	SCZO = cond(al - 0x1A)
	branch Test(NE,Z) l004F_1CEE
	// succ:  l004F_1CE7 l004F_1CEE
l004F_1CE7:
	v22 = Mem0[ds:bx + 0x08AC:byte] | 0x02
	Mem0[ds:bx + 0x08AC:byte] = v22
	SZO = cond(Mem0[ds:bx + 0x08AC:byte])
	C = false
	goto l004F_1CF3
	// succ:  l004F_1CF3
l004F_1CEE:
	Mem0[ds:di:byte] = al
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l004F_1CF1
l004F_1CF1:
	cx = cx - 0x0001
	branch cx != 0x0000 l004F_1CDE
	// succ:  l004F_1CF3 l004F_1CDE
l004F_1CF3:
	ax = di
	ax = ax - dx
	SCZO = cond(ax)
	// succ:  l004F_1CF7
l004F_1CF7:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l004F_1CF9
l004F_1CF9:
	// succ:  l004F_1CF9_thunk_fn004F_117D
l004F_1CF9_thunk_fn004F_117D:
	call fn004F_117D (retsize: 0;)
	return
	// succ:  fn004F_1C52_exit
l004F_1CFC:
	SCZO = cond(cx - 0x0001)
	branch Test(EQ,Z) l004F_1D08
	// succ:  l004F_1D01 l004F_1D08
l004F_1D01:
	SCZO = cond(Mem0[ds:si:byte] - 0x0A)
	branch Test(EQ,Z) l004F_1CF1
	// succ:  l004F_1D06 l004F_1CF1
l004F_1D06:
	goto l004F_1CEE
	// succ:  l004F_1CEE
l004F_1D08:
	SZO = cond(Mem0[ds:bx + 0x08AC:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l004F_1D58
	// succ:  l004F_1D0F l004F_1D58
l004F_1D0F:
	SCZO = cond(bx - Mem0[ds:0x08A6:word16])
	branch Test(UGE,C) l004F_1D30
	// succ:  l004F_1D15 l004F_1D30
l004F_1D15:
	ax = 0x4400
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_1D28
	// succ:  l004F_1D21 l004F_1D28
l004F_1D21:
	DOS3Call()
	goto l004F_1D2A
	// succ:  l004F_1D2A
l004F_1D28:
	__syscall(0x21)
	// succ:  l004F_1D2A
l004F_1D2A:
	SZO = cond(dx & 0x0020)
	C = false
	branch Test(NE,Z) l004F_1D54
	// succ:  l004F_1D30 l004F_1D54
l004F_1D30:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	dx = bp - 0x0003
	branch Test(ULT,C) l004F_1D3D
	// succ:  l004F_1D38 l004F_1D3D
l004F_1D38:
	call fn004F_21C1 (retsize: 2;)
	goto l004F_1D51
	// succ:  l004F_1D51
l004F_1D3D:
	ah = 0x3F
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_1D4F
	// succ:  l004F_1D48 l004F_1D4F
l004F_1D48:
	DOS3Call()
	goto l004F_1D51
	// succ:  l004F_1D51
l004F_1D4F:
	__syscall(0x21)
	// succ:  l004F_1D51
l004F_1D51:
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l004F_1D52
l004F_1D52:
	branch Test(ULT,C) l004F_1CF7
	// succ:  l004F_1D54 l004F_1CF7
l004F_1D54:
	al = 0x0A
	goto l004F_1DA8
	// succ:  l004F_1DA8
l004F_1D58:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0003:byte] = 0x00
	dx = bp - 0x0003
	ah = 0x3F
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_1D74
	// succ:  l004F_1D6D l004F_1D74
l004F_1D6D:
	DOS3Call()
	goto l004F_1D76
	// succ:  l004F_1D76
l004F_1D74:
	__syscall(0x21)
	// succ:  l004F_1D76
l004F_1D76:
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	branch Test(ULT,C) l004F_1D52
	// succ:  l004F_1D79 l004F_1D52
l004F_1D79:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_1DA6
	// succ:  l004F_1D7D l004F_1DA6
l004F_1D7D:
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x0001)
	branch Test(EQ,Z) l004F_1DB4
	// succ:  l004F_1D83 l004F_1DB4
l004F_1D83:
	cx = 0xFFFF
	dx = cx
	ax = 0x4201
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_1D9B
	// succ:  l004F_1D94 l004F_1D9B
l004F_1D94:
	DOS3Call()
	goto l004F_1D9D
	// succ:  l004F_1D9D
l004F_1D9B:
	__syscall(0x21)
	// succ:  l004F_1D9D
l004F_1D9D:
	cx = 0x0001
	SCZO = cond(Mem0[ss:bp - 0x0003:byte] - 0x0A)
	branch Test(EQ,Z) l004F_1DAE
	// succ:  l004F_1DA6 l004F_1DAE
l004F_1DA6:
	al = 0x0D
	// succ:  l004F_1DA8
l004F_1DA8:
	dx = Mem0[ss:bp + 0x0008:word16]
	goto l004F_1CEE
	// succ:  l004F_1CEE
l004F_1DAE:
	dx = Mem0[ss:bp + 0x0008:word16]
	goto l004F_1CF1
	// succ:  l004F_1CF1
l004F_1DB4:
	SCZO = cond(Mem0[ss:bp - 0x0003:byte] - 0x0A)
	branch Test(NE,Z) l004F_1D83
	// succ:  l004F_1DBA l004F_1D83
l004F_1DBA:
	goto l004F_1D54
	// succ:  l004F_1D54
fn004F_1C52_exit:


// fn004F_1DBC
// Return size: 0
void fn004F_1DBC()
fn004F_1DBC_entry:
	// succ:  l004F_1DBC
l004F_1DBC:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ds:0x08A6:word16]
	Mem0[ss:bp - 0x000C:word16] = ax
	SCZO = cond(Mem0[ds:0x0966:word16] - 0x0000)
	branch Test(EQ,Z) l004F_1DE8
	// succ:  l004F_1DD9 l004F_1DE8
l004F_1DD9:
	ax = Mem0[ds:0x08AA:word16]
	SCZO = cond(bx - 0x0002)
	branch Test(UGT,CZ) l004F_1DE8
	// succ:  l004F_1DE1 l004F_1DE8
l004F_1DE1:
	bx = Mem0[ds:0x08A6:word16]
	Mem0[ss:bp + 0x0006:word16] = bx
	// succ:  l004F_1DE8
l004F_1DE8:
	SCZO = cond(bx - ax)
	branch Test(ULT,C) l004F_1DF3
	// succ:  l004F_1DEC l004F_1DF3
l004F_1DEC:
	ax = 0x0900
	C = true
l004F_1DF0:
	// succ:  l004F_1DF0_thunk_fn004F_117D
l004F_1DF0_thunk_fn004F_117D:
	call fn004F_117D (retsize: 0;)
	return
	// succ:  fn004F_1DBC_exit
l004F_1DF3:
	SZO = cond(Mem0[ds:bx + 0x08AC:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l004F_1E15
	// succ:  l004F_1DFA l004F_1E15
l004F_1DFA:
	ax = 0x4202
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	dx = cx
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_1E11
	// succ:  l004F_1E0A l004F_1E11
l004F_1E0A:
	DOS3Call()
	goto l004F_1E13
	// succ:  l004F_1E13
l004F_1E11:
	__syscall(0x21)
	// succ:  l004F_1E13
l004F_1E13:
	branch Test(ULT,C) l004F_1DF0
	// succ:  l004F_1E15 l004F_1DF0
l004F_1E15:
	SZO = cond(Mem0[ds:bx + 0x08AC:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l004F_1E8D
	SZO = cond(Mem0[ds:bx + 0x08AC:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l004F_1E8D
	// succ:  l004F_1E1C l004F_1E8D
l004F_1E1C:
	dx = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = ax
	D = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = dx
	si = dx
	Mem0[ss:bp - 0x000A:word16] = sp
	cx = Mem0[ss:bp + 0x000A:word16]
	branch cx == 0x0000 l004F_1E72
	dx = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = ax
	D = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = dx
	si = dx
	Mem0[ss:bp - 0x000A:word16] = sp
	cx = Mem0[ss:bp + 0x000A:word16]
	branch cx == 0x0000 l004F_1E72
	// succ:  l004F_1E38 l004F_1E72
l004F_1E38:
	al = 0x0A
	al = 0x0A
	// succ:  l004F_1E3A
l004F_1E3A:
	branch cx == 0x0000 l004F_1E3C
	// succ:  l004F_1E3A_1 l004F_1E3C
l004F_1E3A_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l004F_1E3A
	// succ:  l004F_1E3C l004F_1E3A
l004F_1E3C:
	branch Test(NE,Z) l004F_1E8B
	// succ:  l004F_1E3E l004F_1E8B
l004F_1E3E:
	sp = sp - 0x0002
	call fn004F_25E4 (retsize: 2;)
	SCZO = cond(ax - 0x00A8)
	branch Test(ULE,CZ) l004F_1E8F
	// succ:  l004F_1E48 l004F_1E8F
l004F_1E48:
	sp = sp - 0x0002
	SCZO = cond(sp)
	bx = sp
	dx = 0x0200
	SCZO = cond(ax - 0x0228)
	branch Test(UGE,C) l004F_1E58
	// succ:  l004F_1E55 l004F_1E58
l004F_1E55:
	dx = 0x0080
	// succ:  l004F_1E58
l004F_1E58:
	sp = sp - dx
	SCZO = cond(sp)
	dx = sp
	di = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = Mem0[ss:bp + 0x000A:word16]
	// succ:  l004F_1E63
l004F_1E63:
	al = Mem0[si:byte]
	si = si + 0x0001
	SCZO = cond(al - 0x0A)
	branch Test(EQ,Z) l004F_1E75
	// succ:  l004F_1E68 l004F_1E75
l004F_1E68:
	SCZO = cond(di - bx)
	branch Test(EQ,Z) l004F_1E86
	// succ:  l004F_1E6C l004F_1E86
l004F_1E6C:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	branch cx != 0x0000 l004F_1E63
	// succ:  l004F_1E6F l004F_1E63
l004F_1E6F:
	call fn004F_1E96 (retsize: 2;)
	// succ:  l004F_1E72
l004F_1E72:
	// succ:  l004F_1E72_thunk_fn004F_1EFA
l004F_1E72_thunk_fn004F_1EFA:
	call fn004F_1EFA (retsize: 0;)
	return
	// succ:  fn004F_1DBC_exit
l004F_1E75:
	al = 0x0D
	SCZO = cond(di - bx)
	branch Test(NE,Z) l004F_1E7E
	// succ:  l004F_1E7B l004F_1E7E
l004F_1E7B:
	call fn004F_1E96 (retsize: 2;)
	// succ:  l004F_1E7E
l004F_1E7E:
	Mem0[di:byte] = al
	di = di + 0x0001
	al = 0x0A
	v20 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v20
	SZO = cond(v20)
	goto l004F_1E68
	// succ:  l004F_1E68
l004F_1E86:
	call fn004F_1E96 (retsize: 2;)
	goto l004F_1E6C
	// succ:  l004F_1E6C
l004F_1E8B:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l004F_1E8D
l004F_1E8D:
	goto l004F_1F08
	// succ:  l004F_1F08
l004F_1E8F:
	ax = 0xFFFC
	sp = sp - 0x0002
	call fn004F_21EE (retsize: 2;)
l004F_1F08:
	cx = Mem0[ss:bp + 0x000A:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(NE,Z) l004F_1F14
	// succ:  l004F_1F0F l004F_1F14
l004F_1F0F:
	ax = cx
	// succ:  l004F_1F11_thunk_fn004F_117D
l004F_1F11_thunk_fn004F_117D:
	call fn004F_117D (retsize: 0;)
	return
	// succ:  fn004F_1DBC_exit
l004F_1F14:
	dx = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(bx - Mem0[ss:bp - 0x000C:word16])
	branch Test(ULT,C) l004F_1F21
	// succ:  l004F_1F1C l004F_1F21
l004F_1F1C:
	call fn004F_21C1 (retsize: 2;)
	goto l004F_1F35
	// succ:  l004F_1F35
l004F_1F21:
	ah = 0x40
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_1F33
	// succ:  l004F_1F2C l004F_1F33
l004F_1F2C:
	DOS3Call()
	goto l004F_1F35
	// succ:  l004F_1F35
l004F_1F33:
	__syscall(0x21)
	// succ:  l004F_1F35
l004F_1F35:
	branch Test(UGE,C) l004F_1F3B
	// succ:  l004F_1F37 l004F_1F3B
l004F_1F37:
	ah = 0x09
	// succ:  l004F_1F39_thunk_fn004F_1F05
l004F_1F39_thunk_fn004F_1F05:
	call fn004F_1F05 (retsize: 0;)
	return
	// succ:  fn004F_1DBC_exit
l004F_1F3B:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l004F_1F3D_thunk_fn004F_1F05
	goto l004F_1F3F
	// succ:  l004F_1F3F l004F_1F3D_thunk_fn004F_1F05
l004F_1F3D_thunk_fn004F_1F05:
	call fn004F_1F05 (retsize: 0;)
	return
	// succ:  fn004F_1DBC_exit
l004F_1F3F:
	SZO = cond(Mem0[ds:bx + 0x08AC:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l004F_1F50
	// succ:  l004F_1F46 l004F_1F50
l004F_1F46:
	bx = dx
	SCZO = cond(Mem0[ds:bx:byte] - 0x1A)
	branch Test(NE,Z) l004F_1F50
	// succ:  l004F_1F4D l004F_1F50
l004F_1F4D:
	C = false
	// succ:  l004F_1F4E_thunk_fn004F_1F05
l004F_1F4E_thunk_fn004F_1F05:
	call fn004F_1F05 (retsize: 0;)
	return
	// succ:  fn004F_1DBC_exit
l004F_1F50:
	C = true
	ax = 0x1C00
	// succ:  l004F_1F54_thunk_fn004F_1F05
l004F_1F54_thunk_fn004F_1F05:
	call fn004F_1F05 (retsize: 0;)
	return
	// succ:  fn004F_1DBC_exit
fn004F_1DBC_exit:


// fn004F_1E96
// Return size: 2
void fn004F_1E96()
fn004F_1E96_entry:
	// succ:  l004F_1E96
l004F_1E96:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = di
	cx = cx - dx
	SCZO = cond(cx)
	branch cx == 0x0000 l004F_1ECB
	// succ:  l004F_1E9F l004F_1ECB
l004F_1E9F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	bx = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx - Mem0[ss:bp - 0x000C:word16])
	branch Test(ULT,C) l004F_1EAD
	// succ:  l004F_1EA8 l004F_1EAD
l004F_1EA8:
	call fn004F_21C1 (retsize: 2;)
	goto l004F_1EC1
	// succ:  l004F_1EC1
l004F_1EAD:
	ah = 0x40
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_1EBF
	// succ:  l004F_1EB8 l004F_1EBF
l004F_1EB8:
	DOS3Call()
	goto l004F_1EC1
	// succ:  l004F_1EC1
l004F_1EBF:
	__syscall(0x21)
	// succ:  l004F_1EC1
l004F_1EC1:
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	branch Test(ULT,C) l004F_1ED1
	// succ:  l004F_1EC4 l004F_1ED1
l004F_1EC4:
	v12 = Mem0[ss:bp - 0x0004:word16] + ax
	Mem0[ss:bp - 0x0004:word16] = v12
	SCZO = cond(v12)
	SCZO = cond(cx - ax)
	branch Test(UGT,CZ) l004F_1ED1
	// succ:  l004F_1ECB l004F_1ED1
l004F_1ECB:
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = dx
	return
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = dx
	return
	// succ:  fn004F_1E96_exit fn004F_1E96_exit
l004F_1ED1:
	ah = FPUF
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(NE,Z) l004F_1EFA
	goto l004F_1EDB
	// succ:  l004F_1EDB l004F_1ED9_thunk_fn004F_1EFA
l004F_1ED9_thunk_fn004F_1EFA:
	call fn004F_1EFA (retsize: 0;)
	return
	// succ:  fn004F_1E96_exit
l004F_1EDB:
	SCZO = ah
	branch Test(UGE,C) l004F_1EE2
	// succ:  l004F_1EDE l004F_1EE2
l004F_1EDE:
	ah = 0x09
	// succ:  l004F_1EDE_thunk_fn004F_1EFA
l004F_1EDE_thunk_fn004F_1EFA:
	call fn004F_1EFA (retsize: 0;)
	return
	// succ:  fn004F_1E96_exit
l004F_1EE2:
	SZO = cond(Mem0[ds:bx + 0x08AC:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l004F_1EF4
	// succ:  l004F_1EE9 l004F_1EF4
l004F_1EE9:
	bx = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x1A)
	branch Test(NE,Z) l004F_1EF4
	// succ:  l004F_1EF1 l004F_1EF4
l004F_1EF1:
	C = false
	// succ:  l004F_1EF1_thunk_fn004F_1EFA
l004F_1EF1_thunk_fn004F_1EFA:
	call fn004F_1EFA (retsize: 0;)
	return
	// succ:  fn004F_1E96_exit
l004F_1EF4:
	C = true
	ax = 0x1C00
	// succ:  l004F_1EF5_thunk_fn004F_1EFA
l004F_1EF5_thunk_fn004F_1EFA:
	call fn004F_1EFA (retsize: 0;)
	return
	// succ:  fn004F_1E96_exit
fn004F_1E96_exit:


// fn004F_1EFA
// Return size: 0
void fn004F_1EFA()
fn004F_1EFA_entry:
	// succ:  l004F_1EFA
l004F_1EFA:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax - Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax)
	// succ:  l004F_1F00
l004F_1F00:
	sp = Mem0[ss:bp - 0x000A:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
fn004F_1EFA_exit:


// fn004F_1F05
// Return size: 0
void fn004F_1F05()
fn004F_1F05_entry:
	// succ:  l004F_1F05
l004F_1F05:
	sp = fp
	goto l004F_1F05_thunk_fn004F_117D
	// succ:  l004F_1F05_thunk_fn004F_117D
l004F_1F05:
	goto l004F_1F05_thunk_fn004F_117D
	// succ:  l004F_1F05_thunk_fn004F_117D
l004F_1F05_thunk_fn004F_117D:
	call fn004F_117D (retsize: 0;)
	return
	// succ:  fn004F_1F05_exit
l004F_1F05_thunk_fn004F_117D:
	call fn004F_117D (retsize: 0;)
	return
	// succ:  fn004F_1F05_exit
fn004F_1F05_exit:


// fn004F_1F56
// Return size: 4
void fn004F_1F56()
fn004F_1F56_entry:
	// succ:  l004F_1F56
l004F_1F56:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = di
	bx = si
	ax = ds
	es = ax
	di = Mem0[ss:bp + 0x0006:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l004F_1F69
l004F_1F69:
	branch cx == 0x0000 l004F_1F6B
	// succ:  l004F_1F69_1 l004F_1F6B
l004F_1F69_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l004F_1F69
	// succ:  l004F_1F6B l004F_1F69
l004F_1F6B:
	si = di - 0x0001
	di = Mem0[ss:bp + 0x0008:word16]
	cx = 0xFFFF
	// succ:  l004F_1F74
l004F_1F74:
	branch cx == 0x0000 l004F_1F76
	// succ:  l004F_1F74_2 l004F_1F76
l004F_1F74_2:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l004F_1F74
	// succ:  l004F_1F76 l004F_1F74
l004F_1F76:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v18 = si
	si = di
	di = v18
	ax = Mem0[ss:bp + 0x0006:word16]
	SZO = cond(si & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_1F87
	// succ:  l004F_1F85 l004F_1F87
l004F_1F85:
	v19 = Mem0[si:byte]
	Mem0[di:byte] = v19
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l004F_1F87
l004F_1F87:
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l004F_1F89
l004F_1F89:
	branch cx == 0x0000 l004F_1F8B
	// succ:  l004F_1F89_1 l004F_1F8B
l004F_1F89_1:
	v20 = Mem0[si:word16]
	Mem0[di:word16] = v20
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l004F_1F89
	// succ:  l004F_1F89
l004F_1F8B:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l004F_1F8D
l004F_1F8D:
	branch cx == 0x0000 l004F_1F8F
	// succ:  l004F_1F8D_1 l004F_1F8F
l004F_1F8D_1:
	v21 = Mem0[si:byte]
	Mem0[di:byte] = v21
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l004F_1F8D
	// succ:  l004F_1F8D
l004F_1F8F:
	si = bx
	di = dx
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_1F56_exit
fn004F_1F56_exit:


// fn004F_1F96
// Return size: 4
void fn004F_1F96()
fn004F_1F96_entry:
	// succ:  l004F_1F96
l004F_1F96:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = di
	bx = si
	si = Mem0[ss:bp + 0x0008:word16]
	di = si
	ax = ds
	es = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l004F_1FAB
l004F_1FAB:
	branch cx == 0x0000 l004F_1FAD
	// succ:  l004F_1FAB_1 l004F_1FAD
l004F_1FAB_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l004F_1FAB
	// succ:  l004F_1FAD l004F_1FAB
l004F_1FAD:
	cx = ~cx
	di = Mem0[ss:bp + 0x0006:word16]
	ax = di
	SZO = cond(al & 0x01)
	C = false
	branch Test(EQ,Z) l004F_1FBA
	// succ:  l004F_1FB8 l004F_1FBA
l004F_1FB8:
	v18 = Mem0[si:byte]
	Mem0[di:byte] = v18
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l004F_1FBA
l004F_1FBA:
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l004F_1FBC
l004F_1FBC:
	branch cx == 0x0000 l004F_1FBE
	// succ:  l004F_1FBC_1 l004F_1FBE
l004F_1FBC_1:
	v19 = Mem0[si:word16]
	Mem0[di:word16] = v19
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l004F_1FBC
	// succ:  l004F_1FBC
l004F_1FBE:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l004F_1FC0
l004F_1FC0:
	branch cx == 0x0000 l004F_1FC2
	// succ:  l004F_1FC0_1 l004F_1FC2
l004F_1FC0_1:
	v20 = Mem0[si:byte]
	Mem0[di:byte] = v20
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l004F_1FC0
	// succ:  l004F_1FC0
l004F_1FC2:
	si = bx
	di = dx
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_1F96_exit
fn004F_1F96_exit:


// fn004F_201C
// Return size: 4
void fn004F_201C()
fn004F_201C_entry:
	// succ:  l004F_201C
l004F_201C:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x001C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	di = Mem0[ds:bx + 0x09AC:word16]
	si = si + 0x0050
	SCZO = cond(si)
	SZO = cond(si & 0x0003)
	C = false
	branch Test(NE,Z) l004F_2042
	// succ:  l004F_203B l004F_2042
l004F_203B:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0002)
	branch Test(LE,SZO) l004F_2042
	// succ:  l004F_2041 l004F_2042
l004F_2041:
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l004F_2042
l004F_2042:
	sp = sp - 0x0002
	call fn004F_279A (retsize: 2;)
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0018
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si
	cx = 0x016D
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	cx = ax
	ax = Mem0[ss:bp + 0x000A:word16]
	bx = dx
	dx_ax = (int32) ax
	Mem0[ss:bp - 0x001C:word16] = ax
	Mem0[ss:bp - 0x001A:word16] = dx
	ax = si - 0x0001
	ax = ax >> 0x0001
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax + Mem0[ss:bp - 0x001C:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp - 0x001A:word16] + C
	SCZO = cond(dx)
	cx = cx + ax
	SCZO = cond(cx)
	bx = bx + dx + C
	SCZO = cond(bx)
	ax = di
	dx_ax = (int32) ax
	cx = cx + ax
	SCZO = cond(cx)
	bx = bx + dx + C
	SCZO = cond(bx)
	cx = cx + 0x0001
	SCZO = cond(cx)
	bx = bx + 0x00 + C
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn004F_0B0A (retsize: 2;)
	sp = sp + 0x0008
	cx = ax
	ax = Mem0[ss:bp + 0x000C:word16]
	bx = dx
	dx_ax = (int32) ax
	cx = cx + ax
	SCZO = cond(cx)
	bx = bx + dx + C
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn004F_0B0A (retsize: 2;)
	sp = sp + 0x0008
	cx = ax
	ax = Mem0[ss:bp + 0x000E:word16]
	bx = dx
	dx_ax = (int32) ax
	cx = cx + ax
	SCZO = cond(cx)
	bx = bx + dx + C
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn004F_0B0A (retsize: 2;)
	sp = sp + 0x0008
	cx = ax
	ax = Mem0[ss:bp + 0x0010:word16]
	bx = dx
	dx_ax = (int32) ax
	cx = cx + ax
	SCZO = cond(cx)
	bx = bx + dx + C
	SCZO = cond(bx)
	cx = cx + Mem0[ds:0x09CC:word16]
	SCZO = cond(cx)
	bx = bx + Mem0[ds:0x09CE:word16] + C
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0018:word16] = cx
	Mem0[ss:bp - 0x0016:word16] = bx
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax + di
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = si
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = Mem0[ss:bp + 0x000C:word16]
	Mem0[ss:bp - 0x0010:word16] = ax
	SCZO = cond(Mem0[ds:0x09D0:word16] - 0x0000)
	branch Test(EQ,Z) l004F_2108
	// succ:  l004F_20EF l004F_2108
l004F_20EF:
	ax = bp - 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_28BA (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_2108
	// succ:  l004F_20FF l004F_2108
l004F_20FF:
	v17 = Mem0[ss:bp - 0x0018:word16] - 0x0E10
	Mem0[ss:bp - 0x0018:word16] = v17
	SCZO = cond(v17)
	v18 = Mem0[ss:bp - 0x0016:word16] - 0x00 - C
	Mem0[ss:bp - 0x0016:word16] = v18
	SCZO = cond(v18)
	// succ:  l004F_2108
l004F_2108:
	ax = Mem0[ss:bp - 0x0018:word16]
	dx = Mem0[ss:bp - 0x0016:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_201C_exit
fn004F_201C_exit:


// fn004F_2118
// Return size: 4
void fn004F_2118()
fn004F_2118_entry:
	// succ:  l004F_2118
l004F_2118:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = di
	bx = si
	ax = ds
	es = ax
	si = Mem0[ss:bp + 0x0008:word16]
	di = Mem0[ss:bp + 0x0006:word16]
	ax = di
	cx = Mem0[ss:bp + 0x000A:word16]
	branch cx == 0x0000 l004F_213E
	// succ:  l004F_2130 l004F_213E
l004F_2130:
	SZO = cond(al & 0x01)
	C = false
	branch Test(EQ,Z) l004F_2136
	// succ:  l004F_2134 l004F_2136
l004F_2134:
	v17 = Mem0[si:byte]
	Mem0[di:byte] = v17
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l004F_2136
l004F_2136:
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l004F_2138
l004F_2138:
	branch cx == 0x0000 l004F_213A
	// succ:  l004F_2138_1 l004F_213A
l004F_2138_1:
	v19 = Mem0[si:word16]
	Mem0[di:word16] = v19
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l004F_2138
	// succ:  l004F_2138
l004F_213A:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l004F_213C
l004F_213C:
	branch cx == 0x0000 l004F_213E
	// succ:  l004F_213C_1 l004F_213E
l004F_213C_1:
	v20 = Mem0[si:byte]
	Mem0[di:byte] = v20
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l004F_213C
	// succ:  l004F_213C
l004F_213E:
	si = bx
	di = dx
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_2118_exit
fn004F_2118_exit:


// fn004F_2144
// Return size: 0
void fn004F_2144()
fn004F_2144_entry:
	// succ:  l004F_2144
l004F_2144:
	cx = Mem0[ss:bp + 0x000C:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	di = Mem0[ss:bp + 0x000A:word16]
	// succ:  l004F_214D_thunk_fn004F_2150
l004F_214D_thunk_fn004F_2150:
	call fn004F_2150 (retsize: 0;)
	return
	// succ:  fn004F_2144_exit
fn004F_2144_exit:


// fn004F_2150
// Return size: 0
void fn004F_2150()
fn004F_2150_entry:
	// succ:  l004F_2150
l004F_2150:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	D = false
	v8 = ax
	ax = bx
	bx = v8
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l004F_2157_thunk_fn004F_216C
	goto l004F_2157_thunk_fn004F_2159
	// succ:  l004F_2157_thunk_fn004F_2159 l004F_2157_thunk_fn004F_216C
l004F_2150:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	D = false
	v15 = ax
	ax = bx
	bx = v15
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l004F_216C
	goto l004F_2157_thunk_fn004F_2159
	// succ:  l004F_2157_thunk_fn004F_2159 l004F_2157_thunk_fn004F_216C
l004F_2157_thunk_fn004F_2159:
	call fn004F_2159 (retsize: 0;)
	return
	// succ:  fn004F_2150_exit l004F_2157_thunk_fn004F_2159
l004F_2157_thunk_fn004F_2159:
	call fn004F_2159 (retsize: 0;)
	return
	// succ:  fn004F_2150_exit
l004F_2157_thunk_fn004F_2159:
	call fn004F_2159 (retsize: 0;)
	return
	// succ:  fn004F_2150_exit
l004F_2157_thunk_fn004F_216C:
	call fn004F_216C (retsize: 0;)
	return
	// succ:  fn004F_2150_exit
l004F_2157_thunk_fn004F_216C:
	call fn004F_216C (retsize: 0;)
	return
	// succ:  fn004F_2150_exit
fn004F_2150_exit:


// fn004F_2159
// Return size: 0
void fn004F_2159()
fn004F_2159_entry:
	// succ:  l004F_2159
l004F_2159:
	SCZO = cond(cx - 0x000A)
	branch Test(NE,Z) l004F_216C
	goto l004F_215E
	// succ:  l004F_215E l004F_215C_thunk_fn004F_216C
l004F_215C_thunk_fn004F_216C:
	call fn004F_216C (retsize: 0;)
	return
	// succ:  fn004F_2159_exit
l004F_215E:
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NS,S) l004F_216C
	goto l004F_2162
	// succ:  l004F_2162 l004F_2160_thunk_fn004F_216C
l004F_2160_thunk_fn004F_216C:
	call fn004F_216C (retsize: 0;)
	return
	// succ:  fn004F_2159_exit
l004F_2162:
	al = 0x2D
	Mem0[di:byte] = al
	di = di + 0x0001
	bx = -bx
	SCZO = cond(bx)
	C = bx == 0x0000
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	// succ:  l004F_216A_thunk_fn004F_216C
l004F_216A_thunk_fn004F_216C:
	call fn004F_216C (retsize: 0;)
	return
	// succ:  fn004F_2159_exit
fn004F_2159_exit:


// fn004F_216C
// Return size: 0
void fn004F_216C()
fn004F_216C_entry:
	// succ:  l004F_216C
l004F_216C:
	si = di
	// succ:  l004F_216E
l004F_216E:
	v5 = ax
	ax = dx
	dx = v5
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_2177
	// succ:  l004F_2175 l004F_2177
l004F_2175:
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	// succ:  l004F_2177
l004F_2177:
	v13 = ax
	ax = bx
	bx = v13
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	v15 = ax
	ax = dx
	dx = v15
	v16 = bx
	bx = dx
	dx = v16
	al = al + 0x30
	SCZO = cond(al)
	SCZO = cond(al - 0x39)
	branch Test(ULE,CZ) l004F_2185
	// succ:  l004F_2183 l004F_2185
l004F_2183:
	al = al + 0x27
	SCZO = cond(al)
	// succ:  l004F_2185
l004F_2185:
	Mem0[di:byte] = al
	di = di + 0x0001
	ax = dx
	ax = ax | bx
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l004F_216E
	// succ:  l004F_218C l004F_216E
l004F_218C:
	Mem0[ds:di:byte] = al
	// succ:  l004F_218E
l004F_218E:
	di = di - 0x0001
	SZO = cond(di)
	al = Mem0[si:byte]
	si = si + 0x0001
	v20 = Mem0[ds:di:byte]
	Mem0[ds:di:byte] = al
	al = v20
	Mem0[ds:si - 0x0001:byte] = al
	ax = si + 0x0001
	SCZO = cond(ax - di)
	branch Test(ULT,C) l004F_218E
	// succ:  l004F_219C l004F_218E
l004F_219C:
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_216C_exit
fn004F_216C_exit:


// fn004F_21A4
// Return size: 4
void fn004F_21A4()
fn004F_21A4_entry:
	// succ:  l004F_21A4
l004F_21A4:
	sp = fp
	ch = ch ^ ch
	SZO = cond(ch)
	C = false
	branch cx == 0x0000 l004F_21AE
	// succ:  l004F_21A8 l004F_21AE
l004F_21A8:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v9 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v9
	cx = cx - 0x0001
	branch cx != 0x0000 l004F_21A8
	// succ:  l004F_21AE l004F_21A8
l004F_21AE:
	return
	// succ:  fn004F_21A4_exit
fn004F_21A4_exit:


// fn004F_21B0
// Return size: 4
void fn004F_21B0()
fn004F_21B0_entry:
	// succ:  l004F_21B0
l004F_21B0:
	sp = fp
	ch = ch ^ ch
	SZO = cond(ch)
	C = false
	branch cx == 0x0000 l004F_21BA
	// succ:  l004F_21B4 l004F_21BA
l004F_21B4:
	dx = dx >> 0x0001
	SCZO = cond(dx)
	v9 = (ax & 0x0001 << 0x01) != 0x0000
	ax = __rcr(ax, 0x01, C)
	C = v9
	cx = cx - 0x0001
	branch cx != 0x0000 l004F_21B4
	// succ:  l004F_21BA l004F_21B4
l004F_21BA:
	return
	// succ:  fn004F_21B0_exit
fn004F_21B0_exit:


// fn004F_21BC
// Return size: 2
void fn004F_21BC()
fn004F_21BC_entry:
	// succ:  l004F_21BC
l004F_21BC:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_21BC_exit
fn004F_21BC_exit:


// fn004F_21C1
// Return size: 4
void fn004F_21C1()
fn004F_21C1_entry:
	// succ:  l004F_21C1
l004F_21C1:
	sp = fp
	ax = 0x0014
	// succ:  l004F_21C1_thunk_fn004F_111B
l004F_21C1_thunk_fn004F_111B:
	call fn004F_111B (retsize: 0;)
	return
	// succ:  fn004F_21C1_exit
fn004F_21C1_exit:


// fn004F_21EE
// Return size: 4
void fn004F_21EE()
fn004F_21EE_entry:
	// succ:  l004F_21EE
l004F_21EE:
	sp = fp
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	dx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = ax + 0x0001
	SZO = cond(ax)
	al = al & 0xFE
	SZO = cond(al)
	C = false
	ax = ax - sp
	SCZO = cond(ax)
	branch Test(UGE,C) l004F_2210
	// succ:  l004F_21F7 l004F_2210
l004F_21F7:
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	SCZO = cond(Mem0[ss:0x000A:word16] - ax)
	branch Test(UGT,CZ) l004F_2210
	// succ:  l004F_2200 l004F_2210
l004F_2200:
	SCZO = cond(Mem0[ss:0x000C:word16] - ax)
	branch Test(ULE,CZ) l004F_220B
	// succ:  l004F_2207 l004F_220B
l004F_2207:
	Mem0[ss:0x000C:word16] = ax
	// succ:  l004F_220B
l004F_220B:
	sp = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	return
	// succ:  fn004F_21EE_exit
l004F_2210:
	dx = Mem0[ds:0x0968:word16]
	dx = dx + 0x0001
	SZO = cond(dx)
	branch Test(EQ,Z) l004F_221B
	// succ:  l004F_2217 l004F_221B
l004F_2217:
	call Mem0[ds:0x0968:ptr32] (retsize: 4;)
	return
	// succ:  fn004F_21EE_exit
l004F_221B:
	ax = 0x0000
	// succ:  l004F_221E_thunk_fn004F_111B
l004F_221E_thunk_fn004F_111B:
	call fn004F_111B (retsize: 0;)
	return
	// succ:  fn004F_21EE_exit
fn004F_21EE_exit:


// fn004F_2222
// Return size: 4
void fn004F_2222()
fn004F_2222_entry:
	// succ:  l004F_2222
l004F_2222:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	dx = Mem0[ss:bp + 0x0006:word16]
	si = 0x0B78
	// succ:  l004F_2236
l004F_2236:
	ax = Mem0[si:word16]
	si = si + 0x0002
	SCZO = cond(ax - dx)
	branch Test(EQ,Z) l004F_224B
	// succ:  l004F_223B l004F_224B
l004F_223B:
	ax = ax + 0x0001
	SZO = cond(ax)
	v14 = ax
	ax = si
	si = v14
	branch Test(EQ,Z) l004F_224B
	// succ:  l004F_223F l004F_224B
l004F_223F:
	v15 = ax
	ax = di
	di = v15
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l004F_2245
l004F_2245:
	branch cx == 0x0000 l004F_2247
	// succ:  l004F_2245_1 l004F_2247
l004F_2245_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l004F_2245
	// succ:  l004F_2247 l004F_2245
l004F_2247:
	si = di
	goto l004F_2236
	// succ:  l004F_2236
l004F_224B:
	v19 = ax
	ax = si
	si = v19
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_2222_exit
fn004F_2222_exit:


// fn004F_2259
// Return size: 4
void fn004F_2259()
fn004F_2259_entry:
	// succ:  l004F_2259
l004F_2259:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	SCZO = cond(Mem0[ds:0x0966:word16] - 0x0000)
	branch Test(EQ,Z) l004F_228A
	// succ:  l004F_226B l004F_228A
l004F_226B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn004F_2222 (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_228A
	// succ:  l004F_2276 l004F_228A
l004F_2276:
	v12 = ax
	ax = dx
	dx = v12
	di = dx
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l004F_227E
l004F_227E:
	branch cx == 0x0000 l004F_2280
	// succ:  l004F_227E_1 l004F_2280
l004F_227E_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l004F_227E
	// succ:  l004F_2280 l004F_227E
l004F_2280:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	bx = Mem0[ds:0x08A6:word16]
	call fn004F_21C1 (retsize: 2;)
	// succ:  l004F_228A
l004F_228A:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_2259_exit
fn004F_2259_exit:


// fn004F_2296
// Return size: 0
void fn004F_2296()
fn004F_2296_entry:
	// succ:  l004F_2296
l004F_2296:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x1000
	v8 = Mem0[ds:0x0A1C:word16]
	Mem0[ds:0x0A1C:word16] = cx
	cx = v8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_25F8 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	Mem0[ds:0x0A1C:word16] = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	dx = ds
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_22BA
	// succ:  l004F_22B6 l004F_22BA
l004F_22B6:
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	goto l004F_22BF
	// succ:  l004F_22BF
l004F_22BA:
	ax = cx
	// succ:  l004F_22BC_thunk_fn004F_111B
l004F_22BC_thunk_fn004F_111B:
	call fn004F_111B (retsize: 0;)
	return
	// succ:  fn004F_2296_exit
l004F_22BF:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_2296_exit
fn004F_2296_exit:


// fn004F_22C4
// Return size: 2
void fn004F_22C4()
fn004F_22C4_entry:
	// succ:  l004F_22C4
l004F_22C4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0004:word16]
	ax = 0x0200
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_25F8 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = si
	bx = bx - 0x0A30
	SCZO = cond(bx)
	bx = bx + 0x0AD0
	SCZO = cond(bx)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_22EE
	// succ:  l004F_22E3 l004F_22EE
l004F_22E3:
	v14 = Mem0[ds:si + 0x0006:byte] | 0x08
	Mem0[ds:si + 0x0006:byte] = v14
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	Mem0[ds:bx + 0x0002:word16] = 0x0200
	goto l004F_22FA
	// succ:  l004F_22FA
l004F_22EE:
	v15 = Mem0[ds:si + 0x0006:byte] | 0x04
	Mem0[ds:si + 0x0006:byte] = v15
	SZO = cond(Mem0[ds:si + 0x0006:byte])
	C = false
	Mem0[ds:bx + 0x0002:word16] = 0x0001
	ax = bx + 0x0001
	// succ:  l004F_22FA
l004F_22FA:
	Mem0[ds:si:word16] = ax
	Mem0[ds:si + 0x0004:word16] = ax
	Mem0[ds:si + 0x0002:word16] = 0x0000
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_22C4_exit
fn004F_22C4_exit:


// fn004F_2308
// Return size: 4
void fn004F_2308()
fn004F_2308_entry:
	// succ:  l004F_2308
l004F_2308:
	sp = fp
	ax = ds
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	bh = Mem0[ss:bp + 0x000A:byte]
	ax = Mem0[ss:bp + 0x000C:word16]
	Mem0[ss:bp + 0x000A:word16] = ax
	// succ:  l004F_232F
l004F_232F:
	Mem0[ss:bp - 0x0004:byte] = bh
	ax = Mem0[ss:bp + 0x0008:word16]
	cx = ax
	Mem0[ss:bp - 0x0006:byte] = 0x00
	SZO = cond(ax & 0x8000)
	C = false
	branch Test(NE,Z) l004F_2350
	// succ:  l004F_2340 l004F_2350
l004F_2340:
	SZO = cond(ax & 0x4000)
	C = false
	branch Test(NE,Z) l004F_234C
	// succ:  l004F_2345 l004F_234C
l004F_2345:
	SZO = cond(Mem0[ds:0x0A1B:byte] & 0x80)
	C = false
	branch Test(NE,Z) l004F_2350
	// succ:  l004F_234C l004F_2350
l004F_234C:
	Mem0[ss:bp - 0x0006:byte] = 0x80
	// succ:  l004F_2350
l004F_2350:
	dx = Mem0[ss:bp + 0x0006:word16]
	al = al & 0x03
	SZO = cond(al)
	C = false
	al = al | bh
	SZO = cond(al)
	C = false
	ah = 0x3D
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_2369
	// succ:  l004F_2362 l004F_2369
l004F_2362:
	DOS3Call()
	goto l004F_236B
	// succ:  l004F_236B
l004F_2369:
	__syscall(0x21)
	// succ:  l004F_236B
l004F_236B:
	branch Test(UGE,C) l004F_237F
	// succ:  l004F_236D l004F_237F
l004F_236D:
	SCZO = cond(ax - 0x0002)
	branch Test(NE,Z) l004F_237B
	// succ:  l004F_2372 l004F_237B
l004F_2372:
	SZO = cond(cx & 0x0100)
	C = false
	branch Test(EQ,Z) l004F_237B
	// succ:  l004F_2378 l004F_237B
l004F_2378:
	goto l004F_24C0
	// succ:  l004F_24C0
l004F_237B:
	C = true
	// succ:  l004F_237B_thunk_fn004F_117D
l004F_237B_thunk_fn004F_117D:
	call fn004F_117D (retsize: 0;)
	return
	// succ:  fn004F_2308_exit
l004F_237F:
	v20 = ax
	ax = bx
	bx = v20
	ax = cx
	ax = ax & 0x0500
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x0500)
	branch Test(NE,Z) l004F_23A3
	// succ:  l004F_238A l004F_23A3
l004F_238A:
	ah = 0x3E
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_239C
	// succ:  l004F_2395 l004F_239C
l004F_2395:
	DOS3Call()
	goto l004F_239E
	// succ:  l004F_239E
l004F_239C:
	__syscall(0x21)
	// succ:  l004F_239E
l004F_239E:
	ax = 0x1100
	goto l004F_237B
	// succ:  l004F_237B
l004F_23A3:
	Mem0[ss:bp - 0x0005:byte] = 0x01
	ax = 0x4400
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_23BA
	// succ:  l004F_23B3 l004F_23BA
l004F_23B3:
	DOS3Call()
	goto l004F_23BC
	// succ:  l004F_23BC
l004F_23BA:
	__syscall(0x21)
	// succ:  l004F_23BC
l004F_23BC:
	SZO = cond(dl & 0x80)
	C = false
	branch Test(EQ,Z) l004F_23C5
	// succ:  l004F_23C1 l004F_23C5
l004F_23C1:
	v23 = Mem0[ss:bp - 0x0006:byte] | 0x40
	Mem0[ss:bp - 0x0006:byte] = v23
	SZO = cond(Mem0[ss:bp - 0x0006:byte])
	C = false
	// succ:  l004F_23C5
l004F_23C5:
	SZO = cond(Mem0[ss:bp - 0x0006:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l004F_23CE
	// succ:  l004F_23CB l004F_23CE
l004F_23CB:
	goto l004F_2567
	// succ:  l004F_2567
l004F_23CE:
	ax = Mem0[ss:bp + 0x0008:word16]
	SZO = cond(ax & 0x0200)
	C = false
	branch Test(EQ,Z) l004F_2423
	// succ:  l004F_23D6 l004F_2423
l004F_23D6:
	SZO = cond(ax & 0x0003)
	C = false
	branch Test(EQ,Z) l004F_23F4
	// succ:  l004F_23DB l004F_23F4
l004F_23DB:
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	ah = 0x40
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_23EF
	// succ:  l004F_23E8 l004F_23EF
l004F_23E8:
	DOS3Call()
	goto l004F_23F1
	// succ:  l004F_23F1
l004F_23EF:
	__syscall(0x21)
	// succ:  l004F_23F1
l004F_23F1:
	goto l004F_2567
	// succ:  l004F_2567
l004F_23F4:
	ah = 0x3E
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_2406
	// succ:  l004F_23FF l004F_2406
l004F_23FF:
	DOS3Call()
	goto l004F_2408
	// succ:  l004F_2408
l004F_2406:
	__syscall(0x21)
	// succ:  l004F_2408
l004F_2408:
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = 0x4300
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_241E
	// succ:  l004F_2417 l004F_241E
l004F_2417:
	DOS3Call()
	goto l004F_2420
	// succ:  l004F_2420
l004F_241E:
	__syscall(0x21)
	// succ:  l004F_2420
l004F_2420:
	goto l004F_24DD
	// succ:  l004F_24DD
l004F_2423:
	SZO = cond(Mem0[ss:bp - 0x0006:byte] & 0x80)
	C = false
	branch Test(NE,Z) l004F_242C
	// succ:  l004F_2429 l004F_242C
l004F_2429:
	goto l004F_2567
	// succ:  l004F_2567
l004F_242C:
	SZO = cond(ax & 0x0002)
	C = false
	branch Test(NE,Z) l004F_2434
	// succ:  l004F_2431 l004F_2434
l004F_2431:
	goto l004F_2567
	// succ:  l004F_2567
l004F_2434:
	cx = 0xFFFF
	dx = cx
	ax = 0x4202
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_244C
	// succ:  l004F_2445 l004F_244C
l004F_2445:
	DOS3Call()
	goto l004F_244E
	// succ:  l004F_244E
l004F_244C:
	__syscall(0x21)
	// succ:  l004F_244E
l004F_244E:
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	dx = bp - 0x0003
	ah = 0x3F
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_2468
	// succ:  l004F_2461 l004F_2468
l004F_2461:
	DOS3Call()
	goto l004F_246A
	// succ:  l004F_246A
l004F_2468:
	__syscall(0x21)
	// succ:  l004F_246A
l004F_246A:
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_24A4
	// succ:  l004F_246F l004F_24A4
l004F_246F:
	SCZO = cond(Mem0[ss:bp - 0x0003:byte] - 0x1A)
	branch Test(NE,Z) l004F_24A4
	// succ:  l004F_2475 l004F_24A4
l004F_2475:
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	dx = cx
	ax = 0x4202
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_248C
	// succ:  l004F_2485 l004F_248C
l004F_2485:
	DOS3Call()
	goto l004F_248E
	// succ:  l004F_248E
l004F_248C:
	__syscall(0x21)
	// succ:  l004F_248E
l004F_248E:
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	ah = 0x40
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_24A2
	// succ:  l004F_249B l004F_24A2
l004F_249B:
	DOS3Call()
	goto l004F_24A4
	// succ:  l004F_24A4
l004F_24A2:
	__syscall(0x21)
	// succ:  l004F_24A4
l004F_24A4:
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	dx = cx
	ax = 0x4200
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_24BB
	// succ:  l004F_24B4 l004F_24BB
l004F_24B4:
	DOS3Call()
	goto l004F_24BD
	// succ:  l004F_24BD
l004F_24BB:
	__syscall(0x21)
	// succ:  l004F_24BD
l004F_24BD:
	goto l004F_2567
	// succ:  l004F_2567
l004F_24C0:
	Mem0[ss:bp - 0x0005:byte] = 0x00
	cx = Mem0[ss:bp + 0x000A:word16]
	call fn004F_25D3 (retsize: 2;)
	Mem0[ss:bp + 0x000A:word16] = cx
	SZO = cond(Mem0[ss:bp - 0x0004:byte] & 0xFF)
	C = false
	branch Test(NE,Z) l004F_24DA
	// succ:  l004F_24D3 l004F_24DA
l004F_24D3:
	SZO = cond(Mem0[ss:bp + 0x0008:word16] & 0x0002)
	C = false
	branch Test(NE,Z) l004F_24DD
	// succ:  l004F_24DA l004F_24DD
l004F_24DA:
	cl = cl & 0xFE
	SZO = cond(cl)
	C = false
	// succ:  l004F_24DD
l004F_24DD:
	dx = Mem0[ss:bp + 0x0006:word16]
	ah = 0x3C
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_24F2
	// succ:  l004F_24EB l004F_24F2
l004F_24EB:
	DOS3Call()
	goto l004F_24F4
	// succ:  l004F_24F4
l004F_24F2:
	__syscall(0x21)
	// succ:  l004F_24F4
l004F_24F4:
	branch Test(UGE,C) l004F_24F9
	// succ:  l004F_24F6 l004F_24F9
l004F_24F6:
	call fn004F_117D (retsize: 0;)
	return
	// succ:  l004F_117D fn004F_2308_exit
l004F_24F9:
	v18 = ax
	ax = bx
	bx = v18
	SZO = cond(Mem0[ss:bp - 0x0004:byte] & 0xFF)
	C = false
	branch Test(NE,Z) l004F_2507
	// succ:  l004F_2500 l004F_2507
l004F_2500:
	SZO = cond(Mem0[ss:bp + 0x0008:word16] & 0x0002)
	C = false
	branch Test(NE,Z) l004F_2567
	// succ:  l004F_2507 l004F_2567
l004F_2507:
	ah = 0x3E
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_2519
	// succ:  l004F_2512 l004F_2519
l004F_2512:
	DOS3Call()
	goto l004F_251B
	// succ:  l004F_251B
l004F_2519:
	__syscall(0x21)
	// succ:  l004F_251B
l004F_251B:
	al = Mem0[ss:bp + 0x0008:byte]
	al = al & 0x03
	SZO = cond(al)
	C = false
	al = al | Mem0[ss:bp - 0x0004:byte]
	SZO = cond(al)
	C = false
	dx = Mem0[ss:bp + 0x0006:word16]
	ah = 0x3D
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_2538
	// succ:  l004F_2531 l004F_2538
l004F_2531:
	DOS3Call()
	goto l004F_253A
	// succ:  l004F_253A
l004F_2538:
	__syscall(0x21)
	// succ:  l004F_253A
l004F_253A:
	branch Test(ULT,C) l004F_24F6
	// succ:  l004F_253C l004F_24F6
l004F_253C:
	v21 = ax
	ax = bx
	bx = v21
	SZO = cond(Mem0[ss:bp - 0x0005:byte] & 0x01)
	C = false
	branch Test(NE,Z) l004F_2567
	// succ:  l004F_2543 l004F_2567
l004F_2543:
	SZO = cond(Mem0[ss:bp + 0x000A:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_2567
	// succ:  l004F_254A l004F_2567
l004F_254A:
	cl = cl | 0x01
	SZO = cond(cl)
	C = false
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = 0x4301
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_2563
	// succ:  l004F_255C l004F_2563
l004F_255C:
	DOS3Call()
	goto l004F_2565
	// succ:  l004F_2565
l004F_2563:
	__syscall(0x21)
	// succ:  l004F_2565
l004F_2565:
	branch Test(ULT,C) l004F_24F6
	// succ:  l004F_2567 l004F_24F6
l004F_2567:
	SZO = cond(Mem0[ss:bp - 0x0006:byte] & 0x40)
	C = false
	branch Test(NE,Z) l004F_25CF
	// succ:  l004F_256D l004F_25CF
l004F_256D:
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = 0x4300
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_2583
	// succ:  l004F_257C l004F_2583
l004F_257C:
	DOS3Call()
	goto l004F_2585
	// succ:  l004F_2585
l004F_2583:
	__syscall(0x21)
	// succ:  l004F_2585
l004F_2585:
	ax = cx
	cl = cl ^ cl
	SZO = cond(cl)
	C = false
	ax = ax & 0x0001
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_2590
	// succ:  l004F_258E l004F_2590
l004F_258E:
	cl = 0x10
	// succ:  l004F_2590
l004F_2590:
	SZO = cond(Mem0[ss:bp + 0x0008:word16] & 0x0008)
	C = false
	branch Test(EQ,Z) l004F_259A
	// succ:  l004F_2597 l004F_259A
l004F_2597:
	cl = cl | 0x20
	SZO = cond(cl)
	C = false
	// succ:  l004F_259A
l004F_259A:
	SCZO = cond(bx - Mem0[ds:0x08A6:word16])
	branch Test(ULT,C) l004F_25BA
	// succ:  l004F_25A0 l004F_25BA
l004F_25A0:
	ah = 0x3E
	SZO = cond(Mem0[0x004F:0x0010:word16] & 0x0001)
	C = false
	branch Test(EQ,Z) l004F_25B2
	// succ:  l004F_25AB l004F_25B2
l004F_25AB:
	DOS3Call()
	goto l004F_25B4
	// succ:  l004F_25B4
l004F_25B2:
	__syscall(0x21)
	// succ:  l004F_25B4
l004F_25B4:
	ax = 0x1800
	goto l004F_237B
	// succ:  l004F_237B
l004F_25BA:
	cl = cl | Mem0[ss:bp - 0x0006:byte]
	SZO = cond(cl)
	C = false
	cl = cl | 0x01
	SZO = cond(cl)
	C = false
	Mem0[ds:bx + 0x08AC:byte] = cl
	ax = bx
	bp = bp - 0x0002
	SCZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_2308_exit
l004F_25CF:
	cl = cl ^ cl
	SZO = cond(cl)
	C = false
	goto l004F_259A
	// succ:  l004F_259A
fn004F_2308_exit:


// fn004F_25D3
// Return size: 2
void fn004F_25D3()
fn004F_25D3_entry:
	// succ:  l004F_25D3
l004F_25D3:
	sp = fp
	ax = Mem0[ds:0x0898:word16]
	ax = ~ax
	ax = ax & cx
	SZO = cond(ax)
	C = false
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	SZO = cond(al & 0x80)
	C = false
	branch Test(NE,Z) l004F_25E3
	// succ:  l004F_25E0 l004F_25E3
l004F_25E0:
	cl = cl | 0x01
	SZO = cond(cl)
	C = false
	// succ:  l004F_25E3
l004F_25E3:
	return
	// succ:  fn004F_25D3_exit
fn004F_25D3_exit:


// fn004F_25E4
// Return size: 4
void fn004F_25E4()
fn004F_25E4_entry:
	// succ:  l004F_25E4
l004F_25E4:
	sp = fp
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	dx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[ds:0x0862:word16]
	SCZO = cond(ax - sp)
	branch Test(UGE,C) l004F_25F4
	// succ:  l004F_25ED l004F_25F4
l004F_25ED:
	ax = ax - sp
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	// succ:  l004F_25F1
l004F_25F1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	return
	// succ:  fn004F_25E4_exit
l004F_25F4:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l004F_25F1
	// succ:  l004F_25F1
fn004F_25E4_exit:


// fn004F_25F8
// Return size: 4
void fn004F_25F8()
fn004F_25F8_entry:
	// succ:  l004F_25F8
l004F_25F8:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0004
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l004F_260B
	// succ:  l004F_2606 l004F_260B
l004F_2606:
	Mem0[ss:bp + 0x0006:word16] = 0x0001
	// succ:  l004F_260B
l004F_260B:
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LockSegment(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	LocalAlloc(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	UnlockSegment(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(NE,Z) l004F_2649
	// succ:  l004F_2632 l004F_2649
l004F_2632:
	ax = Mem0[ds:0x0970:word16]
	ax = ax | Mem0[ds:0x096E:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_2649
	// succ:  l004F_263B l004F_2649
l004F_263B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call Mem0[ds:0x096E:ptr32] (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l004F_260B
	// succ:  l004F_2649 l004F_260B
l004F_2649:
	ax = Mem0[ss:bp - 0x0004:word16]
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_25F8_exit
fn004F_25F8_exit:


// fn004F_2654
// Return size: 4
void fn004F_2654()
fn004F_2654_entry:
	// succ:  l004F_2654
l004F_2654:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l004F_2667
	// succ:  l004F_265F l004F_2667
l004F_265F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	LocalFree(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l004F_2667
l004F_2667:
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_2654_exit
fn004F_2654_exit:


// fn004F_279A
// Return size: 4
void fn004F_279A()
fn004F_279A_entry:
	// succ:  l004F_279A
l004F_279A:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	SCZO = cond(Mem0[ds:0x0CD4:word16] - 0x0000)
	branch Test(NE,Z) l004F_27AF
	// succ:  l004F_27A6 l004F_27AF
l004F_27A6:
	sp = sp - 0x0002
	call fn004F_27B6 (retsize: 2;)
	v9 = Mem0[ds:0x0CD4:word16] + 0x0001
	Mem0[ds:0x0CD4:word16] = v9
	SZO = cond(v9)
	// succ:  l004F_27AF
l004F_27AF:
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_279A_exit
fn004F_279A_exit:


// fn004F_27B6
// Return size: 4
void fn004F_27B6()
fn004F_27B6_entry:
	// succ:  l004F_27B6
l004F_27B6:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = di ^ di
	SZO = cond(di)
	C = false
	ax = 0x09C8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_2AD4 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l004F_27D4
	// succ:  l004F_27D1 l004F_27D4
l004F_27D1:
	goto l004F_28B1
	// succ:  l004F_28B1
l004F_27D4:
	SCZO = cond(Mem0[ds:si:byte] - 0x00)
	branch Test(NE,Z) l004F_27DC
	// succ:  l004F_27D9 l004F_27DC
l004F_27D9:
	goto l004F_28B1
	// succ:  l004F_28B1
l004F_27DC:
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x09D2:word16]
	sp = sp - 0x0002
	call fn004F_2AAC (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	si = si + 0x0003
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:si:byte] - 0x2D)
	branch Test(NE,Z) l004F_27F7
	// succ:  l004F_27F5 l004F_27F7
l004F_27F5:
	di = di + 0x0001
	SZO = cond(di)
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l004F_27F7
l004F_27F7:
	ax = 0x0E10
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn004F_03FA (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_0B0A (retsize: 2;)
	sp = sp + 0x0008
	Mem0[ds:0x09CC:word16] = ax
	Mem0[ds:0x09CE:word16] = dx
	// succ:  l004F_2814
l004F_2814:
	SCZO = cond(Mem0[ds:si:byte] - 0x2B)
	branch Test(EQ,Z) l004F_2823
	// succ:  l004F_2819 l004F_2823
l004F_2819:
	SCZO = cond(Mem0[ds:si:byte] - 0x30)
	branch Test(LT,SO) l004F_2826
	// succ:  l004F_281E l004F_2826
l004F_281E:
	SCZO = cond(Mem0[ds:si:byte] - 0x39)
	branch Test(GT,SZO) l004F_2826
	// succ:  l004F_2823 l004F_2826
l004F_2823:
	si = si + 0x0001
	SZO = cond(si)
	goto l004F_2814
	// succ:  l004F_2814
l004F_2826:
	SCZO = cond(Mem0[ds:si:byte] - 0x3A)
	branch Test(NE,Z) l004F_287B
	// succ:  l004F_282B l004F_287B
l004F_282B:
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	si = si + 0x0001
	SZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn004F_03FA (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn004F_0B0A (retsize: 2;)
	sp = sp + 0x0008
	v16 = Mem0[ds:0x09CC:word16] + ax
	Mem0[ds:0x09CC:word16] = v16
	SCZO = cond(v16)
	v17 = Mem0[ds:0x09CE:word16] + dx + C
	Mem0[ds:0x09CE:word16] = v17
	SCZO = cond(v17)
	goto l004F_2852
	// succ:  l004F_2852
l004F_284C:
	SCZO = cond(Mem0[ds:si:byte] - 0x39)
	branch Test(GT,SZO) l004F_2857
	// succ:  l004F_2851 l004F_2857
l004F_2851:
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l004F_2852
l004F_2852:
	SCZO = cond(Mem0[ds:si:byte] - 0x30)
	branch Test(GE,SO) l004F_284C
	// succ:  l004F_2857 l004F_284C
l004F_2857:
	SCZO = cond(Mem0[ds:si:byte] - 0x3A)
	branch Test(NE,Z) l004F_287B
	// succ:  l004F_285C l004F_287B
l004F_285C:
	si = si + 0x0001
	SZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn004F_03FA (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	v21 = Mem0[ds:0x09CC:word16] + ax
	Mem0[ds:0x09CC:word16] = v21
	SCZO = cond(v21)
	v22 = Mem0[ds:0x09CE:word16] + dx + C
	Mem0[ds:0x09CE:word16] = v22
	SCZO = cond(v22)
	goto l004F_2876
	// succ:  l004F_2876
l004F_2870:
	SCZO = cond(Mem0[ds:si:byte] - 0x39)
	branch Test(GT,SZO) l004F_287B
	// succ:  l004F_2875 l004F_287B
l004F_2875:
	si = si + 0x0001
	SZO = cond(si)
	// succ:  l004F_2876
l004F_2876:
	SCZO = cond(Mem0[ds:si:byte] - 0x30)
	branch Test(GE,SO) l004F_2870
	// succ:  l004F_287B l004F_2870
l004F_287B:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l004F_288C
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l004F_288C
	// succ:  l004F_287F l004F_288C
l004F_287F:
	v18 = -Mem0[ds:0x09CC:word16]
	Mem0[ds:0x09CC:word16] = v18
	SCZO = cond(v18)
	C = v18 == 0x0000
	v19 = Mem0[ds:0x09CE:word16] + 0x00 + C
	Mem0[ds:0x09CE:word16] = v19
	SCZO = cond(v19)
	v20 = -Mem0[ds:0x09CE:word16]
	Mem0[ds:0x09CE:word16] = v20
	SCZO = cond(v20)
	C = v20 == 0x0000
	v24 = -Mem0[ds:0x09CC:word16]
	Mem0[ds:0x09CC:word16] = v24
	SCZO = cond(v24)
	C = v24 == 0x0000
	v25 = Mem0[ds:0x09CE:word16] + 0x00 + C
	Mem0[ds:0x09CE:word16] = v25
	SCZO = cond(v25)
	v26 = -Mem0[ds:0x09CE:word16]
	Mem0[ds:0x09CE:word16] = v26
	SCZO = cond(v26)
	C = v26 == 0x0000
	// succ:  l004F_288C
l004F_288C:
	al = Mem0[ds:si:byte]
	ax = (int16) al
	Mem0[ds:0x09D0:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l004F_28AA
	// succ:  l004F_2896 l004F_28AA
l004F_2896:
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x09D4:word16]
	sp = sp - 0x0002
	call fn004F_2AAC (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	goto l004F_28B1
	// succ:  l004F_28B1
l004F_28AA:
	bx = Mem0[ds:0x09D4:word16]
	Mem0[ds:bx:byte] = 0x00
	// succ:  l004F_28B1
l004F_28B1:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_27B6_exit
fn004F_27B6_exit:


// fn004F_28BA
// Return size: 4
void fn004F_28BA()
fn004F_28BA_entry:
	// succ:  l004F_28BA
l004F_28BA:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(Mem0[ds:si + 0x000A:word16] - 0x0043)
	branch Test(GE,SO) l004F_28D0
	// succ:  l004F_28CD l004F_28D0
l004F_28CD:
	goto l004F_298E
	// succ:  l004F_298E
l004F_28D0:
	SCZO = cond(Mem0[ds:si + 0x0008:word16] - 0x0003)
	branch Test(GE,SO) l004F_28D9
	// succ:  l004F_28D6 l004F_28D9
l004F_28D6:
	goto l004F_298E
	// succ:  l004F_298E
l004F_28D9:
	SCZO = cond(Mem0[ds:si + 0x0008:word16] - 0x0009)
	branch Test(LE,SZO) l004F_28E2
	// succ:  l004F_28DF l004F_28E2
l004F_28DF:
	goto l004F_298E
	// succ:  l004F_298E
l004F_28E2:
	SCZO = cond(Mem0[ds:si + 0x0008:word16] - 0x0003)
	branch Test(LE,SZO) l004F_28F1
	// succ:  l004F_28E8 l004F_28F1
l004F_28E8:
	SCZO = cond(Mem0[ds:si + 0x0008:word16] - 0x0009)
	branch Test(GE,SO) l004F_28F1
	// succ:  l004F_28EE l004F_28F1
l004F_28EE:
	goto l004F_2978
	// succ:  l004F_2978
l004F_28F1:
	di = Mem0[ds:si + 0x000A:word16]
	SCZO = cond(di - 0x0056)
	branch Test(LE,SZO) l004F_290E
	// succ:  l004F_28F9 l004F_290E
l004F_28F9:
	SCZO = cond(Mem0[ds:si + 0x0008:word16] - 0x0003)
	branch Test(NE,Z) l004F_290E
	// succ:  l004F_28FF l004F_290E
l004F_28FF:
	bx = Mem0[ds:si + 0x0008:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x09AE:word16]
	ax = ax + 0x0007
	SCZO = cond(ax)
	goto l004F_2917
	// succ:  l004F_2917
l004F_290E:
	bx = Mem0[ds:si + 0x0008:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x09B0:word16]
	// succ:  l004F_2917
l004F_2917:
	Mem0[ss:bp - 0x0004:word16] = ax
	SZO = cond(di & 0x0003)
	C = false
	branch Test(NE,Z) l004F_2923
	// succ:  l004F_2920 l004F_2923
l004F_2920:
	v15 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v15
	SZO = cond(v15)
	// succ:  l004F_2923
l004F_2923:
	ax = 0x0007
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = di
	cx = 0x016D
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	cx = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	bx = dx
	dx_ax = (int32) ax
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	ax = di - 0x0001
	ax = ax >> 0x0001
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp - 0x0008:word16] + C
	SCZO = cond(dx)
	cx = cx + ax
	SCZO = cond(cx)
	bx = bx + dx + C
	SCZO = cond(bx)
	cx = cx + 0x0001
	SCZO = cond(cx)
	bx = bx + 0x00 + C
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn004F_2B5E (retsize: 2;)
	sp = sp + 0x0008
	ax = ax - Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	Mem0[ss:bp - 0x0006:word16] = ax
	SCZO = cond(Mem0[ds:si + 0x0008:word16] - 0x0003)
	branch Test(NE,Z) l004F_297E
	// succ:  l004F_296B l004F_297E
l004F_296B:
	SCZO = cond(ax - Mem0[ds:si + 0x000E:word16])
	branch Test(LT,SO) l004F_2978
	// succ:  l004F_2970 l004F_2978
l004F_2970:
	branch Test(NE,Z) l004F_298E
	// succ:  l004F_2972 l004F_298E
l004F_2972:
	SCZO = cond(Mem0[ds:si + 0x0004:word16] - 0x0002)
	branch Test(LT,SO) l004F_298E
	// succ:  l004F_2978 l004F_298E
l004F_2978:
	ax = 0x0001
	ax = 0x0001
	goto l004F_2990
	// succ:  l004F_2990
l004F_297E:
	ax = Mem0[ds:si + 0x000E:word16]
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(GT,SZO) l004F_2978
	// succ:  l004F_2986 l004F_2978
l004F_2986:
	branch Test(NE,Z) l004F_298E
	// succ:  l004F_2988 l004F_298E
l004F_2988:
	SCZO = cond(Mem0[ds:si + 0x0004:word16] - 0x0001)
	branch Test(LT,SO) l004F_2978
	// succ:  l004F_298E l004F_2978
l004F_298E:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l004F_2990
l004F_2990:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_28BA_exit
fn004F_28BA_exit:


// fn004F_2AAC
// Return size: 4
void fn004F_2AAC()
fn004F_2AAC_entry:
	// succ:  l004F_2AAC
l004F_2AAC:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp + 0x0006:word16]
	si = Mem0[ss:bp + 0x0008:word16]
	bx = di
	cx = Mem0[ss:bp + 0x000A:word16]
	branch cx == 0x0000 l004F_2ACC
	// succ:  l004F_2AC0 l004F_2ACC
l004F_2AC0:
	al = Mem0[si:byte]
	si = si + 0x0001
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l004F_2AC8
	// succ:  l004F_2AC5 l004F_2AC8
l004F_2AC5:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	branch cx != 0x0000 l004F_2AC0
	// succ:  l004F_2AC8 l004F_2AC0
l004F_2AC8:
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l004F_2ACA
l004F_2ACA:
	branch cx == 0x0000 l004F_2ACC
	// succ:  l004F_2ACA_1 l004F_2ACC
l004F_2ACA_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l004F_2ACA
	// succ:  l004F_2ACA
l004F_2ACC:
	ax = bx
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_2AAC_exit
fn004F_2AAC_exit:


// fn004F_2AD4
// Return size: 4
void fn004F_2AD4()
fn004F_2AD4_entry:
	// succ:  l004F_2AD4
l004F_2AD4:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ds:0x08D8:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l004F_2B2E
	// succ:  l004F_2AE3 l004F_2B2E
l004F_2AE3:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l004F_2B2E
	// succ:  l004F_2AE9 l004F_2B2E
l004F_2AE9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn004F_2BFE (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	di = ax
	goto l004F_2B29
	// succ:  l004F_2B29
l004F_2AF8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	sp = sp - 0x0002
	call fn004F_2BFE (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	SCZO = cond(ax - di)
	branch Test(ULE,CZ) l004F_2B26
	// succ:  l004F_2B06 l004F_2B26
l004F_2B06:
	bx = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:bx + di:byte] - 0x3D)
	branch Test(NE,Z) l004F_2B26
	// succ:  l004F_2B0D l004F_2B26
l004F_2B0D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	call fn004F_2C1A (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l004F_2B26
	// succ:  l004F_2B1E l004F_2B26
l004F_2B1E:
	ax = Mem0[ds:si:word16]
	ax = ax + di
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	goto l004F_2B30
	// succ:  l004F_2B30
l004F_2B26:
	si = si + 0x0002
	SCZO = cond(si)
	// succ:  l004F_2B29
l004F_2B29:
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(NE,Z) l004F_2AF8
	// succ:  l004F_2B2E l004F_2AF8
l004F_2B2E:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l004F_2B30
l004F_2B30:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp - 0x0002
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn004F_2AD4_exit fn004F_2AD4_exit
fn004F_2AD4_exit:


// fn004F_2B5E
// Return size: 4
void fn004F_2B5E()
fn004F_2B5E_entry:
	// succ:  l004F_2B5E
l004F_2B5E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	di = di ^ di
	SZO = cond(di)
	C = false
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l004F_2B7D
	// succ:  l004F_2B6C l004F_2B7D
l004F_2B6C:
	di = di + 0x0001
	SZO = cond(di)
	dx = Mem0[ss:bp + 0x0006:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = ax - 0x00 - C
	SCZO = cond(ax)
	Mem0[ss:bp + 0x0008:word16] = ax
	Mem0[ss:bp + 0x0006:word16] = dx
	// succ:  l004F_2B7D
l004F_2B7D:
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l004F_2B94
	// succ:  l004F_2B84 l004F_2B94
l004F_2B84:
	dx = Mem0[ss:bp + 0x000A:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = ax - 0x00 - C
	SCZO = cond(ax)
	Mem0[ss:bp + 0x000C:word16] = ax
	Mem0[ss:bp + 0x000A:word16] = dx
	// succ:  l004F_2B94
l004F_2B94:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l004F_2BB0
	// succ:  l004F_2B98 l004F_2BB0
l004F_2B98:
	cx = Mem0[ss:bp + 0x000A:word16]
	ax = Mem0[ss:bp + 0x0008:word16]
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	ax = dx
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	di = di - 0x0001
	SZO = cond(di)
	branch Test(NS,S) l004F_2BF1
	// succ:  l004F_2BAE l004F_2BF1
l004F_2BAE:
	goto l004F_2BF8
	// succ:  l004F_2BF8
l004F_2BB0:
	bx = ax
	cx = Mem0[ss:bp + 0x000A:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	// succ:  l004F_2BBB
l004F_2BBB:
	bx = bx >>u 0x0001
	SCZO = cond(bx)
	v17 = (cx & 0x0001 << 0x01) != 0x0000
	cx = __rcr(cx, 0x01, C)
	C = v17
	dx = dx >>u 0x0001
	SCZO = cond(dx)
	v18 = (ax & 0x0001 << 0x01) != 0x0000
	ax = __rcr(ax, 0x01, C)
	C = v18
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(NE,Z) l004F_2BBB
	// succ:  l004F_2BC7 l004F_2BBB
l004F_2BC7:
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	cx = ax
	dx_ax = Mem0[ss:bp + 0x000C:word16] *u ax
	SCZO = cond(dx_ax)
	v19 = ax
	ax = cx
	cx = v19
	dx_ax = Mem0[ss:bp + 0x000A:word16] *u ax
	SCZO = cond(dx_ax)
	dx = dx + cx
	SCZO = cond(dx)
	branch Test(ULT,C) l004F_2BE2
	// succ:  l004F_2BD6 l004F_2BE2
l004F_2BD6:
	SCZO = cond(dx - Mem0[ss:bp + 0x0008:word16])
	branch Test(UGT,CZ) l004F_2BE2
	// succ:  l004F_2BDB l004F_2BE2
l004F_2BDB:
	branch Test(ULT,C) l004F_2BE8
	// succ:  l004F_2BDD l004F_2BE8
l004F_2BDD:
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(ULE,CZ) l004F_2BE8
	// succ:  l004F_2BE2 l004F_2BE8
l004F_2BE2:
	ax = ax - Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp + 0x000C:word16] - C
	SCZO = cond(dx)
	// succ:  l004F_2BE8
l004F_2BE8:
	ax = ax - Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp + 0x0008:word16] - C
	SCZO = cond(dx)
	di = di - 0x0001
	SZO = cond(di)
	branch Test(NS,S) l004F_2BF8
	// succ:  l004F_2BF1 l004F_2BF8
l004F_2BF1:
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	// succ:  l004F_2BF8
l004F_2BF8:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_2B5E_exit
fn004F_2B5E_exit:


// fn004F_2BFE
// Return size: 4
void fn004F_2BFE()
fn004F_2BFE_entry:
	// succ:  l004F_2BFE
l004F_2BFE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = di
	ax = ds
	es = ax
	di = Mem0[ss:bp + 0x0006:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF
	// succ:  l004F_2C0F
l004F_2C0F:
	branch cx == 0x0000 l004F_2C11
	// succ:  l004F_2C0F_1 l004F_2C11
l004F_2C0F_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l004F_2C0F
	// succ:  l004F_2C11 l004F_2C0F
l004F_2C11:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	v16 = ax
	ax = cx
	cx = v16
	di = dx
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_2BFE_exit
fn004F_2BFE_exit:


// fn004F_2C1A
// Return size: 4
void fn004F_2C1A()
fn004F_2C1A_entry:
	// succ:  l004F_2C1A
l004F_2C1A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = Mem0[ss:bp + 0x000A:word16]
	branch cx == 0x0000 l004F_2C4C
	// succ:  l004F_2C26 l004F_2C4C
l004F_2C26:
	bx = cx
	di = Mem0[ss:bp + 0x0006:word16]
	si = di
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l004F_2C2F
l004F_2C2F:
	branch cx == 0x0000 l004F_2C31
	// succ:  l004F_2C2F_1 l004F_2C31
l004F_2C2F_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l004F_2C2F
	// succ:  l004F_2C31 l004F_2C2F
l004F_2C31:
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	cx = cx + bx
	SCZO = cond(cx)
	di = si
	si = Mem0[ss:bp + 0x0008:word16]
	// succ:  l004F_2C3A
l004F_2C3A:
	branch cx == 0x0000 l004F_2C3C
	// succ:  l004F_2C3A_2 l004F_2C3C
l004F_2C3A_2:
	SCZO = cond(Mem0[si:byte] - Mem0[di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l004F_2C3A
	// succ:  l004F_2C3C l004F_2C3A
l004F_2C3C:
	al = Mem0[ds:si - 0x0001:byte]
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	SCZO = cond(al - Mem0[ds:di - 0x0001:byte])
	branch Test(UGT,CZ) l004F_2C4A
	// succ:  l004F_2C46 l004F_2C4A
l004F_2C46:
	branch Test(EQ,Z) l004F_2C4C
	// succ:  l004F_2C48 l004F_2C4C
l004F_2C48:
	cx = cx - 0x0001
	SZO = cond(cx)
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l004F_2C4A
l004F_2C4A:
	cx = ~cx
	// succ:  l004F_2C4C
l004F_2C4C:
	ax = cx
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn004F_2C1A_exit
fn004F_2C1A_exit:


// STATUSWNDPROC
// Return size: 4
void STATUSWNDPROC()
STATUSWNDPROC_entry:
	// succ:  l0067_0000
l0067_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x01BC
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(ax - 0x000F)
	branch Test(NE,Z) l0067_001B
	// succ:  l0067_0018 l0067_001B
l0067_0018:
	goto l0067_0266
	// succ:  l0067_0266
l0067_001B:
	branch Test(UGT,CZ) l0067_003E
	// succ:  l0067_001D l0067_003E
l0067_001D:
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0007)
	branch Test(ULE,CZ) l0067_0026
	// succ:  l0067_0023 l0067_0026
l0067_0023:
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_0026:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v16 = ax
	ax = bx
	bx = v16
	switch (ax) { l0067_007A l0067_0202 l0067_0E56 l0067_0E56 l0067_020C l0067_0E56 l0067_025A l0067_025A }
	// succ:  l0067_007A l0067_0202 l0067_0E56 l0067_0E56 l0067_020C l0067_0E56 l0067_025A l0067_025A
l0067_003E:
	SCZO = cond(ax - 0x0201)
	branch Test(NE,Z) l0067_0046
	// succ:  l0067_0043 l0067_0046
l0067_0043:
	goto l0067_0C1C
	// succ:  l0067_0C1C
l0067_0046:
	branch Test(UGT,CZ) l0067_0062
	// succ:  l0067_0048 l0067_0062
l0067_0048:
	ax = ax - 0x0100
	SCZO = cond(ax)
	branch Test(NE,Z) l0067_0050
	// succ:  l0067_004D l0067_0050
l0067_004D:
	goto l0067_04E0
	// succ:  l0067_04E0
l0067_0050:
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0067_0057
	// succ:  l0067_0054 l0067_0057
l0067_0054:
	goto l0067_079E
	// succ:  l0067_079E
l0067_0057:
	ax = ax - 0x00FE
	SCZO = cond(ax)
	branch Test(NE,Z) l0067_005F
	// succ:  l0067_005C l0067_005F
l0067_005C:
	goto l0067_0BF4
	// succ:  l0067_0BF4
l0067_005F:
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_0062:
	ax = ax - 0x0202
	SCZO = cond(ax)
	branch Test(NE,Z) l0067_006A
	// succ:  l0067_0067 l0067_006A
l0067_0067:
	goto l0067_0CA8
	// succ:  l0067_0CA8
l0067_006A:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0067_0070
	// succ:  l0067_006D l0067_0070
l0067_006D:
	goto l0067_0CBE
	// succ:  l0067_0CBE
l0067_0070:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0067_0076
	// succ:  l0067_0073 l0067_0076
l0067_0073:
	goto l0067_0D5E
	// succ:  l0067_0D5E
l0067_0076:
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_007A:
	ax = Mem0[ss:bp + 0x000E:word16]
	Mem0[ds:0x4D88:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x4B60
	cx = 0x0088
	di = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l0067_008C
l0067_008C:
	branch cx == 0x0000 l0067_008E
	// succ:  l0067_008C_1 l0067_008E
l0067_008C_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0067_008C
	// succ:  l0067_008C
l0067_008E:
	cx = Mem0[ss:bp + 0x0008:word16]
	bx = Mem0[ss:bp + 0x0006:word16]
	es = cx
	si = Mem0[es:bx:word16]
	Mem0[ds:0x4CBC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0001
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadCursor(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ds:0x4CE4:word16] = ax
	SCZO = cond(Mem0[ds:0x3D82:word16] - 0x0000)
	branch Test(NE,Z) l0067_00BA
	// succ:  l0067_00B5 l0067_00BA
l0067_00B5:
	call fn0087_07A8 (retsize: 4;)
	// succ:  l0067_00BA
l0067_00BA:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0067_00C1
	// succ:  l0067_00BE l0067_00C1
l0067_00BE:
	goto l0067_01B4
	// succ:  l0067_01B4
l0067_00C1:
	ax = Mem0[ds:0x4128:word16]
	SCZO = cond(Mem0[ds:si + 0x0002:word16] - ax)
	branch Test(EQ,Z) l0067_00CC
	// succ:  l0067_00C9 l0067_00CC
l0067_00C9:
	goto l0067_01B4
	// succ:  l0067_01B4
l0067_00CC:
	ax = Mem0[ds:0x412A:word16]
	SCZO = cond(Mem0[ds:si + 0x0004:word16] - ax)
	branch Test(EQ,Z) l0067_00D7
	// succ:  l0067_00D4 l0067_00D7
l0067_00D4:
	goto l0067_01B4
	// succ:  l0067_01B4
l0067_00D7:
	dx = si + 0x0006
	Mem0[ss:bp - 0x000E:word16] = 0x0000
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(GT,SZO) l0067_00E7
	// succ:  l0067_00E4 l0067_00E7
l0067_00E4:
	goto l0067_01A4
	// succ:  l0067_01A4
l0067_00E7:
	Mem0[ss:bp - 0x0010:word16] = si
	Mem0[ss:bp - 0x000A:word16] = 0x4B60
	Mem0[ss:bp - 0x0008:word16] = dx
	si = dx
	// succ:  l0067_00F4
l0067_00F4:
	SCZO = cond(Mem0[ds:si + 0x0008:word16] - 0xFFFF)
	branch Test(NE,Z) l0067_0112
	// succ:  l0067_00FA l0067_0112
l0067_00FA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x01CC:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0087_0298 (retsize: 4;)
	sp = sp + 0x0006
	call fn0077_0DF0 (retsize: 4;)
	goto l0067_016B
	// succ:  l0067_016B
l0067_0112:
	bx = Mem0[ds:0x4DEA:word16]
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	SCZO = cond(Mem0[ds:si + 0x0008:word16] - 0xFFFF)
	branch Test(NE,Z) l0067_0124
	// succ:  l0067_0121 l0067_0124
l0067_0121:
	goto l0067_01AE
	// succ:  l0067_01AE
l0067_0124:
	cx = si + 0x0008
	Mem0[ss:bp - 0x0004:word16] = cx
	Mem0[ss:bp - 0x0008:word16] = si
	si = cx
	// succ:  l0067_012F
l0067_012F:
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	di = Mem0[ds:si - 0x0002:word16]
	ax = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	di = di + Mem0[ds:bx:word16]
	SCZO = cond(di)
	bx = Mem0[ds:di + 0x002B:word16]
	SCZO = cond(Mem0[ds:si:word16] - 0xFFFF)
	branch Test(NE,Z) l0067_012F
	// succ:  l0067_0146 l0067_012F
l0067_0146:
	Mem0[ss:bp - 0x0006:word16] = bx
	si = Mem0[ss:bp - 0x0008:word16]
	// succ:  l0067_014C
l0067_014C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	ax = bp - 0x00CA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x00CA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0087_0298 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l0067_016B
l0067_016B:
	bx = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveWindow(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	bx = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	call fn0077_0956 (retsize: 4;)
	sp = sp + 0x0002
	v38 = Mem0[ss:bp - 0x000A:word16] + 0x0011
	Mem0[ss:bp - 0x000A:word16] = v38
	SCZO = cond(v38)
	si = si + 0x0018
	SCZO = cond(si)
	bx = Mem0[ss:bp - 0x0010:word16]
	ax = Mem0[ds:bx:word16]
	v39 = Mem0[ss:bp - 0x000E:word16] + 0x0001
	Mem0[ss:bp - 0x000E:word16] = v39
	SZO = cond(v39)
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - ax)
	branch Test(GE,SO) l0067_01A4
	// succ:  l0067_01A1 l0067_01A4
l0067_01A1:
	goto l0067_00F4
	// succ:  l0067_00F4
l0067_01A4:
	Mem0[ds:0x0268:word16] = 0x0002
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_01AE:
	Mem0[ss:bp - 0x0006:word16] = bx
	goto l0067_014C
	// succ:  l0067_014C
l0067_01B4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x01CC:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0087_0298 (retsize: 4;)
	sp = sp + 0x0006
	call fn0077_0DF0 (retsize: 4;)
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	si = Mem0[ds:bx + 0x006C:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0067_01F3
	// succ:  l0067_01D6 l0067_01F3
l0067_01D6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x011A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x011A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0087_0298 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l0067_01F3
l0067_01F3:
	Mem0[ds:0x4914:word16] = 0xFFFF
	Mem0[ds:0x0268:word16] = 0x0001
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0202:
	Mem0[ds:0x4D88:word16] = 0x0000
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_020C:
	call fn0087_0856 (retsize: 4;)
	SCZO = cond(Mem0[ds:0x0268:word16] - 0x0001)
	branch Test(NE,Z) l0067_0226
	// succ:  l0067_0218 l0067_0226
l0067_0218:
	al = Mem0[ds:0x01CA:byte]
	Mem0[ss:bp - 0x0003:byte] = al
	Mem0[ds:0x01CA:word16] = 0x0001
	goto l0067_0239
	// succ:  l0067_0239
l0067_0226:
	SCZO = cond(Mem0[ds:0x0268:word16] - 0x0002)
	branch Test(NE,Z) l0067_0239
	// succ:  l0067_022D l0067_0239
l0067_022D:
	al = Mem0[ds:0x01CA:byte]
	Mem0[ss:bp - 0x0003:byte] = al
	Mem0[ds:0x01CA:word16] = 0x0000
	// succ:  l0067_0239
l0067_0239:
	call fn0087_0000 (retsize: 4;)
	SCZO = cond(Mem0[ds:0x0268:word16] - 0x0000)
	branch Test(NE,Z) l0067_0248
	// succ:  l0067_0245 l0067_0248
l0067_0245:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0248:
	al = Mem0[ss:bp - 0x0003:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ds:0x01CA:word16] = ax
	Mem0[ds:0x0268:word16] = 0x0000
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_025A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4156:word16]
	call fn0077_0C76 (retsize: 4;)
	sp = sp + 0x0002
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0266:
	di = di - di
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = bp - 0x007A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BeginPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0067_027E
	// succ:  l0067_027B l0067_027E
l0067_027B:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_027E:
	SCZO = cond(Mem0[ds:0x3D82:word16] - 0x0000)
	branch Test(EQ,Z) l0067_0291
	// succ:  l0067_0285 l0067_0291
l0067_0285:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D82:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = ax
	// succ:  l0067_0291
l0067_0291:
	Mem0[ss:bp - 0x000C:word16] = si
	Mem0[ss:bp - 0x0004:word16] = 0x01D2
	Mem0[ss:bp - 0x000A:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax + 0x0028
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	Mem0[ss:bp - 0x000E:word16] = di
	// succ:  l0067_02B0
l0067_02B0:
	ax = bp - 0x003A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0076
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	IntersectRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0067_02CD
	// succ:  l0067_02CA l0067_02CD
l0067_02CA:
	goto l0067_0400
	// succ:  l0067_0400
l0067_02CD:
	si = si - si
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:0x4914:word16] - 0xFFFF)
	branch Test(NE,Z) l0067_02EC
	// succ:  l0067_02D6 l0067_02EC
l0067_02D6:
	ax = Mem0[ds:0x4156:word16]
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - ax)
	branch Test(NE,Z) l0067_02EC
	// succ:  l0067_02DE l0067_02EC
l0067_02DE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4916:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = ax
	// succ:  l0067_02EC
l0067_02EC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	bx = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0008:word16]
	Rectangle(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0067_0310
	// succ:  l0067_0307 l0067_0310
l0067_0307:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0067_0310
l0067_0310:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	di = bp - 0x003A
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v26 = Mem0[si:word16]
	Mem0[di:word16] = v26
	si = si + 0x0002
	di = di + 0x0002
	v27 = Mem0[si:word16]
	Mem0[di:word16] = v27
	si = si + 0x0002
	di = di + 0x0002
	v28 = Mem0[si:word16]
	Mem0[di:word16] = v28
	si = si + 0x0002
	di = di + 0x0002
	v29 = Mem0[si:word16]
	Mem0[di:word16] = v29
	si = si + 0x0002
	di = di + 0x0002
	bx = Mem0[ss:bp - 0x0008:word16]
	bx = bx + 0x0003
	SCZO = cond(bx)
	Mem0[ss:bp - 0x01BC:word16] = bx
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l0067_0332
	// succ:  l0067_032F l0067_0332
l0067_032F:
	goto l0067_03D2
	// succ:  l0067_03D2
l0067_0332:
	bx = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	call fn0137_0CAC (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0067_035F
	// succ:  l0067_0341 l0067_035F
l0067_0341:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = Mem0[ds:0x01CE:word16]
	ax = ax - 0x0020
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	bx = Mem0[ss:bp - 0x0004:word16]
	ax = ax + Mem0[ds:bx + 0x0002:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:bx + 0x0004:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DrawIcon(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l0067_035F
l0067_035F:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0034:word16] = ax
	Mem0[ss:bp - 0x0038:word16] = ax
	bx = Mem0[ss:bp - 0x01BC:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = bp - 0x016A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = bp - 0x016A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x003A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0410
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	DrawText(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	di = bp - 0x003A
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v33 = Mem0[si:word16]
	Mem0[di:word16] = v33
	si = si + 0x0002
	di = di + 0x0002
	v34 = Mem0[si:word16]
	Mem0[di:word16] = v34
	si = si + 0x0002
	di = di + 0x0002
	v35 = Mem0[si:word16]
	Mem0[di:word16] = v35
	si = si + 0x0002
	di = di + 0x0002
	v36 = Mem0[si:word16]
	Mem0[di:word16] = v36
	si = si + 0x0002
	di = di + 0x0002
	bx = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[ds:bx + 0x0004:word16]
	ax = ax + 0x0022
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0038:word16] = ax
	v37 = Mem0[ss:bp - 0x0034:word16] - 0x0001
	Mem0[ss:bp - 0x0034:word16] = v37
	SZO = cond(v37)
	ax = Mem0[ss:bp - 0x0034:word16]
	ax = ax - Mem0[ss:bp - 0x0038:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ss:bp - 0x0006:word16])
	branch Test(UGE,C) l0067_03E5
	// succ:  l0067_03C6 l0067_03E5
l0067_03C6:
	ax = Mem0[ss:bp - 0x0034:word16]
	ax = ax - Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0038:word16] = ax
	goto l0067_03E5
	// succ:  l0067_03E5
l0067_03D2:
	bx = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = bp - 0x016A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	v30 = Mem0[ss:bp - 0x0038:word16] + 0x0020
	Mem0[ss:bp - 0x0038:word16] = v30
	SCZO = cond(v30)
	// succ:  l0067_03E5
l0067_03E5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = bp - 0x016A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x003A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0011
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	DrawText(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	// succ:  l0067_0400
l0067_0400:
	v19 = Mem0[ss:bp - 0x0004:word16] + 0x000A
	Mem0[ss:bp - 0x0004:word16] = v19
	SCZO = cond(v19)
	v20 = Mem0[ss:bp - 0x0008:word16] + 0x0005
	Mem0[ss:bp - 0x0008:word16] = v20
	SCZO = cond(v20)
	v21 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v21
	SZO = cond(v21)
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x000F)
	branch Test(GE,SO) l0067_0414
	// succ:  l0067_0411 l0067_0414
l0067_0411:
	goto l0067_02B0
	// succ:  l0067_02B0
l0067_0414:
	si = Mem0[ss:bp - 0x000C:word16]
	di = Mem0[ss:bp - 0x000E:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0067_0425
	// succ:  l0067_041E l0067_0425
l0067_041E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0067_0425
l0067_0425:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(Mem0[ds:0x4CBE:word16] - 0x0000)
	branch Test(NE,Z) l0067_0438
	// succ:  l0067_0435 l0067_0438
l0067_0435:
	goto l0067_04D0
	// succ:  l0067_04D0
l0067_0438:
	ax = bp - 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x01CE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x01D0:word16]
	ax = Mem0[ds:0x01CE:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x01D0:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	ax = bp - 0x003A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0076
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	IntersectRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0067_04D0
	// succ:  l0067_0476 l0067_04D0
l0067_0476:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetMapMode(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0042:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0040:word16]
	SetViewportOrg(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x01CE:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x01D0:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetViewportExt(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowOrg(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x1380
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x1EAE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowExt(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CBE:word16]
	PlayMetaFile(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetMapMode(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0067_04D0
l0067_04D0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = bp - 0x007A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_04E0:
	di = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(di - 0x0009)
	branch Test(NE,Z) l0067_051E
	// succ:  l0067_04E8 l0067_051E
l0067_04E8:
	SCZO = cond(Mem0[ds:0x4D8C:word16] - 0x0000)
	branch Test(NE,Z) l0067_051E
	// succ:  l0067_04EF l0067_051E
l0067_04EF:
	SCZO = cond(Mem0[ds:0x4914:word16] - 0xFFFF)
	branch Test(NE,Z) l0067_0508
	// succ:  l0067_04F6 l0067_0508
l0067_04F6:
	SCZO = cond(Mem0[ds:0x4CBC:word16] - 0x0000)
	branch Test(EQ,Z) l0067_0508
	// succ:  l0067_04FD l0067_0508
l0067_04FD:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0067_04FF
l0067_04FF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l0067_0500
l0067_0500:
	call fn0077_087A (retsize: 4;)
	sp = sp + 0x0002
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0508:
	ax = Mem0[ds:0x4CBC:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[ds:0x4914:word16])
	branch Test(LE,SZO) l0067_0518
	// succ:  l0067_0512 l0067_0518
l0067_0512:
	ax = Mem0[ds:0x4914:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	goto l0067_04FF
	// succ:  l0067_04FF
l0067_0518:
	ax = 0xFFFF
	goto l0067_04FF
	// succ:  l0067_04FF
l0067_051E:
	SCZO = cond(Mem0[ds:0x4D8C:word16] - 0x0000)
	branch Test(NE,Z) l0067_0528
	// succ:  l0067_0525 l0067_0528
l0067_0525:
	goto l0067_05AC
	// succ:  l0067_05AC
l0067_0528:
	ax = di
	ax = ax - 0x000D
	SCZO = cond(ax)
	branch Test(EQ,Z) l0067_0544
	// succ:  l0067_052F l0067_0544
l0067_052F:
	ax = ax - 0x000E
	SCZO = cond(ax)
	branch Test(EQ,Z) l0067_0582
	// succ:  l0067_0534 l0067_0582
l0067_0534:
	ax = ax - 0x0006
	SCZO = cond(ax)
	branch Test(UGE,C) l0067_053C
	// succ:  l0067_0539 l0067_053C
l0067_0539:
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_053C:
	ax = ax - 0x0007
	SCZO = cond(ax)
	branch Test(ULE,CZ) l0067_058A
	// succ:  l0067_0541 l0067_058A
l0067_0541:
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_0544:
	ax = bp - 0x001E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetCursorPos(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	SCZO = cond(Mem0[ds:0x4914:word16] - 0xFFFF)
	branch Test(EQ,Z) l0067_0564
	// succ:  l0067_0555 l0067_0564
l0067_0555:
	ax = 0x0011
	dx_ax = Mem0[ds:0x4914:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	si = Mem0[ds:bx + 0x4B60:word16]
	goto l0067_0567
	// succ:  l0067_0567
l0067_0564:
	si = Mem0[ss:bp + 0x000E:word16]
	// succ:  l0067_0567
l0067_0567:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x001E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScreenToClient(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001E:word16]
	// succ:  l0067_0579
l0067_0579:
	call fn0077_0ED0 (retsize: 4;)
	sp = sp + 0x0006
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0582:
	call fn0077_194C (retsize: 4;)
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_058A:
	ax = bp - 0x001E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetCursorPos(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = bp - 0x001E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0077_1996 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	// succ:  l0067_05A4
l0067_05A4:
	SetCursorPos(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_05AC:
	SCZO = cond(Mem0[ds:0x4914:word16] - 0xFFFF)
	branch Test(EQ,Z) l0067_05B6
	// succ:  l0067_05B3 l0067_05B6
l0067_05B3:
	goto l0067_07F0
	// succ:  l0067_07F0
l0067_05B6:
	ax = Mem0[ds:0x4156:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = di
	ax = ax - 0x000D
	SCZO = cond(ax)
	branch Test(EQ,Z) l0067_05DE
	// succ:  l0067_05C3 l0067_05DE
l0067_05C3:
	ax = ax - 0x000E
	SCZO = cond(ax)
	branch Test(NE,Z) l0067_05CB
	// succ:  l0067_05C8 l0067_05CB
l0067_05C8:
	goto l0067_0758
	// succ:  l0067_0758
l0067_05CB:
	ax = ax - 0x0006
	SCZO = cond(ax)
	branch Test(UGE,C) l0067_05D3
	// succ:  l0067_05D0 l0067_05D3
l0067_05D0:
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_05D3:
	ax = ax - 0x0007
	SCZO = cond(ax)
	branch Test(UGT,CZ) l0067_05DB
	// succ:  l0067_05D8 l0067_05DB
l0067_05D8:
	goto l0067_0764
	// succ:  l0067_0764
l0067_05DB:
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_05DE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	IsIconic(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0067_05ED
	// succ:  l0067_05EA l0067_05ED
l0067_05EA:
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_05ED:
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetKeyState(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SZO = cond(ah & 0x80)
	C = false
	branch Test(NE,Z) l0067_05FE
	// succ:  l0067_05FB l0067_05FE
l0067_05FB:
	goto l0067_06E2
	// succ:  l0067_06E2
l0067_05FE:
	Mem0[ss:bp - 0x0010:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x4D8C:word16] - 0x0000)
	branch Test(EQ,Z) l0067_060D
	// succ:  l0067_060A l0067_060D
l0067_060A:
	goto l0067_0777
	// succ:  l0067_0777
l0067_060D:
	si = Mem0[ds:0x4156:word16]
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x002B + si:word16]
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0067_062C
	// succ:  l0067_0629 l0067_062C
l0067_0629:
	goto l0067_0777
	// succ:  l0067_0777
l0067_062C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x004A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0xFFFF)
	branch Test(EQ,Z) l0067_0646
	// succ:  l0067_0641 l0067_0646
l0067_0641:
	Mem0[ss:bp - 0x0010:word16] = 0x0002
	// succ:  l0067_0646
l0067_0646:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	call fn0087_0F00 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	di = ax
	di = di + Mem0[ds:0x4132:word16]
	SCZO = cond(di)
	ax = dx
	dx = dx - dx
	SCZO = cond(dx)
	si = ax
	si = si + Mem0[ds:0x4134:word16]
	SCZO = cond(si)
	bx = Mem0[ds:0x4156:word16]
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x01D4:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	cx = Mem0[ds:bx + 0x01D6:word16]
	Mem0[ss:bp - 0x000E:word16] = cx
	ax = ax + di
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ss:bp - 0x0046:word16])
	branch Test(ULE,CZ) l0067_0692
	// succ:  l0067_068A l0067_0692
l0067_068A:
	ax = Mem0[ss:bp - 0x0046:word16]
	ax = ax - di
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	// succ:  l0067_0692
l0067_0692:
	ax = cx
	ax = ax + si
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ss:bp - 0x0044:word16])
	branch Test(ULE,CZ) l0067_06A0
	// succ:  l0067_069B l0067_06A0
l0067_069B:
	cx = Mem0[ss:bp - 0x0044:word16]
	cx = cx - si
	SCZO = cond(cx)
	// succ:  l0067_06A0
l0067_06A0:
	ax = 0x00FC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	dx = 0x5680
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	Mem0[ds:0x4EB8:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0067_06CF
	// succ:  l0067_06CC l0067_06CF
l0067_06CC:
	goto l0067_0777
	// succ:  l0067_0777
l0067_06CF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BringWindowToTop(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB8:word16]
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l0067_0777
	// succ:  l0067_0777
l0067_06E2:
	si = Mem0[ds:0x4156:word16]
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x002B + si:word16]
	Mem0[ds:0x4D8C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0067_0777
	// succ:  l0067_06FE l0067_0777
l0067_06FE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0077_0CAC (retsize: 4;)
	sp = sp + 0x0002
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0067_074A
	// succ:  l0067_0707 l0067_074A
l0067_0707:
	SCZO = cond(Mem0[ds:0x4136:word16] - 0x0000)
	branch Test(NE,Z) l0067_0717
	// succ:  l0067_070E l0067_0717
l0067_070E:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0067_0717
l0067_0717:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	SetCapture(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = Mem0[ds:0x4D8C:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:bx + 0x0001:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1208 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x4EBC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x0098:word16] = 0x0004
	ax = Mem0[ds:0x4156:word16]
	Mem0[ds:0x01C6:word16] = ax
	goto l0067_0777
	// succ:  l0067_0777
l0067_074A:
	Mem0[ds:0x4D8C:word16] = 0x0000
	Mem0[ds:0x01C6:word16] = 0xFFFF
	goto l0067_0777
	// succ:  l0067_0777
l0067_0758:
	ax = 0x0034
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00AF_04A4 (retsize: 4;)
	sp = sp + 0x0002
	goto l0067_0777
	// succ:  l0067_0777
l0067_0764:
	cl = 0x03
	bx = Mem0[ds:0x4156:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + di
	SCZO = cond(bx)
	al = Mem0[0x0067:bx + 0x0E65:byte]
	ax = (int16) al
	Mem0[ds:0x4156:word16] = ax
	// succ:  l0067_0777
l0067_0777:
	ax = Mem0[ds:0x4156:word16]
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - ax)
	branch Test(NE,Z) l0067_0782
	// succ:  l0067_077F l0067_0782
l0067_077F:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0782:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	// succ:  l0067_0785
l0067_0785:
	call fn0077_0C76 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4156:word16]
	call fn0077_0C76 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	// succ:  l0067_0796
l0067_0796:
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_079E:
	SCZO = cond(Mem0[ds:0x4D8C:word16] - 0x0000)
	branch Test(EQ,Z) l0067_07C4
	// succ:  l0067_07A5 l0067_07C4
l0067_07A5:
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetCursorPos(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0077_1A2C (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0022:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0020:word16]
	goto l0067_05A4
	// succ:  l0067_05A4
l0067_07C4:
	SCZO = cond(Mem0[ds:0x4914:word16] - 0xFFFF)
	branch Test(NE,Z) l0067_07CE
	// succ:  l0067_07CB l0067_07CE
l0067_07CB:
	goto l0067_0BAE
	// succ:  l0067_0BAE
l0067_07CE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	call fn00AF_0000 (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(GE,SO) l0067_07DE
	// succ:  l0067_07DB l0067_07DE
l0067_07DB:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_07DE:
	ax = ax - 0x0007
	SCZO = cond(ax)
	branch Test(LE,SZO) l0067_07E6
	// succ:  l0067_07E3 l0067_07E6
l0067_07E3:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_07E6:
	si = si << 0x0001
	SCZO = cond(si)
	ax = Mem0[0x0067:si + 0x0E74:word16]
	Mem0[ss:bp + 0x000A:word16] = ax
	// succ:  l0067_07F0
l0067_07F0:
	ax = 0x0011
	dx_ax = Mem0[ds:0x4914:word16] *s ax
	SCZO = cond(dx_ax)
	di = ax
	di = di + 0x4B60
	SCZO = cond(di)
	ax = Mem0[ds:di:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	al = Mem0[ds:di + 0x000A:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = Mem0[ds:di + 0x000D:word16]
	Mem0[ss:bp - 0x0012:word16] = ax
	si = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0067_0824
	// succ:  l0067_0815 l0067_0824
l0067_0815:
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x0073)
	branch Test(EQ,Z) l0067_0824
	// succ:  l0067_081B l0067_0824
l0067_081B:
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x001B)
	branch Test(EQ,Z) l0067_0824
	// succ:  l0067_0821 l0067_0824
l0067_0821:
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_0824:
	SCZO = cond(Mem0[ds:di + 0x000F:word16] - 0x0000)
	branch Test(EQ,Z) l0067_0868
	// succ:  l0067_082A l0067_0868
l0067_082A:
	bx = Mem0[ds:di + 0x000F:word16]
	bx = Mem0[ds:bx:word16]
	dx = Mem0[ds:bx + 0x0024:word16]
	// succ:  l0067_0832
l0067_0832:
	ax = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax - 0x0073)
	branch Test(NE,Z) l0067_083D
	// succ:  l0067_083A l0067_083D
l0067_083A:
	goto l0067_0AF4
	// succ:  l0067_0AF4
l0067_083D:
	branch Test(ULE,CZ) l0067_0842
	// succ:  l0067_083F l0067_0842
l0067_083F:
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_0842:
	SCZO = cond(al - 0x23)
	branch Test(NE,Z) l0067_0849
	// succ:  l0067_0846 l0067_0849
l0067_0846:
	goto l0067_0AA6
	// succ:  l0067_0AA6
l0067_0849:
	branch Test(UGT,CZ) l0067_0880
	// succ:  l0067_084B l0067_0880
l0067_084B:
	al = al - 0x0D
	SCZO = cond(al)
	branch Test(EQ,Z) l0067_08A6
	// succ:  l0067_084F l0067_08A6
l0067_084F:
	al = al - 0x0E
	SCZO = cond(al)
	branch Test(NE,Z) l0067_0856
	// succ:  l0067_0853 l0067_0856
l0067_0853:
	goto l0067_0A70
	// succ:  l0067_0A70
l0067_0856:
	al = al - 0x06
	SCZO = cond(al)
	branch Test(NE,Z) l0067_085D
	// succ:  l0067_085A l0067_085D
l0067_085A:
	goto l0067_0A7C
	// succ:  l0067_0A7C
l0067_085D:
	al = al - 0x01
	SZO = cond(al)
	branch Test(NE,Z) l0067_0864
	// succ:  l0067_0861 l0067_0864
l0067_0861:
	goto l0067_0A92
	// succ:  l0067_0A92
l0067_0864:
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_0868:
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x001B)
	branch Test(NE,Z) l0067_0874
	// succ:  l0067_086E l0067_0874
l0067_086E:
	dx = Mem0[ss:bp - 0x0008:word16]
	goto l0067_0832
	// succ:  l0067_0832
l0067_0874:
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x0073)
	branch Test(EQ,Z) l0067_087D
	// succ:  l0067_087A l0067_087D
l0067_087A:
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_087D:
	goto l0067_086E
	// succ:  l0067_086E
l0067_0880:
	al = al - 0x24
	SCZO = cond(al)
	branch Test(NE,Z) l0067_0887
	// succ:  l0067_0884 l0067_0887
l0067_0884:
	goto l0067_0AB8
	// succ:  l0067_0AB8
l0067_0887:
	al = al - 0x01
	SZO = cond(al)
	branch Test(NE,Z) l0067_088E
	// succ:  l0067_088B l0067_088E
l0067_088B:
	goto l0067_0AC8
	// succ:  l0067_0AC8
l0067_088E:
	al = al - 0x01
	SZO = cond(al)
	branch Test(NE,Z) l0067_0895
	// succ:  l0067_0892 l0067_0895
l0067_0892:
	goto l0067_0AD0
	// succ:  l0067_0AD0
l0067_0895:
	al = al - 0x01
	SZO = cond(al)
	branch Test(NE,Z) l0067_089C
	// succ:  l0067_0899 l0067_089C
l0067_0899:
	goto l0067_0ADA
	// succ:  l0067_0ADA
l0067_089C:
	al = al - 0x01
	SZO = cond(al)
	branch Test(NE,Z) l0067_08A3
	// succ:  l0067_08A0 l0067_08A3
l0067_08A0:
	goto l0067_0AE4
	// succ:  l0067_0AE4
l0067_08A3:
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_08A6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	IsIconic(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0067_08B5
	// succ:  l0067_08B2 l0067_08B5
l0067_08B2:
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_08B5:
	SCZO = cond(Mem0[ds:di + 0x000F:word16] - ax)
	branch Test(NE,Z) l0067_08BD
	// succ:  l0067_08BA l0067_08BD
l0067_08BA:
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_08BD:
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetKeyState(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SZO = cond(ah & 0x80)
	C = false
	branch Test(NE,Z) l0067_08CE
	// succ:  l0067_08CB l0067_08CE
l0067_08CB:
	goto l0067_09F8
	// succ:  l0067_09F8
l0067_08CE:
	Mem0[ss:bp - 0x001A:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x4D8C:word16] - 0x0000)
	branch Test(EQ,Z) l0067_08DD
	// succ:  l0067_08DA l0067_08DD
l0067_08DA:
	goto l0067_0B16
	// succ:  l0067_0B16
l0067_08DD:
	SCZO = cond(Mem0[ds:di + 0x000D:word16] - 0xFFFF)
	branch Test(NE,Z) l0067_08E6
	// succ:  l0067_08E3 l0067_08E6
l0067_08E3:
	goto l0067_0B16
	// succ:  l0067_0B16
l0067_08E6:
	bx = Mem0[ds:di + 0x000F:word16]
	ax = Mem0[ds:bx:word16]
	bx = Mem0[ds:di + 0x000D:word16]
	cx = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + cx
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x002B:word16]
	Mem0[ss:bp - 0x0014:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0067_0905
	// succ:  l0067_0902 l0067_0905
l0067_0902:
	goto l0067_0B16
	// succ:  l0067_0B16
l0067_0905:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di:word16]
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0xFFFF)
	branch Test(EQ,Z) l0067_092A
	// succ:  l0067_0918 l0067_092A
l0067_0918:
	al = Mem0[ds:di + 0x000B:byte]
	ax = ax & 0x0001
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x0001
	SZO = cond(ax)
	C = false
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x001A:word16] = ax
	// succ:  l0067_092A
l0067_092A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	call fn0087_0F00 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0010:word16] = ax
	Mem0[ss:bp - 0x000E:word16] = dx
	ax = ax + Mem0[ds:0x4132:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = dx
	ax = ax + Mem0[ds:0x4134:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	cx = ax
	al = Mem0[ds:di + 0x000A:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	ax = ax - Mem0[ds:di + 0x000D:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	Mem0[ss:bp - 0x000C:word16] = ax
	cl = Mem0[ds:di + 0x000A:byte]
	ch = ch - ch
	SCZO = cond(ch)
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	ax = dx
	bx = 0x0050
	dx_ax = bx *s ax
	SCZO = cond(dx_ax)
	Mem0[ss:bp - 0x0018:word16] = ax
	dx = ax
	ax = Mem0[ss:bp - 0x000C:word16]
	bx = dx
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	cx = 0x0050
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	Mem0[ss:bp - 0x0016:word16] = ax
	bx = bx + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(bx)
	SCZO = cond(bx - Mem0[ss:bp - 0x004E:word16])
	branch Test(ULE,CZ) l0067_099C
	// succ:  l0067_0993 l0067_099C
l0067_0993:
	ax = Mem0[ss:bp - 0x004E:word16]
	ax = ax - Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0018:word16] = ax
	// succ:  l0067_099C
l0067_099C:
	ax = Mem0[ss:bp - 0x000A:word16]
	ax = ax + Mem0[ss:bp - 0x0016:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ss:bp - 0x004C:word16])
	branch Test(ULE,CZ) l0067_09F2
	// succ:  l0067_09A7 l0067_09F2
l0067_09A7:
	cx = Mem0[ss:bp - 0x004C:word16]
	cx = cx - Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(cx)
	// succ:  l0067_09AD
l0067_09AD:
	ax = 0x00FC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	dx = 0x5680
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	Mem0[ds:0x4EB8:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0067_09DF
	// succ:  l0067_09DC l0067_09DF
l0067_09DC:
	goto l0067_0B16
	// succ:  l0067_0B16
l0067_09DF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BringWindowToTop(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB8:word16]
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l0067_0B16
	// succ:  l0067_0B16
l0067_09F2:
	cx = Mem0[ss:bp - 0x0016:word16]
	goto l0067_09AD
	// succ:  l0067_09AD
l0067_09F8:
	bx = Mem0[ds:di + 0x000F:word16]
	ax = Mem0[ds:bx:word16]
	bx = si
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + si
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x002B:word16]
	Mem0[ds:0x4D8C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0067_0A14
	// succ:  l0067_0A11 l0067_0A14
l0067_0A11:
	goto l0067_0B16
	// succ:  l0067_0B16
l0067_0A14:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0077_0CAC (retsize: 4;)
	sp = sp + 0x0002
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0067_0A60
	// succ:  l0067_0A1D l0067_0A60
l0067_0A1D:
	SCZO = cond(Mem0[ds:0x4136:word16] - 0x0000)
	branch Test(NE,Z) l0067_0A2D
	// succ:  l0067_0A24 l0067_0A2D
l0067_0A24:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0067_0A2D
l0067_0A2D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	SetCapture(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = Mem0[ds:0x4D8C:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:bx + 0x0001:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1208 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x4EBC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x0098:word16] = 0x0004
	Mem0[ds:0x01C8:word16] = si
	goto l0067_0B16
	// succ:  l0067_0B16
l0067_0A60:
	Mem0[ds:0x4D8C:word16] = 0x0000
	Mem0[ds:0x01C6:word16] = 0xFFFF
	goto l0067_0B16
	// succ:  l0067_0B16
l0067_0A70:
	ax = 0x0034
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00AF_04A4 (retsize: 4;)
	sp = sp + 0x0002
	goto l0067_0B16
	// succ:  l0067_0B16
l0067_0A7C:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - si)
	branch Test(LE,SZO) l0067_0A87
	// succ:  l0067_0A84 l0067_0A87
l0067_0A84:
	goto l0067_0B16
	// succ:  l0067_0B16
l0067_0A87:
	ax = 0x0001
	ax = ax - Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	si = si + ax
	SCZO = cond(si)
	goto l0067_0B16
	// succ:  l0067_0B16
l0067_0A92:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + si
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - dx)
	branch Test(GE,SO) l0067_0B16
	// succ:  l0067_0A9C l0067_0B16
l0067_0A9C:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + si
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	// succ:  l0067_0AA2
l0067_0AA2:
	si = ax
	goto l0067_0B16
	// succ:  l0067_0B16
l0067_0AA6:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + si
	SCZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - dx)
	branch Test(GE,SO) l0067_0B16
	// succ:  l0067_0AB0 l0067_0B16
l0067_0AB0:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + si
	SCZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	goto l0067_0AA2
	// succ:  l0067_0AA2
l0067_0AB8:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - si)
	branch Test(GT,SZO) l0067_0B16
	// succ:  l0067_0AC0 l0067_0B16
l0067_0AC0:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	si = si - ax
	SCZO = cond(si)
	goto l0067_0B16
	// succ:  l0067_0B16
l0067_0AC8:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0067_0B16
	// succ:  l0067_0ACC l0067_0B16
l0067_0ACC:
	si = si - 0x0001
	SZO = cond(si)
	goto l0067_0B16
	// succ:  l0067_0B16
l0067_0AD0:
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - si)
	branch Test(GT,SZO) l0067_0B16
	// succ:  l0067_0AD5 l0067_0B16
l0067_0AD5:
	si = si - Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(si)
	goto l0067_0B16
	// succ:  l0067_0B16
l0067_0ADA:
	ax = si + 0x0001
	SCZO = cond(dx - ax)
	branch Test(LE,SZO) l0067_0B16
	// succ:  l0067_0AE1 l0067_0B16
l0067_0AE1:
	goto l0067_0AA2
	// succ:  l0067_0AA2
l0067_0AE4:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + si
	SCZO = cond(ax)
	SCZO = cond(ax - dx)
	branch Test(GE,SO) l0067_0B16
	// succ:  l0067_0AED l0067_0B16
l0067_0AED:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + si
	SCZO = cond(ax)
	goto l0067_0AA2
	// succ:  l0067_0AA2
l0067_0AF4:
	ax = 0x0011
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetKeyState(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SZO = cond(ah & 0x80)
	C = false
	branch Test(NE,Z) l0067_0B05
	// succ:  l0067_0B02 l0067_0B05
l0067_0B02:
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_0B05:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	PostMessage(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l0067_0B16
l0067_0B16:
	SCZO = cond(Mem0[ss:bp - 0x0012:word16] - si)
	branch Test(NE,Z) l0067_0B1E
	// succ:  l0067_0B1B l0067_0B1E
l0067_0B1B:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0B1E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x000A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0008:word16] = ax
	Mem0[ds:di + 0x000D:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	call fn0077_08EE (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	call fn0077_08EE (retsize: 4;)
	sp = sp + 0x0008
	ax = Mem0[ss:bp - 0x0004:word16]
	dx_ax = Mem0[ss:bp - 0x0008:word16] *s ax
	SCZO = cond(dx_ax)
	SCZO = cond(ax - si)
	branch Test(LE,SZO) l0067_0B7C
	// succ:  l0067_0B69 l0067_0B7C
l0067_0B69:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	ax = 0x0115
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si
	dx_ax = (int32) ax
	dx = dx_ax % Mem0[ss:bp - 0x0004:word16]
	ax = dx_ax / Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	goto l0067_0B9F
	// succ:  l0067_0B9F
l0067_0B7C:
	di = Mem0[ss:bp - 0x000A:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax + di
	SCZO = cond(ax)
	dx_ax = Mem0[ss:bp - 0x0004:word16] *s ax
	SCZO = cond(dx_ax)
	SCZO = cond(ax - si)
	branch Test(GT,SZO) l0067_0BA8
	// succ:  l0067_0B8B l0067_0BA8
l0067_0B8B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	ax = 0x0115
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si
	dx_ax = (int32) ax
	dx = dx_ax % Mem0[ss:bp - 0x0004:word16]
	ax = dx_ax / Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	ax = ax - di
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	// succ:  l0067_0B9F
l0067_0B9F:
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	PostMessage(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l0067_0BA8
l0067_0BA8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	goto l0067_0796
	// succ:  l0067_0796
l0067_0BAE:
	si = Mem0[ds:0x4156:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	call fn00AF_0000 (retsize: 4;)
	sp = sp + 0x0002
	di = ax
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(GE,SO) l0067_0BC2
	// succ:  l0067_0BBF l0067_0BC2
l0067_0BBF:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0BC2:
	ax = ax - 0x0009
	SCZO = cond(ax)
	branch Test(LE,SZO) l0067_0BCA
	// succ:  l0067_0BC7 l0067_0BCA
l0067_0BC7:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0BCA:
	ax = 0x0067
	es = ax
	al = Mem0[0x0067:di + 0x0EFD:byte]
	ax = (int16) al
	bx = ax
	cl = 0x03
	ax = Mem0[ds:0x4156:word16]
	ax = ax << cl
	SCZO = cond(ax)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[0x0067:bx + 0x0E86:byte]
	ax = (int16) al
	Mem0[ds:0x4156:word16] = ax
	SCZO = cond(ax - si)
	branch Test(NE,Z) l0067_0BF0
	// succ:  l0067_0BED l0067_0BF0
l0067_0BED:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0BF0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	goto l0067_0785
	// succ:  l0067_0785
l0067_0BF4:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x0026:word16] = ax
	Mem0[ss:bp - 0x0024:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = bp - 0x0026
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0024:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	call fn0077_0D26 (retsize: 4;)
	sp = sp + 0x0004
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0C1C:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x002A:word16] = ax
	Mem0[ss:bp - 0x0028:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0077_0C2E (retsize: 4;)
	sp = sp + 0x0004
	si = ax
	SCZO = cond(si - 0xFFFF)
	branch Test(NE,Z) l0067_0C39
	// succ:  l0067_0C36 l0067_0C39
l0067_0C36:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0C39:
	SCZO = cond(Mem0[ds:0x4156:word16] - si)
	branch Test(EQ,Z) l0067_0C52
	// succ:  l0067_0C3F l0067_0C52
l0067_0C3F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4156:word16]
	call fn0077_0C76 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:0x4156:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0077_0C76 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0067_0C52
l0067_0C52:
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0077_087A (retsize: 4;)
	sp = sp + 0x0002
	di = si
	di = di << 0x0001
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + si
	SCZO = cond(di)
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x002B + di:word16]
	Mem0[ds:0x4D8C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0067_0C76
	// succ:  l0067_0C73 l0067_0C76
l0067_0C73:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0C76:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	SetCapture(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = Mem0[ds:0x4D8C:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:bx + 0x0001:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1208 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x4EBC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x0098:word16] = 0x0004
	Mem0[ds:0x01C6:word16] = si
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0CA8:
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0004)
	branch Test(EQ,Z) l0067_0CB2
	// succ:  l0067_0CAF l0067_0CB2
l0067_0CAF:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0CB2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	goto l0067_0579
	// succ:  l0067_0579
l0067_0CBE:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	IsIconic(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0067_0CCE
	// succ:  l0067_0CCB l0067_0CCE
l0067_0CCB:
	goto l0067_0E56
	// succ:  l0067_0E56
l0067_0CCE:
	SCZO = cond(Mem0[ds:0x4CBC:word16] - 0x0008)
	branch Test(GE,SO) l0067_0D4A
	// succ:  l0067_0CD5 l0067_0D4A
l0067_0CD5:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x002E:word16] = ax
	Mem0[ss:bp - 0x002C:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0077_0C2E (retsize: 4;)
	sp = sp + 0x0004
	di = ax
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l0067_0CF2
	// succ:  l0067_0CEF l0067_0CF2
l0067_0CEF:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0CF2:
	di = di << 0x0001
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	si = Mem0[ds:bx + 0x002B + di:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0067_0D08
	// succ:  l0067_0D05 l0067_0D08
l0067_0D05:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0D08:
	bx = Mem0[ds:si:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(NE,Z) l0067_0D13
	// succ:  l0067_0D10 l0067_0D13
l0067_0D10:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0D13:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0077_0CAC (retsize: 4;)
	sp = sp + 0x0002
	di = ax
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l0067_0D46
	// succ:  l0067_0D20 l0067_0D46
l0067_0D20:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x01BA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x01BA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0087_0298 (retsize: 4;)
	sp = sp + 0x0006
	call fn0087_0000 (retsize: 4;)
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0D46:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	goto l0067_0500
	// succ:  l0067_0500
l0067_0D4A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0404
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0157
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D72 (retsize: 4;)
	sp = sp + 0x0008
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0D5E:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x0032:word16] = ax
	Mem0[ss:bp - 0x0030:word16] = dx
	Mem0[ss:bp - 0x000A:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0000)
	branch Test(EQ,Z) l0067_0D79
	// succ:  l0067_0D76 l0067_0D79
l0067_0D76:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0D79:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0077_0C2E (retsize: 4;)
	sp = sp + 0x0004
	si = ax
	SCZO = cond(si - 0xFFFF)
	branch Test(NE,Z) l0067_0D8A
	// succ:  l0067_0D87 l0067_0D8A
l0067_0D87:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0D8A:
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0077_087A (retsize: 4;)
	sp = sp + 0x0002
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x002B + si:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0067_0DAE
	// succ:  l0067_0DAB l0067_0DAE
l0067_0DAB:
	goto l0067_0E51
	// succ:  l0067_0E51
l0067_0DAE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x005A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0xFFFF)
	branch Test(EQ,Z) l0067_0DC8
	// succ:  l0067_0DC3 l0067_0DC8
l0067_0DC3:
	Mem0[ss:bp - 0x000A:word16] = 0x0002
	// succ:  l0067_0DC8
l0067_0DC8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn0087_0F00 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	di = ax
	di = di + Mem0[ds:0x4132:word16]
	SCZO = cond(di)
	ax = dx
	dx = dx - dx
	SCZO = cond(dx)
	si = ax
	si = si + Mem0[ds:0x4134:word16]
	SCZO = cond(si)
	ax = Mem0[ss:bp - 0x0032:word16]
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = ax + di
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ss:bp - 0x0056:word16])
	branch Test(ULE,CZ) l0067_0DFE
	// succ:  l0067_0DF6 l0067_0DFE
l0067_0DF6:
	ax = Mem0[ss:bp - 0x0056:word16]
	ax = ax - di
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	// succ:  l0067_0DFE
l0067_0DFE:
	SCZO = cond(Mem0[ss:bp - 0x0030:word16] - si)
	branch Test(ULE,CZ) l0067_0E0A
	// succ:  l0067_0E03 l0067_0E0A
l0067_0E03:
	cx = Mem0[ss:bp - 0x0030:word16]
	cx = cx - si
	SCZO = cond(cx)
	goto l0067_0E10
	// succ:  l0067_0E10
l0067_0E0A:
	cx = Mem0[ss:bp - 0x0030:word16]
	cx = cx + 0x0010
	SCZO = cond(cx)
	// succ:  l0067_0E10
l0067_0E10:
	ax = 0x00FC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	dx = 0x5680
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	Mem0[ds:0x4EB8:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0067_0E51
	// succ:  l0067_0E3C l0067_0E51
l0067_0E3C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BringWindowToTop(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB8:word16]
	SetCapture(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x0098:word16] = 0x0005
	// succ:  l0067_0E51
l0067_0E51:
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (int32) ax
	goto l0067_0E6A
	// succ:  l0067_0E6A
l0067_0E56:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	DefWindowProc(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l0067_0E6A
l0067_0E6A:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  STATUSWNDPROC_exit
STATUSWNDPROC_exit:


// fn0067_0F06
// Return size: 4
void fn0067_0F06()
fn0067_0F06_entry:
	// succ:  l0067_0F06
l0067_0F06:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4CBC:word16] - 0x0000)
	branch Test(EQ,Z) l0067_0F6F
	// succ:  l0067_0F1C l0067_0F6F
l0067_0F1C:
	bx = Mem0[ds:0x4CBC:word16]
	bx = bx - 0x0001
	SZO = cond(bx)
	branch Test(SG,S) l0067_0F6F
	// succ:  l0067_0F23 l0067_0F6F
l0067_0F23:
	ax = bx
	cx = 0x0011
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	di = ax
	di = di + 0x4B6F
	SCZO = cond(di)
	Mem0[ss:bp - 0x0006:word16] = bx
	// succ:  l0067_0F33
l0067_0F33:
	SZO = cond(Mem0[ds:di - 0x0004:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0067_0F40
	// succ:  l0067_0F39 l0067_0F40
l0067_0F39:
	Mem0[ds:di:word16] = 0x0000
	goto l0067_0F67
	// succ:  l0067_0F67
l0067_0F40:
	bx = Mem0[ds:di:word16]
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l0067_0F67
	// succ:  l0067_0F46 l0067_0F67
l0067_0F46:
	si = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:si + 0x000A:word16] - 0x0000)
	branch Test(EQ,Z) l0067_0F59
	// succ:  l0067_0F4E l0067_0F59
l0067_0F4E:
	bx = Mem0[ds:si + 0x000A:word16]
	si = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:si + 0x000A:word16] - 0x0000)
	branch Test(NE,Z) l0067_0F4E
	// succ:  l0067_0F59 l0067_0F4E
l0067_0F59:
	SCZO = cond(bx - Mem0[ds:0x4DEA:word16])
	branch Test(EQ,Z) l0067_0F67
	// succ:  l0067_0F5F l0067_0F67
l0067_0F5F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di - 0x000F:word16]
	DestroyWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0067_0F67
l0067_0F67:
	di = di - 0x0011
	SCZO = cond(di)
	v18 = Mem0[ss:bp - 0x0006:word16] - 0x0001
	Mem0[ss:bp - 0x0006:word16] = v18
	SZO = cond(v18)
	branch Test(NS,S) l0067_0F33
	// succ:  l0067_0F6F l0067_0F33
l0067_0F6F:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0067_0F06_exit fn0067_0F06_exit
fn0067_0F06_exit:


// fn0067_0F7A
// Return size: 4
void fn0067_0F7A()
fn0067_0F7A_entry:
	// succ:  l0067_0F7A
l0067_0F7A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0052
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = si - si
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:0x4914:word16] - 0xFFFF)
	branch Test(EQ,Z) l0067_0FB4
	// succ:  l0067_0F91 l0067_0FB4
l0067_0F91:
	ax = 0x0011
	dx_ax = Mem0[ds:0x4914:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	bx = bx + 0x4B60
	SCZO = cond(bx)
	SCZO = cond(Mem0[ds:bx + 0x000D:word16] - 0xFFFF)
	branch Test(EQ,Z) l0067_0FD0
	// succ:  l0067_0FA4 l0067_0FD0
l0067_0FA4:
	si = Mem0[ds:bx + 0x000D:word16]
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	bx = Mem0[ds:bx + 0x000F:word16]
	goto l0067_0FCB
	// succ:  l0067_0FCB
l0067_0FB4:
	SCZO = cond(Mem0[ds:0x4156:word16] - 0xFFFF)
	branch Test(EQ,Z) l0067_0FD0
	// succ:  l0067_0FBB l0067_0FD0
l0067_0FBB:
	si = Mem0[ds:0x4156:word16]
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	bx = Mem0[ds:0x4DEA:word16]
	// succ:  l0067_0FCB
l0067_0FCB:
	bx = Mem0[ds:bx:word16]
	si = Mem0[ds:bx + 0x002B + si:word16]
	// succ:  l0067_0FD0
l0067_0FD0:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0067_1022
	// succ:  l0067_0FD4 l0067_1022
l0067_0FD4:
	bx = Mem0[ds:si:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0067_1022
	// succ:  l0067_0FDC l0067_1022
l0067_0FDC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0077_0CAC (retsize: 4;)
	sp = sp + 0x0002
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0067_1022
	// succ:  l0067_0FE5 l0067_1022
l0067_0FE5:
	SCZO = cond(Mem0[ds:0x4CBC:word16] - 0x0008)
	branch Test(GE,SO) l0067_100E
	// succ:  l0067_0FEC l0067_100E
l0067_0FEC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0087_0298 (retsize: 4;)
	sp = sp + 0x0006
	call fn0087_0000 (retsize: 4;)
	goto l0067_1022
	// succ:  l0067_1022
l0067_100E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = 0x0404
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0157
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D72 (retsize: 4;)
	sp = sp + 0x0008
	// succ:  l0067_1022
l0067_1022:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0067_0F7A_exit
fn0067_0F7A_exit:


// TOOLBARWNDPROC
// Return size: 4
void TOOLBARWNDPROC()
TOOLBARWNDPROC_entry:
	// succ:  l0077_0000
l0077_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x00D8
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(ax - 0x000F)
	branch Test(NE,Z) l0077_001B
	// succ:  l0077_0018 l0077_001B
l0077_0018:
	goto l0077_0134
	// succ:  l0077_0134
l0077_001B:
	branch Test(UGT,CZ) l0077_003E
	// succ:  l0077_001D l0077_003E
l0077_001D:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0077_0088
	// succ:  l0077_0020 l0077_0088
l0077_0020:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0077_0026
	// succ:  l0077_0023 l0077_0026
l0077_0023:
	goto l0077_00AC
	// succ:  l0077_00AC
l0077_0026:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0077_002C
	// succ:  l0077_0029 l0077_002C
l0077_0029:
	goto l0077_00C0
	// succ:  l0077_00C0
l0077_002C:
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0077_0033
	// succ:  l0077_0030 l0077_0033
l0077_0030:
	goto l0077_00CA
	// succ:  l0077_00CA
l0077_0033:
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0077_003A
	// succ:  l0077_0037 l0077_003A
l0077_0037:
	goto l0077_011A
	// succ:  l0077_011A
l0077_003A:
	goto l0077_085A
	// succ:  l0077_085A
l0077_003E:
	SCZO = cond(ax - 0x0200)
	branch Test(NE,Z) l0077_0046
	// succ:  l0077_0043 l0077_0046
l0077_0043:
	goto l0077_04E0
	// succ:  l0077_04E0
l0077_0046:
	branch Test(UGT,CZ) l0077_006A
	// succ:  l0077_0048 l0077_006A
l0077_0048:
	ax = ax - 0x00A1
	SCZO = cond(ax)
	branch Test(UGE,C) l0077_0050
	// succ:  l0077_004D l0077_0050
l0077_004D:
	goto l0077_085A
	// succ:  l0077_085A
l0077_0050:
	ax = ax - 0x0001
	SCZO = cond(ax)
	branch Test(UGT,CZ) l0077_0058
	// succ:  l0077_0055 l0077_0058
l0077_0055:
	goto l0077_03C6
	// succ:  l0077_03C6
l0077_0058:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0077_005E
	// succ:  l0077_005B l0077_005E
l0077_005B:
	goto l0077_03D8
	// succ:  l0077_03D8
l0077_005E:
	ax = ax - 0x0072
	SCZO = cond(ax)
	branch Test(NE,Z) l0077_0066
	// succ:  l0077_0063 l0077_0066
l0077_0063:
	goto l0077_03F0
	// succ:  l0077_03F0
l0077_0066:
	goto l0077_085A
	// succ:  l0077_085A
l0077_006A:
	ax = ax - 0x0201
	SCZO = cond(ax)
	branch Test(NE,Z) l0077_0072
	// succ:  l0077_006F l0077_0072
l0077_006F:
	goto l0077_0506
	// succ:  l0077_0506
l0077_0072:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0077_0078
	// succ:  l0077_0075 l0077_0078
l0077_0075:
	goto l0077_05F4
	// succ:  l0077_05F4
l0077_0078:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0077_007E
	// succ:  l0077_007B l0077_007E
l0077_007B:
	goto l0077_061C
	// succ:  l0077_061C
l0077_007E:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0077_0084
	// succ:  l0077_0081 l0077_0084
l0077_0081:
	goto l0077_06F2
	// succ:  l0077_06F2
l0077_0084:
	goto l0077_085A
	// succ:  l0077_085A
l0077_0088:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CBC:word16]
	SetWindowWord(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = 0x0011
	dx_ax = Mem0[ds:0x4CBC:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	Mem0[ds:bx + 0x4B60:word16] = si
	v20 = Mem0[ds:0x4CBC:word16] + 0x0001
	Mem0[ds:0x4CBC:word16] = v20
	SZO = cond(v20)
	goto l0077_0854
	// succ:  l0077_0854
l0077_00AC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0087_03F0 (retsize: 4;)
	sp = sp + 0x0002
	goto l0077_085A
	// succ:  l0077_085A
l0077_00C0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	call fn0077_0956 (retsize: 2;)
	sp = sp + 0x0002
	goto l0077_0854
	// succ:  l0077_0854
l0077_00CA:
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x0001)
	branch Test(NE,Z) l0077_00C0
	// succ:  l0077_00D0 l0077_00C0
l0077_00D0:
	di = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x002A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = si
	cx = 0x0050
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - Mem0[ss:bp - 0x0024:word16]
	SCZO = cond(cx)
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveWindow(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = 0x0005
	// succ:  l0077_0111
l0077_0111:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l0077_0854
	// succ:  l0077_0854
l0077_011A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ds:0x4914:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l0077_0854
	// succ:  l0077_0854
l0077_0134:
	Mem0[ss:bp - 0x001A:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = ax
	cx = 0x0011
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	bx = ax
	Mem0[ss:bp - 0x00D4:word16] = bx
	ax = Mem0[ds:bx + 0x4B6F:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	al = Mem0[ds:bx + 0x4B6A:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0016:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BeginPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_0178
	// succ:  l0077_0175 l0077_0178
l0077_0175:
	goto l0077_0854
	// succ:  l0077_0854
l0077_0178:
	SCZO = cond(Mem0[ds:0x3D82:word16] - 0x0000)
	branch Test(EQ,Z) l0077_018C
	// succ:  l0077_017F l0077_018C
l0077_017F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D82:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x001A:word16] = ax
	// succ:  l0077_018C
l0077_018C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	IsIconic(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_01D6
	// succ:  l0077_0198 l0077_01D6
l0077_0198:
	bx = Mem0[ss:bp - 0x00D4:word16]
	SZO = cond(Mem0[ds:bx + 0x4B6B:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0077_01C2
	// succ:  l0077_01A3 l0077_01C2
l0077_01A3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0001
	dx_ax = (word32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	// succ:  l0077_01B9
l0077_01B9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	DrawIcon(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	goto l0077_03A4
	// succ:  l0077_03A4
l0077_01C2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	call fn0137_0CAC (retsize: 4;)
	sp = sp + 0x0002
	goto l0077_01B9
	// succ:  l0077_01B9
l0077_01D6:
	Mem0[ss:bp - 0x0018:word16] = si
	si = Mem0[ss:bp - 0x0004:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0077_01E3
	// succ:  l0077_01E0 l0077_01E3
l0077_01E0:
	goto l0077_03A4
	// succ:  l0077_03A4
l0077_01E3:
	di = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	dx_ax = Mem0[ss:bp - 0x0016:word16] *s ax
	SCZO = cond(dx_ax)
	Mem0[ss:bp - 0x0012:word16] = ax
	ax = Mem0[ds:di + 0x0024:word16]
	Mem0[ss:bp - 0x0014:word16] = ax
	cx = Mem0[ss:bp - 0x0012:word16]
	Mem0[ss:bp - 0x0010:word16] = cx
	SCZO = cond(ax - cx)
	branch Test(GT,SZO) l0077_020A
	// succ:  l0077_0207 l0077_020A
l0077_0207:
	goto l0077_03A4
	// succ:  l0077_03A4
l0077_020A:
	ax = cx
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + di
	SCZO = cond(ax)
	ax = ax + 0x0028
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x000E:word16] = di
	// succ:  l0077_021D
l0077_021D:
	ax = Mem0[ss:bp - 0x0010:word16]
	ax = ax - Mem0[ss:bp - 0x0012:word16]
	SCZO = cond(ax)
	dx_ax = (word32) ax
	dx = dx_ax % Mem0[ss:bp - 0x0016:word16]
	ax = dx_ax / Mem0[ss:bp - 0x0016:word16]
	SCZO = cond(ax)
	cx = 0x0050
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	si = ax
	ax = bp - 0x002A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0010:word16]
	dx_ax = (word32) ax
	dx = dx_ax % Mem0[ss:bp - 0x0016:word16]
	ax = dx_ax / Mem0[ss:bp - 0x0016:word16]
	SCZO = cond(ax)
	ax = dx
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = di + 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	ax = bp - 0x002A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x004E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x002A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	IntersectRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_026A
	// succ:  l0077_0267 l0077_026A
l0077_0267:
	goto l0077_0392
	// succ:  l0077_0392
l0077_026A:
	bx = Mem0[ss:bp - 0x000C:word16]
	ax = Mem0[ds:bx + 0x0003:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ds:0x4914:word16]
	SCZO = cond(Mem0[ss:bp - 0x0018:word16] - ax)
	branch Test(NE,Z) l0077_02BC
	// succ:  l0077_027B l0077_02BC
l0077_027B:
	ax = Mem0[ss:bp - 0x0010:word16]
	bx = Mem0[ss:bp - 0x00D4:word16]
	SCZO = cond(Mem0[ds:bx + 0x4B6D:word16] - ax)
	branch Test(NE,Z) l0077_02BC
	// succ:  l0077_0288 l0077_02BC
l0077_0288:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4916:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = di + 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	Rectangle(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(EQ,Z) l0077_02D7
	// succ:  l0077_02AF l0077_02D7
l0077_02AF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l0077_02D7
	// succ:  l0077_02D7
l0077_02BC:
	bx = Mem0[ss:bp - 0x000E:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l0077_02D7
	// succ:  l0077_02C5 l0077_02D7
l0077_02C5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = di + 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	Rectangle(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	// succ:  l0077_02D7
l0077_02D7:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0077_0338
	// succ:  l0077_02DD l0077_0338
l0077_02DD:
	bx = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	call fn0137_0CAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_030D
	// succ:  l0077_02EE l0077_030D
l0077_02EE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = di + 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cl = 0x06
	bx = Mem0[ss:bp - 0x000E:word16]
	al = Mem0[ds:bx + 0x0009:byte]
	ax = ax & 0x0040
	SZO = cond(ax)
	C = false
	ax = ax >>u cl
	SCZO = cond(ax)
	ax = ax + si
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	DrawIcon(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l0077_030D
l0077_030D:
	Mem0[ss:bp - 0x002A:word16] = di
	ax = di + 0x0050
	Mem0[ss:bp - 0x0026:word16] = ax
	ax = si + 0x0020
	Mem0[ss:bp - 0x0028:word16] = ax
	ax = si + 0x0050
	Mem0[ss:bp - 0x0024:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	ax = bp - 0x00D2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	goto l0077_0377
	// succ:  l0077_0377
l0077_0338:
	bx = Mem0[ss:bp - 0x000E:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l0077_0392
	// succ:  l0077_0341 l0077_0392
l0077_0341:
	bx = Mem0[ss:bp - 0x000C:word16]
	al = Mem0[ds:bx:byte]
	ax = ax & 0x007F
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_0392
	// succ:  l0077_0350 l0077_0392
l0077_0350:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x026A:word16]
	ax = bp - 0x00D2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x002A:word16] = di
	di = di + 0x0050
	SCZO = cond(di)
	Mem0[ss:bp - 0x0026:word16] = di
	ax = si + 0x0020
	Mem0[ss:bp - 0x0028:word16] = ax
	ax = si + 0x0050
	Mem0[ss:bp - 0x0024:word16] = ax
	// succ:  l0077_0377
l0077_0377:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = bp - 0x00D2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x002A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0011
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	DrawText(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	// succ:  l0077_0392
l0077_0392:
	v21 = Mem0[ss:bp - 0x000C:word16] + 0x0005
	Mem0[ss:bp - 0x000C:word16] = v21
	SCZO = cond(v21)
	ax = Mem0[ss:bp - 0x0014:word16]
	v22 = Mem0[ss:bp - 0x0010:word16] + 0x0001
	Mem0[ss:bp - 0x0010:word16] = v22
	SZO = cond(v22)
	SCZO = cond(Mem0[ss:bp - 0x0010:word16] - ax)
	branch Test(GE,SO) l0077_03A4
	// succ:  l0077_03A1 l0077_03A4
l0077_03A1:
	goto l0077_021D
	// succ:  l0077_021D
l0077_03A4:
	SCZO = cond(Mem0[ss:bp - 0x001A:word16] - 0x0000)
	branch Test(EQ,Z) l0077_03B5
	// succ:  l0077_03AA l0077_03B5
l0077_03AA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0077_03B5
l0077_03B5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	goto l0077_0854
	// succ:  l0077_0854
l0077_03C6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	IsIconic(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_03D5
	// succ:  l0077_03D2 l0077_03D5
l0077_03D2:
	goto l0077_085A
	// succ:  l0077_085A
l0077_03D5:
	goto l0077_0854
	// succ:  l0077_0854
l0077_03D8:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	IsIconic(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_03E8
	// succ:  l0077_03E5 l0077_03E8
l0077_03E5:
	goto l0077_085A
	// succ:  l0077_085A
l0077_03E8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	goto l0077_0111
	// succ:  l0077_0111
l0077_03F0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0004:word16] = ax
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax - 0x0007)
	branch Test(UGT,CZ) l0077_0462
	// succ:  l0077_0418 l0077_0462
l0077_0418:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v25 = ax
	ax = bx
	bx = v25
	switch (ax) { l0077_0430 l0077_0440 l0077_04AA l0077_04BA l0077_04DA l0077_0462 l0077_0436 l0077_0454 }
	// succ:  l0077_0430 l0077_0440 l0077_04AA l0077_04BA l0077_04DA l0077_0462 l0077_0436 l0077_0454
l0077_0430:
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(NE,Z) l0077_043A
	// succ:  l0077_0436 l0077_043A
l0077_0436:
	si = si - si
	SCZO = cond(si)
	si = si - si
	SCZO = cond(si)
	goto l0077_0462
	// succ:  l0077_0462
l0077_043A:
	si = Mem0[ss:bp - 0x0004:word16]
	si = si - 0x0001
	SZO = cond(si)
	goto l0077_0462
	// succ:  l0077_0462
l0077_0440:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	cx = Mem0[ss:bp - 0x0004:word16]
	cx = cx + 0x0001
	SZO = cond(cx)
	SCZO = cond(ax - cx)
	branch Test(UGT,CZ) l0077_04A4
	// succ:  l0077_0454 l0077_04A4
l0077_0454:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0077_0460
l0077_0460:
	si = ax
	// succ:  l0077_0462
l0077_0462:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SetWindowWord(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax - si
	SCZO = cond(ax)
	cx = 0x0050
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScrollWindow(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l0077_0854
	// succ:  l0077_0854
l0077_04A4:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	goto l0077_0460
	// succ:  l0077_0460
l0077_04AA:
	di = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - di)
	branch Test(ULT,C) l0077_0436
	// succ:  l0077_04B2 l0077_0436
l0077_04B2:
	si = Mem0[ss:bp - 0x0004:word16]
	si = si - di
	SCZO = cond(si)
	goto l0077_0462
	// succ:  l0077_0462
l0077_04BA:
	di = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	cx = Mem0[ss:bp - 0x0004:word16]
	cx = cx + di
	SCZO = cond(cx)
	SCZO = cond(ax - cx)
	branch Test(ULE,CZ) l0077_0454
	// succ:  l0077_04D2 l0077_0454
l0077_04D2:
	di = di + Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(di)
	si = di
	goto l0077_0462
	// succ:  l0077_0462
l0077_04DA:
	si = Mem0[ss:bp + 0x0006:word16]
	goto l0077_0462
	// succ:  l0077_0462
l0077_04E0:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x0022:word16] = ax
	Mem0[ss:bp - 0x0020:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0020:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0022:word16]
	sp = sp - 0x0002
	call fn0077_0D26 (retsize: 2;)
	sp = sp + 0x0004
	goto l0077_0854
	// succ:  l0077_0854
l0077_0506:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	IsIconic(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_0516
	// succ:  l0077_0513 l0077_0516
l0077_0513:
	goto l0077_085A
	// succ:  l0077_085A
l0077_0516:
	SCZO = cond(Mem0[ds:0x4D8C:word16] - ax)
	branch Test(EQ,Z) l0077_051F
	// succ:  l0077_051C l0077_051F
l0077_051C:
	goto l0077_085A
	// succ:  l0077_085A
l0077_051F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	GetTopWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l0077_0532
	// succ:  l0077_052C l0077_0532
l0077_052C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	BringWindowToTop(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0077_0532
l0077_0532:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn0077_0BB4 (retsize: 2;)
	sp = sp + 0x0006
	di = ax
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l0077_0547
	// succ:  l0077_0544 l0077_0547
l0077_0544:
	goto l0077_0854
	// succ:  l0077_0854
l0077_0547:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	Mem0[ss:bp - 0x00D6:word16] = ax
	sp = sp - 0x0002
	call fn0077_087A (retsize: 2;)
	sp = sp + 0x0002
	ax = 0x0011
	dx_ax = Mem0[ss:bp - 0x00D6:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	bx = bx + 0x4B60
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0004:word16] = bx
	bx = Mem0[ds:bx + 0x000F:word16]
	ax = Mem0[ds:bx:word16]
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + di
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x002B:word16]
	Mem0[ds:0x4D8C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_0585
	// succ:  l0077_0582 l0077_0585
l0077_0582:
	goto l0077_0854
	// succ:  l0077_0854
l0077_0585:
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:bx + 0x000D:word16] - di)
	branch Test(EQ,Z) l0077_05C3
	// succ:  l0077_058D l0077_05C3
l0077_058D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x000D:word16]
	al = Mem0[ds:bx + 0x000A:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	call fn0077_08EE (retsize: 2;)
	sp = sp + 0x0008
	bx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:bx + 0x000D:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	al = Mem0[ds:bx + 0x000A:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	call fn0077_08EE (retsize: 2;)
	sp = sp + 0x0008
l0077_05C3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SetCapture(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = Mem0[ds:0x4D8C:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:bx + 0x0001:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1208 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x4EBC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x0098:word16] = 0x0004
	Mem0[ds:0x01C8:word16] = di
	goto l0077_0854
	// succ:  l0077_0854
l0077_05F4:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	IsIconic(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_0604
	// succ:  l0077_0601 l0077_0604
l0077_0601:
	goto l0077_085A
	// succ:  l0077_085A
l0077_0604:
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0004)
	branch Test(EQ,Z) l0077_060E
	// succ:  l0077_060B l0077_060E
l0077_060B:
	goto l0077_0854
	// succ:  l0077_0854
l0077_060E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn0077_0ED0 (retsize: 2;)
	sp = sp + 0x0006
	goto l0077_0854
	// succ:  l0077_0854
l0077_061C:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	IsIconic(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_062C
	// succ:  l0077_0629 l0077_062C
l0077_0629:
	goto l0077_03E8
	// succ:  l0077_03E8
l0077_062C:
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0004)
	branch Test(EQ,Z) l0077_060E
	// succ:  l0077_0633 l0077_060E
l0077_0633:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn0077_0BB4 (retsize: 2;)
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0010:word16] = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0077_0650
	// succ:  l0077_064D l0077_0650
l0077_064D:
	goto l0077_0854
	// succ:  l0077_0854
l0077_0650:
	ax = di
	cx = 0x0011
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	bx = ax
	Mem0[ss:bp - 0x00D4:word16] = bx
	bx = Mem0[ds:bx + 0x4B6F:word16]
	ax = Mem0[ds:bx:word16]
	bx = Mem0[ss:bp - 0x0010:word16]
	cx = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + cx
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	si = Mem0[ds:bx + 0x002B:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0077_067A
	// succ:  l0077_0677 l0077_067A
l0077_0677:
	goto l0077_0854
	// succ:  l0077_0854
l0077_067A:
	bx = Mem0[ds:si:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(NE,Z) l0077_0685
	// succ:  l0077_0682 l0077_0685
l0077_0682:
	goto l0077_0854
	// succ:  l0077_0854
l0077_0685:
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0xFFFF)
	branch Test(EQ,Z) l0077_069A
	// succ:  l0077_068C l0077_069A
l0077_068C:
	bx = Mem0[ss:bp - 0x00D4:word16]
	SZO = cond(Mem0[ds:bx + 0x4B6B:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0077_069A
	// succ:  l0077_0697 l0077_069A
l0077_0697:
	goto l0077_0854
	// succ:  l0077_0854
l0077_069A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0077_0CAC (retsize: 2;)
	sp = sp + 0x0002
	di = ax
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l0077_06EA
	// succ:  l0077_06A6 l0077_06EA
l0077_06A6:
	SCZO = cond(Mem0[ds:0x4CBC:word16] - 0x0008)
	branch Test(GE,SO) l0077_06D2
	// succ:  l0077_06AD l0077_06D2
l0077_06AD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x00D2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x00D2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0087_0298 (retsize: 4;)
	sp = sp + 0x0006
	call fn0087_0000 (retsize: 4;)
	goto l0077_0854
	// succ:  l0077_0854
l0077_06D2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = 0x0404
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0157
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D72 (retsize: 4;)
	sp = sp + 0x0008
	goto l0077_0854
	// succ:  l0077_0854
l0077_06EA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn0077_087A (retsize: 2;)
	sp = sp + 0x0002
	goto l0077_0854
	// succ:  l0077_0854
l0077_06F2:
	si = Mem0[ss:bp + 0x000E:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x001E:word16] = ax
	Mem0[ss:bp - 0x001C:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	IsIconic(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_070E
	// succ:  l0077_070B l0077_070E
l0077_070B:
	goto l0077_085A
	// succ:  l0077_085A
l0077_070E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	GetTopWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l0077_0721
	// succ:  l0077_071B l0077_0721
l0077_071B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	BringWindowToTop(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0077_0721
l0077_0721:
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0000)
	branch Test(EQ,Z) l0077_072B
	// succ:  l0077_0728 l0077_072B
l0077_0728:
	goto l0077_0854
	// succ:  l0077_0854
l0077_072B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001E:word16]
	sp = sp - 0x0002
	call fn0077_0BB4 (retsize: 2;)
	sp = sp + 0x0006
	di = ax
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l0077_0740
	// succ:  l0077_073D l0077_0740
l0077_073D:
	goto l0077_0854
	// succ:  l0077_0854
l0077_0740:
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	Mem0[ss:bp - 0x00D8:word16] = ax
	sp = sp - 0x0002
	call fn0077_087A (retsize: 2;)
	sp = sp + 0x0002
	ax = 0x0011
	dx_ax = Mem0[ss:bp - 0x00D8:word16] *s ax
	SCZO = cond(dx_ax)
	ax = ax + 0x4B60
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = di
	cx = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + cx
	SCZO = cond(bx)
	di = ax
	di = Mem0[ds:di + 0x000F:word16]
	di = Mem0[ds:di:word16]
	ax = Mem0[ds:bx + 0x002B + di:word16]
	Mem0[ss:bp - 0x0012:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_0782
	// succ:  l0077_077F l0077_0782
l0077_077F:
	goto l0077_085A
	// succ:  l0077_085A
l0077_0782:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x0032
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0xFFFF)
	branch Test(EQ,Z) l0077_07AC
	// succ:  l0077_0797 l0077_07AC
l0077_0797:
	bx = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[ds:bx + 0x000B:byte]
	ax = ax & 0x0001
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x0001
	SZO = cond(ax)
	C = false
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	// succ:  l0077_07AC
l0077_07AC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	call fn0087_0F00 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0008:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = dx
	di = ax
	di = di + Mem0[ds:0x4132:word16]
	SCZO = cond(di)
	ax = dx
	ax = ax + Mem0[ds:0x4134:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x001E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x001E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScreenToClient(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = Mem0[ss:bp - 0x001E:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = ax + di
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ss:bp - 0x002E:word16])
	branch Test(ULE,CZ) l0077_0806
	// succ:  l0077_07F2 l0077_0806
l0077_07F2:
	si = Mem0[ss:bp - 0x002E:word16]
	si = si - di
	SCZO = cond(si)
	// succ:  l0077_07F7
l0077_07F7:
	ax = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ss:bp - 0x001C:word16] - ax)
	branch Test(ULE,CZ) l0077_080C
	// succ:  l0077_07FF l0077_080C
l0077_07FF:
	cx = Mem0[ss:bp - 0x001C:word16]
	cx = cx - ax
	SCZO = cond(cx)
	goto l0077_0812
	// succ:  l0077_0812
l0077_0806:
	si = Mem0[ss:bp - 0x000A:word16]
	goto l0077_07F7
	// succ:  l0077_07F7
l0077_080C:
	cx = Mem0[ss:bp - 0x001C:word16]
	cx = cx + 0x0010
	SCZO = cond(cx)
	// succ:  l0077_0812
l0077_0812:
	ax = 0x00FC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	dx = 0x5680
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	Mem0[ds:0x4EB8:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_0854
	// succ:  l0077_083F l0077_0854
l0077_083F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BringWindowToTop(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB8:word16]
	SetCapture(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x0098:word16] = 0x0005
	// succ:  l0077_0854
l0077_0854:
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (word32) ax
	goto l0077_086E
	// succ:  l0077_086E
l0077_085A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	DefWindowProc(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l0077_086E
l0077_086E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  TOOLBARWNDPROC_exit
TOOLBARWNDPROC_exit:


// fn0077_087A
// Return size: 4
void fn0077_087A()
fn0077_087A_entry:
	// succ:  l0077_087A
l0077_087A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4914:word16] - 0xFFFF)
	branch Test(NE,Z) l0077_089A
	// succ:  l0077_088F l0077_089A
l0077_088F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4156:word16]
	sp = sp - 0x0002
	call fn0077_0C76 (retsize: 2;)
	sp = sp + 0x0002
	goto l0077_08AB
	// succ:  l0077_08AB
l0077_089A:
	ax = 0x0011
	dx_ax = Mem0[ds:0x4914:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4B60:word16]
	sp = sp - 0x0002
	call fn0077_1C4A (retsize: 2;)
	sp = sp + 0x0002
l0077_08AB:
	ax = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:0x4914:word16] = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0077_08BE
	// succ:  l0077_08B4 l0077_08BE
l0077_08B4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4156:word16]
	sp = sp - 0x0002
	call fn0077_0C76 (retsize: 2;)
	sp = sp + 0x0002
	goto l0077_08E3
	// succ:  l0077_08E3
l0077_08BE:
	ax = 0x0011
	dx_ax = Mem0[ds:0x4914:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	si = Mem0[ds:bx + 0x4B60:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0077_1C4A (retsize: 2;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	GetTopWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l0077_08E3
	// succ:  l0077_08DD l0077_08E3
l0077_08DD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	BringWindowToTop(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0077_08E3
l0077_08E3:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_087A_exit
fn0077_087A_exit:


// fn0077_08EE
// Return size: 4
void fn0077_08EE()
fn0077_08EE_entry:
	// succ:  l0077_08EE
l0077_08EE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x000A:word16]
	si = Mem0[ss:bp + 0x0008:word16]
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = di
	cx = di
	dx_ax = (int32) ax
	dx = dx_ax % si
	ax = dx_ax / si
	SCZO = cond(ax)
	ax = dx
	bx = 0x0050
	dx_ax = bx *s ax
	SCZO = cond(dx_ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	dx = ax
	ax = si
	di = dx
	dx_ax = Mem0[ss:bp + 0x0006:word16] *s ax
	SCZO = cond(dx_ax)
	dx = ax
	ax = cx
	ax = ax - dx
	SCZO = cond(ax)
	dx_ax = (int32) ax
	dx = dx_ax % si
	ax = dx_ax / si
	SCZO = cond(ax)
	dx_ax = bx *s ax
	SCZO = cond(dx_ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = di + 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	bx = bx + ax
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_08EE_exit
fn0077_08EE_exit:


// fn0077_0956
// Return size: 4
void fn0077_0956()
fn0077_0956_entry:
	// succ:  l0077_0956
l0077_0956:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	cx = 0x0011
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	ax = ax + 0x4B60
	SCZO = cond(ax)
	cx = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = ax
	Mem0[ss:bp - 0x000C:word16] = cx
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	bx = Mem0[ss:bp - 0x000C:word16]
	ax = Mem0[ds:bx + 0x0006:word16]
	cx = 0x0050
	dx_ax = (word32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0001)
	branch Test(GE,SO) l0077_099E
	// succ:  l0077_099B l0077_099E
l0077_099B:
	ax = 0x0001
	// succ:  l0077_099E
l0077_099E:
	Mem0[ds:bx + 0x000A:byte] = al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp - 0x000C:word16]
	ax = ax + 0x0006
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	IntersectRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0077_0A04 (retsize: 2;)
	sp = sp + 0x0004
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_0956_exit
fn0077_0956_exit:


// fn0077_0A04
// Return size: 4
void fn0077_0A04()
fn0077_0A04_entry:
	// succ:  l0077_0A04
l0077_0A04:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0010
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	cx = 0x0011
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	si = ax
	si = si + 0x4B60
	SCZO = cond(si)
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	Mem0[ss:bp - 0x0006:word16] = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0008:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = bp - 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	SCZO = cond(Mem0[ds:si + 0x000F:word16] - 0x0000)
	branch Test(EQ,Z) l0077_0AD2
	// succ:  l0077_0A55 l0077_0AD2
l0077_0A55:
	ax = Mem0[ss:bp - 0x000A:word16]
	cx = 0x0050
	dx_ax = (word32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0001)
	branch Test(GE,SO) l0077_0A66
	// succ:  l0077_0A63 l0077_0A66
l0077_0A63:
	ax = 0x0001
	// succ:  l0077_0A66
l0077_0A66:
	Mem0[ss:bp - 0x0006:word16] = ax
	cx = ax
	al = Mem0[ds:si + 0x000A:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = ax
	di = Mem0[ds:si + 0x000F:word16]
	di = Mem0[ds:di:word16]
	ax = ax + Mem0[ds:di + 0x0024:word16]
	SCZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % bx
	ax = dx_ax /u bx
	SCZO = cond(ax)
	ax = ax - cx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	di = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l0077_0A8C
	// succ:  l0077_0A8A l0077_0A8C
l0077_0A8A:
	di = di - di
	SCZO = cond(di)
	// succ:  l0077_0A8C
l0077_0A8C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - di)
	branch Test(GT,SZO) l0077_0A9F
	// succ:  l0077_0A9C l0077_0A9F
l0077_0A9C:
	ax = 0x0001
	// succ:  l0077_0A9F
l0077_0A9F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollRange(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0077_0AD8
	// succ:  l0077_0AAB l0077_0AD8
l0077_0AAB:
	SCZO = cond(Mem0[ds:si + 0x000F:word16] - 0x0000)
	branch Test(EQ,Z) l0077_0AD8
	// succ:  l0077_0AB1 l0077_0AD8
l0077_0AB1:
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0xFFFF)
	branch Test(EQ,Z) l0077_0AD8
	// succ:  l0077_0AB8 l0077_0AD8
l0077_0AB8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowWord(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	goto l0077_0AF2
	// succ:  l0077_0AF2
l0077_0AD2:
	di = Mem0[ss:bp - 0x0004:word16]
	goto l0077_0A8C
	// succ:  l0077_0A8C
l0077_0AD8:
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - di)
	branch Test(LE,SZO) l0077_0AF8
	// succ:  l0077_0ADD l0077_0AF8
l0077_0ADD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	SetWindowWord(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	// succ:  l0077_0AF2
l0077_0AF2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l0077_0AF8
l0077_0AF8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	SetWindowWord(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	SetWindowWord(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_0A04_exit
fn0077_0A04_exit:


// fn0077_0B5E
// Return size: 4
void fn0077_0B5E()
fn0077_0B5E_entry:
	// succ:  l0077_0B5E
l0077_0B5E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ChildWindowFromPoint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0006
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0077_0BA6
	// succ:  l0077_0B81 l0077_0BA6
l0077_0B81:
	SCZO = cond(Mem0[ds:0x4D88:word16] - di)
	branch Test(EQ,Z) l0077_0BA6
	// succ:  l0077_0B87 l0077_0BA6
l0077_0B87:
	dx = dx - dx
	SCZO = cond(dx)
	SCZO = cond(Mem0[ds:0x4CBC:word16] - dx)
	branch Test(LE,SZO) l0077_0BA6
	// succ:  l0077_0B8F l0077_0BA6
l0077_0B8F:
	bx = 0x4B60
	// succ:  l0077_0B92
l0077_0B92:
	SCZO = cond(Mem0[ds:bx:word16] - di)
	branch Test(EQ,Z) l0077_0BA2
	// succ:  l0077_0B96 l0077_0BA2
l0077_0B96:
	bx = bx + 0x0011
	SCZO = cond(bx)
	dx = dx + 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - Mem0[ds:0x4CBC:word16])
	branch Test(LT,SO) l0077_0B92
	// succ:  l0077_0BA0 l0077_0B92
l0077_0BA0:
	goto l0077_0BA6
	// succ:  l0077_0BA6
l0077_0BA2:
	ax = dx
	goto l0077_0BA9
	// succ:  l0077_0BA9
l0077_0BA6:
	ax = 0xFFFF
	// succ:  l0077_0BA9
l0077_0BA9:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_0B5E_exit
fn0077_0B5E_exit:


// fn0077_0BB4
// Return size: 4
void fn0077_0BB4()
fn0077_0BB4_entry:
	// succ:  l0077_0BB4
l0077_0BB4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = ax
	cx = 0x0011
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	bx = ax
	Mem0[ss:bp - 0x0008:word16] = bx
	ax = Mem0[ds:bx + 0x4B6F:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_0BEA
	// succ:  l0077_0BE5 l0077_0BEA
l0077_0BE5:
	ax = 0xFFFF
	goto l0077_0C22
	// succ:  l0077_0C22
l0077_0BEA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = ax
	ax = Mem0[ss:bp + 0x0008:word16]
	cx = 0x0050
	dx_ax = (word32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	di = di + ax
	SCZO = cond(di)
	ax = Mem0[ss:bp + 0x0006:word16]
	dx_ax = (word32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	bx = Mem0[ss:bp - 0x0008:word16]
	cx = ax
	al = Mem0[ds:bx + 0x4B6A:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx_ax = di *u ax
	SCZO = cond(dx_ax)
	ax = ax + cx
	SCZO = cond(ax)
	bx = Mem0[ss:bp - 0x0004:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(ax - Mem0[ds:bx + 0x0024:word16])
	branch Test(UGE,C) l0077_0BE5
	// succ:  l0077_0C22 l0077_0BE5
l0077_0C22:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_0BB4_exit
fn0077_0BB4_exit:


// fn0077_0C2E
// Return size: 4
void fn0077_0C2E()
fn0077_0C2E_entry:
	// succ:  l0077_0C2E
l0077_0C2E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = 0x01D2
	di = di - di
	SCZO = cond(di)
	// succ:  l0077_0C42
l0077_0C42:
	ax = si + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	PtInRect(Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_0C62
	// succ:  l0077_0C56 l0077_0C62
l0077_0C56:
	si = si + 0x000A
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - 0x000F)
	branch Test(LT,SO) l0077_0C42
	// succ:  l0077_0C5F l0077_0C42
l0077_0C5F:
	goto l0077_0C66
	// succ:  l0077_0C66
l0077_0C62:
	ax = di
	goto l0077_0C69
	// succ:  l0077_0C69
l0077_0C66:
	ax = 0xFFFF
	// succ:  l0077_0C69
l0077_0C69:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_0C2E_exit
fn0077_0C2E_exit:


// fn0077_0C76
// Return size: 4
void fn0077_0C76()
fn0077_0C76_entry:
	// succ:  l0077_0C76
l0077_0C76:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + 0x01D4
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_0C76_exit
fn0077_0C76_exit:


// fn0077_0CAC
// Return size: 4
void fn0077_0CAC()
fn0077_0CAC_entry:
	// succ:  l0077_0CAC
l0077_0CAC:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	dx = dx - dx
	SCZO = cond(dx)
	SCZO = cond(Mem0[ds:0x4CBC:word16] - dx)
	branch Test(LE,SZO) l0077_0CDC
	// succ:  l0077_0CC1 l0077_0CDC
l0077_0CC1:
	bx = 0x4B6F
	cx = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0077_0CC7
l0077_0CC7:
	SCZO = cond(Mem0[ds:bx:word16] - cx)
	branch Test(EQ,Z) l0077_0CD8
	// succ:  l0077_0CCB l0077_0CD8
l0077_0CCB:
	bx = bx + 0x0011
	SCZO = cond(bx)
	dx = dx + 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - Mem0[ds:0x4CBC:word16])
	branch Test(LT,SO) l0077_0CC7
	// succ:  l0077_0CD5 l0077_0CC7
l0077_0CD5:
	goto l0077_0CDC
	// succ:  l0077_0CDC
l0077_0CD8:
	ax = dx
	goto l0077_0CDF
	// succ:  l0077_0CDF
l0077_0CDC:
	ax = 0xFFFF
	// succ:  l0077_0CDF
l0077_0CDF:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_0CAC_exit
fn0077_0CAC_exit:


// fn0077_0CEA
// Return size: 4
void fn0077_0CEA()
fn0077_0CEA_entry:
	// succ:  l0077_0CEA
l0077_0CEA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l0077_0D18
	// succ:  l0077_0CFF l0077_0D18
l0077_0CFF:
	dx = Mem0[ss:bp + 0x0008:word16]
	// succ:  l0077_0D02
l0077_0D02:
	SCZO = cond(bx - dx)
	branch Test(EQ,Z) l0077_0D12
	// succ:  l0077_0D06 l0077_0D12
l0077_0D06:
	si = Mem0[ds:bx:word16]
	bx = Mem0[ds:si + 0x000A:word16]
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(NE,Z) l0077_0D02
	// succ:  l0077_0D0F l0077_0D02
l0077_0D0F:
	goto l0077_0D18
	// succ:  l0077_0D18
l0077_0D12:
	ax = 0x0001
	goto l0077_0D1A
	// succ:  l0077_0D1A
l0077_0D18:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0077_0D1A
l0077_0D1A:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_0CEA_exit
fn0077_0CEA_exit:


// fn0077_0D26
// Return size: 4
void fn0077_0D26()
fn0077_0D26_entry:
	// succ:  l0077_0D26
l0077_0D26:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0004)
	branch Test(EQ,Z) l0077_0D3F
	// succ:  l0077_0D3C l0077_0D3F
l0077_0D3C:
	goto l0077_0DDA
	// succ:  l0077_0DDA
l0077_0D3F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScreenToClient(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn0077_0B5E (retsize: 2;)
	sp = sp + 0x0004
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0077_0DCE
	// succ:  l0077_0D5A l0077_0DCE
l0077_0D5A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn0077_0C2E (retsize: 2;)
	sp = sp + 0x0004
	si = ax
	SCZO = cond(si - 0xFFFF)
	branch Test(EQ,Z) l0077_0DD4
	// succ:  l0077_0D6B l0077_0DD4
l0077_0D6B:
	SCZO = cond(Mem0[ds:0x01C6:word16] - si)
	branch Test(EQ,Z) l0077_0DCE
	// succ:  l0077_0D71 l0077_0DCE
l0077_0D71:
	bx = Mem0[ds:0x4DEA:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	bx = Mem0[ds:0x4D8C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0614 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_0DCE
	// succ:  l0077_0D8B l0077_0DCE
l0077_0D8B:
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	di = Mem0[ds:0x4DEA:word16]
	si = si + Mem0[ds:di:word16]
	SCZO = cond(si)
	bx = Mem0[ds:si + 0x002B:word16]
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l0077_0DD4
	// succ:  l0077_0DA0 l0077_0DD4
l0077_0DA0:
	si = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0077_0DD4
	// succ:  l0077_0DA8 l0077_0DD4
l0077_0DA8:
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x0F)
	branch Test(EQ,Z) l0077_0DD4
	// succ:  l0077_0DAF l0077_0DD4
l0077_0DAF:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x0D)
	branch Test(NE,Z) l0077_0DCE
	// succ:  l0077_0DB5 l0077_0DCE
l0077_0DB5:
	bx = Mem0[ds:0x4D8C:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0004:word16] = bx
	SCZO = cond(Mem0[ds:bx:byte] - 0x12)
	branch Test(EQ,Z) l0077_0DCE
	// succ:  l0077_0DC3 l0077_0DCE
l0077_0DC3:
	SCZO = cond(Mem0[ds:bx:byte] - 0x10)
	branch Test(NE,Z) l0077_0DD4
	// succ:  l0077_0DC8 l0077_0DD4
l0077_0DC8:
	SCZO = cond(Mem0[ds:bx + 0x0001:byte] - 0x0D)
	branch Test(NE,Z) l0077_0DD4
	// succ:  l0077_0DCE l0077_0DD4
l0077_0DCE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EBC:word16]
	goto l0077_0DDE
	// succ:  l0077_0DDE
l0077_0DD4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CE4:word16]
	goto l0077_0DDE
	// succ:  l0077_0DDE
l0077_0DDA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D72:word16]
	// succ:  l0077_0DDE
l0077_0DDE:
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_0D26_exit
fn0077_0D26_exit:


// fn0077_0DF0
// Return size: 4
void fn0077_0DF0()
fn0077_0DF0_entry:
	// succ:  l0077_0DF0
l0077_0DF0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = 0x4B60
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x4CBC:word16] - 0x0000)
	branch Test(GT,SZO) l0077_0E11
	// succ:  l0077_0E0E l0077_0E11
l0077_0E0E:
	goto l0077_0EC5
	// succ:  l0077_0EC5
l0077_0E11:
	SZO = cond(Mem0[ds:si + 0x000B:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0077_0E1A
	// succ:  l0077_0E17 l0077_0E1A
l0077_0E17:
	goto l0077_0EA3
	// succ:  l0077_0EA3
l0077_0E1A:
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = Mem0[ss:bp - 0x0004:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_0E50
	// succ:  l0077_0E43 l0077_0E50
l0077_0E43:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	di = Mem0[ds:bx + 0x0002:word16]
	// succ:  l0077_0E50
l0077_0E50:
	Mem0[ds:si + 0x000F:word16] = di
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0077_0E66
	// succ:  l0077_0E57 l0077_0E66
l0077_0E57:
	bx = Mem0[ds:di:word16]
	SCZO = cond(Mem0[ds:bx + 0x0024:word16] - 0x0000)
	branch Test(EQ,Z) l0077_0E66
	// succ:  l0077_0E5F l0077_0E66
l0077_0E5F:
	Mem0[ds:si + 0x000D:word16] = 0x0000
	goto l0077_0E6B
	// succ:  l0077_0E6B
l0077_0E66:
	Mem0[ds:si + 0x000D:word16] = 0xFFFF
	// succ:  l0077_0E6B
l0077_0E6B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0xFFFF)
	branch Test(NE,Z) l0077_0E88
	// succ:  l0077_0E83 l0077_0E88
l0077_0E83:
	ax = 0x0296
	goto l0077_0E8B
	// succ:  l0077_0E8B
l0077_0E88:
	ax = 0x029C
	// succ:  l0077_0E8B
l0077_0E8B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowText(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0077_0EA3
	// succ:  l0077_0E96 l0077_0EA3
l0077_0E96:
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0xFFFF)
	branch Test(EQ,Z) l0077_0EA3
	// succ:  l0077_0E9D l0077_0EA3
l0077_0E9D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0137_1BD8 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0077_0EA3
l0077_0EA3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0077_0A04 (retsize: 2;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	call fn0077_1ACC (retsize: 2;)
	sp = sp + 0x0002
	si = si + 0x0011
	SCZO = cond(si)
	ax = Mem0[ds:0x4CBC:word16]
	v13 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v13
	SZO = cond(v13)
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - ax)
	branch Test(GE,SO) l0077_0EC5
	// succ:  l0077_0EC2 l0077_0EC5
l0077_0EC2:
	goto l0077_0E11
	// succ:  l0077_0E11
l0077_0EC5:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_0DF0_exit
fn0077_0DF0_exit:


// fn0077_0ED0
// Return size: 4
void fn0077_0ED0()
fn0077_0ED0_entry:
	// succ:  l0077_0ED0
l0077_0ED0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x00F8
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = 0xFFFF
	Mem0[ss:bp - 0x000A:word16] = 0x0000
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0030:word16] = ax
	Mem0[ss:bp - 0x0032:word16] = ax
	Mem0[ss:bp - 0x0020:word16] = ax
	Mem0[ss:bp - 0x0022:word16] = ax
	Mem0[ss:bp - 0x000E:word16] = 0x0001
	Mem0[ss:bp - 0x001C:word16] = ax
	Mem0[ss:bp - 0x001E:word16] = ax
	Mem0[ss:bp - 0x002E:word16] = ax
	ax = Mem0[ds:0x4D88:word16]
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - ax)
	branch Test(NE,Z) l0077_0F12
	// succ:  l0077_0F0C l0077_0F12
l0077_0F0C:
	ax = 0x0001
	goto l0077_0F14
	// succ:  l0077_0F14
l0077_0F12:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0077_0F14
l0077_0F14:
	Mem0[ss:bp - 0x0018:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_0F28
	// succ:  l0077_0F1B l0077_0F28
l0077_0F1B:
	Mem0[ss:bp - 0x0014:word16] = di
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	ax = Mem0[ds:0x4DEA:word16]
	goto l0077_0F46
	// succ:  l0077_0F46
l0077_0F28:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0014:word16] = ax
	cx = 0x0011
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	ax = ax + 0x4B60
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	bx = ax
	ax = Mem0[ds:bx + 0x000F:word16]
	// succ:  l0077_0F46
l0077_0F46:
	Mem0[ss:bp - 0x0012:word16] = ax
	Mem0[ds:0x0098:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x4136:word16] - 0x0000)
	branch Test(NE,Z) l0077_0F5E
	// succ:  l0077_0F56 l0077_0F5E
l0077_0F56:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0077_0F5E
l0077_0F5E:
	ReleaseCapture()
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D72:word16]
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x002C:word16] = ax
	Mem0[ss:bp - 0x002A:word16] = dx
	Mem0[ss:bp - 0x0028:word16] = ax
	Mem0[ss:bp - 0x0026:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = bp - 0x002C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = bp - 0x0028
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x002C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScreenToClient(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x002A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x002C:word16]
	sp = sp - 0x0002
	call fn0077_0B5E (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0016:word16] = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0077_0FB9
	// succ:  l0077_0FB6 l0077_0FB9
l0077_0FB6:
	goto l0077_103B
	// succ:  l0077_103B
l0077_0FB9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x002A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x002C:word16]
	sp = sp - 0x0002
	call fn0077_0C2E (retsize: 2;)
	sp = sp + 0x0004
	di = ax
	SCZO = cond(di - 0xFFFF)
	branch Test(EQ,Z) l0077_103B
	// succ:  l0077_0FCA l0077_103B
l0077_0FCA:
	si = di
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + di
	SCZO = cond(si)
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x002B + si:word16]
	Mem0[ss:bp - 0x00F4:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_103B
	// succ:  l0077_0FE3 l0077_103B
l0077_0FE3:
	Mem0[ss:bp - 0x000A:word16] = ax
	si = ax
	bx = Mem0[ds:si:word16]
	si = Mem0[ds:0x4D8C:word16]
	cx = Mem0[ds:si:word16]
	si = ax
	si = Mem0[ds:si:word16]
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0077_1038
	// succ:  l0077_0FFA l0077_1038
l0077_0FFA:
	ax = Mem0[ds:0x4D8C:word16]
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - ax)
	branch Test(EQ,Z) l0077_1038
	// succ:  l0077_1002 l0077_1038
l0077_1002:
	SCZO = cond(Mem0[ds:bx:byte] - 0x0F)
	branch Test(EQ,Z) l0077_1038
	// succ:  l0077_1007 l0077_1038
l0077_1007:
	SCZO = cond(Mem0[ds:bx + 0x0001:byte] - 0x0D)
	branch Test(NE,Z) l0077_101F
	// succ:  l0077_100D l0077_101F
l0077_100D:
	bx = cx
	SCZO = cond(Mem0[ds:bx:byte] - 0x12)
	branch Test(EQ,Z) l0077_101F
	// succ:  l0077_1014 l0077_101F
l0077_1014:
	SCZO = cond(Mem0[ds:bx:byte] - 0x10)
	branch Test(NE,Z) l0077_1038
	// succ:  l0077_1019 l0077_1038
l0077_1019:
	SCZO = cond(Mem0[ds:bx + 0x0001:byte] - 0x0D)
	branch Test(NE,Z) l0077_1038
	// succ:  l0077_101F l0077_1038
l0077_101F:
	Mem0[ss:bp - 0x001E:word16] = 0x0001
	SCZO = cond(di - 0x000E)
	branch Test(NE,Z) l0077_1030
	// succ:  l0077_1029 l0077_1030
l0077_1029:
	ax = 0x0001
	goto l0077_1032
	// succ:  l0077_1032
l0077_1030:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0077_1032
l0077_1032:
	Mem0[ss:bp - 0x002E:word16] = ax
	goto l0077_103B
	// succ:  l0077_103B
l0077_1038:
	di = 0xFFFF
	// succ:  l0077_103B
l0077_103B:
	SCZO = cond(Mem0[ss:bp - 0x0016:word16] - 0xFFFF)
	branch Test(NE,Z) l0077_1046
	// succ:  l0077_1041 l0077_1046
l0077_1041:
	SCZO = cond(di - 0xFFFF)
	branch Test(EQ,Z) l0077_1077
	// succ:  l0077_1046 l0077_1077
l0077_1046:
	SCZO = cond(di - 0xFFFF)
	branch Test(EQ,Z) l0077_10AC
	// succ:  l0077_104B l0077_10AC
l0077_104B:
	ax = Mem0[ds:0x4D88:word16]
	Mem0[ss:bp - 0x001A:word16] = ax
	SCZO = cond(Mem0[ss:bp - 0x001E:word16] - 0x0000)
	branch Test(NE,Z) l0077_1090
	// succ:  l0077_1057 l0077_1090
l0077_1057:
	ax = Mem0[ds:0x4DEA:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = di
	bx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	bx = Mem0[ds:0x4D8C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0614 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_1095
	// succ:  l0077_1077 l0077_1095
l0077_1077:
	Mem0[ds:0x4D8C:word16] = 0x0000
	ax = 0xFFFF
	Mem0[ds:0x01C6:word16] = ax
	Mem0[ds:0x01C8:word16] = ax
	Mem0[ds:0x4EBC:word16] = 0x0000
	goto l0077_193F
	// succ:  l0077_193F
l0077_1090:
	Mem0[ss:bp - 0x0008:word16] = 0xFFFF
	// succ:  l0077_1095
l0077_1095:
	di = di - di
	SCZO = cond(di)
	SCZO = cond(Mem0[ss:bp - 0x0018:word16] - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x0032
	SZO = cond(ax)
	C = false
	ax = ax + 0x0032
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0024:word16] = ax
	si = Mem0[ss:bp - 0x000A:word16]
	goto l0077_114A
	// succ:  l0077_114A
l0077_10AC:
	ax = 0x0011
	dx_ax = Mem0[ss:bp - 0x0016:word16] *s ax
	SCZO = cond(dx_ax)
	di = ax
	di = di + 0x4B60
	SCZO = cond(di)
	ax = Mem0[ds:di:word16]
	Mem0[ss:bp - 0x001A:word16] = ax
	si = Mem0[ds:di + 0x000F:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0077_10EA
	// succ:  l0077_10C4 l0077_10EA
l0077_10C4:
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0x0002)
	branch Test(EQ,Z) l0077_10EA
	// succ:  l0077_10CB l0077_10EA
l0077_10CB:
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0x0003)
	branch Test(EQ,Z) l0077_10EA
	// succ:  l0077_10D2 l0077_10EA
l0077_10D2:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0087_07D0 (retsize: 4;)
	sp = sp + 0x0004
	si = ax
	Mem0[ds:di + 0x000F:word16] = si
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0077_1077
	// succ:  l0077_10EA l0077_1077
l0077_10EA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = bp - 0x0028
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScreenToClient(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0028:word16]
	sp = sp - 0x0002
	call fn0077_0BB4 (retsize: 2;)
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = Mem0[ss:bp - 0x0016:word16]
	SCZO = cond(Mem0[ss:bp - 0x0014:word16] - ax)
	branch Test(NE,Z) l0077_111B
	// succ:  l0077_110F l0077_111B
l0077_110F:
	ax = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(Mem0[ds:0x01C8:word16] - ax)
	branch Test(NE,Z) l0077_111B
	// succ:  l0077_1118 l0077_111B
l0077_1118:
	goto l0077_1077
	// succ:  l0077_1077
l0077_111B:
	bx = Mem0[ds:si:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x40)
	C = false
	branch Test(NE,Z) l0077_1128
	// succ:  l0077_1123 l0077_1128
l0077_1123:
	Mem0[ss:bp - 0x0008:word16] = 0xFFFF
	// succ:  l0077_1128
l0077_1128:
	bx = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x10)
	branch Test(NE,Z) l0077_1145
	// succ:  l0077_112F l0077_1145
l0077_112F:
	SCZO = cond(Mem0[ds:bx + 0x0001:byte] - 0x0D)
	branch Test(NE,Z) l0077_1145
	// succ:  l0077_1135 l0077_1145
l0077_1135:
	bx = Mem0[ds:0x4D8C:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x12)
	branch Test(NE,Z) l0077_1145
	// succ:  l0077_1140 l0077_1145
l0077_1140:
	Mem0[ss:bp - 0x002E:word16] = 0x0001
	// succ:  l0077_1145
l0077_1145:
	Mem0[ss:bp - 0x0024:word16] = 0x0064
	// succ:  l0077_114A
l0077_114A:
	Mem0[ss:bp - 0x0004:word16] = di
	SCZO = cond(Mem0[ss:bp - 0x0018:word16] - 0x0000)
	branch Test(EQ,Z) l0077_118C
	// succ:  l0077_1153 l0077_118C
l0077_1153:
	bx = Mem0[ds:0x4D8C:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx + 0x0009:byte]
	al = al & 0x06
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x04)
	branch Test(NE,Z) l0077_118C
	// succ:  l0077_1162 l0077_118C
l0077_1162:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D8C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x01C6:word16]
	call fn0137_14DE (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_118C
	// succ:  l0077_1173 l0077_118C
l0077_1173:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = 0x028D
	// succ:  l0077_117A
l0077_117A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x015B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0010
	// succ:  l0077_1182
l0077_1182:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D72 (retsize: 4;)
	sp = sp + 0x0008
	goto l0077_1077
	// succ:  l0077_1077
l0077_118C:
	bx = Mem0[ds:0x4D8C:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0077_11B2
	// succ:  l0077_1198 l0077_11B2
l0077_1198:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0077_11B2
	// succ:  l0077_119C l0077_11B2
l0077_119C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D8C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0077_0CEA (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_11B2
	// succ:  l0077_11A9 l0077_11B2
l0077_11A9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = 0x02E4
	goto l0077_117A
	// succ:  l0077_117A
l0077_11B2:
	Mem0[ss:bp - 0x000A:word16] = si
	bx = Mem0[ds:0x4D8C:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x08)
	C = false
	branch Test(NE,Z) l0077_11C4
	// succ:  l0077_11C1 l0077_11C4
l0077_11C1:
	goto l0077_1246
	// succ:  l0077_1246
l0077_11C4:
	ax = 0x23B0
	dx = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp - 0x000E:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0077_1236
	// succ:  l0077_11DE l0077_1236
l0077_11DE:
	ax = Mem0[ds:0x4D8C:word16]
	Mem0[ds:0x3D66:word16] = ax
	bx = Mem0[ss:bp - 0x0012:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x10)
	branch Test(NE,Z) l0077_1204
	// succ:  l0077_11EE l0077_1204
l0077_11EE:
	bx = Mem0[ss:bp - 0x0012:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx + 0x0001:byte] - 0x0D)
	branch Test(NE,Z) l0077_1204
	// succ:  l0077_11F9 l0077_1204
l0077_11F9:
	Mem0[ds:0x3D68:word16] = 0x0001
	goto l0077_120A
	// succ:  l0077_120A
l0077_1204:
	Mem0[ds:0x3D68:word16] = 0x0000
	// succ:  l0077_120A
l0077_120A:
	ax = Mem0[ss:bp - 0x0012:word16]
	Mem0[ds:0x3D6A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0137
	dx_ax = (word32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetActiveWindow()
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = ax
	DialogBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	Mem0[ds:0x4D8C:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	FreeProcInstance(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	// succ:  l0077_1236
l0077_1236:
	SCZO = cond(Mem0[ds:0x4D8C:word16] - 0x0000)
	branch Test(NE,Z) l0077_1240
	// succ:  l0077_123D l0077_1240
l0077_123D:
	goto l0077_1077
	// succ:  l0077_1077
l0077_1240:
	ax = Mem0[ds:0x3D68:word16]
	Mem0[ss:bp - 0x000E:word16] = ax
	// succ:  l0077_1246
l0077_1246:
	ax = Mem0[ss:bp - 0x0016:word16]
	SCZO = cond(Mem0[ss:bp - 0x0014:word16] - ax)
	branch Test(NE,Z) l0077_1251
	// succ:  l0077_124E l0077_1251
l0077_124E:
	goto l0077_13FC
	// succ:  l0077_13FC
l0077_1251:
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0x0002)
	branch Test(EQ,Z) l0077_125B
	// succ:  l0077_1258 l0077_125B
l0077_1258:
	goto l0077_134A
	// succ:  l0077_134A
l0077_125B:
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(NE,Z) l0077_1264
	// succ:  l0077_1261 l0077_1264
l0077_1261:
	goto l0077_134A
	// succ:  l0077_134A
l0077_1264:
	bx = Mem0[ss:bp - 0x0004:word16]
	SZO = cond(Mem0[ds:bx + 0x000B:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0077_1270
	// succ:  l0077_126D l0077_1270
l0077_126D:
	goto l0077_134A
	// succ:  l0077_134A
l0077_1270:
	bx = Mem0[ds:0x4D8C:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:bx + 0x0001:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_0250 (retsize: 4;)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	ax = 0x024F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0072
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	ax = bp - 0x00F2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0038
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x026D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	cx = 0x0250
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x00F2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0072
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0024
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	SCZO = cond(ax - 0x0007)
	branch Test(NE,Z) l0077_12D6
	// succ:  l0077_12D3 l0077_12D6
l0077_12D3:
	goto l0077_1077
	// succ:  l0077_1077
l0077_12D6:
	call fn00F7_16B6 (retsize: 4;)
	si = ax
	di = dx
	call fn00F7_16E4 (retsize: 4;)
	si = si + ax
	SCZO = cond(si)
	di = di + dx + C
	SCZO = cond(di)
	SCZO = cond(di - Mem0[ss:bp - 0x0004:word16])
	branch Test(UGT,CZ) l0077_131E
	// succ:  l0077_12ED l0077_131E
l0077_12ED:
	branch Test(ULT,C) l0077_12F4
	// succ:  l0077_12EF l0077_12F4
l0077_12EF:
	SCZO = cond(si - Mem0[ss:bp - 0x0006:word16])
	branch Test(UGE,C) l0077_131E
	// succ:  l0077_12F4 l0077_131E
l0077_12F4:
	ax = 0x0257
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00F2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x00F2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0072
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0030
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	goto l0077_1077
	// succ:  l0077_1077
l0077_131E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00F7_176A (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	call fn0077_1B86 (retsize: 2;)
	bx = Mem0[ds:0x4D8C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	call fn0087_04C4 (retsize: 4;)
	call fn0087_08FA (retsize: 4;)
	goto l0077_1077
	// succ:  l0077_1077
l0077_134A:
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0xFFFF)
	branch Test(NE,Z) l0077_1354
	// succ:  l0077_1351 l0077_1354
l0077_1351:
	goto l0077_13FC
	// succ:  l0077_13FC
l0077_1354:
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(NE,Z) l0077_135D
	// succ:  l0077_135A l0077_135D
l0077_135A:
	goto l0077_144E
	// succ:  l0077_144E
l0077_135D:
	bx = Mem0[ss:bp - 0x000C:word16]
	SZO = cond(Mem0[ds:bx + 0x000B:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0077_1369
	// succ:  l0077_1366 l0077_1369
l0077_1366:
	goto l0077_144E
	// succ:  l0077_144E
l0077_1369:
	bx = Mem0[ds:0x4D8C:word16]
	bx = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0002:word16]
	call fn0177_1A74 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	ax = 0x026F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0072
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	ax = bp - 0x00F2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0038
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x026D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	cx = 0x0272
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x00F2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0072
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0024
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	SCZO = cond(ax - 0x0007)
	branch Test(NE,Z) l0077_13CC
	// succ:  l0077_13C9 l0077_13CC
l0077_13C9:
	goto l0077_1077
	// succ:  l0077_1077
l0077_13CC:
	call fn00F7_16B6 (retsize: 4;)
	si = ax
	di = dx
	call fn00F7_16E4 (retsize: 4;)
	si = si + ax
	SCZO = cond(si)
	di = di + dx + C
	SCZO = cond(di)
	SCZO = cond(di - Mem0[ss:bp - 0x0004:word16])
	branch Test(UGT,CZ) l0077_13F0
	// succ:  l0077_13E3 l0077_13F0
l0077_13E3:
	branch Test(UGE,C) l0077_13E8
	// succ:  l0077_13E5 l0077_13E8
l0077_13E5:
	goto l0077_12F4
	// succ:  l0077_12F4
l0077_13E8:
	SCZO = cond(si - Mem0[ss:bp - 0x0006:word16])
	branch Test(UGE,C) l0077_13F0
	// succ:  l0077_13ED l0077_13F0
l0077_13ED:
	goto l0077_12F4
	// succ:  l0077_12F4
l0077_13F0:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ss:bp - 0x0032:word16] = ax
	Mem0[ss:bp - 0x0030:word16] = dx
	// succ:  l0077_13FC
l0077_13FC:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(EQ,Z) l0077_1412
	// succ:  l0077_1402 l0077_1412
l0077_1402:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D8C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x01C6:word16]
	call fn0137_06D4 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l0077_1412
l0077_1412:
	SCZO = cond(Mem0[ss:bp - 0x002E:word16] - 0x0000)
	branch Test(NE,Z) l0077_141B
	// succ:  l0077_1418 l0077_141B
l0077_1418:
	goto l0077_167A
	// succ:  l0077_167A
l0077_141B:
	bx = Mem0[ds:0x4D8C:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x12)
	branch Test(EQ,Z) l0077_1429
	// succ:  l0077_1426 l0077_1429
l0077_1426:
	goto l0077_166C
	// succ:  l0077_166C
l0077_1429:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D8C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn0137_179A (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_143C
	// succ:  l0077_1439 l0077_143C
l0077_1439:
	goto l0077_16A4
	// succ:  l0077_16A4
l0077_143C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D8C:word16]
	call fn0137_0066 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:0x4D8C:word16] = 0x0000
	goto l0077_179F
	// succ:  l0077_179F
l0077_144E:
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(EQ,Z) l0077_13FC
	// succ:  l0077_1454 l0077_13FC
l0077_1454:
	bx = Mem0[ss:bp - 0x0004:word16]
	SZO = cond(Mem0[ds:bx + 0x000B:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0077_13FC
	// succ:  l0077_145D l0077_13FC
l0077_145D:
	bx = Mem0[ds:0x4D8C:word16]
	si = Mem0[ds:bx:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:bx + 0x0001:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_0B2E (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_148A
	// succ:  l0077_1477 l0077_148A
l0077_1477:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = 0x0271
	// succ:  l0077_147E
l0077_147E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0270
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0030
	goto l0077_1182
	// succ:  l0077_1182
l0077_148A:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0077_14A6
	// succ:  l0077_1490 l0077_14A6
l0077_1490:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D8C:word16]
	call fn0137_1D74 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_14A6
	// succ:  l0077_149D l0077_14A6
l0077_149D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = 0x0371
	goto l0077_147E
	// succ:  l0077_147E
l0077_14A6:
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0x0003)
	branch Test(EQ,Z) l0077_1500
	// succ:  l0077_14AD l0077_1500
l0077_14AD:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0077_14E4
	// succ:  l0077_14B3 l0077_14E4
l0077_14B3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_14E4
	// succ:  l0077_14C0 l0077_14E4
l0077_14C0:
	bx = Mem0[ds:0x05AE:word16]
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x052A:byte]
	al = al & 0x07
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x04)
	branch Test(ULT,C) l0077_1500
	// succ:  l0077_14DA l0077_1500
l0077_14DA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = 0x03F2
	goto l0077_147E
	// succ:  l0077_147E
l0077_14E4:
	ax = Mem0[ds:si + 0x0004:word16]
	ax = ax | Mem0[ds:si + 0x0002:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_14F5
	// succ:  l0077_14EC l0077_14F5
l0077_14EC:
	al = Mem0[ds:si + 0x0009:byte]
	al = al & 0x06
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x04)
	branch Test(NE,Z) l0077_1500
	// succ:  l0077_14F5 l0077_1500
l0077_14F5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = 0x0277
	goto l0077_147E
	// succ:  l0077_147E
l0077_1500:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0147_2A9C (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	ax = 0x0270
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0072
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	ax = bp - 0x00F2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0038
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x026E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	cx = 0x0272
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x00F2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0072
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0024
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	SCZO = cond(ax - 0x0007)
	branch Test(NE,Z) l0077_1558
	// succ:  l0077_1555 l0077_1558
l0077_1555:
	goto l0077_1077
	// succ:  l0077_1077
l0077_1558:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ss:bp - 0x0022:word16] = ax
	Mem0[ss:bp - 0x0020:word16] = dx
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0077_15CD
	// succ:  l0077_156A l0077_15CD
l0077_156A:
	SCZO = cond(Mem0[ds:si:byte] - 0x02)
	branch Test(EQ,Z) l0077_158A
	// succ:  l0077_156F l0077_158A
l0077_156F:
	SCZO = cond(Mem0[ds:si:byte] - 0x01)
	branch Test(EQ,Z) l0077_158A
	// succ:  l0077_1574 l0077_158A
l0077_1574:
	SCZO = cond(Mem0[ds:si:byte] - 0x03)
	branch Test(NE,Z) l0077_157F
	// succ:  l0077_1579 l0077_157F
l0077_1579:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x00)
	branch Test(EQ,Z) l0077_158A
	// succ:  l0077_157F l0077_158A
l0077_157F:
	SCZO = cond(Mem0[ds:si:byte] - 0x04)
	branch Test(NE,Z) l0077_1597
	// succ:  l0077_1584 l0077_1597
l0077_1584:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x00)
	branch Test(NE,Z) l0077_1597
	// succ:  l0077_158A l0077_1597
l0077_158A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_15CD
	// succ:  l0077_1597 l0077_15CD
l0077_1597:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D8C:word16]
	ax = bp - 0x00F2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x00F2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0072
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	// succ:  l0077_15CD
l0077_15CD:
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0x0003)
	branch Test(EQ,Z) l0077_15EB
	// succ:  l0077_15D4 l0077_15EB
l0077_15D4:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x00)
	branch Test(EQ,Z) l0077_15EB
	// succ:  l0077_15DA l0077_15EB
l0077_15DA:
	al = Mem0[ds:si + 0x0009:byte]
	al = al & 0x06
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x04)
	branch Test(EQ,Z) l0077_15EB
	// succ:  l0077_15E3 l0077_15EB
l0077_15E3:
	ax = Mem0[ds:si + 0x0004:word16]
	ax = ax | Mem0[ds:si + 0x0002:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_1618
	// succ:  l0077_15EB l0077_1618
l0077_15EB:
	Mem0[ss:bp - 0x001C:word16] = 0x0001
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0x0003)
	branch Test(EQ,Z) l0077_1618
	// succ:  l0077_15F7 l0077_1618
l0077_15F7:
	bx = Mem0[ds:0x05AE:word16]
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x052A:word16]
	cx = ax
	al = al + 0x01
	SZO = cond(al)
	al = al ^ cl
	SZO = cond(al)
	C = false
	ax = ax & 0x0007
	SZO = cond(ax)
	C = false
	v23 = Mem0[ds:bx + 0x052A:word16] ^ ax
	Mem0[ds:bx + 0x052A:word16] = v23
	SZO = cond(Mem0[ds:bx + 0x052A:word16])
	C = false
	// succ:  l0077_1618
l0077_1618:
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0x0003)
	branch Test(EQ,Z) l0077_1657
	// succ:  l0077_161F l0077_1657
l0077_161F:
	SZO = cond(Mem0[ds:si + 0x0008:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l0077_1657
	// succ:  l0077_1625 l0077_1657
l0077_1625:
	ax = Mem0[ds:si + 0x000E:word16]
	al = al & 0xFC
	SZO = cond(al)
	C = false
	SCZO = cond(ax - 0x0014)
	branch Test(UGE,C) l0077_1657
	// succ:  l0077_162F l0077_1657
l0077_162F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:si:byte] - 0x03)
	branch Test(NE,Z) l0077_163A
	// succ:  l0077_1635 l0077_163A
l0077_1635:
	ax = 0x0008
	goto l0077_163D
	// succ:  l0077_163D
l0077_163A:
	ax = 0x0003
	// succ:  l0077_163D
l0077_163D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax + 0x0001
	SZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0147_2C6A (retsize: 4;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_1657
	// succ:  l0077_1652 l0077_1657
l0077_1652:
	Mem0[ss:bp - 0x001C:word16] = 0x0001
	// succ:  l0077_1657
l0077_1657:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x80)
	C = false
	branch Test(NE,Z) l0077_1660
	// succ:  l0077_165D l0077_1660
l0077_165D:
	goto l0077_13FC
	// succ:  l0077_13FC
l0077_1660:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D8C:word16]
	call fn0087_09DC (retsize: 4;)
	sp = sp + 0x0002
	goto l0077_13FC
	// succ:  l0077_13FC
l0077_166C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D8C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn0137_1834 (retsize: 4;)
	sp = sp + 0x0004
	goto l0077_16A4
	// succ:  l0077_16A4
l0077_167A:
	SCZO = cond(Mem0[ss:bp - 0x001C:word16] - 0x0000)
	branch Test(NE,Z) l0077_16D8
	// succ:  l0077_1680 l0077_16D8
l0077_1680:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D8C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(Mem0[ss:bp - 0x0012:word16] - ax)
	branch Test(EQ,Z) l0077_1698
	// succ:  l0077_1692 l0077_1698
l0077_1692:
	ax = 0x0001
	goto l0077_169A
	// succ:  l0077_169A
l0077_1698:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0077_169A
l0077_169A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0077_16D8
	// succ:  l0077_16A4 l0077_16D8
l0077_16A4:
	SCZO = cond(Mem0[ss:bp - 0x0018:word16] - 0x0000)
	branch Test(EQ,Z) l0077_16B0
	// succ:  l0077_16AA l0077_16B0
l0077_16AA:
	di = Mem0[ds:0x01C6:word16]
	goto l0077_16C5
	// succ:  l0077_16C5
l0077_16B0:
	bx = Mem0[ss:bp - 0x0012:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l0077_16C2
	// succ:  l0077_16BB l0077_16C2
l0077_16BB:
	di = Mem0[ds:0x01C8:word16]
	goto l0077_16C5
	// succ:  l0077_16C5
l0077_16C2:
	di = 0xFFFF
	// succ:  l0077_16C5
l0077_16C5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D8C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	goto l0077_179F
	// succ:  l0077_179F
l0077_16D8:
	ax = Mem0[ss:bp - 0x0030:word16]
	ax = ax | Mem0[ss:bp - 0x0032:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_16FA
	// succ:  l0077_16E0 l0077_16FA
l0077_16E0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0030:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0032:word16]
	call fn00F7_176A (retsize: 4;)
	sp = sp + 0x0004
	bx = Mem0[ds:0x4D8C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0077_16FA
l0077_16FA:
	ax = Mem0[ss:bp - 0x0020:word16]
	ax = ax | Mem0[ss:bp - 0x0022:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_170D
	// succ:  l0077_1702 l0077_170D
l0077_1702:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0020:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0022:word16]
	call fn00F7_19E0 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0077_170D
l0077_170D:
	SCZO = cond(Mem0[ss:bp - 0x0018:word16] - 0x0000)
	branch Test(NE,Z) l0077_1777
	// succ:  l0077_1713 l0077_1777
l0077_1713:
	bx = Mem0[ss:bp - 0x000C:word16]
	SZO = cond(Mem0[ds:bx + 0x000B:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0077_1777
	// succ:  l0077_171C l0077_1777
l0077_171C:
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0xFFFF)
	branch Test(NE,Z) l0077_1777
	// succ:  l0077_1723 l0077_1777
l0077_1723:
	bx = Mem0[ss:bp - 0x0012:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx + 0x0024:word16] - 0x0000)
	branch Test(NE,Z) l0077_1777
	// succ:  l0077_172E l0077_1777
l0077_172E:
	cl = 0x06
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	di = di << cl
	SCZO = cond(di)
	al = Mem0[ds:0x4D1D:byte]
	di = di + ax
	SCZO = cond(di)
	ax = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	di = di + 0x0CE2
	SCZO = cond(di)
	al = Mem0[ds:di + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	call fn0177_1A2A (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_1777
	// succ:  l0077_1763 l0077_1777
l0077_1763:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0177_0196 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:di + 0x0002:byte] = 0x00
	bx = Mem0[ss:bp - 0x000C:word16]
	Mem0[ds:bx + 0x000F:word16] = 0x0000
	// succ:  l0077_1777
l0077_1777:
	SCZO = cond(Mem0[ss:bp - 0x0018:word16] - 0x0000)
	branch Test(EQ,Z) l0077_178A
	// succ:  l0077_177D l0077_178A
l0077_177D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D8C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x01C6:word16]
	call fn0137_1422 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0077_178A
l0077_178A:
	ax = Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(Mem0[ds:0x4DEA:word16] - ax)
	branch Test(NE,Z) l0077_179F
	// succ:  l0077_1793 l0077_179F
l0077_1793:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D8C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	call fn0137_134C (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0077_179F
l0077_179F:
	call fn0087_04C4 (retsize: 4;)
	bx = Mem0[ds:0x4D8C:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x10)
	branch Test(NE,Z) l0077_17DF
	// succ:  l0077_17AF l0077_17DF
l0077_17AF:
	bx = Mem0[ds:0x4D8C:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx + 0x0001:byte] - 0x0D)
	branch Test(NE,Z) l0077_17DF
	// succ:  l0077_17BB l0077_17DF
l0077_17BB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D8C:word16]
	sp = sp - 0x0002
	call fn0077_0CAC (retsize: 2;)
	sp = sp + 0x0002
	di = ax
	SCZO = cond(di - 0xFFFF)
	branch Test(EQ,Z) l0077_17DF
	// succ:  l0077_17CA l0077_17DF
l0077_17CA:
	cx = 0x0011
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	bx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4B60:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l0077_17DF
l0077_17DF:
	SCZO = cond(Mem0[ss:bp - 0x001E:word16] - 0x0000)
	branch Test(EQ,Z) l0077_180A
	// succ:  l0077_17E5 l0077_180A
l0077_17E5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	call fn0077_0CAC (retsize: 2;)
	sp = sp + 0x0002
	di = ax
	SCZO = cond(di - 0xFFFF)
	branch Test(EQ,Z) l0077_1866
	// succ:  l0077_17F3 l0077_1866
l0077_17F3:
	cx = 0x0011
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	bx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4B60:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	goto l0077_1866
	// succ:  l0077_1866
l0077_180A:
	ax = Mem0[ss:bp - 0x001A:word16]
	SCZO = cond(Mem0[ds:0x4D88:word16] - ax)
	branch Test(NE,Z) l0077_182A
	// succ:  l0077_1813 l0077_182A
l0077_1813:
	di = Mem0[ss:bp - 0x0008:word16]
	Mem0[ds:0x4156:word16] = di
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0077_087A (retsize: 2;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn0077_0C76 (retsize: 2;)
	sp = sp + 0x0002
	goto l0077_1866
	// succ:  l0077_1866
l0077_182A:
	di = Mem0[ss:bp - 0x0016:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn0077_087A (retsize: 2;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0077_0A04 (retsize: 2;)
	sp = sp + 0x0004
	ax = di
	cx = 0x0011
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	bx = ax
	bx = bx + 0x4B6D
	SCZO = cond(bx)
	Mem0[ss:bp - 0x00F6:word16] = bx
	SCZO = cond(Mem0[ds:bx:word16] - 0xFFFF)
	branch Test(NE,Z) l0077_1866
	// succ:  l0077_1862 l0077_1866
l0077_1862:
	Mem0[ds:bx:word16] = 0x0000
	// succ:  l0077_1866
l0077_1866:
	SCZO = cond(Mem0[ss:bp - 0x0018:word16] - 0x0000)
	branch Test(EQ,Z) l0077_1876
	// succ:  l0077_186C l0077_1876
l0077_186C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x01C6:word16]
	sp = sp - 0x0002
	call fn0077_0C76 (retsize: 2;)
	sp = sp + 0x0002
	goto l0077_18E0
	// succ:  l0077_18E0
l0077_1876:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0077_0A04 (retsize: 2;)
	sp = sp + 0x0004
	bx = Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(Mem0[ds:bx + 0x000F:word16] - 0x0000)
	branch Test(EQ,Z) l0077_18C8
	// succ:  l0077_1899 l0077_18C8
l0077_1899:
	si = Mem0[ss:bp - 0x0012:word16]
	bx = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:bx + 0x0024:word16] - 0x0000)
	branch Test(EQ,Z) l0077_18C8
	// succ:  l0077_18A4 l0077_18C8
l0077_18A4:
	bx = Mem0[ss:bp - 0x0014:word16]
	ax = bx
	cx = 0x0011
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	di = ax
	di = di + 0x4B6D
	SCZO = cond(di)
	Mem0[ss:bp - 0x00F8:word16] = di
	si = Mem0[ds:si:word16]
	ax = Mem0[ds:si + 0x0024:word16]
	SCZO = cond(Mem0[ds:di:word16] - ax)
	branch Test(LT,SO) l0077_18DA
	// succ:  l0077_18C1 l0077_18DA
l0077_18C1:
	si = di
	v21 = Mem0[ds:si:word16] - 0x0001
	Mem0[ds:si:word16] = v21
	SZO = cond(v21)
	goto l0077_18DA
	// succ:  l0077_18DA
l0077_18C8:
	bx = Mem0[ss:bp - 0x0014:word16]
	ax = bx
	cx = 0x0011
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	bx = ax
	Mem0[ds:bx + 0x4B6D:word16] = 0xFFFF
	// succ:  l0077_18DA
l0077_18DA:
	Mem0[ds:0x01C8:word16] = 0xFFFF
	// succ:  l0077_18E0
l0077_18E0:
	sp = sp - 0x0002
	call fn0077_1B56 (retsize: 2;)
	SCZO = cond(Mem0[ds:0x4D8C:word16] - 0x0000)
	branch Test(EQ,Z) l0077_1900
	// succ:  l0077_18EB l0077_1900
l0077_18EB:
	SCZO = cond(Mem0[ss:bp - 0x001C:word16] - 0x0000)
	branch Test(EQ,Z) l0077_18FA
	// succ:  l0077_18F1 l0077_18FA
l0077_18F1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D8C:word16]
	call fn0137_0066 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0077_18FA
l0077_18FA:
	Mem0[ds:0x4D8C:word16] = 0x0000
	// succ:  l0077_1900
l0077_1900:
	Mem0[ds:0x4EBC:word16] = 0x0000
	Mem0[ds:0x01C6:word16] = 0xFFFF
	ax = Mem0[ss:bp - 0x0024:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_10B8 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0BB0 (retsize: 4;)
	sp = sp + 0x0004
	call fn00AF_1000 (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0077_193F
	// succ:  l0077_192A l0077_193F
l0077_192A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = 0x03F8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x015B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0030
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D72 (retsize: 4;)
	sp = sp + 0x0008
	// succ:  l0077_193F
l0077_193F:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_0ED0_exit
fn0077_0ED0_exit:


// fn0077_194C
// Return size: 4
void fn0077_194C()
fn0077_194C_entry:
	// succ:  l0077_194C
l0077_194C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	Mem0[ds:0x0098:word16] = 0x0000
	ReleaseCapture()
	Mem0[ds:0x4D8C:word16] = 0x0000
	Mem0[ds:0x4EBC:word16] = 0x0000
	Mem0[ds:0x01C6:word16] = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D72:word16]
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(Mem0[ds:0x4136:word16] - 0x0000)
	branch Test(NE,Z) l0077_198E
	// succ:  l0077_1986 l0077_198E
l0077_1986:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0077_198E
l0077_198E:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_194C_exit
fn0077_194C_exit:


// fn0077_1996
// Return size: 4
void fn0077_1996()
fn0077_1996_entry:
	// succ:  l0077_1996
l0077_1996:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax - 0x0021
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0007)
	branch Test(UGT,CZ) l0077_1A21
	// succ:  l0077_19AE l0077_1A21
l0077_19AE:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v10 = ax
	ax = bx
	bx = v10
	switch (ax) { l0077_19C6 l0077_19D0 l0077_19DC l0077_19E6 l0077_19F0 l0077_19FC l0077_1A0A l0077_1A16 }
	// succ:  l0077_19C6 l0077_19D0 l0077_19DC l0077_19E6 l0077_19F0 l0077_19FC l0077_1A0A l0077_1A16
l0077_19C6:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx + 0x0002:word16] = 0x0000
	goto l0077_1A21
	// succ:  l0077_1A21
l0077_19D0:
	ax = Mem0[ds:0x4126:word16]
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx + 0x0002:word16] = ax
	goto l0077_1A21
	// succ:  l0077_1A21
l0077_19DC:
	ax = Mem0[ds:0x4124:word16]
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = ax
	goto l0077_1A21
	// succ:  l0077_1A21
l0077_19E6:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0000
	goto l0077_1A21
	// succ:  l0077_1A21
l0077_19F0:
	ax = Mem0[ds:0x01D0:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	bx = Mem0[ss:bp + 0x0006:word16]
	v15 = Mem0[ds:bx:word16] - ax
	Mem0[ds:bx:word16] = v15
	SCZO = cond(v15)
	goto l0077_1A21
	// succ:  l0077_1A21
l0077_19FC:
	ax = Mem0[ds:0x01D0:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	bx = Mem0[ss:bp + 0x0006:word16]
	v12 = Mem0[ds:bx + 0x0002:word16] - ax
	Mem0[ds:bx + 0x0002:word16] = v12
	SCZO = cond(v12)
	goto l0077_1A21
	// succ:  l0077_1A21
l0077_1A0A:
	ax = Mem0[ds:0x01D0:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	bx = Mem0[ss:bp + 0x0006:word16]
	v14 = Mem0[ds:bx:word16] + ax
	Mem0[ds:bx:word16] = v14
	SCZO = cond(v14)
	goto l0077_1A21
	// succ:  l0077_1A21
l0077_1A16:
	ax = Mem0[ds:0x01D0:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	bx = Mem0[ss:bp + 0x0006:word16]
	v13 = Mem0[ds:bx + 0x0002:word16] + ax
	Mem0[ds:bx + 0x0002:word16] = v13
	SCZO = cond(v13)
	// succ:  l0077_1A21
l0077_1A21:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_1996_exit
fn0077_1996_exit:


// fn0077_1A2C
// Return size: 4
void fn0077_1A2C()
fn0077_1A2C_entry:
	// succ:  l0077_1A2C
l0077_1A2C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(ax - 0x006C)
	branch Test(EQ,Z) l0077_1AB8
	// succ:  l0077_1A41 l0077_1AB8
l0077_1A41:
	branch Test(UGT,CZ) l0077_1AC2
	// succ:  l0077_1A43 l0077_1AC2
l0077_1A43:
	SCZO = cond(al - 0x68)
	branch Test(EQ,Z) l0077_1A90
	// succ:  l0077_1A47 l0077_1A90
l0077_1A47:
	branch Test(UGT,CZ) l0077_1A5C
	// succ:  l0077_1A49 l0077_1A5C
l0077_1A49:
	al = al - 0x48
	SCZO = cond(al)
	branch Test(EQ,Z) l0077_1A66
	// succ:  l0077_1A4D l0077_1A66
l0077_1A4D:
	al = al - 0x02
	SCZO = cond(al)
	branch Test(EQ,Z) l0077_1A70
	// succ:  l0077_1A51 l0077_1A70
l0077_1A51:
	al = al - 0x01
	SZO = cond(al)
	branch Test(EQ,Z) l0077_1A7C
	// succ:  l0077_1A55 l0077_1A7C
l0077_1A55:
	al = al - 0x01
	SZO = cond(al)
	branch Test(EQ,Z) l0077_1A86
	// succ:  l0077_1A59 l0077_1A86
l0077_1A59:
	goto l0077_1AC2
	// succ:  l0077_1AC2
l0077_1A5C:
	al = al - 0x6A
	SCZO = cond(al)
	branch Test(EQ,Z) l0077_1A9C
	// succ:  l0077_1A60 l0077_1A9C
l0077_1A60:
	al = al - 0x01
	SZO = cond(al)
	branch Test(EQ,Z) l0077_1AAA
	// succ:  l0077_1A64 l0077_1AAA
l0077_1A64:
	goto l0077_1AC2
	// succ:  l0077_1AC2
l0077_1A66:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0000
	goto l0077_1AC2
	// succ:  l0077_1AC2
l0077_1A70:
	ax = Mem0[ds:0x4126:word16]
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx + 0x0002:word16] = ax
	goto l0077_1AC2
	// succ:  l0077_1AC2
l0077_1A7C:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx + 0x0002:word16] = 0x0000
	goto l0077_1AC2
	// succ:  l0077_1AC2
l0077_1A86:
	ax = Mem0[ds:0x4124:word16]
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = ax
	goto l0077_1AC2
	// succ:  l0077_1AC2
l0077_1A90:
	ax = Mem0[ds:0x01D0:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	bx = Mem0[ss:bp + 0x0006:word16]
	v14 = Mem0[ds:bx:word16] - ax
	Mem0[ds:bx:word16] = v14
	SCZO = cond(v14)
	goto l0077_1AC2
	// succ:  l0077_1AC2
l0077_1A9C:
	ax = Mem0[ds:0x01D0:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	bx = Mem0[ss:bp + 0x0006:word16]
	v15 = Mem0[ds:bx + 0x0002:word16] + ax
	Mem0[ds:bx + 0x0002:word16] = v15
	SCZO = cond(v15)
	goto l0077_1AC2
	// succ:  l0077_1AC2
l0077_1AAA:
	ax = Mem0[ds:0x01D0:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	bx = Mem0[ss:bp + 0x0006:word16]
	v16 = Mem0[ds:bx + 0x0002:word16] - ax
	Mem0[ds:bx + 0x0002:word16] = v16
	SCZO = cond(v16)
	goto l0077_1AC2
	// succ:  l0077_1AC2
l0077_1AB8:
	ax = Mem0[ds:0x01D0:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	bx = Mem0[ss:bp + 0x0006:word16]
	v13 = Mem0[ds:bx:word16] + ax
	Mem0[ds:bx:word16] = v13
	SCZO = cond(v13)
	// succ:  l0077_1AC2
l0077_1AC2:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_1A2C_exit
fn0077_1A2C_exit:


// fn0077_1ACC
// Return size: 4
void fn0077_1ACC()
fn0077_1ACC_entry:
	// succ:  l0077_1ACC
l0077_1ACC:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x00A2
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0011
	dx_ax = Mem0[ss:bp + 0x0006:word16] *s ax
	SCZO = cond(dx_ax)
	di = ax
	di = di + 0x4B60
	SCZO = cond(di)
	si = Mem0[ds:di + 0x000F:word16]
	SZO = cond(Mem0[ds:di + 0x000B:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0077_1B4A
	// succ:  l0077_1AF1 l0077_1B4A
l0077_1AF1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0046
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	bx = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0016:word16]
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	bx = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x001A:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4DB6 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di:word16]
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowText(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	// succ:  l0077_1B4A
l0077_1B4A:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_1ACC_exit
fn0077_1ACC_exit:


// fn0077_1B56
// Return size: 4
void fn0077_1B56()
fn0077_1B56_entry:
	// succ:  l0077_1B56
l0077_1B56:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = si - si
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:0x4CBC:word16] - si)
	branch Test(LE,SZO) l0077_1B78
	// succ:  l0077_1B6C l0077_1B78
l0077_1B6C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0077_1ACC (retsize: 2;)
	sp = sp + 0x0002
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - Mem0[ds:0x4CBC:word16])
	branch Test(LT,SO) l0077_1B6C
	// succ:  l0077_1B78 l0077_1B6C
l0077_1B78:
	sp = sp - 0x0002
	call fn0077_1B86 (retsize: 2;)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_1B56_exit
fn0077_1B56_exit:


// fn0077_1B86
// Return size: 4
void fn0077_1B86()
fn0077_1B86_entry:
	// succ:  l0077_1B86
l0077_1B86:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0206
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_16B6 (retsize: 4;)
	si = ax
	di = dx
	call fn00F7_16E4 (retsize: 4;)
	si = si + ax
	SCZO = cond(si)
	di = di + dx + C
	SCZO = cond(di)
	Mem0[ss:bp - 0x0006:word16] = si
	Mem0[ss:bp - 0x0004:word16] = di
	bx = Mem0[ds:0x4DEA:word16]
	si = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0xFFFF)
	branch Test(EQ,Z) l0077_1BD4
	// succ:  l0077_1BBB l0077_1BD4
l0077_1BBB:
	bx = Mem0[ds:0x05AE:word16]
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x052C:word16]
	di = Mem0[ds:bx:word16]
	goto l0077_1BD7
	// succ:  l0077_1BD7
l0077_1BD4:
	di = 0x00E2
	// succ:  l0077_1BD7
l0077_1BD7:
	ax = bp - 0x0106
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	cx = 0x012C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x0206
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0106
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0016:word16]
	dx = 0x012C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn0107_4DB6 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x0106
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0206
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x001A:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4DB6 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = bp - 0x0106
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowText(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_1B86_exit
fn0077_1B86_exit:


// fn0077_1C4A
// Return size: 4
void fn0077_1C4A()
fn0077_1C4A_entry:
	// succ:  l0077_1C4A
l0077_1C4A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	cx = 0x0011
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	si = ax
	si = si + 0x4B60
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x000D:word16]
	al = Mem0[ds:si + 0x000A:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0077_08EE (retsize: 2;)
	sp = sp + 0x0008
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_1C4A_exit
fn0077_1C4A_exit:


// fn0077_1C96
// Return size: 4
void fn0077_1C96()
fn0077_1C96_entry:
	// succ:  l0077_1C96
l0077_1C96:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ds:0x4DEA:word16]
	si = Mem0[ds:si:word16]
	bx = Mem0[ds:si + 0x0071:word16]
	ax = si
	si = 0x4B60
	di = ax
	SCZO = cond(Mem0[ds:di + 0x0071:word16] - 0x0000)
	branch Test(EQ,Z) l0077_1CE0
	// succ:  l0077_1CBB l0077_1CE0
l0077_1CBB:
	dx = dx - dx
	SCZO = cond(dx)
	SCZO = cond(Mem0[ds:0x4CBC:word16] - dx)
	branch Test(LE,SZO) l0077_1CE0
	// succ:  l0077_1CC3 l0077_1CE0
l0077_1CC3:
	SCZO = cond(Mem0[ds:si + 0x000F:word16] - bx)
	branch Test(EQ,Z) l0077_1CD4
	// succ:  l0077_1CC8 l0077_1CD4
l0077_1CC8:
	si = si + 0x0011
	SCZO = cond(si)
	dx = dx + 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - Mem0[ds:0x4CBC:word16])
	branch Test(LT,SO) l0077_1CC3
	// succ:  l0077_1CD2 l0077_1CC3
l0077_1CD2:
	goto l0077_1CE0
	// succ:  l0077_1CE0
l0077_1CD4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l0077_1CE0
l0077_1CE0:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0077_1C96_exit
fn0077_1C96_exit:


// fn0087_0000
// Return size: 4
void fn0087_0000()
fn0087_0000_entry:
	// succ:  l0087_0000
l0087_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x005C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4CBC:word16] - 0x0000)
	branch Test(NE,Z) l0087_0019
	// succ:  l0087_0016 l0087_0019
l0087_0016:
	goto l0087_028D
	// succ:  l0087_028D
l0087_0019:
	SCZO = cond(Mem0[ds:0x01CA:word16] - 0x0000)
	branch Test(NE,Z) l0087_0023
	// succ:  l0087_0020 l0087_0023
l0087_0020:
	goto l0087_028D
	// succ:  l0087_028D
l0087_0023:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = Mem0[ss:bp - 0x0014:word16]
	si = si - Mem0[ss:bp - 0x0018:word16]
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4B60:word16]
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4B60:word16]
	ax = bp - 0x002A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = Mem0[ds:0x01CE:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp - 0x001A:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0010:word16] = ax
	ax = ax - Mem0[ss:bp - 0x0016:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	Mem0[ss:bp - 0x0012:word16] = ax
	cx = 0x0050
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000E:word16] = ax
	ax = Mem0[ss:bp - 0x001C:word16]
	ax = ax - Mem0[ss:bp - 0x0020:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[ss:bp - 0x0024:word16]
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp - 0x0028:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = ax + cx
	SCZO = cond(ax)
	dx_ax = Mem0[ds:0x4CBC:word16] *s ax
	SCZO = cond(dx_ax)
	SCZO = cond(ax - si)
	branch Test(LE,SZO) l0087_00F6
	// succ:  l0087_008E l0087_00F6
l0087_008E:
	ax = Mem0[ss:bp - 0x0014:word16]
	dx_ax = (int32) ax
	dx = dx_ax % Mem0[ds:0x4CBC:word16]
	ax = dx_ax / Mem0[ds:0x4CBC:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	di = di - di
	SCZO = cond(di)
	SCZO = cond(Mem0[ds:0x4CBC:word16] - di)
	branch Test(GT,SZO) l0087_00A4
	// succ:  l0087_00A1 l0087_00A4
l0087_00A1:
	goto l0087_028D
	// succ:  l0087_028D
l0087_00A4:
	Mem0[ss:bp - 0x0004:word16] = di
	Mem0[ss:bp - 0x000A:word16] = 0x4B60
	// succ:  l0087_00AC
l0087_00AC:
	bx = Mem0[ss:bp - 0x000A:word16]
	si = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	IsIconic(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0087_00C5
	// succ:  l0087_00BB l0087_00C5
l0087_00BB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0087_00C5
l0087_00C5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveWindow(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0077_0956 (retsize: 4;)
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x000C:word16]
	v31 = Mem0[ss:bp - 0x0004:word16] + ax
	Mem0[ss:bp - 0x0004:word16] = v31
	SCZO = cond(v31)
	v32 = Mem0[ss:bp - 0x000A:word16] + 0x0011
	Mem0[ss:bp - 0x000A:word16] = v32
	SCZO = cond(v32)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(Mem0[ds:0x4CBC:word16] - di)
	branch Test(GT,SZO) l0087_00AC
	// succ:  l0087_00F2 l0087_00AC
l0087_00F2:
	goto l0087_028D
	// succ:  l0087_028D
l0087_00F6:
	Mem0[ss:bp - 0x000C:word16] = si
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	bx = bp - 0x005A
	SCZO = cond(Mem0[ds:0x4CBC:word16] - 0x0000)
	branch Test(LE,SZO) l0087_0173
	// succ:  l0087_0108 l0087_0173
l0087_0108:
	Mem0[ss:bp - 0x0006:word16] = 0x4B6F
	// succ:  l0087_010D
l0087_010D:
	si = Mem0[ss:bp - 0x0006:word16]
	di = Mem0[ds:si:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0087_014E
	// succ:  l0087_0116 l0087_014E
l0087_0116:
	si = Mem0[ds:di:word16]
	ax = Mem0[ds:si + 0x0024:word16]
	Mem0[ss:bp - 0x005C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0087_014E
	// succ:  l0087_0122 l0087_014E
l0087_0122:
	cx = Mem0[ss:bp - 0x000E:word16]
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	cx = 0x0050
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	Mem0[ds:bx:word16] = ax
	ax = Mem0[ss:bp - 0x000A:word16]
	Mem0[ds:bx + 0x0002:word16] = ax
	cl = 0x06
	si = Mem0[ds:di:word16]
	al = Mem0[ds:si + 0x0009:byte]
	ax = ax & 0x0040
	SZO = cond(ax)
	C = false
	ax = ax >>u cl
	SCZO = cond(ax)
	Mem0[ds:bx + 0x0004:word16] = ax
	goto l0087_0161
	// succ:  l0087_0161
l0087_014E:
	ax = Mem0[ss:bp - 0x000A:word16]
	ax = ax + 0x0050
	SCZO = cond(ax)
	Mem0[ds:bx:word16] = ax
	ax = Mem0[ss:bp - 0x000A:word16]
	Mem0[ds:bx + 0x0002:word16] = ax
	Mem0[ds:bx + 0x0004:word16] = 0x0000
	// succ:  l0087_0161
l0087_0161:
	v21 = Mem0[ss:bp - 0x0006:word16] + 0x0011
	Mem0[ss:bp - 0x0006:word16] = v21
	SCZO = cond(v21)
	bx = bx + 0x0006
	SCZO = cond(bx)
	ax = Mem0[ds:0x4CBC:word16]
	v22 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v22
	SZO = cond(v22)
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - ax)
	branch Test(LT,SO) l0087_010D
	// succ:  l0087_0173 l0087_010D
l0087_0173:
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	ax = bp - 0x005A
	Mem0[ss:bp - 0x0004:word16] = ax
	si = Mem0[ss:bp - 0x000C:word16]
	ax = Mem0[ds:0x4CBC:word16]
	dx_ax = Mem0[ss:bp - 0x000A:word16] *s ax
	SCZO = cond(dx_ax)
	si = si - ax
	SCZO = cond(si)
	branch Test(EQ,Z) l0087_01AC
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	ax = bp - 0x005A
	Mem0[ss:bp - 0x0004:word16] = ax
	si = Mem0[ss:bp - 0x000C:word16]
	ax = Mem0[ds:0x4CBC:word16]
	dx_ax = Mem0[ss:bp - 0x000A:word16] *s ax
	SCZO = cond(dx_ax)
	si = si - ax
	SCZO = cond(si)
	branch Test(EQ,Z) l0087_01AC
	// succ:  l0087_018B l0087_01AC
l0087_018B:
	bx = Mem0[ss:bp - 0x0008:word16]
	cx = Mem0[ss:bp - 0x000E:word16]
	bx = Mem0[ss:bp - 0x0008:word16]
	cx = Mem0[ss:bp - 0x000E:word16]
	// succ:  l0087_0191
l0087_0191:
	dx = Mem0[ss:bp - 0x0004:word16]
	di = dx
	ax = Mem0[ds:di:word16]
	SCZO = cond(Mem0[ds:di + 0x0002:word16] - ax)
	branch Test(GE,SO) l0087_01BA
	dx = Mem0[ss:bp - 0x0004:word16]
	di = dx
	ax = Mem0[ds:di:word16]
	SCZO = cond(Mem0[ds:di + 0x0002:word16] - ax)
	branch Test(GE,SO) l0087_01BA
	// succ:  l0087_019D l0087_01BA
l0087_019D:
	SCZO = cond(si - 0x0050)
	branch Test(LT,SO) l0087_01B2
	SCZO = cond(si - 0x0050)
	branch Test(LT,SO) l0087_01B2
	// succ:  l0087_01A2 l0087_01B2
l0087_01A2:
	v20 = Mem0[ds:di + 0x0002:word16] + 0x0050
	Mem0[ds:di + 0x0002:word16] = v20
	SCZO = cond(v20)
	si = si - 0x0050
	SCZO = cond(si)
	v23 = Mem0[ds:di + 0x0002:word16] + 0x0050
	Mem0[ds:di + 0x0002:word16] = v23
	SCZO = cond(v23)
	si = si - 0x0050
	SCZO = cond(si)
	goto l0087_01B7
	// succ:  l0087_01B7
l0087_01AC:
	cx = Mem0[ss:bp - 0x000E:word16]
	goto l0087_01DD
	// succ:  l0087_01DD
l0087_01B2:
	v24 = Mem0[ds:di + 0x0002:word16] + si
	Mem0[ds:di + 0x0002:word16] = v24
	SCZO = cond(v24)
	si = si - si
	SCZO = cond(si)
	// succ:  l0087_01B7
l0087_01B7:
	cx = 0x0001
	// succ:  l0087_01BA
l0087_01BA:
	bx = bx + 0x0001
	SZO = cond(bx)
	SCZO = cond(Mem0[ds:0x4CBC:word16] - bx)
	branch Test(NE,Z) l0087_01C9
	// succ:  l0087_01C1 l0087_01C9
l0087_01C1:
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(EQ,Z) l0087_01DD
	// succ:  l0087_01C5 l0087_01DD
l0087_01C5:
	cx = cx - cx
	SCZO = cond(cx)
	bx = cx
	// succ:  l0087_01C9
l0087_01C9:
	di = bx
	ax = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	ax = bp - 0x005A + di
	Mem0[ss:bp - 0x0004:word16] = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0087_0191
	// succ:  l0087_01DD l0087_0191
l0087_01DD:
	bx = bx - bx
	SCZO = cond(bx)
	dx = bp - 0x005A
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0087_022C
	bx = bx - bx
	SCZO = cond(bx)
	dx = bp - 0x005A
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0087_022C
	// succ:  l0087_01E6 l0087_022C
l0087_01E6:
	di = dx
	SCZO = cond(Mem0[ds:di + 0x0004:word16] - 0x0000)
	branch Test(NE,Z) l0087_0204
	di = dx
	SCZO = cond(Mem0[ds:di + 0x0004:word16] - 0x0000)
	branch Test(NE,Z) l0087_0204
	// succ:  l0087_01EE l0087_0204
l0087_01EE:
	SCZO = cond(si - 0x0050)
	branch Test(LT,SO) l0087_01FC
	SCZO = cond(si - 0x0050)
	branch Test(LT,SO) l0087_01FC
	// succ:  l0087_01F3 l0087_01FC
l0087_01F3:
	v25 = Mem0[ds:di + 0x0002:word16] + 0x0050
	Mem0[ds:di + 0x0002:word16] = v25
	SCZO = cond(v25)
	si = si - 0x0050
	SCZO = cond(si)
	v26 = Mem0[ds:di + 0x0002:word16] + 0x0050
	Mem0[ds:di + 0x0002:word16] = v26
	SCZO = cond(v26)
	si = si - 0x0050
	SCZO = cond(si)
	goto l0087_0201
	// succ:  l0087_0201
l0087_01FC:
	v27 = Mem0[ds:di + 0x0002:word16] + si
	Mem0[ds:di + 0x0002:word16] = v27
	SCZO = cond(v27)
	si = si - si
	SCZO = cond(si)
	// succ:  l0087_0201
l0087_0201:
	cx = 0x0001
	// succ:  l0087_0204
l0087_0204:
	bx = bx + 0x0001
	SZO = cond(bx)
	SCZO = cond(Mem0[ds:0x4CBC:word16] - bx)
	branch Test(NE,Z) l0087_0213
	// succ:  l0087_020B l0087_0213
l0087_020B:
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(EQ,Z) l0087_022C
	// succ:  l0087_020F l0087_022C
l0087_020F:
	cx = cx - cx
	SCZO = cond(cx)
	bx = cx
	// succ:  l0087_0213
l0087_0213:
	di = bx
	ax = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	ax = bp - 0x005A + di
	Mem0[ss:bp - 0x0004:word16] = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0087_022C
	// succ:  l0087_0227 l0087_022C
l0087_0227:
	dx = ax
	goto l0087_01E6
	// succ:  l0087_01E6
l0087_022C:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(Mem0[ds:0x4CBC:word16] - ax)
	branch Test(LE,SZO) l0087_028D
	// succ:  l0087_023A l0087_028D
l0087_023A:
	di = bp - 0x0058
	Mem0[ss:bp - 0x000A:word16] = 0x4B60
	// succ:  l0087_0242
l0087_0242:
	bx = Mem0[ss:bp - 0x000A:word16]
	si = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	IsIconic(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0087_025B
	// succ:  l0087_0251 l0087_025B
l0087_0251:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0087_025B
l0087_025B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveWindow(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0077_0956 (retsize: 4;)
	sp = sp + 0x0002
	ax = Mem0[ds:di:word16]
	di = di + 0x0006
	SCZO = cond(di)
	v28 = Mem0[ss:bp - 0x0004:word16] + ax
	Mem0[ss:bp - 0x0004:word16] = v28
	SCZO = cond(v28)
	v29 = Mem0[ss:bp - 0x000A:word16] + 0x0011
	Mem0[ss:bp - 0x000A:word16] = v29
	SCZO = cond(v29)
	ax = Mem0[ds:0x4CBC:word16]
	v30 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v30
	SZO = cond(v30)
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - ax)
	branch Test(LT,SO) l0087_0242
	// succ:  l0087_028D l0087_0242
l0087_028D:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0087_0000_exit fn0087_0000_exit
fn0087_0000_exit:


// fn0087_0298
// Return size: 4
void fn0087_0298()
fn0087_0298_entry:
	// succ:  l0087_0298
l0087_0298:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x4CBC:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = 0x00EC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x46EC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x01CE:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	bx = Mem0[ds:0x4CBC:word16]
	si = bx + 0x0001
	dx_ax = (int32) ax
	dx = dx_ax % si
	ax = dx_ax / si
	SCZO = cond(ax)
	si = ax
	dx_ax = Mem0[ss:bp - 0x0004:word16] *s ax
	SCZO = cond(dx_ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(cx)
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0087_0311
	// succ:  l0087_030E l0087_0311
l0087_030E:
	goto l0087_03E4
	// succ:  l0087_03E4
l0087_0311:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowWord(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = 0x0011
	dx_ax = Mem0[ss:bp - 0x0004:word16] *s ax
	SCZO = cond(dx_ax)
	si = ax
	si = si + 0x4B60
	SCZO = cond(si)
	ax = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:si + 0x000F:word16] = ax
	cl = Mem0[ds:si + 0x000B:byte]
	cl = cl ^ Mem0[ss:bp + 0x0006:byte]
	SZO = cond(cl)
	C = false
	cx = cx & 0x0001
	SZO = cond(cx)
	C = false
	v18 = Mem0[ds:si + 0x000B:word16] ^ cx
	Mem0[ds:si + 0x000B:word16] = v18
	SZO = cond(Mem0[ds:si + 0x000B:word16])
	C = false
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0087_0352
	// succ:  l0087_0340 l0087_0352
l0087_0340:
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx + 0x0024:word16] - 0x0000)
	branch Test(EQ,Z) l0087_0352
	// succ:  l0087_034B l0087_0352
l0087_034B:
	Mem0[ds:si + 0x000D:word16] = 0x0000
	goto l0087_0357
	// succ:  l0087_0357
l0087_0352:
	Mem0[ds:si + 0x000D:word16] = 0xFFFF
	// succ:  l0087_0357
l0087_0357:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetSystemMenu(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = ax
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0087_037E
	// succ:  l0087_0368 l0087_037E
l0087_0368:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xF060
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0200
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ChangeMenu(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	goto l0087_0391
	// succ:  l0087_0391
l0087_037E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xF060
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x02A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ModifyMenu(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	// succ:  l0087_0391
l0087_0391:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0077_1ACC (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0077_0A04 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x0CE0:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0053
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SetWindowPos(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0008:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l0087_03E4
	// succ:  l0087_03CA l0087_03E4
l0087_03CA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_1AEE (retsize: 4;)
	sp = sp + 0x0006
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = Mem0[ds:bx:word16]
	v19 = Mem0[ds:bx + 0x0008:byte] & 0xF7
	Mem0[ds:bx + 0x0008:byte] = v19
	SZO = cond(Mem0[ds:bx + 0x0008:byte])
	C = false
	// succ:  l0087_03E4
l0087_03E4:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0087_0298_exit
fn0087_0298_exit:


// fn0087_03F0
// Return size: 4
void fn0087_03F0()
fn0087_03F0_entry:
	// succ:  l0087_03F0
l0087_03F0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x4914:word16]
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - ax)
	branch Test(GT,SZO) l0087_040B
	// succ:  l0087_0407 l0087_040B
l0087_0407:
	v11 = Mem0[ds:0x4914:word16] - 0x0001
	Mem0[ds:0x4914:word16] = v11
	SZO = cond(v11)
	// succ:  l0087_040B
l0087_040B:
	ax = Mem0[ds:0x4CBC:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(GT,SZO) l0087_0417
	// succ:  l0087_0414 l0087_0417
l0087_0414:
	goto l0087_04A2
	// succ:  l0087_04A2
l0087_0417:
	ax = 0x0011
	dx_ax = Mem0[ss:bp + 0x0006:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	ax = Mem0[ds:0x4CBC:word16]
	ax = ax - Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax)
	cx = 0x0011
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	dx = cx
	cx = ax
	cx = cx - dx
	SCZO = cond(cx)
	di = bx + 0x4B60
	si = bx + 0x4B71
	ax = ds
	es = ax
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0087_043E
l0087_043E:
	branch cx == 0x0000 l0087_0440
	// succ:  l0087_043E_1 l0087_0440
l0087_043E_1:
	v17 = Mem0[si:word16]
	Mem0[di:word16] = v17
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0087_043E
	// succ:  l0087_043E
l0087_0440:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0087_0442
l0087_0442:
	branch cx == 0x0000 l0087_0444
	// succ:  l0087_0442_1 l0087_0444
l0087_0442_1:
	v21 = Mem0[si:byte]
	Mem0[di:byte] = v21
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0087_0442
	// succ:  l0087_0442
l0087_0444:
	ax = Mem0[ds:0x4CBC:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(LE,SZO) l0087_04A2
	// succ:  l0087_044D l0087_04A2
l0087_044D:
	ax = 0x0050
	dx_ax = Mem0[ss:bp + 0x0006:word16] *s ax
	SCZO = cond(dx_ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = 0x0011
	dx_ax = Mem0[ss:bp + 0x0006:word16] *s ax
	SCZO = cond(dx_ax)
	ax = ax + 0x4B60
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	di = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0087_0465
l0087_0465:
	bx = Mem0[ss:bp - 0x0004:word16]
	si = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	SetWindowWord(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	IsIconic(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0087_0491
	// succ:  l0087_047E l0087_0491
l0087_047E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0015
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowPos(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	// succ:  l0087_0491
l0087_0491:
	v22 = Mem0[ss:bp - 0x0006:word16] + 0x0050
	Mem0[ss:bp - 0x0006:word16] = v22
	SCZO = cond(v22)
	v23 = Mem0[ss:bp - 0x0004:word16] + 0x0011
	Mem0[ss:bp - 0x0004:word16] = v23
	SCZO = cond(v23)
	ax = Mem0[ds:0x4CBC:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(ax - di)
	branch Test(GT,SZO) l0087_0465
	// succ:  l0087_04A2 l0087_0465
l0087_04A2:
	v18 = Mem0[ds:0x4CBC:word16] - 0x0001
	Mem0[ds:0x4CBC:word16] = v18
	SZO = cond(v18)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	IsWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0087_04B7
	v24 = Mem0[ds:0x4CBC:word16] - 0x0001
	Mem0[ds:0x4CBC:word16] = v24
	SZO = cond(v24)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	IsWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0087_04B7
	// succ:  l0087_04B3 l0087_04B7
l0087_04B3:
	sp = sp - 0x0002
	call fn0087_0000 (retsize: 2;)
	sp = sp - 0x0002
	call fn0087_0000 (retsize: 2;)
l0087_04B7:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0087_03F0_exit
fn0087_03F0_exit:


// fn0087_04C4
// Return size: 4
void fn0087_04C4()
fn0087_04C4_entry:
	// succ:  l0087_04C4
l0087_04C4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0112
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = di - di
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	GetMenu(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetSubMenu(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0010:word16] = ax
	CreateMenu()
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0087_04FD
	// succ:  l0087_04FA l0087_04FD
l0087_04FA:
	goto l0087_0687
	// succ:  l0087_0687
l0087_04FD:
	SCZO = cond(Mem0[ds:0x4DEA:word16] - 0x0000)
	branch Test(NE,Z) l0087_0507
	// succ:  l0087_0504 l0087_0507
l0087_0504:
	goto l0087_05F0
	// succ:  l0087_05F0
l0087_0507:
	Mem0[ss:bp - 0x0012:word16] = si
	Mem0[ss:bp - 0x000E:word16] = di
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	bx = Mem0[ds:0x4DEA:word16]
	ax = Mem0[ds:bx:word16]
	cx = ax
	ax = ax + 0x0073
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	cx = cx + 0x0028
	SCZO = cond(cx)
	dx = cx
	ax = cx
	bx = cx
	cx = Mem0[ds:bx + 0x0017:word16]
	Mem0[ss:bp - 0x0006:word16] = cx
	Mem0[ss:bp - 0x0004:word16] = dx
	si = dx
	di = cx
	goto l0087_05BA
	// succ:  l0087_05BA
l0087_053C:
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - 0x0000)
	branch Test(EQ,Z) l0087_05B4
	// succ:  l0087_0542 l0087_05B4
l0087_0542:
	bx = Mem0[ds:si + 0x0003:word16]
	dx = Mem0[ds:bx:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0008:byte] & 0x04)
	C = false
	branch Test(NE,Z) l0087_0557
	// succ:  l0087_054F l0087_0557
l0087_054F:
	bx = dx
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0087_05B4
	// succ:  l0087_0557 l0087_05B4
l0087_0557:
	ax = Mem0[ss:bp - 0x0008:word16]
	bx = Mem0[ss:bp - 0x000E:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	Mem0[ds:bx + 0x4158:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0003:word16]
	ax = bp - 0x0092
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x0112
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0021
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cl = Mem0[ss:bp - 0x000E:byte]
	ch = ch - ch
	SCZO = cond(ch)
	cx = cx + 0x0041
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0092
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0112
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x000E:word16]
	ax = ax + 0x0077
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ChangeMenu(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	v19 = Mem0[ss:bp - 0x000E:word16] + 0x0001
	Mem0[ss:bp - 0x000E:word16] = v19
	SZO = cond(v19)
	// succ:  l0087_05B4
l0087_05B4:
	si = si + 0x0005
	SCZO = cond(si)
	v20 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v20
	SZO = cond(v20)
	// succ:  l0087_05BA
l0087_05BA:
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - si)
	branch Test(ULE,CZ) l0087_05C2
	// succ:  l0087_05BF l0087_05C2
l0087_05BF:
	goto l0087_053C
	// succ:  l0087_053C
l0087_05C2:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0087_05EA
	// succ:  l0087_05C6 l0087_05EA
l0087_05C6:
	bx = Mem0[ds:di:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x0F)
	branch Test(NE,Z) l0087_05EA
	// succ:  l0087_05CD l0087_05EA
l0087_05CD:
	ax = Mem0[ds:bx + 0x0024:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx + 0x0028
	SCZO = cond(bx)
	Mem0[ss:bp - 0x000A:word16] = bx
	si = Mem0[ds:di:word16]
	si = si + 0x0028
	SCZO = cond(si)
	di = di - di
	SCZO = cond(di)
	goto l0087_05BA
	// succ:  l0087_05BA
l0087_05EA:
	si = Mem0[ss:bp - 0x0012:word16]
	di = Mem0[ss:bp - 0x000E:word16]
	// succ:  l0087_05F0
l0087_05F0:
	ax = 0x0203
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0112
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(Mem0[ss:bp - 0x0010:word16] - 0x0000)
	branch Test(EQ,Z) l0087_0644
	// succ:  l0087_0604 l0087_0644
l0087_0604:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0087_061C
	// succ:  l0087_0608 l0087_061C
l0087_0608:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0112
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = 0x0410
	goto l0087_062E
	// succ:  l0087_062E
l0087_061C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0112
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0076
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	// succ:  l0087_062E
l0087_062E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ChangeMenu(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0610
	goto l0087_066C
	// succ:  l0087_066C
l0087_0644:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0087_0672
	// succ:  l0087_0648 l0087_0672
l0087_0648:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0076
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0112
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	cx = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ChangeMenu(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0076
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0200
	// succ:  l0087_066C
l0087_066C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ChangeMenu(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	// succ:  l0087_0672
l0087_0672:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0087_067E
	// succ:  l0087_0676 l0087_067E
l0087_0676:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	DestroyMenu(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0087_067E
l0087_067E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	DrawMenuBar(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0087_0687
l0087_0687:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0087_04C4_exit
fn0087_04C4_exit:


// fn0087_0692
// Return size: 4
void fn0087_0692()
fn0087_0692_entry:
	// succ:  l0087_0692
l0087_0692:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x4DEA:word16] - 0x0000)
	branch Test(NE,Z) l0087_06B0
	// succ:  l0087_06AD l0087_06B0
l0087_06AD:
	goto l0087_0732
	// succ:  l0087_0732
l0087_06B0:
	bx = Mem0[ds:0x4DEA:word16]
	ax = Mem0[ds:bx:word16]
	cx = ax
	ax = ax + 0x0073
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	cx = cx + 0x0028
	SCZO = cond(cx)
	si = cx
	bx = cx
	di = Mem0[ds:bx + 0x0017:word16]
	goto l0087_0706
	// succ:  l0087_0706
l0087_06CA:
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - 0x0000)
	branch Test(EQ,Z) l0087_0703
	// succ:  l0087_06D0 l0087_0703
l0087_06D0:
	bx = Mem0[ds:si + 0x0003:word16]
	cx = Mem0[ds:bx:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0008:byte] & 0x04)
	C = false
	branch Test(NE,Z) l0087_06E5
	// succ:  l0087_06DD l0087_06E5
l0087_06DD:
	bx = cx
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0087_0703
	// succ:  l0087_06E5 l0087_0703
l0087_06E5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x0077
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn0087_073E (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(ax - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableMenuItem(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	v16 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v16
	SZO = cond(v16)
	// succ:  l0087_0703
l0087_0703:
	si = si + 0x0005
	SCZO = cond(si)
	// succ:  l0087_0706
l0087_0706:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - si)
	branch Test(UGT,CZ) l0087_06CA
	// succ:  l0087_070B l0087_06CA
l0087_070B:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0087_0732
	// succ:  l0087_070F l0087_0732
l0087_070F:
	bx = Mem0[ds:di:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x0F)
	branch Test(NE,Z) l0087_0732
	// succ:  l0087_0716 l0087_0732
l0087_0716:
	ax = Mem0[ds:bx + 0x0024:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx + 0x0028
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0006:word16] = bx
	si = Mem0[ds:di:word16]
	si = si + 0x0028
	SCZO = cond(si)
	di = di - di
	SCZO = cond(di)
	goto l0087_0706
	// succ:  l0087_0706
l0087_0732:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0087_0692_exit
fn0087_0692_exit:


// fn0087_073E
// Return size: 4
void fn0087_073E()
fn0087_073E_entry:
	// succ:  l0087_073E
l0087_073E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0006:word16]
	cl = Mem0[ds:di + 0x000A:byte]
	cx = cx & 0x000F
	SZO = cond(cx)
	C = false
	ax = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + di
	SCZO = cond(cx)
	cx = cx + 0x000C
	SCZO = cond(cx)
	bx = di + 0x000C
	SCZO = cond(cx - bx)
	branch Test(ULE,CZ) l0087_079A
	// succ:  l0087_076B l0087_079A
l0087_076B:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l0087_078A
	// succ:  l0087_0771 l0087_078A
l0087_0771:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l0087_078A
	// succ:  l0087_0777 l0087_078A
l0087_0777:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	SCZO = cond(Mem0[ds:bx + 0x0008:word16] - dx)
	branch Test(UGT,CZ) l0087_0794
	// succ:  l0087_0783 l0087_0794
l0087_0783:
	branch Test(ULT,C) l0087_078A
	// succ:  l0087_0785 l0087_078A
l0087_0785:
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - ax)
	branch Test(UGT,CZ) l0087_0794
	// succ:  l0087_078A l0087_0794
l0087_078A:
	bx = bx + 0x000A
	SCZO = cond(bx)
	SCZO = cond(bx - cx)
	branch Test(ULT,C) l0087_076B
	// succ:  l0087_0791 l0087_076B
l0087_0791:
	goto l0087_079A
	// succ:  l0087_079A
l0087_0794:
	ax = 0x0001
	goto l0087_079C
	// succ:  l0087_079C
l0087_079A:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0087_079C
l0087_079C:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0087_073E_exit
fn0087_073E_exit:


// fn0087_07A8
// Return size: 4
void fn0087_07A8()
fn0087_07A8_entry:
	// succ:  l0087_07A8
l0087_07A8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0009
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1A66 (retsize: 4;)
	sp = sp + 0x0006
	Mem0[ds:0x3D82:word16] = ax
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0087_07A8_exit
fn0087_07A8_exit:


// fn0087_07D0
// Return size: 4
void fn0087_07D0()
fn0087_07D0_entry:
	// succ:  l0087_07D0
l0087_07D0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	si = Mem0[ss:bp + 0x0006:word16]
	cl = 0x06
	bx = di
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + si
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx + 0x0CE4
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0008:word16] = bx
	al = Mem0[ds:bx:byte]
	Mem0[ss:bp - 0x0003:byte] = al
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0087_0820
	// succ:  l0087_0803 l0087_0820
l0087_0803:
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_0000 (retsize: 4;)
	sp = sp + 0x0002
	bx = Mem0[ss:bp - 0x0008:word16]
	Mem0[ds:bx:byte] = al
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0087_081A
	// succ:  l0087_0815 l0087_081A
l0087_0815:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0087_084A
	// succ:  l0087_084A
l0087_081A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	goto l0087_082F
	// succ:  l0087_082F
l0087_0820:
	bl = Mem0[ss:bp - 0x0003:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x4960:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l0087_082F
l0087_082F:
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	call fn0137_00A8 (retsize: 4;)
	Mem0[ds:si + 0x0002:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	si = ax
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = si
	// succ:  l0087_084A
l0087_084A:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0087_07D0_exit
fn0087_07D0_exit:


// fn0087_0856
// Return size: 4
void fn0087_0856()
fn0087_0856_entry:
	// succ:  l0087_0856
l0087_0856:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	bx = 0x01D2
	di = Mem0[ds:0x01CE:word16]
	ax = Mem0[ds:0x01D0:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = Mem0[ds:0x4128:word16]
	cx = 0x000A
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	ax = ax - 0x0020
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	cx = ~cx
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + 0x0020
	SCZO = cond(ax)
	ax = ax - 0x0050
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + 0x0050
	SCZO = cond(ax)
	Mem0[ds:0x01CE:word16] = ax
	ax = Mem0[ds:0x412A:word16]
	cx = 0x0006
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	ax = ax - 0x0020
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	cx = ~cx
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + 0x0020
	SCZO = cond(ax)
	Mem0[ds:0x01D0:word16] = ax
	// succ:  l0087_08AD
l0087_08AD:
	ax = Mem0[ds:bx + 0x0002:word16]
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % di
	ax = dx_ax /u di
	SCZO = cond(ax)
	dx_ax = Mem0[ds:0x01CE:word16] *u ax
	SCZO = cond(dx_ax)
	Mem0[ds:bx + 0x0002:word16] = ax
	ax = Mem0[ds:bx + 0x0006:word16]
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % di
	ax = dx_ax /u di
	SCZO = cond(ax)
	dx_ax = Mem0[ds:0x01CE:word16] *u ax
	SCZO = cond(dx_ax)
	Mem0[ds:bx + 0x0006:word16] = ax
	ax = Mem0[ds:bx + 0x0004:word16]
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % Mem0[ss:bp - 0x0004:word16]
	ax = dx_ax /u Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	dx_ax = Mem0[ds:0x01D0:word16] *u ax
	SCZO = cond(dx_ax)
	Mem0[ds:bx + 0x0004:word16] = ax
	ax = Mem0[ds:bx + 0x0008:word16]
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % Mem0[ss:bp - 0x0004:word16]
	ax = dx_ax /u Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	dx_ax = Mem0[ds:0x01D0:word16] *u ax
	SCZO = cond(dx_ax)
	Mem0[ds:bx + 0x0008:word16] = ax
	bx = bx + 0x000A
	SCZO = cond(bx)
	SCZO = cond(bx - 0x0268)
	branch Test(ULT,C) l0087_08AD
	// succ:  l0087_08F0 l0087_08AD
l0087_08F0:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0087_0856_exit
fn0087_0856_exit:


// fn0087_08FA
// Return size: 4
void fn0087_08FA()
fn0087_08FA_entry:
	// succ:  l0087_08FA
l0087_08FA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = Mem0[ds:0x01CE:word16]
	dx = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + dx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x01D0:word16]
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x01D0:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x01CE:word16]
	cx = Mem0[ds:0x01D0:word16]
	dx = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + dx
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x01CE:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x01D0:word16]
	ax = Mem0[ds:0x01CE:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x01D0:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	di = di - di
	SCZO = cond(di)
	SCZO = cond(Mem0[ds:0x4CBC:word16] - di)
	branch Test(LE,SZO) l0087_09D2
	// succ:  l0087_09B6 l0087_09D2
l0087_09B6:
	si = 0x4B60
	// succ:  l0087_09B9
l0087_09B9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	si = si + 0x0011
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(Mem0[ds:0x4CBC:word16] - di)
	branch Test(GT,SZO) l0087_09B9
	// succ:  l0087_09D2 l0087_09B9
l0087_09D2:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0087_08FA_exit
fn0087_08FA_exit:


// fn0087_09DC
// Return size: 4
void fn0087_09DC()
fn0087_09DC_entry:
	// succ:  l0087_09DC
l0087_09DC:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ds:0x4CBC:word16]
	bx = bx - 0x0001
	SZO = cond(bx)
	branch Test(SG,S) l0087_0A2A
	// succ:  l0087_09F2 l0087_0A2A
l0087_09F2:
	ax = bx
	cx = 0x0011
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	di = ax
	di = di + 0x4B6F
	SCZO = cond(di)
	Mem0[ss:bp - 0x0006:word16] = bx
	// succ:  l0087_0A02
l0087_0A02:
	bx = Mem0[ds:di:word16]
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l0087_0A22
	// succ:  l0087_0A08 l0087_0A22
l0087_0A08:
	dx = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0087_0A0B
l0087_0A0B:
	SCZO = cond(dx - bx)
	branch Test(EQ,Z) l0087_0A1A
	// succ:  l0087_0A0F l0087_0A1A
l0087_0A0F:
	si = Mem0[ds:bx:word16]
	bx = Mem0[ds:si + 0x000A:word16]
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(NE,Z) l0087_0A0B
	// succ:  l0087_0A18 l0087_0A0B
l0087_0A18:
	goto l0087_0A22
	// succ:  l0087_0A22
l0087_0A1A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di - 0x000F:word16]
	DestroyWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0087_0A22
l0087_0A22:
	di = di - 0x0011
	SCZO = cond(di)
	v18 = Mem0[ss:bp - 0x0006:word16] - 0x0001
	Mem0[ss:bp - 0x0006:word16] = v18
	SZO = cond(v18)
	branch Test(NS,S) l0087_0A02
	// succ:  l0087_0A2A l0087_0A02
l0087_0A2A:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0087_09DC_exit fn0087_09DC_exit
fn0087_09DC_exit:


// fn0087_0A36
// Return size: 4
void fn0087_0A36()
fn0087_0A36_entry:
	// succ:  l0087_0A36
l0087_0A36:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0012
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0087
	es = ax
	si = Mem0[ss:bp + 0x0008:word16]
	bx = Mem0[ds:si:word16]
	bh = bh & 0x03
	SZO = cond(bh)
	C = false
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + 0x0CE4
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0006:word16] = bx
	ax = Mem0[0x0087:bx:word16]
	Mem0[ss:bp - 0x000C:word16] = ax
	di = Mem0[ds:si + 0x0004:word16]
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l0087_0A72
	// succ:  l0087_0A6C l0087_0A72
l0087_0A6C:
	ax = 0x02EB
	goto l0087_0A81
	// succ:  l0087_0A81
l0087_0A72:
	ah = Mem0[ds:si + 0x0001:byte]
	ax = ax & 0x1000
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x0001)
	C = !C
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x02EC
	SZO = cond(ax)
	C = false
	// succ:  l0087_0A81
l0087_0A81:
	Mem0[ss:bp - 0x000E:word16] = ax
	ax = Mem0[0x0087:bx + 0x0002:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0087_0A9A
	// succ:  l0087_0A91 l0087_0A9A
l0087_0A91:
	Mem0[ss:bp - 0x0006:word16] = 0x02FE
	di = -di
	SCZO = cond(di)
	C = di == 0x0000
	goto l0087_0AAE
	// succ:  l0087_0AAE
l0087_0A9A:
	ah = Mem0[ds:si + 0x0001:byte]
	ax = ax & 0x0800
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x0001
	SZO = cond(ax)
	C = false
	ax = ax + 0x02FF
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	// succ:  l0087_0AAE
l0087_0AAE:
	ax = Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(ax - 0x00D8)
	branch Test(NE,Z) l0087_0AB9
	// succ:  l0087_0AB6 l0087_0AB9
l0087_0AB6:
	goto l0087_0C16
	// succ:  l0087_0C16
l0087_0AB9:
	branch Test(UGT,CZ) l0087_0AEC
	// succ:  l0087_0ABB l0087_0AEC
l0087_0ABB:
	ax = ax - 0x004C
	SCZO = cond(ax)
	SCZO = cond(ax - 0x000F)
	branch Test(UGT,CZ) l0087_0B04
	// succ:  l0087_0AC3 l0087_0B04
l0087_0AC3:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v18 = ax
	ax = bx
	bx = v18
	call Mem0[0x0087:bx + 0x0ACC:word16] (retsize: 4;)
	return
	// succ:  fn0087_0A36_exit
l0087_0AEC:
	SCZO = cond(ax - 0x00E2)
	branch Test(NE,Z) l0087_0AF4
	// succ:  l0087_0AF1 l0087_0AF4
l0087_0AF1:
	goto l0087_0C8A
	// succ:  l0087_0C8A
l0087_0AF4:
	branch Test(UGT,CZ) l0087_0B04
	// succ:  l0087_0AF6 l0087_0B04
l0087_0AF6:
	al = al - 0xD9
	SCZO = cond(al)
	branch Test(NE,Z) l0087_0AFD
	// succ:  l0087_0AFA l0087_0AFD
l0087_0AFA:
	goto l0087_0C4C
	// succ:  l0087_0C4C
l0087_0AFD:
	al = al - 0x08
	SCZO = cond(al)
	branch Test(NE,Z) l0087_0B04
	// succ:  l0087_0B01 l0087_0B04
l0087_0B01:
	goto l0087_0C6C
	// succ:  l0087_0C6C
l0087_0B04:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:byte] = 0x00
	goto l0087_0CD8
	// succ:  l0087_0CD8
l0087_0C16:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	SCZO = cond(Mem0[ds:si + 0x0004:word16] - 0x0014)
	branch Test(UGT,CZ) l0087_0C28
	// succ:  l0087_0C23 l0087_0C28
l0087_0C23:
	ax = 0x03CE
	goto l0087_0C81
	// succ:  l0087_0C81
l0087_0C28:
	SCZO = cond(Mem0[ds:si + 0x0004:word16] - 0x0028)
	branch Test(UGT,CZ) l0087_0C34
	// succ:  l0087_0C2E l0087_0C34
l0087_0C2E:
	ax = 0x03CF
	goto l0087_0C81
	// succ:  l0087_0C81
l0087_0C34:
	SCZO = cond(Mem0[ds:si + 0x0004:word16] - 0x003C)
	branch Test(UGT,CZ) l0087_0C40
	// succ:  l0087_0C3A l0087_0C40
l0087_0C3A:
	ax = 0x03D0
	goto l0087_0C81
	// succ:  l0087_0C81
l0087_0C40:
	SCZO = cond(Mem0[ds:si + 0x0004:word16] - 0x0064)
	branch Test(UGE,C) l0087_0C67
	// succ:  l0087_0C46 l0087_0C67
l0087_0C46:
	ax = 0x03D1
	goto l0087_0C81
	// succ:  l0087_0C81
l0087_0C4C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	SCZO = cond(Mem0[ds:si + 0x0004:word16] - 0x001E)
	branch Test(ULE,CZ) l0087_0C2E
	// succ:  l0087_0C5B l0087_0C2E
l0087_0C5B:
	SCZO = cond(Mem0[ds:si + 0x0004:word16] - 0x003C)
	branch Test(ULE,CZ) l0087_0C3A
	// succ:  l0087_0C61 l0087_0C3A
l0087_0C61:
	SCZO = cond(Mem0[ds:si + 0x0004:word16] - 0x0064)
	branch Test(ULT,C) l0087_0C46
	// succ:  l0087_0C67 l0087_0C46
l0087_0C67:
	ax = 0x03D2
	ax = 0x03D2
	goto l0087_0C81
	// succ:  l0087_0C81
l0087_0C6C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	di = di - 0x0001
	SZO = cond(di)
	branch Test(NE,Z) l0087_0C7E
	// succ:  l0087_0C78 l0087_0C7E
l0087_0C78:
	ax = 0x0429
	goto l0087_0C81
	// succ:  l0087_0C81
l0087_0C7E:
	ax = 0x042A
	// succ:  l0087_0C81
l0087_0C81:
	Mem0[ss:bp - 0x000A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0087_0C9B
	// succ:  l0087_0C9B
l0087_0C8A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0087_0C9B
l0087_0C9B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	bx = Mem0[ss:bp + 0x0008:word16]
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l0087_0CD8
	// succ:  l0087_0CAB l0087_0CD8
l0087_0CAB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp + 0x0006:word16]
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0087_0CB5
l0087_0CB5:
	branch cx == 0x0000 l0087_0CB7
	// succ:  l0087_0CB5_1 l0087_0CB7
l0087_0CB5_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0087_0CB5
	// succ:  l0087_0CB7 l0087_0CB5
l0087_0CB7:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	cx = cx + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp + 0x0008:word16]
	ax = Mem0[ds:bx + 0x0002:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	// succ:  l0087_0CD8
l0087_0CD8:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0087_0A36_exit
fn0087_0A36_exit:


// fn0087_0F00
// Return size: 4
void fn0087_0F00()
fn0087_0F00_entry:
	// succ:  l0087_0F00
l0087_0F00:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x011C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000E:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = 0x4C2A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4958:word16]
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0010:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0087_0F3B
	// succ:  l0087_0F38 l0087_0F3B
l0087_0F38:
	goto l0087_1422
	// succ:  l0087_1422
l0087_0F3B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D82:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0014:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	bx = Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0087_0FB4
	// succ:  l0087_0F65 l0087_0FB4
l0087_0F65:
	ax = 0x0315
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0087_0F74
l0087_0F74:
	branch cx == 0x0000 l0087_0F76
	// succ:  l0087_0F74_1 l0087_0F76
l0087_0F74_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0087_0F74
	// succ:  l0087_0F76 l0087_0F74
l0087_0F76:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	si = cx
	ax = bp - 0x011C + si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	bx = Mem0[ss:bp - 0x000A:word16]
	bx = Mem0[ds:bx + 0x0006:word16]
	si = Mem0[ds:bx:word16]
	di = si
	si = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0087_0F9A
l0087_0F9A:
	branch cx == 0x0000 l0087_0F9C
	// succ:  l0087_0F9A_2 l0087_0F9C
l0087_0F9A_2:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0087_0F9A
	// succ:  l0087_0F9C l0087_0F9A
l0087_0F9C:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	bx = cx
	v17 = si
	si = di
	di = v17
	cx = 0xFFFF
	// succ:  l0087_0FA7
l0087_0FA7:
	branch cx == 0x0000 l0087_0FA9
	// succ:  l0087_0FA7_3 l0087_0FA9
l0087_0FA7_3:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0087_0FA7
	// succ:  l0087_0FA9 l0087_0FA7
l0087_0FA9:
	di = di - 0x0001
	SZO = cond(di)
	cx = bx
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0087_0FAE
l0087_0FAE:
	branch cx == 0x0000 l0087_0FB0
	// succ:  l0087_0FAE_4 l0087_0FB0
l0087_0FAE_4:
	v18 = Mem0[si:word16]
	Mem0[di:word16] = v18
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0087_0FAE
	// succ:  l0087_0FAE
l0087_0FB0:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0087_0FB2
l0087_0FB2:
	branch cx == 0x0000 l0087_0FB4
	// succ:  l0087_0FB2_1 l0087_0FB4
l0087_0FB2_1:
	v21 = Mem0[si:byte]
	Mem0[di:byte] = v21
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0087_0FB2
	// succ:  l0087_0FB2
l0087_0FB4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0087_0FC8
l0087_0FC8:
	branch cx == 0x0000 l0087_0FCA
	// succ:  l0087_0FC8_1 l0087_0FCA
l0087_0FC8_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0087_0FC8
	// succ:  l0087_0FCA l0087_0FC8
l0087_0FCA:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetTextExtent(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	cx = ax
	Mem0[ds:0x4C2C:word16] = dx
	Mem0[ss:bp - 0x000C:word16] = cx
	Mem0[ss:bp - 0x000E:word16] = dx
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_523A (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:0x4C2A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0087_0FF3
	// succ:  l0087_0FF0 l0087_0FF3
l0087_0FF0:
	goto l0087_13F3
	// succ:  l0087_13F3
l0087_0FF3:
	si = 0x4C2E
	dx = Mem0[ss:bp + 0x0006:word16]
	SZO = cond(dl & 0x03)
	C = false
	branch Test(NE,Z) l0087_1001
	// succ:  l0087_0FFE l0087_1001
l0087_0FFE:
	goto l0087_10DE
	// succ:  l0087_10DE
l0087_1001:
	di = di - di
	SCZO = cond(di)
	SZO = cond(dl & 0x01)
	C = false
	branch Test(EQ,Z) l0087_101C
	// succ:  l0087_1008 l0087_101C
l0087_1008:
	di = 0x0060
	bx = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0002:word16]
	call fn0177_1A74 (retsize: 4;)
	sp = sp + 0x0004
	goto l0087_1072
	// succ:  l0087_1072
l0087_101C:
	SZO = cond(dl & 0x02)
	C = false
	branch Test(EQ,Z) l0087_1078
	// succ:  l0087_1021 l0087_1078
l0087_1021:
	bx = Mem0[ss:bp - 0x000A:word16]
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:bx + 0x0001:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_0B2E (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0087_1078
	// succ:  l0087_1036 l0087_1078
l0087_1036:
	bx = Mem0[ss:bp - 0x000A:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0087_104C
	// succ:  l0087_103F l0087_104C
l0087_103F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0087_1067
	// succ:  l0087_104C l0087_1067
l0087_104C:
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0x0003)
	branch Test(EQ,Z) l0087_1067
	// succ:  l0087_1053 l0087_1067
l0087_1053:
	bx = Mem0[ss:bp - 0x000A:word16]
	ax = Mem0[ds:bx + 0x0004:word16]
	ax = ax | Mem0[ds:bx + 0x0002:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0087_1078
	// succ:  l0087_105E l0087_1078
l0087_105E:
	al = Mem0[ds:bx + 0x0009:byte]
	al = al & 0x06
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x04)
	branch Test(EQ,Z) l0087_1078
	// succ:  l0087_1067 l0087_1078
l0087_1067:
	di = 0x0061
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn0147_2A9C (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0087_1072
l0087_1072:
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	// succ:  l0087_1078
l0087_1078:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0087_10DE
	// succ:  l0087_107C l0087_10DE
l0087_107C:
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0087_10A6
l0087_10A6:
	branch cx == 0x0000 l0087_10A8
	// succ:  l0087_10A6_1 l0087_10A8
l0087_10A6_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0087_10A6
	// succ:  l0087_10A8 l0087_10A6
l0087_10A8:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetTextExtent(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	cx = ax
	Mem0[ds:si + 0x0002:word16] = dx
	cx = cx - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(cx)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ~ax
	cx = cx & ax
	SZO = cond(cx)
	C = false
	cx = cx + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(cx)
	Mem0[ss:bp - 0x000C:word16] = cx
	v24 = Mem0[ss:bp - 0x000E:word16] + dx
	Mem0[ss:bp - 0x000E:word16] = v24
	SCZO = cond(v24)
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_523A (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:si:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0087_10DB
	// succ:  l0087_10D8 l0087_10DB
l0087_10D8:
	goto l0087_13F3
	// succ:  l0087_13F3
l0087_10DB:
	si = si + 0x0004
	SCZO = cond(si)
	// succ:  l0087_10DE
l0087_10DE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = bp - 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0000 (retsize: 4;)
	sp = sp + 0x0006
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x004B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0016:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0087_111F
l0087_111F:
	branch cx == 0x0000 l0087_1121
	// succ:  l0087_111F_1 l0087_1121
l0087_111F_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0087_111F
	// succ:  l0087_1121 l0087_111F
l0087_1121:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetTextExtent(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	cx = ax
	Mem0[ds:si + 0x0002:word16] = dx
	cx = cx - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(cx)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ~ax
	cx = cx & ax
	SZO = cond(cx)
	C = false
	cx = cx + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(cx)
	Mem0[ss:bp - 0x000C:word16] = cx
	v23 = Mem0[ss:bp - 0x000E:word16] + dx
	Mem0[ss:bp - 0x000E:word16] = v23
	SCZO = cond(v23)
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_523A (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:si:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0087_1154
	// succ:  l0087_1151 l0087_1154
l0087_1151:
	goto l0087_13F3
	// succ:  l0087_13F3
l0087_1154:
	si = si + 0x0004
	SCZO = cond(si)
	bx = Mem0[ss:bp - 0x000A:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(NE,Z) l0087_1163
	// succ:  l0087_1160 l0087_1163
l0087_1160:
	goto l0087_1348
	// succ:  l0087_1348
l0087_1163:
	ax = bx
	Mem0[ss:bp - 0x0012:word16] = ax
	cx = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0058
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	bx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0016:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x001A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0087_119B
l0087_119B:
	branch cx == 0x0000 l0087_119D
	// succ:  l0087_119B_1 l0087_119D
l0087_119B_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0087_119B
	// succ:  l0087_119D l0087_119B
l0087_119D:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetTextExtent(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	cx = ax
	Mem0[ds:si + 0x0002:word16] = dx
	cx = cx - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(cx)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ~ax
	cx = cx & ax
	SZO = cond(cx)
	C = false
	cx = cx + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(cx)
	Mem0[ss:bp - 0x000C:word16] = cx
	v31 = Mem0[ss:bp - 0x000E:word16] + dx
	Mem0[ss:bp - 0x000E:word16] = v31
	SCZO = cond(v31)
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_523A (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:si:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0087_11D0
	// succ:  l0087_11CD l0087_11D0
l0087_11CD:
	goto l0087_13F3
	// succ:  l0087_13F3
l0087_11D0:
	si = si + 0x0004
	SCZO = cond(si)
	bx = Mem0[ss:bp - 0x0012:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l0087_1244
	// succ:  l0087_11DC l0087_1244
l0087_11DC:
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0059
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	bx = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x001C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x001E:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0087_120C
l0087_120C:
	branch cx == 0x0000 l0087_120E
	// succ:  l0087_120C_1 l0087_120E
l0087_120C_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0087_120C
	// succ:  l0087_120E l0087_120C
l0087_120E:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetTextExtent(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	cx = ax
	Mem0[ds:si + 0x0002:word16] = dx
	cx = cx - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(cx)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ~ax
	cx = cx & ax
	SZO = cond(cx)
	C = false
	cx = cx + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(cx)
	Mem0[ss:bp - 0x000C:word16] = cx
	v32 = Mem0[ss:bp - 0x000E:word16] + dx
	Mem0[ss:bp - 0x000E:word16] = v32
	SCZO = cond(v32)
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_523A (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:si:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0087_1241
	// succ:  l0087_123E l0087_1241
l0087_123E:
	goto l0087_13F3
	// succ:  l0087_13F3
l0087_1241:
	si = si + 0x0004
	SCZO = cond(si)
	// succ:  l0087_1244
l0087_1244:
	bx = Mem0[ss:bp - 0x0012:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l0087_12B5
	// succ:  l0087_124D l0087_12B5
l0087_124D:
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x005A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	bx = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0020:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0022:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0087_127D
l0087_127D:
	branch cx == 0x0000 l0087_127F
	// succ:  l0087_127D_1 l0087_127F
l0087_127D_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0087_127D
	// succ:  l0087_127F l0087_127D
l0087_127F:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetTextExtent(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	cx = ax
	Mem0[ds:si + 0x0002:word16] = dx
	cx = cx - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(cx)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ~ax
	cx = cx & ax
	SZO = cond(cx)
	C = false
	cx = cx + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(cx)
	Mem0[ss:bp - 0x000C:word16] = cx
	v33 = Mem0[ss:bp - 0x000E:word16] + dx
	Mem0[ss:bp - 0x000E:word16] = v33
	SCZO = cond(v33)
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_523A (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:si:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0087_12B2
	// succ:  l0087_12AF l0087_12B2
l0087_12AF:
	goto l0087_13F3
	// succ:  l0087_13F3
l0087_12B2:
	si = si + 0x0004
	SCZO = cond(si)
	// succ:  l0087_12B5
l0087_12B5:
	bx = Mem0[ss:bp - 0x0012:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x10)
	branch Test(EQ,Z) l0087_12C0
	// succ:  l0087_12BD l0087_12C0
l0087_12BD:
	goto l0087_13F3
	// succ:  l0087_13F3
l0087_12C0:
	SCZO = cond(Mem0[ds:bx + 0x0001:byte] - 0x0D)
	branch Test(EQ,Z) l0087_12C9
	// succ:  l0087_12C6 l0087_12C9
l0087_12C6:
	goto l0087_13F3
	// succ:  l0087_13F3
l0087_12C9:
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	ax = bx
	ax = ax + 0x002B
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	// succ:  l0087_12D6
l0087_12D6:
	bx = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0087_1300
l0087_1300:
	branch cx == 0x0000 l0087_1302
	// succ:  l0087_1300_1 l0087_1302
l0087_1300_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0087_1300
	// succ:  l0087_1302 l0087_1300
l0087_1302:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetTextExtent(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	cx = ax
	Mem0[ds:si + 0x0002:word16] = dx
	cx = cx - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(cx)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ~ax
	cx = cx & ax
	SZO = cond(cx)
	C = false
	cx = cx + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(cx)
	Mem0[ss:bp - 0x000C:word16] = cx
	v34 = Mem0[ss:bp - 0x000E:word16] + dx
	Mem0[ss:bp - 0x000E:word16] = v34
	SCZO = cond(v34)
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_523A (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:si:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0087_1335
	// succ:  l0087_1332 l0087_1335
l0087_1332:
	goto l0087_13F3
	// succ:  l0087_13F3
l0087_1335:
	si = si + 0x0004
	SCZO = cond(si)
	v35 = Mem0[ss:bp - 0x0006:word16] + 0x0005
	Mem0[ss:bp - 0x0006:word16] = v35
	SCZO = cond(v35)
	v36 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v36
	SZO = cond(v36)
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0004)
	branch Test(LT,SO) l0087_12D6
	// succ:  l0087_1345 l0087_12D6
l0087_1345:
	goto l0087_13F3
	// succ:  l0087_13F3
l0087_1348:
	Mem0[ss:bp - 0x0008:word16] = si
	di = bx
	SZO = cond(Mem0[ds:di + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0087_1363
	// succ:  l0087_1353 l0087_1363
l0087_1353:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0087_1363
	// succ:  l0087_1360 l0087_1363
l0087_1360:
	goto l0087_13F3
	// succ:  l0087_13F3
l0087_1363:
	si = di + 0x000C
	dl = Mem0[ds:di + 0x000A:byte]
	dx = dx & 0x000F
	SZO = cond(dx)
	C = false
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(LE,SZO) l0087_13F3
	// succ:  l0087_1375 l0087_13F3
l0087_1375:
	Mem0[ss:bp - 0x0012:word16] = dx
	// succ:  l0087_1378
l0087_1378:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0087_0A36 (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(Mem0[ss:bp - 0x011C:byte] - 0x00)
	branch Test(EQ,Z) l0087_13E5
	// succ:  l0087_138C l0087_13E5
l0087_138C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0087_13A0
l0087_13A0:
	branch cx == 0x0000 l0087_13A2
	// succ:  l0087_13A0_1 l0087_13A2
l0087_13A0_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0087_13A0
	// succ:  l0087_13A2 l0087_13A0
l0087_13A2:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetTextExtent(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	cx = ax
	di = Mem0[ss:bp - 0x0008:word16]
	Mem0[ds:di + 0x0002:word16] = dx
	cx = cx - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(cx)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ~ax
	cx = cx & ax
	SZO = cond(cx)
	C = false
	cx = cx + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(cx)
	Mem0[ss:bp - 0x000C:word16] = cx
	v26 = Mem0[ss:bp - 0x000E:word16] + dx
	Mem0[ss:bp - 0x000E:word16] = v26
	SCZO = cond(v26)
	ax = bp - 0x011C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_523A (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:di:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0087_13F3
	// succ:  l0087_13D5 l0087_13F3
l0087_13D5:
	v27 = Mem0[ss:bp - 0x0008:word16] + 0x0004
	Mem0[ss:bp - 0x0008:word16] = v27
	SCZO = cond(v27)
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0087_13E5
	// succ:  l0087_13DF l0087_13E5
l0087_13DF:
	si = si + 0x000A
	SCZO = cond(si)
	v28 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v28
	SZO = cond(v28)
	// succ:  l0087_13E5
l0087_13E5:
	si = si + 0x000A
	SCZO = cond(si)
	ax = Mem0[ss:bp - 0x0012:word16]
	v29 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v29
	SZO = cond(v29)
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - ax)
	branch Test(LT,SO) l0087_1378
	// succ:  l0087_13F3 l0087_1378
l0087_13F3:
	SCZO = cond(Mem0[ss:bp - 0x0014:word16] - 0x0000)
	branch Test(EQ,Z) l0087_1404
	SCZO = cond(Mem0[ss:bp - 0x0014:word16] - 0x0000)
	branch Test(EQ,Z) l0087_1404
	// succ:  l0087_13F9 l0087_1404
l0087_13F9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0087_1404
l0087_1404:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4958:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x000C:word16]
	dx = Mem0[ss:bp - 0x000E:word16]
	goto l0087_142D
	// succ:  l0087_142D
l0087_1422:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (int32) ax
	// succ:  l0087_142D
l0087_142D:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0087_0F00_exit
fn0087_0F00_exit:


// fn0087_143A
// Return size: 4
void fn0087_143A()
fn0087_143A_entry:
	// succ:  l0087_143A
l0087_143A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = 0x030E
	SCZO = cond(Mem0[ds:0x4914:word16] - 0xFFFF)
	branch Test(NE,Z) l0087_1482
	// succ:  l0087_1453 l0087_1482
l0087_1453:
	si = Mem0[ds:0x4156:word16]
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	cx = Mem0[ds:bx + 0x002B + si:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(NE,Z) l0087_146F
	// succ:  l0087_146C l0087_146F
l0087_146C:
	goto l0087_1538
	// succ:  l0087_1538
l0087_146F:
	si = Mem0[ss:bp - 0x0008:word16]
	// succ:  l0087_1472
l0087_1472:
	bx = cx
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0008:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l0087_14C6
	// succ:  l0087_147C l0087_14C6
l0087_147C:
	di = 0x0310
	goto l0087_1538
	// succ:  l0087_1538
l0087_1482:
	ax = 0x0011
	dx_ax = Mem0[ds:0x4914:word16] *s ax
	SCZO = cond(dx_ax)
	si = ax
	si = si + 0x4B60
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:si + 0x000D:word16] - 0xFFFF)
	branch Test(NE,Z) l0087_1498
	// succ:  l0087_1495 l0087_1498
l0087_1495:
	goto l0087_1538
	// succ:  l0087_1538
l0087_1498:
	bx = Mem0[ds:si + 0x000F:word16]
	ax = Mem0[ds:bx:word16]
	bx = Mem0[ds:si + 0x000D:word16]
	dx = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + dx
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	cx = Mem0[ds:bx + 0x002B:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(NE,Z) l0087_14B4
	// succ:  l0087_14B1 l0087_14B4
l0087_14B1:
	goto l0087_1538
	// succ:  l0087_1538
l0087_14B4:
	SZO = cond(Mem0[ds:si + 0x000B:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0087_1472
	// succ:  l0087_14BA l0087_1472
l0087_14BA:
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0xFFFF)
	branch Test(EQ,Z) l0087_1472
	// succ:  l0087_14C1 l0087_1472
l0087_14C1:
	di = 0x030F
	goto l0087_1538
	// succ:  l0087_1538
l0087_14C6:
	Mem0[ds:0x3D66:word16] = cx
	ax = 0x1236
	dx = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	di = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0087_152F
	// succ:  l0087_14E4 l0087_152F
l0087_14E4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0132
	dx_ax = (word32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x000C:word16] = di
	Mem0[ss:bp - 0x000A:word16] = ax
	DialogBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	FreeProcInstance(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	SCZO = cond(Mem0[ds:0x4914:word16] - 0xFFFF)
	branch Test(NE,Z) l0087_1520
	// succ:  l0087_1514 l0087_1520
l0087_1514:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4156:word16]
	call fn0077_0C76 (retsize: 4;)
	sp = sp + 0x0002
	goto l0087_152F
	// succ:  l0087_152F
l0087_1520:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l0087_152F
l0087_152F:
	Mem0[ds:0x3D66:word16] = 0x0000
	goto l0087_1549
	// succ:  l0087_1549
l0087_1538:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x030D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D72 (retsize: 4;)
	sp = sp + 0x0008
	// succ:  l0087_1549
l0087_1549:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0087_143A_exit
fn0087_143A_exit:


// CASTLE
// Return size: 4
void CASTLE()
CASTLE_entry:
	// succ:  l0097_0000
l0097_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0022
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0110
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_001E
	// succ:  l0097_0016 l0097_001E
l0097_0016:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_005C
	// succ:  l0097_0019 l0097_005C
l0097_0019:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0097_0077
	// succ:  l0097_0077
l0097_001E:
	si = Mem0[ss:bp + 0x000E:word16]
	ax = 0x03FD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	ax = 0x03FE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0101
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	goto l0097_0074
	// succ:  l0097_0074
l0097_005C:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - 0x0001
	SCZO = cond(ax)
	branch Test(ULT,C) l0097_0019
	// succ:  l0097_0064 l0097_0019
l0097_0064:
	ax = ax - 0x0001
	SCZO = cond(ax)
	branch Test(UGT,CZ) l0097_0019
	// succ:  l0097_0069 l0097_0019
l0097_0069:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndDialog(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0097_0074
l0097_0074:
	ax = 0x0001
	// succ:  l0097_0077
l0097_0077:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  CASTLE_exit
CASTLE_exit:


// OPTIONSDLGPROC
// Return size: 4
void OPTIONSDLGPROC()
OPTIONSDLGPROC_entry:
	// succ:  l0097_00A2
l0097_00A2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0110
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_00CF
	// succ:  l0097_00B7 l0097_00CF
l0097_00B7:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_00BE
	// succ:  l0097_00BA l0097_00BE
l0097_00BA:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0097_00D2
	// succ:  l0097_00D2
l0097_00BE:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0097_00BA
	// succ:  l0097_00C4 l0097_00BA
l0097_00C4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndDialog(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0097_00CF
l0097_00CF:
	ax = 0x0001
	// succ:  l0097_00D2
l0097_00D2:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  OPTIONSDLGPROC_exit
OPTIONSDLGPROC_exit:


// SELECTOBJDLGPROC
// Return size: 4
void SELECTOBJDLGPROC()
SELECTOBJDLGPROC_entry:
	// succ:  l0097_00DC
l0097_00DC:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x005A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0110
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_00FA
	// succ:  l0097_00F2 l0097_00FA
l0097_00F2:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_0170
	// succ:  l0097_00F5 l0097_0170
l0097_00F5:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0097_0191
	// succ:  l0097_0191
l0097_00FA:
	si = Mem0[ss:bp + 0x000E:word16]
	ax = 0x03FD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x005A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x005A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	ax = 0x03FE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x005A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0101
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x005A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	cx = ax
	ax = ax - Mem0[ds:0x4124:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax - Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	dx = ax
	ax = ax - Mem0[ds:0x4126:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveWindow(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	goto l0097_018E
	// succ:  l0097_018E
l0097_0170:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - 0x0001
	SCZO = cond(ax)
	branch Test(UGE,C) l0097_017B
	// succ:  l0097_0178 l0097_017B
l0097_0178:
	goto l0097_00F5
	// succ:  l0097_00F5
l0097_017B:
	ax = ax - 0x0001
	SCZO = cond(ax)
	branch Test(ULE,CZ) l0097_0183
	// succ:  l0097_0180 l0097_0183
l0097_0180:
	goto l0097_00F5
	// succ:  l0097_00F5
l0097_0183:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndDialog(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0097_018E
l0097_018E:
	ax = 0x0001
	// succ:  l0097_0191
l0097_0191:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  SELECTOBJDLGPROC_exit
SELECTOBJDLGPROC_exit:


// fn0097_019C
// Return size: 4
void fn0097_019C()
fn0097_019C_entry:
	// succ:  l0097_019C
l0097_019C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:0x3D66:word16] = ax
	ax = 0x0210
	dx = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	di = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0097_0200
	// succ:  l0097_01CB l0097_0200
l0097_01CB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0131
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetActiveWindow()
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x000A:word16] = di
	Mem0[ss:bp - 0x0008:word16] = ax
	DialogBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	FreeProcInstance(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	Mem0[ds:0x3D66:word16] = 0x0000
	goto l0097_0202
	// succ:  l0097_0202
l0097_0200:
	si = si - si
	SCZO = cond(si)
	// succ:  l0097_0202
l0097_0202:
	ax = si
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0097_019C_exit
fn0097_019C_exit:


// INVENTORYWNDPROC
// Return size: 4
void INVENTORYWNDPROC()
INVENTORYWNDPROC_entry:
	// succ:  l0097_0210
l0097_0210:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0052
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0110
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_0230
	// succ:  l0097_0227 l0097_0230
l0097_0227:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_023E
	// succ:  l0097_022A l0097_023E
l0097_022A:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0097_02BC
	// succ:  l0097_02BC
l0097_0230:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D66:word16]
	sp = sp - 0x0002
	call fn0097_02C8 (retsize: 2;)
	sp = sp + 0x0004
	goto l0097_02B9
	// succ:  l0097_02B9
l0097_023E:
	ax = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax - 0x0064)
	branch Test(EQ,Z) l0097_0256
	// succ:  l0097_0246 l0097_0256
l0097_0246:
	branch Test(UGT,CZ) l0097_022A
	// succ:  l0097_0248 l0097_022A
l0097_0248:
	al = al - 0x01
	SZO = cond(al)
	branch Test(EQ,Z) l0097_025C
	// succ:  l0097_024C l0097_025C
l0097_024C:
	al = al - 0x01
	SZO = cond(al)
	branch Test(NE,Z) l0097_022A
	// succ:  l0097_0250 l0097_022A
l0097_0250:
	si = Mem0[ss:bp + 0x000E:word16]
	goto l0097_02B0
	// succ:  l0097_02B0
l0097_0256:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0002)
	branch Test(NE,Z) l0097_02B9
	// succ:  l0097_025C l0097_02B9
l0097_025C:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0409
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	di = ax
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l0097_02A2
	// succ:  l0097_0279 l0097_02A2
l0097_0279:
	ax = 0x037B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	SCZO = cond(ax - 0x0006)
	branch Test(NE,Z) l0097_02B9
	// succ:  l0097_029F l0097_02B9
l0097_029F:
	goto l0097_02B0
	// succ:  l0097_02B0
l0097_02A2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D66:word16]
	sp = sp - 0x0002
	call fn0097_0708 (retsize: 2;)
	sp = sp + 0x0006
	goto l0097_02B3
	// succ:  l0097_02B3
l0097_02B0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0097_02B3
l0097_02B3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndDialog(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0097_02B9
l0097_02B9:
	ax = 0x0001
	// succ:  l0097_02BC
l0097_02BC:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  INVENTORYWNDPROC_exit
INVENTORYWNDPROC_exit:


// fn0097_02C8
// Return size: 4
void fn0097_02C8()
fn0097_02C8_entry:
	// succ:  l0097_02C8
l0097_02C8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0212
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	ax = si + 0x0073
	Mem0[ss:bp - 0x0006:word16] = ax
	cx = si + 0x0028
	Mem0[ss:bp - 0x0004:word16] = cx
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	SCZO = cond(cx - ax)
	branch Test(ULT,C) l0097_02FB
	// succ:  l0097_02F8 l0097_02FB
l0097_02F8:
	goto l0097_03AD
	// succ:  l0097_03AD
l0097_02FB:
	Mem0[ss:bp - 0x000E:word16] = si
	di = 0x01D2
	si = cx
	// succ:  l0097_0303
l0097_0303:
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - 0x0000)
	branch Test(NE,Z) l0097_030C
	// succ:  l0097_0309 l0097_030C
l0097_0309:
	goto l0097_039C
	// succ:  l0097_039C
l0097_030C:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0097_0339
	// succ:  l0097_0312 l0097_0339
l0097_0312:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0097_039C
	// succ:  l0097_031D l0097_039C
l0097_031D:
	bx = Mem0[ds:si + 0x0003:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_0339
	// succ:  l0097_032E l0097_0339
l0097_032E:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0008:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l0097_039C
	// succ:  l0097_0339 l0097_039C
l0097_0339:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l0097_0358
	// succ:  l0097_033F l0097_0358
l0097_033F:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx + 0x0009:byte]
	al = al & 0x06
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x04)
	branch Test(NE,Z) l0097_039C
	// succ:  l0097_034D l0097_039C
l0097_034D:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0097_039C
	// succ:  l0097_0358 l0097_039C
l0097_0358:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0003:word16]
	ax = bp - 0x010E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x020E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0040
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di:word16]
	cx = bp - 0x010E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x020E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	// succ:  l0097_039C
l0097_039C:
	di = di + 0x000A
	SCZO = cond(di)
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x0006:word16])
	branch Test(UGE,C) l0097_03AA
	// succ:  l0097_03A7 l0097_03AA
l0097_03A7:
	goto l0097_0303
	// succ:  l0097_0303
l0097_03AA:
	si = Mem0[ss:bp - 0x000E:word16]
	// succ:  l0097_03AD
l0097_03AD:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0097_03B6
	// succ:  l0097_03B3 l0097_03B6
l0097_03B3:
	goto l0097_04AD
	// succ:  l0097_04AD
l0097_03B6:
	SCZO = cond(Mem0[ds:si + 0x003F:word16] - 0x0000)
	branch Test(NE,Z) l0097_03BF
	// succ:  l0097_03BC l0097_03BF
l0097_03BC:
	goto l0097_04AD
	// succ:  l0097_04AD
l0097_03BF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x003F:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	SCZO = cond(Mem0[ds:di:byte] - 0x0F)
	branch Test(EQ,Z) l0097_03D1
	// succ:  l0097_03CE l0097_03D1
l0097_03CE:
	goto l0097_04A5
	// succ:  l0097_04A5
l0097_03D1:
	cx = di + 0x0028
	Mem0[ss:bp - 0x0008:word16] = 0x0001
	ax = Mem0[ds:di + 0x0026:word16]
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	di = di + ax
	SCZO = cond(di)
	di = di + 0x0028
	SCZO = cond(di)
	Mem0[ss:bp - 0x0006:word16] = di
	SCZO = cond(di - cx)
	branch Test(UGT,CZ) l0097_03F3
	// succ:  l0097_03F0 l0097_03F3
l0097_03F0:
	goto l0097_04A5
	// succ:  l0097_04A5
l0097_03F3:
	Mem0[ss:bp - 0x000E:word16] = si
	Mem0[ss:bp - 0x0004:word16] = cx
	si = cx
	di = Mem0[ss:bp - 0x0008:word16]
	// succ:  l0097_03FE
l0097_03FE:
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - 0x0000)
	branch Test(NE,Z) l0097_0407
	// succ:  l0097_0404 l0097_0407
l0097_0404:
	goto l0097_0496
	// succ:  l0097_0496
l0097_0407:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0097_0434
	// succ:  l0097_040D l0097_0434
l0097_040D:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0097_0496
	// succ:  l0097_0418 l0097_0496
l0097_0418:
	bx = Mem0[ds:si + 0x0003:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_0434
	// succ:  l0097_0429 l0097_0434
l0097_0429:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0008:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l0097_0496
	// succ:  l0097_0434 l0097_0496
l0097_0434:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l0097_0453
	// succ:  l0097_043A l0097_0453
l0097_043A:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx + 0x0009:byte]
	al = al & 0x06
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x04)
	branch Test(NE,Z) l0097_0496
	// succ:  l0097_0448 l0097_0496
l0097_0448:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0097_0496
	// succ:  l0097_0453 l0097_0496
l0097_0453:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0003:word16]
	ax = bp - 0x010E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x020E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0041
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cx = bp - 0x010E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x020E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	// succ:  l0097_0496
l0097_0496:
	di = di + 0x0001
	SZO = cond(di)
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x0006:word16])
	branch Test(UGE,C) l0097_04A2
	// succ:  l0097_049F l0097_04A2
l0097_049F:
	goto l0097_03FE
	// succ:  l0097_03FE
l0097_04A2:
	si = Mem0[ss:bp - 0x000E:word16]
	// succ:  l0097_04A5
l0097_04A5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x003F:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0097_04AD
l0097_04AD:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x08)
	C = false
	branch Test(NE,Z) l0097_04B6
	// succ:  l0097_04B3 l0097_04B6
l0097_04B3:
	goto l0097_05AD
	// succ:  l0097_05AD
l0097_04B6:
	SCZO = cond(Mem0[ds:si + 0x006C:word16] - 0x0000)
	branch Test(NE,Z) l0097_04BF
	// succ:  l0097_04BC l0097_04BF
l0097_04BC:
	goto l0097_05AD
	// succ:  l0097_05AD
l0097_04BF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x006C:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	SCZO = cond(Mem0[ds:di:byte] - 0x10)
	branch Test(EQ,Z) l0097_04D1
	// succ:  l0097_04CE l0097_04D1
l0097_04CE:
	goto l0097_05A5
	// succ:  l0097_05A5
l0097_04D1:
	cx = di + 0x0028
	Mem0[ss:bp - 0x0008:word16] = 0x0001
	ax = Mem0[ds:di + 0x0024:word16]
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	di = di + ax
	SCZO = cond(di)
	di = di + 0x0028
	SCZO = cond(di)
	Mem0[ss:bp - 0x0006:word16] = di
	SCZO = cond(di - cx)
	branch Test(UGT,CZ) l0097_04F3
	// succ:  l0097_04F0 l0097_04F3
l0097_04F0:
	goto l0097_05A5
	// succ:  l0097_05A5
l0097_04F3:
	Mem0[ss:bp - 0x000E:word16] = si
	Mem0[ss:bp - 0x0004:word16] = cx
	si = cx
	di = Mem0[ss:bp - 0x0008:word16]
	// succ:  l0097_04FE
l0097_04FE:
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - 0x0000)
	branch Test(NE,Z) l0097_0507
	// succ:  l0097_0504 l0097_0507
l0097_0504:
	goto l0097_0596
	// succ:  l0097_0596
l0097_0507:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0097_0534
	// succ:  l0097_050D l0097_0534
l0097_050D:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0097_0596
	// succ:  l0097_0518 l0097_0596
l0097_0518:
	bx = Mem0[ds:si + 0x0003:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_0534
	// succ:  l0097_0529 l0097_0534
l0097_0529:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0008:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l0097_0596
	// succ:  l0097_0534 l0097_0596
l0097_0534:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l0097_0553
	// succ:  l0097_053A l0097_0553
l0097_053A:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx + 0x0009:byte]
	al = al & 0x06
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x04)
	branch Test(NE,Z) l0097_0596
	// succ:  l0097_0548 l0097_0596
l0097_0548:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0097_0596
	// succ:  l0097_0553 l0097_0596
l0097_0553:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0003:word16]
	ax = bp - 0x010E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x020E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0063
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cx = bp - 0x010E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x020E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	// succ:  l0097_0596
l0097_0596:
	di = di + 0x0001
	SZO = cond(di)
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x0006:word16])
	branch Test(UGE,C) l0097_05A2
	// succ:  l0097_059F l0097_05A2
l0097_059F:
	goto l0097_04FE
	// succ:  l0097_04FE
l0097_05A2:
	si = Mem0[ss:bp - 0x000E:word16]
	// succ:  l0097_05A5
l0097_05A5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x006C:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0097_05AD
l0097_05AD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x04)
	C = false
	branch Test(NE,Z) l0097_05BF
	// succ:  l0097_05BC l0097_05BF
l0097_05BC:
	goto l0097_06FB
	// succ:  l0097_06FB
l0097_05BF:
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_05E6
	// succ:  l0097_05E3 l0097_05E6
l0097_05E3:
	goto l0097_06FB
	// succ:  l0097_06FB
l0097_05E6:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + 0x4960
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0212:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = ax
	Mem0[ss:bp - 0x000A:word16] = bx
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	Mem0[ss:bp - 0x0210:word16] = bx
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l0097_060C
	// succ:  l0097_0609 l0097_060C
l0097_0609:
	goto l0097_06F0
	// succ:  l0097_06F0
l0097_060C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	ax = Mem0[ds:si + 0x0024:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	cx = si
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0028
	SCZO = cond(si)
	Mem0[ss:bp - 0x0006:word16] = si
	cx = cx + 0x0028
	SCZO = cond(cx)
	Mem0[ss:bp - 0x0004:word16] = cx
	Mem0[ss:bp - 0x0008:word16] = 0x0001
	SCZO = cond(si - cx)
	branch Test(UGT,CZ) l0097_063C
	// succ:  l0097_0639 l0097_063C
l0097_0639:
	goto l0097_06E5
	// succ:  l0097_06E5
l0097_063C:
	si = cx
	di = Mem0[ss:bp - 0x0008:word16]
	// succ:  l0097_0641
l0097_0641:
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - 0x0000)
	branch Test(NE,Z) l0097_064A
	// succ:  l0097_0647 l0097_064A
l0097_0647:
	goto l0097_06D9
	// succ:  l0097_06D9
l0097_064A:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0097_0677
	// succ:  l0097_0650 l0097_0677
l0097_0650:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0097_06D9
	// succ:  l0097_065B l0097_06D9
l0097_065B:
	bx = Mem0[ds:si + 0x0003:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_0677
	// succ:  l0097_066C l0097_0677
l0097_066C:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0008:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l0097_06D9
	// succ:  l0097_0677 l0097_06D9
l0097_0677:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l0097_0696
	// succ:  l0097_067D l0097_0696
l0097_067D:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx + 0x0009:byte]
	al = al & 0x06
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x04)
	branch Test(NE,Z) l0097_06D9
	// succ:  l0097_068B l0097_06D9
l0097_068B:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0097_06D9
	// succ:  l0097_0696 l0097_06D9
l0097_0696:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0003:word16]
	ax = bp - 0x010E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x020E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x004A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cx = bp - 0x010E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x020E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	// succ:  l0097_06D9
l0097_06D9:
	di = di + 0x0001
	SZO = cond(di)
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x0006:word16])
	branch Test(UGE,C) l0097_06E5
	// succ:  l0097_06E2 l0097_06E5
l0097_06E2:
	goto l0097_0641
	// succ:  l0097_0641
l0097_06E5:
	bx = Mem0[ss:bp - 0x0210:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0097_06F0
l0097_06F0:
	bx = Mem0[ss:bp - 0x0212:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0097_06FB
l0097_06FB:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0097_02C8_exit
fn0097_02C8_exit:


// fn0097_0708
// Return size: 4
void fn0097_0708()
fn0097_0708_entry:
	// succ:  l0097_0708
l0097_0708:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0018
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ds:0x4DEA:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	cx = ax
	ax = ax + 0x0073
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	cx = cx + 0x0028
	SCZO = cond(cx)
	si = cx
	Mem0[ss:bp - 0x0008:word16] = 0xFFFF
	SCZO = cond(cx - ax)
	branch Test(UGE,C) l0097_07A8
	// succ:  l0097_0736 l0097_07A8
l0097_0736:
	di = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0097_0739
l0097_0739:
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - 0x0000)
	branch Test(EQ,Z) l0097_0796
	// succ:  l0097_073F l0097_0796
l0097_073F:
	SZO = cond(di & 0x0002)
	C = false
	branch Test(EQ,Z) l0097_076C
	// succ:  l0097_0745 l0097_076C
l0097_0745:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0097_0796
	// succ:  l0097_0750 l0097_0796
l0097_0750:
	bx = Mem0[ds:si + 0x0003:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_076C
	// succ:  l0097_0761 l0097_076C
l0097_0761:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0008:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l0097_0796
	// succ:  l0097_076C l0097_0796
l0097_076C:
	SZO = cond(di & 0x0010)
	C = false
	branch Test(EQ,Z) l0097_078B
	// succ:  l0097_0772 l0097_078B
l0097_0772:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx + 0x0009:byte]
	al = al & 0x06
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x04)
	branch Test(NE,Z) l0097_0796
	// succ:  l0097_0780 l0097_0796
l0097_0780:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0097_0796
	// succ:  l0097_078B l0097_0796
l0097_078B:
	ax = Mem0[ss:bp + 0x0008:word16]
	v16 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v16
	SZO = cond(v16)
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - ax)
	branch Test(EQ,Z) l0097_07A2
	// succ:  l0097_0796 l0097_07A2
l0097_0796:
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x0006:word16])
	branch Test(ULT,C) l0097_0739
	// succ:  l0097_079E l0097_0739
l0097_079E:
	goto l0097_07A8
	// succ:  l0097_07A8
l0097_07A2:
	ax = Mem0[ds:si + 0x0003:word16]
	Mem0[ss:bp - 0x0010:word16] = ax
	// succ:  l0097_07A8
l0097_07A8:
	ax = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - ax)
	branch Test(NE,Z) l0097_07B3
	// succ:  l0097_07B0 l0097_07B3
l0097_07B0:
	goto l0097_0862
	// succ:  l0097_0862
l0097_07B3:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0097_07BC
	// succ:  l0097_07B9 l0097_07BC
l0097_07B9:
	goto l0097_0862
	// succ:  l0097_0862
l0097_07BC:
	bx = Mem0[ss:bp - 0x000A:word16]
	ax = Mem0[ds:bx + 0x003F:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_07C9
	// succ:  l0097_07C6 l0097_07C9
l0097_07C6:
	goto l0097_0862
	// succ:  l0097_0862
l0097_07C9:
	si = ax
	bx = Mem0[ds:si:word16]
	si = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:si:byte] - 0x0F)
	branch Test(EQ,Z) l0097_07D7
	// succ:  l0097_07D4 l0097_07D7
l0097_07D4:
	goto l0097_0862
	// succ:  l0097_0862
l0097_07D7:
	si = bx + 0x0028
	ax = Mem0[ds:bx + 0x0026:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx + 0x0028
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0006:word16] = bx
	SCZO = cond(bx - si)
	branch Test(ULE,CZ) l0097_0862
	// succ:  l0097_07F1 l0097_0862
l0097_07F1:
	di = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0097_07F4
l0097_07F4:
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - 0x0000)
	branch Test(EQ,Z) l0097_0851
	// succ:  l0097_07FA l0097_0851
l0097_07FA:
	SZO = cond(di & 0x0002)
	C = false
	branch Test(EQ,Z) l0097_0827
	// succ:  l0097_0800 l0097_0827
l0097_0800:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0097_0851
	// succ:  l0097_080B l0097_0851
l0097_080B:
	bx = Mem0[ds:si + 0x0003:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_0827
	// succ:  l0097_081C l0097_0827
l0097_081C:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0008:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l0097_0851
	// succ:  l0097_0827 l0097_0851
l0097_0827:
	SZO = cond(di & 0x0010)
	C = false
	branch Test(EQ,Z) l0097_0846
	// succ:  l0097_082D l0097_0846
l0097_082D:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx + 0x0009:byte]
	al = al & 0x06
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x04)
	branch Test(NE,Z) l0097_0851
	// succ:  l0097_083B l0097_0851
l0097_083B:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0097_0851
	// succ:  l0097_0846 l0097_0851
l0097_0846:
	ax = Mem0[ss:bp + 0x0008:word16]
	v22 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v22
	SZO = cond(v22)
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - ax)
	branch Test(EQ,Z) l0097_085C
	// succ:  l0097_0851 l0097_085C
l0097_0851:
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x0006:word16])
	branch Test(ULT,C) l0097_07F4
	// succ:  l0097_0859 l0097_07F4
l0097_0859:
	goto l0097_0862
	// succ:  l0097_0862
l0097_085C:
	ax = Mem0[ds:si + 0x0003:word16]
	Mem0[ss:bp - 0x0010:word16] = ax
	// succ:  l0097_0862
l0097_0862:
	ax = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - ax)
	branch Test(NE,Z) l0097_086D
	// succ:  l0097_086A l0097_086D
l0097_086A:
	goto l0097_091C
	// succ:  l0097_091C
l0097_086D:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x08)
	C = false
	branch Test(NE,Z) l0097_0876
	// succ:  l0097_0873 l0097_0876
l0097_0873:
	goto l0097_091C
	// succ:  l0097_091C
l0097_0876:
	bx = Mem0[ss:bp - 0x000A:word16]
	ax = Mem0[ds:bx + 0x006C:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_0883
	// succ:  l0097_0880 l0097_0883
l0097_0880:
	goto l0097_091C
	// succ:  l0097_091C
l0097_0883:
	si = ax
	bx = Mem0[ds:si:word16]
	si = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:si:byte] - 0x10)
	branch Test(EQ,Z) l0097_0891
	// succ:  l0097_088E l0097_0891
l0097_088E:
	goto l0097_091C
	// succ:  l0097_091C
l0097_0891:
	si = bx + 0x0028
	ax = Mem0[ds:bx + 0x0024:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx + 0x0028
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0006:word16] = bx
	SCZO = cond(bx - si)
	branch Test(ULE,CZ) l0097_091C
	// succ:  l0097_08AB l0097_091C
l0097_08AB:
	di = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0097_08AE
l0097_08AE:
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - 0x0000)
	branch Test(EQ,Z) l0097_090B
	// succ:  l0097_08B4 l0097_090B
l0097_08B4:
	SZO = cond(di & 0x0002)
	C = false
	branch Test(EQ,Z) l0097_08E1
	// succ:  l0097_08BA l0097_08E1
l0097_08BA:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0097_090B
	// succ:  l0097_08C5 l0097_090B
l0097_08C5:
	bx = Mem0[ds:si + 0x0003:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_08E1
	// succ:  l0097_08D6 l0097_08E1
l0097_08D6:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0008:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l0097_090B
	// succ:  l0097_08E1 l0097_090B
l0097_08E1:
	SZO = cond(di & 0x0010)
	C = false
	branch Test(EQ,Z) l0097_0900
	// succ:  l0097_08E7 l0097_0900
l0097_08E7:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx + 0x0009:byte]
	al = al & 0x06
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x04)
	branch Test(NE,Z) l0097_090B
	// succ:  l0097_08F5 l0097_090B
l0097_08F5:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0097_090B
	// succ:  l0097_0900 l0097_090B
l0097_0900:
	ax = Mem0[ss:bp + 0x0008:word16]
	v23 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v23
	SZO = cond(v23)
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - ax)
	branch Test(EQ,Z) l0097_0916
	// succ:  l0097_090B l0097_0916
l0097_090B:
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x0006:word16])
	branch Test(ULT,C) l0097_08AE
	// succ:  l0097_0913 l0097_08AE
l0097_0913:
	goto l0097_091C
	// succ:  l0097_091C
l0097_0916:
	ax = Mem0[ds:si + 0x0003:word16]
	Mem0[ss:bp - 0x0010:word16] = ax
	// succ:  l0097_091C
l0097_091C:
	ax = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - ax)
	branch Test(NE,Z) l0097_0927
	// succ:  l0097_0924 l0097_0927
l0097_0924:
	goto l0097_0A29
	// succ:  l0097_0A29
l0097_0927:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x04)
	C = false
	branch Test(NE,Z) l0097_0930
	// succ:  l0097_092D l0097_0930
l0097_092D:
	goto l0097_0A24
	// succ:  l0097_0A24
l0097_0930:
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_0954
	// succ:  l0097_0951 l0097_0954
l0097_0951:
	goto l0097_0A29
	// succ:  l0097_0A29
l0097_0954:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + 0x4960
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0018:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = ax
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	Mem0[ss:bp - 0x0016:word16] = bx
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l0097_0975
	// succ:  l0097_0972 l0097_0975
l0097_0972:
	goto l0097_0A18
	// succ:  l0097_0A18
l0097_0975:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	ax = Mem0[ds:di + 0x0026:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	cx = di
	di = di + ax
	SCZO = cond(di)
	di = di + 0x0028
	SCZO = cond(di)
	Mem0[ss:bp - 0x0006:word16] = di
	cx = cx + 0x0028
	SCZO = cond(cx)
	SCZO = cond(di - cx)
	branch Test(ULE,CZ) l0097_0A0E
	// succ:  l0097_099A l0097_0A0E
l0097_099A:
	si = cx
	di = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0097_099F
l0097_099F:
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - 0x0000)
	branch Test(EQ,Z) l0097_09FC
	// succ:  l0097_09A5 l0097_09FC
l0097_09A5:
	SZO = cond(di & 0x0002)
	C = false
	branch Test(EQ,Z) l0097_09D2
	// succ:  l0097_09AB l0097_09D2
l0097_09AB:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0097_09FC
	// succ:  l0097_09B6 l0097_09FC
l0097_09B6:
	bx = Mem0[ds:si + 0x0003:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_09D2
	// succ:  l0097_09C7 l0097_09D2
l0097_09C7:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0008:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l0097_09FC
	// succ:  l0097_09D2 l0097_09FC
l0097_09D2:
	SZO = cond(di & 0x0010)
	C = false
	branch Test(EQ,Z) l0097_09F1
	// succ:  l0097_09D8 l0097_09F1
l0097_09D8:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx + 0x0009:byte]
	al = al & 0x06
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x04)
	branch Test(NE,Z) l0097_09FC
	// succ:  l0097_09E6 l0097_09FC
l0097_09E6:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0097_09FC
	// succ:  l0097_09F1 l0097_09FC
l0097_09F1:
	ax = Mem0[ss:bp + 0x0008:word16]
	v24 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v24
	SZO = cond(v24)
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - ax)
	branch Test(EQ,Z) l0097_0A08
	// succ:  l0097_09FC l0097_0A08
l0097_09FC:
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x0006:word16])
	branch Test(ULT,C) l0097_099F
	// succ:  l0097_0A04 l0097_099F
l0097_0A04:
	goto l0097_0A0E
	// succ:  l0097_0A0E
l0097_0A08:
	ax = Mem0[ds:si + 0x0003:word16]
	Mem0[ss:bp - 0x0010:word16] = ax
	// succ:  l0097_0A0E
l0097_0A0E:
	bx = Mem0[ss:bp - 0x0016:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0097_0A18
l0097_0A18:
	bx = Mem0[ss:bp - 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l0097_0A29
	// succ:  l0097_0A29
l0097_0A24:
	Mem0[ss:bp - 0x0010:word16] = 0x0000
	// succ:  l0097_0A29
l0097_0A29:
	ax = Mem0[ss:bp - 0x0010:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0097_0708_exit
fn0097_0708_exit:


// STARTUPWNDPROC
// Return size: 4
void STARTUPWNDPROC()
STARTUPWNDPROC_entry:
	// succ:  l0097_0A38
l0097_0A38:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0012
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0110
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_0A5A
	// succ:  l0097_0A4F l0097_0A5A
l0097_0A4F:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0097_0A55
	// succ:  l0097_0A52 l0097_0A55
l0097_0A52:
	goto l0097_0BC0
	// succ:  l0097_0BC0
l0097_0A55:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0097_0E0A
	// succ:  l0097_0E0A
l0097_0A5A:
	ax = Mem0[ds:0x4CFE:word16]
	SCZO = cond(Mem0[ds:0x4CFC:word16] - ax)
	branch Test(NE,Z) l0097_0ACC
	// succ:  l0097_0A63 l0097_0ACC
l0097_0A63:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00CD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00CE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00CF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00D7
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00D0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CheckRadioButton(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	Mem0[ds:0x0CC2:word16] = 0x00D0
	goto l0097_0AE4
	// succ:  l0097_0AE4
l0097_0ACC:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x00D7
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CheckRadioButton(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	Mem0[ds:0x0CC2:word16] = 0x00CC
	// succ:  l0097_0AE4
l0097_0AE4:
	SCZO = cond(Mem0[ds:0x4CF0:byte] - 0x00)
	branch Test(LT,SO) l0097_0B05
	// succ:  l0097_0AEB l0097_0B05
l0097_0AEB:
	SCZO = cond(Mem0[ds:0x4CF4:byte] - 0x00)
	branch Test(LT,SO) l0097_0B05
	// succ:  l0097_0AF2 l0097_0B05
l0097_0AF2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00D3
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0097_0B05
l0097_0B05:
	SCZO = cond(Mem0[ds:0x4CF1:byte] - 0x00)
	branch Test(LT,SO) l0097_0B26
	// succ:  l0097_0B0C l0097_0B26
l0097_0B0C:
	SCZO = cond(Mem0[ds:0x4CF5:byte] - 0x00)
	branch Test(LT,SO) l0097_0B26
	// succ:  l0097_0B13 l0097_0B26
l0097_0B13:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00D4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0097_0B26
l0097_0B26:
	SCZO = cond(Mem0[ds:0x4CF2:byte] - 0x00)
	branch Test(LT,SO) l0097_0B47
	// succ:  l0097_0B2D l0097_0B47
l0097_0B2D:
	SCZO = cond(Mem0[ds:0x4CF6:byte] - 0x00)
	branch Test(LT,SO) l0097_0B47
	// succ:  l0097_0B34 l0097_0B47
l0097_0B34:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00D5
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0097_0B47
l0097_0B47:
	SCZO = cond(Mem0[ds:0x4CF3:byte] - 0x00)
	branch Test(LT,SO) l0097_0B68
	// succ:  l0097_0B4E l0097_0B68
l0097_0B4E:
	SCZO = cond(Mem0[ds:0x4CF7:byte] - 0x00)
	branch Test(LT,SO) l0097_0B68
	// succ:  l0097_0B55 l0097_0B68
l0097_0B55:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00D6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0097_0B68
l0097_0B68:
	SCZO = cond(Mem0[ds:0x4D2A:word16] - 0x0000)
	branch Test(NE,Z) l0097_0B82
	// succ:  l0097_0B6F l0097_0B82
l0097_0B6F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00D7
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0097_0B82
l0097_0B82:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0504:word16]
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_05B8 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_0B96
	// succ:  l0097_0B93 l0097_0B96
l0097_0B93:
	goto l0097_0E07
	// succ:  l0097_0E07
l0097_0B96:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0506:word16]
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_05B8 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_0BAA
	// succ:  l0097_0BA7 l0097_0BAA
l0097_0BA7:
	goto l0097_0E07
	// succ:  l0097_0E07
l0097_0BAA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00D1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l0097_0E07
	// succ:  l0097_0E07
l0097_0BC0:
	si = Mem0[ss:bp + 0x000A:word16]
	ax = si
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_0BE2
	// succ:  l0097_0BC9 l0097_0BE2
l0097_0BC9:
	ax = ax - 0x00AD
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_0BF0
	// succ:  l0097_0BCE l0097_0BF0
l0097_0BCE:
	ax = ax - 0x001D
	SCZO = cond(ax)
	branch Test(UGE,C) l0097_0BD6
	// succ:  l0097_0BD3 l0097_0BD6
l0097_0BD3:
	goto l0097_0A55
	// succ:  l0097_0A55
l0097_0BD6:
	ax = ax - 0x000B
	SCZO = cond(ax)
	branch Test(UGT,CZ) l0097_0BDE
	// succ:  l0097_0BDB l0097_0BDE
l0097_0BDB:
	goto l0097_0DF2
	// succ:  l0097_0DF2
l0097_0BDE:
	goto l0097_0A55
	// succ:  l0097_0A55
l0097_0BE2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndDialog(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l0097_0E07
	// succ:  l0097_0E07
l0097_0BF0:
	ax = Mem0[ds:0x0CC2:word16]
	ax = ax - 0x00CC
	SCZO = cond(ax)
	SCZO = cond(ax - 0x000B)
	branch Test(UGT,CZ) l0097_0C1C
	// succ:  l0097_0BFB l0097_0C1C
l0097_0BFB:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v16 = ax
	ax = bx
	bx = v16
	switch (ax) { l0097_0C22 l0097_0C3C l0097_0C56 l0097_0C70 l0097_0C88 l0097_0C9E l0097_0CB2 l0097_0CC2 l0097_0CC2 l0097_0CC2 l0097_0CC2 l0097_0D02 }
	// succ:  l0097_0C22 l0097_0C3C l0097_0C56 l0097_0C70 l0097_0C88 l0097_0C9E l0097_0CB2 l0097_0CC2 l0097_0CC2 l0097_0CC2 l0097_0CC2 l0097_0D02
l0097_0C1C:
	di = Mem0[ss:bp - 0x000E:word16]
	goto l0097_0D21
	// succ:  l0097_0D21
l0097_0C22:
	Mem0[ss:bp - 0x0006:word16] = 0x01F4
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	di = 0x0064
	Mem0[ss:bp - 0x000C:word16] = 0x0014
	Mem0[ss:bp - 0x000A:word16] = 0x0008
	goto l0097_0D1C
	// succ:  l0097_0D1C
l0097_0C3C:
	Mem0[ss:bp - 0x0006:word16] = 0x0384
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	di = 0x0064
	Mem0[ss:bp - 0x000C:word16] = 0x0028
	Mem0[ss:bp - 0x000A:word16] = 0x0010
	goto l0097_0D1C
	// succ:  l0097_0D1C
l0097_0C56:
	Mem0[ss:bp - 0x0006:word16] = 0x0578
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	di = 0x0064
	Mem0[ss:bp - 0x000C:word16] = 0x003C
	Mem0[ss:bp - 0x000A:word16] = 0x0018
	goto l0097_0D1C
	// succ:  l0097_0D1C
l0097_0C70:
	Mem0[ss:bp - 0x0006:word16] = 0x09C4
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	di = 0x0064
	Mem0[ss:bp - 0x000C:word16] = di
	Mem0[ss:bp - 0x000A:word16] = 0x0020
	goto l0097_0D1C
	// succ:  l0097_0D1C
l0097_0C88:
	Mem0[ss:bp - 0x0006:word16] = 0x09C4
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	di = 0x0069
	Mem0[ss:bp - 0x000C:word16] = 0x0011
	goto l0097_0D21
	// succ:  l0097_0D21
l0097_0C9E:
	Mem0[ss:bp - 0x0006:word16] = 0x0708
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	di = 0x0078
	// succ:  l0097_0CAB
l0097_0CAB:
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	goto l0097_0D21
	// succ:  l0097_0D21
l0097_0CB2:
	Mem0[ss:bp - 0x0006:word16] = 0x03E8
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	di = 0x007E
	goto l0097_0CAB
	// succ:  l0097_0CAB
l0097_0CC2:
	bx = Mem0[ds:0x0CC2:word16]
	SCZO = cond(Mem0[ds:bx + 0x4C1D:byte] - 0x00)
	branch Test(NE,Z) l0097_0CE9
	// succ:  l0097_0CCD l0097_0CE9
l0097_0CCD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x03FF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x02C1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D72 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(ax - 0x0007)
	branch Test(NE,Z) l0097_0CE9
	// succ:  l0097_0CE6 l0097_0CE9
l0097_0CE6:
	goto l0097_0E07
	// succ:  l0097_0E07
l0097_0CE9:
	Mem0[ss:bp - 0x0006:word16] = 0x0BB8
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	di = Mem0[ds:0x0CC2:word16]
	di = di - 0x0065
	SCZO = cond(di)
	Mem0[ss:bp - 0x000C:word16] = 0x0001
	goto l0097_0D21
	// succ:  l0097_0D21
l0097_0D02:
	Mem0[ss:bp - 0x0006:word16] = 0x0BB8
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	di = 0x000A
	ax = Mem0[ds:0x4D2A:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = 0x0005
	// succ:  l0097_0D1C
l0097_0D1C:
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	// succ:  l0097_0D21
l0097_0D21:
	call fn00F7_16B6 (retsize: 4;)
	si = ax
	Mem0[ss:bp - 0x0012:word16] = si
	Mem0[ss:bp - 0x0010:word16] = dx
	call fn00F7_16E4 (retsize: 4;)
	ax = ax + Mem0[ss:bp - 0x0012:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp - 0x0010:word16] + C
	SCZO = cond(dx)
	SCZO = cond(dx - Mem0[ss:bp - 0x0004:word16])
	branch Test(UGT,CZ) l0097_0D5C
	// succ:  l0097_0D3E l0097_0D5C
l0097_0D3E:
	branch Test(ULT,C) l0097_0D45
	// succ:  l0097_0D40 l0097_0D45
l0097_0D40:
	SCZO = cond(ax - Mem0[ss:bp - 0x0006:word16])
	branch Test(UGE,C) l0097_0D5C
	// succ:  l0097_0D45 l0097_0D5C
l0097_0D45:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0257
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x02C1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0030
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D72 (retsize: 4;)
	sp = sp + 0x0008
	goto l0097_0DAC
	// succ:  l0097_0DAC
l0097_0D5C:
	Mem0[ss:bp - 0x000E:word16] = di
	di = Mem0[ds:0x3D66:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00F7_176A (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_070A (retsize: 4;)
	sp = sp + 0x000C
	SCZO = cond(Mem0[ds:0x0CC2:word16] - 0x00D3)
	branch Test(LT,SO) l0097_0DA8
	// succ:  l0097_0D8B l0097_0DA8
l0097_0D8B:
	SCZO = cond(Mem0[ds:0x0CC2:word16] - 0x00D7)
	branch Test(GT,SZO) l0097_0DA8
	// succ:  l0097_0D93 l0097_0DA8
l0097_0D93:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0CC2:word16]
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0097_0DA8
l0097_0DA8:
	Mem0[ds:0x3D66:word16] = di
	// succ:  l0097_0DAC
l0097_0DAC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00AF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0404
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0001
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0404
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l0097_0E07
	// succ:  l0097_0E07
l0097_0DF2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00D7
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	CheckRadioButton(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	Mem0[ds:0x0CC2:word16] = si
	// succ:  l0097_0E07
l0097_0E07:
	ax = 0x0001
	// succ:  l0097_0E0A
l0097_0E0A:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  STARTUPWNDPROC_exit
STARTUPWNDPROC_exit:


// fn0097_0E16
// Return size: 4
void fn0097_0E16()
fn0097_0E16_entry:
	// succ:  l0097_0E16
l0097_0E16:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x017A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0026:word16] = ax
	Mem0[ss:bp - 0x002A:word16] = ax
	Mem0[ss:bp - 0x0020:word16] = ax
	Mem0[ss:bp - 0x0024:word16] = ax
	Mem0[ss:bp - 0x001C:word16] = ax
	Mem0[ss:bp - 0x0022:word16] = ax
	Mem0[ss:bp - 0x0028:word16] = ax
	ax = 0x02B2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn004F_01E0 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x001A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_0ECB
	// succ:  l0097_0E53 l0097_0ECB
l0097_0E53:
	ax = 0x02B5
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn004F_08D8 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	dx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp + 0x0008:word16]
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0097_0E6E
l0097_0E6E:
	branch cx == 0x0000 l0097_0E70
	// succ:  l0097_0E6E_1 l0097_0E70
l0097_0E6E_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0097_0E6E
	// succ:  l0097_0E70 l0097_0E6E
l0097_0E70:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	SCZO = cond(cx - dx)
	branch Test(EQ,Z) l0097_0E7A
	// succ:  l0097_0E77 l0097_0E7A
l0097_0E77:
	goto l0097_119E
	// succ:  l0097_119E
l0097_0E7A:
	ax = bp - 0x0176
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn00F7_1CD2 (retsize: 4;)
	sp = sp + 0x0004
	si = bp - 0x0176
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp + 0x0008:word16]
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0097_0E96
l0097_0E96:
	branch cx == 0x0000 l0097_0E98
	// succ:  l0097_0E96_1 l0097_0E98
l0097_0E96_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0097_0E96
	// succ:  l0097_0E98 l0097_0E96
l0097_0E98:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	bx = cx
	v18 = si
	si = di
	di = v18
	cx = 0xFFFF
	// succ:  l0097_0EA3
l0097_0EA3:
	branch cx == 0x0000 l0097_0EA5
	// succ:  l0097_0EA3_2 l0097_0EA5
l0097_0EA3_2:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0097_0EA3
	// succ:  l0097_0EA5 l0097_0EA3
l0097_0EA5:
	di = di - 0x0001
	SZO = cond(di)
	cx = bx
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0097_0EAA
l0097_0EAA:
	branch cx == 0x0000 l0097_0EAC
	// succ:  l0097_0EAA_3 l0097_0EAC
l0097_0EAA_3:
	v19 = Mem0[si:word16]
	Mem0[di:word16] = v19
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0097_0EAA
	// succ:  l0097_0EAA
l0097_0EAC:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0097_0EAE
l0097_0EAE:
	branch cx == 0x0000 l0097_0EB0
	// succ:  l0097_0EAE_1 l0097_0EB0
l0097_0EAE_1:
	v20 = Mem0[si:byte]
	Mem0[di:byte] = v20
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0097_0EAE
	// succ:  l0097_0EAE
l0097_0EB0:
	ax = 0x02B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0176
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01E0 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x001A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_0ECB
	// succ:  l0097_0EC8 l0097_0ECB
l0097_0EC8:
	goto l0097_119E
	// succ:  l0097_119E
l0097_0ECB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x001E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 0x001E:word16] - 0x0000)
	branch Test(EQ,Z) l0097_0EE9
	// succ:  l0097_0EE6 l0097_0EE9
l0097_0EE6:
	goto l0097_119E
	// succ:  l0097_119E
l0097_0EE9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x001E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 0x001E:word16] - 0x0001)
	branch Test(EQ,Z) l0097_0F09
	// succ:  l0097_0F06 l0097_0F09
l0097_0F06:
	goto l0097_119E
	// succ:  l0097_119E
l0097_0F09:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x001E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 0x001E:word16] - 0x0003)
	branch Test(ULT,C) l0097_0F29
	// succ:  l0097_0F26 l0097_0F29
l0097_0F26:
	goto l0097_119E
	// succ:  l0097_119E
l0097_0F29:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001E:word16]
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0076
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	si = Mem0[ds:0x4130:word16]
	si = si - 0x0010
	SCZO = cond(si)
	ax = ax - ax - C
	SCZO = cond(ax)
	si = si & ax
	SZO = cond(si)
	C = false
	si = si + 0x0010
	SCZO = cond(si)
	di = di - di
	SCZO = cond(di)
	ax = bp - 0x0076
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(Mem0[ss:bp - 0x001E:word16] - 0x0000)
	branch Test(EQ,Z) l0097_0F6D
	// succ:  l0097_0F5B l0097_0F6D
l0097_0F5B:
	bx = ax
	Mem0[ss:bp - 0x000A:word16] = si
	dx = si
	// succ:  l0097_0F62
l0097_0F62:
	SCZO = cond(Mem0[ds:bx + 0x0002:byte] - dl)
	branch Test(NE,Z) l0097_0F82
	// succ:  l0097_0F67 l0097_0F82
l0097_0F67:
	Mem0[ss:bp - 0x0004:word16] = bx
	si = Mem0[ss:bp - 0x000A:word16]
	// succ:  l0097_0F6D
l0097_0F6D:
	SCZO = cond(di - Mem0[ss:bp - 0x001E:word16])
	branch Test(NE,Z) l0097_0F75
	// succ:  l0097_0F72 l0097_0F75
l0097_0F72:
	goto l0097_119E
	// succ:  l0097_119E
l0097_0F75:
	SCZO = cond(si - 0x0010)
	branch Test(NE,Z) l0097_0F8E
	// succ:  l0097_0F7A l0097_0F8E
l0097_0F7A:
	Mem0[ss:bp - 0x0010:word16] = 0x0004
	goto l0097_0F9E
	// succ:  l0097_0F9E
l0097_0F82:
	bx = bx + 0x0010
	SCZO = cond(bx)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(Mem0[ss:bp - 0x001E:word16] - di)
	branch Test(UGT,CZ) l0097_0F62
	// succ:  l0097_0F8B l0097_0F62
l0097_0F8B:
	goto l0097_0F67
	// succ:  l0097_0F67
l0097_0F8E:
	SCZO = cond(si - 0x0008)
	branch Test(NE,Z) l0097_0F98
	// succ:  l0097_0F93 l0097_0F98
l0097_0F93:
	ax = 0x0003
	goto l0097_0F9B
	// succ:  l0097_0F9B
l0097_0F98:
	ax = 0x0001
	// succ:  l0097_0F9B
l0097_0F9B:
	Mem0[ss:bp - 0x0010:word16] = ax
	// succ:  l0097_0F9E
l0097_0F9E:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0008:word16]
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0026:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_0FB7
	// succ:  l0097_0FB4 l0097_0FB7
l0097_0FB4:
	goto l0097_119E
	// succ:  l0097_119E
l0097_0FB7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	Mem0[ss:bp - 0x0006:word16] = ds
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	call fn004F_0522 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	bx = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0008:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - Mem0[ds:bx + 0x0008:word16])
	branch Test(EQ,Z) l0097_0FFA
	// succ:  l0097_0FF7 l0097_0FFA
l0097_0FF7:
	goto l0097_119E
	// succ:  l0097_119E
l0097_0FFA:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0022:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_100C
	// succ:  l0097_1009 l0097_100C
l0097_1009:
	goto l0097_119E
	// succ:  l0097_119E
l0097_100C:
	es = Mem0[ss:bp - 0x0006:selector]
	v23 = Mem0[es:di + 0x000A:word16] >>u 0x0001
	Mem0[es:di + 0x000A:word16] = v23
	SCZO = cond(v23)
	v24 = (Mem0[es:di + 0x0008:word16] & 0x0001 << 0x01) != 0x0000
	Mem0[es:di + 0x0008:word16] = __rcr(Mem0[es:di + 0x0008:word16], 0x01, C)
	C = v24
	ax = Mem0[es:di:word16]
	bx = Mem0[ss:bp - 0x0004:word16]
	cx = ax
	al = Mem0[ds:bx + 0x0001:byte]
	ax = Mem0[ds:bx:byte] *u al
	SCZO = cond(ax)
	dx_ax = Mem0[ss:bp - 0x0010:word16] *u ax
	SCZO = cond(dx_ax)
	dx = cx
	cl = 0x03
	ax = ax >>u cl
	SCZO = cond(ax)
	dx = dx + di
	SCZO = cond(dx)
	cx = es
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	dx = dx + si
	SCZO = cond(dx)
	Mem0[ss:bp - 0x017A:word16] = dx
	Mem0[ss:bp - 0x0178:word16] = cx
	dx = dx + ax
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0018:word16] = dx
	Mem0[ss:bp - 0x0016:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0022:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0004
	dx_ax = (word32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x017A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateDIBitmap(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 14:segptr32], Mem0[ss:sp + 10:word32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0014
	Mem0[ss:bp - 0x001C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_106B
	// succ:  l0097_1068 l0097_106B
l0097_1068:
	goto l0097_119E
	// succ:  l0097_119E
l0097_106B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0038
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetObject(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0030:byte]
	ax = Mem0[ss:bp - 0x002F:byte] *u al
	SCZO = cond(ax)
	dx_ax = Mem0[ss:bp - 0x0034:word16] *u ax
	SCZO = cond(dx_ax)
	dx_ax = Mem0[ss:bp - 0x0032:word16] *u ax
	SCZO = cond(dx_ax)
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0020:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_109C
	// succ:  l0097_1099 l0097_109C
l0097_1099:
	goto l0097_119E
	// succ:  l0097_119E
l0097_109C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	GetBitmapBits(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:word32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x001C:word16] = 0x0000
	es = Mem0[ss:bp - 0x0006:selector]
	Mem0[es:di + 0x000E:word16] = 0x0001
	al = al - al
	SCZO = cond(al)
	Mem0[es:di + 0x0028:byte] = al
	Mem0[es:di + 0x002A:byte] = al
	Mem0[es:di + 0x0029:byte] = al
	al = 0xFF
	Mem0[es:di + 0x002C:byte] = al
	Mem0[es:di + 0x002E:byte] = al
	Mem0[es:di + 0x002D:byte] = al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0022:word16]
	CreateCompatibleDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0028:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_10F1
	// succ:  l0097_10EE l0097_10F1
l0097_10EE:
	goto l0097_119E
	// succ:  l0097_119E
l0097_10F1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cx = 0x0004
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0016:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateDIBitmap(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 14:segptr32], Mem0[ss:sp + 10:word32], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0014
	Mem0[ss:bp - 0x001C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_1118
	// succ:  l0097_1115 l0097_1118
l0097_1115:
	goto l0097_119E
	// succ:  l0097_119E
l0097_1118:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0046
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetObject(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x003E:byte]
	ax = Mem0[ss:bp - 0x003D:byte] *u al
	SCZO = cond(ax)
	dx_ax = Mem0[ss:bp - 0x0042:word16] *u ax
	SCZO = cond(dx_ax)
	dx_ax = Mem0[ss:bp - 0x0040:word16] *u ax
	SCZO = cond(dx_ax)
	Mem0[ss:bp - 0x0010:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0024:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_119E
	// succ:  l0097_1147 l0097_119E
l0097_1147:
	bx = Mem0[ss:bp - 0x0020:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0014:word16] = ax
	Mem0[ss:bp - 0x0012:word16] = ds
	bx = Mem0[ss:bp - 0x0024:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0018:word16] = ax
	Mem0[ss:bp - 0x0016:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	cx = Mem0[ss:bp - 0x0010:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetBitmapBits(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:word32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	bx = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:bx + 0x0001:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0030:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x002F:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0016:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	CreateIcon(Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0012
	Mem0[ss:bp - 0x002A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_11B6
	// succ:  l0097_119E l0097_11B6
l0097_119E:
	GetActiveWindow()
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x02BB
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	GetActiveWindow()
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x02BB
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	// succ:  l0097_11B6
l0097_11B6:
	SCZO = cond(Mem0[ss:bp - 0x0020:word16] - 0x0000)
	branch Test(EQ,Z) l0097_11C4
	// succ:  l0097_11BC l0097_11C4
l0097_11BC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0020:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0097_11C4
l0097_11C4:
	SCZO = cond(Mem0[ss:bp - 0x0024:word16] - 0x0000)
	branch Test(EQ,Z) l0097_11D2
	// succ:  l0097_11CA l0097_11D2
l0097_11CA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0024:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0097_11D2
l0097_11D2:
	SCZO = cond(Mem0[ss:bp - 0x0022:word16] - 0x0000)
	branch Test(EQ,Z) l0097_11E3
	// succ:  l0097_11D8 l0097_11E3
l0097_11D8:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0022:word16]
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0097_11E3
l0097_11E3:
	SCZO = cond(Mem0[ss:bp - 0x0028:word16] - 0x0000)
	branch Test(EQ,Z) l0097_11F1
	// succ:  l0097_11E9 l0097_11F1
l0097_11E9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0028:word16]
	DeleteDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0097_11F1
l0097_11F1:
	SCZO = cond(Mem0[ss:bp - 0x001C:word16] - 0x0000)
	branch Test(EQ,Z) l0097_11FF
	// succ:  l0097_11F7 l0097_11FF
l0097_11F7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0097_11FF
l0097_11FF:
	SCZO = cond(Mem0[ss:bp - 0x0026:word16] - 0x0000)
	branch Test(EQ,Z) l0097_1215
	// succ:  l0097_1205 l0097_1215
l0097_1205:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0097_1215
l0097_1215:
	SCZO = cond(Mem0[ss:bp - 0x001A:word16] - 0x0000)
	branch Test(EQ,Z) l0097_1226
	// succ:  l0097_121B l0097_1226
l0097_121B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	call fn004F_00BC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l0097_1226
l0097_1226:
	ax = Mem0[ss:bp - 0x002A:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0097_0E16_exit
fn0097_0E16_exit:


// DUNGEONWNDPROC
// Return size: 4
void DUNGEONWNDPROC()
DUNGEONWNDPROC_entry:
	// succ:  l0097_1236
l0097_1236:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0104
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ds:0x3D66:word16]
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0110
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_125A
	// succ:  l0097_1251 l0097_125A
l0097_1251:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_127E
	// succ:  l0097_1254 l0097_127E
l0097_1254:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0097_12E1
	// succ:  l0097_12E1
l0097_125A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00E2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	goto l0097_12DE
	// succ:  l0097_12DE
l0097_127E:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_128A
	// succ:  l0097_1284 l0097_128A
l0097_1284:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_12D3
	// succ:  l0097_1287 l0097_12D3
l0097_1287:
	goto l0097_1254
	// succ:  l0097_1254
l0097_128A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00E2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItemText(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	bx = Mem0[ds:si:word16]
	ax = Mem0[ds:bx + 0x0006:word16]
	Mem0[ss:bp - 0x0104:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_12B3
	// succ:  l0097_12AD l0097_12B3
l0097_12AD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0097_12B3
l0097_12B3:
	SCZO = cond(Mem0[ss:bp - 0x0102:byte] - 0x00)
	branch Test(EQ,Z) l0097_12CC
	// succ:  l0097_12BA l0097_12CC
l0097_12BA:
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_51D4 (retsize: 4;)
	sp = sp + 0x0002
	bx = Mem0[ds:si:word16]
	Mem0[ds:bx + 0x0006:word16] = ax
	goto l0097_12D3
	// succ:  l0097_12D3
l0097_12CC:
	bx = Mem0[ds:si:word16]
	Mem0[ds:bx + 0x0006:word16] = 0x0000
	// succ:  l0097_12D3
l0097_12D3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndDialog(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0097_12DE
l0097_12DE:
	ax = 0x0001
	// succ:  l0097_12E1
l0097_12E1:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  DUNGEONWNDPROC_exit
DUNGEONWNDPROC_exit:


// CASTSPELLDLGPROC
// Return size: 4
void CASTSPELLDLGPROC()
CASTSPELLDLGPROC_entry:
	// succ:  l0097_12EC
l0097_12EC:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0032
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_131A
	// succ:  l0097_1301 l0097_131A
l0097_1301:
	ax = ax - 0x000E
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_132A
	// succ:  l0097_1306 l0097_132A
l0097_1306:
	ax = ax - 0x03F1
	SCZO = cond(ax)
	branch Test(NE,Z) l0097_130E
	// succ:  l0097_130B l0097_130E
l0097_130B:
	goto l0097_146C
	// succ:  l0097_146C
l0097_130E:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0097_1314
	// succ:  l0097_1311 l0097_1314
l0097_1311:
	goto l0097_148C
	// succ:  l0097_148C
l0097_1314:
	di = Mem0[ss:bp + 0x000E:word16]
	goto l0097_14B4
	// succ:  l0097_14B4
l0097_131A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowWord(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	goto l0097_1486
	// succ:  l0097_1486
l0097_132A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = bp - 0x0032
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BeginPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0097_1340
	// succ:  l0097_133D l0097_1340
l0097_133D:
	goto l0097_1486
	// succ:  l0097_1486
l0097_1340:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = bp - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0008:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = Mem0[ss:bp - 0x0008:word16]
	dx_ax = Mem0[ss:bp - 0x000C:word16] *u ax
	SCZO = cond(dx_ax)
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % Mem0[ss:bp - 0x000A:word16]
	ax = dx_ax /u Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	Rectangle(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SZO = cond(di & 0x0008)
	C = false
	branch Test(EQ,Z) l0097_13A8
	// succ:  l0097_13A2 l0097_13A8
l0097_13A2:
	ax = Mem0[ds:0x3CEA:word16]
	goto l0097_13AB
	// succ:  l0097_13AB
l0097_13A8:
	ax = Mem0[ds:0x3CE6:word16]
	// succ:  l0097_13AB
l0097_13AB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	Rectangle(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0097_13D5
	// succ:  l0097_13CC l0097_13D5
l0097_13CC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0097_13D5
l0097_13D5:
	SZO = cond(di & 0x0001)
	C = false
	branch Test(EQ,Z) l0097_1403
	// succ:  l0097_13DB l0097_1403
l0097_13DB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	ax = 0xFFEC
	dx_ax = Mem0[ss:bp - 0x000C:word16] *s ax
	SCZO = cond(dx_ax)
	cx = 0x0064
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	LineTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	// succ:  l0097_1403
l0097_1403:
	SZO = cond(di & 0x0002)
	C = false
	branch Test(EQ,Z) l0097_1431
	// succ:  l0097_1409 l0097_1431
l0097_1409:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	ax = 0xFFD3
	dx_ax = Mem0[ss:bp - 0x000C:word16] *s ax
	SCZO = cond(dx_ax)
	cx = 0x0064
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	LineTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	// succ:  l0097_1431
l0097_1431:
	ax = di
	SZO = cond(al & 0x04)
	C = false
	branch Test(EQ,Z) l0097_145C
	// succ:  l0097_1437 l0097_145C
l0097_1437:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	ax = 0xFFB8
	dx_ax = Mem0[ss:bp - 0x000C:word16] *s ax
	SCZO = cond(dx_ax)
	cx = 0x0064
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	di = ax
	di = di + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LineTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	// succ:  l0097_145C
l0097_145C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = bp - 0x0032
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	goto l0097_1486
	// succ:  l0097_1486
l0097_146C:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	SetWindowWord(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l0097_1486
l0097_1486:
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (int32) ax
	goto l0097_14C6
	// succ:  l0097_14C6
l0097_148C:
	di = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	SetWindowWord(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	SetWindowWord(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l0097_14B4
l0097_14B4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	DefWindowProc(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l0097_14C6
l0097_14C6:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  CASTSPELLDLGPROC_exit
CASTSPELLDLGPROC_exit:


// BUTTONWNDPROC2
// Return size: 4
void BUTTONWNDPROC2()
BUTTONWNDPROC2_entry:
	// succ:  l0097_14D2
l0097_14D2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x00A6
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0110
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_14FC
	// succ:  l0097_14EA l0097_14FC
l0097_14EA:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0097_14F0
	// succ:  l0097_14ED l0097_14F0
l0097_14ED:
	goto l0097_170C
	// succ:  l0097_170C
l0097_14F0:
	ax = ax - 0x0004
	SCZO = cond(ax)
	branch Test(NE,Z) l0097_14F8
	// succ:  l0097_14F5 l0097_14F8
l0097_14F5:
	goto l0097_1A6C
	// succ:  l0097_1A6C
l0097_14F8:
	goto l0097_1B82
	// succ:  l0097_1B82
l0097_14FC:
	ax = Mem0[ds:0x4D6E:word16]
	ax = ax | Mem0[ds:0x4D6C:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_151C
	// succ:  l0097_1505 l0097_151C
l0097_1505:
	ax = 0x002D
	dx = 0x4CEC
	cx = 0x0004
	di = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l0097_1512
l0097_1512:
	branch cx == 0x0000 l0097_1514
	// succ:  l0097_1512_1 l0097_1514
l0097_1512_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0097_1512
	// succ:  l0097_1512
l0097_1514:
	Mem0[ss:bp - 0x0006:word16] = 0x0032
	goto l0097_152F
	// succ:  l0097_152F
l0097_151C:
	ax = Mem0[ds:0x4D6C:word16]
	dx = Mem0[ds:0x4D6E:word16]
	Mem0[ds:0x4CEC:word16] = ax
	Mem0[ds:0x4CEE:word16] = dx
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	// succ:  l0097_152F
l0097_152F:
	si = si - si
	SCZO = cond(si)
	// succ:  l0097_1531
l0097_1531:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = si + 0x009E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	al = Mem0[ds:si + 0x4CEC:byte]
	ax = (int16) al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = si + 0x009E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = si + 0x00FB
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0097_159E
	// succ:  l0097_157A l0097_159E
l0097_157A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SetScrollRange(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0037
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l0097_159E
l0097_159E:
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x0004)
	branch Test(LT,SO) l0097_1531
	// succ:  l0097_15A4 l0097_1531
l0097_15A4:
	di = Mem0[ss:bp - 0x0006:word16]
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00E3
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00E3
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	Mem0[ds:0x3D66:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x40AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowText(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00B5
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00B6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SCZO = cond(Mem0[ds:0x4D22:byte] - 0x01)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x00B6
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CheckRadioButton(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	SCZO = cond(Mem0[ds:0x4D23:byte] - 0x00)
	branch Test(EQ,Z) l0097_1677
	// succ:  l0097_160D l0097_1677
l0097_160D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00E0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D23:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CheckDlgButton(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00E1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x418E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowText(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	SCZO = cond(Mem0[ds:0x4D24:word16] - 0x0000)
	branch Test(NE,Z) l0097_16A2
	// succ:  l0097_1639 l0097_16A2
l0097_1639:
	ax = 0x418E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0097_0E16 (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ds:0x4D24:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_16A2
	// succ:  l0097_164B l0097_16A2
l0097_164B:
	Mem0[ds:0x4D23:byte] = 0x00
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00E0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CheckDlgButton(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	Mem0[ds:0x418E:byte] = 0x00
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00E1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x418E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowText(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	// succ:  l0097_1677
l0097_1677:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0097_16CC
	// succ:  l0097_167E l0097_16CC
l0097_167E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	SCZO = cond(Mem0[ds:0x4D22:byte] - 0x01)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x0144
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0097_16B6
	// succ:  l0097_16B6
l0097_16A2:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0097_16C2
	// succ:  l0097_16A9 l0097_16C2
l0097_16A9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D24:word16]
	// succ:  l0097_16B6
l0097_16B6:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	goto l0097_16F1
	// succ:  l0097_16F1
l0097_16C2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4D24:word16]
	goto l0097_16E8
	// succ:  l0097_16E8
l0097_16CC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	SCZO = cond(Mem0[ds:0x4D22:byte] - 0x01)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x0144
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	// succ:  l0097_16E8
l0097_16E8:
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	// succ:  l0097_16F1
l0097_16F1:
	Mem0[ds:0x4C60:word16] = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0461
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0464
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0462
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CheckRadioButton(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	goto l0097_1B7C
	// succ:  l0097_1B7C
l0097_170C:
	di = Mem0[ss:bp + 0x000A:word16]
	ax = di
	SCZO = cond(ax - 0x00DE)
	branch Test(NE,Z) l0097_1719
	// succ:  l0097_1716 l0097_1719
l0097_1716:
	goto l0097_1948
	// succ:  l0097_1948
l0097_1719:
	branch Test(UGT,CZ) l0097_1738
	// succ:  l0097_171B l0097_1738
l0097_171B:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_175C
	// succ:  l0097_171E l0097_175C
l0097_171E:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0097_1724
	// succ:  l0097_1721 l0097_1724
l0097_1721:
	goto l0097_18D2
	// succ:  l0097_18D2
l0097_1724:
	ax = ax - 0x00B3
	SCZO = cond(ax)
	branch Test(UGE,C) l0097_172C
	// succ:  l0097_1729 l0097_172C
l0097_1729:
	goto l0097_1B82
	// succ:  l0097_1B82
l0097_172C:
	ax = ax - 0x0001
	SCZO = cond(ax)
	branch Test(UGT,CZ) l0097_1734
	// succ:  l0097_1731 l0097_1734
l0097_1731:
	goto l0097_18DA
	// succ:  l0097_18DA
l0097_1734:
	goto l0097_1B82
	// succ:  l0097_1B82
l0097_1738:
	ax = ax - 0x00E0
	SCZO = cond(ax)
	branch Test(NE,Z) l0097_1740
	// succ:  l0097_173D l0097_1740
l0097_173D:
	goto l0097_1948
	// succ:  l0097_1948
l0097_1740:
	ax = ax - 0x0339
	SCZO = cond(ax)
	branch Test(NE,Z) l0097_1748
	// succ:  l0097_1745 l0097_1748
l0097_1745:
	goto l0097_1A50
	// succ:  l0097_1A50
l0097_1748:
	ax = ax - 0x0048
	SCZO = cond(ax)
	branch Test(UGE,C) l0097_1750
	// succ:  l0097_174D l0097_1750
l0097_174D:
	goto l0097_1B82
	// succ:  l0097_1B82
l0097_1750:
	ax = ax - 0x0003
	SCZO = cond(ax)
	branch Test(UGT,CZ) l0097_1758
	// succ:  l0097_1755 l0097_1758
l0097_1755:
	goto l0097_1A62
	// succ:  l0097_1A62
l0097_1758:
	goto l0097_1B82
	// succ:  l0097_1B82
l0097_175C:
	SCZO = cond(Mem0[ds:0x3D66:word16] - 0x0000)
	branch Test(EQ,Z) l0097_1782
	// succ:  l0097_1763 l0097_1782
l0097_1763:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x02DC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x02CB
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	SCZO = cond(ax - 0x0006)
	branch Test(EQ,Z) l0097_1790
	// succ:  l0097_177E l0097_1790
l0097_177E:
	goto l0097_1B7C
	// succ:  l0097_1B7C
l0097_1782:
	ax = Mem0[ds:0x4CEC:word16]
	dx = Mem0[ds:0x4CEE:word16]
	Mem0[ds:0x4D6C:word16] = ax
	Mem0[ds:0x4D6E:word16] = dx
	// succ:  l0097_1790
l0097_1790:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x40AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00E0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	Mem0[ds:0x4D23:byte] = al
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0097_17CA
	// succ:  l0097_17C7 l0097_17CA
l0097_17C7:
	goto l0097_1859
	// succ:  l0097_1859
l0097_17CA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00E1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0056
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetWindowText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	SCZO = cond(Mem0[ss:bp - 0x0056:byte] - 0x00)
	branch Test(EQ,Z) l0097_1854
	// succ:  l0097_17EB l0097_1854
l0097_17EB:
	di = 0x418E
	si = bp - 0x0056
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0097_17F8
l0097_17F8:
	branch cx == 0x0000 l0097_17FA
	// succ:  l0097_17F8_1 l0097_17FA
l0097_17F8_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0097_17F8
	// succ:  l0097_17FA l0097_17F8
l0097_17FA:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	// succ:  l0097_17FE
l0097_17FE:
	branch cx == 0x0000 l0097_1800
	// succ:  l0097_17FE_2 l0097_1800
l0097_17FE_2:
	SCZO = cond(Mem0[si:byte] - Mem0[di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0097_17FE
	// succ:  l0097_1800 l0097_17FE
l0097_1800:
	branch Test(EQ,Z) l0097_1807
	// succ:  l0097_1802 l0097_1807
l0097_1802:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0097_1807
l0097_1807:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_185E
	// succ:  l0097_180B l0097_185E
l0097_180B:
	SCZO = cond(Mem0[ds:0x418E:byte] - 0x00)
	branch Test(EQ,Z) l0097_1822
	// succ:  l0097_1812 l0097_1822
l0097_1812:
	SCZO = cond(Mem0[ds:0x4D24:word16] - 0x0000)
	branch Test(EQ,Z) l0097_1822
	// succ:  l0097_1819 l0097_1822
l0097_1819:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D24:word16]
	DestroyIcon(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0097_1822
l0097_1822:
	ax = bp - 0x0056
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0097_0E16 (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ds:0x4D24:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_1854
	// succ:  l0097_1834 l0097_1854
l0097_1834:
	di = bp - 0x0056
	si = 0x418E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0097_1841
l0097_1841:
	branch cx == 0x0000 l0097_1843
	// succ:  l0097_1841_1 l0097_1843
l0097_1841_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0097_1841
	// succ:  l0097_1843 l0097_1841
l0097_1843:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v19 = si
	si = di
	di = v19
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0097_184B
l0097_184B:
	branch cx == 0x0000 l0097_184D
	// succ:  l0097_184B_2 l0097_184D
l0097_184B_2:
	v20 = Mem0[si:word16]
	Mem0[di:word16] = v20
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0097_184B
	// succ:  l0097_184B
l0097_184D:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0097_184F
l0097_184F:
	branch cx == 0x0000 l0097_1851
	// succ:  l0097_184F_1 l0097_1851
l0097_184F_1:
	v21 = Mem0[si:byte]
	Mem0[di:byte] = v21
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0097_184F
	// succ:  l0097_184F
l0097_1851:
	goto l0097_185E
	// succ:  l0097_185E
l0097_1854:
	Mem0[ds:0x4D23:byte] = 0x00
	// succ:  l0097_1859
l0097_1859:
	Mem0[ds:0x418E:byte] = 0x00
	// succ:  l0097_185E
l0097_185E:
	SCZO = cond(Mem0[ds:0x4D23:byte] - 0x00)
	branch Test(NE,Z) l0097_187F
	// succ:  l0097_1865 l0097_187F
l0097_1865:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	SCZO = cond(Mem0[ds:0x4D22:byte] - 0x01)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x0144
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ds:0x4D24:word16] = ax
	// succ:  l0097_187F
l0097_187F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	call fn002F_3168 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_18B2
	// succ:  l0097_188B l0097_18B2
l0097_188B:
	call fn00DF_0000 (retsize: 4;)
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00DF_0494 (retsize: 4;)
	sp = sp + 0x0006
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1E96 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0001
	// succ:  l0097_18A9
l0097_18A9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndDialog(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l0097_1B7C
	// succ:  l0097_1B7C
l0097_18B2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x0309
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0xFFFF
	goto l0097_18A9
	// succ:  l0097_18A9
l0097_18D2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	goto l0097_18A9
	// succ:  l0097_18A9
l0097_18DA:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00B5
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00B6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	CheckRadioButton(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	SCZO = cond(di - 0x00B5)
	branch Test(NE,Z) l0097_18F6
	// succ:  l0097_18F2 l0097_18F6
l0097_18F2:
	al = al - al
	SCZO = cond(al)
	goto l0097_18F8
	// succ:  l0097_18F8
l0097_18F6:
	al = 0x01
	// succ:  l0097_18F8
l0097_18F8:
	Mem0[ds:0x4D22:byte] = al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00E0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_1915
	// succ:  l0097_1912 l0097_1915
l0097_1912:
	goto l0097_1B7C
	// succ:  l0097_1B7C
l0097_1915:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0097_1920
	// succ:  l0097_191C l0097_1920
l0097_191C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	goto l0097_196B
	// succ:  l0097_196B
l0097_1920:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	// succ:  l0097_1921
l0097_1921:
	ax = 0x00DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	SCZO = cond(Mem0[ds:0x4D22:byte] - 0x01)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x0144
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	// succ:  l0097_193C
l0097_193C:
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	goto l0097_1B7C
	// succ:  l0097_1B7C
l0097_1948:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00E0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_1994
	// succ:  l0097_1961 l0097_1994
l0097_1961:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0097_198E
	// succ:  l0097_1968 l0097_198E
l0097_1968:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	// succ:  l0097_196B
l0097_196B:
	ax = 0x00DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	SCZO = cond(Mem0[ds:0x4D22:byte] - 0x01)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x0144
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0097_1B73
	// succ:  l0097_1B73
l0097_198E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	goto l0097_1921
	// succ:  l0097_1921
l0097_1994:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00E1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetWindowText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	SCZO = cond(Mem0[ss:bp - 0x00A6:byte] - 0x00)
	branch Test(NE,Z) l0097_19BA
	// succ:  l0097_19B7 l0097_19BA
l0097_19B7:
	goto l0097_1B7C
	// succ:  l0097_1B7C
l0097_19BA:
	di = 0x418E
	si = bp - 0x00A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0097_19C8
l0097_19C8:
	branch cx == 0x0000 l0097_19CA
	// succ:  l0097_19C8_1 l0097_19CA
l0097_19C8_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0097_19C8
	// succ:  l0097_19CA l0097_19C8
l0097_19CA:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	// succ:  l0097_19CE
l0097_19CE:
	branch cx == 0x0000 l0097_19D0
	// succ:  l0097_19CE_2 l0097_19D0
l0097_19CE_2:
	SCZO = cond(Mem0[si:byte] - Mem0[di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0097_19CE
	// succ:  l0097_19D0 l0097_19CE
l0097_19D0:
	branch Test(EQ,Z) l0097_19D7
	// succ:  l0097_19D2 l0097_19D7
l0097_19D2:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0097_19D7
l0097_19D7:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_1A29
	// succ:  l0097_19DB l0097_1A29
l0097_19DB:
	ax = bp - 0x00A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0097_0E16 (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_1A29
	// succ:  l0097_19EE l0097_1A29
l0097_19EE:
	SCZO = cond(Mem0[ds:0x418E:byte] - 0x00)
	branch Test(EQ,Z) l0097_1A05
	// succ:  l0097_19F5 l0097_1A05
l0097_19F5:
	SCZO = cond(Mem0[ds:0x4D24:word16] - 0x0000)
	branch Test(EQ,Z) l0097_1A05
	// succ:  l0097_19FC l0097_1A05
l0097_19FC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D24:word16]
	DestroyIcon(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0097_1A05
l0097_1A05:
	di = bp - 0x00A6
	si = 0x418E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0097_1A13
l0097_1A13:
	branch cx == 0x0000 l0097_1A15
	// succ:  l0097_1A13_1 l0097_1A15
l0097_1A13_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0097_1A13
	// succ:  l0097_1A15 l0097_1A13
l0097_1A15:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v24 = si
	si = di
	di = v24
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0097_1A1D
l0097_1A1D:
	branch cx == 0x0000 l0097_1A1F
	// succ:  l0097_1A1D_2 l0097_1A1F
l0097_1A1D_2:
	v25 = Mem0[si:word16]
	Mem0[di:word16] = v25
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0097_1A1D
	// succ:  l0097_1A1D
l0097_1A1F:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0097_1A21
l0097_1A21:
	branch cx == 0x0000 l0097_1A23
	// succ:  l0097_1A21_1 l0097_1A23
l0097_1A21_1:
	v26 = Mem0[si:byte]
	Mem0[di:byte] = v26
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0097_1A21
	// succ:  l0097_1A21
l0097_1A23:
	ax = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:0x4D24:word16] = ax
	// succ:  l0097_1A29
l0097_1A29:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0097_1A42
	// succ:  l0097_1A30 l0097_1A42
l0097_1A30:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D24:word16]
	goto l0097_1B73
	// succ:  l0097_1B73
l0097_1A42:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4D24:word16]
	goto l0097_193C
	// succ:  l0097_193C
l0097_1A50:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0105
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1DBE (retsize: 4;)
	sp = sp + 0x0006
	goto l0097_1B7C
	// succ:  l0097_1B7C
l0097_1A62:
	ax = di - 0x0461
	Mem0[ds:0x4C60:word16] = ax
	goto l0097_1B7C
	// succ:  l0097_1B7C
l0097_1A6C:
	ax = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFF4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = ax
	di = di - 0x00FB
	SCZO = cond(di)
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_1A9A
	// succ:  l0097_1A89 l0097_1A9A
l0097_1A89:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_1AA0
	// succ:  l0097_1A8C l0097_1AA0
l0097_1A8C:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_1AA6
	// succ:  l0097_1A8F l0097_1AA6
l0097_1A8F:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_1AAC
	// succ:  l0097_1A92 l0097_1AAC
l0097_1A92:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_1AB2
	// succ:  l0097_1A95 l0097_1AB2
l0097_1A95:
	si = si - si
	SCZO = cond(si)
	goto l0097_1ABF
	// succ:  l0097_1ABF
l0097_1A9A:
	si = 0x0001
	goto l0097_1ABF
	// succ:  l0097_1ABF
l0097_1AA0:
	si = 0xFFFF
	goto l0097_1ABF
	// succ:  l0097_1ABF
l0097_1AA6:
	si = 0x0005
	goto l0097_1ABF
	// succ:  l0097_1ABF
l0097_1AAC:
	si = 0xFFFB
	goto l0097_1ABF
	// succ:  l0097_1ABF
l0097_1AB2:
	al = Mem0[ds:di + 0x4CEC:byte]
	ax = (int16) al
	si = 0x0064
	si = si - ax
	SCZO = cond(si)
	si = si - Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(si)
	// succ:  l0097_1ABF
l0097_1ABF:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0097_1AC6
	// succ:  l0097_1AC3 l0097_1AC6
l0097_1AC3:
	goto l0097_1B82
	// succ:  l0097_1B82
l0097_1AC6:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(LE,SZO) l0097_1AEA
	// succ:  l0097_1ACA l0097_1AEA
l0097_1ACA:
	SCZO = cond(Mem0[ds:0x3D66:word16] - si)
	branch Test(GE,SO) l0097_1AD4
	// succ:  l0097_1AD0 l0097_1AD4
l0097_1AD0:
	si = Mem0[ds:0x3D66:word16]
	// succ:  l0097_1AD4
l0097_1AD4:
	al = Mem0[ds:di + 0x4CEC:byte]
	ax = (int16) al
	ax = ax + si
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0048)
	branch Test(LE,SZO) l0097_1B15
	// succ:  l0097_1AE0 l0097_1B15
l0097_1AE0:
	al = Mem0[ds:di + 0x4CEC:byte]
	ax = (int16) al
	si = 0x0048
	goto l0097_1B13
	// succ:  l0097_1B13
l0097_1AEA:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(GE,SO) l0097_1B15
	// succ:  l0097_1AEE l0097_1B15
l0097_1AEE:
	ax = Mem0[ds:0x3D66:word16]
	ax = ax - si
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0064)
	branch Test(ULE,CZ) l0097_1AFF
	// succ:  l0097_1AF8 l0097_1AFF
l0097_1AF8:
	si = Mem0[ds:0x3D66:word16]
	si = si - 0x0064
	SCZO = cond(si)
	// succ:  l0097_1AFF
l0097_1AFF:
	al = Mem0[ds:di + 0x4CEC:byte]
	ax = (int16) al
	ax = ax + si
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0014)
	branch Test(GE,SO) l0097_1B15
	// succ:  l0097_1B0B l0097_1B15
l0097_1B0B:
	al = Mem0[ds:di + 0x4CEC:byte]
	ax = (int16) al
	si = 0x0014
	// succ:  l0097_1B13
l0097_1B13:
	si = si - ax
	SCZO = cond(si)
	// succ:  l0097_1B15
l0097_1B15:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0097_1B24
	// succ:  l0097_1B19 l0097_1B24
l0097_1B19:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBeep(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l0097_1B7C
	// succ:  l0097_1B7C
l0097_1B24:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si
	v27 = Mem0[ds:di + 0x4CEC:byte] + al
	Mem0[ds:di + 0x4CEC:byte] = v27
	SCZO = cond(v27)
	al = Mem0[ds:di + 0x4CEC:byte]
	ax = (int16) al
	ax = ax - 0x0064
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = di + 0x009E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:di + 0x4CEC:byte]
	ax = (int16) al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00E3
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	v28 = Mem0[ds:0x3D66:word16] - si
	Mem0[ds:0x3D66:word16] = v28
	SCZO = cond(v28)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D66:word16]
	// succ:  l0097_1B73
l0097_1B73:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	// succ:  l0097_1B7C
l0097_1B7C:
	ax = 0x0001
l0097_1B82:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0097_1B84
l0097_1B84:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  BUTTONWNDPROC2_exit
BUTTONWNDPROC2_exit:


// fn0097_1B90
// Return size: 4
void fn0097_1B90()
fn0097_1B90_entry:
	// succ:  l0097_1B90
l0097_1B90:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x1BE6
	dx = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0097_1BDC
	// succ:  l0097_1BB9 l0097_1BDC
l0097_1BB9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0135
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetActiveWindow()
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = ax
	DialogBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	FreeProcInstance(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	// succ:  l0097_1BDC
l0097_1BDC:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0097_1B90_exit
fn0097_1B90_exit:


// HELPDLGPROC
// Return size: 4
void HELPDLGPROC()
HELPDLGPROC_entry:
	// succ:  l0097_1BE6
l0097_1BE6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x01A6
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0110
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_1C0A
	// succ:  l0097_1BFE l0097_1C0A
l0097_1BFE:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0097_1C04
	// succ:  l0097_1C01 l0097_1C04
l0097_1C01:
	goto l0097_2022
	// succ:  l0097_2022
l0097_1C04:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0097_22EC
	// succ:  l0097_22EC
l0097_1C0A:
	di = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x40AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowText(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = si - si
	SCZO = cond(si)
	// succ:  l0097_1C24
l0097_1C24:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = si + 0x009E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	al = Mem0[ds:si + 0x4CEC:byte]
	ax = (int16) al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = si + 0x009E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0064
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = si + 0x0065
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	al = Mem0[ds:si + 0x4CE8:byte]
	ax = (int16) al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = si + 0x0065
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x0004)
	branch Test(LT,SO) l0097_1C24
	// succ:  l0097_1C8D l0097_1C24
l0097_1C8D:
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x005C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CFC:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CFE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x006B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x00DA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D00:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D02:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x006D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D0E:word16]
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x006F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D04:word16]
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00A8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D08:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D06:word16]
	call fn004F_041A (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0070
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_12A4 (retsize: 4;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_041A (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x03FE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	SCZO = cond(Mem0[ds:0x4DEA:word16] - 0x0000)
	branch Test(EQ,Z) l0097_1DB0
	// succ:  l0097_1D91 l0097_1DB0
l0097_1D91:
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x005C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0016:word16]
	ax = ax - ax
	SCZO = cond(ax)
	goto l0097_1DBF
	// succ:  l0097_1DBF
l0097_1DB0:
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x005C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l0097_1DBF
l0097_1DBF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0071
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	SCZO = cond(Mem0[ds:0x4DEA:word16] - 0x0000)
	branch Test(EQ,Z) l0097_1DFE
	// succ:  l0097_1DDE l0097_1DFE
l0097_1DDE:
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x005C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x001A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	goto l0097_1E0D
	// succ:  l0097_1E0D
l0097_1DFE:
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x005C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l0097_1E0D
l0097_1E0D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0072
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = 0x0064
	dx_ax = Mem0[ds:0x4D14:word16] *u ax
	SCZO = cond(dx_ax)
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % Mem0[ds:0x4D16:word16]
	ax = dx_ax /u Mem0[ds:0x4D16:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	di = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0097_1E4F
l0097_1E4F:
	branch cx == 0x0000 l0097_1E51
	// succ:  l0097_1E4F_1 l0097_1E51
l0097_1E4F_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0097_1E4F
	// succ:  l0097_1E51 l0097_1E4F
l0097_1E51:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	di = cx
	si = bp - 0x01A6 + di
	Mem0[ds:si:byte] = 0x25
	si = si + 0x0001
	SZO = cond(si)
	Mem0[ds:si:byte] = 0x20
	si = si + 0x0001
	SZO = cond(si)
	Mem0[ds:si:byte] = 0x2F
	si = si + 0x0001
	SZO = cond(si)
	Mem0[ds:si:byte] = 0x20
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	si = si + 0x0001
	SZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x2710
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % Mem0[ds:0x4D18:word16]
	ax = dx_ax /u Mem0[ds:0x4D18:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	di = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0097_1E8A
l0097_1E8A:
	branch cx == 0x0000 l0097_1E8C
	// succ:  l0097_1E8A_2 l0097_1E8C
l0097_1E8A_2:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0097_1E8A
	// succ:  l0097_1E8C l0097_1E8A
l0097_1E8C:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	cx = cx + si
	SCZO = cond(cx)
	si = cx
	Mem0[ds:si:byte] = 0x25
	si = si + 0x0001
	SZO = cond(si)
	Mem0[ds:si:byte] = 0x00
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0073
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_16B6 (retsize: 4;)
	si = ax
	di = dx
	call fn00F7_16E4 (retsize: 4;)
	si = si + ax
	SCZO = cond(si)
	di = di + dx + C
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_0424 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0074
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	SCZO = cond(Mem0[ds:0x4D23:byte] - 0x00)
	branch Test(EQ,Z) l0097_1F40
	// succ:  l0097_1EEA l0097_1F40
l0097_1EEA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00E0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D23:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CheckDlgButton(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00E1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x418E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowText(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0097_1F34
	// succ:  l0097_1F1A l0097_1F34
l0097_1F1A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D24:word16]
	// succ:  l0097_1F29
l0097_1F29:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	goto l0097_1F93
	// succ:  l0097_1F93
l0097_1F34:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4D24:word16]
	goto l0097_1F8A
	// succ:  l0097_1F8A
l0097_1F40:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0097_1F6C
	// succ:  l0097_1F47 l0097_1F6C
l0097_1F47:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	SCZO = cond(Mem0[ds:0x4D22:byte] - 0x01)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x0144
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0097_1F29
	// succ:  l0097_1F29
l0097_1F6C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	SCZO = cond(Mem0[ds:0x4D22:byte] - 0x01)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x0144
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	// succ:  l0097_1F8A
l0097_1F8A:
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	// succ:  l0097_1F93
l0097_1F93:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0097_1FCA
	// succ:  l0097_1F9A l0097_1FCA
l0097_1F9A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0475
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	bx = Mem0[ds:0x4C60:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[0x0097:bx + 0x2300:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	goto l0097_1FF2
	// succ:  l0097_1FF2
l0097_1FCA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	bx = Mem0[ds:0x4C60:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[0x0097:bx + 0x2300:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	// succ:  l0097_1FF2
l0097_1FF2:
	bx = Mem0[ds:0x4C60:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0097:bx + 0x22F8:word16]
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0404
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x01A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowText(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	goto l0097_22E9
	// succ:  l0097_22E9
l0097_2022:
	ax = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax - 0x00DE)
	branch Test(NE,Z) l0097_202D
	// succ:  l0097_202A l0097_202D
l0097_202A:
	goto l0097_2168
	// succ:  l0097_2168
l0097_202D:
	branch Test(UGT,CZ) l0097_203C
	// succ:  l0097_202F l0097_203C
l0097_202F:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_2058
	// succ:  l0097_2032 l0097_2058
l0097_2032:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0097_2038
	// succ:  l0097_2035 l0097_2038
l0097_2035:
	goto l0097_2159
	// succ:  l0097_2159
l0097_2038:
	goto l0097_1C04
	// succ:  l0097_1C04
l0097_203C:
	ax = ax - 0x00E0
	SCZO = cond(ax)
	branch Test(NE,Z) l0097_2044
	// succ:  l0097_2041 l0097_2044
l0097_2041:
	goto l0097_2168
	// succ:  l0097_2168
l0097_2044:
	ax = ax - 0x0331
	SCZO = cond(ax)
	branch Test(NE,Z) l0097_204C
	// succ:  l0097_2049 l0097_204C
l0097_2049:
	goto l0097_229E
	// succ:  l0097_229E
l0097_204C:
	ax = ax - 0x0008
	SCZO = cond(ax)
	branch Test(NE,Z) l0097_2054
	// succ:  l0097_2051 l0097_2054
l0097_2051:
	goto l0097_22DA
	// succ:  l0097_22DA
l0097_2054:
	goto l0097_1C04
	// succ:  l0097_1C04
l0097_2058:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x40AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00E0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	Mem0[ds:0x4D23:byte] = al
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0097_2092
	// succ:  l0097_208F l0097_2092
l0097_208F:
	goto l0097_2121
	// succ:  l0097_2121
l0097_2092:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00E1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0056
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetWindowText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	SCZO = cond(Mem0[ss:bp - 0x0056:byte] - 0x00)
	branch Test(EQ,Z) l0097_211C
	// succ:  l0097_20B3 l0097_211C
l0097_20B3:
	di = 0x418E
	si = bp - 0x0056
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0097_20C0
l0097_20C0:
	branch cx == 0x0000 l0097_20C2
	// succ:  l0097_20C0_1 l0097_20C2
l0097_20C0_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0097_20C0
	// succ:  l0097_20C2 l0097_20C0
l0097_20C2:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	// succ:  l0097_20C6
l0097_20C6:
	branch cx == 0x0000 l0097_20C8
	// succ:  l0097_20C6_2 l0097_20C8
l0097_20C6_2:
	SCZO = cond(Mem0[si:byte] - Mem0[di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0097_20C6
	// succ:  l0097_20C8 l0097_20C6
l0097_20C8:
	branch Test(EQ,Z) l0097_20CF
	// succ:  l0097_20CA l0097_20CF
l0097_20CA:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0097_20CF
l0097_20CF:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_2126
	// succ:  l0097_20D3 l0097_2126
l0097_20D3:
	SCZO = cond(Mem0[ds:0x418E:byte] - 0x00)
	branch Test(EQ,Z) l0097_20EA
	// succ:  l0097_20DA l0097_20EA
l0097_20DA:
	SCZO = cond(Mem0[ds:0x4D24:word16] - 0x0000)
	branch Test(EQ,Z) l0097_20EA
	// succ:  l0097_20E1 l0097_20EA
l0097_20E1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D24:word16]
	DestroyIcon(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0097_20EA
l0097_20EA:
	ax = bp - 0x0056
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0097_0E16 (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ds:0x4D24:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_211C
	// succ:  l0097_20FC l0097_211C
l0097_20FC:
	di = bp - 0x0056
	si = 0x418E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0097_2109
l0097_2109:
	branch cx == 0x0000 l0097_210B
	// succ:  l0097_2109_1 l0097_210B
l0097_2109_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0097_2109
	// succ:  l0097_210B l0097_2109
l0097_210B:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v25 = si
	si = di
	di = v25
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0097_2113
l0097_2113:
	branch cx == 0x0000 l0097_2115
	// succ:  l0097_2113_2 l0097_2115
l0097_2113_2:
	v26 = Mem0[si:word16]
	Mem0[di:word16] = v26
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0097_2113
	// succ:  l0097_2113
l0097_2115:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0097_2117
l0097_2117:
	branch cx == 0x0000 l0097_2119
	// succ:  l0097_2117_1 l0097_2119
l0097_2117_1:
	v27 = Mem0[si:byte]
	Mem0[di:byte] = v27
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0097_2117
	// succ:  l0097_2117
l0097_2119:
	goto l0097_2126
	// succ:  l0097_2126
l0097_211C:
	Mem0[ds:0x4D23:byte] = 0x00
	// succ:  l0097_2121
l0097_2121:
	Mem0[ds:0x418E:byte] = 0x00
	// succ:  l0097_2126
l0097_2126:
	SCZO = cond(Mem0[ds:0x4D23:byte] - 0x00)
	branch Test(NE,Z) l0097_2147
	// succ:  l0097_212D l0097_2147
l0097_212D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	SCZO = cond(Mem0[ds:0x4D22:byte] - 0x01)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x0144
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ds:0x4D24:word16] = ax
	// succ:  l0097_2147
l0097_2147:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l0097_2159
l0097_2159:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndDialog(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l0097_22E9
	// succ:  l0097_22E9
l0097_2168:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00E0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_21E2
	// succ:  l0097_2181 l0097_21E2
l0097_2181:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0097_21B8
	// succ:  l0097_2188 l0097_21B8
l0097_2188:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	SCZO = cond(Mem0[ds:0x4D22:byte] - 0x01)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x0144
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l0097_21AB
l0097_21AB:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	goto l0097_22E9
	// succ:  l0097_22E9
l0097_21B8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	SCZO = cond(Mem0[ds:0x4D22:byte] - 0x01)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x0144
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	// succ:  l0097_21D6
l0097_21D6:
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	goto l0097_22E9
	// succ:  l0097_22E9
l0097_21E2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00E1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetWindowText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	SCZO = cond(Mem0[ss:bp - 0x00A6:byte] - 0x00)
	branch Test(NE,Z) l0097_2208
	// succ:  l0097_2205 l0097_2208
l0097_2205:
	goto l0097_22E9
	// succ:  l0097_22E9
l0097_2208:
	di = 0x418E
	si = bp - 0x00A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0097_2216
l0097_2216:
	branch cx == 0x0000 l0097_2218
	// succ:  l0097_2216_1 l0097_2218
l0097_2216_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0097_2216
	// succ:  l0097_2218 l0097_2216
l0097_2218:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	// succ:  l0097_221C
l0097_221C:
	branch cx == 0x0000 l0097_221E
	// succ:  l0097_221C_2 l0097_221E
l0097_221C_2:
	SCZO = cond(Mem0[si:byte] - Mem0[di:byte])
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0097_221C
	// succ:  l0097_221E l0097_221C
l0097_221E:
	branch Test(EQ,Z) l0097_2225
	// succ:  l0097_2220 l0097_2225
l0097_2220:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF - C
	SCZO = cond(ax)
	// succ:  l0097_2225
l0097_2225:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_2277
	// succ:  l0097_2229 l0097_2277
l0097_2229:
	ax = bp - 0x00A6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0097_0E16 (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_2277
	// succ:  l0097_223C l0097_2277
l0097_223C:
	SCZO = cond(Mem0[ds:0x418E:byte] - 0x00)
	branch Test(EQ,Z) l0097_2253
	// succ:  l0097_2243 l0097_2253
l0097_2243:
	SCZO = cond(Mem0[ds:0x4D24:word16] - 0x0000)
	branch Test(EQ,Z) l0097_2253
	// succ:  l0097_224A l0097_2253
l0097_224A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D24:word16]
	DestroyIcon(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0097_2253
l0097_2253:
	di = bp - 0x00A6
	si = 0x418E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0097_2261
l0097_2261:
	branch cx == 0x0000 l0097_2263
	// succ:  l0097_2261_1 l0097_2263
l0097_2261_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0097_2261
	// succ:  l0097_2263 l0097_2261
l0097_2263:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v21 = si
	si = di
	di = v21
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0097_226B
l0097_226B:
	branch cx == 0x0000 l0097_226D
	// succ:  l0097_226B_2 l0097_226D
l0097_226B_2:
	v22 = Mem0[si:word16]
	Mem0[di:word16] = v22
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0097_226B
	// succ:  l0097_226B
l0097_226D:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0097_226F
l0097_226F:
	branch cx == 0x0000 l0097_2271
	// succ:  l0097_226F_1 l0097_2271
l0097_226F_1:
	v23 = Mem0[si:byte]
	Mem0[di:byte] = v23
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0097_226F
	// succ:  l0097_226F
l0097_2271:
	ax = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:0x4D24:word16] = ax
	// succ:  l0097_2277
l0097_2277:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0097_2290
	// succ:  l0097_227E l0097_2290
l0097_227E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D24:word16]
	goto l0097_21AB
	// succ:  l0097_21AB
l0097_2290:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x00DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4D24:word16]
	goto l0097_21D6
	// succ:  l0097_21D6
l0097_229E:
	ax = 0x2BF0
	dx = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0097_22E9
	// succ:  l0097_22B8 l0097_22E9
l0097_22B8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0140
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = ax
	DialogBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	FreeProcInstance(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	goto l0097_22E9
	// succ:  l0097_22E9
l0097_22DA:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0106
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1DBE (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l0097_22E9
l0097_22E9:
	ax = 0x0001
	// succ:  l0097_22EC
l0097_22EC:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  HELPDLGPROC_exit
HELPDLGPROC_exit:


// TEXTFILEWNDPROC
// Return size: 4
void TEXTFILEWNDPROC()
TEXTFILEWNDPROC_entry:
	// succ:  l0097_2308
l0097_2308:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0110
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_2326
	// succ:  l0097_231F l0097_2326
l0097_231F:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_2330
	// succ:  l0097_2322 l0097_2330
l0097_2322:
	goto l0097_23A2
	// succ:  l0097_23A2
l0097_2326:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	call fn01D7_066C (retsize: 4;)
	goto l0097_239D
	// succ:  l0097_239D
l0097_2330:
	dx = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(dx - 0x0001)
	branch Test(NE,Z) l0097_2388
	// succ:  l0097_2338 l0097_2388
l0097_2338:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0409
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndDialog(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0004:word16] = 0x063A
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	bx = Mem0[ss:bp - 0x0004:word16]
	cx = Mem0[ss:bp - 0x0006:word16]
	// succ:  l0097_2369
l0097_2369:
	SCZO = cond(Mem0[ds:bx + 0x0004:byte] - 0xFF)
	branch Test(NE,Z) l0097_2376
	// succ:  l0097_236F l0097_2376
l0097_236F:
	ax = di
	di = di - 0x0001
	SZO = cond(di)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_237F
	// succ:  l0097_2376 l0097_237F
l0097_2376:
	bx = bx + 0x000C
	SCZO = cond(bx)
	cx = cx + 0x0001
	SZO = cond(cx)
	SCZO = cond(cx - 0x0024)
	branch Test(LT,SO) l0097_2369
	// succ:  l0097_237F l0097_2369
l0097_237F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn01D7_0000 (retsize: 4;)
	sp = sp + 0x0002
	goto l0097_239D
	// succ:  l0097_239D
l0097_2388:
	SCZO = cond(dx - 0x0419)
	branch Test(NE,Z) l0097_23A2
	// succ:  l0097_238E l0097_23A2
l0097_238E:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0103
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1DBE (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l0097_239D
l0097_239D:
	ax = 0x0001
	goto l0097_23A4
	// succ:  l0097_23A4
l0097_23A2:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0097_23A4
l0097_23A4:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  TEXTFILEWNDPROC_exit
TEXTFILEWNDPROC_exit:


// WNDPROC
// Return size: 4
void WNDPROC()
WNDPROC_entry:
	// succ:  l0097_23B0
l0097_23B0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0126
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0110
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_23DC
	// succ:  l0097_23C8 l0097_23DC
l0097_23C8:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0097_23CE
	// succ:  l0097_23CB l0097_23CE
l0097_23CB:
	goto l0097_2452
	// succ:  l0097_2452
l0097_23CE:
	ax = ax - 0x0004
	SCZO = cond(ax)
	branch Test(NE,Z) l0097_23D6
	// succ:  l0097_23D3 l0097_23D6
l0097_23D3:
	goto l0097_25E2
	// succ:  l0097_25E2
l0097_23D6:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0097_268E
	// succ:  l0097_268E
l0097_23DC:
	si = Mem0[ss:bp + 0x000E:word16]
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ds:0x3D66:word16]
	bx = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0012:word16]
	call fn004F_041A (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0069
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	ax = bp - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetCursorPos(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x001E:word16]
	dx_ax = (int32) ax
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	ax = ax - Mem0[ss:bp - 0x0012:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x001C:word16]
	dx_ax = (int32) ax
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	ax = ax - Mem0[ss:bp - 0x0010:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowPos(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	goto l0097_268B
	// succ:  l0097_268B
l0097_2452:
	dx = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(dx - 0x0001)
	branch Test(EQ,Z) l0097_245D
	// succ:  l0097_245A l0097_245D
l0097_245A:
	goto l0097_25D2
	// succ:  l0097_25D2
l0097_245D:
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0069
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetDlgItemText(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	ax = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_03FA (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	bx = Mem0[ds:0x3D66:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x0012:word16]
	dx = Mem0[ds:bx + 0x0014:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax | Mem0[ss:bp - 0x0006:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_24A8
	// succ:  l0097_24A5 l0097_24A8
l0097_24A5:
	goto l0097_25C4
	// succ:  l0097_25C4
l0097_24A8:
	ax = Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - dx)
	branch Test(ULE,CZ) l0097_24B3
	// succ:  l0097_24B0 l0097_24B3
l0097_24B0:
	goto l0097_25C4
	// succ:  l0097_25C4
l0097_24B3:
	branch Test(ULT,C) l0097_24BD
	// succ:  l0097_24B5 l0097_24BD
l0097_24B5:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULE,CZ) l0097_24BD
	// succ:  l0097_24BA l0097_24BD
l0097_24BA:
	goto l0097_25C4
	// succ:  l0097_25C4
l0097_24BD:
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - dx)
	branch Test(ULT,C) l0097_24E0
	// succ:  l0097_24C2 l0097_24E0
l0097_24C2:
	branch Test(UGT,CZ) l0097_24C9
	// succ:  l0097_24C4 l0097_24C9
l0097_24C4:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULT,C) l0097_24E0
	// succ:  l0097_24C9 l0097_24E0
l0097_24C9:
	SCZO = cond(Mem0[ds:0x3D68:word16] - 0x0000)
	branch Test(NE,Z) l0097_24E0
	// succ:  l0097_24D0 l0097_24E0
l0097_24D0:
	ax = Mem0[ds:0x3D66:word16]
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ds:0x3D68:word16] = 0x0001
	goto l0097_25C4
	// succ:  l0097_25C4
l0097_24E0:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D66:word16]
	LocalSize(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	si = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x000C:word16] = ax
	bx = ax
	ax = Mem0[ds:bx:word16]
	di = Mem0[ds:0x3D66:word16]
	dx = Mem0[ds:di:word16]
	cx = si
	di = ax
	si = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0097_250C
l0097_250C:
	branch cx == 0x0000 l0097_250E
	// succ:  l0097_250C_1 l0097_250E
l0097_250C_1:
	v23 = Mem0[si:word16]
	Mem0[di:word16] = v23
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0097_250C
	// succ:  l0097_250C
l0097_250E:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0097_2510
l0097_2510:
	branch cx == 0x0000 l0097_2512
	// succ:  l0097_2510_1 l0097_2512
l0097_2510_1:
	v24 = Mem0[si:byte]
	Mem0[di:byte] = v24
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0097_2510
	// succ:  l0097_2510
l0097_2512:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	si = Mem0[ds:0x3D66:word16]
	si = Mem0[ds:si:word16]
	v25 = Mem0[ds:si + 0x0012:word16] - ax
	Mem0[ds:si + 0x0012:word16] = v25
	SCZO = cond(v25)
	v26 = Mem0[ds:si + 0x0014:word16] - dx - C
	Mem0[ds:si + 0x0014:word16] = v26
	SCZO = cond(v26)
	si = Mem0[ds:bx:word16]
	Mem0[ds:si + 0x0012:word16] = ax
	Mem0[ds:si + 0x0014:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	si = Mem0[ds:0x3D66:word16]
	si = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0002:word16]
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	bx = Mem0[ss:bp - 0x000C:word16]
	si = Mem0[ds:bx:word16]
	Mem0[ds:si + 0x0002:word16] = ax
	Mem0[ds:si + 0x0004:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	ax = ax - Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp - 0x0004:word16] - C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	si = Mem0[ds:0x3D66:word16]
	si = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0002:word16]
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ds:si + 0x0002:word16] = ax
	Mem0[ds:si + 0x0004:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = bp - 0x0016
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0000 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D6A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0016:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_044A (retsize: 4;)
	sp = sp + 0x000E
	call fn0137_1CE4 (retsize: 4;)
	Mem0[ds:0x3D68:word16] = 0x0000
	// succ:  l0097_25C4
l0097_25C4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	// succ:  l0097_25CA
l0097_25CA:
	EndDialog(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l0097_268B
	// succ:  l0097_268B
l0097_25D2:
	SCZO = cond(dx - 0x0002)
	branch Test(EQ,Z) l0097_25DA
	// succ:  l0097_25D7 l0097_25DA
l0097_25D7:
	goto l0097_268B
	// succ:  l0097_268B
l0097_25DA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0097_25CA
	// succ:  l0097_25CA
l0097_25E2:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0069
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetDlgItemText(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	ax = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_03FA (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_261A
	// succ:  l0097_2613 l0097_261A
l0097_2613:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_264A
	// succ:  l0097_2616 l0097_264A
l0097_2616:
	goto l0097_23D6
	// succ:  l0097_23D6
l0097_261A:
	bx = Mem0[ds:0x3D66:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x0012:word16]
	dx = Mem0[ds:bx + 0x0014:word16]
	Mem0[ss:bp - 0x0126:word16] = ax
	Mem0[ss:bp - 0x0124:word16] = dx
	v19 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v19
	SCZO = cond(v19)
	v20 = Mem0[ss:bp - 0x0008:word16] + 0x00 + C
	Mem0[ss:bp - 0x0008:word16] = v20
	SCZO = cond(v20)
	SCZO = cond(dx - Mem0[ss:bp - 0x0008:word16])
	branch Test(UGT,CZ) l0097_2664
	// succ:  l0097_263B l0097_2664
l0097_263B:
	branch Test(ULT,C) l0097_2642
	// succ:  l0097_263D l0097_2642
l0097_263D:
	SCZO = cond(ax - Mem0[ss:bp - 0x000A:word16])
	branch Test(UGE,C) l0097_2664
	// succ:  l0097_2642 l0097_2664
l0097_2642:
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	goto l0097_2664
	// succ:  l0097_2664
l0097_264A:
	ax = dx
	ax = ax | Mem0[ss:bp - 0x000A:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_265C
	// succ:  l0097_2651 l0097_265C
l0097_2651:
	v17 = Mem0[ss:bp - 0x000A:word16] - 0x0001
	Mem0[ss:bp - 0x000A:word16] = v17
	SCZO = cond(v17)
	v18 = Mem0[ss:bp - 0x0008:word16] - 0x00 - C
	Mem0[ss:bp - 0x0008:word16] = v18
	SCZO = cond(v18)
	goto l0097_2664
	// succ:  l0097_2664
l0097_265C:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = ax
	// succ:  l0097_2664
l0097_2664:
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn004F_041A (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0069
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0122
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetDlgItemText(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	// succ:  l0097_268B
l0097_268B:
	ax = 0x0001
	// succ:  l0097_268E
l0097_268E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  WNDPROC_exit
WNDPROC_exit:


// SPELLMENUDLGPROC
// Return size: 4
void SPELLMENUDLGPROC()
SPELLMENUDLGPROC_entry:
	// succ:  l0097_269A
l0097_269A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0016
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0110
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_26BA
	// succ:  l0097_26B1 l0097_26BA
l0097_26B1:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_2702
	// succ:  l0097_26B4 l0097_2702
l0097_26B4:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0097_27BD
	// succ:  l0097_27BD
l0097_26BA:
	si = Mem0[ss:bp + 0x000E:word16]
	Mem0[ss:bp - 0x0004:word16] = 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0439
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0413
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	Mem0[ds:0x0CC4:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0411
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0CC4:word16]
	// succ:  l0097_26FA
l0097_26FA:
	call fn01D7_049A (retsize: 4;)
	sp = sp + 0x0004
	goto l0097_27BA
	// succ:  l0097_27BA
l0097_2702:
	cx = Mem0[ss:bp + 0x000A:word16]
	ax = cx
	SCZO = cond(ax - 0x0416)
	branch Test(UGT,CZ) l0097_271C
	// succ:  l0097_270C l0097_271C
l0097_270C:
	SCZO = cond(ax - 0x0411)
	branch Test(UGE,C) l0097_2728
	// succ:  l0097_2711 l0097_2728
l0097_2711:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_2781
	// succ:  l0097_2714 l0097_2781
l0097_2714:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0097_271A
	// succ:  l0097_2717 l0097_271A
l0097_2717:
	goto l0097_27AF
	// succ:  l0097_27AF
l0097_271A:
	goto l0097_26B4
	// succ:  l0097_26B4
l0097_271C:
	ax = ax - 0x0419
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_2736
	// succ:  l0097_2721 l0097_2736
l0097_2721:
	ax = ax - 0x0020
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_2748
	// succ:  l0097_2726 l0097_2748
l0097_2726:
	goto l0097_26B4
	// succ:  l0097_26B4
l0097_2728:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	cx = cx - 0x0411
	SCZO = cond(cx)
	Mem0[ds:0x0CC4:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	goto l0097_26FA
	// succ:  l0097_26FA
l0097_2736:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x010B
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1DBE (retsize: 4;)
	sp = sp + 0x0006
	goto l0097_27BA
	// succ:  l0097_27BA
l0097_2748:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0002)
	branch Test(NE,Z) l0097_27BA
	// succ:  l0097_274E l0097_27BA
l0097_274E:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SetCapture(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0097_2757
l0097_2757:
	ax = bp - 0x0016
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0202
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	PeekMessage(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0097_277C
	// succ:  l0097_2771 l0097_277C
l0097_2771:
	GetCapture()
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l0097_2757
	// succ:  l0097_277A l0097_2757
l0097_277A:
	goto l0097_2781
	// succ:  l0097_2781
l0097_277C:
	ReleaseCapture()
	// succ:  l0097_2781
l0097_2781:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0439
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0409
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LT,SO) l0097_27BA
	// succ:  l0097_279C l0097_27BA
l0097_279C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0CC4:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn01D7_0768 (retsize: 4;)
	Mem0[ds:0x0830:word16] = ax
	Mem0[ds:0x032C:word16] = 0x0029
	// succ:  l0097_27AF
l0097_27AF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndDialog(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0097_27BA
l0097_27BA:
	ax = 0x0001
	// succ:  l0097_27BD
l0097_27BD:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  SPELLMENUDLGPROC_exit
SPELLMENUDLGPROC_exit:


// DESCRIPTIONWNDPROC
// Return size: 4
void DESCRIPTIONWNDPROC()
DESCRIPTIONWNDPROC_entry:
	// succ:  l0097_27CA
l0097_27CA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0104
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0110
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_27EA
	// succ:  l0097_27E2 l0097_27EA
l0097_27E2:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_280C
	// succ:  l0097_27E5 l0097_280C
l0097_27E5:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0097_2924
	// succ:  l0097_2924
l0097_27EA:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn01D7_0580 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0439
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0407
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l0097_27FF
l0097_27FF:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	goto l0097_2921
	// succ:  l0097_2921
l0097_280C:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_2822
	// succ:  l0097_2812 l0097_2822
l0097_2812:
	ax = ax - 0x0410
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_2836
	// succ:  l0097_2817 l0097_2836
l0097_2817:
	ax = ax - 0x0008
	SCZO = cond(ax)
	branch Test(NE,Z) l0097_281F
	// succ:  l0097_281C l0097_281F
l0097_281C:
	goto l0097_2912
	// succ:  l0097_2912
l0097_281F:
	goto l0097_27E5
	// succ:  l0097_27E5
l0097_2822:
	call fn01D7_1E5C (retsize: 4;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndDialog(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l0097_2921
	// succ:  l0097_2921
l0097_2836:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0439
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0409
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l0097_2856
	// succ:  l0097_2853 l0097_2856
l0097_2853:
	goto l0097_2921
	// succ:  l0097_2921
l0097_2856:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x043A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0409
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	si = ax
	SCZO = cond(si - 0xFFFF)
	branch Test(NE,Z) l0097_2875
	// succ:  l0097_2872 l0097_2875
l0097_2872:
	goto l0097_2921
	// succ:  l0097_2921
l0097_2875:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0097_287E
	// succ:  l0097_2879 l0097_287E
l0097_2879:
	di = 0xFFFF
	goto l0097_2889
	// succ:  l0097_2889
l0097_287E:
	ax = si - 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01D7_0724 (retsize: 4;)
	sp = sp + 0x0002
	di = ax
	// succ:  l0097_2889
l0097_2889:
	bx = Mem0[ss:bp - 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	Mem0[ds:bx + 0x081C:word16] = di
	ax = 0x0373
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	si = ax
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l0097_28AC
	// succ:  l0097_28A7 l0097_28AC
l0097_28A7:
	cx = 0x0372
	goto l0097_28BA
	// succ:  l0097_28BA
l0097_28AC:
	ax = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	cx = Mem0[ds:di + 0x063A:word16]
	// succ:  l0097_28BA
l0097_28BA:
	ax = bp - 0x0105 + si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x006D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0439
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0403
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0439
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0402
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	cx = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0439
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0407
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	goto l0097_27FF
	// succ:  l0097_27FF
l0097_2912:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x010A
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1DBE (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l0097_2921
l0097_2921:
	ax = 0x0001
	// succ:  l0097_2924
l0097_2924:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  DESCRIPTIONWNDPROC_exit
DESCRIPTIONWNDPROC_exit:


// STATBARWNDPROC
// Return size: 4
void STATBARWNDPROC()
STATBARWNDPROC_entry:
	// succ:  l0097_2930
l0097_2930:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0052
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0110
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_2950
	// succ:  l0097_2947 l0097_2950
l0097_2947:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_29A6
	// succ:  l0097_294A l0097_29A6
l0097_294A:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0097_2A34
	// succ:  l0097_2A34
l0097_2950:
	si = 0x0001
	di = Mem0[ss:bp + 0x000E:word16]
	// succ:  l0097_2956
l0097_2956:
	SCZO = cond(Mem0[ds:si + 0x4D2E:byte] - 0x00)
	branch Test(EQ,Z) l0097_2989
	// succ:  l0097_295D l0097_2989
l0097_295D:
	bx = si
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[0x0097:bx + 0x0082:word16]
	ah = ah & 0x3F
	SZO = cond(ah)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	// succ:  l0097_2989
l0097_2989:
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x0010)
	branch Test(LT,SO) l0097_2956
	// succ:  l0097_298F l0097_2956
l0097_298F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0439
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0407
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	goto l0097_2A31
	// succ:  l0097_2A31
l0097_29A6:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_29BE
	// succ:  l0097_29AD l0097_29BE
l0097_29AD:
	ax = ax - 0x0062
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_29CC
	// succ:  l0097_29B2 l0097_29CC
l0097_29B2:
	ax = ax - 0x009B
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_29D2
	// succ:  l0097_29B7 l0097_29D2
l0097_29B7:
	ax = ax - 0x0312
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_2A08
	// succ:  l0097_29BC l0097_2A08
l0097_29BC:
	goto l0097_294A
	// succ:  l0097_294A
l0097_29BE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndDialog(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l0097_2A31
	// succ:  l0097_2A31
l0097_29CC:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0002)
	branch Test(NE,Z) l0097_2A31
	// succ:  l0097_29D2 l0097_2A31
l0097_29D2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0409
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	di = ax
	SCZO = cond(di - 0xFFFF)
	branch Test(EQ,Z) l0097_2A31
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0409
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	di = ax
	SCZO = cond(di - 0xFFFF)
	branch Test(EQ,Z) l0097_2A31
	// succ:  l0097_29EE l0097_2A31
l0097_29EE:
	si = 0x0001
	si = 0x0001
	// succ:  l0097_29F1
l0097_29F1:
	SCZO = cond(Mem0[ds:si + 0x4D2E:byte] - 0x00)
	branch Test(EQ,Z) l0097_29FF
	// succ:  l0097_29F8 l0097_29FF
l0097_29F8:
	ax = di
	di = di - 0x0001
	SZO = cond(di)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0097_2A1A
	// succ:  l0097_29FF l0097_2A1A
l0097_29FF:
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x0010)
	branch Test(LT,SO) l0097_29F1
	// succ:  l0097_2A05 l0097_29F1
l0097_2A05:
	goto l0097_2A31
	// succ:  l0097_2A31
l0097_2A08:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x010D
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1DBE (retsize: 4;)
	sp = sp + 0x0006
	goto l0097_2A31
	// succ:  l0097_2A31
l0097_2A1A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cl = 0x06
	si = si << 0x0001
	SCZO = cond(si)
	al = Mem0[0x0097:si + 0x0083:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax >>u cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_1AEE (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l0097_2A31
l0097_2A31:
	ax = 0x0001
	// succ:  l0097_2A34
l0097_2A34:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  STATBARWNDPROC_exit
STATBARWNDPROC_exit:


// ABOUTDLGPROC
// Return size: 4
void ABOUTDLGPROC()
ABOUTDLGPROC_entry:
	// succ:  l0097_2A40
l0097_2A40:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0110
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_2A62
	// succ:  l0097_2A57 l0097_2A62
l0097_2A57:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0097_2A5D
	// succ:  l0097_2A5A l0097_2A5D
l0097_2A5A:
	goto l0097_2AE0
	// succ:  l0097_2AE0
l0097_2A5D:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0097_2BE3
	// succ:  l0097_2BE3
l0097_2A62:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x03E9
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C6E:word16]
	CheckDlgButton(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x03EA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x00B2:word16]
	CheckDlgButton(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x03EB
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x05B2:word16]
	CheckDlgButton(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x03EC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x00B4:word16]
	CheckDlgButton(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x03ED
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x00B6:word16]
	CheckDlgButton(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x03EE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5A:word16]
	CheckDlgButton(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x03EF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x009E:word16]
	CheckDlgButton(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0461
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0465
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4C60:word16]
	ax = ax + 0x0461
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CheckRadioButton(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	goto l0097_2BE0
	// succ:  l0097_2BE0
l0097_2AE0:
	dx = Mem0[ss:bp + 0x000A:word16]
	ax = dx
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0097_2AFC
	// succ:  l0097_2AE8 l0097_2AFC
l0097_2AE8:
	ax = ax - 0x0460
	SCZO = cond(ax)
	branch Test(UGE,C) l0097_2AF0
	// succ:  l0097_2AED l0097_2AF0
l0097_2AED:
	goto l0097_2A5D
	// succ:  l0097_2A5D
l0097_2AF0:
	ax = ax - 0x0004
	SCZO = cond(ax)
	branch Test(UGT,CZ) l0097_2AF8
	// succ:  l0097_2AF5 l0097_2AF8
l0097_2AF5:
	goto l0097_2BD8
	// succ:  l0097_2BD8
l0097_2AF8:
	goto l0097_2A5D
	// succ:  l0097_2A5D
l0097_2AFC:
	si = Mem0[ss:bp + 0x000E:word16]
	di = Mem0[ds:0x009E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x03E9
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	Mem0[ds:0x4C6E:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x03EA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	Mem0[ds:0x00B2:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x03EB
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	Mem0[ds:0x05B2:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x03EC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	Mem0[ds:0x00B4:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x03ED
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	Mem0[ds:0x00B6:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x03EE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	Mem0[ds:0x4C5A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x03EF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	Mem0[ds:0x009E:word16] = ax
	SCZO = cond(di - ax)
	branch Test(EQ,Z) l0097_2BCD
	// succ:  l0097_2BAD l0097_2BCD
l0097_2BAD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EA8:word16]
	SCZO = cond(ax - 0x0001)
	C = !C
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x0005
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4138:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x413A:word16]
	call fn0017_1AB8 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0097_2BCD
l0097_2BCD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndDialog(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l0097_2BE0
	// succ:  l0097_2BE0
l0097_2BD8:
	dx = dx - 0x0461
	SCZO = cond(dx)
	Mem0[ds:0x4C60:word16] = dx
	// succ:  l0097_2BE0
l0097_2BE0:
	ax = 0x0001
	// succ:  l0097_2BE3
l0097_2BE3:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  ABOUTDLGPROC_exit
ABOUTDLGPROC_exit:


// BUTTONWNDPROC3
// Return size: 4
void BUTTONWNDPROC3()
BUTTONWNDPROC3_entry:
	// succ:  l0097_2BF0
l0097_2BF0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0090
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0110
	SCZO = cond(ax)
	branch Test(EQ,Z) l0097_2C14
	// succ:  l0097_2C08 l0097_2C14
l0097_2C08:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0097_2C0E
	// succ:  l0097_2C0B l0097_2C0E
l0097_2C0B:
	goto l0097_2CD6
	// succ:  l0097_2CD6
l0097_2C0E:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0097_2CF1
	// succ:  l0097_2CF1
l0097_2C14:
	Mem0[ss:bp - 0x000A:word16] = 0x2CFD
	Mem0[ss:bp - 0x000C:word16] = 0x4918
	// succ:  l0097_2C1E
l0097_2C1E:
	ax = 0x0097
	es = ax
	bx = Mem0[ss:bp - 0x000C:word16]
	bx = Mem0[ds:bx:word16]
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(NE,Z) l0097_2C2F
	// succ:  l0097_2C2C l0097_2C2F
l0097_2C2C:
	goto l0097_2CC1
	// succ:  l0097_2CC1
l0097_2C2F:
	si = Mem0[ss:bp - 0x000A:word16]
	Mem0[ss:bp - 0x0004:word16] = si
	si = Mem0[0x0097:si:word16]
	SCZO = cond(si - 0x00DD)
	branch Test(NE,Z) l0097_2C7C
	// succ:  l0097_2C3E l0097_2C7C
l0097_2C3E:
	Mem0[ss:bp - 0x0010:word16] = si
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(GE,SO) l0097_2C4C
	// succ:  l0097_2C45 l0097_2C4C
l0097_2C45:
	Mem0[ss:bp - 0x0010:word16] = 0x00DE
	bx = -bx
	SCZO = cond(bx)
	C = bx == 0x0000
	// succ:  l0097_2C4C
l0097_2C4C:
	SCZO = cond(bx - 0x0001)
	branch Test(NE,Z) l0097_2C58
	// succ:  l0097_2C51 l0097_2C58
l0097_2C51:
	cx = 0x012C
	bx = cx
	goto l0097_2C68
	// succ:  l0097_2C68
l0097_2C58:
	SCZO = cond(bx - 0x0002)
	branch Test(NE,Z) l0097_2C62
	// succ:  l0097_2C5D l0097_2C62
l0097_2C5D:
	cx = 0x012C
	goto l0097_2C65
	// succ:  l0097_2C65
l0097_2C62:
	cx = 0x02E5
	// succ:  l0097_2C65
l0097_2C65:
	bx = 0x02E6
	// succ:  l0097_2C68
l0097_2C68:
	si = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[0x0097:si + 0x0002:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	si = Mem0[ss:bp - 0x0010:word16]
	di = ax
	Mem0[ss:bp - 0x0008:word16] = bx
	goto l0097_2C94
	// succ:  l0097_2C94
l0097_2C7C:
	SCZO = cond(si - 0x00DF)
	branch Test(EQ,Z) l0097_2C88
	// succ:  l0097_2C82 l0097_2C88
l0097_2C82:
	SCZO = cond(si - 0x00E0)
	branch Test(NE,Z) l0097_2CC1
	// succ:  l0097_2C88 l0097_2CC1
l0097_2C88:
	bx = Mem0[ss:bp - 0x0004:word16]
	cx = Mem0[0x0097:bx + 0x0002:word16]
	di = di - di
	SCZO = cond(di)
	Mem0[ss:bp - 0x0008:word16] = di
	// succ:  l0097_2C94
l0097_2C94:
	ax = bp - 0x0090
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0439
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0090
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	// succ:  l0097_2CC1
l0097_2CC1:
	v16 = Mem0[ss:bp - 0x000A:word16] + 0x0004
	Mem0[ss:bp - 0x000A:word16] = v16
	SCZO = cond(v16)
	v17 = Mem0[ss:bp - 0x000C:word16] + 0x0002
	Mem0[ss:bp - 0x000C:word16] = v17
	SCZO = cond(v17)
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x4958)
	branch Test(UGE,C) l0097_2CD3
	// succ:  l0097_2CD0 l0097_2CD3
l0097_2CD0:
	goto l0097_2C1E
	// succ:  l0097_2C1E
l0097_2CD3:
	goto l0097_2CEE
	// succ:  l0097_2CEE
l0097_2CD6:
	dx = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(dx - 0x0001)
	branch Test(EQ,Z) l0097_2CE3
	// succ:  l0097_2CDE l0097_2CE3
l0097_2CDE:
	SCZO = cond(dx - 0x0002)
	branch Test(NE,Z) l0097_2CEE
	// succ:  l0097_2CE3 l0097_2CEE
l0097_2CE3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndDialog(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0097_2CEE
l0097_2CEE:
	ax = 0x0001
	// succ:  l0097_2CF1
l0097_2CF1:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  BUTTONWNDPROC3_exit
BUTTONWNDPROC3_exit:


// fn00AF_0000
// Return size: 4
void fn00AF_0000()
fn00AF_0000_entry:
	// succ:  l00AF_0000
l00AF_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x032A:word16] - 0x0000)
	branch Test(EQ,Z) l00AF_0017
	// succ:  l00AF_0014 l00AF_0017
l00AF_0014:
	goto l00AF_0200
	// succ:  l00AF_0200
l00AF_0017:
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax - 0x0020
	SCZO = cond(ax)
	SCZO = cond(ax - 0x005A)
	branch Test(ULE,CZ) l00AF_0025
	// succ:  l00AF_0022 l00AF_0025
l00AF_0022:
	goto l00AF_00E4
	// succ:  l00AF_00E4
l00AF_0025:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v12 = ax
	ax = bx
	bx = v12
	switch (ax) { l00AF_00EA l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00F0 l00AF_00FC l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00EA l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00F6 l00AF_00E4 l00AF_0102 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_0108 l00AF_0118 l00AF_011E l00AF_00E4 l00AF_0124 l00AF_012A l00AF_0130 l00AF_0140 l00AF_0146 l00AF_0156 l00AF_0166 l00AF_0176 l00AF_017C l00AF_018C l00AF_00E4 l00AF_00E4 l00AF_0192 l00AF_0198 l00AF_00E4 l00AF_019E l00AF_01AE l00AF_00E4 l00AF_01B4 l00AF_01BA l00AF_0176 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_01CA l00AF_0118 l00AF_011E l00AF_00E4 l00AF_0124 l00AF_012A l00AF_01D0 l00AF_0140 l00AF_01D6 l00AF_01DC l00AF_01E2 l00AF_0176 l00AF_01E8 l00AF_018C l00AF_00E4 l00AF_00E4 l00AF_01EE l00AF_0198 l00AF_00E4 l00AF_01F4 l00AF_01AE l00AF_00E4 l00AF_01B4 l00AF_01FA l00AF_0176 }
	// succ:  l00AF_00EA l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00F0 l00AF_00FC l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00EA l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00F6 l00AF_00E4 l00AF_0102 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_0108 l00AF_0118 l00AF_011E l00AF_00E4 l00AF_0124 l00AF_012A l00AF_0130 l00AF_0140 l00AF_0146 l00AF_0156 l00AF_0166 l00AF_0176 l00AF_017C l00AF_018C l00AF_00E4 l00AF_00E4 l00AF_0192 l00AF_0198 l00AF_00E4 l00AF_019E l00AF_01AE l00AF_00E4 l00AF_01B4 l00AF_01BA l00AF_0176 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_00E4 l00AF_01CA l00AF_0118 l00AF_011E l00AF_00E4 l00AF_0124 l00AF_012A l00AF_01D0 l00AF_0140 l00AF_01D6 l00AF_01DC l00AF_01E2 l00AF_0176 l00AF_01E8 l00AF_018C l00AF_00E4 l00AF_00E4 l00AF_01EE l00AF_0198 l00AF_00E4 l00AF_01F4 l00AF_01AE l00AF_00E4 l00AF_01B4 l00AF_01FA l00AF_0176
l00AF_00E4:
	ax = ax - ax
	SCZO = cond(ax)
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_00EA:
	ax = 0x0028
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_00F0:
	Mem0[ds:0x0486:word16] = 0x0001
	// succ:  l00AF_00F6
l00AF_00F6:
	ax = 0x0009
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_00FC:
	Mem0[ds:0x0486:word16] = 0x0001
	// succ:  l00AF_0102
l00AF_0102:
	ax = 0x000A
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0108:
	ax = 0x0001
	Mem0[ds:0x0330:word16] = ax
	Mem0[ds:0x0332:word16] = ax
	ax = 0x0030
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0118:
	ax = 0x0017
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_011E:
	ax = 0x0036
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0124:
	ax = 0x003A
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_012A:
	ax = 0x001C
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0130:
	ax = 0x0001
	Mem0[ds:0x0330:word16] = ax
	Mem0[ds:0x0332:word16] = ax
	ax = 0x0031
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0140:
	ax = 0x0033
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0146:
	ax = 0x0001
	Mem0[ds:0x0330:word16] = ax
	Mem0[ds:0x0332:word16] = ax
	ax = 0x002F
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0156:
	ax = 0x0001
	Mem0[ds:0x0330:word16] = ax
	Mem0[ds:0x0332:word16] = ax
	ax = 0x002B
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0166:
	ax = 0x0001
	Mem0[ds:0x0330:word16] = ax
	Mem0[ds:0x0332:word16] = ax
	ax = 0x002D
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0176:
	ax = 0x0037
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_017C:
	ax = 0x0001
	Mem0[ds:0x0330:word16] = ax
	Mem0[ds:0x0332:word16] = ax
	ax = 0x002E
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_018C:
	ax = 0x000C
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0192:
	ax = 0x0050
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0198:
	ax = 0x002A
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_019E:
	ax = 0x0001
	Mem0[ds:0x0330:word16] = ax
	Mem0[ds:0x0332:word16] = ax
	ax = 0x002C
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_01AE:
	ax = 0x001D
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_01B4:
	ax = 0x0019
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_01BA:
	ax = 0x0001
	Mem0[ds:0x0330:word16] = ax
	Mem0[ds:0x0332:word16] = ax
	ax = 0x0032
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_01CA:
	ax = 0x0006
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_01D0:
	ax = 0x0007
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_01D6:
	ax = 0x0005
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_01DC:
	ax = 0x0001
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_01E2:
	ax = 0x0003
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_01E8:
	ax = 0x0004
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_01EE:
	ax = 0x003B
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_01F4:
	ax = 0x0002
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_01FA:
	ax = 0x0008
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0200:
	ax = Mem0[ds:0x032A:word16]
	SCZO = cond(ax - 0x0035)
	branch Test(EQ,Z) l00AF_022A
	// succ:  l00AF_0208 l00AF_022A
l00AF_0208:
	branch Test(ULE,CZ) l00AF_020D
	// succ:  l00AF_020A l00AF_020D
l00AF_020A:
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_020D:
	SCZO = cond(al - 0x1A)
	branch Test(EQ,Z) l00AF_022A
	// succ:  l00AF_0211 l00AF_022A
l00AF_0211:
	branch Test(GT,SZO) l00AF_021E
	// succ:  l00AF_0213 l00AF_021E
l00AF_0213:
	al = al - 0x0B
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_022A
	// succ:  l00AF_0217 l00AF_022A
l00AF_0217:
	al = al - 0x0B
	SCZO = cond(al)
	// succ:  l00AF_0219
l00AF_0219:
	branch Test(EQ,Z) l00AF_022A
	// succ:  l00AF_021B l00AF_022A
l00AF_021B:
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_021E:
	al = al - 0x27
	SCZO = cond(al)
	branch Test(NE,Z) l00AF_0225
	// succ:  l00AF_0222 l00AF_0225
l00AF_0222:
	goto l00AF_02AC
	// succ:  l00AF_02AC
l00AF_0225:
	al = al - 0x02
	SCZO = cond(al)
	goto l00AF_0219
	// succ:  l00AF_0219
l00AF_022A:
	ax = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax - 0x0079)
	branch Test(EQ,Z) l00AF_02A6
	// succ:  l00AF_0232 l00AF_02A6
l00AF_0232:
	branch Test(ULE,CZ) l00AF_0237
	// succ:  l00AF_0234 l00AF_0237
l00AF_0234:
	goto l00AF_00E4
	// succ:  l00AF_00E4
l00AF_0237:
	SCZO = cond(al - 0x68)
	branch Test(EQ,Z) l00AF_0282
	// succ:  l00AF_023B l00AF_0282
l00AF_023B:
	branch Test(UGT,CZ) l00AF_0252
	// succ:  l00AF_023D l00AF_0252
l00AF_023D:
	al = al - 0x0D
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_026A
	// succ:  l00AF_0241 l00AF_026A
l00AF_0241:
	al = al - 0x0E
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_0270
	// succ:  l00AF_0245 l00AF_0270
l00AF_0245:
	al = al - 0x13
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_0276
	// succ:  l00AF_0249 l00AF_0276
l00AF_0249:
	al = al - 0x34
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_027C
	// succ:  l00AF_024D l00AF_027C
l00AF_024D:
	goto l00AF_00E4
	// succ:  l00AF_00E4
l00AF_0252:
	al = al - 0x6A
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_0288
	// succ:  l00AF_0256 l00AF_0288
l00AF_0256:
	al = al - 0x01
	SZO = cond(al)
	branch Test(EQ,Z) l00AF_028E
	// succ:  l00AF_025A l00AF_028E
l00AF_025A:
	al = al - 0x01
	SZO = cond(al)
	branch Test(EQ,Z) l00AF_0294
	// succ:  l00AF_025E l00AF_0294
l00AF_025E:
	al = al - 0x02
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_029A
	// succ:  l00AF_0262 l00AF_029A
l00AF_0262:
	al = al - 0x07
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_02A0
	// succ:  l00AF_0266 l00AF_02A0
l00AF_0266:
	goto l00AF_00E4
	// succ:  l00AF_00E4
l00AF_026A:
	ax = Mem0[ds:0x032A:word16]
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0270:
	ax = 0x0015
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0276:
	ax = 0x001B
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_027C:
	ax = 0x0012
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0282:
	ax = 0x0013
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0288:
	ax = 0x0011
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_028E:
	ax = 0x000D
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0294:
	ax = 0x000F
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_029A:
	ax = 0x0010
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_02A0:
	ax = 0x000E
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_02A6:
	ax = 0x0014
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_02AC:
	ax = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax - 0x0079)
	branch Test(EQ,Z) l00AF_031A
	// succ:  l00AF_02B4 l00AF_031A
l00AF_02B4:
	branch Test(ULE,CZ) l00AF_02B9
	// succ:  l00AF_02B6 l00AF_02B9
l00AF_02B6:
	goto l00AF_00E4
	// succ:  l00AF_00E4
l00AF_02B9:
	SCZO = cond(al - 0x68)
	branch Test(EQ,Z) l00AF_02F6
	// succ:  l00AF_02BD l00AF_02F6
l00AF_02BD:
	branch Test(UGT,CZ) l00AF_02D2
	// succ:  l00AF_02BF l00AF_02D2
l00AF_02BF:
	al = al - 0x0D
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_026A
	// succ:  l00AF_02C3 l00AF_026A
l00AF_02C3:
	al = al - 0x0E
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_0270
	// succ:  l00AF_02C7 l00AF_0270
l00AF_02C7:
	al = al - 0x13
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_02EA
	// succ:  l00AF_02CB l00AF_02EA
l00AF_02CB:
	al = al - 0x34
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_02F0
	// succ:  l00AF_02CF l00AF_02F0
l00AF_02CF:
	goto l00AF_00E4
	// succ:  l00AF_00E4
l00AF_02D2:
	al = al - 0x6A
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_02FC
	// succ:  l00AF_02D6 l00AF_02FC
l00AF_02D6:
	al = al - 0x01
	SZO = cond(al)
	branch Test(EQ,Z) l00AF_0302
	// succ:  l00AF_02DA l00AF_0302
l00AF_02DA:
	al = al - 0x01
	SZO = cond(al)
	branch Test(EQ,Z) l00AF_0308
	// succ:  l00AF_02DE l00AF_0308
l00AF_02DE:
	al = al - 0x02
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_030E
	// succ:  l00AF_02E2 l00AF_030E
l00AF_02E2:
	al = al - 0x07
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_0314
	// succ:  l00AF_02E6 l00AF_0314
l00AF_02E6:
	goto l00AF_00E4
	// succ:  l00AF_00E4
l00AF_02EA:
	ax = 0x0026
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_02F0:
	ax = 0x0023
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_02F6:
	ax = 0x0024
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_02FC:
	ax = 0x0022
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0302:
	ax = 0x001E
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0308:
	ax = 0x0020
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_030E:
	ax = 0x0021
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_0314:
	ax = 0x001F
	goto l00AF_031D
	// succ:  l00AF_031D
l00AF_031A:
	ax = 0x0025
	// succ:  l00AF_031D
l00AF_031D:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00AF_0000_exit
fn00AF_0000_exit:


// fn00AF_0328
// Return size: 4
void fn00AF_0328()
fn00AF_0328_entry:
	// succ:  l00AF_0328
l00AF_0328:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetKeyState(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l00AF_0348
	// succ:  l00AF_0343 l00AF_0348
l00AF_0343:
	si = si - si
	SCZO = cond(si)
	goto l00AF_034B
	// succ:  l00AF_034B
l00AF_0348:
	si = 0x002A
	// succ:  l00AF_034B
l00AF_034B:
	SCZO = cond(Mem0[ds:0x032A:word16] - 0x0000)
	branch Test(NE,Z) l00AF_03CC
	// succ:  l00AF_0352 l00AF_03CC
l00AF_0352:
	SCZO = cond(si - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ds:0x0330:word16] = ax
	Mem0[ds:0x0332:word16] = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax - 0x0028)
	branch Test(EQ,Z) l00AF_03C6
	// succ:  l00AF_0366 l00AF_03C6
l00AF_0366:
	branch Test(ULE,CZ) l00AF_036B
	// succ:  l00AF_0368 l00AF_036B
l00AF_0368:
	goto l00AF_0412
	// succ:  l00AF_0412
l00AF_036B:
	SCZO = cond(al - 0x23)
	branch Test(EQ,Z) l00AF_03A8
	// succ:  l00AF_036F l00AF_03A8
l00AF_036F:
	branch Test(UGT,CZ) l00AF_0382
	// succ:  l00AF_0371 l00AF_0382
l00AF_0371:
	al = al - 0x0C
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_0396
	// succ:  l00AF_0375 l00AF_0396
l00AF_0375:
	al = al - 0x15
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_039C
	// succ:  l00AF_0379 l00AF_039C
l00AF_0379:
	al = al - 0x01
	SZO = cond(al)
	branch Test(EQ,Z) l00AF_03A2
	// succ:  l00AF_037D l00AF_03A2
l00AF_037D:
	goto l00AF_0412
	// succ:  l00AF_0412
l00AF_0382:
	al = al - 0x24
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_03AE
	// succ:  l00AF_0386 l00AF_03AE
l00AF_0386:
	al = al - 0x01
	SZO = cond(al)
	branch Test(EQ,Z) l00AF_03B4
	// succ:  l00AF_038A l00AF_03B4
l00AF_038A:
	al = al - 0x01
	SZO = cond(al)
	branch Test(EQ,Z) l00AF_03BA
	// succ:  l00AF_038E l00AF_03BA
l00AF_038E:
	al = al - 0x01
	SZO = cond(al)
	branch Test(EQ,Z) l00AF_03C0
	// succ:  l00AF_0392 l00AF_03C0
l00AF_0392:
	goto l00AF_0412
	// succ:  l00AF_0412
l00AF_0396:
	ax = 0x0028
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_039C:
	ax = si + 0x0002
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_03A2:
	ax = si + 0x0004
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_03A8:
	ax = si + 0x0006
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_03AE:
	ax = si + 0x0008
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_03B4:
	ax = si + 0x0007
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_03BA:
	ax = si + 0x0001
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_03C0:
	ax = si + 0x0003
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_03C6:
	ax = si + 0x0005
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_03CC:
	ax = Mem0[ds:0x032A:word16]
	SCZO = cond(ax - 0x0035)
	branch Test(EQ,Z) l00AF_03EE
	// succ:  l00AF_03D4 l00AF_03EE
l00AF_03D4:
	branch Test(UGT,CZ) l00AF_0412
	// succ:  l00AF_03D6 l00AF_0412
l00AF_03D6:
	SCZO = cond(al - 0x1A)
	branch Test(EQ,Z) l00AF_03EE
	// succ:  l00AF_03DA l00AF_03EE
l00AF_03DA:
	branch Test(GT,SZO) l00AF_03E6
	// succ:  l00AF_03DC l00AF_03E6
l00AF_03DC:
	al = al - 0x0B
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_03EE
	// succ:  l00AF_03E0 l00AF_03EE
l00AF_03E0:
	al = al - 0x0B
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_03EE
	// succ:  l00AF_03E4 l00AF_03EE
l00AF_03E4:
	goto l00AF_0412
	// succ:  l00AF_0412
l00AF_03E6:
	al = al - 0x27
	SCZO = cond(al)
	branch Test(EQ,Z) l00AF_0448
	// succ:  l00AF_03EA l00AF_0448
l00AF_03EA:
	al = al - 0x02
	SCZO = cond(al)
	branch Test(NE,Z) l00AF_0412
	// succ:  l00AF_03EE l00AF_0412
l00AF_03EE:
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax - 0x0021
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0007)
	branch Test(UGT,CZ) l00AF_0412
	// succ:  l00AF_03F9 l00AF_0412
l00AF_03F9:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v15 = ax
	ax = bx
	bx = v15
	switch (ax) { l00AF_0418 l00AF_041E l00AF_0424 l00AF_042A l00AF_0430 l00AF_0436 l00AF_043C l00AF_0442 }
	// succ:  l00AF_0418 l00AF_041E l00AF_0424 l00AF_042A l00AF_0430 l00AF_0436 l00AF_043C l00AF_0442
l00AF_0412:
	ax = ax - ax
	SCZO = cond(ax)
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_0418:
	ax = 0x000E
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_041E:
	ax = 0x0010
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_0424:
	ax = 0x0012
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_042A:
	ax = 0x0014
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_0430:
	ax = 0x0013
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_0436:
	ax = 0x000D
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_043C:
	ax = 0x000F
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_0442:
	ax = 0x0011
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_0448:
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax - 0x0021
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0007)
	branch Test(UGT,CZ) l00AF_0412
	// succ:  l00AF_0453 l00AF_0412
l00AF_0453:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v17 = ax
	ax = bx
	bx = v17
	switch (ax) { l00AF_046C l00AF_0472 l00AF_0478 l00AF_047E l00AF_0484 l00AF_048A l00AF_0490 l00AF_0496 }
	// succ:  l00AF_046C l00AF_0472 l00AF_0478 l00AF_047E l00AF_0484 l00AF_048A l00AF_0490 l00AF_0496
l00AF_046C:
	ax = 0x001F
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_0472:
	ax = 0x0021
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_0478:
	ax = 0x0023
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_047E:
	ax = 0x0025
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_0484:
	ax = 0x0024
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_048A:
	ax = 0x001E
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_0490:
	ax = 0x0020
	goto l00AF_0499
	// succ:  l00AF_0499
l00AF_0496:
	ax = 0x0022
	// succ:  l00AF_0499
l00AF_0499:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00AF_0328_exit
fn00AF_0328_exit:


// fn00AF_04A4
// Return size: 4
void fn00AF_04A4()
fn00AF_04A4_entry:
	// succ:  l00AF_04A4
l00AF_04A4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l00AF_04BD
	// succ:  l00AF_04BA l00AF_04BD
l00AF_04BA:
	goto l00AF_0811
	// succ:  l00AF_0811
l00AF_04BD:
	ax = si
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x004F)
	branch Test(ULE,CZ) l00AF_04C8
	// succ:  l00AF_04C5 l00AF_04C8
l00AF_04C5:
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_04C8:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v14 = ax
	ax = bx
	bx = v14
	switch (ax) { l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_057A l00AF_05A6 l00AF_05AE l00AF_05AE l00AF_05AE l00AF_05AE l00AF_05AE l00AF_05AE l00AF_05AE l00AF_05AE l00AF_05B8 l00AF_05F4 l00AF_0614 l00AF_061C l00AF_063E l00AF_0646 l00AF_05AE l00AF_0668 l00AF_0670 l00AF_0678 l00AF_0678 l00AF_0678 l00AF_0678 l00AF_0678 l00AF_0678 l00AF_0678 l00AF_0678 l00AF_0678 l00AF_0682 l00AF_068A l00AF_069A l00AF_06A2 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_06AA l00AF_06D2 l00AF_06D8 l00AF_06FA l00AF_0702 l00AF_06D2 l00AF_0708 l00AF_072A l00AF_0732 l00AF_073A l00AF_07AC l00AF_07DC l00AF_07E1 l00AF_07E1 l00AF_07E1 l00AF_07E1 l00AF_07E1 l00AF_07E1 l00AF_07E1 l00AF_07BE l00AF_07BE l00AF_07BE l00AF_07BE l00AF_07BE l00AF_07BE l00AF_07BE l00AF_07BE l00AF_07BE l00AF_07BE l00AF_07D6 }
	// succ:  l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_057A l00AF_05A6 l00AF_05AE l00AF_05AE l00AF_05AE l00AF_05AE l00AF_05AE l00AF_05AE l00AF_05AE l00AF_05AE l00AF_05B8 l00AF_05F4 l00AF_0614 l00AF_061C l00AF_063E l00AF_0646 l00AF_05AE l00AF_0668 l00AF_0670 l00AF_0678 l00AF_0678 l00AF_0678 l00AF_0678 l00AF_0678 l00AF_0678 l00AF_0678 l00AF_0678 l00AF_0678 l00AF_0682 l00AF_068A l00AF_069A l00AF_06A2 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_0570 l00AF_06AA l00AF_06D2 l00AF_06D8 l00AF_06FA l00AF_0702 l00AF_06D2 l00AF_0708 l00AF_072A l00AF_0732 l00AF_073A l00AF_07AC l00AF_07DC l00AF_07E1 l00AF_07E1 l00AF_07E1 l00AF_07E1 l00AF_07E1 l00AF_07E1 l00AF_07E1 l00AF_07BE l00AF_07BE l00AF_07BE l00AF_07BE l00AF_07BE l00AF_07BE l00AF_07BE l00AF_07BE l00AF_07BE l00AF_07BE l00AF_07D6
l00AF_0570:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00BF_0000 (retsize: 4;)
	sp = sp + 0x0002
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_057A:
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0066 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00AF_059A
	// succ:  l00AF_058B l00AF_059A
l00AF_058B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00BF_088E (retsize: 4;)
	sp = sp + 0x0004
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_059A:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBeep(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_05A6:
	call fn00BF_082C (retsize: 4;)
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_05AE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00BF_0EB2 (retsize: 4;)
	sp = sp + 0x0002
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_05B8:
	ax = 0x0207
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x032A:word16] = 0x0000
	Mem0[ds:0x0830:word16] = 0xFFFF
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0000)
	branch Test(NE,Z) l00AF_05E6
	// succ:  l00AF_05E3 l00AF_05E6
l00AF_05E3:
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_05E6:
	ReleaseCapture()
	Mem0[ds:0x0098:word16] = 0x0000
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_05F4:
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0066 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00AF_059A
	// succ:  l00AF_0605 l00AF_059A
l00AF_0605:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00BF_09D4 (retsize: 4;)
	sp = sp + 0x0004
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_0614:
	call fn00BF_0972 (retsize: 4;)
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_061C:
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0066 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00AF_0630
	// succ:  l00AF_062D l00AF_0630
l00AF_062D:
	goto l00AF_059A
	// succ:  l00AF_059A
l00AF_0630:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00BF_0AEE (retsize: 4;)
	sp = sp + 0x0004
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_063E:
	call fn00CF_062A (retsize: 4;)
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_0646:
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0066 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00AF_065A
	// succ:  l00AF_0657 l00AF_065A
l00AF_0657:
	goto l00AF_059A
	// succ:  l00AF_059A
l00AF_065A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00CF_0674 (retsize: 4;)
	sp = sp + 0x0004
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_0668:
	sp = sp - 0x0002
	call fn00AF_0AF6 (retsize: 2;)
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_0670:
	call fn00BF_0F78 (retsize: 4;)
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_0678:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00BF_0FA0 (retsize: 4;)
	sp = sp + 0x0002
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_0682:
	call fn00BF_1116 (retsize: 4;)
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_068A:
	ax = 0x0032
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0BB0 (retsize: 4;)
	sp = sp + 0x0004
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_069A:
	call fn01D7_0332 (retsize: 4;)
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_06A2:
	call fn00BF_1686 (retsize: 4;)
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_06AA:
	SCZO = cond(Mem0[ds:0x4D88:word16] - 0x0000)
	branch Test(NE,Z) l00AF_06C0
	// succ:  l00AF_06B1 l00AF_06C0
l00AF_06B1:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn002F_0D4C (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00AF_06C0
	// succ:  l00AF_06BD l00AF_06C0
l00AF_06BD:
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_06C0:
	call fn0077_0DF0 (retsize: 4;)
	ax = 0x0002
	// succ:  l00AF_06C8
l00AF_06C8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1E96 (retsize: 4;)
	sp = sp + 0x0002
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_06D2:
	ax = 0x0001
	goto l00AF_06C8
	// succ:  l00AF_06C8
l00AF_06D8:
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0066 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00AF_06EC
	// succ:  l00AF_06E9 l00AF_06EC
l00AF_06E9:
	goto l00AF_059A
	// succ:  l00AF_059A
l00AF_06EC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00BF_0D12 (retsize: 4;)
	sp = sp + 0x0004
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_06FA:
	call fn00BF_0BF2 (retsize: 4;)
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_0702:
	ax = 0x0003
	goto l00AF_06C8
	// succ:  l00AF_06C8
l00AF_0708:
	di = Mem0[ds:0x032E:word16]
	Mem0[ds:0x032E:word16] = 0x0000
	Mem0[ds:0x4944:word16] = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0BB0 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x4944:word16] = 0x0000
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_072A:
	sp = sp - 0x0002
	call fn00AF_0E2E (retsize: 2;)
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_0732:
	sp = sp - 0x0002
	call fn00AF_0F62 (retsize: 2;)
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_073A:
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn00F7_00EA (retsize: 4;)
	sp = sp + 0x0004
	ax = Mem0[ds:0x4D68:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	SCZO = cond(ax - Mem0[ss:bp - 0x0004:word16])
	branch Test(ULE,CZ) l00AF_075C
	// succ:  l00AF_0754 l00AF_075C
l00AF_0754:
	Mem0[ds:0x4CE2:word16] = 0x0000
	goto l00AF_0777
	// succ:  l00AF_0777
l00AF_075C:
	ax = ax + Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ds:0x0480:word16])
	branch Test(ULE,CZ) l00AF_076E
	// succ:  l00AF_0765 l00AF_076E
l00AF_0765:
	ax = Mem0[ds:0x0480:word16]
	ax = ax - Mem0[ds:0x4D68:word16]
	SCZO = cond(ax)
	goto l00AF_0774
	// succ:  l00AF_0774
l00AF_076E:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax - Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	// succ:  l00AF_0774
l00AF_0774:
	Mem0[ds:0x4CE2:word16] = ax
	// succ:  l00AF_0777
l00AF_0777:
	ax = Mem0[ds:0x495E:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	SCZO = cond(ax - Mem0[ss:bp - 0x0006:word16])
	branch Test(ULE,CZ) l00AF_078E
	// succ:  l00AF_0784 l00AF_078E
l00AF_0784:
	Mem0[ds:0x495A:word16] = 0x0000
	goto l00AF_06D2
	// succ:  l00AF_06D2
l00AF_078E:
	ax = ax + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ds:0x0482:word16])
	branch Test(ULE,CZ) l00AF_07A4
	// succ:  l00AF_0797 l00AF_07A4
l00AF_0797:
	ax = Mem0[ds:0x0482:word16]
	ax = ax - Mem0[ds:0x495E:word16]
	SCZO = cond(ax)
	// succ:  l00AF_079E
l00AF_079E:
	Mem0[ds:0x495A:word16] = ax
	goto l00AF_06D2
	// succ:  l00AF_06D2
l00AF_07A4:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	goto l00AF_079E
	// succ:  l00AF_079E
l00AF_07AC:
	SCZO = cond(Mem0[ds:0x48C2:byte] - 0x00)
	branch Test(EQ,Z) l00AF_07DC
	// succ:  l00AF_07B3 l00AF_07DC
l00AF_07B3:
	ax = 0x48C2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01F7_01FE (retsize: 4;)
	sp = sp + 0x0002
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_07BE:
	bx = si
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x0790:word16]
	Mem0[ss:bp - 0x000C:word16] = ax
	SCZO = cond(ax - 0xFFFF)
	branch Test(EQ,Z) l00AF_07E1
	// succ:  l00AF_07CE l00AF_07E1
l00AF_07CE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01D7_00E4 (retsize: 4;)
	sp = sp + 0x0002
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_07D6:
	sp = sp - 0x0002
	call fn00AF_10CE (retsize: 2;)
	goto l00AF_07E1
	// succ:  l00AF_07E1
l00AF_07DC:
	call fn01F7_0000 (retsize: 4;)
	// succ:  l00AF_07E1
l00AF_07E1:
	SCZO = cond(Mem0[ds:0x0330:word16] - 0x0000)
	branch Test(EQ,Z) l00AF_0800
	// succ:  l00AF_07E8 l00AF_0800
l00AF_07E8:
	Mem0[ds:0x0332:word16] = 0x0000
	call fn00F7_0FF6 (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00AF_080A
	// succ:  l00AF_07F7 l00AF_080A
l00AF_07F7:
	Mem0[ds:0x0330:word16] = 0x0000
	goto l00AF_080A
	// succ:  l00AF_080A
l00AF_0800:
	si = Mem0[ds:0x032C:word16]
	Mem0[ds:0x032C:word16] = 0x0000
	// succ:  l00AF_080A
l00AF_080A:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l00AF_0811
	// succ:  l00AF_080E l00AF_0811
l00AF_080E:
	goto l00AF_04BD
	// succ:  l00AF_04BD
l00AF_0811:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00AF_04A4_exit
fn00AF_04A4_exit:


// fn00AF_081E
// Return size: 4
void fn00AF_081E()
fn00AF_081E_entry:
	// succ:  l00AF_081E
l00AF_081E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x032A:word16] - 0x0000)
	branch Test(EQ,Z) l00AF_085C
	// succ:  l00AF_0833 l00AF_085C
l00AF_0833:
	dx = Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(dx - 0x0200)
	branch Test(NE,Z) l00AF_0848
	// succ:  l00AF_083C l00AF_0848
l00AF_083C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAC:word16]
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l00AF_09EE
	// succ:  l00AF_09EE
l00AF_0848:
	SCZO = cond(dx - 0x0202)
	branch Test(EQ,Z) l00AF_0851
	// succ:  l00AF_084E l00AF_0851
l00AF_084E:
	goto l00AF_09EE
	// succ:  l00AF_09EE
l00AF_0851:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x032A:word16]
	// succ:  l00AF_0855
l00AF_0855:
	sp = sp - 0x0002
	call fn00AF_04A4 (retsize: 2;)
	sp = sp + 0x0002
	goto l00AF_09EE
	// succ:  l00AF_09EE
l00AF_085C:
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0066 (retsize: 4;)
	sp = sp + 0x0004
	si = ax
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0200
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0005)
	branch Test(ULE,CZ) l00AF_0879
	// succ:  l00AF_0876 l00AF_0879
l00AF_0876:
	goto l00AF_09EE
	// succ:  l00AF_09EE
l00AF_0879:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v13 = ax
	ax = bx
	bx = v13
	switch (ax) { l00AF_088E l00AF_08E4 l00AF_0904 l00AF_097A l00AF_09C6 l00AF_09DE }
	// succ:  l00AF_088E l00AF_08E4 l00AF_0904 l00AF_097A l00AF_09C6 l00AF_09DE
l00AF_088E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAC:word16]
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0001)
	branch Test(EQ,Z) l00AF_08A1
	// succ:  l00AF_089E l00AF_08A1
l00AF_089E:
	goto l00AF_09EE
	// succ:  l00AF_09EE
l00AF_08A1:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l00AF_08A8
	// succ:  l00AF_08A5 l00AF_08A8
l00AF_08A5:
	goto l00AF_09EE
	// succ:  l00AF_09EE
l00AF_08A8:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - Mem0[ss:bp - 0x0006:word16])
	branch Test(NE,Z) l00AF_08BD
	// succ:  l00AF_08B2 l00AF_08BD
l00AF_08B2:
	al = Mem0[ds:0x4D1D:byte]
	SCZO = cond(ax - Mem0[ss:bp - 0x0008:word16])
	branch Test(NE,Z) l00AF_08BD
	// succ:  l00AF_08BA l00AF_08BD
l00AF_08BA:
	goto l00AF_09EE
	// succ:  l00AF_09EE
l00AF_08BD:
	sp = sp - 0x0002
	call fn00AF_09FA (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00AF_08C8
	// succ:  l00AF_08C5 l00AF_08C8
l00AF_08C5:
	goto l00AF_09EE
	// succ:  l00AF_09EE
l00AF_08C8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	call fn00BF_113E (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00AF_04A4 (retsize: 2;)
	sp = sp + 0x0002
	SZO = cond(Mem0[ss:bp + 0x000A:byte] & 0x02)
	C = false
	branch Test(NE,Z) l00AF_08E1
	// succ:  l00AF_08DE l00AF_08E1
l00AF_08DE:
	goto l00AF_09EE
	// succ:  l00AF_09EE
l00AF_08E1:
	goto l00AF_09E9
	// succ:  l00AF_09E9
l00AF_08E4:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - Mem0[ss:bp - 0x0006:word16])
	branch Test(EQ,Z) l00AF_08F1
	// succ:  l00AF_08EE l00AF_08F1
l00AF_08EE:
	goto l00AF_09EE
	// succ:  l00AF_09EE
l00AF_08F1:
	al = Mem0[ds:0x4D1D:byte]
	SCZO = cond(ax - Mem0[ss:bp - 0x0008:word16])
	branch Test(EQ,Z) l00AF_08FC
	// succ:  l00AF_08F9 l00AF_08FC
l00AF_08F9:
	goto l00AF_09EE
	// succ:  l00AF_09EE
l00AF_08FC:
	sp = sp - 0x0002
	call fn00AF_0AB2 (retsize: 2;)
	goto l00AF_09EE
	// succ:  l00AF_09EE
l00AF_0904:
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0001)
	branch Test(NE,Z) l00AF_0912
	// succ:  l00AF_090B l00AF_0912
l00AF_090B:
	sp = sp - 0x0002
	call fn00AF_0AD6 (retsize: 2;)
	goto l00AF_09EE
	// succ:  l00AF_09EE
l00AF_0912:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l00AF_0919
	// succ:  l00AF_0916 l00AF_0919
l00AF_0916:
	goto l00AF_09EE
	// succ:  l00AF_09EE
l00AF_0919:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	call fn00F7_02D2 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00AF_092B
	// succ:  l00AF_0928 l00AF_092B
l00AF_0928:
	goto l00AF_09EE
	// succ:  l00AF_09EE
l00AF_092B:
	cl = 0x06
	bx = Mem0[ss:bp - 0x0006:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bl = Mem0[ds:bx + 0x0CE4:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l00AF_0962
	// succ:  l00AF_0945 l00AF_0962
l00AF_0945:
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(EQ,Z) l00AF_0962
	// succ:  l00AF_0952 l00AF_0962
l00AF_0952:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	call fn00BF_113E (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00AF_095D
l00AF_095D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l00AF_0855
	// succ:  l00AF_0855
l00AF_0962:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - Mem0[ss:bp - 0x0006:word16])
	branch Test(NE,Z) l00AF_0974
	// succ:  l00AF_096C l00AF_0974
l00AF_096C:
	al = Mem0[ds:0x4D1D:byte]
	SCZO = cond(ax - Mem0[ss:bp - 0x0008:word16])
	branch Test(EQ,Z) l00AF_09EE
	// succ:  l00AF_0974 l00AF_09EE
l00AF_0974:
	ax = 0x0018
	goto l00AF_095D
	// succ:  l00AF_095D
l00AF_097A:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - Mem0[ss:bp - 0x0006:word16])
	branch Test(NE,Z) l00AF_09EE
	// succ:  l00AF_0984 l00AF_09EE
l00AF_0984:
	al = Mem0[ds:0x4D1D:byte]
	SCZO = cond(ax - Mem0[ss:bp - 0x0008:word16])
	branch Test(NE,Z) l00AF_09EE
	// succ:  l00AF_098C l00AF_09EE
l00AF_098C:
	cl = 0x06
	bx = Mem0[ss:bp - 0x0006:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE2:byte]
	Mem0[ss:bp - 0x0003:byte] = al
	SCZO = cond(al - 0x12)
	branch Test(NE,Z) l00AF_09AC
	// succ:  l00AF_09A6 l00AF_09AC
l00AF_09A6:
	ax = 0x0009
	goto l00AF_095D
	// succ:  l00AF_095D
l00AF_09AC:
	SCZO = cond(Mem0[ss:bp - 0x0003:byte] - 0x13)
	branch Test(NE,Z) l00AF_09B8
	// succ:  l00AF_09B2 l00AF_09B8
l00AF_09B2:
	ax = 0x000A
	goto l00AF_095D
	// succ:  l00AF_095D
l00AF_09B8:
	ax = 0x03A9
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	goto l00AF_09EE
	// succ:  l00AF_09EE
l00AF_09C6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	call fn00CF_09B2 (retsize: 4;)
	sp = sp + 0x000A
	goto l00AF_09EE
	// succ:  l00AF_09EE
l00AF_09DE:
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0001)
	branch Test(NE,Z) l00AF_09EE
	// succ:  l00AF_09E5 l00AF_09EE
l00AF_09E5:
	sp = sp - 0x0002
	call fn00AF_0AD6 (retsize: 2;)
	// succ:  l00AF_09E9
l00AF_09E9:
	call fn00BF_1686 (retsize: 4;)
	// succ:  l00AF_09EE
l00AF_09EE:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00AF_081E_exit
fn00AF_081E_exit:


// fn00AF_09FA
// Return size: 4
void fn00AF_09FA()
fn00AF_09FA_entry:
	// succ:  l00AF_09FA
l00AF_09FA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetCursorPos(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	cl = 0x05
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	dx = ~dx
	ax = ax & dx
	SZO = cond(ax)
	C = false
	ax = ax + Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	dx = Mem0[ds:0x495E:word16]
	dx = dx + Mem0[ds:0x3D84:word16]
	SCZO = cond(dx)
	dx = dx - 0x0001
	SZO = cond(dx)
	ax = ax - dx
	SCZO = cond(ax)
	bx = bx - bx - C
	SCZO = cond(bx)
	ax = ax & bx
	SZO = cond(ax)
	C = false
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + 0x0010
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	dx = ~dx
	ax = ax & dx
	SZO = cond(ax)
	C = false
	ax = ax + Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	dx = Mem0[ds:0x4D68:word16]
	dx = dx + Mem0[ds:0x4BE8:word16]
	SCZO = cond(dx)
	dx = dx - 0x0001
	SZO = cond(dx)
	ax = ax - dx
	SCZO = cond(ax)
	bx = bx - bx - C
	SCZO = cond(bx)
	ax = ax & bx
	SZO = cond(ax)
	C = false
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + 0x0010
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0020)
	branch Test(GT,SZO) l00AF_0AA6
	// succ:  l00AF_0A91 l00AF_0AA6
l00AF_0A91:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax - Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0020)
	branch Test(GT,SZO) l00AF_0AA6
	// succ:  l00AF_0AA1 l00AF_0AA6
l00AF_0AA1:
	ax = ax - ax
	SCZO = cond(ax)
	goto l00AF_0AA9
	// succ:  l00AF_0AA9
l00AF_0AA6:
	ax = 0x0001
	// succ:  l00AF_0AA9
l00AF_0AA9:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00AF_09FA_exit
fn00AF_09FA_exit:


// fn00AF_0AB2
// Return size: 4
void fn00AF_0AB2()
fn00AF_0AB2_entry:
	// succ:  l00AF_0AB2
l00AF_0AB2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	SetCapture(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x0098:word16] = 0x0001
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00AF_0AB2_exit
fn00AF_0AB2_exit:


// fn00AF_0AD6
// Return size: 4
void fn00AF_0AD6()
fn00AF_0AD6_entry:
	// succ:  l00AF_0AD6
l00AF_0AD6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ReleaseCapture()
	Mem0[ds:0x0098:word16] = 0x0000
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00AF_0AD6_exit
fn00AF_0AD6_exit:


// fn00AF_0AF6
// Return size: 4
void fn00AF_0AF6()
fn00AF_0AF6_entry:
	// succ:  l00AF_0AF6
l00AF_0AF6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0110
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x000E:word16] = 0x0000
	di = di - di
	SCZO = cond(di)
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	cl = 0x06
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l00AF_0B3D
	// succ:  l00AF_0B30 l00AF_0B3D
l00AF_0B30:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	di = Mem0[ds:bx + 0x0002:word16]
	// succ:  l00AF_0B3D
l00AF_0B3D:
	Mem0[ss:bp - 0x0010:word16] = si
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l00AF_0B47
	// succ:  l00AF_0B44 l00AF_0B47
l00AF_0B44:
	goto l00AF_0BCC
	// succ:  l00AF_0BCC
l00AF_0B47:
	Mem0[ss:bp - 0x0004:word16] = di
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x006C:word16]
	Mem0[ss:bp - 0x000C:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	ax = Mem0[ds:si + 0x0024:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	di = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l00AF_0B6B
	// succ:  l00AF_0B68 l00AF_0B6B
l00AF_0B68:
	goto l00AF_0DA7
	// succ:  l00AF_0DA7
l00AF_0B6B:
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + di
	SCZO = cond(ax)
	ax = ax + si
	SCZO = cond(ax)
	ax = ax + 0x002B
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = di
	Mem0[ss:bp - 0x000A:word16] = si
	di = Mem0[ss:bp - 0x0004:word16]
	// succ:  l00AF_0B82
l00AF_0B82:
	bx = Mem0[ss:bp - 0x0008:word16]
	si = Mem0[ds:bx:word16]
	bx = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x12)
	branch Test(EQ,Z) l00AF_0B91
	// succ:  l00AF_0B8E l00AF_0B91
l00AF_0B8E:
	goto l00AF_0C1A
	// succ:  l00AF_0C1A
l00AF_0B91:
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	cx = Mem0[ds:bx + 0x0071:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(NE,Z) l00AF_0BDC
	// succ:  l00AF_0B9E l00AF_0BDC
l00AF_0B9E:
	ax = 0x032F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00AF_0BAA
l00AF_0BAA:
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l00AF_0BB3
	// succ:  l00AF_0BB0 l00AF_0BB3
l00AF_0BB0:
	goto l00AF_0D62
	// succ:  l00AF_0D62
l00AF_0BB3:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(EQ,Z) l00AF_0BBC
	// succ:  l00AF_0BB9 l00AF_0BBC
l00AF_0BB9:
	goto l00AF_0D93
	// succ:  l00AF_0D93
l00AF_0BBC:
	ax = 0x01DB
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	goto l00AF_0D93
	// succ:  l00AF_0D93
l00AF_0BCC:
	ax = 0x01DC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	goto l00AF_0E24
	// succ:  l00AF_0E24
l00AF_0BDC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0137_179A (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00AF_0BEA
	// succ:  l00AF_0BE7 l00AF_0BEA
l00AF_0BE7:
	goto l00AF_0D93
	// succ:  l00AF_0D93
l00AF_0BEA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0110
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x0110
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_06D4 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0137_0066 (retsize: 4;)
	sp = sp + 0x0002
	goto l00AF_0D98
	// succ:  l00AF_0D98
l00AF_0C1A:
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l00AF_0BAA
	// succ:  l00AF_0C20 l00AF_0BAA
l00AF_0C20:
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	cx = ax
	dl = Mem0[ds:bx + 0x0001:byte]
	dh = dh - dh
	SCZO = cond(dh)
	SCZO = cond(ax - 0x000F)
	branch Test(NE,Z) l00AF_0C84
	// succ:  l00AF_0C30 l00AF_0C84
l00AF_0C30:
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx + 0x003F:word16] - 0x0000)
	branch Test(NE,Z) l00AF_0C84
	// succ:  l00AF_0C3C l00AF_0C84
l00AF_0C3C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_06D4 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00AF_0C60
	// succ:  l00AF_0C5D l00AF_0C60
l00AF_0C5D:
	goto l00AF_0D56
	// succ:  l00AF_0D56
l00AF_0C60:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0110
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x0110
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	call fn0087_04C4 (retsize: 4;)
	goto l00AF_0D98
	// succ:  l00AF_0D98
l00AF_0C84:
	SCZO = cond(cx - 0x0010)
	branch Test(NE,Z) l00AF_0CDE
	// succ:  l00AF_0C89 l00AF_0CDE
l00AF_0C89:
	SCZO = cond(dx - 0x000D)
	branch Test(NE,Z) l00AF_0CDE
	// succ:  l00AF_0C8E l00AF_0CDE
l00AF_0C8E:
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx + 0x0071:word16] - 0x0000)
	branch Test(NE,Z) l00AF_0CDE
	// succ:  l00AF_0C9A l00AF_0CDE
l00AF_0C9A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_06D4 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	ax = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00AF_0CBE
	// succ:  l00AF_0CBB l00AF_0CBE
l00AF_0CBB:
	goto l00AF_0D56
	// succ:  l00AF_0D56
l00AF_0CBE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0110
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x0110
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	goto l00AF_0D98
	// succ:  l00AF_0D98
l00AF_0CDE:
	SCZO = cond(cx - 0x0010)
	branch Test(EQ,Z) l00AF_0CE6
	// succ:  l00AF_0CE3 l00AF_0CE6
l00AF_0CE3:
	goto l00AF_0BAA
	// succ:  l00AF_0BAA
l00AF_0CE6:
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx + 0x006C:word16] - 0x0000)
	branch Test(EQ,Z) l00AF_0CF5
	// succ:  l00AF_0CF2 l00AF_0CF5
l00AF_0CF2:
	goto l00AF_0BAA
	// succ:  l00AF_0BAA
l00AF_0CF5:
	SCZO = cond(dx - 0x0001)
	branch Test(EQ,Z) l00AF_0D14
	// succ:  l00AF_0CFA l00AF_0D14
l00AF_0CFA:
	SCZO = cond(dx - 0x0003)
	branch Test(EQ,Z) l00AF_0D14
	// succ:  l00AF_0CFF l00AF_0D14
l00AF_0CFF:
	SCZO = cond(dx - 0x0006)
	branch Test(EQ,Z) l00AF_0D14
	// succ:  l00AF_0D04 l00AF_0D14
l00AF_0D04:
	SCZO = cond(dx - 0x000A)
	branch Test(UGE,C) l00AF_0D0C
	// succ:  l00AF_0D09 l00AF_0D0C
l00AF_0D09:
	goto l00AF_0BAA
	// succ:  l00AF_0BAA
l00AF_0D0C:
	SCZO = cond(dx - 0x000C)
	branch Test(ULE,CZ) l00AF_0D14
	// succ:  l00AF_0D11 l00AF_0D14
l00AF_0D11:
	goto l00AF_0BAA
	// succ:  l00AF_0BAA
l00AF_0D14:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_06D4 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	ax = 0x000D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00AF_0D56
	// succ:  l00AF_0D35 l00AF_0D56
l00AF_0D35:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0110
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x0110
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x000C:word16] = si
	goto l00AF_0D98
	// succ:  l00AF_0D98
l00AF_0D56:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	goto l00AF_0D8D
	// succ:  l00AF_0D8D
l00AF_0D62:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_06D4 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00AF_0D85
	// succ:  l00AF_0D82 l00AF_0D85
l00AF_0D82:
	goto l00AF_0CBE
	// succ:  l00AF_0CBE
l00AF_0D85:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00AF_0D8D
l00AF_0D8D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	// succ:  l00AF_0D93
l00AF_0D93:
	Mem0[ss:bp - 0x000E:word16] = 0x0001
	// succ:  l00AF_0D98
l00AF_0D98:
	v23 = Mem0[ss:bp - 0x0008:word16] - 0x0005
	Mem0[ss:bp - 0x0008:word16] = v23
	SCZO = cond(v23)
	v24 = Mem0[ss:bp - 0x0006:word16] - 0x0001
	Mem0[ss:bp - 0x0006:word16] = v24
	SZO = cond(v24)
	branch Test(SG,S) l00AF_0DA4
	// succ:  l00AF_0DA1 l00AF_0DA4
l00AF_0DA1:
	goto l00AF_0B82
	// succ:  l00AF_0B82
l00AF_0DA4:
	si = Mem0[ss:bp - 0x000A:word16]
	// succ:  l00AF_0DA7
l00AF_0DA7:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(NE,Z) l00AF_0DBB
	// succ:  l00AF_0DAD l00AF_0DBB
l00AF_0DAD:
	SCZO = cond(Mem0[ds:si + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00AF_0DBB
	// succ:  l00AF_0DB3 l00AF_0DBB
l00AF_0DB3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0006:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l00AF_0DBB
l00AF_0DBB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(NE,Z) l00AF_0E11
	// succ:  l00AF_0DC9 l00AF_0E11
l00AF_0DC9:
	bx = Mem0[ss:bp - 0x0010:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	si = Mem0[ds:bx:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x0002:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0177_1A2A (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00AF_0E09
	// succ:  l00AF_0DE5 l00AF_0E09
l00AF_0DE5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	call fn0177_0196 (retsize: 4;)
	sp = sp + 0x0002
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ds:bx + 0x0CE4:byte] = 0x00
	// succ:  l00AF_0E09
l00AF_0E09:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l00AF_0E11
l00AF_0E11:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l00AF_0E24
l00AF_0E24:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00AF_0AF6_exit
fn00AF_0AF6_exit:


// fn00AF_0E2E
// Return size: 4
void fn00AF_0E2E()
fn00AF_0E2E_entry:
	// succ:  l00AF_0E2E
l00AF_0E2E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0104
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = si - si
	SCZO = cond(si)
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	cl = 0x06
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l00AF_0E70
	// succ:  l00AF_0E63 l00AF_0E70
l00AF_0E63:
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	si = Mem0[ds:bx + 0x0002:word16]
	// succ:  l00AF_0E70
l00AF_0E70:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l00AF_0E77
	// succ:  l00AF_0E74 l00AF_0E77
l00AF_0E74:
	goto l00AF_0F4C
	// succ:  l00AF_0F4C
l00AF_0E77:
	bx = Mem0[ds:si:word16]
	cx = Mem0[ds:bx + 0x0024:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(NE,Z) l00AF_0E83
	// succ:  l00AF_0E80 l00AF_0E83
l00AF_0E80:
	goto l00AF_0F4C
	// succ:  l00AF_0F4C
l00AF_0E83:
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx + 0x004E:word16] - 0x0000)
	branch Test(EQ,Z) l00AF_0E96
	// succ:  l00AF_0E8F l00AF_0E96
l00AF_0E8F:
	ax = 0x02E1
	goto l00AF_0F4F
	// succ:  l00AF_0F4F
l00AF_0E96:
	bx = cx
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx + Mem0[ds:si:word16]
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x0026:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_06D4 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00AF_0EDE
	// succ:  l00AF_0ECB l00AF_0EDE
l00AF_0ECB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	goto l00AF_0F58
	// succ:  l00AF_0F58
l00AF_0EDE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	call fn0177_1A2A (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00AF_0F31
	// succ:  l00AF_0F0F l00AF_0F31
l00AF_0F0F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0177_0196 (retsize: 4;)
	sp = sp + 0x0002
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ds:bx + 0x0CE4:byte] = 0x00
	// succ:  l00AF_0F31
l00AF_0F31:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	call fn0087_04C4 (retsize: 4;)
	goto l00AF_0F58
	// succ:  l00AF_0F58
l00AF_0F4C:
	ax = 0x01DC
	// succ:  l00AF_0F4F
l00AF_0F4F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00AF_0F58
l00AF_0F58:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00AF_0E2E_exit
fn00AF_0E2E_exit:


// fn00AF_0F62
// Return size: 4
void fn00AF_0F62()
fn00AF_0F62_entry:
	// succ:  l00AF_0F62
l00AF_0F62:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0014
	SCZO = cond(sp)
	// succ:  l00AF_0F6F
l00AF_0F6F:
	ax = Mem0[ds:0x4CFE:word16]
	SCZO = cond(Mem0[ds:0x4CFC:word16] - ax)
	branch Test(GE,SO) l00AF_0FE2
	// succ:  l00AF_0F78 l00AF_0FE2
l00AF_0F78:
	ax = 0x0032
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0BB0 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00AF_0FE2
	// succ:  l00AF_0F89 l00AF_0FE2
l00AF_0F89:
	ax = Mem0[ds:0x4CFC:word16]
	cx = 0x0005
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l00AF_0FA7
	// succ:  l00AF_0F96 l00AF_0FA7
l00AF_0F96:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BEA:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00AF_0FA7
l00AF_0FA7:
	sp = sp - 0x0002
	call fn00AF_1000 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00AF_0FEB
	// succ:  l00AF_0FAF l00AF_0FEB
l00AF_0FAF:
	ax = bp - 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	PeekMessage(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00AF_0FEB
	// succ:  l00AF_0FC6 l00AF_0FEB
l00AF_0FC6:
	ax = bp - 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0201
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0209
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	PeekMessage(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00AF_0F6F
	// succ:  l00AF_0FE0 l00AF_0F6F
l00AF_0FE0:
	goto l00AF_0FEB
	// succ:  l00AF_0FEB
l00AF_0FE2:
	ax = Mem0[ds:0x4CFE:word16]
	SCZO = cond(Mem0[ds:0x4CFC:word16] - ax)
	branch Test(GE,SO) l00AF_0FF7
	// succ:  l00AF_0FEB l00AF_0FF7
l00AF_0FEB:
	ax = 0x027F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00AF_0FF7
l00AF_0FF7:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00AF_0F62_exit
fn00AF_0F62_exit:


// fn00AF_1000
// Return size: 4
void fn00AF_1000()
fn00AF_1000_entry:
	// succ:  l00AF_1000
l00AF_1000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ds:0x4EBA:word16]
	ax = Mem0[ds:bx:word16]
	cx = ax
	ax = ax + 0x0004
	SCZO = cond(ax)
	si = ax
	bx = cx
	dx = Mem0[ds:bx:word16]
	dx = dx << 0x0001
	SCZO = cond(dx)
	cx = cx + dx
	SCZO = cond(cx)
	cx = cx + 0x0004
	SCZO = cond(cx)
	Mem0[ss:bp - 0x0006:word16] = cx
	SCZO = cond(cx - ax)
	branch Test(UGT,CZ) l00AF_1031
	// succ:  l00AF_102E l00AF_1031
l00AF_102E:
	goto l00AF_10C2
	// succ:  l00AF_10C2
l00AF_1031:
	bx = Mem0[ds:si:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	cl = Mem0[ds:bx + 0x0017:byte]
	ch = ch - ch
	SCZO = cond(ch)
	Mem0[ss:bp - 0x0004:word16] = cx
	dl = Mem0[ds:0x4D1C:byte]
	dh = dh - dh
	SCZO = cond(dh)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	dl = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00AF_10AF
	// succ:  l00AF_105B l00AF_10AF
l00AF_105B:
	cl = 0x06
	bx = di
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0CE3:byte] & 0x04)
	C = false
	branch Test(NE,Z) l00AF_1095
	// succ:  l00AF_1071 l00AF_1095
l00AF_1071:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn00F7_1178 (retsize: 4;)
	sp = sp + 0x0008
	bx = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	di = ax
	call fn018F_2C98 (retsize: 4;)
	sp = sp + 0x0002
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - di)
	branch Test(ULT,C) l00AF_10AF
	// succ:  l00AF_1095 l00AF_10AF
l00AF_1095:
	bx = Mem0[ds:si:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx + 0x000A:byte]
	al = al & 0x0B
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x01)
	branch Test(NE,Z) l00AF_10A8
	// succ:  l00AF_10A2 l00AF_10A8
l00AF_10A2:
	ax = 0x0001
	goto l00AF_10AA
	// succ:  l00AF_10AA
l00AF_10A8:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00AF_10AA
l00AF_10AA:
	ax = ax | 0x0002
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00AF_10BC
	// succ:  l00AF_10AF l00AF_10BC
l00AF_10AF:
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x0006:word16])
	branch Test(UGE,C) l00AF_10B9
	// succ:  l00AF_10B6 l00AF_10B9
l00AF_10B6:
	goto l00AF_1031
	// succ:  l00AF_1031
l00AF_10B9:
	goto l00AF_10C2
	// succ:  l00AF_10C2
l00AF_10BC:
	ax = 0x0001
	goto l00AF_10C4
	// succ:  l00AF_10C4
l00AF_10C2:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00AF_10C4
l00AF_10C4:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00AF_1000_exit
fn00AF_1000_exit:


// fn00AF_10CE
// Return size: 4
void fn00AF_10CE()
fn00AF_10CE_entry:
	// succ:  l00AF_10CE
l00AF_10CE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0014
	SCZO = cond(sp)
	v9 = Mem0[ds:0x4EB7:byte] | 0x40
	Mem0[ds:0x4EB7:byte] = v9
	SZO = cond(Mem0[ds:0x4EB7:byte])
	C = false
	// succ:  l00AF_10E0
l00AF_10E0:
	ax = Mem0[ds:0x4D02:word16]
	SCZO = cond(Mem0[ds:0x4D00:word16] - ax)
	branch Test(GE,SO) l00AF_1140
	// succ:  l00AF_10E9 l00AF_1140
l00AF_10E9:
	ax = 0x0258
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0BB0 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00AF_1140
	// succ:  l00AF_10FA l00AF_1140
l00AF_10FA:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BEA:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = bp - 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	PeekMessage(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00AF_1149
	// succ:  l00AF_1123 l00AF_1149
l00AF_1123:
	ax = bp - 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0201
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0209
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	PeekMessage(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00AF_10E0
	// succ:  l00AF_113D l00AF_10E0
l00AF_113D:
	goto l00AF_1149
	// succ:  l00AF_1149
l00AF_1140:
	ax = Mem0[ds:0x4D02:word16]
	SCZO = cond(Mem0[ds:0x4D00:word16] - ax)
	branch Test(GE,SO) l00AF_1155
	// succ:  l00AF_1149 l00AF_1155
l00AF_1149:
	ax = 0x027F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00AF_1155
l00AF_1155:
	v14 = Mem0[ds:0x4EB7:byte] & 0xBF
	Mem0[ds:0x4EB7:byte] = v14
	SZO = cond(Mem0[ds:0x4EB7:byte])
	C = false
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00AF_10CE_exit
fn00AF_10CE_exit:


// fn00AF_1162
// Return size: 4
void fn00AF_1162()
fn00AF_1162_entry:
	// succ:  l00AF_1162
l00AF_1162:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0010
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	call fn00AF_1212 (retsize: 2;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	di = Mem0[ds:0x4132:word16]
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	ax = dx
	dx = dx - dx
	SCZO = cond(dx)
	si = ax
	si = si + Mem0[ds:0x4134:word16]
	SCZO = cond(si)
	ax = Mem0[ss:bp + 0x0006:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax + di
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ss:bp - 0x000C:word16])
	branch Test(ULE,CZ) l00AF_11B2
	// succ:  l00AF_11AA l00AF_11B2
l00AF_11AA:
	ax = Mem0[ss:bp - 0x000C:word16]
	ax = ax - di
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	// succ:  l00AF_11B2
l00AF_11B2:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - si)
	branch Test(ULE,CZ) l00AF_11BE
	// succ:  l00AF_11B7 l00AF_11BE
l00AF_11B7:
	cx = Mem0[ss:bp + 0x0008:word16]
	cx = cx - si
	SCZO = cond(cx)
	goto l00AF_11C4
	// succ:  l00AF_11C4
l00AF_11BE:
	cx = Mem0[ss:bp + 0x0008:word16]
	cx = cx + 0x0010
	SCZO = cond(cx)
	// succ:  l00AF_11C4
l00AF_11C4:
	ax = 0x00FC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	dx = 0x5680
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	Mem0[ds:0x4EB8:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00AF_1205
	// succ:  l00AF_11F0 l00AF_1205
l00AF_11F0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BringWindowToTop(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB8:word16]
	SetCapture(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x0098:word16] = 0x0005
	// succ:  l00AF_1205
l00AF_1205:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00AF_1162_exit
fn00AF_1162_exit:


// fn00AF_1212
// Return size: 4
void fn00AF_1212()
fn00AF_1212_entry:
	// succ:  l00AF_1212
l00AF_1212:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x005C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0006:word16] = 0x4C2A
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l00AF_1243
	// succ:  l00AF_1240 l00AF_1243
l00AF_1240:
	goto l00AF_1328
	// succ:  l00AF_1328
l00AF_1243:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D82:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = 0x0436
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x4C2A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn00CF_0DB4 (retsize: 4;)
	sp = sp + 0x000A
	Mem0[ss:bp - 0x0008:word16] = 0x0001
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x00AF:bx + 0x1337:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x4C2E
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn00CF_0DB4 (retsize: 4;)
	sp = sp + 0x000A
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax + 0x0004
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	v15 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v15
	SZO = cond(v15)
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0006)
	branch Test(ULT,C) l00AF_1306
	// succ:  l00AF_129C l00AF_1306
l00AF_129C:
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	di = Mem0[ds:bx + 0x0810:word16]
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l00AF_12B0
	// succ:  l00AF_12AA l00AF_12B0
l00AF_12AA:
	ax = 0x0372
	goto l00AF_12BE
	// succ:  l00AF_12BE
l00AF_12B0:
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + di
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x063A:word16]
	// succ:  l00AF_12BE
l00AF_12BE:
	Mem0[ss:bp - 0x0008:word16] = ax
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l00AF_12CA
	// succ:  l00AF_12C6 l00AF_12CA
l00AF_12C6:
	cx = cx - cx
	SCZO = cond(cx)
	goto l00AF_12DB
	// succ:  l00AF_12DB
l00AF_12CA:
	ax = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	al = Mem0[ds:di + 0x063E:byte]
	ax = (int16) al
	cx = ax
	// succ:  l00AF_12DB
l00AF_12DB:
	ax = bp - 0x005C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	dx = 0x00E3
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x005C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	ax = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0DEE (retsize: 4;)
	sp = sp + 0x000A
	// succ:  l00AF_1306
l00AF_1306:
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(EQ,Z) l00AF_1315
	// succ:  l00AF_130C l00AF_1315
l00AF_130C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l00AF_1315
l00AF_1315:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = Mem0[ss:bp - 0x000C:word16]
	goto l00AF_132B
	// succ:  l00AF_132B
l00AF_1328:
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (int32) ax
	// succ:  l00AF_132B
l00AF_132B:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00AF_1212_exit
fn00AF_1212_exit:


// fn00BF_0000
// Return size: 4
void fn00BF_0000()
fn00BF_0000_entry:
	// succ:  l00BF_0000
l00BF_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0016
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ds:0x4BE8:word16]
	Mem0[ss:bp - 0x0012:word16] = ax
	ax = Mem0[ds:0x3D84:word16]
	Mem0[ss:bp - 0x0010:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0014:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	Mem0[ss:bp - 0x0016:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x000E:word16] = 0x0000
	SCZO = cond(di - 0x0009)
	branch Test(EQ,Z) l00BF_003F
	// succ:  l00BF_003C l00BF_003F
l00BF_003C:
	goto l00BF_00C6
	// succ:  l00BF_00C6
l00BF_003F:
	cl = 0x06
	si = Mem0[ss:bp - 0x0014:word16]
	si = si << cl
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0CE2
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:si:byte] - 0x12)
	branch Test(EQ,Z) l00BF_0066
	// succ:  l00BF_0057 l00BF_0066
l00BF_0057:
	ax = 0x01CF
	// succ:  l00BF_005A
l00BF_005A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	goto l00BF_03B5
	// succ:  l00BF_03B5
l00BF_0066:
	SCZO = cond(Mem0[ds:si + 0x0002:byte] - 0x00)
	branch Test(EQ,Z) l00BF_0088
	// succ:  l00BF_006C l00BF_0088
l00BF_006C:
	bl = Mem0[ds:si + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	di = Mem0[ds:bx + 0x4960:word16]
	Mem0[ss:bp - 0x0004:word16] = di
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_0088
	// succ:  l00BF_0085 l00BF_0088
l00BF_0085:
	goto l00BF_010C
	// succ:  l00BF_010C
l00BF_0088:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00DF_097A (retsize: 4;)
	sp = sp + 0x0004
	si = ax
	bx = Mem0[ds:0x0096:word16]
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx + si
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x3D94:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	al = Mem0[ds:bx + 0x3D95:byte]
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00DF_09C4 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x000E:word16] = 0x0032
	goto l00BF_0397
	// succ:  l00BF_0397
l00BF_00C6:
	SCZO = cond(di - 0x000A)
	branch Test(NE,Z) l00BF_0112
	// succ:  l00BF_00CB l00BF_0112
l00BF_00CB:
	cl = 0x06
	si = Mem0[ss:bp - 0x0014:word16]
	si = si << cl
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0CE2
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:si:byte] - 0x13)
	branch Test(EQ,Z) l00BF_00EA
	// succ:  l00BF_00E3 l00BF_00EA
l00BF_00E3:
	ax = 0x01D0
	goto l00BF_005A
	// succ:  l00BF_005A
l00BF_00EA:
	SCZO = cond(Mem0[ds:si + 0x0002:byte] - 0x00)
	branch Test(EQ,Z) l00BF_0088
	// succ:  l00BF_00F0 l00BF_0088
l00BF_00F0:
	bl = Mem0[ds:si + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	di = Mem0[ds:bx + 0x4960:word16]
	Mem0[ss:bp - 0x0004:word16] = di
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l00BF_010C
	// succ:  l00BF_0109 l00BF_010C
l00BF_0109:
	goto l00BF_0088
	// succ:  l00BF_0088
l00BF_010C:
	dx = di
	goto l00BF_01F9
	// succ:  l00BF_01F9
l00BF_0112:
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0016:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_11AE (retsize: 4;)
	sp = sp + 0x000A
	ax = Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(Mem0[ds:0x0480:word16] - ax)
	branch Test(NE,Z) l00BF_0146
	// succ:  l00BF_012F l00BF_0146
l00BF_012F:
	Mem0[ds:0x0330:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0001)
	branch Test(NE,Z) l00BF_0141
	// succ:  l00BF_013C l00BF_0141
l00BF_013C:
	call fn00AF_0AD6 (retsize: 4;)
	// succ:  l00BF_0141
l00BF_0141:
	v19 = Mem0[ss:bp - 0x000A:word16] - 0x0001
	Mem0[ss:bp - 0x000A:word16] = v19
	SZO = cond(v19)
	goto l00BF_0162
	// succ:  l00BF_0162
l00BF_0146:
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l00BF_0162
	// succ:  l00BF_014B l00BF_0162
l00BF_014B:
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0001)
	branch Test(NE,Z) l00BF_0157
	// succ:  l00BF_0152 l00BF_0157
l00BF_0152:
	call fn00AF_0AD6 (retsize: 4;)
	// succ:  l00BF_0157
l00BF_0157:
	Mem0[ds:0x0330:word16] = 0x0000
	Mem0[ss:bp - 0x000A:word16] = 0x0000
	// succ:  l00BF_0162
l00BF_0162:
	ax = Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(Mem0[ds:0x0482:word16] - ax)
	branch Test(NE,Z) l00BF_0182
	// succ:  l00BF_016B l00BF_0182
l00BF_016B:
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0001)
	branch Test(NE,Z) l00BF_0177
	// succ:  l00BF_0172 l00BF_0177
l00BF_0172:
	call fn00AF_0AD6 (retsize: 4;)
	// succ:  l00BF_0177
l00BF_0177:
	Mem0[ds:0x0330:word16] = 0x0000
	v21 = Mem0[ss:bp - 0x000C:word16] - 0x0001
	Mem0[ss:bp - 0x000C:word16] = v21
	SZO = cond(v21)
	goto l00BF_019E
	// succ:  l00BF_019E
l00BF_0182:
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l00BF_019E
	// succ:  l00BF_0187 l00BF_019E
l00BF_0187:
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0001)
	branch Test(NE,Z) l00BF_0193
	// succ:  l00BF_018E l00BF_0193
l00BF_018E:
	call fn00AF_0AD6 (retsize: 4;)
	// succ:  l00BF_0193
l00BF_0193:
	Mem0[ds:0x0330:word16] = 0x0000
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	// succ:  l00BF_019E
l00BF_019E:
	cl = 0x06
	si = Mem0[ss:bp - 0x000A:word16]
	si = si << cl
	SCZO = cond(si)
	si = si + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(si)
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0CE2
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:0x0330:word16] - 0x0000)
	branch Test(NE,Z) l00BF_01DA
	// succ:  l00BF_01B9 l00BF_01DA
l00BF_01B9:
	SCZO = cond(Mem0[ds:si:byte] - 0x10)
	branch Test(NE,Z) l00BF_01DA
	// succ:  l00BF_01BE l00BF_01DA
l00BF_01BE:
	ax = Mem0[ds:si:word16]
	al = al & 0x11
	SZO = cond(al)
	C = false
	al = al | 0x11
	SZO = cond(al)
	C = false
	Mem0[ds:si:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	Mem0[ss:bp - 0x000E:word16] = 0x0032
	// succ:  l00BF_01DA
l00BF_01DA:
	SCZO = cond(Mem0[ds:si + 0x0002:byte] - 0x00)
	branch Test(NE,Z) l00BF_01E3
	// succ:  l00BF_01E0 l00BF_01E3
l00BF_01E0:
	goto l00BF_0276
	// succ:  l00BF_0276
l00BF_01E3:
	bl = Mem0[ds:si + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	dx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_0276
	// succ:  l00BF_01F9 l00BF_0276
l00BF_01F9:
	SCZO = cond(Mem0[ds:0x0330:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_020A
	SCZO = cond(Mem0[ds:0x0330:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_020A
	// succ:  l00BF_0200 l00BF_020A
l00BF_0200:
	Mem0[ds:0x0330:word16] = 0x0000
	Mem0[ds:0x0330:word16] = 0x0000
	goto l00BF_03B5
	// succ:  l00BF_03B5
l00BF_020A:
	Mem0[ss:bp - 0x0004:word16] = dx
	di = dx
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0001)
	branch Test(NE,Z) l00BF_021B
	// succ:  l00BF_0216 l00BF_021B
l00BF_0216:
	call fn00AF_0AD6 (retsize: 4;)
	// succ:  l00BF_021B
l00BF_021B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn00BF_125A (retsize: 2;)
	sp = sp + 0x0002
	ax = 0x0032
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_10B8 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0BB0 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(Mem0[ds:si + 0x0002:byte] - 0x00)
	branch Test(NE,Z) l00BF_023D
	// succ:  l00BF_023A l00BF_023D
l00BF_023A:
	goto l00BF_03B5
	// succ:  l00BF_03B5
l00BF_023D:
	bl = Mem0[ds:si + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	di = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_0256
	// succ:  l00BF_0253 l00BF_0256
l00BF_0253:
	goto l00BF_03B5
	// succ:  l00BF_03B5
l00BF_0256:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di:word16]
	call fn0177_1A2A (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00BF_0264
	// succ:  l00BF_0261 l00BF_0264
l00BF_0261:
	goto l00BF_03B5
	// succ:  l00BF_03B5
l00BF_0264:
	al = Mem0[ds:si + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_0196 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:si + 0x0002:byte] = 0x00
	goto l00BF_03B5
	// succ:  l00BF_03B5
l00BF_0276:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn00BF_07E0 (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00BF_0200
	// succ:  l00BF_027F l00BF_0200
l00BF_027F:
	SCZO = cond(Mem0[ds:0x0330:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_02E2
	// succ:  l00BF_0286 l00BF_02E2
l00BF_0286:
	al = Mem0[ds:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2210 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - 0x000B)
	branch Test(NE,Z) l00BF_029E
	// succ:  l00BF_0295 l00BF_029E
l00BF_0295:
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x10)
	C = false
	branch Test(NE,Z) l00BF_029E
	// succ:  l00BF_029B l00BF_029E
l00BF_029B:
	goto l00BF_0200
	// succ:  l00BF_0200
l00BF_029E:
	SCZO = cond(Mem0[ds:0x0332:word16] - 0x0000)
	branch Test(NE,Z) l00BF_02CC
	// succ:  l00BF_02A5 l00BF_02CC
l00BF_02A5:
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l00BF_02CC
	// succ:  l00BF_02AB l00BF_02CC
l00BF_02AB:
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0CE3:byte] & 0x20)
	C = false
	branch Test(NE,Z) l00BF_02CC
	// succ:  l00BF_02C9 l00BF_02CC
l00BF_02C9:
	goto l00BF_0200
	// succ:  l00BF_0200
l00BF_02CC:
	SCZO = cond(Mem0[ds:0x00B2:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_02E2
	// succ:  l00BF_02D3 l00BF_02E2
l00BF_02D3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn00BF_03C2 (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00BF_02E2
	// succ:  l00BF_02DC l00BF_02E2
l00BF_02DC:
	Mem0[ds:0x0330:word16] = 0x0000
	// succ:  l00BF_02E2
l00BF_02E2:
	v24 = Mem0[ss:bp - 0x000E:word16] + 0x0032
	Mem0[ss:bp - 0x000E:word16] = v24
	SCZO = cond(v24)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00BF_0444 (retsize: 2;)
	sp = sp + 0x0006
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l00BF_0315
	// succ:  l00BF_02F9 l00BF_0315
l00BF_02F9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	call fn01BF_1776 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0330:word16]
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l00BF_0315
l00BF_0315:
	ax = Mem0[ss:bp - 0x0012:word16]
	SCZO = cond(Mem0[ds:0x4BE8:word16] - ax)
	branch Test(NE,Z) l00BF_0327
	// succ:  l00BF_031E l00BF_0327
l00BF_031E:
	ax = Mem0[ss:bp - 0x0010:word16]
	SCZO = cond(Mem0[ds:0x3D84:word16] - ax)
	branch Test(EQ,Z) l00BF_035E
	// succ:  l00BF_0327 l00BF_035E
l00BF_0327:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	cl = 0x05
	ax = Mem0[ss:bp - 0x0010:word16]
	ax = ax - Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0012:word16]
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScrollWindow(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0001)
	branch Test(NE,Z) l00BF_035E
	// succ:  l00BF_0353 l00BF_035E
l00BF_0353:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	call fn00F7_01C2 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00BF_035E
l00BF_035E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn01BF_11F8 (retsize: 4;)
	sp = sp + 0x0002
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00BF_11AE (retsize: 2;)
	sp = sp + 0x0002
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l00BF_037C
	// succ:  l00BF_0374 l00BF_037C
l00BF_0374:
	call fn0177_0B70 (retsize: 4;)
	goto l00BF_0397
	// succ:  l00BF_0397
l00BF_037C:
	ax = Mem0[ss:bp - 0x0012:word16]
	SCZO = cond(Mem0[ds:0x4BE8:word16] - ax)
	branch Test(NE,Z) l00BF_038E
	// succ:  l00BF_0385 l00BF_038E
l00BF_0385:
	ax = Mem0[ss:bp - 0x0010:word16]
	SCZO = cond(Mem0[ds:0x3D84:word16] - ax)
	branch Test(EQ,Z) l00BF_0397
	// succ:  l00BF_038E l00BF_0397
l00BF_038E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00BF_0397
l00BF_0397:
	ax = Mem0[ss:bp - 0x000E:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_10FC (retsize: 4;)
	sp = sp + 0x0004
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_10B8 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0BB0 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00BF_03B5
l00BF_03B5:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_0000_exit
fn00BF_0000_exit:


// fn00BF_03C2
// Return size: 4
void fn00BF_03C2()
fn00BF_03C2_entry:
	// succ:  l00BF_03C2
l00BF_03C2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ds:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(ax - 0x0022)
	branch Test(EQ,Z) l00BF_03E4
	// succ:  l00BF_03DF l00BF_03E4
l00BF_03DF:
	SCZO = cond(ax - 0x003D)
	branch Test(NE,Z) l00BF_03EA
	// succ:  l00BF_03E4 l00BF_03EA
l00BF_03E4:
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x10)
	C = false
	branch Test(NE,Z) l00BF_03FA
	// succ:  l00BF_03EA l00BF_03FA
l00BF_03EA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2210 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00BF_03FA
	// succ:  l00BF_03F4 l00BF_03FA
l00BF_03F4:
	ax = 0x0001
	goto l00BF_0439
	// succ:  l00BF_0439
l00BF_03FA:
	SCZO = cond(Mem0[ds:si + 0x0002:byte] - 0x00)
	branch Test(EQ,Z) l00BF_0413
	// succ:  l00BF_0400 l00BF_0413
l00BF_0400:
	bl = Mem0[ds:si + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0000)
	branch Test(NE,Z) l00BF_03F4
	// succ:  l00BF_0413 l00BF_03F4
l00BF_0413:
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x20)
	C = false
	branch Test(NE,Z) l00BF_0437
	// succ:  l00BF_0419 l00BF_0437
l00BF_0419:
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0CE3:byte] & 0x20)
	C = false
	branch Test(NE,Z) l00BF_03F4
	// succ:  l00BF_0437 l00BF_03F4
l00BF_0437:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00BF_0439
l00BF_0439:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_03C2_exit
fn00BF_03C2_exit:


// fn00BF_0444
// Return size: 4
void fn00BF_0444()
fn00BF_0444_entry:
	// succ:  l00BF_0444
l00BF_0444:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	si = Mem0[ss:bp + 0x000A:word16]
	al = Mem0[ds:0x4D1C:byte]
	Mem0[ds:0x4D1E:byte] = al
	al = Mem0[ds:0x4D1D:byte]
	Mem0[ds:0x4D1F:byte] = al
	ax = si
	Mem0[ds:0x4D1C:byte] = al
	ax = di
	Mem0[ds:0x4D1D:byte] = al
	SCZO = cond(Mem0[ds:0x00B4:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_04B3
	// succ:  l00BF_0476 l00BF_04B3
l00BF_0476:
	cl = 0x06
	bx = si
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + di
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0CE3:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l00BF_04B3
	// succ:  l00BF_048B l00BF_04B3
l00BF_048B:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l00BF_04AD
	// succ:  l00BF_0491 l00BF_04AD
l00BF_0491:
	bl = Mem0[ds:0x4D1E:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1F:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0CE3:byte] & 0x20)
	C = false
	branch Test(NE,Z) l00BF_04B3
	// succ:  l00BF_04AD l00BF_04B3
l00BF_04AD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn00BF_056C (retsize: 2;)
	sp = sp + 0x0004
l00BF_04B3:
	ax = Mem0[ds:0x0336:word16]
	ax = ax + Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	cl = Mem0[ds:0x4D1D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	Mem0[ss:bp - 0x0004:word16] = cx
	SCZO = cond(ax - cx)
	branch Test(UGT,CZ) l00BF_04D2
	// succ:  l00BF_04C7 l00BF_04D2
l00BF_04C7:
	ax = Mem0[ds:0x4DDE:word16]
	ax = ax - Mem0[ds:0x0336:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - cx)
	branch Test(UGE,C) l00BF_050A
	// succ:  l00BF_04D2 l00BF_050A
l00BF_04D2:
	ax = cx
	ax = ax - Mem0[ds:0x033A:word16]
	SCZO = cond(ax)
	branch Test(NS,S) l00BF_04DC
	// succ:  l00BF_04DA l00BF_04DC
l00BF_04DA:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00BF_04DC
l00BF_04DC:
	cx = Mem0[ds:0x0482:word16]
	cx = cx - Mem0[ds:0x495E:word16]
	SCZO = cond(cx)
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	ax = ax & dx
	SZO = cond(ax)
	C = false
	ax = ax + cx
	SCZO = cond(ax)
	Mem0[ds:0x3D84:word16] = ax
	ax = ax + Mem0[ds:0x495E:word16]
	SCZO = cond(ax)
	Mem0[ds:0x4DDE:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D84:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l00BF_050A
l00BF_050A:
	ax = Mem0[ds:0x0334:word16]
	ax = ax + Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	cl = Mem0[ds:0x4D1C:byte]
	ch = ch - ch
	SCZO = cond(ch)
	Mem0[ss:bp - 0x0006:word16] = cx
	SCZO = cond(ax - cx)
	branch Test(UGT,CZ) l00BF_0529
	// succ:  l00BF_051E l00BF_0529
l00BF_051E:
	ax = Mem0[ds:0x3CF6:word16]
	ax = ax - Mem0[ds:0x0334:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - cx)
	branch Test(UGE,C) l00BF_055F
	// succ:  l00BF_0529 l00BF_055F
l00BF_0529:
	ax = cx
	ax = ax - Mem0[ds:0x0338:word16]
	SCZO = cond(ax)
	branch Test(NS,S) l00BF_0533
	// succ:  l00BF_0531 l00BF_0533
l00BF_0531:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00BF_0533
l00BF_0533:
	cx = Mem0[ds:0x0480:word16]
	cx = cx - Mem0[ds:0x4D68:word16]
	SCZO = cond(cx)
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	ax = ax & dx
	SZO = cond(ax)
	C = false
	ax = ax + cx
	SCZO = cond(ax)
	Mem0[ds:0x4BE8:word16] = ax
	ax = ax + Mem0[ds:0x4D68:word16]
	SCZO = cond(ax)
	Mem0[ds:0x3CF6:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BE8:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l00BF_055F
l00BF_055F:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_0444_exit
fn00BF_0444_exit:


// fn00BF_056C
// Return size: 4
void fn00BF_056C()
fn00BF_056C_entry:
	// succ:  l00BF_056C
l00BF_056C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x000E:word16] = 0x0000
	di = Mem0[ss:bp + 0x0008:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l00BF_05A7
	// succ:  l00BF_0586 l00BF_05A7
l00BF_0586:
	cl = 0x06
	ax = di
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	bx = ax
	// succ:  l00BF_059A
l00BF_059A:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l00BF_05A7
	// succ:  l00BF_05A0 l00BF_05A7
l00BF_05A0:
	bx = bx - 0x00C0
	SCZO = cond(bx)
	di = di - 0x0001
	SZO = cond(di)
	branch Test(NE,Z) l00BF_059A
	// succ:  l00BF_05A7 l00BF_059A
l00BF_05A7:
	Mem0[ss:bp - 0x000C:word16] = di
	di = Mem0[ss:bp + 0x0008:word16]
	ax = di
	SCZO = cond(Mem0[ds:0x0480:word16] - ax)
	branch Test(ULE,CZ) l00BF_05B8
	// succ:  l00BF_05B5 l00BF_05B8
l00BF_05B5:
	goto l00BF_06BA
	// succ:  l00BF_06BA
l00BF_05B8:
	Mem0[ss:bp - 0x000A:word16] = di
	di = Mem0[ss:bp + 0x0006:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l00BF_05E2
	// succ:  l00BF_05C2 l00BF_05E2
l00BF_05C2:
	cl = 0x06
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + di
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	bx = ax
	// succ:  l00BF_05D6
l00BF_05D6:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l00BF_05E2
	// succ:  l00BF_05DC l00BF_05E2
l00BF_05DC:
	bx = bx - 0x0003
	SCZO = cond(bx)
	di = di - 0x0001
	SZO = cond(di)
	branch Test(NE,Z) l00BF_05D6
	// succ:  l00BF_05E2 l00BF_05D6
l00BF_05E2:
	Mem0[ss:bp - 0x0008:word16] = di
	di = Mem0[ss:bp + 0x0006:word16]
	ax = di
	SCZO = cond(Mem0[ds:0x0482:word16] - ax)
	branch Test(ULE,CZ) l00BF_0614
	// succ:  l00BF_05F0 l00BF_0614
l00BF_05F0:
	cl = 0x06
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + di
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	bx = ax
	// succ:  l00BF_0604
l00BF_0604:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l00BF_0614
	// succ:  l00BF_060A l00BF_0614
l00BF_060A:
	bx = bx + 0x0003
	SCZO = cond(bx)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(Mem0[ds:0x0482:word16] - di)
	branch Test(UGT,CZ) l00BF_0604
	// succ:  l00BF_0614 l00BF_0604
l00BF_0614:
	Mem0[ss:bp - 0x0006:word16] = di
	di = Mem0[ss:bp - 0x000C:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ds:0x4BE8:word16] - di)
	branch Test(ULE,CZ) l00BF_0626
	// succ:  l00BF_0623 l00BF_0626
l00BF_0623:
	goto l00BF_06E4
	// succ:  l00BF_06E4
l00BF_0626:
	ax = Mem0[ds:0x3CF6:word16]
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - ax)
	branch Test(ULE,CZ) l00BF_067F
	// succ:  l00BF_062E l00BF_067F
l00BF_062E:
	ax = Mem0[ss:bp - 0x000A:word16]
	ax = ax - bx
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ds:0x4D68:word16])
	branch Test(UGE,C) l00BF_067F
	// succ:  l00BF_0639 l00BF_067F
l00BF_0639:
	dx = Mem0[ss:bp - 0x000A:word16]
	dx = dx - Mem0[ds:0x3CF6:word16]
	SCZO = cond(dx)
	SCZO = cond(Mem0[ds:0x4BE8:word16] - di)
	branch Test(UGE,C) l00BF_0652
	// succ:  l00BF_0646 l00BF_0652
l00BF_0646:
	di = di - Mem0[ds:0x4BE8:word16]
	SCZO = cond(di)
	SCZO = cond(di - dx)
	branch Test(LE,SZO) l00BF_0650
	// succ:  l00BF_064E l00BF_0650
l00BF_064E:
	di = dx
	// succ:  l00BF_0650
l00BF_0650:
	dx = di
	// succ:  l00BF_0652
l00BF_0652:
	ax = bx
	ax = ax - Mem0[ds:0x0334:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - dx)
	branch Test(LE,SZO) l00BF_0662
	// succ:  l00BF_0660 l00BF_0662
l00BF_0660:
	ax = dx
	// succ:  l00BF_0662
l00BF_0662:
	dx = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l00BF_066A
	// succ:  l00BF_0668 l00BF_066A
l00BF_0668:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00BF_066A
l00BF_066A:
	dx = ax
	v20 = Mem0[ds:0x4BE8:word16] + dx
	Mem0[ds:0x4BE8:word16] = v20
	SCZO = cond(v20)
	// succ:  l00BF_0670
l00BF_0670:
	ax = Mem0[ds:0x4BE8:word16]
	ax = ax + Mem0[ds:0x4D68:word16]
	SCZO = cond(ax)
	Mem0[ds:0x3CF6:word16] = ax
	Mem0[ss:bp - 0x000E:word16] = 0x0001
	// succ:  l00BF_067F
l00BF_067F:
	cx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(Mem0[ds:0x3D84:word16] - cx)
	branch Test(UGT,CZ) l00BF_068B
	// succ:  l00BF_0688 l00BF_068B
l00BF_0688:
	goto l00BF_0714
	// succ:  l00BF_0714
l00BF_068B:
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax - cx
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ds:0x495E:word16])
	branch Test(UGE,C) l00BF_0714
	// succ:  l00BF_0696 l00BF_0714
l00BF_0696:
	ax = Mem0[ds:0x4DDE:word16]
	ax = ax - Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x0336:word16]
	SCZO = cond(ax)
	dx = Mem0[ds:0x3D84:word16]
	dx = dx - cx
	SCZO = cond(dx)
	ax = ax - dx
	SCZO = cond(ax)
	bx = bx - bx - C
	SCZO = cond(bx)
	ax = ax & bx
	SZO = cond(ax)
	C = false
	ax = ax + dx
	SCZO = cond(ax)
	branch Test(NS,S) l00BF_06B2
	// succ:  l00BF_06B0 l00BF_06B2
l00BF_06B0:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00BF_06B2
l00BF_06B2:
	v21 = Mem0[ds:0x3D84:word16] - ax
	Mem0[ds:0x3D84:word16] = v21
	SCZO = cond(v21)
	goto l00BF_0765
	// succ:  l00BF_0765
l00BF_06BA:
	cl = 0x06
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	bx = ax
	// succ:  l00BF_06CC
l00BF_06CC:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(NE,Z) l00BF_06D5
	// succ:  l00BF_06D2 l00BF_06D5
l00BF_06D2:
	goto l00BF_05B8
	// succ:  l00BF_05B8
l00BF_06D5:
	bx = bx + 0x00C0
	SCZO = cond(bx)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(Mem0[ds:0x0480:word16] - di)
	branch Test(UGT,CZ) l00BF_06CC
	// succ:  l00BF_06E0 l00BF_06CC
l00BF_06E0:
	goto l00BF_05B8
	// succ:  l00BF_05B8
l00BF_06E4:
	ax = bx
	ax = ax - di
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ds:0x4D68:word16])
	branch Test(ULT,C) l00BF_06F1
	// succ:  l00BF_06EE l00BF_06F1
l00BF_06EE:
	goto l00BF_0626
	// succ:  l00BF_0626
l00BF_06F1:
	ax = Mem0[ds:0x3CF6:word16]
	ax = ax - Mem0[ds:0x0334:word16]
	SCZO = cond(ax)
	ax = ax - bx
	SCZO = cond(ax)
	cx = Mem0[ds:0x4BE8:word16]
	cx = cx - di
	SCZO = cond(cx)
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	ax = ax & dx
	SZO = cond(ax)
	C = false
	ax = ax + cx
	SCZO = cond(ax)
	branch Test(NS,S) l00BF_070C
	// succ:  l00BF_070A l00BF_070C
l00BF_070A:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00BF_070C
l00BF_070C:
	v18 = Mem0[ds:0x4BE8:word16] - ax
	Mem0[ds:0x4BE8:word16] = v18
	SCZO = cond(v18)
	goto l00BF_0670
	// succ:  l00BF_0670
l00BF_0714:
	di = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(Mem0[ds:0x4DDE:word16] - di)
	branch Test(UGE,C) l00BF_0728
	// succ:  l00BF_071D l00BF_0728
l00BF_071D:
	ax = di
	ax = ax - Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ds:0x495E:word16])
	branch Test(ULT,C) l00BF_072E
	// succ:  l00BF_0728 l00BF_072E
l00BF_0728:
	bx = Mem0[ss:bp - 0x000E:word16]
	goto l00BF_0772
	// succ:  l00BF_0772
l00BF_072E:
	dx = di
	dx = dx - Mem0[ds:0x4DDE:word16]
	SCZO = cond(dx)
	SCZO = cond(Mem0[ds:0x3D84:word16] - cx)
	branch Test(UGE,C) l00BF_0746
	// succ:  l00BF_073A l00BF_0746
l00BF_073A:
	cx = cx - Mem0[ds:0x3D84:word16]
	SCZO = cond(cx)
	SCZO = cond(cx - dx)
	branch Test(LE,SZO) l00BF_0744
	// succ:  l00BF_0742 l00BF_0744
l00BF_0742:
	cx = dx
	// succ:  l00BF_0744
l00BF_0744:
	dx = cx
	// succ:  l00BF_0746
l00BF_0746:
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax - Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x0336:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - dx)
	branch Test(LE,SZO) l00BF_0757
	// succ:  l00BF_0755 l00BF_0757
l00BF_0755:
	ax = dx
	// succ:  l00BF_0757
l00BF_0757:
	dx = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l00BF_075F
	// succ:  l00BF_075D l00BF_075F
l00BF_075D:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00BF_075F
l00BF_075F:
	dx = ax
	v22 = Mem0[ds:0x3D84:word16] + dx
	Mem0[ds:0x3D84:word16] = v22
	SCZO = cond(v22)
	// succ:  l00BF_0765
l00BF_0765:
	ax = Mem0[ds:0x3D84:word16]
	ax = ax + Mem0[ds:0x495E:word16]
	SCZO = cond(ax)
	Mem0[ds:0x4DDE:word16] = ax
	bx = 0x0001
	// succ:  l00BF_0772
l00BF_0772:
	ax = bx
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_056C_exit
fn00BF_056C_exit:


// fn00BF_0780
// Return size: 4
void fn00BF_0780()
fn00BF_0780_entry:
	// succ:  l00BF_0780
l00BF_0780:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	si = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00BF_0444 (retsize: 2;)
	sp = sp + 0x0006
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00BF_11AE (retsize: 2;)
	sp = sp + 0x0002
	cl = 0x06
	bx = di
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + si
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0CE3:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l00BF_07C3
	// succ:  l00BF_07BC l00BF_07C3
l00BF_07BC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn01BF_1776 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00BF_07C3
l00BF_07C3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_0780_exit
fn00BF_0780_exit:


// fn00BF_07E0
// Return size: 4
void fn00BF_07E0()
fn00BF_07E0_entry:
	// succ:  l00BF_07E0
l00BF_07E0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	si = Mem0[ds:di:word16]
	si = si & 0x00FF
	SZO = cond(si)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn01BF_21CE (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00BF_081A
	// succ:  l00BF_0802 l00BF_081A
l00BF_0802:
	ax = si
	ax = ax - 0x0067
	SCZO = cond(ax)
	branch Test(ULT,C) l00BF_081A
	// succ:  l00BF_0809 l00BF_081A
l00BF_0809:
	ax = ax - 0x000F
	SCZO = cond(ax)
	branch Test(UGT,CZ) l00BF_081A
	// succ:  l00BF_080E l00BF_081A
l00BF_080E:
	SCZO = cond(Mem0[ds:di + 0x0002:byte] - 0x00)
	branch Test(EQ,Z) l00BF_081A
	// succ:  l00BF_0814 l00BF_081A
l00BF_0814:
	ax = 0x0001
	goto l00BF_0820
	// succ:  l00BF_0820
l00BF_081A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn01BF_228A (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l00BF_0820
l00BF_0820:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_07E0_exit
fn00BF_07E0_exit:


// fn00BF_082C
// Return size: 4
void fn00BF_082C()
fn00BF_082C_entry:
	// succ:  l00BF_082C
l00BF_082C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0136
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(Mem0[ds:0x4136:word16] - 0x0000)
	branch Test(NE,Z) l00BF_0855
	// succ:  l00BF_084C l00BF_0855
l00BF_084C:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00BF_0855
l00BF_0855:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_01C2 (retsize: 4;)
	sp = sp + 0x0004
	ax = Mem0[ds:0x3D74:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x032A:word16] = 0x000B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	SetCapture(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x0098:word16] = 0x0006
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_082C_exit
fn00BF_082C_exit:


// fn00BF_088E
// Return size: 4
void fn00BF_088E()
fn00BF_088E_entry:
	// succ:  l00BF_088E
l00BF_088E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	si = Mem0[ss:bp + 0x0008:word16]
	ReleaseCapture()
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ds:0x0098:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_02D2 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00BF_08C0
	// succ:  l00BF_08BB l00BF_08C0
l00BF_08BB:
	ax = 0x01D1
	goto l00BF_0915
	// succ:  l00BF_0915
l00BF_08C0:
	cl = 0x06
	bx = si
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + di
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx + 0x0CE2
	SCZO = cond(bx)
	SCZO = cond(Mem0[ds:bx:byte] - 0x10)
	branch Test(NE,Z) l00BF_08F2
	// succ:  l00BF_08D7 l00BF_08F2
l00BF_08D7:
	ax = Mem0[ds:bx:word16]
	al = al & 0x11
	SZO = cond(al)
	C = false
	al = al | 0x11
	SZO = cond(al)
	C = false
	Mem0[ds:bx:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0006:word16] = 0x0032
	goto l00BF_091E
	// succ:  l00BF_091E
l00BF_08F2:
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2210 (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	SCZO = cond(si - 0x0006)
	branch Test(EQ,Z) l00BF_0912
	// succ:  l00BF_0903 l00BF_0912
l00BF_0903:
	SCZO = cond(si - 0x0029)
	branch Test(ULT,C) l00BF_090D
	// succ:  l00BF_0908 l00BF_090D
l00BF_0908:
	SCZO = cond(si - 0x002C)
	branch Test(ULE,CZ) l00BF_0912
	// succ:  l00BF_090D l00BF_0912
l00BF_090D:
	ax = 0x01D2
	goto l00BF_0915
	// succ:  l00BF_0915
l00BF_0912:
	ax = 0x0401
	// succ:  l00BF_0915
l00BF_0915:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00BF_091E
l00BF_091E:
	ax = 0x0154
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x032A:word16] = 0x0000
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_0957
	// succ:  l00BF_0942 l00BF_0957
l00BF_0942:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_10B8 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0BB0 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00BF_0957
l00BF_0957:
	SCZO = cond(Mem0[ds:0x4136:word16] - 0x0000)
	branch Test(NE,Z) l00BF_0966
	// succ:  l00BF_095E l00BF_0966
l00BF_095E:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00BF_0966
l00BF_0966:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_088E_exit
fn00BF_088E_exit:


// fn00BF_0972
// Return size: 4
void fn00BF_0972()
fn00BF_0972_entry:
	// succ:  l00BF_0972
l00BF_0972:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x4136:word16] - 0x0000)
	branch Test(NE,Z) l00BF_098F
	// succ:  l00BF_0986 l00BF_098F
l00BF_0986:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00BF_098F
l00BF_098F:
	ax = 0x0137
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_01C2 (retsize: 4;)
	sp = sp + 0x0004
	ax = Mem0[ds:0x3D74:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x032A:word16] = 0x0016
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	SetCapture(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x0098:word16] = 0x0006
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_0972_exit
fn00BF_0972_exit:


// fn00BF_09D4
// Return size: 4
void fn00BF_09D4()
fn00BF_09D4_entry:
	// succ:  l00BF_09D4
l00BF_09D4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	ReleaseCapture()
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ds:0x0098:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - di)
	branch Test(NE,Z) l00BF_0A0A
	// succ:  l00BF_09FC l00BF_0A0A
l00BF_09FC:
	al = Mem0[ds:0x4D1D:byte]
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(NE,Z) l00BF_0A0A
	// succ:  l00BF_0A04 l00BF_0A0A
l00BF_0A04:
	ax = 0x01D3
	goto l00BF_0A91
	// succ:  l00BF_0A91
l00BF_0A0A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn00F7_02D2 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00BF_0A1E
	// succ:  l00BF_0A17 l00BF_0A1E
l00BF_0A17:
	ax = 0x01D1
	goto l00BF_0A91
	// succ:  l00BF_0A91
l00BF_0A1E:
	si = Mem0[ss:bp + 0x0008:word16]
	cl = 0x06
	bx = si
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0008:word16] = bx
	bx = bx + 0x0CE2
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0006:word16] = bx
	SCZO = cond(Mem0[ds:bx:byte] - 0x11)
	branch Test(NE,Z) l00BF_0A8E
	// succ:  l00BF_0A3F l00BF_0A8E
l00BF_0A3F:
	bx = Mem0[ss:bp - 0x0008:word16]
	bl = Mem0[ds:bx + 0x0CE4:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l00BF_0A6E
	// succ:  l00BF_0A4C l00BF_0A6E
l00BF_0A4C:
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	dx = Mem0[ds:bx:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_0A60
	// succ:  l00BF_0A5B l00BF_0A60
l00BF_0A5B:
	ax = 0x01D4
	goto l00BF_0A91
	// succ:  l00BF_0A91
l00BF_0A60:
	bx = dx
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_0A6E
	// succ:  l00BF_0A68 l00BF_0A6E
l00BF_0A68:
	ax = 0x01DF
	goto l00BF_0A91
	// succ:  l00BF_0A91
l00BF_0A6E:
	bx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ds:bx:word16]
	al = al & 0x10
	SZO = cond(al)
	C = false
	al = al | 0x10
	SZO = cond(al)
	C = false
	Mem0[ds:bx:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0004:word16] = 0x0032
	goto l00BF_0A9A
	// succ:  l00BF_0A9A
l00BF_0A8E:
	ax = 0x01D5
	// succ:  l00BF_0A91
l00BF_0A91:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00BF_0A9A
l00BF_0A9A:
	ax = 0x0154
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x032A:word16] = 0x0000
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_0AD3
	// succ:  l00BF_0ABE l00BF_0AD3
l00BF_0ABE:
	ax = Mem0[ss:bp - 0x0004:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_10B8 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0BB0 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00BF_0AD3
l00BF_0AD3:
	SCZO = cond(Mem0[ds:0x4136:word16] - 0x0000)
	branch Test(NE,Z) l00BF_0AE2
	// succ:  l00BF_0ADA l00BF_0AE2
l00BF_0ADA:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00BF_0AE2
l00BF_0AE2:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_09D4_exit
fn00BF_09D4_exit:


// fn00BF_0AEE
// Return size: 4
void fn00BF_0AEE()
fn00BF_0AEE_entry:
	// succ:  l00BF_0AEE
l00BF_0AEE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	ReleaseCapture()
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ds:0x0098:word16] = ax
	cl = 0x06
	si = di
	si = si << cl
	SCZO = cond(si)
	si = si + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(si)
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0CE2
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:si:byte] - 0x11)
	branch Test(EQ,Z) l00BF_0B3A
	// succ:  l00BF_0B25 l00BF_0B3A
l00BF_0B25:
	SCZO = cond(Mem0[ds:si:byte] - 0x10)
	branch Test(EQ,Z) l00BF_0B3A
	// succ:  l00BF_0B2A l00BF_0B3A
l00BF_0B2A:
	ax = 0x01D6
	// succ:  l00BF_0B2D
l00BF_0B2D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	goto l00BF_0BAC
	// succ:  l00BF_0BAC
l00BF_0B3A:
	Mem0[ss:bp - 0x0006:word16] = si
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - di)
	branch Test(NE,Z) l00BF_0B54
	// succ:  l00BF_0B46 l00BF_0B54
l00BF_0B46:
	al = Mem0[ds:0x4D1D:byte]
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(NE,Z) l00BF_0B54
	// succ:  l00BF_0B4E l00BF_0B54
l00BF_0B4E:
	ax = 0x01D3
	goto l00BF_0B2D
	// succ:  l00BF_0B2D
l00BF_0B54:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn00F7_02D2 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00BF_0B66
	// succ:  l00BF_0B61 l00BF_0B66
l00BF_0B61:
	ax = 0x01D1
	goto l00BF_0B2D
	// succ:  l00BF_0B2D
l00BF_0B66:
	si = Mem0[ss:bp - 0x0006:word16]
	dl = Mem0[ds:si + 0x0002:byte]
	dh = dh - dh
	SCZO = cond(dh)
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l00BF_0B86
	// succ:  l00BF_0B72 l00BF_0B86
l00BF_0B72:
	bx = dx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_0B86
	// succ:  l00BF_0B81 l00BF_0B86
l00BF_0B81:
	ax = 0x01D4
	goto l00BF_0B2D
	// succ:  l00BF_0B2D
l00BF_0B86:
	SCZO = cond(Mem0[ds:si:byte] - 0x11)
	branch Test(NE,Z) l00BF_0B90
	// succ:  l00BF_0B8B l00BF_0B90
l00BF_0B8B:
	ax = 0x0010
	goto l00BF_0B93
	// succ:  l00BF_0B93
l00BF_0B90:
	ax = 0x0011
	// succ:  l00BF_0B93
l00BF_0B93:
	ah = Mem0[ds:si + 0x0001:byte]
	Mem0[ds:si:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0004:word16] = 0x0032
	// succ:  l00BF_0BAC
l00BF_0BAC:
	ax = 0x0154
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x032A:word16] = 0x0000
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_0BE5
	// succ:  l00BF_0BD0 l00BF_0BE5
l00BF_0BD0:
	ax = Mem0[ss:bp - 0x0004:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_10B8 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0BB0 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00BF_0BE5
l00BF_0BE5:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_0AEE_exit
fn00BF_0AEE_exit:


// fn00BF_0BF2
// Return size: 4
void fn00BF_0BF2()
fn00BF_0BF2_entry:
	// succ:  l00BF_0BF2
l00BF_0BF2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0066 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00BF_0C55
	// succ:  l00BF_0C10 l00BF_0C55
l00BF_0C10:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1178 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(ax - 0x0001)
	branch Test(UGT,CZ) l00BF_0C55
	// succ:  l00BF_0C2A l00BF_0C55
l00BF_0C2A:
	cl = 0x06
	bx = Mem0[ss:bp - 0x0004:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE2:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0008:word16] = ax
	SCZO = cond(ax - 0x0022)
	branch Test(NE,Z) l00BF_0C4B
	// succ:  l00BF_0C48 l00BF_0C4B
l00BF_0C48:
	goto l00BF_0CCB
	// succ:  l00BF_0CCB
l00BF_0C4B:
	SCZO = cond(ax - 0x003D)
	branch Test(EQ,Z) l00BF_0CCB
	// succ:  l00BF_0C50 l00BF_0CCB
l00BF_0C50:
	SCZO = cond(ax - 0x00A1)
	branch Test(EQ,Z) l00BF_0CCB
	// succ:  l00BF_0C55 l00BF_0CCB
l00BF_0C55:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0874 (retsize: 4;)
	sp = sp + 0x000A
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00BF_0CC0
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0874 (retsize: 4;)
	sp = sp + 0x000A
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00BF_0CC0
	// succ:  l00BF_0C74 l00BF_0CC0
l00BF_0C74:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0874 (retsize: 4;)
	sp = sp + 0x000A
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00BF_0CC0
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0874 (retsize: 4;)
	sp = sp + 0x000A
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00BF_0CC0
	// succ:  l00BF_0C93 l00BF_0CC0
l00BF_0C93:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00A1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0874 (retsize: 4;)
	sp = sp + 0x000A
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00BF_0CC0
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00A1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0874 (retsize: 4;)
	sp = sp + 0x000A
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00BF_0CC0
	// succ:  l00BF_0CB2 l00BF_0CC0
l00BF_0CB2:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	Mem0[ss:bp - 0x0006:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	Mem0[ss:bp - 0x0006:word16] = ax
	// succ:  l00BF_0CC0
l00BF_0CC0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00F7_01C2 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00BF_0CCB
l00BF_0CCB:
	SCZO = cond(Mem0[ds:0x4136:word16] - 0x0000)
	branch Test(NE,Z) l00BF_0CDB
	// succ:  l00BF_0CD2 l00BF_0CDB
l00BF_0CD2:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00BF_0CDB
l00BF_0CDB:
	ax = 0x027E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	ax = Mem0[ds:0x3D74:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x032A:word16] = 0x0035
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	SetCapture(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x0098:word16] = 0x0006
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_0BF2_exit
fn00BF_0BF2_exit:


// fn00BF_0D12
// Return size: 4
void fn00BF_0D12()
fn00BF_0D12_entry:
	// succ:  l00BF_0D12
l00BF_0D12:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	ReleaseCapture()
	Mem0[ds:0x0098:word16] = 0x0000
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - di)
	branch Test(NE,Z) l00BF_0D46
	// succ:  l00BF_0D38 l00BF_0D46
l00BF_0D38:
	al = Mem0[ds:0x4D1D:byte]
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(NE,Z) l00BF_0D46
	// succ:  l00BF_0D40 l00BF_0D46
l00BF_0D40:
	ax = 0x01D3
	goto l00BF_0E7B
	// succ:  l00BF_0E7B
l00BF_0D46:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn00F7_02D2 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00BF_0D5A
	// succ:  l00BF_0D53 l00BF_0D5A
l00BF_0D53:
	ax = 0x01D1
	goto l00BF_0E7B
	// succ:  l00BF_0E7B
l00BF_0D5A:
	cl = 0x06
	si = di
	si = si << cl
	SCZO = cond(si)
	si = si + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(si)
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0CE2
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:si:byte] - 0x22)
	branch Test(EQ,Z) l00BF_0D82
	// succ:  l00BF_0D72 l00BF_0D82
l00BF_0D72:
	SCZO = cond(Mem0[ds:si:byte] - 0x3D)
	branch Test(EQ,Z) l00BF_0D82
	// succ:  l00BF_0D77 l00BF_0D82
l00BF_0D77:
	SCZO = cond(Mem0[ds:si:byte] - 0xA1)
	branch Test(EQ,Z) l00BF_0D82
	// succ:  l00BF_0D7C l00BF_0D82
l00BF_0D7C:
	ax = 0x0251
	goto l00BF_0E7B
	// succ:  l00BF_0E7B
l00BF_0D82:
	ax = 0x0258
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_10B8 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0BB0 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00BF_0DA2
	// succ:  l00BF_0D9B l00BF_0DA2
l00BF_0D9B:
	ax = 0x027F
	goto l00BF_0E7B
	// succ:  l00BF_0E7B
l00BF_0DA2:
	bl = Mem0[ds:si + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	di = Mem0[ds:bx:word16]
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	al = Mem0[ds:0x4CEF:byte]
	cl = 0x02
	ax = (int16) al
	dx = dx_ax % cl
	ax = dx_ax / cl
	SCZO = cond(ax)
	ax = (int16) al
	bl = Mem0[ds:di + 0x0004:byte]
	bx = bx & 0x007F
	SZO = cond(bx)
	C = false
	cl = Mem0[ds:bx + 0x033C:byte]
	ch = ch - ch
	SCZO = cond(ch)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx + Mem0[ds:0x4D04:word16]
	SCZO = cond(cx)
	SCZO = cond(cx - Mem0[ss:bp - 0x0004:word16])
	branch Test(UGT,CZ) l00BF_0DDE
	// succ:  l00BF_0DDB l00BF_0DDE
l00BF_0DDB:
	goto l00BF_0E60
	// succ:  l00BF_0E60
l00BF_0DDE:
	al = Mem0[ds:di + 0x0004:byte]
	ax = ax & 0x007F
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(Mem0[ds:si:byte] - 0x22)
	branch Test(NE,Z) l00BF_0DF4
	// succ:  l00BF_0DEC l00BF_0DF4
l00BF_0DEC:
	ax = Mem0[ds:si:word16]
	al = al & 0x01
	SZO = cond(al)
	C = false
	al = al | 0x01
	SZO = cond(al)
	C = false
	goto l00BF_0E04
	// succ:  l00BF_0E04
l00BF_0DF4:
	SCZO = cond(Mem0[ds:si:byte] - 0x3D)
	branch Test(NE,Z) l00BF_0DFE
	// succ:  l00BF_0DF9 l00BF_0DFE
l00BF_0DF9:
	ax = 0x0002
	goto l00BF_0E01
	// succ:  l00BF_0E01
l00BF_0DFE:
	ax = 0x0003
	// succ:  l00BF_0E01
l00BF_0E01:
	ah = Mem0[ds:si + 0x0001:byte]
	// succ:  l00BF_0E04
l00BF_0E04:
	Mem0[ds:si:word16] = ax
	v24 = Mem0[ds:si + 0x0001:byte] & 0xFE
	Mem0[ds:si + 0x0001:byte] = v24
	SZO = cond(Mem0[ds:si + 0x0001:byte])
	C = false
	v25 = Mem0[ds:di + 0x0004:byte] & 0x80
	Mem0[ds:di + 0x0004:byte] = v25
	SZO = cond(Mem0[ds:di + 0x0004:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0177_1A2A (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00BF_0E27
	// succ:  l00BF_0E18 l00BF_0E27
l00BF_0E18:
	al = Mem0[ds:si + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_0196 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:si + 0x0002:byte] = 0x00
	// succ:  l00BF_0E27
l00BF_0E27:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	ax = 0x0252
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	ax = 0x0064
	bx = Mem0[ss:bp - 0x0004:word16]
	cl = Mem0[ds:bx + 0x033C:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax - cx
	SCZO = cond(ax)
	cx = 0x0019
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1320 (retsize: 4;)
	sp = sp + 0x0004
	goto l00BF_0E84
	// succ:  l00BF_0E84
l00BF_0E60:
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x005E)
	branch Test(ULE,CZ) l00BF_0E78
	// succ:  l00BF_0E66 l00BF_0E78
l00BF_0E66:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn00BF_113E (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ds:0x032C:word16] = ax
	ax = 0x0254
	goto l00BF_0E7B
	// succ:  l00BF_0E7B
l00BF_0E78:
	ax = 0x0253
	// succ:  l00BF_0E7B
l00BF_0E7B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00BF_0E84
l00BF_0E84:
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x032A:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x4136:word16] - 0x0000)
	branch Test(NE,Z) l00BF_0EA5
	// succ:  l00BF_0E9D l00BF_0EA5
l00BF_0E9D:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00BF_0EA5
l00BF_0EA5:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_0D12_exit
fn00BF_0D12_exit:


// fn00BF_0EB2
// Return size: 4
void fn00BF_0EB2()
fn00BF_0EB2_entry:
	// succ:  l00BF_0EB2
l00BF_0EB2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0066 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00BF_0EDA
	// succ:  l00BF_0ED0 l00BF_0EDA
l00BF_0ED0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBeep(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l00BF_0F6E
	// succ:  l00BF_0F6E
l00BF_0EDA:
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax - 0x000D
	SCZO = cond(ax)
	SCZO = cond(ax - 0x000E)
	branch Test(UGT,CZ) l00BF_0F5B
	// succ:  l00BF_0EE5 l00BF_0F5B
l00BF_0EE5:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v12 = ax
	ax = bx
	bx = v12
	switch (ax) { l00BF_0F0C l00BF_0F12 l00BF_0F18 l00BF_0F1E l00BF_0F2A l00BF_0F34 l00BF_0F3A l00BF_0F44 l00BF_0F5B l00BF_0F5B l00BF_0F5B l00BF_0F5B l00BF_0F5B l00BF_0F5B l00BF_0F4C }
	// succ:  l00BF_0F0C l00BF_0F12 l00BF_0F18 l00BF_0F1E l00BF_0F2A l00BF_0F34 l00BF_0F3A l00BF_0F44 l00BF_0F5B l00BF_0F5B l00BF_0F5B l00BF_0F5B l00BF_0F5B l00BF_0F5B l00BF_0F4C
l00BF_0F0C:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	goto l00BF_0F2E
	// succ:  l00BF_0F2E
l00BF_0F12:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	goto l00BF_0F22
	// succ:  l00BF_0F22
l00BF_0F18:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	goto l00BF_0F23
	// succ:  l00BF_0F23
l00BF_0F1E:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	// succ:  l00BF_0F22
l00BF_0F22:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l00BF_0F23
l00BF_0F23:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	goto l00BF_0F55
	// succ:  l00BF_0F55
l00BF_0F2A:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	// succ:  l00BF_0F2E
l00BF_0F2E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	goto l00BF_0F56
	// succ:  l00BF_0F56
l00BF_0F34:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	goto l00BF_0F48
	// succ:  l00BF_0F48
l00BF_0F3A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	// succ:  l00BF_0F3D
l00BF_0F3D:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	goto l00BF_0F55
	// succ:  l00BF_0F55
l00BF_0F44:
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	// succ:  l00BF_0F48
l00BF_0F48:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l00BF_0F3D
	// succ:  l00BF_0F3D
l00BF_0F4C:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	// succ:  l00BF_0F55
l00BF_0F55:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l00BF_0F56
l00BF_0F56:
	call fn00F7_01C2 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00BF_0F5B
l00BF_0F5B:
	ax = Mem0[ds:0x032A:word16]
	ax = ax - 0x000B
	SCZO = cond(ax)
	branch Test(EQ,Z) l00BF_0F68
	// succ:  l00BF_0F63 l00BF_0F68
l00BF_0F63:
	ax = ax - 0x000B
	SCZO = cond(ax)
	branch Test(NE,Z) l00BF_0F6E
	// succ:  l00BF_0F68 l00BF_0F6E
l00BF_0F68:
	ax = Mem0[ds:0x032A:word16]
	Mem0[ds:0x032C:word16] = ax
	// succ:  l00BF_0F6E
l00BF_0F6E:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_0EB2_exit
fn00BF_0EB2_exit:


// fn00BF_0F78
// Return size: 4
void fn00BF_0F78()
fn00BF_0F78_entry:
	// succ:  l00BF_0F78
l00BF_0F78:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x01F9
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x032A:word16] = 0x0027
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_0F78_exit
fn00BF_0F78_exit:


// fn00BF_0FA0
// Return size: 4
void fn00BF_0FA0()
fn00BF_0FA0_entry:
	// succ:  l00BF_0FA0
l00BF_0FA0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ds:0x4BE8:word16]
	di = Mem0[ds:0x3D84:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax - 0x001E
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0008)
	branch Test(ULE,CZ) l00BF_0FC5
	// succ:  l00BF_0FC2 l00BF_0FC5
l00BF_0FC2:
	goto l00BF_10A7
	// succ:  l00BF_10A7
l00BF_0FC5:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v12 = ax
	ax = bx
	bx = v12
	switch (ax) { l00BF_103C l00BF_0FE0 l00BF_1090 l00BF_0FEE l00BF_1003 l00BF_101C l00BF_1031 l00BF_1038 l00BF_1052 }
	// succ:  l00BF_103C l00BF_0FE0 l00BF_1090 l00BF_0FEE l00BF_1003 l00BF_101C l00BF_1031 l00BF_1038 l00BF_1052
l00BF_0FE0:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l00BF_0FE7
	// succ:  l00BF_0FE4 l00BF_0FE7
l00BF_0FE4:
	goto l00BF_1090
	// succ:  l00BF_1090
l00BF_0FE7:
	v22 = Mem0[ds:0x4BE8:word16] - 0x0001
	Mem0[ds:0x4BE8:word16] = v22
	SZO = cond(v22)
	goto l00BF_1090
	// succ:  l00BF_1090
l00BF_0FEE:
	ax = Mem0[ds:0x0482:word16]
	ax = ax - Mem0[ds:0x495E:word16]
	SCZO = cond(ax)
	cx = di
	cx = cx + 0x0001
	SZO = cond(cx)
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	ax = ax & dx
	SZO = cond(ax)
	C = false
	ax = ax + cx
	SCZO = cond(ax)
	Mem0[ds:0x3D84:word16] = ax
	// succ:  l00BF_1003
l00BF_1003:
	ax = Mem0[ds:0x0480:word16]
	ax = ax - Mem0[ds:0x4D68:word16]
	SCZO = cond(ax)
	cx = si
	cx = cx + 0x0001
	SZO = cond(cx)
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	ax = ax & dx
	SZO = cond(ax)
	C = false
	ax = ax + cx
	SCZO = cond(ax)
	Mem0[ds:0x4BE8:word16] = ax
	goto l00BF_10A7
	// succ:  l00BF_10A7
l00BF_101C:
	ax = Mem0[ds:0x0480:word16]
	ax = ax - Mem0[ds:0x4D68:word16]
	SCZO = cond(ax)
	cx = si
	cx = cx + 0x0001
	SZO = cond(cx)
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	ax = ax & dx
	SZO = cond(ax)
	C = false
	ax = ax + cx
	SCZO = cond(ax)
	Mem0[ds:0x4BE8:word16] = ax
	// succ:  l00BF_1031
l00BF_1031:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l00BF_1084
	// succ:  l00BF_1035 l00BF_1084
l00BF_1035:
	goto l00BF_10A7
	// succ:  l00BF_10A7
l00BF_1038:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l00BF_104C
	// succ:  l00BF_103C l00BF_104C
l00BF_103C:
	SCZO = cond(Mem0[ds:0x4BE8:word16] - 0x0000)
	branch Test(NE,Z) l00BF_108A
	// succ:  l00BF_1043 l00BF_108A
l00BF_1043:
	Mem0[ds:0x4BE8:word16] = 0x0000
	goto l00BF_10A7
	// succ:  l00BF_10A7
l00BF_104C:
	v25 = Mem0[ds:0x3D84:word16] - 0x0001
	Mem0[ds:0x3D84:word16] = v25
	SZO = cond(v25)
	goto l00BF_103C
	// succ:  l00BF_103C
l00BF_1052:
	ax = Mem0[ds:0x495E:word16]
	dx_ax = (int32) ax
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	cl = Mem0[ds:0x4D1D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	cx = cx - ax
	SCZO = cond(cx)
	branch Test(NS,S) l00BF_1066
	// succ:  l00BF_1064 l00BF_1066
l00BF_1064:
	cx = cx - cx
	SCZO = cond(cx)
	// succ:  l00BF_1066
l00BF_1066:
	Mem0[ds:0x3D84:word16] = cx
	ax = Mem0[ds:0x4D68:word16]
	dx_ax = (int32) ax
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	cl = Mem0[ds:0x4D1C:byte]
	ch = ch - ch
	SCZO = cond(ch)
	cx = cx - ax
	SCZO = cond(cx)
	branch Test(NS,S) l00BF_107E
	// succ:  l00BF_107C l00BF_107E
l00BF_107C:
	cx = cx - cx
	SCZO = cond(cx)
	// succ:  l00BF_107E
l00BF_107E:
	Mem0[ds:0x4BE8:word16] = cx
	goto l00BF_10A7
	// succ:  l00BF_10A7
l00BF_1084:
	v23 = Mem0[ds:0x3D84:word16] - 0x0001
	Mem0[ds:0x3D84:word16] = v23
	SZO = cond(v23)
	goto l00BF_10A7
	// succ:  l00BF_10A7
l00BF_108A:
	v24 = Mem0[ds:0x4BE8:word16] - 0x0001
	Mem0[ds:0x4BE8:word16] = v24
	SZO = cond(v24)
	goto l00BF_10A7
	// succ:  l00BF_10A7
l00BF_1090:
	ax = Mem0[ds:0x0482:word16]
	ax = ax - Mem0[ds:0x495E:word16]
	SCZO = cond(ax)
	cx = Mem0[ds:0x3D84:word16]
	cx = cx + 0x0001
	SZO = cond(cx)
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	ax = ax & dx
	SZO = cond(ax)
	C = false
	ax = ax + cx
	SCZO = cond(ax)
	Mem0[ds:0x3D84:word16] = ax
	// succ:  l00BF_10A7
l00BF_10A7:
	ax = Mem0[ds:0x4D68:word16]
	ax = ax + Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	Mem0[ds:0x3CF6:word16] = ax
	ax = Mem0[ds:0x495E:word16]
	ax = ax + Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	Mem0[ds:0x4DDE:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	cl = 0x05
	di = di - Mem0[ds:0x3D84:word16]
	SCZO = cond(di)
	di = di << cl
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	si = si - Mem0[ds:0x4BE8:word16]
	SCZO = cond(si)
	si = si << cl
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScrollWindow(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BE8:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D84:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_0FA0_exit
fn00BF_0FA0_exit:


// fn00BF_1116
// Return size: 4
void fn00BF_1116()
fn00BF_1116_entry:
	// succ:  l00BF_1116
l00BF_1116:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0154
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x032A:word16] = 0x0000
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_1116_exit
fn00BF_1116_exit:


// fn00BF_113E
// Return size: 4
void fn00BF_113E()
fn00BF_113E_entry:
	// succ:  l00BF_113E
l00BF_113E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	dx = Mem0[ss:bp + 0x0008:word16]
	ax = dx
	cl = Mem0[ds:0x4D1C:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax - cx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l00BF_1166
	// succ:  l00BF_1161 l00BF_1166
l00BF_1161:
	si = 0x0002
	goto l00BF_1172
	// succ:  l00BF_1172
l00BF_1166:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l00BF_1170
	// succ:  l00BF_116A l00BF_1170
l00BF_116A:
	si = 0x0001
	goto l00BF_1172
	// succ:  l00BF_1172
l00BF_1170:
	si = si - si
	SCZO = cond(si)
	// succ:  l00BF_1172
l00BF_1172:
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l00BF_1188
	// succ:  l00BF_1183 l00BF_1188
l00BF_1183:
	di = 0x0002
	goto l00BF_1194
	// succ:  l00BF_1194
l00BF_1188:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l00BF_1192
	// succ:  l00BF_118C l00BF_1192
l00BF_118C:
	di = 0x0001
	goto l00BF_1194
	// succ:  l00BF_1194
l00BF_1192:
	di = di - di
	SCZO = cond(di)
	// succ:  l00BF_1194
l00BF_1194:
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si + di
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	ax = Mem0[ds:si + 0x0354:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_113E_exit
fn00BF_113E_exit:


// fn00BF_11AE
// Return size: 4
void fn00BF_11AE()
fn00BF_11AE_entry:
	// succ:  l00BF_11AE
l00BF_11AE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0014
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	cx = ax
	ax = ax - Mem0[ds:0x4D20:word16]
	SCZO = cond(ax)
	branch Test(NS,S) l00BF_11CC
	// succ:  l00BF_11CA l00BF_11CC
l00BF_11CA:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00BF_11CC
l00BF_11CC:
	Mem0[ss:bp - 0x0010:word16] = ax
	dl = Mem0[ds:0x4D1C:byte]
	dh = dh - dh
	SCZO = cond(dh)
	ax = dx
	dx = dx + Mem0[ds:0x4D20:word16]
	SCZO = cond(dx)
	dx = dx + 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - Mem0[ds:0x0480:word16])
	branch Test(LE,SZO) l00BF_11E6
	// succ:  l00BF_11E2 l00BF_11E6
l00BF_11E2:
	dx = Mem0[ds:0x0480:word16]
	// succ:  l00BF_11E6
l00BF_11E6:
	si = cx
	si = si + Mem0[ds:0x4D20:word16]
	SCZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - Mem0[ds:0x0482:word16])
	branch Test(LE,SZO) l00BF_11F7
	// succ:  l00BF_11F3 l00BF_11F7
l00BF_11F3:
	si = Mem0[ds:0x0482:word16]
	// succ:  l00BF_11F7
l00BF_11F7:
	ax = ax - Mem0[ds:0x4D20:word16]
	SCZO = cond(ax)
	branch Test(NS,S) l00BF_11FF
	// succ:  l00BF_11FD l00BF_11FF
l00BF_11FD:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00BF_11FF
l00BF_11FF:
	di = ax
	SCZO = cond(dx - ax)
	branch Test(LE,SZO) l00BF_124D
	// succ:  l00BF_1205 l00BF_124D
l00BF_1205:
	cl = 0x06
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = dx
	ax = ax - di
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x000E:word16] = si
	// succ:  l00BF_1216
l00BF_1216:
	di = Mem0[ss:bp - 0x000E:word16]
	bx = Mem0[ss:bp - 0x0010:word16]
	SCZO = cond(bx - di)
	branch Test(GE,SO) l00BF_1244
	// succ:  l00BF_1220 l00BF_1244
l00BF_1220:
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax + bx
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = di
	ax = ax - bx
	SCZO = cond(ax)
	bx = Mem0[ss:bp - 0x0004:word16]
	dx = ax
	// succ:  l00BF_123A
l00BF_123A:
	v21 = Mem0[ds:bx + 0x0001:byte] | 0x02
	Mem0[ds:bx + 0x0001:byte] = v21
	SZO = cond(Mem0[ds:bx + 0x0001:byte])
	C = false
	bx = bx + 0x0003
	SCZO = cond(bx)
	dx = dx - 0x0001
	SZO = cond(dx)
	branch Test(NE,Z) l00BF_123A
	// succ:  l00BF_1244 l00BF_123A
l00BF_1244:
	v24 = Mem0[ss:bp - 0x0008:word16] + 0x0040
	Mem0[ss:bp - 0x0008:word16] = v24
	SCZO = cond(v24)
	v25 = Mem0[ss:bp - 0x000C:word16] - 0x0001
	Mem0[ss:bp - 0x000C:word16] = v25
	SZO = cond(v25)
	branch Test(NE,Z) l00BF_1216
	// succ:  l00BF_124D l00BF_1216
l00BF_124D:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_11AE_exit
fn00BF_11AE_exit:


// fn00BF_125A
// Return size: 4
void fn00BF_125A()
fn00BF_125A_entry:
	// succ:  l00BF_125A
l00BF_125A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	bx = Mem0[ds:di:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	v12 = Mem0[ds:si + 0x000A:byte] & 0xF7
	Mem0[ds:si + 0x000A:byte] = v12
	SZO = cond(Mem0[ds:si + 0x000A:byte])
	C = false
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x0035:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00BF_12DD
	// succ:  l00BF_128B l00BF_12DD
l00BF_128B:
	bx = ax
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx + 0x0001:byte] - 0x11)
	branch Test(NE,Z) l00BF_12DD
	// succ:  l00BF_1295 l00BF_12DD
l00BF_1295:
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x004E:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00BF_12DD
	// succ:  l00BF_12A5 l00BF_12DD
l00BF_12A5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_06D4 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00BF_17F8 (retsize: 2;)
	sp = sp + 0x0006
	call fn0087_04C4 (retsize: 4;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0087_09DC (retsize: 4;)
	sp = sp + 0x0002
	ax = 0x02DD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00BF_12DD
l00BF_12DD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn00BF_1372 (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00BF_132C
	// succ:  l00BF_12E6 l00BF_132C
l00BF_12E6:
	al = Mem0[ds:si + 0x000A:byte]
	ax = ax & 0x0080
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x0001)
	cx = cx - cx - C
	SCZO = cond(cx)
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	v18 = Mem0[ds:si + 0x000A:byte] | 0x85
	Mem0[ds:si + 0x000A:byte] = v18
	SZO = cond(Mem0[ds:si + 0x000A:byte])
	C = false
	v19 = Mem0[ds:si + 0x000B:byte] & 0xFD
	Mem0[ds:si + 0x000B:byte] = v19
	SZO = cond(Mem0[ds:si + 0x000B:byte])
	C = false
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(EQ,Z) l00BF_1311
	// succ:  l00BF_12FF l00BF_1311
l00BF_12FF:
	bx = Mem0[ds:di:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_07A4 (retsize: 4;)
	sp = sp + 0x000A
	// succ:  l00BF_1311
l00BF_1311:
	al = Mem0[ds:si + 0x001A:byte]
	al = al - 0x0A
	SCZO = cond(al)
	ah = Mem0[ds:si + 0x001B:byte]
	Mem0[ds:si + 0x001A:word16] = ax
	bx = Mem0[ds:di:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn00BF_140C (retsize: 2;)
	sp = sp + 0x0002
	goto l00BF_1366
	// succ:  l00BF_1366
l00BF_132C:
	SZO = cond(Mem0[ds:si + 0x000A:byte] & 0x80)
	C = false
	branch Test(NE,Z) l00BF_1344
	// succ:  l00BF_1332 l00BF_1344
l00BF_1332:
	bx = Mem0[ds:di:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_07A4 (retsize: 4;)
	sp = sp + 0x000A
	// succ:  l00BF_1344
l00BF_1344:
	v20 = Mem0[ds:si + 0x000A:byte] | 0x84
	Mem0[ds:si + 0x000A:byte] = v20
	SZO = cond(Mem0[ds:si + 0x000A:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn018F_340A (retsize: 4;)
	sp = sp + 0x0002
	ax = Mem0[ds:si + 0x001A:word16]
	cx = ax
	al = ah
	cl = cl - 0x0A
	SCZO = cond(cl)
	ch = al
	Mem0[ds:si + 0x001A:word16] = cx
	bx = Mem0[ds:di:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00BF_1366
l00BF_1366:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_125A_exit
fn00BF_125A_exit:


// fn00BF_1372
// Return size: 4
void fn00BF_1372()
fn00BF_1372_entry:
	// succ:  l00BF_1372
l00BF_1372:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = di - di
	SCZO = cond(di)
	SCZO = cond(Mem0[ds:0x4D26:word16] - di)
	branch Test(EQ,Z) l00BF_13AA
	// succ:  l00BF_1389 l00BF_13AA
l00BF_1389:
	si = 0x4D70
	// succ:  l00BF_138C
l00BF_138C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	call fn018F_2C48 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00BF_13A1
	// succ:  l00BF_139A l00BF_13A1
l00BF_139A:
	al = Mem0[ds:si + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = di + ax
	SCZO = cond(di)
	// succ:  l00BF_13A1
l00BF_13A1:
	si = si + 0x0006
	SCZO = cond(si)
	SCZO = cond(si - 0x4D88)
	branch Test(ULT,C) l00BF_138C
	// succ:  l00BF_13AA l00BF_138C
l00BF_13AA:
	Mem0[ss:bp - 0x0006:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn018F_2CBE (retsize: 4;)
	sp = sp + 0x0002
	si = Mem0[ds:0x4D04:word16]
	si = si - ax
	SCZO = cond(si)
	si = si + 0x0009
	SCZO = cond(si)
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	bx = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ds:bx + 0x001A:byte]
	ax = (int16) al
	si = si - ax
	SCZO = cond(si)
	si = si + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(si)
	si = si + Mem0[ds:0x4D10:word16]
	SCZO = cond(si)
	ax = 0x0001
	ax = ax - Mem0[ds:0x4C60:word16]
	SCZO = cond(ax)
	dx_ax = Mem0[ds:0x00A6:word16] *s ax
	SCZO = cond(dx_ax)
	si = si + ax
	SCZO = cond(si)
	SCZO = cond(si - 0x0001)
	branch Test(GE,SO) l00BF_13EB
	Mem0[ss:bp - 0x0006:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn018F_2CBE (retsize: 4;)
	sp = sp + 0x0002
	si = Mem0[ds:0x4D04:word16]
	si = si - ax
	SCZO = cond(si)
	si = si + 0x0009
	SCZO = cond(si)
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	bx = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ds:bx + 0x001A:byte]
	ax = (int16) al
	si = si - ax
	SCZO = cond(si)
	si = si + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(si)
	si = si + Mem0[ds:0x4D10:word16]
	SCZO = cond(si)
	ax = 0x0001
	ax = ax - Mem0[ds:0x4C60:word16]
	SCZO = cond(ax)
	dx_ax = Mem0[ds:0x00A6:word16] *s ax
	SCZO = cond(dx_ax)
	si = si + ax
	SCZO = cond(si)
	SCZO = cond(si - 0x0001)
	branch Test(GE,SO) l00BF_13EB
	// succ:  l00BF_13E8 l00BF_13EB
l00BF_13E8:
	si = 0x0001
	si = 0x0001
	// succ:  l00BF_13EB
l00BF_13EB:
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - si)
	branch Test(GE,SO) l00BF_13FE
	// succ:  l00BF_13F8 l00BF_13FE
l00BF_13F8:
	ax = 0x0001
	goto l00BF_1400
	// succ:  l00BF_1400
l00BF_13FE:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00BF_1400
l00BF_1400:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_1372_exit
fn00BF_1372_exit:


// fn00BF_140C
// Return size: 4
void fn00BF_140C()
fn00BF_140C_entry:
	// succ:  l00BF_140C
l00BF_140C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x0090:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	di = Mem0[ds:0x0092:word16]
	di = di + Mem0[ds:0x0094:word16]
	SCZO = cond(di)
	si = si - si
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:0x0092:word16] - si)
	branch Test(EQ,Z) l00BF_1442
	// succ:  l00BF_1431 l00BF_1442
l00BF_1431:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	di = di + ax
	SCZO = cond(di)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(Mem0[ds:0x0092:word16] - si)
	branch Test(UGT,CZ) l00BF_1431
	// succ:  l00BF_1442 l00BF_1431
l00BF_1442:
	di = di + Mem0[ds:0x4D12:word16]
	SCZO = cond(di)
	SCZO = cond(Mem0[ds:0x4D26:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_147A
	// succ:  l00BF_144D l00BF_147A
l00BF_144D:
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = Mem0[ds:bx:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	si = 0x4D70
	// succ:  l00BF_145C
l00BF_145C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	call fn018F_2C48 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00BF_1471
	// succ:  l00BF_146A l00BF_1471
l00BF_146A:
	al = Mem0[ds:si + 0x0003:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = di + ax
	SCZO = cond(di)
	// succ:  l00BF_1471
l00BF_1471:
	si = si + 0x0006
	SCZO = cond(si)
	SCZO = cond(si - 0x4D88)
	branch Test(ULT,C) l00BF_145C
	// succ:  l00BF_147A l00BF_145C
l00BF_147A:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(GT,SZO) l00BF_1481
	// succ:  l00BF_147E l00BF_1481
l00BF_147E:
	di = 0x0001
	// succ:  l00BF_1481
l00BF_1481:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00BF_149E (retsize: 2;)
	sp = sp + 0x000A
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_140C_exit
fn00BF_140C_exit:


// fn00BF_149E
// Return size: 4
void fn00BF_149E()
fn00BF_149E_entry:
	// succ:  l00BF_149E
l00BF_149E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0106
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x000A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = Mem0[ss:bp + 0x000E:word16]
	bx = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn018F_1C7A (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00BF_1520
	// succ:  l00BF_14D2 l00BF_1520
l00BF_14D2:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_14E2
	// succ:  l00BF_14D8 l00BF_14E2
l00BF_14D8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_3148 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l00BF_14E2
l00BF_14E2:
	ax = bp - 0x0106
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0047
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	bx = Mem0[ss:bp + 0x000E:word16]
	bx = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	goto l00BF_15D7
	// succ:  l00BF_15D7
l00BF_1520:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = bp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_1D44 (retsize: 4;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00BF_1580
	// succ:  l00BF_152F l00BF_1580
l00BF_152F:
	di = 0x0001
	// succ:  l00BF_1532
l00BF_1532:
	ax = Mem0[ss:bp + 0x000C:word16]
	v14 = Mem0[ds:si + 0x0002:word16] - ax
	Mem0[ds:si + 0x0002:word16] = v14
	SCZO = cond(v14)
	SCZO = cond(Mem0[ds:si + 0x0002:word16] - 0x0000)
	branch Test(GT,SZO) l00BF_1586
	// succ:  l00BF_153E l00BF_1586
l00BF_153E:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_1551
	// succ:  l00BF_1544 l00BF_1551
l00BF_1544:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_3148 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l00BF_1551
l00BF_1551:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_1565
	// succ:  l00BF_1557 l00BF_1565
l00BF_1557:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn018F_2D0A (retsize: 4;)
	sp = sp + 0x0002
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1320 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00BF_1565
l00BF_1565:
	bx = Mem0[ss:bp + 0x000E:word16]
	si = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	call fn00BF_15E4 (retsize: 2;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = 0x0001
	goto l00BF_15D4
	// succ:  l00BF_15D4
l00BF_1580:
	di = Mem0[ss:bp - 0x0006:word16]
	goto l00BF_1532
	// succ:  l00BF_1532
l00BF_1586:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_1598
	// succ:  l00BF_158C l00BF_1598
l00BF_158C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_3148 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l00BF_1598
l00BF_1598:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l00BF_15C8
	// succ:  l00BF_159C l00BF_15C8
l00BF_159C:
	ax = bp - 0x0106
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00BF_15C8
l00BF_15C8:
	bx = Mem0[ss:bp + 0x000E:word16]
	bx = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00BF_15D4
l00BF_15D4:
	ax = Mem0[ss:bp - 0x0004:word16]
	// succ:  l00BF_15D7
l00BF_15D7:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_149E_exit
fn00BF_149E_exit:


// fn00BF_15E4
// Return size: 4
void fn00BF_15E4()
fn00BF_15E4_entry:
	// succ:  l00BF_15E4
l00BF_15E4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	bx = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_07A4 (retsize: 4;)
	sp = sp + 0x000A
	bx = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	call fn018F_2A66 (retsize: 4;)
	sp = sp + 0x0002
	bx = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	SCZO = cond(Mem0[ds:di + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_1645
	// succ:  l00BF_1622 l00BF_1645
l00BF_1622:
	bx = Mem0[ds:si:word16]
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	Mem0[ss:bp - 0x0004:word16] = bx
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l00BF_1636
	// succ:  l00BF_162E l00BF_1636
l00BF_162E:
	ax = Mem0[ds:di + 0x0008:word16]
	Mem0[ds:bx:word16] = ax
	goto l00BF_1640
	// succ:  l00BF_1640
l00BF_1636:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	call fn0137_0572 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00BF_1640
l00BF_1640:
	Mem0[ds:di + 0x0008:word16] = 0x0000
	// succ:  l00BF_1645
l00BF_1645:
	al = Mem0[ds:di + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:di + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	bx = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	call fn018F_0000 (retsize: 4;)
	sp = sp + 0x0002
	bx = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	bx = Mem0[ds:si:word16]
	Mem0[ds:bx:word16] = 0x0000
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_15E4_exit
fn00BF_15E4_exit:


// fn00BF_1686
// Return size: 4
void fn00BF_1686()
fn00BF_1686_entry:
	// succ:  l00BF_1686
l00BF_1686:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0018
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0014:word16] = 0x0000
	ax = 0x0258
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_10B8 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0BB0 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00BF_16C2
	// succ:  l00BF_16B3 l00BF_16C2
l00BF_16B3:
	ax = 0x027F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	goto l00BF_17ED
	// succ:  l00BF_17ED
l00BF_16C2:
	SCZO = cond(Mem0[ds:0x4D1C:byte] - 0x00)
	branch Test(EQ,Z) l00BF_16E2
	// succ:  l00BF_16C9 l00BF_16E2
l00BF_16C9:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	cx = ax
	ax = ax - 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = Mem0[ds:0x0480:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - cx)
	branch Test(ULE,CZ) l00BF_16E7
	// succ:  l00BF_16DC l00BF_16E7
l00BF_16DC:
	di = 0x0003
	goto l00BF_16EA
	// succ:  l00BF_16EA
l00BF_16E2:
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	// succ:  l00BF_16E7
l00BF_16E7:
	di = 0x0002
	// succ:  l00BF_16EA
l00BF_16EA:
	SCZO = cond(Mem0[ds:0x4D1D:byte] - 0x00)
	branch Test(EQ,Z) l00BF_1710
	// succ:  l00BF_16F1 l00BF_1710
l00BF_16F1:
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si - 0x0001
	SZO = cond(si)
	cx = Mem0[ds:0x0482:word16]
	cx = cx - 0x0001
	SZO = cond(cx)
	SCZO = cond(cx - ax)
	branch Test(UGT,CZ) l00BF_1708
	// succ:  l00BF_1702 l00BF_1708
l00BF_1702:
	ax = 0x0002
	goto l00BF_170B
	// succ:  l00BF_170B
l00BF_1708:
	ax = 0x0003
	// succ:  l00BF_170B
l00BF_170B:
	Mem0[ss:bp - 0x000A:word16] = ax
	goto l00BF_1717
	// succ:  l00BF_1717
l00BF_1710:
	si = si - si
	SCZO = cond(si)
	Mem0[ss:bp - 0x000A:word16] = 0x0002
	// succ:  l00BF_1717
l00BF_1717:
	al = Mem0[ds:0x4CED:byte]
	cl = 0x02
	ax = (int16) al
	dx = dx_ax % cl
	ax = dx_ax / cl
	SCZO = cond(ax)
	ax = (int16) al
	ax = ax + 0x0028
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0010:word16] = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(GT,SZO) l00BF_172D
	// succ:  l00BF_172A l00BF_172D
l00BF_172A:
	goto l00BF_17DE
	// succ:  l00BF_17DE
l00BF_172D:
	cl = 0x06
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + si
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x0012:word16] = di
	Mem0[ss:bp - 0x000E:word16] = si
	// succ:  l00BF_1748
l00BF_1748:
	dx = Mem0[ss:bp - 0x000C:word16]
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0000)
	branch Test(LE,SZO) l00BF_17CE
	// succ:  l00BF_1756 l00BF_17CE
l00BF_1756:
	si = dx
	di = Mem0[ss:bp - 0x0006:word16]
	// succ:  l00BF_175B
l00BF_175B:
	al = Mem0[ds:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2210 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - 0x000B)
	branch Test(NE,Z) l00BF_1788
	// succ:  l00BF_176A l00BF_1788
l00BF_176A:
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l00BF_1788
	// succ:  l00BF_1770 l00BF_1788
l00BF_1770:
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - Mem0[ss:bp - 0x0010:word16])
	branch Test(UGE,C) l00BF_17C5
	// succ:  l00BF_177E l00BF_17C5
l00BF_177E:
	v20 = Mem0[ds:si + 0x0001:byte] & 0xEF
	Mem0[ds:si + 0x0001:byte] = v20
	SZO = cond(Mem0[ds:si + 0x0001:byte])
	C = false
	ax = 0x023B
	goto l00BF_17A6
	// succ:  l00BF_17A6
l00BF_1788:
	SCZO = cond(Mem0[ds:si:byte] - 0x19)
	branch Test(NE,Z) l00BF_17C5
	// succ:  l00BF_178D l00BF_17C5
l00BF_178D:
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - Mem0[ss:bp - 0x0010:word16])
	branch Test(UGE,C) l00BF_17C5
	// succ:  l00BF_179B l00BF_17C5
l00BF_179B:
	ax = Mem0[ds:si:word16]
	al = al & 0x10
	SZO = cond(al)
	C = false
	al = al | 0x10
	SZO = cond(al)
	C = false
	Mem0[ds:si:word16] = ax
	ax = 0x023C
	// succ:  l00BF_17A6
l00BF_17A6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = Mem0[ss:bp - 0x000E:word16]
	ax = ax + di
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0014:word16] = 0x0001
	// succ:  l00BF_17C5
l00BF_17C5:
	si = si + 0x0003
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - di)
	branch Test(GT,SZO) l00BF_175B
	// succ:  l00BF_17CE l00BF_175B
l00BF_17CE:
	v21 = Mem0[ss:bp - 0x000C:word16] + 0x00C0
	Mem0[ss:bp - 0x000C:word16] = v21
	SCZO = cond(v21)
	v22 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v22
	SZO = cond(v22)
	v23 = Mem0[ss:bp - 0x0012:word16] - 0x0001
	Mem0[ss:bp - 0x0012:word16] = v23
	SZO = cond(v23)
	branch Test(EQ,Z) l00BF_17DE
	v24 = Mem0[ss:bp - 0x000C:word16] + 0x00C0
	Mem0[ss:bp - 0x000C:word16] = v24
	SCZO = cond(v24)
	v25 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v25
	SZO = cond(v25)
	v26 = Mem0[ss:bp - 0x0012:word16] - 0x0001
	Mem0[ss:bp - 0x0012:word16] = v26
	SZO = cond(v26)
	branch Test(EQ,Z) l00BF_17DE
	// succ:  l00BF_17DB l00BF_17DE
l00BF_17DB:
	goto l00BF_1748
	// succ:  l00BF_1748
l00BF_17DE:
	SCZO = cond(Mem0[ss:bp - 0x0014:word16] - 0x0000)
	branch Test(EQ,Z) l00BF_17ED
	// succ:  l00BF_17E4 l00BF_17ED
l00BF_17E4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00BF_17ED
l00BF_17ED:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_1686_exit
fn00BF_1686_exit:


// fn00BF_17F8
// Return size: 4
void fn00BF_17F8()
fn00BF_17F8_entry:
	// succ:  l00BF_17F8
l00BF_17F8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cl = 0x06
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bl = Mem0[ds:bx + 0x0CE4:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l00BF_182F
	// succ:  l00BF_1820 l00BF_182F
l00BF_1820:
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	di = Mem0[ds:bx + 0x0002:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l00BF_183C
	// succ:  l00BF_182F l00BF_183C
l00BF_182F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn0087_07D0 (retsize: 4;)
	sp = sp + 0x0004
	di = ax
	// succ:  l00BF_183C
l00BF_183C:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l00BF_1854
	// succ:  l00BF_1840 l00BF_1854
l00BF_1840:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00BF_185C
	// succ:  l00BF_1854 l00BF_185C
l00BF_1854:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	call fn0137_0066 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l00BF_185C
l00BF_185C:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00BF_17F8_exit
fn00BF_17F8_exit:


// fn00CF_0000
// Return size: 4
void fn00CF_0000()
fn00CF_0000_entry:
	// succ:  l00CF_0000
l00CF_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0030
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4958:word16]
	ax = bp - 0x0030
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BeginPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00CF_0027
	// succ:  l00CF_0024 l00CF_0027
l00CF_0024:
	goto l00CF_00BF
	// succ:  l00CF_00BF
l00CF_0027:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4958:word16]
	ax = bp - 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = 0x001E
	ax = si
	ax = ax - Mem0[ds:0x48C0:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x4CBA:word16]
	SCZO = cond(ax)
	dx_ax = Mem0[ds:0x4134:word16] *s ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GT,SZO) l00CF_0054
	// succ:  l00CF_0050 l00CF_0054
l00CF_0050:
	dx = ax
	goto l00CF_006F
	// succ:  l00CF_006F
l00CF_0054:
	bx = 0x003C
	dx = ax
	// succ:  l00CF_0059
l00CF_0059:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(LE,SZO) l00CF_006F
	// succ:  l00CF_005D l00CF_006F
l00CF_005D:
	si = si - 0x0001
	SZO = cond(si)
	bx = bx - 0x0001
	SZO = cond(bx)
	bx = bx - 0x0001
	SZO = cond(bx)
	SCZO = cond(Mem0[ds:bx + 0x3D2A:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_006B
	// succ:  l00CF_0067 l00CF_006B
l00CF_0067:
	dx = dx - Mem0[ds:bx + 0x4BEC:word16]
	SCZO = cond(dx)
	// succ:  l00CF_006B
l00CF_006B:
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(GT,SZO) l00CF_0059
	// succ:  l00CF_006F l00CF_0059
l00CF_006F:
	Mem0[ss:bp - 0x000E:word16] = dx
	SCZO = cond(si - 0x001E)
	branch Test(GE,SO) l00CF_00B1
	Mem0[ss:bp - 0x000E:word16] = dx
	SCZO = cond(si - 0x001E)
	branch Test(GE,SO) l00CF_00B1
	// succ:  l00CF_0077 l00CF_00B1
l00CF_0077:
	di = si
	di = di << 0x0001
	SCZO = cond(di)
	Mem0[ss:bp - 0x0004:word16] = si
	di = si
	di = di << 0x0001
	SCZO = cond(di)
	Mem0[ss:bp - 0x0004:word16] = si
	// succ:  l00CF_007E
l00CF_007E:
	si = Mem0[ds:di + 0x3D2A:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l00CF_00AA
	// succ:  l00CF_0086 l00CF_00AA
l00CF_0086:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = Mem0[ds:si:word16]
	bx = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	DrawText(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	ax = Mem0[ds:di + 0x4BEC:word16]
	v19 = Mem0[ss:bp - 0x000E:word16] + ax
	Mem0[ss:bp - 0x000E:word16] = v19
	SCZO = cond(v19)
	// succ:  l00CF_00AA
l00CF_00AA:
	di = di + 0x0001
	SZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - 0x003C)
	branch Test(LT,SO) l00CF_007E
	// succ:  l00CF_00B1 l00CF_007E
l00CF_00B1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4958:word16]
	ax = bp - 0x0030
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4958:word16]
	ax = bp - 0x0030
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	// succ:  l00CF_00BF
l00CF_00BF:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00CF_0000_exit
fn00CF_0000_exit:


// fn00CF_00CA
// Return size: 4
void fn00CF_00CA()
fn00CF_00CA_entry:
	// succ:  l00CF_00CA
l00CF_00CA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x02)
	branch Test(NE,Z) l00CF_00FB
	// succ:  l00CF_00E0 l00CF_00FB
l00CF_00E0:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_00FB
	// succ:  l00CF_00E6 l00CF_00FB
l00CF_00E6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	// succ:  l00CF_00FB
l00CF_00FB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn0107_523A (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00CF_010D
	// succ:  l00CF_010A l00CF_010D
l00CF_010A:
	goto l00CF_01FD
	// succ:  l00CF_01FD
l00CF_010D:
	SCZO = cond(Mem0[ds:0x3D2A:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_011D
	// succ:  l00CF_0114 l00CF_011D
l00CF_0114:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D2A:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l00CF_011D
l00CF_011D:
	ax = 0x3D2A
	di = ax
	si = 0x3D2C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0x001D
	// succ:  l00CF_012A
l00CF_012A:
	branch cx == 0x0000 l00CF_012C
	// succ:  l00CF_012A_1 l00CF_012C
l00CF_012A_1:
	v15 = Mem0[si:word16]
	Mem0[di:word16] = v15
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l00CF_012A
	// succ:  l00CF_012A
l00CF_012C:
	ax = Mem0[ss:bp - 0x0006:word16]
	Mem0[ds:0x3D64:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4958:word16]
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00CF_019E
	// succ:  l00CF_0142 l00CF_019E
l00CF_0142:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4958:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp + 0x0008:word16]
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l00CF_0166
l00CF_0166:
	branch cx == 0x0000 l00CF_0168
	// succ:  l00CF_0166_1 l00CF_0168
l00CF_0166_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l00CF_0166
	// succ:  l00CF_0168 l00CF_0166
l00CF_0168:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0450
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	DrawText(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	ax = 0x4BEC
	di = ax
	si = 0x4BEE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0x001D
	// succ:  l00CF_0187
l00CF_0187:
	branch cx == 0x0000 l00CF_0189
	// succ:  l00CF_0187_2 l00CF_0189
l00CF_0187_2:
	v17 = Mem0[si:word16]
	Mem0[di:word16] = v17
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l00CF_0187
	// succ:  l00CF_0187
l00CF_0189:
	ax = Mem0[ss:bp - 0x0008:word16]
	Mem0[ds:0x4C26:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4958:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l00CF_01AD
	// succ:  l00CF_01AD
l00CF_019E:
	ax = 0x4BEC
	di = ax
	si = 0x4BEE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0x001D
	// succ:  l00CF_01AB
l00CF_01AB:
	branch cx == 0x0000 l00CF_01AD
	// succ:  l00CF_01AB_1 l00CF_01AD
l00CF_01AB_1:
	v18 = Mem0[si:word16]
	Mem0[di:word16] = v18
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l00CF_01AB
	// succ:  l00CF_01AB
l00CF_01AD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4958:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0008:word16]
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % Mem0[ds:0x4134:word16]
	ax = dx_ax /u Mem0[ds:0x4134:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x48C0:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	ax = ax + Mem0[ds:0x4CBA:word16]
	SCZO = cond(ax)
	ax = ax - 0x001E
	SCZO = cond(ax)
	dx_ax = Mem0[ds:0x4134:word16] *s ax
	SCZO = cond(dx_ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScrollWindow(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4958:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x001E
	cx = cx - Mem0[ds:0x48C0:word16]
	SCZO = cond(cx)
	Mem0[ds:0x4CBA:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4958:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00CF_01FD
l00CF_01FD:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00CF_00CA_exit
fn00CF_00CA_exit:


// fn00CF_020A
// Return size: 4
void fn00CF_020A()
fn00CF_020A_entry:
	// succ:  l00CF_020A
l00CF_020A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0012
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00CF_028C
	// succ:  l00CF_0229 l00CF_028C
l00CF_0229:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = Mem0[ss:bp - 0x000E:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	di = di - di
	SCZO = cond(di)
	Mem0[ss:bp - 0x0004:word16] = di
	si = di
	// succ:  l00CF_0241
l00CF_0241:
	cx = Mem0[ds:si + 0x3D2A:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(EQ,Z) l00CF_027A
	// succ:  l00CF_0249 l00CF_027A
l00CF_0249:
	bx = cx
	di = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	ax = Mem0[ss:bp - 0x0008:word16]
	Mem0[ss:bp - 0x000E:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	ax = di + 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:di:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0450
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	DrawText(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	ax = Mem0[ss:bp - 0x000C:word16]
	Mem0[ds:si + 0x4BEC:word16] = ax
	// succ:  l00CF_027A
l00CF_027A:
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x003C)
	branch Test(LT,SO) l00CF_0241
	// succ:  l00CF_0281 l00CF_0241
l00CF_0281:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l00CF_028C
l00CF_028C:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00CF_020A_exit
fn00CF_020A_exit:


// fn00CF_0298
// Return size: 4
void fn00CF_0298()
fn00CF_0298_entry:
	// succ:  l00CF_0298
l00CF_0298:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0102
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn00CF_00CA (retsize: 2;)
	sp = sp + 0x0004
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00CF_0298_exit
fn00CF_0298_exit:


// fn00CF_030C
// Return size: 4
void fn00CF_030C()
fn00CF_030C_entry:
	// succ:  l00CF_030C
l00CF_030C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0080
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BEA:word16]
	ax = bp - 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = 0x0018
	dx_ax = Mem0[ds:0x4132:word16] *u ax
	SCZO = cond(dx_ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = Mem0[ds:0x4132:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax - cx
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BEA:word16]
	ax = bp - 0x0030
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BeginPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00CF_0369
	// succ:  l00CF_0366 l00CF_0369
l00CF_0366:
	goto l00CF_0574
	// succ:  l00CF_0574
l00CF_0369:
	ax = Mem0[ss:bp - 0x002A:word16]
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % Mem0[ds:0x4134:word16]
	ax = dx_ax /u Mem0[ds:0x4134:word16]
	SCZO = cond(ax)
	si = ax
	cx = ax
	ax = Mem0[ss:bp - 0x0026:word16]
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % Mem0[ds:0x4134:word16]
	ax = dx_ax /u Mem0[ds:0x4134:word16]
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	ax = ax - 0x0005
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	ax = ax & dx
	SZO = cond(ax)
	C = false
	ax = ax + 0x0005
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(ax - cx)
	branch Test(GT,SZO) l00CF_0394
	// succ:  l00CF_0391 l00CF_0394
l00CF_0391:
	goto l00CF_0566
	// succ:  l00CF_0566
l00CF_0394:
	bx = Mem0[ds:0x4152:word16]
	al = Mem0[ds:bx + 0x0368 + si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00CF_03BE
	// succ:  l00CF_03A2 l00CF_03BE
l00CF_03A2:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l00CF_03A8
	// succ:  l00CF_03A5 l00CF_03A8
l00CF_03A5:
	goto l00CF_042E
	// succ:  l00CF_042E
l00CF_03A8:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l00CF_03AE
	// succ:  l00CF_03AB l00CF_03AE
l00CF_03AB:
	goto l00CF_0444
	// succ:  l00CF_0444
l00CF_03AE:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l00CF_03B4
	// succ:  l00CF_03B1 l00CF_03B4
l00CF_03B1:
	goto l00CF_046A
	// succ:  l00CF_046A
l00CF_03B4:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l00CF_03BA
	// succ:  l00CF_03B7 l00CF_03BA
l00CF_03B7:
	goto l00CF_04AE
	// succ:  l00CF_04AE
l00CF_03BA:
	goto l00CF_051D
	// succ:  l00CF_051D
l00CF_03BE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0504:word16]
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_05B8 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00CF_03FE
	// succ:  l00CF_03CF l00CF_03FE
l00CF_03CF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0506:word16]
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_05B8 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00CF_03FE
	// succ:  l00CF_03E0 l00CF_03FE
l00CF_03E0:
	ax = Mem0[ds:0x4CFE:word16]
	cx = 0x0005
	dx_ax = (word32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ds:0x4CFC:word16])
	branch Test(GT,SZO) l00CF_03F5
	// succ:  l00CF_03EF l00CF_03F5
l00CF_03EF:
	SCZO = cond(Mem0[ds:0x4CFC:word16] - cx)
	branch Test(GT,SZO) l00CF_040D
	// succ:  l00CF_03F5 l00CF_040D
l00CF_03F5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0030:word16]
	ax = 0x00FF
	goto l00CF_0404
	// succ:  l00CF_0404
l00CF_03FE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0030:word16]
	ax = 0xFF00
	// succ:  l00CF_0404
l00CF_0404:
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetTextColor(Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0006
	// succ:  l00CF_040D
l00CF_040D:
	ax = bp - 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0133
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CFC:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CFE:word16]
	// succ:  l00CF_0421
l00CF_0421:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00CF_0423
l00CF_0423:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l00CF_0424
l00CF_0424:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	goto l00CF_051D
	// succ:  l00CF_051D
l00CF_042E:
	ax = bp - 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x01AD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D00:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D02:word16]
	goto l00CF_0421
	// succ:  l00CF_0421
l00CF_0444:
	ax = bp - 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0066
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x013B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0064
	dx_ax = Mem0[ds:0x4D14:word16] *u ax
	SCZO = cond(dx_ax)
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % Mem0[ds:0x4D16:word16]
	ax = dx_ax /u Mem0[ds:0x4D16:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x2710
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % Mem0[ds:0x4D18:word16]
	ax = dx_ax /u Mem0[ds:0x4D18:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l00CF_0421
	// succ:  l00CF_0421
l00CF_046A:
	ax = bp - 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0065
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x013F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4C52:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4C53:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4C54:byte]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	cl = Mem0[ds:0x4C55:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4C56:byte]
	ah = ah - ah
	SCZO = cond(ah)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	cl = Mem0[ds:0x4C57:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	goto l00CF_0424
	// succ:  l00CF_0424
l00CF_04AE:
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_0510
	// succ:  l00CF_04B5 l00CF_0510
l00CF_04B5:
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0015)
	branch Test(EQ,Z) l00CF_0510
	// succ:  l00CF_04BC l00CF_0510
l00CF_04BC:
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0007)
	branch Test(NE,Z) l00CF_04C8
	// succ:  l00CF_04C3 l00CF_04C8
l00CF_04C3:
	ax = 0x0348
	goto l00CF_0513
	// succ:  l00CF_0513
l00CF_04C8:
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0001)
	branch Test(EQ,Z) l00CF_050A
	// succ:  l00CF_04CF l00CF_050A
l00CF_04CF:
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0008)
	branch Test(EQ,Z) l00CF_050A
	// succ:  l00CF_04D6 l00CF_050A
l00CF_04D6:
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0007)
	branch Test(GE,SO) l00CF_04F6
	// succ:  l00CF_04DD l00CF_04F6
l00CF_04DD:
	ax = bp - 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0349
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x0096:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	// succ:  l00CF_04EE
l00CF_04EE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l00CF_0423
	// succ:  l00CF_0423
l00CF_04F6:
	ax = bp - 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x02A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x0096:word16]
	ax = ax - 0x0009
	SCZO = cond(ax)
	goto l00CF_04EE
	// succ:  l00CF_04EE
l00CF_050A:
	ax = 0x0346
	goto l00CF_0513
	// succ:  l00CF_0513
l00CF_0510:
	ax = 0x0345
	// succ:  l00CF_0513
l00CF_0513:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00CF_051D
l00CF_051D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0030:word16]
	ax = Mem0[ds:0x4132:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4134:word16]
	dx_ax = si *s ax
	SCZO = cond(dx_ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l00CF_053A
l00CF_053A:
	branch cx == 0x0000 l00CF_053C
	// succ:  l00CF_053A_1 l00CF_053C
l00CF_053A_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l00CF_053A
	// succ:  l00CF_053C l00CF_053A
l00CF_053C:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	TabbedTextOut(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0030:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetTextColor(Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0006
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - si)
	branch Test(LE,SZO) l00CF_0566
	// succ:  l00CF_0563 l00CF_0566
l00CF_0563:
	goto l00CF_0394
	// succ:  l00CF_0394
l00CF_0566:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BEA:word16]
	ax = bp - 0x0030
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	// succ:  l00CF_0574
l00CF_0574:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00CF_030C_exit
fn00CF_030C_exit:


// fn00CF_057E
// Return size: 4
void fn00CF_057E()
fn00CF_057E_entry:
	// succ:  l00CF_057E
l00CF_057E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4BEA:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_05E7
	// succ:  l00CF_0593 l00CF_05E7
l00CF_0593:
	bx = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx - 0xFFFF)
	branch Test(NE,Z) l00CF_05A4
	// succ:  l00CF_059B l00CF_05A4
l00CF_059B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BEA:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l00CF_05DD
	// succ:  l00CF_05DD
l00CF_05A4:
	al = Mem0[ds:bx + 0x036E:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	SCZO = cond(si - 0x00FE)
	branch Test(EQ,Z) l00CF_05E7
	// succ:  l00CF_05B2 l00CF_05E7
l00CF_05B2:
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si
	ax = ax - Mem0[ds:0x4152:word16]
	SCZO = cond(ax)
	dx_ax = Mem0[ds:0x4134:word16] *s ax
	SCZO = cond(dx_ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4128:word16]
	cx = Mem0[ds:0x4134:word16]
	cx = cx + ax
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BEA:word16]
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	// succ:  l00CF_05DD
l00CF_05DD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l00CF_05E7
l00CF_05E7:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00CF_057E_exit
fn00CF_057E_exit:


// fn00CF_05F2
// Return size: 4
void fn00CF_05F2()
fn00CF_05F2_entry:
	// succ:  l00CF_05F2
l00CF_05F2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = 0x3D2A
	di = Mem0[ss:bp - 0x0004:word16]
	// succ:  l00CF_0607
l00CF_0607:
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_0617
	// succ:  l00CF_060C l00CF_0617
l00CF_060C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:si:word16] = 0x0000
	// succ:  l00CF_0617
l00CF_0617:
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x3D66)
	branch Test(ULT,C) l00CF_0607
	// succ:  l00CF_061F l00CF_0607
l00CF_061F:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00CF_05F2_exit
fn00CF_05F2_exit:


// fn00CF_062A
// Return size: 4
void fn00CF_062A()
fn00CF_062A_entry:
	// succ:  l00CF_062A
l00CF_062A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x4136:word16] - 0x0000)
	branch Test(NE,Z) l00CF_0647
	// succ:  l00CF_063E l00CF_0647
l00CF_063E:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00CF_0647
l00CF_0647:
	ax = 0x015C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_0298 (retsize: 2;)
	sp = sp + 0x0004
	ax = Mem0[ds:0x3D74:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x032A:word16] = 0x001A
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0252 (retsize: 4;)
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00CF_062A_exit
fn00CF_062A_exit:


// fn00CF_0674
// Return size: 4
void fn00CF_0674()
fn00CF_0674_entry:
	// succ:  l00CF_0674
l00CF_0674:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0110
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x000A:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x000E:word16] = ax
	ax = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ds:0x4BE8:word16] - ax)
	branch Test(ULE,CZ) l00CF_06AD
	// succ:  l00CF_06AA l00CF_06AD
l00CF_06AA:
	goto l00CF_0934
	// succ:  l00CF_0934
l00CF_06AD:
	ax = Mem0[ds:0x3CF6:word16]
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - ax)
	branch Test(ULT,C) l00CF_06B8
	// succ:  l00CF_06B5 l00CF_06B8
l00CF_06B5:
	goto l00CF_0934
	// succ:  l00CF_0934
l00CF_06B8:
	ax = Mem0[ds:0x3D84:word16]
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - ax)
	branch Test(UGE,C) l00CF_06C3
	// succ:  l00CF_06C0 l00CF_06C3
l00CF_06C0:
	goto l00CF_0934
	// succ:  l00CF_0934
l00CF_06C3:
	ax = Mem0[ds:0x4DDE:word16]
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - ax)
	branch Test(ULT,C) l00CF_06CE
	// succ:  l00CF_06CB l00CF_06CE
l00CF_06CB:
	goto l00CF_0934
	// succ:  l00CF_0934
l00CF_06CE:
	ReleaseCapture()
	Mem0[ds:0x0098:word16] = 0x0000
	cl = 0x06
	si = Mem0[ss:bp + 0x0008:word16]
	si = si << cl
	SCZO = cond(si)
	si = si + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(si)
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0CE2
	SCZO = cond(si)
	Mem0[ss:bp - 0x0110:word16] = si
	al = Mem0[ds:si + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00CF_070D
	// succ:  l00CF_06FD l00CF_070D
l00CF_06FD:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4960:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	// succ:  l00CF_070D
l00CF_070D:
	bx = Mem0[ss:bp - 0x0110:word16]
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x02)
	C = false
	branch Test(NE,Z) l00CF_071A
	// succ:  l00CF_0717 l00CF_071A
l00CF_0717:
	goto l00CF_0839
	// succ:  l00CF_0839
l00CF_071A:
	Mem0[ss:bp - 0x000A:word16] = 0x0001
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x022F
	SZO = cond(ax)
	C = false
	ax = ax + 0x015D
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_0298 (retsize: 2;)
	sp = sp + 0x0004
	al = Mem0[ds:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2210 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - 0x000B)
	branch Test(NE,Z) l00CF_0762
	// succ:  l00CF_0742 l00CF_0762
l00CF_0742:
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l00CF_0750
	// succ:  l00CF_0748 l00CF_0750
l00CF_0748:
	di = Mem0[ds:0x03F0:word16]
	goto l00CF_07FF
	// succ:  l00CF_07FF
l00CF_0750:
	bx = Mem0[ss:bp - 0x0004:word16]
	bl = Mem0[ds:bx + 0x0004:byte]
	bx = bx & 0x007F
	SZO = cond(bx)
	C = false
	bx = bx << 0x0001
	SCZO = cond(bx)
	di = Mem0[ds:bx + 0x0444:word16]
	goto l00CF_07FF
	// succ:  l00CF_07FF
l00CF_0762:
	al = Mem0[ds:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2210 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00CF_0784
	// succ:  l00CF_0773 l00CF_0784
l00CF_0773:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x0374:word16]
	Mem0[ss:bp - 0x000C:word16] = ax
	di = ax
	goto l00CF_07FF
	// succ:  l00CF_07FF
l00CF_0784:
	Mem0[ss:bp - 0x0008:word16] = si
	bx = si
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_21A8 (retsize: 4;)
	sp = sp + 0x0002
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l00CF_07A4
	// succ:  l00CF_0799 l00CF_07A4
l00CF_0799:
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	di = Mem0[ds:bx + 0x03EC:word16]
	goto l00CF_07FF
	// succ:  l00CF_07FF
l00CF_07A4:
	bx = Mem0[ss:bp - 0x0008:word16]
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_21CE (retsize: 4;)
	sp = sp + 0x0002
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l00CF_07FF
	// succ:  l00CF_07B7 l00CF_07FF
l00CF_07B7:
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	di = Mem0[ds:bx + 0x03B4:word16]
	SCZO = cond(di - 0x038D)
	branch Test(NE,Z) l00CF_07FF
	// succ:  l00CF_07C5 l00CF_07FF
l00CF_07C5:
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0000)
	branch Test(NE,Z) l00CF_07FF
	// succ:  l00CF_07CC l00CF_07FF
l00CF_07CC:
	bx = Mem0[ss:bp - 0x0008:word16]
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0067
	SCZO = cond(ax)
	branch Test(EQ,Z) l00CF_07EA
	// succ:  l00CF_07D8 l00CF_07EA
l00CF_07D8:
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l00CF_07F0
	// succ:  l00CF_07DC l00CF_07F0
l00CF_07DC:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l00CF_07F6
	// succ:  l00CF_07DF l00CF_07F6
l00CF_07DF:
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l00CF_07FC
	// succ:  l00CF_07E3 l00CF_07FC
l00CF_07E3:
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l00CF_07FC
	// succ:  l00CF_07E7 l00CF_07FC
l00CF_07E7:
	goto l00CF_07FF
	// succ:  l00CF_07FF
l00CF_07EA:
	di = 0x0273
	goto l00CF_07FF
	// succ:  l00CF_07FF
l00CF_07F0:
	di = 0x0274
	goto l00CF_07FF
	// succ:  l00CF_07FF
l00CF_07F6:
	di = 0x02C7
	goto l00CF_07FF
	// succ:  l00CF_07FF
l00CF_07FC:
	di = 0x0406
	// succ:  l00CF_07FF
l00CF_07FF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_0298 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_0839
	// succ:  l00CF_080D l00CF_0839
l00CF_080D:
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_081D
	// succ:  l00CF_0816 l00CF_081D
l00CF_0816:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0002:word16]
	sp = sp - 0x0002
	call fn00CF_0948 (retsize: 2;)
	sp = sp + 0x0002
l00CF_081D:
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_0839
	// succ:  l00CF_0826 l00CF_0839
l00CF_0826:
	al = Mem0[ds:bx + 0x0005:byte]
	al = al & 0xFC
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x2C)
	branch Test(NE,Z) l00CF_0839
	// succ:  l00CF_082F l00CF_0839
l00CF_082F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_0298 (retsize: 2;)
	sp = sp + 0x0004
l00CF_0839:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l00CF_0842
	// succ:  l00CF_083F l00CF_0842
l00CF_083F:
	goto l00CF_08EC
	// succ:  l00CF_08EC
l00CF_0842:
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l00CF_084D
	// succ:  l00CF_084A l00CF_084D
l00CF_084A:
	goto l00CF_08EC
	// succ:  l00CF_08EC
l00CF_084D:
	bx = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1628 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00CF_0866
	// succ:  l00CF_0863 l00CF_0866
l00CF_0863:
	goto l00CF_08EC
	// succ:  l00CF_08EC
l00CF_0866:
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0000)
	branch Test(NE,Z) l00CF_0880
	// succ:  l00CF_086C l00CF_0880
l00CF_086C:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x022E
	SZO = cond(ax)
	C = false
	ax = ax + 0x015D
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_0298 (retsize: 2;)
	sp = sp + 0x0004
l00CF_0880:
	bx = Mem0[ss:bp - 0x0004:word16]
	bx = Mem0[ds:bx:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x0002:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	dx_ax = (int32) ax
	dx = dx_ax % Mem0[ds:bx + 0x0004:word16]
	ax = dx_ax / Mem0[ds:bx + 0x0004:word16]
	SCZO = cond(ax)
	si = ax
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	Mem0[ss:bp - 0x000A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0107_5150 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00CF_08CA
	// succ:  l00CF_08B6 l00CF_08CA
l00CF_08B6:
	ax = bp - 0x010E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x006E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	bx = si
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0474:word16]
	goto l00CF_08DA
	// succ:  l00CF_08DA
l00CF_08CA:
	ax = bp - 0x010E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0067
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	si = si << 0x0001
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0474:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	// succ:  l00CF_08DA
l00CF_08DA:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_00CA (retsize: 2;)
	sp = sp + 0x0004
l00CF_08EC:
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0000)
	branch Test(NE,Z) l00CF_08FD
	// succ:  l00CF_08F2 l00CF_08FD
l00CF_08F2:
	ax = 0x01CA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_0298 (retsize: 2;)
	sp = sp + 0x0004
l00CF_08FD:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_0911
	// succ:  l00CF_0903 l00CF_0911
l00CF_0903:
	bx = Mem0[ss:bp - 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4960:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00CF_0911
l00CF_0911:
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x032A:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x4136:word16] - 0x0000)
	branch Test(NE,Z) l00CF_093C
	// succ:  l00CF_092A l00CF_093C
l00CF_092A:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l00CF_093C
	// succ:  l00CF_093C
l00CF_0934:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBeep(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00CF_093C
l00CF_093C:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00CF_0674_exit
fn00CF_0674_exit:


// fn00CF_0948
// Return size: 4
void fn00CF_0948()
fn00CF_0948_entry:
	// succ:  l00CF_0948
l00CF_0948:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0106
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = di - di
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	SCZO = cond(Mem0[ds:si + 0x0024:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_099D
	// succ:  l00CF_096A l00CF_099D
l00CF_096A:
	dx = si + 0x002B
	Mem0[ss:bp - 0x0004:word16] = dx
	Mem0[ss:bp - 0x0006:word16] = si
	si = dx
	// succ:  l00CF_0975
l00CF_0975:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	ax = bp - 0x0106
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x0106
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_00CA (retsize: 2;)
	sp = sp + 0x0004
	si = si + 0x0005
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	bx = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(Mem0[ds:bx + 0x0024:word16] - di)
	branch Test(UGT,CZ) l00CF_0975
	// succ:  l00CF_099D l00CF_0975
l00CF_099D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00CF_0948_exit
fn00CF_0948_exit:


// fn00CF_09B2
// Return size: 4
void fn00CF_09B2()
fn00CF_09B2_entry:
	// succ:  l00CF_09B2
l00CF_09B2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0010
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = bp - 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn00CF_0A66 (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	di = Mem0[ds:0x4132:word16]
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	ax = dx
	dx = dx - dx
	SCZO = cond(dx)
	si = ax
	si = si + Mem0[ds:0x4134:word16]
	SCZO = cond(si)
	ax = Mem0[ss:bp + 0x000A:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax + di
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ss:bp - 0x000C:word16])
	branch Test(ULE,CZ) l00CF_0A05
	// succ:  l00CF_09FD l00CF_0A05
l00CF_09FD:
	ax = Mem0[ss:bp - 0x000C:word16]
	ax = ax - di
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	// succ:  l00CF_0A05
l00CF_0A05:
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - si)
	branch Test(ULE,CZ) l00CF_0A12
	// succ:  l00CF_0A0A l00CF_0A12
l00CF_0A0A:
	cx = Mem0[ss:bp + 0x000C:word16]
	cx = cx - si
	SCZO = cond(cx)
	goto l00CF_0A18
	// succ:  l00CF_0A18
l00CF_0A12:
	cx = Mem0[ss:bp + 0x000C:word16]
	cx = cx + 0x0010
	SCZO = cond(cx)
	// succ:  l00CF_0A18
l00CF_0A18:
	ax = 0x00FC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	dx = 0x5680
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	Mem0[ds:0x4EB8:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00CF_0A59
	// succ:  l00CF_0A44 l00CF_0A59
l00CF_0A44:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BringWindowToTop(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB8:word16]
	SetCapture(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x0098:word16] = 0x0005
	// succ:  l00CF_0A59
l00CF_0A59:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00CF_09B2_exit
fn00CF_09B2_exit:


// fn00CF_0A66
// Return size: 4
void fn00CF_0A66()
fn00CF_0A66_entry:
	// succ:  l00CF_0A66
l00CF_0A66:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x011C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = 0x4C2A
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x001A:word16] = ax
	Mem0[ss:bp - 0x0018:word16] = ax
	Mem0[ss:bp - 0x0012:word16] = ax
	Mem0[ss:bp - 0x0014:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x000C:word16] = ax
	cl = 0x06
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	Mem0[ss:bp - 0x011C:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l00CF_0ACB
	// succ:  l00CF_0AC8 l00CF_0ACB
l00CF_0AC8:
	goto l00CF_0DA4
	// succ:  l00CF_0DA4
l00CF_0ACB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D82:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0016:word16] = ax
	bx = Mem0[ss:bp - 0x0006:word16]
	al = Mem0[ds:bx + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00CF_0AF7
	// succ:  l00CF_0AE7 l00CF_0AF7
l00CF_0AE7:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4960:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	// succ:  l00CF_0AF7
l00CF_0AF7:
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0000)
	branch Test(NE,Z) l00CF_0B00
	// succ:  l00CF_0AFD l00CF_0B00
l00CF_0AFD:
	goto l00CF_0BE2
	// succ:  l00CF_0BE2
l00CF_0B00:
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l00CF_0B0B
	// succ:  l00CF_0B08 l00CF_0B0B
l00CF_0B08:
	goto l00CF_0BE2
	// succ:  l00CF_0BE2
l00CF_0B0B:
	bx = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x03)
	branch Test(NE,Z) l00CF_0B22
	// succ:  l00CF_0B1C l00CF_0B22
l00CF_0B1C:
	ax = 0x0001
	goto l00CF_0B24
	// succ:  l00CF_0B24
l00CF_0B22:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00CF_0B24
l00CF_0B24:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1628 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00CF_0B31
	// succ:  l00CF_0B2E l00CF_0B31
l00CF_0B2E:
	goto l00CF_0BE2
	// succ:  l00CF_0BE2
l00CF_0B31:
	Mem0[ss:bp - 0x0008:word16] = si
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x022E
	SZO = cond(ax)
	C = false
	ax = ax + 0x015D
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x4C2A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_0DB4 (retsize: 2;)
	sp = sp + 0x000A
	si = 0x4C2E
	Mem0[ss:bp - 0x0012:word16] = 0x0001
	bx = Mem0[ss:bp - 0x0004:word16]
	bx = Mem0[ds:bx:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x0002:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	dx_ax = (int32) ax
	dx = dx_ax % Mem0[ds:bx + 0x0004:word16]
	ax = dx_ax / Mem0[ds:bx + 0x0004:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000E:word16] = ax
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	Mem0[ss:bp - 0x0014:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0010:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_5150 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00CF_0BAA
	// succ:  l00CF_0B92 l00CF_0BAA
l00CF_0B92:
	ax = bp - 0x011A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x006E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	bx = Mem0[ss:bp - 0x000E:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0474:word16]
	goto l00CF_0BBF
	// succ:  l00CF_0BBF
l00CF_0BAA:
	ax = bp - 0x011A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0067
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp - 0x000E:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0474:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	// succ:  l00CF_0BBF
l00CF_0BBF:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x011A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_0DEE (retsize: 2;)
	sp = sp + 0x000A
	si = si + 0x0004
	SCZO = cond(si)
	v20 = Mem0[ss:bp - 0x0012:word16] + 0x0001
	Mem0[ss:bp - 0x0012:word16] = v20
	SZO = cond(v20)
	// succ:  l00CF_0BE2
l00CF_0BE2:
	bx = Mem0[ss:bp - 0x011C:word16]
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x02)
	C = false
	branch Test(NE,Z) l00CF_0BEF
	// succ:  l00CF_0BEC l00CF_0BEF
l00CF_0BEC:
	goto l00CF_0D56
	// succ:  l00CF_0D56
l00CF_0BEF:
	SCZO = cond(Mem0[ss:bp - 0x0014:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_0BFB
	// succ:  l00CF_0BF5 l00CF_0BFB
l00CF_0BF5:
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(NE,Z) l00CF_0C21
	// succ:  l00CF_0BFB l00CF_0C21
l00CF_0BFB:
	Mem0[ss:bp - 0x0014:word16] = 0x0001
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x022F
	SZO = cond(ax)
	C = false
	ax = ax + 0x015D
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_0DB4 (retsize: 2;)
	sp = sp + 0x000A
	si = si + 0x0004
	SCZO = cond(si)
	v21 = Mem0[ss:bp - 0x0012:word16] + 0x0001
	Mem0[ss:bp - 0x0012:word16] = v21
	SZO = cond(v21)
	// succ:  l00CF_0C21
l00CF_0C21:
	bx = Mem0[ss:bp - 0x0006:word16]
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2210 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - 0x000B)
	branch Test(NE,Z) l00CF_0C54
	// succ:  l00CF_0C33 l00CF_0C54
l00CF_0C33:
	bx = Mem0[ss:bp - 0x0006:word16]
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l00CF_0C42
	// succ:  l00CF_0C3C l00CF_0C42
l00CF_0C3C:
	ax = Mem0[ds:0x03F0:word16]
	goto l00CF_0CAC
	// succ:  l00CF_0CAC
l00CF_0C42:
	bx = Mem0[ss:bp - 0x0004:word16]
	bl = Mem0[ds:bx + 0x0004:byte]
	bx = bx & 0x007F
	SZO = cond(bx)
	C = false
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x0444:word16]
	goto l00CF_0CAC
	// succ:  l00CF_0CAC
l00CF_0C54:
	bx = Mem0[ss:bp - 0x0006:word16]
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2210 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00CF_0C72
	// succ:  l00CF_0C68 l00CF_0C72
l00CF_0C68:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x0374:word16]
	goto l00CF_0CAC
	// succ:  l00CF_0CAC
l00CF_0C72:
	bx = Mem0[ss:bp - 0x0006:word16]
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_21A8 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00CF_0C90
	// succ:  l00CF_0C86 l00CF_0C90
l00CF_0C86:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x03EC:word16]
	goto l00CF_0CAC
	// succ:  l00CF_0CAC
l00CF_0C90:
	bx = Mem0[ss:bp - 0x0006:word16]
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_21CE (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00CF_0CAF
	// succ:  l00CF_0CA4 l00CF_0CAF
l00CF_0CA4:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x03B4:word16]
	// succ:  l00CF_0CAC
l00CF_0CAC:
	Mem0[ss:bp - 0x000C:word16] = ax
	// succ:  l00CF_0CAF
l00CF_0CAF:
	SCZO = cond(ax - 0x038D)
	branch Test(NE,Z) l00CF_0CD6
	// succ:  l00CF_0CB4 l00CF_0CD6
l00CF_0CB4:
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0000)
	branch Test(NE,Z) l00CF_0CD6
	// succ:  l00CF_0CBB l00CF_0CD6
l00CF_0CBB:
	bx = Mem0[ss:bp - 0x0006:word16]
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0067
	SCZO = cond(ax)
	branch Test(EQ,Z) l00CF_0CDC
	// succ:  l00CF_0CC7 l00CF_0CDC
l00CF_0CC7:
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l00CF_0CE2
	// succ:  l00CF_0CCB l00CF_0CE2
l00CF_0CCB:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l00CF_0CE8
	// succ:  l00CF_0CCE l00CF_0CE8
l00CF_0CCE:
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l00CF_0CEE
	// succ:  l00CF_0CD2 l00CF_0CEE
l00CF_0CD2:
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l00CF_0CEE
	// succ:  l00CF_0CD6 l00CF_0CEE
l00CF_0CD6:
	cx = Mem0[ss:bp - 0x000C:word16]
	goto l00CF_0CF1
	// succ:  l00CF_0CF1
l00CF_0CDC:
	cx = 0x0273
	goto l00CF_0CF1
	// succ:  l00CF_0CF1
l00CF_0CE2:
	cx = 0x0274
	goto l00CF_0CF1
	// succ:  l00CF_0CF1
l00CF_0CE8:
	cx = 0x02C7
	goto l00CF_0CF1
	// succ:  l00CF_0CF1
l00CF_0CEE:
	cx = 0x0406
	// succ:  l00CF_0CF1
l00CF_0CF1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_0DB4 (retsize: 2;)
	sp = sp + 0x000A
	si = si + 0x0004
	SCZO = cond(si)
	v23 = Mem0[ss:bp - 0x0012:word16] + 0x0001
	Mem0[ss:bp - 0x0012:word16] = v23
	SZO = cond(v23)
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_0D56
	// succ:  l00CF_0D0C l00CF_0D56
l00CF_0D0C:
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_0D35
	// succ:  l00CF_0D15 l00CF_0D35
l00CF_0D15:
	al = Mem0[ds:bx + 0x0005:byte]
	al = al & 0xFC
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x2C)
	branch Test(NE,Z) l00CF_0D35
	// succ:  l00CF_0D1E l00CF_0D35
l00CF_0D1E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_0DB4 (retsize: 2;)
	sp = sp + 0x000A
	si = si + 0x0004
	SCZO = cond(si)
	v24 = Mem0[ss:bp - 0x0012:word16] + 0x0001
	Mem0[ss:bp - 0x0012:word16] = v24
	SZO = cond(v24)
	// succ:  l00CF_0D35
l00CF_0D35:
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_0D56
	// succ:  l00CF_0D3E l00CF_0D56
l00CF_0D3E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	ax = ax - Mem0[ss:bp - 0x0012:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_0E4C (retsize: 2;)
	sp = sp + 0x000C
l00CF_0D56:
	SCZO = cond(Mem0[ss:bp - 0x0014:word16] - 0x0000)
	branch Test(NE,Z) l00CF_0D6E
	// succ:  l00CF_0D5C l00CF_0D6E
l00CF_0D5C:
	ax = 0x01CA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_0DB4 (retsize: 2;)
	sp = sp + 0x000A
l00CF_0D6E:
	SCZO = cond(Mem0[ss:bp - 0x0016:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_0D7D
	// succ:  l00CF_0D74 l00CF_0D7D
l00CF_0D74:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0016:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l00CF_0D7D
l00CF_0D7D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_0D9B
	// succ:  l00CF_0D8D l00CF_0D9B
l00CF_0D8D:
	bx = Mem0[ss:bp - 0x000A:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4960:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00CF_0D9B
l00CF_0D9B:
	ax = Mem0[ss:bp - 0x0018:word16]
	dx = Mem0[ss:bp - 0x001A:word16]
	goto l00CF_0DA7
	// succ:  l00CF_0DA7
l00CF_0DA4:
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (int32) ax
	// succ:  l00CF_0DA7
l00CF_0DA7:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00CF_0A66_exit
fn00CF_0A66_exit:


// fn00CF_0DB4
// Return size: 4
void fn00CF_0DB4()
fn00CF_0DB4_entry:
	// succ:  l00CF_0DB4
l00CF_0DB4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0102
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn00CF_0DEE (retsize: 2;)
	sp = sp + 0x000A
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00CF_0DB4_exit
fn00CF_0DB4_exit:


// fn00CF_0DEE
// Return size: 4
void fn00CF_0DEE()
fn00CF_0DEE_entry:
	// succ:  l00CF_0DEE
l00CF_0DEE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l00CF_0E0E
l00CF_0E0E:
	branch cx == 0x0000 l00CF_0E10
	// succ:  l00CF_0E0E_1 l00CF_0E10
l00CF_0E0E_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l00CF_0E0E
	// succ:  l00CF_0E10 l00CF_0E0E
l00CF_0E10:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	GetTextExtent(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	cx = ax
	di = Mem0[ss:bp + 0x000A:word16]
	Mem0[ds:di + 0x0002:word16] = dx
	bx = Mem0[ss:bp + 0x0006:word16]
	cx = cx - Mem0[ds:bx:word16]
	SCZO = cond(cx)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ~ax
	cx = cx & ax
	SZO = cond(cx)
	C = false
	cx = cx + Mem0[ds:bx:word16]
	SCZO = cond(cx)
	Mem0[ds:bx:word16] = cx
	ax = Mem0[ds:di + 0x0002:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	v18 = Mem0[ds:bx:word16] + ax
	Mem0[ds:bx:word16] = v18
	SCZO = cond(v18)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0107_523A (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:di:word16] = ax
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00CF_0DEE_exit
fn00CF_0DEE_exit:


// fn00CF_0E4C
// Return size: 4
void fn00CF_0E4C()
fn00CF_0E4C_entry:
	// succ:  l00CF_0E4C
l00CF_0E4C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x010A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	SCZO = cond(Mem0[ds:di + 0x0024:word16] - si)
	branch Test(ULE,CZ) l00CF_0E76
	// succ:  l00CF_0E6E l00CF_0E76
l00CF_0E6E:
	cx = 0x0001
	dx = si
	goto l00CF_0E7B
	// succ:  l00CF_0E7B
l00CF_0E76:
	cx = cx - cx
	SCZO = cond(cx)
	dx = Mem0[ds:di + 0x0024:word16]
	// succ:  l00CF_0E7B
l00CF_0E7B:
	si = si - si
	SCZO = cond(si)
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(LE,SZO) l00CF_0EF4
	// succ:  l00CF_0E81 l00CF_0EF4
l00CF_0E81:
	Mem0[ss:bp - 0x0008:word16] = cx
	Mem0[ss:bp - 0x0006:word16] = dx
	ax = di + 0x002B
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = di
	// succ:  l00CF_0E90
l00CF_0E90:
	bx = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l00CF_0ED1
	// succ:  l00CF_0EA9 l00CF_0ED1
l00CF_0EA9:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - si
	SCZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l00CF_0ED1
	// succ:  l00CF_0EB1 l00CF_0ED1
l00CF_0EB1:
	ax = 0x032B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l00CF_0EC0
l00CF_0EC0:
	branch cx == 0x0000 l00CF_0EC2
	// succ:  l00CF_0EC0_1 l00CF_0EC2
l00CF_0EC0_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l00CF_0EC0
	// succ:  l00CF_0EC2 l00CF_0EC0
l00CF_0EC2:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	di = cx
	ax = bp - 0x010A + di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00CF_0ED1
l00CF_0ED1:
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	call fn00CF_0DEE (retsize: 2;)
	sp = sp + 0x000A
	v19 = Mem0[ss:bp + 0x000C:word16] + 0x0004
	Mem0[ss:bp + 0x000C:word16] = v19
	SCZO = cond(v19)
	v20 = Mem0[ss:bp - 0x0004:word16] + 0x0005
	Mem0[ss:bp - 0x0004:word16] = v20
	SCZO = cond(v20)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - si)
	branch Test(GT,SZO) l00CF_0E90
	// succ:  l00CF_0EF4 l00CF_0E90
l00CF_0EF4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00CF_0E4C_exit fn00CF_0E4C_exit
fn00CF_0E4C_exit:


// fn00CF_0F08
// Return size: 4
void fn00CF_0F08()
fn00CF_0F08_entry:
	// succ:  l00CF_0F08
l00CF_0F08:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x010A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x000A:word16]
	dx = dx - dx
	SCZO = cond(dx)
	si = dx
	Mem0[ss:bp - 0x0006:word16] = si
	Mem0[ss:bp - 0x0008:word16] = 0x001A
	al = Mem0[ds:di + 0x0001:byte]
	al = al >>u 0x01
	SCZO = cond(al)
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x010A:word16] = ax
	SCZO = cond(ax - 0x0023)
	branch Test(UGT,CZ) l00CF_0F88
	// succ:  l00CF_0F37 l00CF_0F88
l00CF_0F37:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v15 = ax
	ax = bx
	bx = v15
	switch (ax) { l00CF_0F92 l00CF_0F98 l00CF_0F9E l00CF_0FA4 l00CF_0FAE l00CF_0FB4 l00CF_0FB4 l00CF_0FB4 l00CF_0FBA l00CF_0FC4 l00CF_1113 l00CF_1113 l00CF_1113 l00CF_0FCA l00CF_0FC4 l00CF_0FD4 l00CF_0FDE l00CF_0FE8 l00CF_0FF2 l00CF_0FFC l00CF_1004 l00CF_100A l00CF_1010 l00CF_1016 l00CF_1016 l00CF_1016 l00CF_1016 l00CF_1016 l00CF_1050 l00CF_1056 l00CF_106A l00CF_1072 l00CF_1078 l00CF_107E l00CF_1086 l00CF_0FC4 }
	// succ:  l00CF_0F92 l00CF_0F98 l00CF_0F9E l00CF_0FA4 l00CF_0FAE l00CF_0FB4 l00CF_0FB4 l00CF_0FB4 l00CF_0FBA l00CF_0FC4 l00CF_1113 l00CF_1113 l00CF_1113 l00CF_0FCA l00CF_0FC4 l00CF_0FD4 l00CF_0FDE l00CF_0FE8 l00CF_0FF2 l00CF_0FFC l00CF_1004 l00CF_100A l00CF_1010 l00CF_1016 l00CF_1016 l00CF_1016 l00CF_1016 l00CF_1016 l00CF_1050 l00CF_1056 l00CF_106A l00CF_1072 l00CF_1078 l00CF_107E l00CF_1086 l00CF_0FC4
l00CF_0F88:
	Mem0[ss:bp - 0x0004:word16] = dx
	// succ:  l00CF_0F8B
l00CF_0F8B:
	di = Mem0[ss:bp - 0x0004:word16]
	goto l00CF_1098
	// succ:  l00CF_1098
l00CF_0F92:
	si = 0x0216
	goto l00CF_0F88
	// succ:  l00CF_0F88
l00CF_0F98:
	si = 0x0217
	goto l00CF_0F88
	// succ:  l00CF_0F88
l00CF_0F9E:
	si = 0x0218
	goto l00CF_0F88
	// succ:  l00CF_0F88
l00CF_0FA4:
	si = 0x0231
	di = 0x0224
	goto l00CF_1098
	// succ:  l00CF_1098
l00CF_0FAE:
	si = 0x0219
	goto l00CF_0F88
	// succ:  l00CF_0F88
l00CF_0FB4:
	si = 0x021A
	goto l00CF_0F88
	// succ:  l00CF_0F88
l00CF_0FBA:
	si = 0x0231
	di = 0x02A5
	goto l00CF_1098
	// succ:  l00CF_1098
l00CF_0FC4:
	si = 0x0392
	goto l00CF_0F88
	// succ:  l00CF_0F88
l00CF_0FCA:
	si = 0x0231
	di = 0x021B
	goto l00CF_1098
	// succ:  l00CF_1098
l00CF_0FD4:
	si = 0x0231
	di = 0x021C
	goto l00CF_1098
	// succ:  l00CF_1098
l00CF_0FDE:
	si = 0x0231
	di = 0x021D
	goto l00CF_1098
	// succ:  l00CF_1098
l00CF_0FE8:
	si = 0x0231
	di = 0x021E
	goto l00CF_1098
	// succ:  l00CF_1098
l00CF_0FF2:
	si = 0x0231
	di = 0x021F
	goto l00CF_1098
	// succ:  l00CF_1098
l00CF_0FFC:
	si = si - si
	SCZO = cond(si)
	di = 0x0220
	goto l00CF_1098
	// succ:  l00CF_1098
l00CF_1004:
	si = 0x0221
	goto l00CF_0F88
	// succ:  l00CF_0F88
l00CF_100A:
	si = 0x0222
	goto l00CF_0F88
	// succ:  l00CF_0F88
l00CF_1010:
	si = 0x0223
	goto l00CF_0F88
	// succ:  l00CF_0F88
l00CF_1016:
	ax = bp - 0x0108
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x002D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp + 0x000C:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x010A:word16]
	ax = ax + 0x015B
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_00CA (retsize: 2;)
	sp = sp + 0x0004
	goto l00CF_1113
	// succ:  l00CF_1113
l00CF_1050:
	si = 0x0266
	goto l00CF_0F88
	// succ:  l00CF_0F88
l00CF_1056:
	Mem0[ss:bp - 0x0004:word16] = dx
	si = 0x0284
	// succ:  l00CF_105C
l00CF_105C:
	Mem0[ss:bp - 0x0008:word16] = 0x00D4
	Mem0[ss:bp - 0x0006:word16] = 0x0216
	goto l00CF_0F8B
	// succ:  l00CF_0F8B
l00CF_106A:
	Mem0[ss:bp - 0x0004:word16] = dx
	si = 0x0285
	goto l00CF_105C
	// succ:  l00CF_105C
l00CF_1072:
	si = 0x02AF
	goto l00CF_0F88
	// succ:  l00CF_0F88
l00CF_1078:
	si = 0x02B0
	goto l00CF_0F88
	// succ:  l00CF_0F88
l00CF_107E:
	si = 0x02B2
	di = 0x02B1
	goto l00CF_1098
	// succ:  l00CF_1098
l00CF_1086:
	Mem0[ss:bp - 0x0004:word16] = dx
	di = dx
	si = 0x03C4
	Mem0[ss:bp - 0x0008:word16] = 0x00D4
	Mem0[ss:bp - 0x0006:word16] = 0x0216
	// succ:  l00CF_1098
l00CF_1098:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0001)
	branch Test(NE,Z) l00CF_10C6
	// succ:  l00CF_109E l00CF_10C6
l00CF_109E:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l00CF_1106
	// succ:  l00CF_10A2 l00CF_1106
l00CF_10A2:
	ax = bp - 0x0108
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	bx = Mem0[ss:bp + 0x000C:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l00CF_10F7
	// succ:  l00CF_10F7
l00CF_10C6:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l00CF_1106
	// succ:  l00CF_10CA l00CF_1106
l00CF_10CA:
	ax = bp - 0x0108
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x0002
	SZO = cond(ax)
	C = false
	ax = ax + 0x00D3
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp + 0x000C:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00CF_10F7
l00CF_10F7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_00CA (retsize: 2;)
	sp = sp + 0x0004
l00CF_1106:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l00CF_1113
	// succ:  l00CF_110A l00CF_1113
l00CF_110A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_0298 (retsize: 2;)
	sp = sp + 0x0004
l00CF_1113:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00CF_0F08_exit
fn00CF_0F08_exit:


// fn00CF_1120
// Return size: 4
void fn00CF_1120()
fn00CF_1120_entry:
	// succ:  l00CF_1120
l00CF_1120:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0104
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = di - di
	SCZO = cond(di)
	si = di
	bx = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	al = al >>u 0x01
	SCZO = cond(al)
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x001D
	SCZO = cond(ax)
	branch Test(EQ,Z) l00CF_1150
	// succ:  l00CF_1143 l00CF_1150
l00CF_1143:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l00CF_1156
	// succ:  l00CF_1146 l00CF_1156
l00CF_1146:
	ax = ax - 0x0004
	SCZO = cond(ax)
	branch Test(EQ,Z) l00CF_115C
	// succ:  l00CF_114B l00CF_115C
l00CF_114B:
	dx = Mem0[ss:bp - 0x0004:word16]
	goto l00CF_1165
	// succ:  l00CF_1165
l00CF_1150:
	si = 0x0284
	goto l00CF_115F
	// succ:  l00CF_115F
l00CF_1156:
	si = 0x0285
	goto l00CF_115F
	// succ:  l00CF_115F
l00CF_115C:
	si = 0x03C4
	// succ:  l00CF_115F
l00CF_115F:
	dx = 0x00D4
	di = 0x03C6
	// succ:  l00CF_1165
l00CF_1165:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l00CF_118A
	// succ:  l00CF_1169 l00CF_118A
l00CF_1169:
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x001B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l00CF_11AB
	// succ:  l00CF_11AB
l00CF_118A:
	Mem0[ss:bp - 0x0004:word16] = dx
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00CF_11AB
l00CF_11AB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00CF_00CA (retsize: 2;)
	sp = sp + 0x0004
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00CF_1120_exit
fn00CF_1120_exit:


// fn00DF_0000
// Return size: 4
void fn00DF_0000()
fn00DF_0000_entry:
	// succ:  l00DF_0000
l00DF_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0318
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0063
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x3D86
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0C82 (retsize: 4;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00DF_0000_exit
fn00DF_0000_exit:


// fn00DF_0494
// Return size: 4
void fn00DF_0494()
fn00DF_0494_entry:
	// succ:  l00DF_0494
l00DF_0494:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(NE,Z) l00DF_04D0
	// succ:  l00DF_04AA l00DF_04D0
l00DF_04AA:
	sp = sp - 0x0002
	call fn00DF_0664 (retsize: 2;)
	SCZO = cond(Mem0[ds:0x4C6E:word16] - 0x0000)
	branch Test(NE,Z) l00DF_04BE
	// succ:  l00DF_04B5 l00DF_04BE
l00DF_04B5:
	call fn01F7_1C8E (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00DF_04C3
	// succ:  l00DF_04BE l00DF_04C3
l00DF_04BE:
	call fn01F7_24C2 (retsize: 4;)
	// succ:  l00DF_04C3
l00DF_04C3:
	sp = sp - 0x0002
	call fn00DF_1B22 (retsize: 2;)
	sp = sp - 0x0002
	call fn00DF_1AF4 (retsize: 2;)
	call fn01BF_20F2 (retsize: 4;)
	// succ:  l00DF_04D0
l00DF_04D0:
	ax = Mem0[ss:bp + 0x000A:word16]
	Mem0[ds:0x0096:word16] = ax
	call fn01BF_212A (retsize: 4;)
	ax = 0x0024
	dx_ax = Mem0[ss:bp + 0x000A:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	al = Mem0[ds:bx + 0x3D90:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ds:0x0480:word16] = ax
	cl = Mem0[ds:bx + 0x3D91:byte]
	ch = ch - ch
	SCZO = cond(ch)
	Mem0[ds:0x0482:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = ax - Mem0[ds:0x4D68:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SetScrollRange(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = Mem0[ds:0x0482:word16]
	cx = cx - Mem0[ds:0x495E:word16]
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollRange(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	SCZO = cond(Mem0[ds:0x0486:word16] - 0x0000)
	branch Test(EQ,Z) l00DF_058A
	// succ:  l00DF_052A l00DF_058A
l00DF_052A:
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	Mem0[ss:bp - 0x000C:word16] = bx
	SCZO = cond(Mem0[ds:bx + 0x3D86:word16] - 0x0002)
	branch Test(NE,Z) l00DF_058A
	// succ:  l00DF_053D l00DF_058A
l00DF_053D:
	Mem0[ds:0x0486:word16] = 0x0000
	SCZO = cond(Mem0[ds:bx + 0x3D8C:word16] - 0x0000)
	branch Test(EQ,Z) l00DF_0565
	// succ:  l00DF_054A l00DF_0565
l00DF_054A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x3D8C:word16]
	GlobalFree(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	Mem0[ss:bp - 0x000C:word16] = bx
	Mem0[ds:bx + 0x3D8C:word16] = 0x0000
	// succ:  l00DF_0565
l00DF_0565:
	bx = Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(Mem0[ds:bx + 0x3D8E:word16] - 0x0000)
	branch Test(EQ,Z) l00DF_05A8
	// succ:  l00DF_056F l00DF_05A8
l00DF_056F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x3D8E:word16]
	call fn01F7_2D28 (retsize: 4;)
	sp = sp + 0x0002
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	Mem0[ds:bx + 0x3D8E:word16] = 0x0000
	goto l00DF_05A8
	// succ:  l00DF_05A8
l00DF_058A:
	call fn01F7_1EFC (retsize: 4;)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l00DF_05B0
	// succ:  l00DF_0599 l00DF_05B0
l00DF_0599:
	call fn01F7_2776 (retsize: 4;)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l00DF_05B0
	// succ:  l00DF_05A8 l00DF_05B0
l00DF_05A8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0096:word16]
	sp = sp - 0x0002
	call fn00DF_0694 (retsize: 2;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0096:word16]
	sp = sp - 0x0002
	call fn00DF_0694 (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l00DF_05B0
l00DF_05B0:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0xFFFF)
	branch Test(EQ,Z) l00DF_05DE
	// succ:  l00DF_05B6 l00DF_05DE
l00DF_05B6:
	bx = Mem0[ds:0x0096:word16]
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x3D92:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0008:word16] = ax
	al = Mem0[ds:bx + 0x3D93:byte]
	Mem0[ss:bp - 0x000A:word16] = ax
	goto l00DF_05EF
	// succ:  l00DF_05EF
l00DF_05DE:
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_04F4 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l00DF_05EF
l00DF_05EF:
	si = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn00BF_0780 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0096:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	call fn00DF_0714 (retsize: 2;)
	sp = sp + 0x0006
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l00DF_064E
	// succ:  l00DF_060F l00DF_064E
l00DF_060F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = si
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = ax
	Mem0[ds:bx + 0x0016:byte] = 0xFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	Mem0[ss:bp - 0x000E:word16] = bx
	call fn018F_18FE (retsize: 4;)
	sp = sp + 0x0006
	bx = Mem0[ss:bp - 0x000E:word16]
	v21 = Mem0[ds:bx + 0x000B:byte] | 0x04
	Mem0[ds:bx + 0x000B:byte] = v21
	SZO = cond(Mem0[ds:bx + 0x000B:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn01AF_1228 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l00DF_064E
l00DF_064E:
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00DF_0494_exit
fn00DF_0494_exit:


// fn00DF_0664
// Return size: 4
void fn00DF_0664()
fn00DF_0664_entry:
	// succ:  l00DF_0664
l00DF_0664:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	ax = Mem0[ds:bx + 0x3D86:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00DF_0687
	// succ:  l00DF_0682 l00DF_0687
l00DF_0682:
	ax = ax - 0x0004
	SCZO = cond(ax)
	branch Test(NE,Z) l00DF_068C
	// succ:  l00DF_0687 l00DF_068C
l00DF_0687:
	call fn0177_1910 (retsize: 4;)
	// succ:  l00DF_068C
l00DF_068C:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00DF_0664_exit
fn00DF_0664_exit:


// fn00DF_0694
// Return size: 4
void fn00DF_0694()
fn00DF_0694_entry:
	// succ:  l00DF_0694
l00DF_0694:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0024
	dx_ax = Mem0[ss:bp + 0x0006:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	ax = Mem0[ds:bx + 0x3D86:word16]
	SCZO = cond(ax - 0x0007)
	branch Test(UGT,CZ) l00DF_0709
	// succ:  l00DF_06B2 l00DF_0709
l00DF_06B2:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v13 = ax
	ax = bx
	bx = v13
	call Mem0[0x00DF:bx + 0x06BA:word16] (retsize: 4;)
	return
	// succ:  fn00DF_0694_exit
l00DF_0709:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00DF_0694_exit
fn00DF_0694_exit:


// fn00DF_0714
// Return size: 4
void fn00DF_0714()
fn00DF_0714_entry:
	// succ:  l00DF_0714
l00DF_0714:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ds:0x0484:word16] = 0x0001
	v11 = Mem0[ds:0x4EB7:byte] | 0x80
	Mem0[ds:0x4EB7:byte] = v11
	SZO = cond(Mem0[ds:0x4EB7:byte])
	C = false
	ax = 0x0024
	dx_ax = Mem0[ss:bp + 0x000A:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	Mem0[ss:bp - 0x000A:word16] = bx
	ax = Mem0[ds:bx + 0x3D86:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00DF_0754
	// succ:  l00DF_0741 l00DF_0754
l00DF_0741:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l00DF_075C
	// succ:  l00DF_0744 l00DF_075C
l00DF_0744:
	ax = ax - 0x0003
	SCZO = cond(ax)
	branch Test(EQ,Z) l00DF_0754
	// succ:  l00DF_0749 l00DF_0754
l00DF_0749:
	ax = ax - 0x0003
	SCZO = cond(ax)
	branch Test(NE,Z) l00DF_0751
	// succ:  l00DF_074E l00DF_0751
l00DF_074E:
	goto l00DF_080E
	// succ:  l00DF_080E
l00DF_0751:
	goto l00DF_082B
	// succ:  l00DF_082B
l00DF_0754:
	call fn0177_1998 (retsize: 4;)
	goto l00DF_082B
	// succ:  l00DF_082B
l00DF_075C:
	ax = 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1B00 (retsize: 4;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00DF_079F
	// succ:  l00DF_076E l00DF_079F
l00DF_076E:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x08)
	C = false
	branch Test(NE,Z) l00DF_079F
	// succ:  l00DF_0775 l00DF_079F
l00DF_0775:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x036A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0157
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D72 (retsize: 4;)
	sp = sp + 0x0008
	v20 = Mem0[ds:0x4EB7:byte] | 0x08
	Mem0[ds:0x4EB7:byte] = v20
	SZO = cond(Mem0[ds:0x4EB7:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_1AEE (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l00DF_079F
l00DF_079F:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l00DF_07F6
	// succ:  l00DF_07A6 l00DF_07F6
l00DF_07A6:
	bl = Mem0[ds:0x1D64:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	dx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x0004:word16]
	ah = ah & 0x03
	SZO = cond(ah)
	C = false
	ah = ah | 0x4C
	SZO = cond(ah)
	C = false
	Mem0[ds:bx + 0x0004:word16] = ax
	bx = dx
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x0006:word16] = 0x036B
	bl = Mem0[ds:0x1E24:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	dx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x0004:word16]
	ah = ah & 0x03
	SZO = cond(ah)
	C = false
	ah = ah | 0x4C
	SZO = cond(ah)
	C = false
	Mem0[ds:bx + 0x0004:word16] = ax
	bx = dx
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x0006:word16] = 0x036B
	goto l00DF_082B
	// succ:  l00DF_082B
l00DF_07F6:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l00DF_082B
	// succ:  l00DF_07FD l00DF_082B
l00DF_07FD:
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	Mem0[ds:bx + 0x3D94:byte] = 0x15
	goto l00DF_082B
	// succ:  l00DF_082B
l00DF_080E:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x10)
	C = false
	branch Test(NE,Z) l00DF_082B
	// succ:  l00DF_0815 l00DF_082B
l00DF_0815:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_1AEE (retsize: 4;)
	sp = sp + 0x0006
	v17 = Mem0[ds:0x4EB7:byte] | 0x10
	Mem0[ds:0x4EB7:byte] = v17
	SZO = cond(Mem0[ds:0x4EB7:byte])
	C = false
	// succ:  l00DF_082B
l00DF_082B:
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax | Mem0[ss:bp + 0x0006:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00DF_0836
	// succ:  l00DF_0833 l00DF_0836
l00DF_0833:
	goto l00DF_0962
	// succ:  l00DF_0962
l00DF_0836:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - dx)
	branch Test(ULT,C) l00DF_084F
	// succ:  l00DF_0842 l00DF_084F
l00DF_0842:
	branch Test(UGT,CZ) l00DF_0849
	// succ:  l00DF_0844 l00DF_0849
l00DF_0844:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - ax)
	branch Test(ULE,CZ) l00DF_084F
	// succ:  l00DF_0849 l00DF_084F
l00DF_0849:
	Mem0[ss:bp + 0x0006:word16] = ax
	Mem0[ss:bp + 0x0008:word16] = dx
	// succ:  l00DF_084F
l00DF_084F:
	bx = Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(Mem0[ds:bx + 0x3D86:word16] - 0x0002)
	branch Test(NE,Z) l00DF_08BC
	// succ:  l00DF_0859 l00DF_08BC
l00DF_0859:
	ax = 0x4650
	dx_ax = (word32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	ax = ax - Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp + 0x0008:word16] - C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	si = ax
	bx = Mem0[ss:bp - 0x000A:word16]
	di = Mem0[ds:bx + 0x3D88:word16]
	di = di + 0x000A
	SCZO = cond(di)
	ax = Mem0[ds:0x4C60:word16]
	ax = ax + 0x000A
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	di = di - ax
	SCZO = cond(di)
	cx = cx - cx - C
	SCZO = cond(cx)
	di = di & cx
	SZO = cond(di)
	C = false
	di = di + ax
	SCZO = cond(di)
	SCZO = cond(Mem0[ds:0x4EBA:word16] - 0x0000)
	branch Test(EQ,Z) l00DF_08BC
	// succ:  l00DF_0896 l00DF_08BC
l00DF_0896:
	bx = Mem0[ds:0x4EBA:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx:word16]
	SCZO = cond(ax - di)
	branch Test(UGE,C) l00DF_08BC
	// succ:  l00DF_08A2 l00DF_08BC
l00DF_08A2:
	di = di - ax
	SCZO = cond(di)
	di = di - si
	SCZO = cond(di)
	ax = ax - ax - C
	SCZO = cond(ax)
	di = di & ax
	SZO = cond(di)
	C = false
	di = di + si
	SCZO = cond(di)
	si = di
	// succ:  l00DF_08AE
l00DF_08AE:
	ax = si
	si = si - 0x0001
	SZO = cond(si)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00DF_08BC
	// succ:  l00DF_08B5 l00DF_08BC
l00DF_08B5:
	call fn01AF_133A (retsize: 4;)
	goto l00DF_08AE
	// succ:  l00DF_08AE
l00DF_08BC:
	ax = 0x0258
	dx_ax = (word32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	ax = ax - Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp + 0x0008:word16] - C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l00DF_08EA
	// succ:  l00DF_08DC l00DF_08EA
l00DF_08DC:
	ax = 0x4DE0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4154
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0167_02E4 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l00DF_08EA
l00DF_08EA:
	ax = si
	cx = 0x000A
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	di = ax
	SCZO = cond(Mem0[ds:0x4EBA:word16] - 0x0000)
	branch Test(EQ,Z) l00DF_0962
	// succ:  l00DF_08FC l00DF_0962
l00DF_08FC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EBA:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	ax = Mem0[ds:si:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	cx = si
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0004
	SCZO = cond(si)
	Mem0[ss:bp - 0x0008:word16] = si
	cx = cx + 0x0004
	SCZO = cond(cx)
	SCZO = cond(si - cx)
	branch Test(ULE,CZ) l00DF_0959
	// succ:  l00DF_091C l00DF_0959
l00DF_091C:
	Mem0[ss:bp - 0x0006:word16] = di
	di = cx
	cx = Mem0[ss:bp - 0x0006:word16]
	// succ:  l00DF_0924
l00DF_0924:
	bx = Mem0[ds:di:word16]
	bx = Mem0[ds:bx:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(EQ,Z) l00DF_0945
	// succ:  l00DF_092C l00DF_0945
l00DF_092C:
	ax = Mem0[ds:bx + 0x0004:word16]
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - ax)
	branch Test(GE,SO) l00DF_0945
	// succ:  l00DF_0934 l00DF_0945
l00DF_0934:
	v26 = Mem0[ds:bx + 0x0002:word16] + cx
	Mem0[ds:bx + 0x0002:word16] = v26
	SCZO = cond(v26)
	ax = Mem0[ds:bx + 0x0002:word16]
	SCZO = cond(ax - Mem0[ds:bx + 0x0004:word16])
	branch Test(LE,SZO) l00DF_0942
	// succ:  l00DF_093F l00DF_0942
l00DF_093F:
	ax = Mem0[ds:bx + 0x0004:word16]
	// succ:  l00DF_0942
l00DF_0942:
	Mem0[ds:bx + 0x0002:word16] = ax
	// succ:  l00DF_0945
l00DF_0945:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	Mem0[ds:bx + 0x000E:word16] = ax
	Mem0[ds:bx + 0x0010:word16] = dx
	di = di + 0x0001
	SZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - Mem0[ss:bp - 0x0008:word16])
	branch Test(ULT,C) l00DF_0924
	// succ:  l00DF_0959 l00DF_0924
l00DF_0959:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EBA:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00DF_0962
l00DF_0962:
	v18 = Mem0[ds:0x4EB7:byte] & 0x7F
	Mem0[ds:0x4EB7:byte] = v18
	SZO = cond(Mem0[ds:0x4EB7:byte])
	C = false
	Mem0[ds:0x0484:word16] = 0x0000
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00DF_0714_exit
fn00DF_0714_exit:


// fn00DF_097A
// Return size: 4
void fn00DF_097A()
fn00DF_097A_entry:
	// succ:  l00DF_097A
l00DF_097A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	di = di - di
	SCZO = cond(di)
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	bx = bx + 0x3D92
	SCZO = cond(bx)
	dx = Mem0[ss:bp + 0x0006:word16]
	cx = Mem0[ss:bp + 0x0008:word16]
	// succ:  l00DF_099D
l00DF_099D:
	SCZO = cond(Mem0[ds:bx:byte] - cl)
	branch Test(NE,Z) l00DF_09A6
	// succ:  l00DF_09A1 l00DF_09A6
l00DF_09A1:
	SCZO = cond(Mem0[ds:bx + 0x0001:byte] - dl)
	branch Test(EQ,Z) l00DF_09B2
	// succ:  l00DF_09A6 l00DF_09B2
l00DF_09A6:
	bx = bx + 0x0004
	SCZO = cond(bx)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - 0x0006)
	branch Test(LT,SO) l00DF_099D
	// succ:  l00DF_09AF l00DF_099D
l00DF_09AF:
	goto l00DF_09B6
	// succ:  l00DF_09B6
l00DF_09B2:
	ax = di
	goto l00DF_09B9
	// succ:  l00DF_09B9
l00DF_09B6:
	ax = 0xFFFF
	// succ:  l00DF_09B9
l00DF_09B9:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00DF_097A_exit
fn00DF_097A_exit:


// fn00DF_09C4
// Return size: 4
void fn00DF_09C4()
fn00DF_09C4_entry:
	// succ:  l00DF_09C4
l00DF_09C4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cl = 0x06
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si << cl
	SCZO = cond(si)
	al = Mem0[ds:0x4D1D:byte]
	si = si + ax
	SCZO = cond(si)
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0CE2
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:si:byte] - 0x12)
	branch Test(EQ,Z) l00DF_09FA
	// succ:  l00DF_09F2 l00DF_09FA
l00DF_09F2:
	di = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:si:byte] - 0x13)
	branch Test(NE,Z) l00DF_0A22
	// succ:  l00DF_09FA l00DF_0A22
l00DF_09FA:
	SCZO = cond(Mem0[ds:si:byte] - 0x12)
	branch Test(NE,Z) l00DF_0A06
	// succ:  l00DF_09FF l00DF_0A06
l00DF_09FF:
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x0008
	goto l00DF_0A0B
	// succ:  l00DF_0A0B
l00DF_0A06:
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x0010
	// succ:  l00DF_0A0B
l00DF_0A0B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1DBA (retsize: 4;)
	sp = sp + 0x0006
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l00DF_0A22
	// succ:  l00DF_0A1C l00DF_0A22
l00DF_0A1C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn018F_0000 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l00DF_0A22
l00DF_0A22:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn00DF_0494 (retsize: 2;)
	sp = sp + 0x0006
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00DF_09C4_exit
fn00DF_09C4_exit:


// fn00DF_1546
// Return size: 4
void fn00DF_1546()
fn00DF_1546_entry:
	// succ:  l00DF_1546
l00DF_1546:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_11AE (retsize: 4;)
	sp = sp + 0x000A
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00DF_1546_exit
fn00DF_1546_exit:


// fn00DF_1AF4
// Return size: 4
void fn00DF_1AF4()
fn00DF_1AF4_entry:
	// succ:  l00DF_1AF4
l00DF_1AF4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x0CE2
	cx = 0x3000
	di = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l00DF_1B0E
l00DF_1B0E:
	branch cx == 0x0000 l00DF_1B10
	// succ:  l00DF_1B0E_1 l00DF_1B10
l00DF_1B0E_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l00DF_1B0E
	// succ:  l00DF_1B0E
l00DF_1B10:
	di = 0x4962
	cx = 0x01FE
	// succ:  l00DF_1B16
l00DF_1B16:
	branch cx == 0x0000 l00DF_1B18
	// succ:  l00DF_1B16_1 l00DF_1B18
l00DF_1B16_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l00DF_1B16
	// succ:  l00DF_1B16
l00DF_1B18:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00DF_1AF4_exit
fn00DF_1AF4_exit:


// fn00DF_1B22
// Return size: 4
void fn00DF_1B22()
fn00DF_1B22_entry:
	// succ:  l00DF_1B22
l00DF_1B22:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = 0x0001
	di = 0x4962
	// succ:  l00DF_1B37
l00DF_1B37:
	SCZO = cond(Mem0[ds:di:word16] - 0x0000)
	branch Test(EQ,Z) l00DF_1B42
	// succ:  l00DF_1B3C l00DF_1B42
l00DF_1B3C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0177_0196 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l00DF_1B42
l00DF_1B42:
	si = si + 0x0001
	SZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - 0x4B60)
	branch Test(ULT,C) l00DF_1B37
	// succ:  l00DF_1B4B l00DF_1B37
l00DF_1B4B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4960:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:0x4960:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x4EBA:word16] - 0x0000)
	branch Test(EQ,Z) l00DF_1B70
	// succ:  l00DF_1B61 l00DF_1B70
l00DF_1B61:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EBA:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:0x4EBA:word16] = 0x0000
	// succ:  l00DF_1B70
l00DF_1B70:
	SCZO = cond(Mem0[ds:0x4154:word16] - 0x0000)
	branch Test(EQ,Z) l00DF_1B86
	// succ:  l00DF_1B77 l00DF_1B86
l00DF_1B77:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4154:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:0x4154:word16] = 0x0000
	// succ:  l00DF_1B86
l00DF_1B86:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00DF_1B22_exit
fn00DF_1B22_exit:


// fn00F7_0066
// Return size: 4
void fn00F7_0066()
fn00F7_0066_entry:
	// succ:  l00F7_0066
l00F7_0066:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetCursorPos(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScreenToClient(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(LT,SO) l00F7_00DE
	// succ:  l00F7_0091 l00F7_00DE
l00F7_0091:
	ax = Mem0[ds:0x412C:word16]
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(GE,SO) l00F7_00DE
	// succ:  l00F7_0099 l00F7_00DE
l00F7_0099:
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(LT,SO) l00F7_00DE
	// succ:  l00F7_009F l00F7_00DE
l00F7_009F:
	ax = Mem0[ds:0x412E:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - ax)
	branch Test(GE,SO) l00F7_00DE
	// succ:  l00F7_00A7 l00F7_00DE
l00F7_00A7:
	ax = Mem0[ss:bp - 0x0004:word16]
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0005
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax + Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax + Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = ax
	ax = 0x0001
	goto l00F7_00E0
	// succ:  l00F7_00E0
l00F7_00DE:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00F7_00E0
l00F7_00E0:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_0066_exit
fn00F7_0066_exit:


// fn00F7_00EA
// Return size: 4
void fn00F7_00EA()
fn00F7_00EA_entry:
	// succ:  l00F7_00EA
l00F7_00EA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetCursorPos(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D7A:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScreenToClient(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(GE,SO) l00F7_0119
	// succ:  l00F7_0116 l00F7_0119
l00F7_0116:
	goto l00F7_01B4
	// succ:  l00F7_01B4
l00F7_0119:
	ax = Mem0[ds:0x4128:word16]
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(LT,SO) l00F7_0124
	// succ:  l00F7_0121 l00F7_0124
l00F7_0121:
	goto l00F7_01B4
	// succ:  l00F7_01B4
l00F7_0124:
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(GE,SO) l00F7_012D
	// succ:  l00F7_012A l00F7_012D
l00F7_012A:
	goto l00F7_01B4
	// succ:  l00F7_01B4
l00F7_012D:
	ax = Mem0[ds:0x412A:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - ax)
	branch Test(GE,SO) l00F7_01B4
	// succ:  l00F7_0135 l00F7_01B4
l00F7_0135:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D7A:word16]
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	si = ax
	SetMapMode(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cl = 0x05
	ax = Mem0[ds:0x0482:word16]
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x0480:word16]
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowExt(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4128:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x412A:word16]
	SetViewportExt(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	DPtoLP(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D7A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	ax = Mem0[ss:bp - 0x0004:word16]
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0005
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = ax
	ax = 0x0001
	goto l00F7_01B6
	// succ:  l00F7_01B6
l00F7_01B4:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00F7_01B6
l00F7_01B6:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_00EA_exit
fn00F7_00EA_exit:


// fn00F7_01C2
// Return size: 4
void fn00F7_01C2()
fn00F7_01C2_entry:
	// succ:  l00F7_01C2
l00F7_01C2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	si = Mem0[ss:bp + 0x0008:word16]
	cl = 0x05
	ax = Mem0[ds:0x495E:word16]
	ax = ax + Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	dx = Mem0[ds:0x3D84:word16]
	dx = dx - di
	SCZO = cond(dx)
	bx = bx - bx - C
	SCZO = cond(bx)
	bx = ~bx
	dx = dx & bx
	SZO = cond(dx)
	C = false
	dx = dx + di
	SCZO = cond(dx)
	ax = ax - dx
	SCZO = cond(ax)
	bx = bx - bx - C
	SCZO = cond(bx)
	ax = ax & bx
	SZO = cond(ax)
	C = false
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + 0x0010
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ds:0x4BE8:word16]
	ax = ax + Mem0[ds:0x4D68:word16]
	SCZO = cond(ax)
	dx = Mem0[ds:0x4BE8:word16]
	dx = dx - si
	SCZO = cond(dx)
	bx = bx - bx - C
	SCZO = cond(bx)
	bx = ~bx
	dx = dx & bx
	SZO = cond(dx)
	C = false
	dx = dx + si
	SCZO = cond(dx)
	dx = dx - ax
	SCZO = cond(dx)
	bx = bx - bx - C
	SCZO = cond(bx)
	dx = dx & bx
	SZO = cond(dx)
	C = false
	dx = dx + ax
	SCZO = cond(dx)
	ax = dx
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + 0x0010
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	SetCursorPos(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_01C2_exit
fn00F7_01C2_exit:


// fn00F7_0252
// Return size: 4
void fn00F7_0252()
fn00F7_0252_entry:
	// succ:  l00F7_0252
l00F7_0252:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_0284
	// succ:  l00F7_0266 l00F7_0284
l00F7_0266:
	si = 0xFFFA
	ax = Mem0[ds:0x4134:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax - 0x001A
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	cx = ~cx
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + 0x001A
	SCZO = cond(ax)
	si = si - ax
	SCZO = cond(si)
	goto l00F7_0286
	// succ:  l00F7_0286
l00F7_0284:
	si = si - si
	SCZO = cond(si)
	// succ:  l00F7_0286
l00F7_0286:
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetCursorPos(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScreenToClient(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(LT,SO) l00F7_02B9
	// succ:  l00F7_02A4 l00F7_02B9
l00F7_02A4:
	ax = Mem0[ds:0x412C:word16]
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(GE,SO) l00F7_02B9
	// succ:  l00F7_02AC l00F7_02B9
l00F7_02AC:
	SCZO = cond(si - Mem0[ss:bp - 0x0004:word16])
	branch Test(GT,SZO) l00F7_02B9
	// succ:  l00F7_02B1 l00F7_02B9
l00F7_02B1:
	ax = Mem0[ds:0x412E:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - ax)
	branch Test(LT,SO) l00F7_02C7
	// succ:  l00F7_02B9 l00F7_02C7
l00F7_02B9:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00F7_01C2 (retsize: 2;)
	sp = sp + 0x0004
l00F7_02C7:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_0252_exit
fn00F7_0252_exit:


// fn00F7_02D2
// Return size: 4
void fn00F7_02D2()
fn00F7_02D2_entry:
	// succ:  l00F7_02D2
l00F7_02D2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0001)
	branch Test(GT,SZO) l00F7_0308
	// succ:  l00F7_02F1 l00F7_0308
l00F7_02F1:
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0001)
	branch Test(GT,SZO) l00F7_0308
	// succ:  l00F7_0303 l00F7_0308
l00F7_0303:
	ax = 0x0001
	goto l00F7_030A
	// succ:  l00F7_030A
l00F7_0308:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00F7_030A
l00F7_030A:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_02D2_exit
fn00F7_02D2_exit:


// fn00F7_0314
// Return size: 4
void fn00F7_0314()
fn00F7_0314_entry:
	// succ:  l00F7_0314
l00F7_0314:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0DCD
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB4:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB2:word16]
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cx = Mem0[ds:0x4EB2:word16]
	bx = bx - bx
	SCZO = cond(bx)
	ax = ax + bx
	SCZO = cond(ax)
	dx = dx + cx + C
	SCZO = cond(dx)
	ax = ax + 0x0001
	SCZO = cond(ax)
	dx = dx + bx + C
	SCZO = cond(dx)
	Mem0[ds:0x4EB2:word16] = ax
	Mem0[ds:0x4EB4:word16] = dx
	ax = dx
	dx_ax = Mem0[ss:bp + 0x0006:word16] *u ax
	SCZO = cond(dx_ax)
	ax = dx
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_0314_exit
fn00F7_0314_exit:


// fn00F7_038E
// Return size: 4
void fn00F7_038E()
fn00F7_038E_entry:
	// succ:  l00F7_038E
l00F7_038E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:0x4EB2:word16] = ax
	Mem0[ds:0x4EB4:word16] = dx
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_038E_exit
fn00F7_038E_exit:


// fn00F7_04F4
// Return size: 4
void fn00F7_04F4()
fn00F7_04F4_entry:
	// succ:  l00F7_04F4
l00F7_04F4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0480:word16]
	sp = sp - 0x0002
	call fn00F7_0314 (retsize: 2;)
	sp = sp + 0x0002
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0482:word16]
	sp = sp - 0x0002
	call fn00F7_0314 (retsize: 2;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0006:word16] = ax
	cl = 0x06
	dx = di
	dx = dx << cl
	SCZO = cond(dx)
	ax = ax + dx
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	ax = Mem0[ds:0x0482:word16]
	dx_ax = Mem0[ds:0x0480:word16] *u ax
	SCZO = cond(dx_ax)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GT,SZO) l00F7_053F
	// succ:  l00F7_053C l00F7_053F
l00F7_053C:
	goto l00F7_061C
	// succ:  l00F7_061C
l00F7_053F:
	Mem0[ss:bp - 0x000A:word16] = di
	// succ:  l00F7_0542
l00F7_0542:
	ax = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(Mem0[ds:0x0482:word16] - ax)
	branch Test(NE,Z) l00F7_05C0
	// succ:  l00F7_054B l00F7_05C0
l00F7_054B:
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	ax = Mem0[ds:0x0480:word16]
	v17 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v17
	SZO = cond(v17)
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - ax)
	branch Test(NE,Z) l00F7_0560
	// succ:  l00F7_055B l00F7_0560
l00F7_055B:
	Mem0[ss:bp - 0x000A:word16] = 0x0000
	// succ:  l00F7_0560
l00F7_0560:
	ax = 0x00C0
	dx_ax = Mem0[ss:bp - 0x000A:word16] *u ax
	SCZO = cond(dx_ax)
	si = ax
	si = si + 0x0CE2
	SCZO = cond(si)
	// succ:  l00F7_056C
l00F7_056C:
	SCZO = cond(Mem0[ds:si:byte] - 0x01)
	branch Test(EQ,Z) l00F7_0576
	// succ:  l00F7_0571 l00F7_0576
l00F7_0571:
	SCZO = cond(Mem0[ds:si:byte] - 0x02)
	branch Test(NE,Z) l00F7_05E8
	// succ:  l00F7_0576 l00F7_05E8
l00F7_0576:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_05D0
	// succ:  l00F7_057C l00F7_05D0
l00F7_057C:
	al = Mem0[ds:si + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l00F7_05D0
	// succ:  l00F7_0587 l00F7_05D0
l00F7_0587:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + 0x4960
	SCZO = cond(bx)
	Mem0[ss:bp - 0x000E:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l00F7_05A6
	// succ:  l00F7_059F l00F7_05A6
l00F7_059F:
	bx = ax
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l00F7_05B4
	// succ:  l00F7_05A6 l00F7_05B4
l00F7_05A6:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l00F7_05C6
	// succ:  l00F7_05AC l00F7_05C6
l00F7_05AC:
	bx = ax
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_05C6
	// succ:  l00F7_05B4 l00F7_05C6
l00F7_05B4:
	bx = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l00F7_05E8
	// succ:  l00F7_05E8
l00F7_05C0:
	si = Mem0[ss:bp - 0x000C:word16]
	goto l00F7_056C
	// succ:  l00F7_056C
l00F7_05C6:
	bx = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00F7_05D0
l00F7_05D0:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l00F7_0606
	// succ:  l00F7_05D6 l00F7_0606
l00F7_05D6:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - Mem0[ss:bp - 0x000A:word16])
	branch Test(NE,Z) l00F7_0606
	// succ:  l00F7_05E0 l00F7_0606
l00F7_05E0:
	al = Mem0[ds:0x4D1D:byte]
	SCZO = cond(ax - Mem0[ss:bp - 0x0006:word16])
	branch Test(NE,Z) l00F7_0606
	// succ:  l00F7_05E8 l00F7_0606
l00F7_05E8:
	v21 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v21
	SZO = cond(v21)
	si = si + 0x0003
	SCZO = cond(si)
	Mem0[ss:bp - 0x000C:word16] = si
	ax = Mem0[ds:0x0482:word16]
	dx_ax = Mem0[ds:0x0480:word16] *u ax
	SCZO = cond(dx_ax)
	v22 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v22
	SZO = cond(v22)
	SCZO = cond(ax - Mem0[ss:bp - 0x0008:word16])
	branch Test(LE,SZO) l00F7_0603
	v23 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v23
	SZO = cond(v23)
	si = si + 0x0003
	SCZO = cond(si)
	Mem0[ss:bp - 0x000C:word16] = si
	ax = Mem0[ds:0x0482:word16]
	dx_ax = Mem0[ds:0x0480:word16] *u ax
	SCZO = cond(dx_ax)
	v24 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v24
	SZO = cond(v24)
	SCZO = cond(ax - Mem0[ss:bp - 0x0008:word16])
	branch Test(LE,SZO) l00F7_0603
	// succ:  l00F7_0600 l00F7_0603
l00F7_0600:
	goto l00F7_0542
	// succ:  l00F7_0542
l00F7_0603:
	goto l00F7_061C
	// succ:  l00F7_061C
l00F7_0606:
	ax = Mem0[ss:bp - 0x000A:word16]
	bx = Mem0[ss:bp + 0x000A:word16]
	Mem0[ds:bx:word16] = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = ax
	ax = 0x0001
	goto l00F7_061E
	// succ:  l00F7_061E
l00F7_061C:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00F7_061E
l00F7_061E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_04F4_exit
fn00F7_04F4_exit:


// fn00F7_062A
// Return size: 4
void fn00F7_062A()
fn00F7_062A_entry:
	// succ:  l00F7_062A
l00F7_062A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0006:word16] = 0x0001
	si = Mem0[ss:bp + 0x0006:word16]
	// succ:  l00F7_0641
l00F7_0641:
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	call fn00F7_11AE (retsize: 2;)
	sp = sp + 0x000A
	cl = 0x06
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00BF_07E0 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00F7_06F2
	// succ:  l00F7_0673 l00F7_06F2
l00F7_0673:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l00F7_06DA
	// succ:  l00F7_0677 l00F7_06DA
l00F7_0677:
	cl = 0x06
	bx = Mem0[ss:bp - 0x0008:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l00F7_06DA
	// succ:  l00F7_0693 l00F7_06DA
l00F7_0693:
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + 0x4960
	SCZO = cond(bx)
	Mem0[ss:bp - 0x000C:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	SZO = cond(si & 0x0001)
	C = false
	branch Test(EQ,Z) l00F7_06B5
	// succ:  l00F7_06AE l00F7_06B5
l00F7_06AE:
	bx = ax
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l00F7_06C3
	// succ:  l00F7_06B5 l00F7_06C3
l00F7_06B5:
	SZO = cond(si & 0x0002)
	C = false
	branch Test(EQ,Z) l00F7_06D0
	// succ:  l00F7_06BB l00F7_06D0
l00F7_06BB:
	bx = ax
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_06D0
	// succ:  l00F7_06C3 l00F7_06D0
l00F7_06C3:
	bx = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l00F7_06F2
	// succ:  l00F7_06F2
l00F7_06D0:
	bx = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00F7_06DA
l00F7_06DA:
	SZO = cond(si & 0x0004)
	C = false
	branch Test(EQ,Z) l00F7_0700
	// succ:  l00F7_06E0 l00F7_0700
l00F7_06E0:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - Mem0[ss:bp - 0x0008:word16])
	branch Test(NE,Z) l00F7_0700
	// succ:  l00F7_06EA l00F7_0700
l00F7_06EA:
	al = Mem0[ds:0x4D1D:byte]
	SCZO = cond(ax - Mem0[ss:bp - 0x000A:word16])
	branch Test(NE,Z) l00F7_0700
	// succ:  l00F7_06F2 l00F7_0700
l00F7_06F2:
	v18 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v18
	SZO = cond(v18)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0009)
	branch Test(GE,SO) l00F7_06FE
	v20 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v20
	SZO = cond(v20)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0009)
	branch Test(GE,SO) l00F7_06FE
	// succ:  l00F7_06FB l00F7_06FE
l00F7_06FB:
	goto l00F7_0641
	// succ:  l00F7_0641
l00F7_06FE:
	goto l00F7_0716
	// succ:  l00F7_0716
l00F7_0700:
	ax = Mem0[ss:bp - 0x0008:word16]
	bx = Mem0[ss:bp + 0x000A:word16]
	Mem0[ds:bx:word16] = ax
	ax = Mem0[ss:bp - 0x000A:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = ax
	ax = 0x0001
	goto l00F7_0718
	// succ:  l00F7_0718
l00F7_0716:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00F7_0718
l00F7_0718:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_062A_exit
fn00F7_062A_exit:


// fn00F7_0724
// Return size: 4
void fn00F7_0724()
fn00F7_0724_entry:
	// succ:  l00F7_0724
l00F7_0724:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0480:word16]
	sp = sp - 0x0002
	call fn00F7_0314 (retsize: 2;)
	sp = sp + 0x0002
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0482:word16]
	sp = sp - 0x0002
	call fn00F7_0314 (retsize: 2;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0006:word16] = ax
	cl = 0x06
	dx = di
	dx = dx << cl
	SCZO = cond(dx)
	ax = ax + dx
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	ax = Mem0[ds:0x0482:word16]
	dx_ax = Mem0[ds:0x0480:word16] *u ax
	SCZO = cond(dx_ax)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GT,SZO) l00F7_076F
	// succ:  l00F7_076C l00F7_076F
l00F7_076C:
	goto l00F7_0866
	// succ:  l00F7_0866
l00F7_076F:
	Mem0[ss:bp - 0x000A:word16] = di
	// succ:  l00F7_0772
l00F7_0772:
	ax = Mem0[ds:0x0482:word16]
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(EQ,Z) l00F7_077D
	// succ:  l00F7_077A l00F7_077D
l00F7_077A:
	goto l00F7_080A
	// succ:  l00F7_080A
l00F7_077D:
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	ax = Mem0[ds:0x0480:word16]
	v17 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v17
	SZO = cond(v17)
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - ax)
	branch Test(NE,Z) l00F7_0792
	// succ:  l00F7_078D l00F7_0792
l00F7_078D:
	Mem0[ss:bp - 0x000A:word16] = 0x0000
	// succ:  l00F7_0792
l00F7_0792:
	ax = 0x00C0
	dx_ax = Mem0[ss:bp - 0x000A:word16] *u ax
	SCZO = cond(dx_ax)
	si = ax
	si = si + 0x0CE2
	SCZO = cond(si)
	// succ:  l00F7_079E
l00F7_079E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00BF_07E0 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00F7_07AB
	// succ:  l00F7_07A8 l00F7_07AB
l00F7_07A8:
	goto l00F7_0832
	// succ:  l00F7_0832
l00F7_07AB:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_081A
	// succ:  l00F7_07B1 l00F7_081A
l00F7_07B1:
	al = Mem0[ds:si + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l00F7_081A
	// succ:  l00F7_07BC l00F7_081A
l00F7_07BC:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + 0x4960
	SCZO = cond(bx)
	Mem0[ss:bp - 0x000E:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l00F7_07DB
	// succ:  l00F7_07D4 l00F7_07DB
l00F7_07D4:
	bx = ax
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l00F7_07FE
	// succ:  l00F7_07DB l00F7_07FE
l00F7_07DB:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l00F7_07E9
	// succ:  l00F7_07E1 l00F7_07E9
l00F7_07E1:
	bx = ax
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0000)
	branch Test(NE,Z) l00F7_07FE
	// succ:  l00F7_07E9 l00F7_07FE
l00F7_07E9:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l00F7_0810
	// succ:  l00F7_07EF l00F7_0810
l00F7_07EF:
	al = Mem0[ds:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2210 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - 0x000B)
	branch Test(NE,Z) l00F7_0810
	// succ:  l00F7_07FE l00F7_0810
l00F7_07FE:
	bx = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l00F7_0832
	// succ:  l00F7_0832
l00F7_080A:
	si = Mem0[ss:bp - 0x000C:word16]
	goto l00F7_079E
	// succ:  l00F7_079E
l00F7_0810:
	bx = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00F7_081A
l00F7_081A:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l00F7_0850
	// succ:  l00F7_0820 l00F7_0850
l00F7_0820:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - Mem0[ss:bp - 0x000A:word16])
	branch Test(NE,Z) l00F7_0850
	// succ:  l00F7_082A l00F7_0850
l00F7_082A:
	al = Mem0[ds:0x4D1D:byte]
	SCZO = cond(ax - Mem0[ss:bp - 0x0006:word16])
	branch Test(NE,Z) l00F7_0850
	// succ:  l00F7_0832 l00F7_0850
l00F7_0832:
	v18 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v18
	SZO = cond(v18)
	si = si + 0x0003
	SCZO = cond(si)
	Mem0[ss:bp - 0x000C:word16] = si
	ax = Mem0[ds:0x0482:word16]
	dx_ax = Mem0[ds:0x0480:word16] *u ax
	SCZO = cond(dx_ax)
	v19 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v19
	SZO = cond(v19)
	SCZO = cond(ax - Mem0[ss:bp - 0x0008:word16])
	branch Test(LE,SZO) l00F7_084D
	v23 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v23
	SZO = cond(v23)
	si = si + 0x0003
	SCZO = cond(si)
	Mem0[ss:bp - 0x000C:word16] = si
	ax = Mem0[ds:0x0482:word16]
	dx_ax = Mem0[ds:0x0480:word16] *u ax
	SCZO = cond(dx_ax)
	v24 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v24
	SZO = cond(v24)
	SCZO = cond(ax - Mem0[ss:bp - 0x0008:word16])
	branch Test(LE,SZO) l00F7_084D
	// succ:  l00F7_084A l00F7_084D
l00F7_084A:
	goto l00F7_0772
	// succ:  l00F7_0772
l00F7_084D:
	goto l00F7_0866
	// succ:  l00F7_0866
l00F7_0850:
	ax = Mem0[ss:bp - 0x000A:word16]
	bx = Mem0[ss:bp + 0x000A:word16]
	Mem0[ds:bx:word16] = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = ax
	ax = 0x0001
	goto l00F7_0868
	// succ:  l00F7_0868
l00F7_0866:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00F7_0868
l00F7_0868:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_0724_exit
fn00F7_0724_exit:


// fn00F7_0874
// Return size: 4
void fn00F7_0874()
fn00F7_0874_entry:
	// succ:  l00F7_0874
l00F7_0874:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	di = 0x0001
	// succ:  l00F7_0889
l00F7_0889:
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn00F7_11AE (retsize: 2;)
	sp = sp + 0x000A
	cl = 0x06
	bx = Mem0[ss:bp - 0x0004:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x0CE2:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - si)
	branch Test(NE,Z) l00F7_08CF
	// succ:  l00F7_08B9 l00F7_08CF
l00F7_08B9:
	SCZO = cond(si - 0x0022)
	branch Test(EQ,Z) l00F7_08C9
	// succ:  l00F7_08BE l00F7_08C9
l00F7_08BE:
	SCZO = cond(si - 0x003D)
	branch Test(EQ,Z) l00F7_08C9
	// succ:  l00F7_08C3 l00F7_08C9
l00F7_08C3:
	SCZO = cond(si - 0x00A1)
	branch Test(NE,Z) l00F7_08D8
	// succ:  l00F7_08C9 l00F7_08D8
l00F7_08C9:
	SZO = cond(Mem0[ss:bp - 0x0007:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l00F7_08D8
	// succ:  l00F7_08CF l00F7_08D8
l00F7_08CF:
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - 0x0009)
	branch Test(LT,SO) l00F7_0889
	// succ:  l00F7_08D5 l00F7_0889
l00F7_08D5:
	goto l00F7_08EE
	// succ:  l00F7_08EE
l00F7_08D8:
	ax = Mem0[ss:bp - 0x0004:word16]
	bx = Mem0[ss:bp + 0x000A:word16]
	Mem0[ds:bx:word16] = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = ax
	ax = 0x0001
	goto l00F7_08F0
	// succ:  l00F7_08F0
l00F7_08EE:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00F7_08F0
l00F7_08F0:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_0874_exit
fn00F7_0874_exit:


// fn00F7_0A4A
// Return size: 4
void fn00F7_0A4A()
fn00F7_0A4A_entry:
	// succ:  l00F7_0A4A
l00F7_0A4A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x004E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x000C:word16]
	ax = Mem0[ds:bx + 0x0006:word16]
	ax = ax - Mem0[ds:bx + 0x0002:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	// succ:  l00F7_0A65
l00F7_0A65:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	call fn00F7_0314 (retsize: 2;)
	sp = sp + 0x0002
	bx = Mem0[ss:bp + 0x000C:word16]
	ax = ax + Mem0[ds:bx + 0x0002:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = 0x0000
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(GT,SZO) l00F7_0A83
	// succ:  l00F7_0A80 l00F7_0A83
l00F7_0A80:
	goto l00F7_0BA2
	// succ:  l00F7_0BA2
l00F7_0A83:
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	si = Mem0[ds:bx:word16]
	ax = si
	SCZO = cond(Mem0[ds:bx + 0x0004:word16] - ax)
	branch Test(LE,SZO) l00F7_0ACB
	// succ:  l00F7_0A91 l00F7_0ACB
l00F7_0A91:
	cl = 0x06
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + si
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	di = Mem0[ss:bp - 0x0006:word16]
	// succ:  l00F7_0AA9
l00F7_0AA9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn00BF_07E0 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00F7_0ABB
	// succ:  l00F7_0AB5 l00F7_0ABB
l00F7_0AB5:
	ax = si
	Mem0[ss:bp - 0x004C + di:byte] = al
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l00F7_0ABB
l00F7_0ABB:
	v17 = Mem0[ss:bp - 0x0004:word16] + 0x0003
	Mem0[ss:bp - 0x0004:word16] = v17
	SCZO = cond(v17)
	si = si + 0x0001
	SZO = cond(si)
	bx = Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(Mem0[ds:bx + 0x0004:word16] - si)
	branch Test(GT,SZO) l00F7_0AA9
	// succ:  l00F7_0AC8 l00F7_0AA9
l00F7_0AC8:
	Mem0[ss:bp - 0x0006:word16] = di
	// succ:  l00F7_0ACB
l00F7_0ACB:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l00F7_0AF0
	// succ:  l00F7_0AD1 l00F7_0AF0
l00F7_0AD1:
	v18 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v18
	SZO = cond(v18)
	ax = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - ax)
	branch Test(NE,Z) l00F7_0AE2
	// succ:  l00F7_0ADC l00F7_0AE2
l00F7_0ADC:
	ax = Mem0[ds:bx + 0x0002:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	// succ:  l00F7_0AE2
l00F7_0AE2:
	ax = Mem0[ss:bp - 0x000C:word16]
	v19 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v19
	SZO = cond(v19)
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - ax)
	branch Test(LT,SO) l00F7_0A83
	// succ:  l00F7_0AED l00F7_0A83
l00F7_0AED:
	goto l00F7_0BA2
	// succ:  l00F7_0BA2
l00F7_0AF0:
	di = Mem0[ss:bp + 0x000A:word16]
	si = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	Mem0[ds:di:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	call fn00F7_0314 (retsize: 2;)
	sp = sp + 0x0002
	bx = ax
	ax = bp - 0x004C
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l00F7_0B81
	// succ:  l00F7_0B16 l00F7_0B81
l00F7_0B16:
	bx = Mem0[ss:bp + 0x0008:word16]
	cl = 0x06
	ax = Mem0[ds:bx:word16]
	bx = Mem0[ds:di:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ss:bp - 0x004E:word16] = bx
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00F7_0B81
	// succ:  l00F7_0B39 l00F7_0B81
l00F7_0B39:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	dx = Mem0[ds:bx:word16]
	SZO = cond(si & 0x0001)
	C = false
	branch Test(EQ,Z) l00F7_0B53
	// succ:  l00F7_0B49 l00F7_0B53
l00F7_0B49:
	bx = dx
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_0B53
	// succ:  l00F7_0B50 l00F7_0B53
l00F7_0B50:
	goto l00F7_0A65
	// succ:  l00F7_0A65
l00F7_0B53:
	SZO = cond(si & 0x0002)
	C = false
	branch Test(EQ,Z) l00F7_0B64
	// succ:  l00F7_0B59 l00F7_0B64
l00F7_0B59:
	bx = dx
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_0B64
	// succ:  l00F7_0B61 l00F7_0B64
l00F7_0B61:
	goto l00F7_0A65
	// succ:  l00F7_0A65
l00F7_0B64:
	SZO = cond(si & 0x0008)
	C = false
	branch Test(EQ,Z) l00F7_0B81
	// succ:  l00F7_0B6A l00F7_0B81
l00F7_0B6A:
	bx = Mem0[ss:bp - 0x004E:word16]
	al = Mem0[ds:bx + 0x0CE2:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2210 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - 0x000B)
	branch Test(NE,Z) l00F7_0B81
	// succ:  l00F7_0B7E l00F7_0B81
l00F7_0B7E:
	goto l00F7_0A65
	// succ:  l00F7_0A65
l00F7_0B81:
	SZO = cond(si & 0x0004)
	C = false
	branch Test(EQ,Z) l00F7_0B9D
	// succ:  l00F7_0B87 l00F7_0B9D
l00F7_0B87:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - Mem0[ds:di:word16])
	branch Test(NE,Z) l00F7_0B9D
	// succ:  l00F7_0B90 l00F7_0B9D
l00F7_0B90:
	al = Mem0[ds:0x4D1D:byte]
	bx = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(ax - Mem0[ds:bx:word16])
	branch Test(NE,Z) l00F7_0B9D
	// succ:  l00F7_0B9A l00F7_0B9D
l00F7_0B9A:
	goto l00F7_0A65
	// succ:  l00F7_0A65
l00F7_0B9D:
	ax = 0x0001
	goto l00F7_0BA4
	// succ:  l00F7_0BA4
l00F7_0BA2:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00F7_0BA4
l00F7_0BA4:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_0A4A_exit
fn00F7_0A4A_exit:


// fn00F7_0BB0
// Return size: 4
void fn00F7_0BB0()
fn00F7_0BB0_entry:
	// succ:  l00F7_0BB0
l00F7_0BB0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0010
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_0BCE
	// succ:  l00F7_0BC8 l00F7_0BCE
l00F7_0BC8:
	ax = 0x0032
	goto l00F7_0BD0
	// succ:  l00F7_0BD0
l00F7_0BCE:
	ax = bx
	// succ:  l00F7_0BD0
l00F7_0BD0:
	Mem0[ss:bp - 0x0010:word16] = ax
	ax = bx
	dx = dx - dx
	SCZO = cond(dx)
	ax = ax + Mem0[ds:0x3CFA:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ds:0x3CFC:word16] + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0008:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x000E:word16] = 0x0000
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(NE,Z) l00F7_0BF4
	// succ:  l00F7_0BEE l00F7_0BF4
l00F7_0BEE:
	ax = 0x0001
	goto l00F7_0F49
	// succ:  l00F7_0F49
l00F7_0BF4:
	Mem0[ds:0x4D28:byte] = 0x00
	SCZO = cond(Mem0[ds:0x4EBA:word16] - 0x0000)
	branch Test(NE,Z) l00F7_0C03
	// succ:  l00F7_0C00 l00F7_0C03
l00F7_0C00:
	goto l00F7_0CD6
	// succ:  l00F7_0CD6
l00F7_0C03:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EBA:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	// succ:  l00F7_0C0E
l00F7_0C0E:
	ax = Mem0[ss:bp - 0x0010:word16]
	dx = dx - dx
	SCZO = cond(dx)
	v16 = Mem0[ds:0x3CFA:word16] + ax
	Mem0[ds:0x3CFA:word16] = v16
	SCZO = cond(v16)
	v17 = Mem0[ds:0x3CFC:word16] + dx + C
	Mem0[ds:0x3CFC:word16] = v17
	SCZO = cond(v17)
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	SCZO = cond(dx - Mem0[ss:bp - 0x0006:word16])
	branch Test(ULT,C) l00F7_0C34
	// succ:  l00F7_0C27 l00F7_0C34
l00F7_0C27:
	branch Test(UGT,CZ) l00F7_0C2E
	// succ:  l00F7_0C29 l00F7_0C2E
l00F7_0C29:
	SCZO = cond(ax - Mem0[ss:bp - 0x0008:word16])
	branch Test(ULE,CZ) l00F7_0C34
	// succ:  l00F7_0C2E l00F7_0C34
l00F7_0C2E:
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	// succ:  l00F7_0C34
l00F7_0C34:
	Mem0[ds:0x3CFA:word16] = ax
	Mem0[ds:0x3CFC:word16] = dx
	// succ:  l00F7_0C3B
l00F7_0C3B:
	ax = Mem0[ds:si:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + si
	SCZO = cond(ax)
	ax = ax + 0x0004
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	dx = si + 0x0004
	SCZO = cond(ax - dx)
	branch Test(ULE,CZ) l00F7_0CCA
	// succ:  l00F7_0C4E l00F7_0CCA
l00F7_0C4E:
	Mem0[ss:bp - 0x000C:word16] = si
	si = dx
	// succ:  l00F7_0C53
l00F7_0C53:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn018F_07A4 (retsize: 4;)
	sp = sp + 0x000A
	di = ax
	SZO = cond(di & 0x0001)
	C = false
	branch Test(EQ,Z) l00F7_0C71
	// succ:  l00F7_0C6D l00F7_0C71
l00F7_0C6D:
	v20 = Mem0[ss:bp - 0x000E:byte] | 0x01
	Mem0[ss:bp - 0x000E:byte] = v20
	SZO = cond(Mem0[ss:bp - 0x000E:byte])
	C = false
	// succ:  l00F7_0C71
l00F7_0C71:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x04)
	branch Test(EQ,Z) l00F7_0C83
	// succ:  l00F7_0C78 l00F7_0C83
l00F7_0C78:
	SZO = cond(al & 0x02)
	C = false
	branch Test(NE,Z) l00F7_0CAC
	// succ:  l00F7_0C7C l00F7_0CAC
l00F7_0C7C:
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x000A:word16])
	branch Test(ULT,C) l00F7_0C53
	// succ:  l00F7_0C83 l00F7_0C53
l00F7_0C83:
	sp = sp - 0x0002
	call fn00F7_0FF6 (retsize: 2;)
	v22 = Mem0[ss:bp - 0x000E:word16] | ax
	Mem0[ss:bp - 0x000E:word16] = v22
	SZO = cond(Mem0[ss:bp - 0x000E:word16])
	C = false
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_0C96
	// succ:  l00F7_0C90 l00F7_0C96
l00F7_0C90:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(NE,Z) l00F7_0CE3
	// succ:  l00F7_0C96 l00F7_0CE3
l00F7_0C96:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - dx)
	branch Test(UGT,CZ) l00F7_0CD0
	// succ:  l00F7_0CA2 l00F7_0CD0
l00F7_0CA2:
	branch Test(ULT,C) l00F7_0CE3
	// succ:  l00F7_0CA4 l00F7_0CE3
l00F7_0CA4:
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - ax)
	branch Test(UGT,CZ) l00F7_0CD0
	// succ:  l00F7_0CA9 l00F7_0CD0
l00F7_0CA9:
	goto l00F7_0CE3
	// succ:  l00F7_0CE3
l00F7_0CAC:
	SCZO = cond(Mem0[ds:0x4EBA:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_0CD6
	// succ:  l00F7_0CB3 l00F7_0CD6
l00F7_0CB3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EBA:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EBA:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	goto l00F7_0C3B
	// succ:  l00F7_0C3B
l00F7_0CCA:
	Mem0[ss:bp - 0x000C:word16] = si
	goto l00F7_0C83
	// succ:  l00F7_0C83
l00F7_0CD0:
	si = Mem0[ss:bp - 0x000C:word16]
	goto l00F7_0C0E
	// succ:  l00F7_0C0E
l00F7_0CD6:
	ax = Mem0[ss:bp - 0x0008:word16]
	dx = Mem0[ss:bp - 0x0006:word16]
	Mem0[ds:0x3CFA:word16] = ax
	Mem0[ds:0x3CFC:word16] = dx
	// succ:  l00F7_0CE3
l00F7_0CE3:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - ax)
	branch Test(NE,Z) l00F7_0CF4
	// succ:  l00F7_0CEF l00F7_0CF4
l00F7_0CEF:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - dx)
	branch Test(EQ,Z) l00F7_0CFA
	// succ:  l00F7_0CF4 l00F7_0CFA
l00F7_0CF4:
	ax = ax - Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	v15 = Mem0[ss:bp + 0x0008:word16] + ax
	Mem0[ss:bp + 0x0008:word16] = v15
	SCZO = cond(v15)
	// succ:  l00F7_0CFA
l00F7_0CFA:
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x04)
	branch Test(NE,Z) l00F7_0D20
	// succ:  l00F7_0D0A l00F7_0D20
l00F7_0D0A:
	SCZO = cond(Mem0[ds:0x4EBA:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_0D1A
	// succ:  l00F7_0D11 l00F7_0D1A
l00F7_0D11:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EBA:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00F7_0D1A
l00F7_0D1A:
	ax = ax - ax
	SCZO = cond(ax)
	goto l00F7_0F49
	// succ:  l00F7_0F49
l00F7_0D20:
	SCZO = cond(Mem0[ds:0x3CFC:word16] - 0xFFFF)
	branch Test(ULT,C) l00F7_0D63
	// succ:  l00F7_0D27 l00F7_0D63
l00F7_0D27:
	branch Test(UGT,CZ) l00F7_0D31
	// succ:  l00F7_0D29 l00F7_0D31
l00F7_0D29:
	SCZO = cond(Mem0[ds:0x3CFA:word16] - 0xF000)
	branch Test(ULE,CZ) l00F7_0D63
	// succ:  l00F7_0D31 l00F7_0D63
l00F7_0D31:
	v23 = Mem0[ds:0x3CFA:word16] + 0x1000
	Mem0[ds:0x3CFA:word16] = v23
	SCZO = cond(v23)
	v24 = Mem0[ds:0x3CFC:word16] + 0x00 + C
	Mem0[ds:0x3CFC:word16] = v24
	SCZO = cond(v24)
	SCZO = cond(Mem0[ds:0x4EBA:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_0D63
	// succ:  l00F7_0D43 l00F7_0D63
l00F7_0D43:
	cx = Mem0[ss:bp - 0x000A:word16]
	bx = Mem0[ss:bp - 0x000C:word16]
	bx = bx + 0x0004
	SCZO = cond(bx)
	SCZO = cond(bx - cx)
	branch Test(UGE,C) l00F7_0D63
	// succ:  l00F7_0D50 l00F7_0D63
l00F7_0D50:
	si = Mem0[ds:bx:word16]
	si = Mem0[ds:si:word16]
	v25 = Mem0[ds:si + 0x000E:word16] + 0x1000
	Mem0[ds:si + 0x000E:word16] = v25
	SCZO = cond(v25)
	v26 = Mem0[ds:si + 0x0010:word16] + 0x00 + C
	Mem0[ds:si + 0x0010:word16] = v26
	SCZO = cond(v26)
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	SCZO = cond(bx - cx)
	branch Test(ULT,C) l00F7_0D50
	// succ:  l00F7_0D63 l00F7_0D50
l00F7_0D63:
	SCZO = cond(Mem0[ds:0x4EBA:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_0D73
	// succ:  l00F7_0D6A l00F7_0D73
l00F7_0D6A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EBA:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00F7_0D73
l00F7_0D73:
	al = Mem0[ds:0x4C58:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(ax)
	cx = 0x000A
	bx = ax
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	Mem0[ds:0x4C58:byte] = dl
	ax = bx
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l00F7_0D97
	// succ:  l00F7_0D94 l00F7_0D97
l00F7_0D94:
	goto l00F7_0F36
	// succ:  l00F7_0F36
l00F7_0D97:
	al = Mem0[ds:0x4C57:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + di
	SCZO = cond(ax)
	cx = 0x0005
	bx = ax
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	Mem0[ds:0x4C57:byte] = dl
	ax = bx
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l00F7_0DBA
	// succ:  l00F7_0DB7 l00F7_0DBA
l00F7_0DB7:
	goto l00F7_0F36
	// succ:  l00F7_0F36
l00F7_0DBA:
	ax = 0x0506
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0167_0618 (retsize: 4;)
	sp = sp + 0x0004
	al = Mem0[ds:0x4C56:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + si
	SCZO = cond(ax)
	cx = 0x000C
	bx = ax
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	Mem0[ds:0x4C56:byte] = dl
	ax = bx
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l00F7_0DE7
	// succ:  l00F7_0DE4 l00F7_0DE7
l00F7_0DE4:
	goto l00F7_0F36
	// succ:  l00F7_0F36
l00F7_0DE7:
	si = Mem0[ds:0x0508:word16]
	ax = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0167_02E4 (retsize: 4;)
	sp = sp + 0x0006
	ax = 0x4DE0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4154
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0167_02E4 (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(si - Mem0[ds:0x0508:word16])
	branch Test(EQ,Z) l00F7_0E12
	// succ:  l00F7_0E0D l00F7_0E12
l00F7_0E0D:
	Mem0[ss:bp - 0x000E:word16] = 0x0001
	// succ:  l00F7_0E12
l00F7_0E12:
	ax = 0x0504
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0167_0618 (retsize: 4;)
	sp = sp + 0x0004
	ax = Mem0[ds:0x4CFE:word16]
	SCZO = cond(Mem0[ds:0x4CFC:word16] - ax)
	branch Test(GE,SO) l00F7_0E41
	// succ:  l00F7_0E25 l00F7_0E41
l00F7_0E25:
	ax = Mem0[ds:0x4CFC:word16]
	ax = ax + di
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x4CFE:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + Mem0[ds:0x4CFE:word16]
	SCZO = cond(ax)
	Mem0[ds:0x4CFC:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l00F7_0E41
l00F7_0E41:
	al = Mem0[ds:0x4C55:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + di
	SCZO = cond(ax)
	cx = 0x000A
	bx = ax
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	Mem0[ds:0x4C55:byte] = dl
	ax = bx
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l00F7_0E64
	// succ:  l00F7_0E61 l00F7_0E64
l00F7_0E61:
	goto l00F7_0F36
	// succ:  l00F7_0F36
l00F7_0E64:
	sp = sp - 0x0002
	call fn00F7_0FA0 (retsize: 2;)
	al = Mem0[ds:0x4C54:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + si
	SCZO = cond(ax)
	cx = 0x0006
	bx = ax
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	Mem0[ds:0x4C54:byte] = dl
	ax = bx
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l00F7_0E8B
	// succ:  l00F7_0E88 l00F7_0E8B
l00F7_0E88:
	goto l00F7_0F36
	// succ:  l00F7_0F36
l00F7_0E8B:
	sp = sp - 0x0002
	call fn00F7_0F56 (retsize: 2;)
	ax = Mem0[ds:0x4D02:word16]
	SCZO = cond(Mem0[ds:0x4D00:word16] - ax)
	branch Test(GE,SO) l00F7_0EB6
	// succ:  l00F7_0E98 l00F7_0EB6
l00F7_0E98:
	v31 = Mem0[ds:0x4D00:word16] + 0x0001
	Mem0[ds:0x4D00:word16] = v31
	SZO = cond(v31)
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l00F7_0EAD
	// succ:  l00F7_0EA3 l00F7_0EAD
l00F7_0EA3:
	SCZO = cond(Mem0[ds:0x4D00:word16] - ax)
	branch Test(GE,SO) l00F7_0EAD
	// succ:  l00F7_0EA9 l00F7_0EAD
l00F7_0EA9:
	v32 = Mem0[ds:0x4D00:word16] + 0x0001
	Mem0[ds:0x4D00:word16] = v32
	SZO = cond(v32)
	// succ:  l00F7_0EAD
l00F7_0EAD:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l00F7_0EB6
l00F7_0EB6:
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	si = Mem0[ds:bx + 0x3D88:word16]
	ax = si
	si = si + 0x000A
	SCZO = cond(si)
	cx = Mem0[ds:0x4C60:word16]
	cx = cx + 0x000A
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	si = si - cx
	SCZO = cond(si)
	dx = dx - dx - C
	SCZO = cond(dx)
	si = si & dx
	SZO = cond(si)
	C = false
	si = si + cx
	SCZO = cond(si)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00F7_0F18
	// succ:  l00F7_0EDD l00F7_0F18
l00F7_0EDD:
	SCZO = cond(Mem0[ds:0x4EBA:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_0EEE
	// succ:  l00F7_0EE4 l00F7_0EEE
l00F7_0EE4:
	bx = Mem0[ds:0x4EBA:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:word16] - si)
	branch Test(UGE,C) l00F7_0F18
	// succ:  l00F7_0EEE l00F7_0F18
l00F7_0EEE:
	v33 = Mem0[ds:0x4EB7:byte] | 0x80
	Mem0[ds:0x4EB7:byte] = v33
	SZO = cond(Mem0[ds:0x4EB7:byte])
	C = false
	call fn01AF_133A (retsize: 4;)
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00F7_0314 (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00F7_0F13
	// succ:  l00F7_0F04 l00F7_0F13
l00F7_0F04:
	bx = Mem0[ds:0x4EBA:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:word16] - si)
	branch Test(UGE,C) l00F7_0F13
	// succ:  l00F7_0F0E l00F7_0F13
l00F7_0F0E:
	call fn01AF_133A (retsize: 4;)
	// succ:  l00F7_0F13
l00F7_0F13:
	v34 = Mem0[ds:0x4EB7:byte] & 0x7F
	Mem0[ds:0x4EB7:byte] = v34
	SZO = cond(Mem0[ds:0x4EB7:byte])
	C = false
	// succ:  l00F7_0F18
l00F7_0F18:
	al = Mem0[ds:0x4C53:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + di
	SCZO = cond(ax)
	cx = 0x0018
	bx = ax
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	Mem0[ds:0x4C53:byte] = dl
	ax = bx
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	v35 = Mem0[ds:0x4C52:byte] + al
	Mem0[ds:0x4C52:byte] = v35
	SCZO = cond(v35)
	// succ:  l00F7_0F36
l00F7_0F36:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_0F41
	// succ:  l00F7_0F3C l00F7_0F41
l00F7_0F3C:
	call fn0017_1E46 (retsize: 4;)
	// succ:  l00F7_0F41
l00F7_0F41:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	// succ:  l00F7_0F49
l00F7_0F49:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_0BB0_exit
fn00F7_0BB0_exit:


// fn00F7_0F56
// Return size: 4
void fn00F7_0F56()
fn00F7_0F56_entry:
	// succ:  l00F7_0F56
l00F7_0F56:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = di - di
	SCZO = cond(di)
	si = 0x4CF4
	// succ:  l00F7_0F6A
l00F7_0F6A:
	SCZO = cond(Mem0[ds:si:byte] - 0x00)
	branch Test(GE,SO) l00F7_0F8D
	// succ:  l00F7_0F6F l00F7_0F8D
l00F7_0F6F:
	ax = di + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si:byte]
	ax = (int16) al
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	SCZO = cond(ax - 0x0005)
	branch Test(LE,SZO) l00F7_0F80
	// succ:  l00F7_0F7D l00F7_0F80
l00F7_0F7D:
	ax = 0x0005
	// succ:  l00F7_0F80
l00F7_0F80:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_118E (retsize: 4;)
	sp = sp + 0x0008
	// succ:  l00F7_0F8D
l00F7_0F8D:
	di = di + 0x0001
	SZO = cond(di)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x4CF8)
	branch Test(ULT,C) l00F7_0F6A
	// succ:  l00F7_0F95 l00F7_0F6A
l00F7_0F95:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_0F56_exit
fn00F7_0F56_exit:


// fn00F7_0FA0
// Return size: 4
void fn00F7_0FA0()
fn00F7_0FA0_entry:
	// succ:  l00F7_0FA0
l00F7_0FA0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4EBA:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_0FEB
	// succ:  l00F7_0FB6 l00F7_0FEB
l00F7_0FB6:
	si = Mem0[ds:0x4EBA:word16]
	ax = Mem0[ds:si:word16]
	cx = ax
	ax = ax + 0x0004
	SCZO = cond(ax)
	bx = ax
	si = cx
	di = Mem0[ds:si:word16]
	di = di << 0x0001
	SCZO = cond(di)
	cx = cx + di
	SCZO = cond(cx)
	cx = cx + 0x0004
	SCZO = cond(cx)
	dx = cx
	SCZO = cond(cx - ax)
	branch Test(ULE,CZ) l00F7_0FEB
	// succ:  l00F7_0FD4 l00F7_0FEB
l00F7_0FD4:
	si = Mem0[ds:bx:word16]
	di = Mem0[ds:si:word16]
	si = Mem0[ds:si:word16]
	ax = Mem0[ds:si + 0x0004:word16]
	SCZO = cond(Mem0[ds:si + 0x0002:word16] - ax)
	branch Test(GE,SO) l00F7_0FE5
	// succ:  l00F7_0FE2 l00F7_0FE5
l00F7_0FE2:
	v17 = Mem0[ds:di + 0x0002:word16] + 0x0001
	Mem0[ds:di + 0x0002:word16] = v17
	SZO = cond(v17)
	// succ:  l00F7_0FE5
l00F7_0FE5:
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	SCZO = cond(bx - dx)
	branch Test(ULT,C) l00F7_0FD4
	// succ:  l00F7_0FEB l00F7_0FD4
l00F7_0FEB:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_0FA0_exit fn00F7_0FA0_exit
fn00F7_0FA0_exit:


// fn00F7_0FF6
// Return size: 4
void fn00F7_0FF6()
fn00F7_0FF6_entry:
	// succ:  l00F7_0FF6
l00F7_0FF6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	cx = ax
	ax = ax - Mem0[ds:0x4D20:word16]
	SCZO = cond(ax)
	branch Test(NS,S) l00F7_1014
	// succ:  l00F7_1012 l00F7_1014
l00F7_1012:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00F7_1014
l00F7_1014:
	Mem0[ss:bp - 0x000C:word16] = ax
	dl = Mem0[ds:0x4D1C:byte]
	dh = dh - dh
	SCZO = cond(dh)
	ax = dx
	dx = dx + Mem0[ds:0x4D20:word16]
	SCZO = cond(dx)
	dx = dx + 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - Mem0[ds:0x0480:word16])
	branch Test(LE,SZO) l00F7_102E
	// succ:  l00F7_102A l00F7_102E
l00F7_102A:
	dx = Mem0[ds:0x0480:word16]
	// succ:  l00F7_102E
l00F7_102E:
	di = cx
	di = di + Mem0[ds:0x4D20:word16]
	SCZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - Mem0[ds:0x0482:word16])
	branch Test(LE,SZO) l00F7_103F
	// succ:  l00F7_103B l00F7_103F
l00F7_103B:
	di = Mem0[ds:0x0482:word16]
	// succ:  l00F7_103F
l00F7_103F:
	ax = ax - Mem0[ds:0x4D20:word16]
	SCZO = cond(ax)
	branch Test(NS,S) l00F7_1047
	// succ:  l00F7_1045 l00F7_1047
l00F7_1045:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00F7_1047
l00F7_1047:
	si = ax
	SCZO = cond(dx - ax)
	branch Test(LE,SZO) l00F7_10AC
	// succ:  l00F7_104D l00F7_10AC
l00F7_104D:
	Mem0[ss:bp - 0x000E:word16] = dx
	cl = 0x06
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = si
	Mem0[ss:bp - 0x0006:word16] = di
	// succ:  l00F7_105D
l00F7_105D:
	bx = Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(bx - Mem0[ss:bp - 0x0006:word16])
	branch Test(GE,SO) l00F7_1095
	// succ:  l00F7_1065 l00F7_1095
l00F7_1065:
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax + bx
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CE4
	SCZO = cond(ax)
	di = ax
	// succ:  l00F7_1075
l00F7_1075:
	dl = Mem0[ds:di:byte]
	dh = dh - dh
	SCZO = cond(dh)
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l00F7_108C
	// succ:  l00F7_107D l00F7_108C
l00F7_107D:
	si = dx
	si = si << 0x0001
	SCZO = cond(si)
	si = Mem0[ds:si + 0x4960:word16]
	si = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(NE,Z) l00F7_10A6
	// succ:  l00F7_108C l00F7_10A6
l00F7_108C:
	di = di + 0x0003
	SCZO = cond(di)
	bx = bx + 0x0001
	SZO = cond(bx)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - bx)
	branch Test(GT,SZO) l00F7_1075
	// succ:  l00F7_1095 l00F7_1075
l00F7_1095:
	v23 = Mem0[ss:bp - 0x0008:word16] + 0x0040
	Mem0[ss:bp - 0x0008:word16] = v23
	SCZO = cond(v23)
	ax = Mem0[ss:bp - 0x000E:word16]
	v24 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v24
	SZO = cond(v24)
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - ax)
	branch Test(LT,SO) l00F7_105D
	// succ:  l00F7_10A4 l00F7_105D
l00F7_10A4:
	goto l00F7_10AC
	// succ:  l00F7_10AC
l00F7_10A6:
	ax = 0x0001
	goto l00F7_10AE
	// succ:  l00F7_10AE
l00F7_10AC:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00F7_10AE
l00F7_10AE:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_0FF6_exit
fn00F7_0FF6_exit:


// fn00F7_10B8
// Return size: 4
void fn00F7_10B8()
fn00F7_10B8_entry:
	// succ:  l00F7_10B8
l00F7_10B8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ds:0x4D14:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ds:0x4D16:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l00F7_10F1
	// succ:  l00F7_10E7 l00F7_10F1
l00F7_10E7:
	branch Test(ULT,C) l00F7_10EE
	// succ:  l00F7_10E9 l00F7_10EE
l00F7_10E9:
	SCZO = cond(ax - 0x0001)
	branch Test(UGE,C) l00F7_10F1
	// succ:  l00F7_10EE l00F7_10F1
l00F7_10EE:
	ax = 0x0001
	// succ:  l00F7_10F1
l00F7_10F1:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_10B8_exit
fn00F7_10B8_exit:


// fn00F7_10FC
// Return size: 4
void fn00F7_10FC()
fn00F7_10FC_entry:
	// succ:  l00F7_10FC
l00F7_10FC:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ds:0x4D18:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l00F7_1136
	// succ:  l00F7_112C l00F7_1136
l00F7_112C:
	branch Test(ULT,C) l00F7_1133
	// succ:  l00F7_112E l00F7_1133
l00F7_112E:
	SCZO = cond(ax - 0x0001)
	branch Test(UGE,C) l00F7_1136
	// succ:  l00F7_1133 l00F7_1136
l00F7_1133:
	ax = 0x0001
	// succ:  l00F7_1136
l00F7_1136:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_10FC_exit
fn00F7_10FC_exit:


// fn00F7_1140
// Return size: 4
void fn00F7_1140()
fn00F7_1140_entry:
	// succ:  l00F7_1140
l00F7_1140:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ds:si + 0x0007:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx_ax = Mem0[ss:bp + 0x0008:word16] *u ax
	SCZO = cond(dx_ax)
	cl = Mem0[ds:si + 0x0006:byte]
	ch = ch - ch
	SCZO = cond(ch)
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	ax = ax - 0x0001
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	cx = ~cx
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + 0x0001
	SZO = cond(ax)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1140_exit
fn00F7_1140_exit:


// fn00F7_1178
// Return size: 4
void fn00F7_1178()
fn00F7_1178_entry:
	// succ:  l00F7_1178
l00F7_1178:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax - Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax - Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	SCZO = cond(ax - cx)
	branch Test(GE,SO) l00F7_11A3
	// succ:  l00F7_11A1 l00F7_11A3
l00F7_11A1:
	ax = cx
	// succ:  l00F7_11A3
l00F7_11A3:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1178_exit
fn00F7_1178_exit:


// fn00F7_11AE
// Return size: 4
void fn00F7_11AE()
fn00F7_11AE_entry:
	// succ:  l00F7_11AE
l00F7_11AE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax - 0x0032)
	branch Test(NE,Z) l00F7_11C6
	// succ:  l00F7_11C3 l00F7_11C6
l00F7_11C3:
	goto l00F7_124C
	// succ:  l00F7_124C
l00F7_11C6:
	branch Test(ULE,CZ) l00F7_11CB
	// succ:  l00F7_11C8 l00F7_11CB
l00F7_11C8:
	goto l00F7_125E
	// succ:  l00F7_125E
l00F7_11CB:
	SCZO = cond(al - 0x2B)
	branch Test(EQ,Z) l00F7_1210
	// succ:  l00F7_11CF l00F7_1210
l00F7_11CF:
	branch Test(GT,SZO) l00F7_11F4
	// succ:  l00F7_11D1 l00F7_11F4
l00F7_11D1:
	al = al - 0x01
	SZO = cond(al)
	SCZO = cond(ax - 0x0007)
	branch Test(ULE,CZ) l00F7_11DB
	// succ:  l00F7_11D8 l00F7_11DB
l00F7_11D8:
	goto l00F7_125E
	// succ:  l00F7_125E
l00F7_11DB:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v13 = ax
	ax = bx
	bx = v13
	switch (ax) { l00F7_1210 l00F7_1216 l00F7_121C l00F7_1222 l00F7_1232 l00F7_1240 l00F7_1246 l00F7_124C }
	// succ:  l00F7_1210 l00F7_1216 l00F7_121C l00F7_1222 l00F7_1232 l00F7_1240 l00F7_1246 l00F7_124C
l00F7_11F4:
	al = al - 0x2C
	SCZO = cond(al)
	SCZO = cond(ax - 0x0005)
	branch Test(UGT,CZ) l00F7_125E
	// succ:  l00F7_11FB l00F7_125E
l00F7_11FB:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v14 = ax
	ax = bx
	bx = v14
	switch (ax) { l00F7_1216 l00F7_121C l00F7_1222 l00F7_1232 l00F7_1240 l00F7_1246 }
	// succ:  l00F7_1216 l00F7_121C l00F7_1222 l00F7_1232 l00F7_1240 l00F7_1246
l00F7_1210:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	goto l00F7_1236
	// succ:  l00F7_1236
l00F7_1216:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	goto l00F7_1226
	// succ:  l00F7_1226
l00F7_121C:
	ax = Mem0[ss:bp + 0x000A:word16]
	goto l00F7_1226
	// succ:  l00F7_1226
l00F7_1222:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	// succ:  l00F7_1226
l00F7_1226:
	bx = Mem0[ss:bp + 0x000E:word16]
	Mem0[ds:bx:word16] = ax
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	goto l00F7_1259
	// succ:  l00F7_1259
l00F7_1232:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	// succ:  l00F7_1236
l00F7_1236:
	bx = Mem0[ss:bp + 0x000E:word16]
	Mem0[ds:bx:word16] = ax
	ax = Mem0[ss:bp + 0x0008:word16]
	goto l00F7_1259
	// succ:  l00F7_1259
l00F7_1240:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	goto l00F7_1250
	// succ:  l00F7_1250
l00F7_1246:
	ax = Mem0[ss:bp + 0x000A:word16]
	goto l00F7_1250
	// succ:  l00F7_1250
l00F7_124C:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	// succ:  l00F7_1250
l00F7_1250:
	bx = Mem0[ss:bp + 0x000E:word16]
	Mem0[ds:bx:word16] = ax
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	// succ:  l00F7_1259
l00F7_1259:
	bx = Mem0[ss:bp + 0x000C:word16]
	Mem0[ds:bx:word16] = ax
	// succ:  l00F7_125E
l00F7_125E:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_11AE_exit
fn00F7_11AE_exit:


// fn00F7_1268
// Return size: 4
void fn00F7_1268()
fn00F7_1268_entry:
	// succ:  l00F7_1268
l00F7_1268:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	dx = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ds:0x4BE8:word16] - dx)
	branch Test(UGT,CZ) l00F7_1298
	// succ:  l00F7_127E l00F7_1298
l00F7_127E:
	SCZO = cond(dx - Mem0[ds:0x3CF6:word16])
	branch Test(UGT,CZ) l00F7_1298
	// succ:  l00F7_1284 l00F7_1298
l00F7_1284:
	dx = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(Mem0[ds:0x3D84:word16] - dx)
	branch Test(UGT,CZ) l00F7_1298
	// succ:  l00F7_128D l00F7_1298
l00F7_128D:
	SCZO = cond(dx - Mem0[ds:0x4DDE:word16])
	branch Test(UGT,CZ) l00F7_1298
	// succ:  l00F7_1293 l00F7_1298
l00F7_1293:
	ax = 0x0001
	goto l00F7_129A
	// succ:  l00F7_129A
l00F7_1298:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00F7_129A
l00F7_129A:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1268_exit
fn00F7_1268_exit:


// fn00F7_12A4
// Return size: 4
void fn00F7_12A4()
fn00F7_12A4_entry:
	// succ:  l00F7_12A4
l00F7_12A4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ds:0x4C60:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	dx_ax = Mem0[ds:0x00AE:word16] *u ax
	SCZO = cond(dx_ax)
	cx = ax
	ax = ax + 0x001E
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	bx = cx
	cl = Mem0[ds:0x4D04:byte]
	cl = cl | cl
	SZO = cond(cl)
	C = false
	branch Test(EQ,Z) l00F7_12D2
	// succ:  l00F7_12CA l00F7_12D2
l00F7_12CA:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v16 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v16
	cl = cl - 0x01
	SZO = cond(cl)
	branch Test(NE,Z) l00F7_12CA
	// succ:  l00F7_12D2 l00F7_12CA
l00F7_12D2:
	cx = bx + 0x0028
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_12A4_exit
fn00F7_12A4_exit:


// fn00F7_12E2
// Return size: 4
void fn00F7_12E2()
fn00F7_12E2_entry:
	// succ:  l00F7_12E2
l00F7_12E2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ds:0x4C60:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	dx_ax = Mem0[ds:0x00AE:word16] *u ax
	SCZO = cond(dx_ax)
	cx = ax
	ax = ax + 0x001E
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	bx = cx
	cl = Mem0[ds:0x4D04:byte]
	cl = cl - 0x01
	SZO = cond(cl)
	branch Test(EQ,Z) l00F7_1310
	// succ:  l00F7_1308 l00F7_1310
l00F7_1308:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v15 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v15
	cl = cl - 0x01
	SZO = cond(cl)
	branch Test(NE,Z) l00F7_1308
	// succ:  l00F7_1310 l00F7_1308
l00F7_1310:
	cx = bx + 0x0028
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx - 0x00 - C
	SCZO = cond(dx)
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_12E2_exit
fn00F7_12E2_exit:


// fn00F7_1320
// Return size: 4
void fn00F7_1320()
fn00F7_1320_entry:
	// succ:  l00F7_1320
l00F7_1320:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	v10 = Mem0[ds:0x4D06:word16] + ax
	Mem0[ds:0x4D06:word16] = v10
	SCZO = cond(v10)
	v12 = Mem0[ds:0x4D08:word16] + dx + C
	Mem0[ds:0x4D08:word16] = v12
	SCZO = cond(v12)
	SCZO = cond(Mem0[ds:0x4D04:word16] - 0x001D)
	branch Test(GE,SO) l00F7_136A
	// succ:  l00F7_1342 l00F7_136A
l00F7_1342:
	sp = sp - 0x0002
	call fn00F7_12A4 (retsize: 2;)
	SCZO = cond(dx - Mem0[ds:0x4D08:word16])
	branch Test(GT,SZO) l00F7_136A
	// succ:  l00F7_134C l00F7_136A
l00F7_134C:
	branch Test(LT,SO) l00F7_1354
	// succ:  l00F7_134E l00F7_1354
l00F7_134E:
	SCZO = cond(ax - Mem0[ds:0x4D06:word16])
	branch Test(UGT,CZ) l00F7_136A
	// succ:  l00F7_1354 l00F7_136A
l00F7_1354:
	sp = sp - 0x0002
	call fn00F7_1398 (retsize: 2;)
	sp = sp - 0x0002
	call fn00F7_12A4 (retsize: 2;)
	SCZO = cond(dx - Mem0[ds:0x4D08:word16])
	branch Test(LT,SO) l00F7_1354
	// succ:  l00F7_1362 l00F7_1354
l00F7_1362:
	branch Test(GT,SZO) l00F7_136A
	// succ:  l00F7_1364 l00F7_136A
l00F7_1364:
	SCZO = cond(ax - Mem0[ds:0x4D06:word16])
	branch Test(ULE,CZ) l00F7_1354
	// succ:  l00F7_136A l00F7_1354
l00F7_136A:
	ax = Mem0[ds:0x4D0A:word16]
	dx = Mem0[ds:0x4D0C:word16]
	SCZO = cond(Mem0[ds:0x4D08:word16] - dx)
	branch Test(LT,SO) l00F7_138D
	// succ:  l00F7_1377 l00F7_138D
l00F7_1377:
	branch Test(GT,SZO) l00F7_137F
	// succ:  l00F7_1379 l00F7_137F
l00F7_1379:
	SCZO = cond(Mem0[ds:0x4D06:word16] - ax)
	branch Test(ULE,CZ) l00F7_138D
	// succ:  l00F7_137F l00F7_138D
l00F7_137F:
	ax = Mem0[ds:0x4D06:word16]
	dx = Mem0[ds:0x4D08:word16]
	Mem0[ds:0x4D0A:word16] = ax
	Mem0[ds:0x4D0C:word16] = dx
	// succ:  l00F7_138D
l00F7_138D:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1320_exit
fn00F7_1320_exit:


// fn00F7_1398
// Return size: 4
void fn00F7_1398()
fn00F7_1398_entry:
	// succ:  l00F7_1398
l00F7_1398:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0106
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00F7_0314 (retsize: 2;)
	sp = sp + 0x0002
	di = ax
	di = di + 0x0004
	SCZO = cond(di)
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00F7_0314 (retsize: 2;)
	sp = sp + 0x0002
	ax = ax + 0x0001
	SZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	al = Mem0[ds:0x4CEE:byte]
	ax = (int16) al
	si = ax
	SCZO = cond(si - 0x0038)
	branch Test(LE,SZO) l00F7_13E2
	// succ:  l00F7_13CD l00F7_13E2
l00F7_13CD:
	ax = si - 0x0038
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0002
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	di = di + ax
	SCZO = cond(di)
	goto l00F7_1406
	// succ:  l00F7_1406
l00F7_13E2:
	SCZO = cond(si - 0x0020)
	branch Test(GE,SO) l00F7_1406
	// succ:  l00F7_13E7 l00F7_1406
l00F7_13E7:
	ax = si - 0x0020
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0002
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	di = di + ax
	SCZO = cond(di)
	ax = di
	SCZO = cond(ax - 0x0001)
	branch Test(GE,SO) l00F7_1404
	// succ:  l00F7_1401 l00F7_1404
l00F7_1401:
	ax = 0x0001
	// succ:  l00F7_1404
l00F7_1404:
	di = ax
	// succ:  l00F7_1406
l00F7_1406:
	al = Mem0[ds:0x4CED:byte]
	ax = (int16) al
	si = ax
	SCZO = cond(si - 0x0040)
	branch Test(LE,SZO) l00F7_141C
	// succ:  l00F7_1411 l00F7_141C
l00F7_1411:
	ax = si - 0x0040
	cx = 0x0003
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	goto l00F7_1432
	// succ:  l00F7_1432
l00F7_141C:
	SCZO = cond(si - 0x0020)
	branch Test(GE,SO) l00F7_1435
	// succ:  l00F7_1421 l00F7_1435
l00F7_1421:
	ax = si - 0x0020
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0002
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	// succ:  l00F7_1432
l00F7_1432:
	v18 = Mem0[ss:bp - 0x0006:word16] + ax
	Mem0[ss:bp - 0x0006:word16] = v18
	SCZO = cond(v18)
	// succ:  l00F7_1435
l00F7_1435:
	v19 = Mem0[ds:0x4CFC:word16] + di
	Mem0[ds:0x4CFC:word16] = v19
	SCZO = cond(v19)
	v20 = Mem0[ds:0x4CFE:word16] + di
	Mem0[ds:0x4CFE:word16] = v20
	SCZO = cond(v20)
	ax = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax - 0x0001)
	branch Test(GE,SO) l00F7_1448
	// succ:  l00F7_1445 l00F7_1448
l00F7_1445:
	ax = 0x0001
	// succ:  l00F7_1448
l00F7_1448:
	Mem0[ss:bp - 0x0006:word16] = ax
	v21 = Mem0[ds:0x4D02:word16] + ax
	Mem0[ds:0x4D02:word16] = v21
	SCZO = cond(v21)
	ax = Mem0[ds:0x4D02:word16]
	Mem0[ds:0x4D00:word16] = ax
	v22 = Mem0[ds:0x4D04:word16] + 0x0001
	Mem0[ds:0x4D04:word16] = v22
	SZO = cond(v22)
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	ax = bp - 0x0106
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0019
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D04:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	si = 0x063C
	dx = Mem0[ss:bp - 0x0004:word16]
	// succ:  l00F7_1492
l00F7_1492:
	ax = Mem0[ds:0x4D04:word16]
	ax = ax >> 0x0001
	SCZO = cond(ax)
	SCZO = cond(al - Mem0[ds:si:byte])
	branch Test(ULT,C) l00F7_14E9
	// succ:  l00F7_149B l00F7_14E9
l00F7_149B:
	SCZO = cond(Mem0[ds:si + 0x0002:byte] - 0xFF)
	branch Test(EQ,Z) l00F7_14AC
	// succ:  l00F7_14A1 l00F7_14AC
l00F7_14A1:
	si = si + 0x000C
	SCZO = cond(si)
	SCZO = cond(si - 0x07BC)
	branch Test(ULT,C) l00F7_1492
	// succ:  l00F7_14AA l00F7_1492
l00F7_14AA:
	goto l00F7_14E9
	// succ:  l00F7_14E9
l00F7_14AC:
	ax = 0x2308
	dx = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l00F7_14E9
	// succ:  l00F7_14C6 l00F7_14E9
l00F7_14C6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0133
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetActiveWindow()
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = ax
	DialogBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	FreeProcInstance(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	// succ:  l00F7_14E9
l00F7_14E9:
	call fn01D7_3914 (retsize: 4;)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1398_exit
fn00F7_1398_exit:


// fn00F7_14F8
// Return size: 4
void fn00F7_14F8()
fn00F7_14F8_entry:
	// succ:  l00F7_14F8
l00F7_14F8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	v10 = Mem0[ds:0x4D06:word16] - ax
	Mem0[ds:0x4D06:word16] = v10
	SCZO = cond(v10)
	v12 = Mem0[ds:0x4D08:word16] - dx - C
	Mem0[ds:0x4D08:word16] = v12
	SCZO = cond(v12)
	SCZO = cond(Mem0[ds:0x4D08:word16] - 0x0000)
	branch Test(GT,SZO) l00F7_152E
	// succ:  l00F7_151A l00F7_152E
l00F7_151A:
	branch Test(LT,SO) l00F7_1523
	// succ:  l00F7_151C l00F7_1523
l00F7_151C:
	SCZO = cond(Mem0[ds:0x4D06:word16] - 0x0000)
	branch Test(NE,Z) l00F7_152E
	// succ:  l00F7_1523 l00F7_152E
l00F7_1523:
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1E96 (retsize: 4;)
	sp = sp + 0x0002
	goto l00F7_1552
	// succ:  l00F7_1552
l00F7_152E:
	SCZO = cond(Mem0[ds:0x4D04:word16] - 0x0001)
	branch Test(LE,SZO) l00F7_1552
	// succ:  l00F7_1535 l00F7_1552
l00F7_1535:
	sp = sp - 0x0002
	call fn00F7_12E2 (retsize: 2;)
	SCZO = cond(dx - Mem0[ds:0x4D08:word16])
	branch Test(LT,SO) l00F7_1552
	// succ:  l00F7_153F l00F7_1552
l00F7_153F:
	branch Test(GT,SZO) l00F7_1547
	// succ:  l00F7_1541 l00F7_1547
l00F7_1541:
	SCZO = cond(ax - Mem0[ds:0x4D06:word16])
	branch Test(ULE,CZ) l00F7_1552
	// succ:  l00F7_1547 l00F7_1552
l00F7_1547:
	sp = sp - 0x0002
	call fn00F7_155C (retsize: 2;)
	SCZO = cond(Mem0[ds:0x4D04:word16] - 0x0001)
	branch Test(GT,SZO) l00F7_1535
	// succ:  l00F7_1552 l00F7_1535
l00F7_1552:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_14F8_exit
fn00F7_14F8_exit:


// fn00F7_155C
// Return size: 4
void fn00F7_155C()
fn00F7_155C_entry:
	// succ:  l00F7_155C
l00F7_155C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0104
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00F7_0314 (retsize: 2;)
	sp = sp + 0x0002
	si = ax
	si = si + 0x0004
	SCZO = cond(si)
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00F7_0314 (retsize: 2;)
	sp = sp + 0x0002
	di = ax
	di = di + 0x0001
	SZO = cond(di)
	al = Mem0[ds:0x4CEE:byte]
	ax = (int16) al
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(ax - 0x0038)
	branch Test(LE,SZO) l00F7_15A3
	// succ:  l00F7_1590 l00F7_15A3
l00F7_1590:
	ax = ax - 0x0038
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0002
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	si = si + ax
	SCZO = cond(si)
	// succ:  l00F7_15A3
l00F7_15A3:
	al = Mem0[ds:0x4CED:byte]
	ax = (int16) al
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(ax - 0x0040)
	branch Test(LE,SZO) l00F7_15C2
	// succ:  l00F7_15AF l00F7_15C2
l00F7_15AF:
	ax = ax - 0x0040
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0002
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	di = di + ax
	SCZO = cond(di)
	// succ:  l00F7_15C2
l00F7_15C2:
	v17 = Mem0[ds:0x4CFC:word16] - si
	Mem0[ds:0x4CFC:word16] = v17
	SCZO = cond(v17)
	v18 = Mem0[ds:0x4CFE:word16] - si
	Mem0[ds:0x4CFE:word16] = v18
	SCZO = cond(v18)
	v19 = Mem0[ds:0x4D02:word16] - di
	Mem0[ds:0x4D02:word16] = v19
	SCZO = cond(v19)
	v20 = Mem0[ds:0x4D00:word16] - di
	Mem0[ds:0x4D00:word16] = v20
	SCZO = cond(v20)
	v21 = Mem0[ds:0x4D04:word16] - 0x0001
	Mem0[ds:0x4D04:word16] = v21
	SZO = cond(v21)
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x002F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D04:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	call fn01D7_3914 (retsize: 4;)
	SCZO = cond(Mem0[ds:0x4CFC:word16] - 0x0000)
	branch Test(GT,SZO) l00F7_161E
	// succ:  l00F7_1615 l00F7_161E
l00F7_1615:
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1E96 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l00F7_161E
l00F7_161E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_155C_exit
fn00F7_155C_exit:


// fn00F7_1628
// Return size: 4
void fn00F7_1628()
fn00F7_1628_entry:
	// succ:  l00F7_1628
l00F7_1628:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l00F7_1650
	// succ:  l00F7_163D l00F7_1650
l00F7_163D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	call fn00F7_1268 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00F7_1650
	// succ:  l00F7_164B l00F7_1650
l00F7_164B:
	ax = ax - ax
	SCZO = cond(ax)
	goto l00F7_16AA
	// succ:  l00F7_16AA
l00F7_1650:
	SCZO = cond(Mem0[ds:0x4942:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_165C
	// succ:  l00F7_1657 l00F7_165C
l00F7_1657:
	ax = 0x0001
	goto l00F7_16AA
	// succ:  l00F7_16AA
l00F7_165C:
	si = Mem0[ss:bp + 0x0008:word16]
	di = Mem0[ss:bp + 0x000A:word16]
	cl = 0x06
	bx = di
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + si
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0CE3:byte] & 0x04)
	C = false
	branch Test(NE,Z) l00F7_1699
	// succ:  l00F7_1677 l00F7_1699
l00F7_1677:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn00F7_1178 (retsize: 2;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	call fn018F_2C98 (retsize: 4;)
	sp = sp + 0x0002
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - Mem0[ss:bp - 0x0004:word16])
	branch Test(ULT,C) l00F7_164B
	// succ:  l00F7_1699 l00F7_164B
l00F7_1699:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	// succ:  l00F7_16AA
l00F7_16AA:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1628_exit
fn00F7_1628_exit:


// fn00F7_16B6
// Return size: 4
void fn00F7_16B6()
fn00F7_16B6_entry:
	// succ:  l00F7_16B6
l00F7_16B6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	cx = Mem0[ds:bx + 0x0071:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(NE,Z) l00F7_16D6
	// succ:  l00F7_16D0 l00F7_16D6
l00F7_16D0:
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (int32) ax
	goto l00F7_16DB
	// succ:  l00F7_16DB
l00F7_16D6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn00F7_1700 (retsize: 2;)
	sp = sp + 0x0002
l00F7_16DB:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_16B6_exit
fn00F7_16B6_exit:


// fn00F7_16E4
// Return size: 4
void fn00F7_16E4()
fn00F7_16E4_entry:
	// succ:  l00F7_16E4
l00F7_16E4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ds:0x4C62:word16]
	dx = Mem0[ds:0x4C64:word16]
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_16E4_exit
fn00F7_16E4_exit:


// fn00F7_1700
// Return size: 4
void fn00F7_1700()
fn00F7_1700_entry:
	// succ:  l00F7_1700
l00F7_1700:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = ax
	si = 0x0001
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - ax)
	branch Test(NE,Z) l00F7_1722
	// succ:  l00F7_171F l00F7_1722
l00F7_171F:
	dx_ax = (int32) ax
	goto l00F7_175E
	// succ:  l00F7_175E
l00F7_1722:
	bx = Mem0[ss:bp + 0x0006:word16]
	di = Mem0[ds:bx:word16]
	di = di + 0x002B
	SCZO = cond(di)
	Mem0[ss:bp - 0x0004:word16] = 0x0004
	// succ:  l00F7_172F
l00F7_172F:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = di + 0x0005
	SCZO = cond(di)
	bx = Mem0[ds:di - 0x0005:word16]
	bx = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0012:word16]
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	v15 = Mem0[ss:bp - 0x0008:word16] + ax
	Mem0[ss:bp - 0x0008:word16] = v15
	SCZO = cond(v15)
	v17 = Mem0[ss:bp - 0x0006:word16] + dx + C
	Mem0[ss:bp - 0x0006:word16] = v17
	SCZO = cond(v17)
	ax = 0x000A
	dx_ax = si *u ax
	SCZO = cond(dx_ax)
	si = ax
	v18 = Mem0[ss:bp - 0x0004:word16] - 0x0001
	Mem0[ss:bp - 0x0004:word16] = v18
	SZO = cond(v18)
	branch Test(NE,Z) l00F7_172F
	// succ:  l00F7_1758 l00F7_172F
l00F7_1758:
	ax = Mem0[ss:bp - 0x0008:word16]
	dx = Mem0[ss:bp - 0x0006:word16]
	// succ:  l00F7_175E
l00F7_175E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1700_exit
fn00F7_1700_exit:


// fn00F7_176A
// Return size: 4
void fn00F7_176A()
fn00F7_176A_entry:
	// succ:  l00F7_176A
l00F7_176A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	si = Mem0[ds:bx + 0x0071:word16]
	sp = sp - 0x0002
	call fn00F7_16B6 (retsize: 2;)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	SCZO = cond(dx - Mem0[ss:bp + 0x0008:word16])
	branch Test(UGT,CZ) l00F7_17B6
	// succ:  l00F7_1791 l00F7_17B6
l00F7_1791:
	branch Test(ULT,C) l00F7_1798
	// succ:  l00F7_1793 l00F7_1798
l00F7_1793:
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(UGE,C) l00F7_17B6
	// succ:  l00F7_1798 l00F7_17B6
l00F7_1798:
	ax = ax - Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp + 0x0008:word16] - C
	SCZO = cond(dx)
	v15 = Mem0[ds:0x4C62:word16] + ax
	Mem0[ds:0x4C62:word16] = v15
	SCZO = cond(v15)
	v16 = Mem0[ds:0x4C64:word16] + dx + C
	Mem0[ds:0x4C64:word16] = v16
	SCZO = cond(v16)
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ss:bp + 0x0006:word16] = ax
	Mem0[ss:bp + 0x0008:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l00F7_1815
	// succ:  l00F7_17B6 l00F7_1815
l00F7_17B6:
	bx = Mem0[ds:si:word16]
	di = Mem0[ds:bx + 0x002B:word16]
	bx = Mem0[ds:bx + 0x002B:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x0012:word16]
	dx = Mem0[ds:bx + 0x0014:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	SCZO = cond(dx - Mem0[ss:bp + 0x0008:word16])
	branch Test(UGT,CZ) l00F7_17F1
	// succ:  l00F7_17D1 l00F7_17F1
l00F7_17D1:
	branch Test(ULT,C) l00F7_17D8
	// succ:  l00F7_17D3 l00F7_17D8
l00F7_17D3:
	SCZO = cond(ax - Mem0[ss:bp + 0x0006:word16])
	branch Test(UGE,C) l00F7_17F1
	// succ:  l00F7_17D8 l00F7_17F1
l00F7_17D8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00F7_1822 (retsize: 2;)
	sp = sp + 0x000C
	bx = Mem0[ds:di:word16]
	v18 = Mem0[ds:bx + 0x0012:word16] + ax
	Mem0[ds:bx + 0x0012:word16] = v18
	SCZO = cond(v18)
	v19 = Mem0[ds:bx + 0x0014:word16] + dx + C
	Mem0[ds:bx + 0x0014:word16] = v19
	SCZO = cond(v19)
	// succ:  l00F7_17F1
l00F7_17F1:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	bx = Mem0[ds:di:word16]
	v20 = Mem0[ds:bx + 0x0012:word16] - ax
	Mem0[ds:bx + 0x0012:word16] = v20
	SCZO = cond(v20)
	v21 = Mem0[ds:bx + 0x0014:word16] - dx - C
	Mem0[ds:bx + 0x0014:word16] = v21
	SCZO = cond(v21)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_044A (retsize: 4;)
	sp = sp + 0x000E
	call fn0077_1C96 (retsize: 4;)
	// succ:  l00F7_1815
l00F7_1815:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_176A_exit
fn00F7_176A_exit:


// fn00F7_1822
// Return size: 4
void fn00F7_1822()
fn00F7_1822_entry:
	// succ:  l00F7_1822
l00F7_1822:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0010:word16]
	bx = Mem0[ss:bp + 0x0006:word16]
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx + Mem0[ds:si:word16]
	SCZO = cond(bx)
	di = Mem0[ds:bx + 0x002B:word16]
	ax = 0x000A
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp + 0x000C:word16]
	dx = Mem0[ss:bp + 0x000E:word16]
	ax = ax - Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp + 0x000A:word16] - C
	SCZO = cond(dx)
	ax = ax + 0x0009
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = bx
	call fn004F_0A70 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	bx = Mem0[ss:bp - 0x000A:word16]
	bx = Mem0[ds:bx + 0x002B:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx + 0x0014:word16] - dx)
	branch Test(GT,SZO) l00F7_189C
	// succ:  l00F7_1879 l00F7_189C
l00F7_1879:
	branch Test(LT,SO) l00F7_1880
	// succ:  l00F7_187B l00F7_1880
l00F7_187B:
	SCZO = cond(Mem0[ds:bx + 0x0012:word16] - ax)
	branch Test(UGE,C) l00F7_189C
	// succ:  l00F7_1880 l00F7_189C
l00F7_1880:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ds:di:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0012:word16]
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00F7_1822 (retsize: 2;)
	bx = Mem0[ds:di:word16]
	v16 = Mem0[ds:bx + 0x0012:word16] + ax
	Mem0[ds:bx + 0x0012:word16] = v16
	SCZO = cond(v16)
	v17 = Mem0[ds:bx + 0x0014:word16] + dx + C
	Mem0[ds:bx + 0x0014:word16] = v17
	SCZO = cond(v17)
	// succ:  l00F7_189C
l00F7_189C:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	bx = Mem0[ds:di:word16]
	v18 = Mem0[ds:bx + 0x0012:word16] - ax
	Mem0[ds:bx + 0x0012:word16] = v18
	SCZO = cond(v18)
	v19 = Mem0[ds:bx + 0x0014:word16] - dx - C
	Mem0[ds:bx + 0x0014:word16] = v19
	SCZO = cond(v19)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = ax
	bx = dx
	ax = ax << 0x0001
	SCZO = cond(ax)
	v21 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v21
	ax = ax << 0x0001
	SCZO = cond(ax)
	v22 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v22
	ax = ax << 0x0001
	SCZO = cond(ax)
	v23 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v23
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + bx + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_044A (retsize: 4;)
	sp = sp + 0x000E
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	cx = ax
	bx = dx
	ax = ax << 0x0001
	SCZO = cond(ax)
	v24 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v24
	ax = ax << 0x0001
	SCZO = cond(ax)
	v25 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v25
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + bx + C
	SCZO = cond(dx)
	ax = ax << 0x0001
	SCZO = cond(ax)
	v26 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v26
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1822_exit
fn00F7_1822_exit:


// fn00F7_18F6
// Return size: 4
void fn00F7_18F6()
fn00F7_18F6_entry:
	// succ:  l00F7_18F6
l00F7_18F6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	si = Mem0[ds:bx + 0x0071:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l00F7_1918
	// succ:  l00F7_1912 l00F7_1918
l00F7_1912:
	ax = 0x032F
	goto l00F7_194B
	// succ:  l00F7_194B
l00F7_1918:
	di = Mem0[ss:bp + 0x0006:word16]
	ax = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	bx = Mem0[ds:si:word16]
	ax = Mem0[ds:bx + 0x002B + di:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00F7_1932
	// succ:  l00F7_192F l00F7_1932
l00F7_192F:
	goto l00F7_19D4
	// succ:  l00F7_19D4
l00F7_1932:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn0137_0326 (retsize: 4;)
	sp = sp + 0x000A
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00F7_19AC
	// succ:  l00F7_1948 l00F7_19AC
l00F7_1948:
	ax = 0x032E
	// succ:  l00F7_194B
l00F7_194B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0000 (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn0147_20D8 (retsize: 4;)
	sp = sp + 0x0008
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x006C:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00F7_1996
	// succ:  l00F7_1981 l00F7_1996
l00F7_1981:
	ax = 0x01DB
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l00F7_198E
l00F7_198E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0137_0066 (retsize: 4;)
	sp = sp + 0x0002
	goto l00F7_19D4
	// succ:  l00F7_19D4
l00F7_1996:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00F7_19D4
	// succ:  l00F7_19A9 l00F7_19D4
l00F7_19A9:
	goto l00F7_198E
	// succ:  l00F7_198E
l00F7_19AC:
	ax = Mem0[ss:bp + 0x0008:word16]
	dx = Mem0[ss:bp + 0x000A:word16]
	bx = Mem0[ss:bp - 0x0004:word16]
	bx = Mem0[ds:bx:word16]
	v15 = Mem0[ds:bx + 0x0012:word16] + ax
	Mem0[ds:bx + 0x0012:word16] = v15
	SCZO = cond(v15)
	v16 = Mem0[ds:bx + 0x0014:word16] + dx + C
	Mem0[ds:bx + 0x0014:word16] = v16
	SCZO = cond(v16)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_044A (retsize: 4;)
	sp = sp + 0x000E
	call fn0077_1C96 (retsize: 4;)
	// succ:  l00F7_19D4
l00F7_19D4:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_18F6_exit
fn00F7_18F6_exit:


// fn00F7_19E0
// Return size: 4
void fn00F7_19E0()
fn00F7_19E0_entry:
	// succ:  l00F7_19E0
l00F7_19E0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	ax = 0x000A
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn004F_0C18 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l00F7_1A10
	// succ:  l00F7_1A05 l00F7_1A10
l00F7_1A05:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00F7_18F6 (retsize: 2;)
	sp = sp + 0x0006
l00F7_1A10:
	ax = 0x000A
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B98 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0C18 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l00F7_1A3B
	// succ:  l00F7_1A2F l00F7_1A3B
l00F7_1A2F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00F7_18F6 (retsize: 2;)
	sp = sp + 0x0006
l00F7_1A3B:
	ax = 0x000A
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B98 (retsize: 4;)
	sp = sp + 0x0006
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l00F7_1A5C
	// succ:  l00F7_1A4E l00F7_1A5C
l00F7_1A4E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn00F7_18F6 (retsize: 2;)
	sp = sp + 0x0006
l00F7_1A5C:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_19E0_exit
fn00F7_19E0_exit:


// fn00F7_1A66
// Return size: 4
void fn00F7_1A66()
fn00F7_1A66_entry:
	// succ:  l00F7_1A66
l00F7_1A66:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0034
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	cx = 0x0032
	di = bp - 0x0034
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l00F7_1A82
l00F7_1A82:
	branch cx == 0x0000 l00F7_1A84
	// succ:  l00F7_1A82_1 l00F7_1A84
l00F7_1A82_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l00F7_1A82
	// succ:  l00F7_1A82
l00F7_1A84:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_1A9E
	// succ:  l00F7_1A8A l00F7_1A9E
l00F7_1A8A:
	ax = Mem0[ds:0x414C:word16]
	dx_ax = si *u ax
	SCZO = cond(dx_ax)
	ax = ax + 0x0024
	SCZO = cond(ax)
	cx = 0x0048
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	goto l00F7_1AA0
	// succ:  l00F7_1AA0
l00F7_1A9E:
	ax = si
	// succ:  l00F7_1AA0
l00F7_1AA0:
	Mem0[ss:bp - 0x0034:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0xFED4
	SZO = cond(ax)
	C = false
	ax = ax + 0x02BC
	SCZO = cond(ax)
	Mem0[ss:bp - 0x002C:word16] = ax
	Mem0[ss:bp - 0x0023:byte] = 0x12
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l00F7_1AC8
	// succ:  l00F7_1AC2 l00F7_1AC8
l00F7_1AC2:
	ax = 0x1AE8
	goto l00F7_1ACB
	// succ:  l00F7_1ACB
l00F7_1AC8:
	ax = 0x1AF8
	// succ:  l00F7_1ACB
l00F7_1ACB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	lstrcpy(Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	ax = bp - 0x0034
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateFontIndirect(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1A66_exit
fn00F7_1A66_exit:


// fn00F7_1B00
// Return size: 4
void fn00F7_1B00()
fn00F7_1B00_entry:
	// succ:  l00F7_1B00
l00F7_1B00:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ds:0x4DEA:word16]
	ax = Mem0[ds:bx:word16]
	cx = ax
	ax = ax + 0x0073
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	cx = cx + 0x0028
	SCZO = cond(cx)
	si = cx
	SCZO = cond(cx - ax)
	branch Test(UGE,C) l00F7_1BA0
	// succ:  l00F7_1B26 l00F7_1BA0
l00F7_1B26:
	di = Mem0[ss:bp + 0x000A:word16]
	// succ:  l00F7_1B29
l00F7_1B29:
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_1B60
	// succ:  l00F7_1B2F l00F7_1B60
l00F7_1B2F:
	bx = Mem0[ds:si + 0x0003:word16]
	dx = Mem0[ds:bx:word16]
	bx = Mem0[ds:bx:word16]
	ax = di
	SCZO = cond(Mem0[ds:bx:byte] - al)
	branch Test(NE,Z) l00F7_1B46
	// succ:  l00F7_1B3C l00F7_1B46
l00F7_1B3C:
	al = Mem0[ss:bp + 0x0008:byte]
	bx = dx
	SCZO = cond(Mem0[ds:bx + 0x0001:byte] - al)
	branch Test(EQ,Z) l00F7_1B6C
	// succ:  l00F7_1B46 l00F7_1B6C
l00F7_1B46:
	bx = dx
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l00F7_1B60
	// succ:  l00F7_1B4E l00F7_1B60
l00F7_1B4E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0003:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn00F7_1BAE (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00F7_1B9A
	// succ:  l00F7_1B60 l00F7_1B9A
l00F7_1B60:
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x0004:word16])
	branch Test(ULT,C) l00F7_1B29
	// succ:  l00F7_1B68 l00F7_1B29
l00F7_1B68:
	goto l00F7_1BA0
	// succ:  l00F7_1BA0
l00F7_1B6C:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_1B9A
	// succ:  l00F7_1B72 l00F7_1B9A
l00F7_1B72:
	di = Mem0[ds:si + 0x0003:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_06D4 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0137_0066 (retsize: 4;)
	sp = sp + 0x0002
	call fn0087_04C4 (retsize: 4;)
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x02)
	branch Test(NE,Z) l00F7_1B9A
	// succ:  l00F7_1B95 l00F7_1B9A
l00F7_1B95:
	call fn0087_08FA (retsize: 4;)
	// succ:  l00F7_1B9A
l00F7_1B9A:
	ax = 0x0001
	goto l00F7_1BA2
	// succ:  l00F7_1BA2
l00F7_1BA0:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00F7_1BA2
l00F7_1BA2:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1B00_exit
fn00F7_1B00_exit:


// fn00F7_1BAE
// Return size: 4
void fn00F7_1BAE()
fn00F7_1BAE_entry:
	// succ:  l00F7_1BAE
l00F7_1BAE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x000C:word16]
	si = Mem0[ds:bx:word16]
	ax = Mem0[ds:si + 0x0024:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0028
	SCZO = cond(si)
	Mem0[ss:bp - 0x0006:word16] = si
	ax = si
	cx = Mem0[ds:bx:word16]
	cx = cx + 0x0028
	SCZO = cond(cx)
	si = cx
	SCZO = cond(ax - cx)
	branch Test(ULE,CZ) l00F7_1C5E
	// succ:  l00F7_1BE2 l00F7_1C5E
l00F7_1BE2:
	di = Mem0[ss:bp + 0x000A:word16]
	// succ:  l00F7_1BE5
l00F7_1BE5:
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_1C1C
	// succ:  l00F7_1BEB l00F7_1C1C
l00F7_1BEB:
	bx = Mem0[ds:si + 0x0003:word16]
	dx = Mem0[ds:bx:word16]
	bx = Mem0[ds:bx:word16]
	ax = di
	SCZO = cond(Mem0[ds:bx:byte] - al)
	branch Test(NE,Z) l00F7_1C02
	// succ:  l00F7_1BF8 l00F7_1C02
l00F7_1BF8:
	al = Mem0[ss:bp + 0x0008:byte]
	bx = dx
	SCZO = cond(Mem0[ds:bx + 0x0001:byte] - al)
	branch Test(EQ,Z) l00F7_1C28
	// succ:  l00F7_1C02 l00F7_1C28
l00F7_1C02:
	bx = dx
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l00F7_1C1C
	// succ:  l00F7_1C0A l00F7_1C1C
l00F7_1C0A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0003:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn00F7_1BAE (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00F7_1C59
	// succ:  l00F7_1C1C l00F7_1C59
l00F7_1C1C:
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x0006:word16])
	branch Test(ULT,C) l00F7_1BE5
	// succ:  l00F7_1C24 l00F7_1BE5
l00F7_1C24:
	goto l00F7_1C5E
	// succ:  l00F7_1C5E
l00F7_1C28:
	cx = si
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_1C59
	// succ:  l00F7_1C30 l00F7_1C59
l00F7_1C30:
	bx = cx
	si = Mem0[ds:bx + 0x0003:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_06D4 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0137_0066 (retsize: 4;)
	sp = sp + 0x0002
	call fn0087_04C4 (retsize: 4;)
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x02)
	branch Test(NE,Z) l00F7_1C59
	// succ:  l00F7_1C54 l00F7_1C59
l00F7_1C54:
	call fn0087_08FA (retsize: 4;)
	// succ:  l00F7_1C59
l00F7_1C59:
	ax = 0x0001
	goto l00F7_1C60
	// succ:  l00F7_1C60
l00F7_1C5E:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00F7_1C60
l00F7_1C60:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1BAE_exit
fn00F7_1BAE_exit:


// fn00F7_1CD2
// Return size: 4
void fn00F7_1CD2()
fn00F7_1CD2_entry:
	// succ:  l00F7_1CD2
l00F7_1CD2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetModuleHandle(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	GetModuleFileName(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp + 0x0008:word16]
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l00F7_1D04
l00F7_1D04:
	branch cx == 0x0000 l00F7_1D06
	// succ:  l00F7_1D04_1 l00F7_1D06
l00F7_1D04_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l00F7_1D04
	// succ:  l00F7_1D06 l00F7_1D04
l00F7_1D06:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	ax = cx
	ax = ax + Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[ss:bp + 0x0008:word16])
	branch Test(UGT,CZ) l00F7_1D18
	// succ:  l00F7_1D14 l00F7_1D18
l00F7_1D14:
	bx = ax
	goto l00F7_1D25
	// succ:  l00F7_1D25
l00F7_1D18:
	bx = ax
	// succ:  l00F7_1D1A
l00F7_1D1A:
	SCZO = cond(Mem0[ds:bx:byte] - 0x5C)
	branch Test(EQ,Z) l00F7_1D25
	// succ:  l00F7_1D1F l00F7_1D25
l00F7_1D1F:
	bx = bx - 0x0001
	SZO = cond(bx)
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - bx)
	branch Test(ULT,C) l00F7_1D1A
	// succ:  l00F7_1D25 l00F7_1D1A
l00F7_1D25:
	Mem0[ds:bx:byte] = 0x00
	ax = bx
	ax = ax - Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	Mem0[ds:bx:byte] = 0x00
	ax = bx
	ax = ax - Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1CD2_exit fn00F7_1CD2_exit
fn00F7_1CD2_exit:


// fn00F7_1D3A
// Return size: 4
void fn00F7_1D3A()
fn00F7_1D3A_entry:
	// succ:  l00F7_1D3A
l00F7_1D3A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	di = Mem0[ss:bp + 0x000A:word16]
	// succ:  l00F7_1D4F
l00F7_1D4F:
	es = Mem0[ss:bp + 0x0008:selector]
	bx = si
	si = si + 0x0001
	SZO = cond(si)
	al = Mem0[es:bx:byte]
	es = Mem0[ss:bp + 0x000C:selector]
	bx = di
	di = di + 0x0001
	SZO = cond(di)
	Mem0[es:bx:byte] = al
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l00F7_1D4F
	// succ:  l00F7_1D65 l00F7_1D4F
l00F7_1D65:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1D3A_exit
fn00F7_1D3A_exit:


// fn00F7_1D72
// Return size: 4
void fn00F7_1D72()
fn00F7_1D72_entry:
	// succ:  l00F7_1D72
l00F7_1D72:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0152
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = bp - 0x0152
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x0152
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1D72_exit
fn00F7_1D72_exit:


// fn00F7_1DBA
// Return size: 4
void fn00F7_1DBA()
fn00F7_1DBA_entry:
	// succ:  l00F7_1DBA
l00F7_1DBA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = 0x0001
	// succ:  l00F7_1DCC
l00F7_1DCC:
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dl = Mem0[ds:0x4D1C:byte]
	dh = dh - dh
	SCZO = cond(dh)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	dl = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn00F7_11AE (retsize: 2;)
	sp = sp + 0x000A
	cl = 0x06
	bx = Mem0[ss:bp - 0x0008:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00F7_1E40
	// succ:  l00F7_1E02 l00F7_1E40
l00F7_1E02:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	Mem0[ss:bp - 0x0004:word16] = bx
	bx = Mem0[ds:bx:word16]
	si = Mem0[ds:bx:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l00F7_1E40
	// succ:  l00F7_1E15 l00F7_1E40
l00F7_1E15:
	bx = Mem0[ds:si:word16]
	SZO = cond(Mem0[ds:bx + 0x000B:byte] & 0x02)
	C = false
	branch Test(NE,Z) l00F7_1E40
	// succ:  l00F7_1E1D l00F7_1E40
l00F7_1E1D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn018F_2B3A (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00F7_1E40
	// succ:  l00F7_1E27 l00F7_1E40
l00F7_1E27:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax | Mem0[ss:bp + 0x0008:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00F7_1E48
	// succ:  l00F7_1E2F l00F7_1E48
l00F7_1E2F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn018F_2C0C (retsize: 4;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00F7_1E48
	// succ:  l00F7_1E40 l00F7_1E48
l00F7_1E40:
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - 0x0009)
	branch Test(LT,SO) l00F7_1DCC
	// succ:  l00F7_1E46 l00F7_1DCC
l00F7_1E46:
	goto l00F7_1E84
	// succ:  l00F7_1E84
l00F7_1E48:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l00F7_1E7F
	// succ:  l00F7_1E4E l00F7_1E7F
l00F7_1E4E:
	bx = Mem0[ss:bp - 0x0004:word16]
	di = Mem0[ds:bx:word16]
	Mem0[ds:di:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	call fn0177_1A2A (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l00F7_1E7F
	// succ:  l00F7_1E62 l00F7_1E7F
l00F7_1E62:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn0177_0196 (retsize: 4;)
	sp = sp + 0x0002
	cl = 0x06
	bx = Mem0[ss:bp - 0x0008:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ds:bx + 0x0CE4:byte] = 0x00
	// succ:  l00F7_1E7F
l00F7_1E7F:
	ax = si
	goto l00F7_1E86
	// succ:  l00F7_1E86
l00F7_1E84:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l00F7_1E86
l00F7_1E86:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1DBA_exit
fn00F7_1DBA_exit:


// fn00F7_1E92
// Return size: 4
void fn00F7_1E92()
fn00F7_1E92_entry:
	// succ:  l00F7_1E92
l00F7_1E92:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4140:word16] - 0x0000)
	branch Test(NE,Z) l00F7_1EB4
	// succ:  l00F7_1EA8 l00F7_1EB4
l00F7_1EA8:
	Mem0[ds:0x4140:word16] = 0x0001
	ax = Mem0[ds:0x413C:word16]
	goto l00F7_1EFB
	// succ:  l00F7_1EFB
l00F7_1EB4:
	SCZO = cond(Mem0[ds:0x4142:word16] - 0x0000)
	branch Test(NE,Z) l00F7_1EC6
	// succ:  l00F7_1EBB l00F7_1EC6
l00F7_1EBB:
	Mem0[ds:0x4142:word16] = 0x0001
	ax = Mem0[ds:0x413E:word16]
	goto l00F7_1EFB
	// succ:  l00F7_1EFB
l00F7_1EC6:
	di = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	CreateCompatibleDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l00F7_1EDA
	// succ:  l00F7_1ED5 l00F7_1EDA
l00F7_1ED5:
	ax = ax - ax
	SCZO = cond(ax)
	goto l00F7_1EFB
	// succ:  l00F7_1EFB
l00F7_1EDA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateCompatibleBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l00F7_1EF2
	// succ:  l00F7_1EE9 l00F7_1EF2
l00F7_1EE9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	goto l00F7_1ED5
	// succ:  l00F7_1ED5
l00F7_1EF2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	ax = si
	// succ:  l00F7_1EFB
l00F7_1EFB:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1E92_exit
fn00F7_1E92_exit:


// fn00F7_1F08
// Return size: 4
void fn00F7_1F08()
fn00F7_1F08_entry:
	// succ:  l00F7_1F08
l00F7_1F08:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(Mem0[ds:0x413C:word16] - si)
	branch Test(NE,Z) l00F7_1F28
	// succ:  l00F7_1F1F l00F7_1F28
l00F7_1F1F:
	Mem0[ds:0x4140:word16] = 0x0000
	goto l00F7_1F4C
	// succ:  l00F7_1F4C
l00F7_1F28:
	SCZO = cond(Mem0[ds:0x413E:word16] - si)
	branch Test(NE,Z) l00F7_1F36
	// succ:  l00F7_1F2E l00F7_1F36
l00F7_1F2E:
	Mem0[ds:0x4142:word16] = 0x0000
	goto l00F7_1F4C
	// succ:  l00F7_1F4C
l00F7_1F36:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4148:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DeleteDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l00F7_1F4C
l00F7_1F4C:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1F08_exit
fn00F7_1F08_exit:


// fn00F7_1F58
// Return size: 4
void fn00F7_1F58()
fn00F7_1F58_entry:
	// succ:  l00F7_1F58
l00F7_1F58:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = si - si
	SCZO = cond(si)
	goto l00F7_1F8F
	// succ:  l00F7_1F8F
l00F7_1F6C:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l00F7_1FA0
	// succ:  l00F7_1F70 l00F7_1FA0
l00F7_1F70:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x04B6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	call fn00CF_05F2 (retsize: 4;)
	si = 0x0001
	// succ:  l00F7_1F8F
l00F7_1F8F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	LocalAlloc(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l00F7_1F6C
	// succ:  l00F7_1FA0 l00F7_1F6C
l00F7_1FA0:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1F58_exit
fn00F7_1F58_exit:


// fn00F7_1FAC
// Return size: 4
void fn00F7_1FAC()
fn00F7_1FAC_entry:
	// succ:  l00F7_1FAC
l00F7_1FAC:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	LocalFree(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn00F7_1FAC_exit
fn00F7_1FAC_exit:


// fn0107_0000
// Return size: 4
void fn0107_0000()
fn0107_0000_entry:
	// succ:  l0107_0000
l0107_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(di - 0x012C)
	branch Test(ULT,C) l0107_003C
	// succ:  l0107_0018 l0107_003C
l0107_0018:
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0107:bx + 0x4504:word16]
	si = bx
	call fn004F_0CE0 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	cx = si
	si = ax
	si = si + 0x0001
	SZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0107:bx + 0x4504:word16]
	goto l0107_0056
	// succ:  l0107_0056
l0107_003C:
	di = di << 0x0001
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0107:di + 0x4594:word16]
	call fn004F_0CE0 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	si = ax
	si = si + 0x0001
	SZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0107:di + 0x4594:word16]
	// succ:  l0107_0056
l0107_0056:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn004F_0C82 (retsize: 4;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = si
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0107_0000_exit
fn0107_0000_exit:


// fn0107_4D72
// Return size: 4
void fn0107_4D72()
fn0107_4D72_entry:
	// succ:  l0107_4D72
l0107_4D72:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0102
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0107_0000 (retsize: 2;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn0107_4DB6 (retsize: 2;)
	sp = sp + 0x000E
	ax = si
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0107_4D72_exit
fn0107_4D72_exit:


// fn0107_4DB6
// Return size: 4
void fn0107_4DB6()
fn0107_4DB6_entry:
	// succ:  l0107_4DB6
l0107_4DB6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x006C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x0012:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0010:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x000E:word16] = ax
	ax = Mem0[ss:bp + 0x000E:word16]
	Mem0[ss:bp - 0x001A:word16] = ax
	ax = Mem0[ss:bp + 0x000C:word16]
	Mem0[ss:bp - 0x0018:word16] = ax
	ax = Mem0[ss:bp + 0x000A:word16]
	Mem0[ss:bp - 0x0016:word16] = ax
	ax = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x0014:word16] = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	Mem0[ss:bp - 0x0012:word16] = ax
	// succ:  l0107_4DF7
l0107_4DF7:
	bx = Mem0[ss:bp + 0x0010:word16]
	v12 = Mem0[ss:bp + 0x0010:word16] + 0x0001
	Mem0[ss:bp + 0x0010:word16] = v12
	SZO = cond(v12)
	al = Mem0[ds:bx:byte]
	Mem0[ss:bp - 0x0003:byte] = al
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l0107_4E09
	// succ:  l0107_4E06 l0107_4E09
l0107_4E06:
	goto l0107_513A
	// succ:  l0107_513A
l0107_4E09:
	SCZO = cond(al - 0x25)
	branch Test(EQ,Z) l0107_4E10
	// succ:  l0107_4E0D l0107_4E10
l0107_4E0D:
	goto l0107_50E8
	// succ:  l0107_50E8
l0107_4E10:
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0005)
	branch Test(LT,SO) l0107_4E19
	// succ:  l0107_4E16 l0107_4E19
l0107_4E16:
	goto l0107_50E8
	// succ:  l0107_50E8
l0107_4E19:
	dx = Mem0[ss:bp - 0x0008:word16]
	// succ:  l0107_4E1C
l0107_4E1C:
	bx = Mem0[ss:bp + 0x0010:word16]
	v20 = Mem0[ss:bp + 0x0010:word16] + 0x0001
	Mem0[ss:bp + 0x0010:word16] = v20
	SZO = cond(v20)
	al = Mem0[ds:bx:byte]
	Mem0[ss:bp - 0x0003:byte] = al
	ax = (int16) al
	SCZO = cond(ax - 0x007A)
	branch Test(NE,Z) l0107_4E30
	// succ:  l0107_4E2D l0107_4E30
l0107_4E2D:
	goto l0107_505C
	// succ:  l0107_505C
l0107_4E30:
	branch Test(UGT,CZ) l0107_4DF7
	// succ:  l0107_4E32 l0107_4DF7
l0107_4E32:
	SCZO = cond(al - 0x69)
	branch Test(NE,Z) l0107_4E39
	// succ:  l0107_4E36 l0107_4E39
l0107_4E36:
	goto l0107_4F24
	// succ:  l0107_4F24
l0107_4E39:
	branch Test(GT,SZO) l0107_4E5A
	// succ:  l0107_4E3B l0107_4E5A
l0107_4E3B:
	al = al - 0x25
	SCZO = cond(al)
	branch Test(NE,Z) l0107_4E42
	// succ:  l0107_4E3F l0107_4E42
l0107_4E3F:
	goto l0107_5109
	// succ:  l0107_5109
l0107_4E42:
	al = al - 0x1F
	SCZO = cond(al)
	branch Test(EQ,Z) l0107_4E86
	// succ:  l0107_4E46 l0107_4E86
l0107_4E46:
	al = al - 0x1D
	SCZO = cond(al)
	branch Test(NE,Z) l0107_4E4D
	// succ:  l0107_4E4A l0107_4E4D
l0107_4E4A:
	goto l0107_5036
	// succ:  l0107_5036
l0107_4E4D:
	al = al - 0x02
	SCZO = cond(al)
	branch Test(NE,Z) l0107_4E54
	// succ:  l0107_4E51 l0107_4E54
l0107_4E51:
	goto l0107_4F0E
	// succ:  l0107_4F0E
l0107_4E54:
	al = al - 0x01
	SZO = cond(al)
	branch Test(EQ,Z) l0107_4E86
	// succ:  l0107_4E58 l0107_4E86
l0107_4E58:
	goto l0107_4DF7
	// succ:  l0107_4DF7
l0107_4E5A:
	al = al - 0x6C
	SCZO = cond(al)
	branch Test(EQ,Z) l0107_4E7E
	// succ:  l0107_4E5E l0107_4E7E
l0107_4E5E:
	al = al - 0x07
	SCZO = cond(al)
	branch Test(NE,Z) l0107_4E65
	// succ:  l0107_4E62 l0107_4E65
l0107_4E62:
	goto l0107_4F42
	// succ:  l0107_4F42
l0107_4E65:
	al = al - 0x01
	SZO = cond(al)
	branch Test(NE,Z) l0107_4E6C
	// succ:  l0107_4E69 l0107_4E6C
l0107_4E69:
	goto l0107_4F76
	// succ:  l0107_4F76
l0107_4E6C:
	al = al - 0x01
	SZO = cond(al)
	branch Test(NE,Z) l0107_4E73
	// succ:  l0107_4E70 l0107_4E73
l0107_4E70:
	goto l0107_4F9C
	// succ:  l0107_4F9C
l0107_4E73:
	al = al - 0x04
	SCZO = cond(al)
	branch Test(NE,Z) l0107_4E7A
	// succ:  l0107_4E77 l0107_4E7A
l0107_4E77:
	goto l0107_500C
	// succ:  l0107_500C
l0107_4E7A:
	goto l0107_4DF7
	// succ:  l0107_4DF7
l0107_4E7E:
	Mem0[ss:bp - 0x0010:word16] = 0x0001
	goto l0107_4E1C
	// succ:  l0107_4E1C
l0107_4E86:
	si = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(Mem0[ss:bp - 0x0010:word16] - 0x0000)
	branch Test(EQ,Z) l0107_4EC0
	// succ:  l0107_4E8F l0107_4EC0
l0107_4E8F:
	di = Mem0[ss:bp - 0x000A:word16]
	di = di << 0x0001
	SCZO = cond(di)
	ax = Mem0[ss:bp - 0x001A + di:word16]
	dx = Mem0[ss:bp - 0x0018 + di:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	Mem0[ss:bp - 0x000E:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = dx
	v31 = Mem0[ss:bp - 0x000A:word16] + 0x0002
	Mem0[ss:bp - 0x000A:word16] = v31
	SCZO = cond(v31)
	cx = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_041A (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0010:word16] = 0x0000
	goto l0107_4EF8
	// succ:  l0107_4EF8
l0107_4EC0:
	di = Mem0[ss:bp - 0x000A:word16]
	di = di << 0x0001
	SCZO = cond(di)
	ax = Mem0[ss:bp - 0x001A + di:word16]
	dx_ax = (int32) ax
	Mem0[ss:bp - 0x000E:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = dx
	v34 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v34
	SZO = cond(v34)
	SCZO = cond(Mem0[ss:bp - 0x0003:byte] - 0x44)
	branch Test(NE,Z) l0107_4EE8
	// succ:  l0107_4ED8 l0107_4EE8
l0107_4ED8:
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(GT,SZO) l0107_4EE8
	// succ:  l0107_4EDC l0107_4EE8
l0107_4EDC:
	branch Test(LT,SO) l0107_4EE3
	// succ:  l0107_4EDE l0107_4EE3
l0107_4EDE:
	SCZO = cond(ax - 0x000A)
	branch Test(UGE,C) l0107_4EE8
	// succ:  l0107_4EE3 l0107_4EE8
l0107_4EE3:
	si = si + 0x0001
	SZO = cond(si)
	Mem0[ds:si - 0x0001:byte] = 0x30
	// succ:  l0107_4EE8
l0107_4EE8:
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0107_4EF8
l0107_4EF8:
	di = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0107_4F01
l0107_4F01:
	branch cx == 0x0000 l0107_4F03
	// succ:  l0107_4F01_1 l0107_4F03
l0107_4F01_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0107_4F01
	// succ:  l0107_4F03 l0107_4F01
l0107_4F03:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	si = si + cx
	SCZO = cond(si)
	// succ:  l0107_4F08
l0107_4F08:
	Mem0[ss:bp - 0x0008:word16] = si
	goto l0107_4DF7
	// succ:  l0107_4DF7
l0107_4F0E:
	si = Mem0[ss:bp - 0x000A:word16]
	si = si << 0x0001
	SCZO = cond(si)
	al = Mem0[ss:bp - 0x001A + si:byte]
	bx = dx
	Mem0[ds:bx:byte] = al
	v32 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v32
	SZO = cond(v32)
	dx = dx + 0x0001
	SZO = cond(dx)
	// succ:  l0107_4F1E
l0107_4F1E:
	Mem0[ss:bp - 0x0008:word16] = dx
	goto l0107_4DF7
	// succ:  l0107_4DF7
l0107_4F24:
	si = Mem0[ss:bp - 0x0008:word16]
	ax = Mem0[ss:bp - 0x000A:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	v21 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v21
	SZO = cond(v21)
	di = ax
	di = di << 0x0001
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A + di:word16]
	// succ:  l0107_4F37
l0107_4F37:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0107_0000 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax - 0x0001
	SZO = cond(ax)
	si = si + ax
	SCZO = cond(si)
	goto l0107_4F08
	// succ:  l0107_4F08
l0107_4F42:
	si = Mem0[ss:bp - 0x000A:word16]
	si = si << 0x0001
	SCZO = cond(si)
	bx = Mem0[ss:bp - 0x001A + si:word16]
	di = bx
	si = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0107_4F55
l0107_4F55:
	branch cx == 0x0000 l0107_4F57
	// succ:  l0107_4F55_1 l0107_4F57
l0107_4F55_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0107_4F55
	// succ:  l0107_4F57 l0107_4F55
l0107_4F57:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v25 = si
	si = di
	di = v25
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0107_4F5F
l0107_4F5F:
	branch cx == 0x0000 l0107_4F61
	// succ:  l0107_4F5F_2 l0107_4F61
l0107_4F5F_2:
	v26 = Mem0[si:word16]
	Mem0[di:word16] = v26
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0107_4F5F
	// succ:  l0107_4F5F
l0107_4F61:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0107_4F63
l0107_4F63:
	branch cx == 0x0000 l0107_4F65
	// succ:  l0107_4F63_1 l0107_4F65
l0107_4F63_1:
	v27 = Mem0[si:byte]
	Mem0[di:byte] = v27
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0107_4F63
	// succ:  l0107_4F63
l0107_4F65:
	v29 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v29
	SZO = cond(v29)
	di = dx
	cx = 0xFFFF
	// succ:  l0107_4F6D
l0107_4F6D:
	branch cx == 0x0000 l0107_4F6F
	// succ:  l0107_4F6D_1 l0107_4F6F
l0107_4F6D_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0107_4F6D
	// succ:  l0107_4F6F l0107_4F6D
l0107_4F6F:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	dx = dx + cx
	SCZO = cond(dx)
	goto l0107_4F1E
	// succ:  l0107_4F1E
l0107_4F76:
	si = Mem0[ss:bp - 0x0008:word16]
	di = Mem0[ss:bp - 0x000A:word16]
	di = di << 0x0001
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A + di:word16]
	sp = sp - 0x0002
	call fn0107_5150 (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0107_4F8C
	// succ:  l0107_4F89 l0107_4F8C
l0107_4F89:
	goto l0107_4DF7
	// succ:  l0107_4DF7
l0107_4F8C:
	SCZO = cond(Mem0[ss:bp + 0x0012:word16] - si)
	branch Test(NE,Z) l0107_4F96
	// succ:  l0107_4F91 l0107_4F96
l0107_4F91:
	ax = 0x0376
	goto l0107_4F99
	// succ:  l0107_4F99
l0107_4F96:
	ax = 0x0377
	// succ:  l0107_4F99
l0107_4F99:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0107_4F37
	// succ:  l0107_4F37
l0107_4F9C:
	SCZO = cond(Mem0[ss:bp - 0x0010:word16] - 0x0000)
	branch Test(EQ,Z) l0107_4FC4
	// succ:  l0107_4FA2 l0107_4FC4
l0107_4FA2:
	si = Mem0[ss:bp - 0x000A:word16]
	di = si
	di = di << 0x0001
	SCZO = cond(di)
	ax = Mem0[ss:bp - 0x001A + di:word16]
	dx = Mem0[ss:bp - 0x0018 + di:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	Mem0[ss:bp - 0x000E:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = dx
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	Mem0[ss:bp - 0x0010:word16] = 0x0000
	goto l0107_4FE0
	// succ:  l0107_4FE0
l0107_4FC4:
	si = Mem0[ss:bp - 0x000A:word16]
	di = si
	di = di << 0x0001
	SCZO = cond(di)
	ax = Mem0[ss:bp - 0x001A + di:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	si = si + 0x0001
	SZO = cond(si)
	dx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ss:bp - 0x000E:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = dx
	// succ:  l0107_4FE0
l0107_4FE0:
	Mem0[ss:bp - 0x000A:word16] = si
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn004F_0424 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp - 0x0008:word16]
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0107_5000
l0107_5000:
	branch cx == 0x0000 l0107_5002
	// succ:  l0107_5000_1 l0107_5002
l0107_5000_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0107_5000
	// succ:  l0107_5002 l0107_5000
l0107_5002:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	v30 = Mem0[ss:bp - 0x0008:word16] + cx
	Mem0[ss:bp - 0x0008:word16] = v30
	SCZO = cond(v30)
	goto l0107_4DF7
	// succ:  l0107_4DF7
l0107_500C:
	si = Mem0[ss:bp - 0x000A:word16]
	di = si
	di = di << 0x0001
	SCZO = cond(di)
	bx = bp - 0x001A + di
	Mem0[ss:bp - 0x006C:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	call fn0107_5150 (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0107_5026
	// succ:  l0107_5023 l0107_5026
l0107_5023:
	goto l0107_4DF7
	// succ:  l0107_4DF7
l0107_5026:
	bx = Mem0[ss:bp - 0x006C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	call fn0107_517E (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0107_5036
	// succ:  l0107_5033 l0107_5036
l0107_5033:
	goto l0107_4DF7
	// succ:  l0107_4DF7
l0107_5036:
	bx = Mem0[ss:bp + 0x0010:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x25)
	branch Test(EQ,Z) l0107_5044
	// succ:  l0107_503E l0107_5044
l0107_503E:
	bx = bx + 0x0001
	SZO = cond(bx)
	SCZO = cond(Mem0[ds:bx:byte] - 0x25)
	branch Test(NE,Z) l0107_503E
	// succ:  l0107_5044 l0107_503E
l0107_5044:
	bx = bx + 0x0001
	SZO = cond(bx)
	SCZO = cond(Mem0[ds:bx:byte] - 0x69)
	branch Test(NE,Z) l0107_5078
	// succ:  l0107_504A l0107_5078
l0107_504A:
	si = Mem0[ss:bp - 0x000A:word16]
	si = si << 0x0001
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A + si:word16]
	ax = bp - 0x006A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0107_0000 (retsize: 2;)
	sp = sp + 0x0004
	goto l0107_508A
	// succ:  l0107_508A
l0107_505C:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0001)
	branch Test(NE,Z) l0107_506B
	// succ:  l0107_5062 l0107_506B
l0107_5062:
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(NE,Z) l0107_506B
	// succ:  l0107_5068 l0107_506B
l0107_5068:
	goto l0107_4DF7
	// succ:  l0107_4DF7
l0107_506B:
	bx = Mem0[ss:bp - 0x0008:word16]
	v22 = Mem0[ss:bp - 0x0008:word16] + 0x0001
	Mem0[ss:bp - 0x0008:word16] = v22
	SZO = cond(v22)
	Mem0[ds:bx:byte] = 0x73
	goto l0107_4DF7
	// succ:  l0107_4DF7
l0107_5078:
	SCZO = cond(Mem0[ds:bx:byte] - 0x73)
	branch Test(NE,Z) l0107_508A
	// succ:  l0107_507D l0107_508A
l0107_507D:
	si = Mem0[ss:bp - 0x000A:word16]
	si = si << 0x0001
	SCZO = cond(si)
	bx = Mem0[ss:bp - 0x001A + si:word16]
	al = Mem0[ds:bx:byte]
	Mem0[ss:bp - 0x006A:byte] = al
	// succ:  l0107_508A
l0107_508A:
	si = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(Mem0[ss:bp + 0x0012:word16] - si)
	branch Test(NE,Z) l0107_5098
	// succ:  l0107_5092 l0107_5098
l0107_5092:
	Mem0[ds:si:byte] = 0x41
	goto l0107_509B
	// succ:  l0107_509B
l0107_5098:
	Mem0[ds:si:byte] = 0x61
	// succ:  l0107_509B
l0107_509B:
	si = si + 0x0001
	SZO = cond(si)
	al = Mem0[ss:bp - 0x006A:byte]
	ax = (int16) al
	ax = ax - 0x004F
	SCZO = cond(ax)
	branch Test(EQ,Z) l0107_50DA
	// succ:  l0107_50A5 l0107_50DA
l0107_50A5:
	ax = ax - 0x0020
	SCZO = cond(ax)
	branch Test(EQ,Z) l0107_50DA
	// succ:  l0107_50AA l0107_50DA
l0107_50AA:
	ax = ax - 0xFFD2
	SCZO = cond(ax)
	SZO = cond(al & 0x03)
	C = false
	branch Test(NE,Z) l0107_50DF
	// succ:  l0107_50B1 l0107_50DF
l0107_50B1:
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	SCZO = cond(ax - 0x001A)
	branch Test(UGT,CZ) l0107_50DF
	// succ:  l0107_50B8 l0107_50DF
l0107_50B8:
	v28 = ax
	ax = bx
	bx = v28
	switch (v28) { l0107_50DA }
	// succ:  l0107_50DA
l0107_50DA:
	si = si + 0x0001
	SZO = cond(si)
	Mem0[ds:si - 0x0001:byte] = 0x6E
	// succ:  l0107_50DF
l0107_50DF:
	si = si + 0x0001
	SZO = cond(si)
	Mem0[ds:si - 0x0001:byte] = 0x20
	goto l0107_4F08
	// succ:  l0107_4F08
l0107_50E8:
	SCZO = cond(Mem0[ss:bp - 0x0003:byte] - 0x5C)
	branch Test(NE,Z) l0107_5109
	// succ:  l0107_50EE l0107_5109
l0107_50EE:
	bx = Mem0[ss:bp + 0x0010:word16]
	v16 = Mem0[ss:bp + 0x0010:word16] + 0x0001
	Mem0[ss:bp + 0x0010:word16] = v16
	SZO = cond(v16)
	al = Mem0[ds:bx:byte]
	Mem0[ss:bp - 0x0003:byte] = al
	ax = (int16) al
	SCZO = cond(ax - 0x0074)
	branch Test(EQ,Z) l0107_512E
	// succ:  l0107_50FF l0107_512E
l0107_50FF:
	branch Test(UGT,CZ) l0107_5109
	// succ:  l0107_5101 l0107_5109
l0107_5101:
	al = al - 0x6E
	SCZO = cond(al)
	branch Test(EQ,Z) l0107_5116
	// succ:  l0107_5105 l0107_5116
l0107_5105:
	al = al - 0x04
	SCZO = cond(al)
	branch Test(EQ,Z) l0107_5122
	// succ:  l0107_5109 l0107_5122
l0107_5109:
	si = Mem0[ss:bp - 0x0008:word16]
	al = Mem0[ss:bp - 0x0003:byte]
	si = si + 0x0001
	SZO = cond(si)
	Mem0[ds:si - 0x0001:byte] = al
	goto l0107_4F08
	// succ:  l0107_4F08
l0107_5116:
	si = Mem0[ss:bp - 0x0008:word16]
	si = si + 0x0001
	SZO = cond(si)
	Mem0[ds:si - 0x0001:byte] = 0x0A
	goto l0107_4F08
	// succ:  l0107_4F08
l0107_5122:
	si = Mem0[ss:bp - 0x0008:word16]
	si = si + 0x0001
	SZO = cond(si)
	Mem0[ds:si - 0x0001:byte] = 0x0D
	goto l0107_4F08
	// succ:  l0107_4F08
l0107_512E:
	si = Mem0[ss:bp - 0x0008:word16]
	si = si + 0x0001
	SZO = cond(si)
	Mem0[ds:si - 0x0001:byte] = 0x09
	goto l0107_4F08
	// succ:  l0107_4F08
l0107_513A:
	bx = Mem0[ss:bp - 0x0008:word16]
	Mem0[ds:bx:byte] = 0x00
	ax = Mem0[ss:bp + 0x0012:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0107_4DB6_exit
fn0107_4DB6_exit:


// fn0107_5150
// Return size: 4
void fn0107_5150()
fn0107_5150_entry:
	// succ:  l0107_5150
l0107_5150:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	dx = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(dx - 0x0367)
	branch Test(EQ,Z) l0107_5170
	// succ:  l0107_5166 l0107_5170
l0107_5166:
	SCZO = cond(dx - 0x0368)
	branch Test(EQ,Z) l0107_5170
	// succ:  l0107_516C l0107_5170
l0107_516C:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0107_5173
	// succ:  l0107_5173
l0107_5170:
	ax = 0x0001
	// succ:  l0107_5173
l0107_5173:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0107_5150_exit
fn0107_5150_exit:


// fn0107_517E
// Return size: 4
void fn0107_517E()
fn0107_517E_entry:
	// succ:  l0107_517E
l0107_517E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax - 0x01E7)
	branch Test(EQ,Z) l0107_51C7
	// succ:  l0107_5193 l0107_51C7
l0107_5193:
	branch Test(UGT,CZ) l0107_51AE
	// succ:  l0107_5195 l0107_51AE
l0107_5195:
	ax = ax - 0x0165
	SCZO = cond(ax)
	branch Test(ULT,C) l0107_51A9
	// succ:  l0107_519A l0107_51A9
l0107_519A:
	ax = ax - 0x0006
	SCZO = cond(ax)
	branch Test(ULE,CZ) l0107_51C7
	// succ:  l0107_519F l0107_51C7
l0107_519F:
	ax = ax - 0x0075
	SCZO = cond(ax)
	branch Test(ULT,C) l0107_51A9
	// succ:  l0107_51A4 l0107_51A9
l0107_51A4:
	ax = ax - 0x0002
	SCZO = cond(ax)
	branch Test(ULE,CZ) l0107_51C7
	// succ:  l0107_51A9 l0107_51C7
l0107_51A9:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0107_51CA
	// succ:  l0107_51CA
l0107_51AE:
	ax = ax - 0x0229
	SCZO = cond(ax)
	branch Test(ULT,C) l0107_51A9
	// succ:  l0107_51B3 l0107_51A9
l0107_51B3:
	ax = ax - 0x0002
	SCZO = cond(ax)
	branch Test(ULE,CZ) l0107_51C7
	// succ:  l0107_51B8 l0107_51C7
l0107_51B8:
	ax = ax - 0x002A
	SCZO = cond(ax)
	branch Test(EQ,Z) l0107_51C7
	// succ:  l0107_51BD l0107_51C7
l0107_51BD:
	ax = ax - 0x013B
	SCZO = cond(ax)
	branch Test(ULT,C) l0107_51A9
	// succ:  l0107_51C2 l0107_51A9
l0107_51C2:
	ax = ax - 0x0001
	SCZO = cond(ax)
	branch Test(UGT,CZ) l0107_51A9
	// succ:  l0107_51C7 l0107_51A9
l0107_51C7:
	ax = 0x0001
	ax = 0x0001
	// succ:  l0107_51CA
l0107_51CA:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0107_517E_exit
fn0107_517E_exit:


// fn0107_51D4
// Return size: 4
void fn0107_51D4()
fn0107_51D4_entry:
	// succ:  l0107_51D4
l0107_51D4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp + 0x0006:word16]
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0107_51F1
l0107_51F1:
	branch cx == 0x0000 l0107_51F3
	// succ:  l0107_51F1_1 l0107_51F3
l0107_51F1_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0107_51F1
	// succ:  l0107_51F3 l0107_51F1
l0107_51F3:
	cx = ~cx
	Mem0[ss:bp - 0x0008:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0107_522E
	// succ:  l0107_5205 l0107_522E
l0107_5205:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	cx = Mem0[ss:bp - 0x0008:word16]
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp - 0x0004:word16]
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0107_521D
l0107_521D:
	branch cx == 0x0000 l0107_521F
	// succ:  l0107_521D_2 l0107_521F
l0107_521D_2:
	v16 = Mem0[si:word16]
	Mem0[di:word16] = v16
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0107_521D
	// succ:  l0107_521D
l0107_521F:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0107_5221
l0107_5221:
	branch cx == 0x0000 l0107_5223
	// succ:  l0107_5221_1 l0107_5223
l0107_5221_1:
	v17 = Mem0[si:byte]
	Mem0[di:byte] = v17
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0107_5221
	// succ:  l0107_5221
l0107_5223:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x0006:word16]
	// succ:  l0107_522E
l0107_522E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0107_51D4_exit
fn0107_51D4_exit:


// fn0107_523A
// Return size: 4
void fn0107_523A()
fn0107_523A_entry:
	// succ:  l0107_523A
l0107_523A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp + 0x0006:word16]
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0107_5257
l0107_5257:
	branch cx == 0x0000 l0107_5259
	// succ:  l0107_5257_1 l0107_5259
l0107_5257_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0107_5257
	// succ:  l0107_5259 l0107_5257
l0107_5259:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	Mem0[ss:bp - 0x0008:word16] = cx
	cx = cx + 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0107_5299
	// succ:  l0107_526D l0107_5299
l0107_526D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	cx = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	di = bx + 0x0001
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0107_5285
l0107_5285:
	branch cx == 0x0000 l0107_5287
	// succ:  l0107_5285_2 l0107_5287
l0107_5285_2:
	v17 = Mem0[si:word16]
	Mem0[di:word16] = v17
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0107_5285
	// succ:  l0107_5285
l0107_5287:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0107_5289
l0107_5289:
	branch cx == 0x0000 l0107_528B
	// succ:  l0107_5289_1 l0107_528B
l0107_5289_1:
	v18 = Mem0[si:byte]
	Mem0[di:byte] = v18
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0107_5289
	// succ:  l0107_5289
l0107_528B:
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	Mem0[ds:bx:byte] = cl
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x0006:word16]
	// succ:  l0107_5299
l0107_5299:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0107_523A_exit
fn0107_523A_exit:


// fn0107_5344
// Return size: 4
void fn0107_5344()
fn0107_5344_entry:
	// succ:  l0107_5344
l0107_5344:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0084
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = bp - 0x0084
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0107_0000 (retsize: 2;)
	sp = sp + 0x0004
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0107_5376
	// succ:  l0107_5372 l0107_5376
l0107_5372:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0107_5393
	// succ:  l0107_5393
l0107_5376:
	Mem0[ss:bp - 0x0004:word16] = di
	dx = ax
	bx = ax
	ax = Mem0[ds:bx:word16]
	cx = si
	di = ax
	si = bp - 0x0084
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0107_538B
l0107_538B:
	branch cx == 0x0000 l0107_538D
	// succ:  l0107_538B_1 l0107_538D
l0107_538B_1:
	v17 = Mem0[si:word16]
	Mem0[di:word16] = v17
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0107_538B
	// succ:  l0107_538B
l0107_538D:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0107_538F
l0107_538F:
	branch cx == 0x0000 l0107_5391
	// succ:  l0107_538F_1 l0107_5391
l0107_538F_1:
	v18 = Mem0[si:byte]
	Mem0[di:byte] = v18
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0107_538F
	// succ:  l0107_538F
l0107_5391:
	ax = bx
	// succ:  l0107_5393
l0107_5393:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0107_5344_exit
fn0107_5344_exit:


// fn0137_0000
// Return size: 4
void fn0137_0000()
fn0137_0000_entry:
	// succ:  l0137_0000
l0137_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = di
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + di
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + 0x000C
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0137_0048
	// succ:  l0137_002F l0137_0048
l0137_002F:
	dx = Mem0[ds:si:word16]
	bx = dx
	v15 = Mem0[ds:bx + 0x000A:byte] & 0xF0
	Mem0[ds:bx + 0x000A:byte] = v15
	SZO = cond(Mem0[ds:bx + 0x000A:byte])
	C = false
	cl = 0x04
	ax = di
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax << cl
	SCZO = cond(ax)
	al = al ^ Mem0[ds:bx + 0x000A:byte]
	SZO = cond(al)
	C = false
	ax = ax & 0x00F0
	SZO = cond(ax)
	C = false
	v19 = Mem0[ds:bx + 0x000A:word16] ^ ax
	Mem0[ds:bx + 0x000A:word16] = v19
	SZO = cond(Mem0[ds:bx + 0x000A:word16])
	C = false
	// succ:  l0137_0048
l0137_0048:
	ax = si
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_0000_exit
fn0137_0000_exit:


// fn0137_0066
// Return size: 4
void fn0137_0066()
fn0137_0066_entry:
	// succ:  l0137_0066
l0137_0066:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	di = Mem0[ds:si:word16]
	SZO = cond(Mem0[ds:di + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0137_0088
	// succ:  l0137_0080 l0137_0088
l0137_0080:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0137_00F0 (retsize: 2;)
	goto l0137_009C
	// succ:  l0137_009C
l0137_0088:
	SCZO = cond(Mem0[ds:di + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0137_0096
	// succ:  l0137_008E l0137_0096
l0137_008E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0006:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0137_0096
l0137_0096:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0137_009C
l0137_009C:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_0066_exit
fn0137_0066_exit:


// fn0137_00A8
// Return size: 4
void fn0137_00A8()
fn0137_00A8_entry:
	// succ:  l0137_00A8
l0137_00A8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x002D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0137_00E4
	// succ:  l0137_00C9 l0137_00E4
l0137_00C9:
	bx = Mem0[ds:si:word16]
	Mem0[ds:bx + 0x0026:word16] = 0x0001
	v13 = Mem0[ds:bx + 0x0009:byte] | 0x80
	Mem0[ds:bx + 0x0009:byte] = v13
	SZO = cond(Mem0[ds:bx + 0x0009:byte])
	C = false
	ax = 0xFFFF
	dx_ax = (int32) ax
	Mem0[ds:bx + 0x0018:word16] = ax
	Mem0[ds:bx + 0x001A:word16] = dx
	Mem0[ds:bx + 0x0014:word16] = ax
	Mem0[ds:bx + 0x0016:word16] = dx
	// succ:  l0137_00E4
l0137_00E4:
	ax = si
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_00A8_exit
fn0137_00A8_exit:


// fn0137_00F0
// Return size: 4
void fn0137_00F0()
fn0137_00F0_entry:
	// succ:  l0137_00F0
l0137_00F0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	ax = Mem0[ds:si + 0x0024:word16]
	di = ax
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + si
	SCZO = cond(ax)
	ax = ax + 0x002B
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = si
	si = ax
	goto l0137_012D
	// succ:  l0137_012D
l0137_0122:
	cx = Mem0[ds:si:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(EQ,Z) l0137_012D
	// succ:  l0137_0128 l0137_012D
l0137_0128:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn0137_0066 (retsize: 2;)
	sp = sp + 0x0002
l0137_012D:
	si = si - 0x0005
	SCZO = cond(si)
	ax = di
	di = di - 0x0001
	SZO = cond(di)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0137_0122
	// succ:  l0137_0137 l0137_0122
l0137_0137:
	si = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(Mem0[ds:si + 0x0006:word16] - ax)
	branch Test(EQ,Z) l0137_0147
	// succ:  l0137_013F l0137_0147
l0137_013F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0006:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0137_0147
l0137_0147:
	di = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_00F0_exit
fn0137_00F0_exit:


// fn0137_0162
// Return size: 4
void fn0137_0162()
fn0137_0162_entry:
	// succ:  l0137_0162
l0137_0162:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0010
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = ax
	Mem0[ss:bp - 0x0006:word16] = bx
	SCZO = cond(Mem0[ds:bx:byte] - 0x10)
	branch Test(NE,Z) l0137_01C8
	// succ:  l0137_0184 l0137_01C8
l0137_0184:
	SCZO = cond(Mem0[ds:bx + 0x0001:byte] - 0x0D)
	branch Test(NE,Z) l0137_01C8
	// succ:  l0137_018A l0137_01C8
l0137_018A:
	si = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x12)
	branch Test(NE,Z) l0137_01B2
	// succ:  l0137_019A l0137_01B2
l0137_019A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn0137_179A (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_01AC
	// succ:  l0137_01A7 l0137_01AC
l0137_01A7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0137_0066 (retsize: 2;)
	sp = sp + 0x0002
l0137_01AC:
	ax = Mem0[ss:bp - 0x0004:word16]
	goto l0137_031A
	// succ:  l0137_031A
l0137_01B2:
	SCZO = cond(Mem0[ds:bx:byte] - 0x10)
	branch Test(NE,Z) l0137_01C3
	// succ:  l0137_01B7 l0137_01C3
l0137_01B7:
	SCZO = cond(Mem0[ds:bx + 0x0001:byte] - 0x0D)
	branch Test(NE,Z) l0137_01C3
	// succ:  l0137_01BD l0137_01C3
l0137_01BD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn0137_1834 (retsize: 2;)
	sp = sp + 0x0004
l0137_01C3:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0137_031A
	// succ:  l0137_031A
l0137_01C8:
	di = Mem0[ss:bp + 0x000C:word16]
	si = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn015F_0000 (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0137_0200
	// succ:  l0137_01E2 l0137_0200
l0137_01E2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	call fn0137_0326 (retsize: 2;)
	sp = sp + 0x000A
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0137_0200
	// succ:  l0137_01F7 l0137_0200
l0137_01F7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l0137_01C3
	// succ:  l0137_01C3
l0137_0200:
	bx = Mem0[ds:di:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0137_0212
	// succ:  l0137_0208 l0137_0212
l0137_0208:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0137_04D4 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0137_01F7
	// succ:  l0137_0212 l0137_01F7
l0137_0212:
	di = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0xFFFF)
	branch Test(NE,Z) l0137_028E
	// succ:  l0137_021B l0137_028E
l0137_021B:
	Mem0[ss:bp + 0x000A:word16] = si
	ax = Mem0[ds:di + 0x0026:word16]
	SCZO = cond(Mem0[ds:di + 0x0024:word16] - ax)
	branch Test(NE,Z) l0137_022E
	// succ:  l0137_0226 l0137_022E
l0137_0226:
	SZO = cond(Mem0[ds:di + 0x0009:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l0137_0236
	// succ:  l0137_022C l0137_0236
l0137_022C:
	goto l0137_01F7
	// succ:  l0137_01F7
l0137_022E:
	si = di
	di = Mem0[ss:bp + 0x000A:word16]
	goto l0137_0271
	// succ:  l0137_0271
l0137_0236:
	bx = di
	di = Mem0[ds:bx + 0x0024:word16]
	di = di + 0x000A
	SCZO = cond(di)
	ax = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalReAlloc(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0137_0260
	// succ:  l0137_025D l0137_0260
l0137_025D:
	goto l0137_01C3
	// succ:  l0137_01C3
l0137_0260:
	Mem0[ss:bp + 0x000A:word16] = si
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	v16 = Mem0[ds:si + 0x0026:word16] + 0x0002
	Mem0[ds:si + 0x0026:word16] = v16
	SCZO = cond(v16)
	// succ:  l0137_0271
l0137_0271:
	ax = Mem0[ss:bp + 0x000C:word16]
	bx = Mem0[ds:si + 0x0024:word16]
	cx = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + cx
	SCZO = cond(bx)
	Mem0[ds:bx + 0x002B + si:word16] = ax
	v15 = Mem0[ds:si + 0x0024:word16] + 0x0001
	Mem0[ds:si + 0x0024:word16] = v15
	SZO = cond(v15)
	di = Mem0[ss:bp + 0x000C:word16]
	si = Mem0[ss:bp + 0x000A:word16]
	goto l0137_02E3
	// succ:  l0137_02E3
l0137_028E:
	cx = Mem0[ss:bp + 0x0008:word16]
	dx = cx
	ax = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx + di
	SCZO = cond(cx)
	cx = cx + 0x0028
	SCZO = cond(cx)
	Mem0[ss:bp - 0x0004:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	bx = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_0614 (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0137_02C6
	// succ:  l0137_02B5 l0137_02C6
l0137_02B5:
	ax = 0x0268
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	goto l0137_01F7
	// succ:  l0137_01F7
l0137_02C6:
	dx = Mem0[ss:bp - 0x0004:word16]
	di = Mem0[ss:bp + 0x000C:word16]
	bx = dx
	SZO = cond(Mem0[ds:bx:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0137_02DE
	// succ:  l0137_02D3 l0137_02DE
l0137_02D3:
	bx = Mem0[ds:di:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l0137_02DE
	// succ:  l0137_02DB l0137_02DE
l0137_02DB:
	goto l0137_01F7
	// succ:  l0137_01F7
l0137_02DE:
	bx = dx
	Mem0[ds:bx + 0x0003:word16] = di
	// succ:  l0137_02E3
l0137_02E3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_044A (retsize: 2;)
	sp = sp + 0x000E
	bx = Mem0[ds:di:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0137_0307
	// succ:  l0137_0304 l0137_0307
l0137_0304:
	Mem0[ds:bx + 0x000A:word16] = si
	// succ:  l0137_0307
l0137_0307:
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0137_0311
	// succ:  l0137_030D l0137_0311
l0137_030D:
	sp = sp - 0x0002
	call fn0137_1CE4 (retsize: 2;)
l0137_0311:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = 0x0001
	// succ:  l0137_031A
l0137_031A:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_0162_exit
fn0137_0162_exit:


// fn0137_0326
// Return size: 4
void fn0137_0326()
fn0137_0326_entry:
	// succ:  l0137_0326
l0137_0326:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0104
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000E:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	// succ:  l0137_033C
l0137_033C:
	bx = ax
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:0x4DEA:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - ax)
	branch Test(NE,Z) l0137_034E
	// succ:  l0137_0348 l0137_034E
l0137_0348:
	di = 0x0001
	goto l0137_0350
	// succ:  l0137_0350
l0137_034E:
	di = di - di
	SCZO = cond(di)
	// succ:  l0137_0350
l0137_0350:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0137_037A
	// succ:  l0137_0354 l0137_037A
l0137_0354:
	ax = Mem0[ds:bx + 0x0014:word16]
	dx = Mem0[ds:bx + 0x0016:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	v15 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v15
	cx = Mem0[ds:bx + 0x000C:word16]
	si = Mem0[ds:bx + 0x000E:word16]
	cx = cx + Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(cx)
	si = si + Mem0[ss:bp + 0x000C:word16] + C
	SCZO = cond(si)
	SCZO = cond(si - dx)
	branch Test(ULE,CZ) l0137_0371
	// succ:  l0137_036E l0137_0371
l0137_036E:
	goto l0137_0426
	// succ:  l0137_0426
l0137_0371:
	branch Test(ULT,C) l0137_037A
	// succ:  l0137_0373 l0137_037A
l0137_0373:
	SCZO = cond(cx - ax)
	branch Test(ULE,CZ) l0137_037A
	// succ:  l0137_0377 l0137_037A
l0137_0377:
	goto l0137_0426
	// succ:  l0137_0426
l0137_037A:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0137_039C
	// succ:  l0137_037E l0137_039C
l0137_037E:
	ax = Mem0[ds:bx + 0x000C:word16]
	dx = Mem0[ds:bx + 0x000E:word16]
	ax = ax + Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp + 0x000C:word16] + C
	SCZO = cond(dx)
	SCZO = cond(dx - Mem0[ds:bx + 0x0016:word16])
	branch Test(ULE,CZ) l0137_0392
	// succ:  l0137_038F l0137_0392
l0137_038F:
	goto l0137_0426
	// succ:  l0137_0426
l0137_0392:
	branch Test(ULT,C) l0137_039C
	// succ:  l0137_0394 l0137_039C
l0137_0394:
	SCZO = cond(ax - Mem0[ds:bx + 0x0014:word16])
	branch Test(ULE,CZ) l0137_039C
	// succ:  l0137_0399 l0137_039C
l0137_0399:
	goto l0137_0426
	// succ:  l0137_0426
l0137_039C:
	ax = Mem0[ds:bx + 0x0010:word16]
	dx = Mem0[ds:bx + 0x0012:word16]
	ax = ax + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp + 0x0008:word16] + C
	SCZO = cond(dx)
	SCZO = cond(dx - Mem0[ds:bx + 0x001A:word16])
	branch Test(UGT,CZ) l0137_03E0
	// succ:  l0137_03AD l0137_03E0
l0137_03AD:
	branch Test(ULT,C) l0137_03B4
	// succ:  l0137_03AF l0137_03B4
l0137_03AF:
	SCZO = cond(ax - Mem0[ds:bx + 0x0018:word16])
	branch Test(UGT,CZ) l0137_03E0
	// succ:  l0137_03B4 l0137_03E0
l0137_03B4:
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l0137_03C2
	// succ:  l0137_03BA l0137_03C2
l0137_03BA:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp + 0x0008:word16] = ax
	Mem0[ss:bp + 0x0006:word16] = ax
	// succ:  l0137_03C2
l0137_03C2:
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l0137_03D0
	// succ:  l0137_03C8 l0137_03D0
l0137_03C8:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp + 0x000C:word16] = ax
	Mem0[ss:bp + 0x000A:word16] = ax
	// succ:  l0137_03D0
l0137_03D0:
	ax = Mem0[ds:bx + 0x000A:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_03DD
	// succ:  l0137_03DA l0137_03DD
l0137_03DA:
	goto l0137_033C
	// succ:  l0137_033C
l0137_03DD:
	goto l0137_043A
	// succ:  l0137_043A
l0137_03E0:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x80)
	C = false
	branch Test(NE,Z) l0137_0421
	// succ:  l0137_03E7 l0137_0421
l0137_03E7:
	SCZO = cond(di - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	al = al & 0x79
	SZO = cond(al)
	C = false
	ax = ax + 0x0344
	SCZO = cond(ax)
	// succ:  l0137_03F1
l0137_03F1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	si = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0137_0413
	// succ:  l0137_0402 l0137_0413
l0137_0402:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = bp - 0x0105 + si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	// succ:  l0137_0413
l0137_0413:
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0137_0421
l0137_0421:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0137_043D
	// succ:  l0137_043D
l0137_0426:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x80)
	C = false
	branch Test(NE,Z) l0137_0421
	// succ:  l0137_042D l0137_0421
l0137_042D:
	SCZO = cond(di - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	al = al & 0x7B
	SZO = cond(al)
	C = false
	ax = ax + 0x0343
	SCZO = cond(ax)
	goto l0137_03F1
	// succ:  l0137_03F1
l0137_043A:
	ax = 0x0001
	// succ:  l0137_043D
l0137_043D:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_0326_exit
fn0137_0326_exit:


// fn0137_044A
// Return size: 4
void fn0137_044A()
fn0137_044A_entry:
	// succ:  l0137_044A
l0137_044A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(NE,Z) l0137_0473
	// succ:  l0137_045F l0137_0473
l0137_045F:
	v12 = -Mem0[ss:bp + 0x000E:word16]
	Mem0[ss:bp + 0x000E:word16] = v12
	SCZO = cond(v12)
	C = v12 == 0x0000
	v14 = Mem0[ss:bp + 0x0010:word16] + 0x00 + C
	Mem0[ss:bp + 0x0010:word16] = v14
	SCZO = cond(v14)
	v15 = -Mem0[ss:bp + 0x0010:word16]
	Mem0[ss:bp + 0x0010:word16] = v15
	SCZO = cond(v15)
	C = v15 == 0x0000
	v16 = -Mem0[ss:bp + 0x000A:word16]
	Mem0[ss:bp + 0x000A:word16] = v16
	SCZO = cond(v16)
	C = v16 == 0x0000
	v17 = Mem0[ss:bp + 0x000C:word16] + 0x00 + C
	Mem0[ss:bp + 0x000C:word16] = v17
	SCZO = cond(v17)
	v18 = -Mem0[ss:bp + 0x000C:word16]
	Mem0[ss:bp + 0x000C:word16] = v18
	SCZO = cond(v18)
	C = v18 == 0x0000
	// succ:  l0137_0473
l0137_0473:
	di = Mem0[ss:bp + 0x0012:word16]
	cx = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0137_0479
l0137_0479:
	bx = Mem0[ds:di:word16]
	ax = Mem0[ss:bp + 0x000E:word16]
	dx = Mem0[ss:bp + 0x0010:word16]
	v22 = Mem0[ds:bx + 0x000C:word16] + ax
	Mem0[ds:bx + 0x000C:word16] = v22
	SCZO = cond(v22)
	v23 = Mem0[ds:bx + 0x000E:word16] + dx + C
	Mem0[ds:bx + 0x000E:word16] = v23
	SCZO = cond(v23)
	ax = Mem0[ss:bp + 0x000A:word16]
	dx = Mem0[ss:bp + 0x000C:word16]
	v24 = Mem0[ds:bx + 0x0010:word16] + ax
	Mem0[ds:bx + 0x0010:word16] = v24
	SCZO = cond(v24)
	v25 = Mem0[ds:bx + 0x0012:word16] + dx + C
	Mem0[ds:bx + 0x0012:word16] = v25
	SCZO = cond(v25)
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l0137_04A1
	// succ:  l0137_0499 l0137_04A1
l0137_0499:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp + 0x000C:word16] = ax
	Mem0[ss:bp + 0x000A:word16] = ax
	// succ:  l0137_04A1
l0137_04A1:
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l0137_04AF
	// succ:  l0137_04A7 l0137_04AF
l0137_04A7:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp + 0x0010:word16] = ax
	Mem0[ss:bp + 0x000E:word16] = ax
	// succ:  l0137_04AF
l0137_04AF:
	SCZO = cond(Mem0[ds:0x4DEA:word16] - di)
	branch Test(NE,Z) l0137_04BA
	// succ:  l0137_04B5 l0137_04BA
l0137_04B5:
	ax = 0x0001
	goto l0137_04BC
	// succ:  l0137_04BC
l0137_04BA:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0137_04BC
l0137_04BC:
	si = cx
	Mem0[ds:si:word16] = ax
	di = Mem0[ds:bx + 0x000A:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0137_0479
	// succ:  l0137_04C7 l0137_0479
l0137_04C7:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_044A_exit
fn0137_044A_exit:


// fn0137_04D4
// Return size: 4
void fn0137_04D4()
fn0137_04D4_entry:
	// succ:  l0137_04D4
l0137_04D4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0137_0504
	// succ:  l0137_04EA l0137_0504
l0137_04EA:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0137_0563
	// succ:  l0137_04EE l0137_0563
l0137_04EE:
	bx = Mem0[ds:di:word16]
	al = Mem0[ds:bx + 0x0009:byte]
	al = al & 0x06
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x02)
	branch Test(EQ,Z) l0137_0504
	// succ:  l0137_04F9 l0137_0504
l0137_04F9:
	di = Mem0[ds:bx + 0x000A:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0137_04EE
	// succ:  l0137_0500 l0137_04EE
l0137_0500:
	goto l0137_0563
	// succ:  l0137_0563
l0137_0504:
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx + 0x0009:byte]
	al = al & 0x06
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x02)
	branch Test(NE,Z) l0137_0524
	// succ:  l0137_0512 l0137_0524
l0137_0512:
	ax = 0x0428
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0137_051F
l0137_051F:
	ax = 0x0001
	goto l0137_0565
	// succ:  l0137_0565
l0137_0524:
	di = Mem0[ds:bx + 0x0024:word16]
	ax = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	di = di + bx
	SCZO = cond(di)
	di = di + 0x0028
	SCZO = cond(di)
	cx = bx + 0x0028
	SCZO = cond(di - cx)
	branch Test(ULE,CZ) l0137_0563
	// succ:  l0137_053B l0137_0563
l0137_053B:
	si = cx
	// succ:  l0137_053D
l0137_053D:
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - 0x0000)
	branch Test(EQ,Z) l0137_055C
	// succ:  l0137_0543 l0137_055C
l0137_0543:
	bx = Mem0[ds:si + 0x0003:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0137_055C
	// succ:  l0137_054E l0137_055C
l0137_054E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0003:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_04D4 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0137_051F
	// succ:  l0137_055C l0137_051F
l0137_055C:
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - di)
	branch Test(ULT,C) l0137_053D
	// succ:  l0137_0563 l0137_053D
l0137_0563:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0137_0565
l0137_0565:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_04D4_exit
fn0137_04D4_exit:


// fn0137_0572
// Return size: 4
void fn0137_0572()
fn0137_0572_entry:
	// succ:  l0137_0572
l0137_0572:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	ax = Mem0[ds:di + 0x0024:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	Mem0[ss:bp - 0x000A:word16] = cx
	Mem0[ss:bp - 0x0004:word16] = cx
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GT,SZO) l0137_05A2
	// succ:  l0137_059D l0137_05A2
l0137_059D:
	si = cx
	goto l0137_05DC
	// succ:  l0137_05DC
l0137_05A2:
	dx = di + 0x002B
	si = Mem0[ss:bp - 0x0004:word16]
	Mem0[ss:bp - 0x000C:word16] = di
	di = dx
	// succ:  l0137_05AD
l0137_05AD:
	cx = Mem0[ds:di:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(EQ,Z) l0137_05C7
	// succ:  l0137_05B3 l0137_05C7
l0137_05B3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_0162 (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_05D6
	// succ:  l0137_05C7 l0137_05D6
l0137_05C7:
	di = di + 0x0005
	SCZO = cond(di)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - si)
	branch Test(GT,SZO) l0137_05AD
	// succ:  l0137_05D0 l0137_05AD
l0137_05D0:
	si = Mem0[ss:bp - 0x000A:word16]
	goto l0137_05D9
	// succ:  l0137_05D9
l0137_05D6:
	si = 0x0001
	// succ:  l0137_05D9
l0137_05D9:
	di = Mem0[ss:bp - 0x000C:word16]
	// succ:  l0137_05DC
l0137_05DC:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0137_05ED
	// succ:  l0137_05E0 l0137_05ED
l0137_05E0:
	SCZO = cond(Mem0[ds:di + 0x0006:word16] - si)
	branch Test(EQ,Z) l0137_05ED
	// succ:  l0137_05E5 l0137_05ED
l0137_05E5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0006:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0137_05ED
l0137_05ED:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0137_0601
	// succ:  l0137_05F9 l0137_0601
l0137_05F9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0137_0601
l0137_0601:
	SCZO = cond(si - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_0572_exit
fn0137_0572_exit:


// fn0137_0614
// Return size: 4
void fn0137_0614()
fn0137_0614_entry:
	// succ:  l0137_0614
l0137_0614:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = Mem0[ss:bp + 0x0008:word16]
	bx = Mem0[ss:bp + 0x000C:word16]
	ax = cx
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + bx
	SCZO = cond(ax)
	ax = ax + 0x0028
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	si = Mem0[ds:0x4DEA:word16]
	SCZO = cond(Mem0[ds:si:word16] - bx)
	branch Test(NE,Z) l0137_068D
	// succ:  l0137_0640 l0137_068D
l0137_0640:
	SCZO = cond(cx - 0x0005)
	branch Test(NE,Z) l0137_0674
	// succ:  l0137_0645 l0137_0674
l0137_0645:
	si = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(Mem0[ds:si:byte] - 0x08)
	branch Test(NE,Z) l0137_0674
	// succ:  l0137_064D l0137_0674
l0137_064D:
	dx = Mem0[ds:bx + 0x0035:word16]
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0137_0674
	// succ:  l0137_0654 l0137_0674
l0137_0654:
	si = dx
	si = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x11)
	branch Test(NE,Z) l0137_0674
	// succ:  l0137_065E l0137_0674
l0137_065E:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l0137_06C6
	// succ:  l0137_0664 l0137_06C6
l0137_0664:
	ax = 0x02DC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	goto l0137_06C6
	// succ:  l0137_06C6
l0137_0674:
	SCZO = cond(cx - 0x0002)
	branch Test(NE,Z) l0137_068D
	// succ:  l0137_0679 l0137_068D
l0137_0679:
	si = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(Mem0[ds:si:byte] - 0x06)
	branch Test(NE,Z) l0137_068D
	// succ:  l0137_0681 l0137_068D
l0137_0681:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x11)
	branch Test(NE,Z) l0137_068D
	// succ:  l0137_0687 l0137_068D
l0137_0687:
	SCZO = cond(Mem0[ds:bx + 0x0044:word16] - 0x0000)
	branch Test(NE,Z) l0137_065E
	// succ:  l0137_068D l0137_065E
l0137_068D:
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:bx + 0x0003:word16] - 0x0000)
	branch Test(NE,Z) l0137_06C6
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:bx + 0x0003:word16] - 0x0000)
	branch Test(NE,Z) l0137_06C6
	// succ:  l0137_0696 l0137_06C6
l0137_0696:
	al = Mem0[ds:bx:byte]
	al = al & 0x7F
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0137_06AA
	al = Mem0[ds:bx:byte]
	al = al & 0x7F
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0137_06AA
	// succ:  l0137_069C l0137_06AA
l0137_069C:
	bx = Mem0[ss:bp + 0x000A:word16]
	si = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[ds:si:byte]
	al = al & 0x7F
	SZO = cond(al)
	C = false
	SCZO = cond(Mem0[ds:bx:byte] - al)
	branch Test(NE,Z) l0137_06C6
	bx = Mem0[ss:bp + 0x000A:word16]
	si = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[ds:si:byte]
	al = al & 0x7F
	SZO = cond(al)
	C = false
	SCZO = cond(Mem0[ds:bx:byte] - al)
	branch Test(NE,Z) l0137_06C6
	// succ:  l0137_06AA l0137_06C6
l0137_06AA:
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:bx + 0x0002:byte] - 0x00)
	branch Test(EQ,Z) l0137_06C1
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:bx + 0x0002:byte] - 0x00)
	branch Test(EQ,Z) l0137_06C1
	// succ:  l0137_06B3 l0137_06C1
l0137_06B3:
	bx = Mem0[ss:bp + 0x000A:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:bx + 0x0002:byte] - al)
	branch Test(NE,Z) l0137_06C6
	bx = Mem0[ss:bp + 0x000A:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:bx + 0x0002:byte] - al)
	branch Test(NE,Z) l0137_06C6
	// succ:  l0137_06C1 l0137_06C6
l0137_06C1:
	ax = 0x0001
	ax = 0x0001
	goto l0137_06C8
	// succ:  l0137_06C8
l0137_06C6:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0137_06C8
l0137_06C8:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_0614_exit
fn0137_0614_exit:


// fn0137_06D4
// Return size: 4
void fn0137_06D4()
fn0137_06D4_entry:
	// succ:  l0137_06D4
l0137_06D4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0010
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	Mem0[ss:bp - 0x0006:word16] = si
	si = si + 0x0028
	SCZO = cond(si)
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l0137_0716
	// succ:  l0137_06FB l0137_0716
l0137_06FB:
	di = di - di
	SCZO = cond(di)
	dx = Mem0[ss:bp + 0x000A:word16]
	Mem0[ss:bp - 0x0004:word16] = si
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - dx)
	branch Test(EQ,Z) l0137_0724
	// succ:  l0137_0708 l0137_0724
l0137_0708:
	di = di + 0x0001
	SZO = cond(di)
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - dx)
	branch Test(NE,Z) l0137_0708
	// succ:  l0137_0711 l0137_0708
l0137_0711:
	Mem0[ss:bp - 0x0004:word16] = si
	goto l0137_0724
	// succ:  l0137_0724
l0137_0716:
	Mem0[ss:bp - 0x0004:word16] = si
	ax = di
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + di
	SCZO = cond(ax)
	v13 = Mem0[ss:bp - 0x0004:word16] + ax
	Mem0[ss:bp - 0x0004:word16] = v13
	SCZO = cond(v13)
	// succ:  l0137_0724
l0137_0724:
	bx = Mem0[ss:bp - 0x0006:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l0137_0738
	// succ:  l0137_072D l0137_0738
l0137_072D:
	bx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:bx + 0x0003:word16] = 0x0000
	goto l0137_0764
	// succ:  l0137_0764
l0137_0738:
	bx = Mem0[ss:bp - 0x0004:word16]
	si = Mem0[ss:bp - 0x0006:word16]
	cx = Mem0[ds:si + 0x0024:word16]
	cx = cx - di
	SCZO = cond(cx)
	ax = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx - 0x0005
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = bx
	si = bx + 0x0005
	ax = ds
	es = ax
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0137_075A
l0137_075A:
	branch cx == 0x0000 l0137_075C
	// succ:  l0137_075A_1 l0137_075C
l0137_075A_1:
	v18 = Mem0[si:word16]
	Mem0[di:word16] = v18
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0137_075A
	// succ:  l0137_075A
l0137_075C:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0137_075E
l0137_075E:
	branch cx == 0x0000 l0137_0760
	// succ:  l0137_075E_1 l0137_0760
l0137_075E_1:
	v19 = Mem0[si:byte]
	Mem0[di:byte] = v19
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0137_075E
	// succ:  l0137_075E
l0137_0760:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	v20 = Mem0[ds:si + 0x0024:word16] - 0x0001
	Mem0[ds:si + 0x0024:word16] = v20
	SZO = cond(v20)
	// succ:  l0137_0764
l0137_0764:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0000 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_044A (retsize: 2;)
	sp = sp + 0x000E
	bx = Mem0[ss:bp + 0x000A:word16]
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0137_07A3
	// succ:  l0137_0799 l0137_07A3
l0137_0799:
	bx = Mem0[ss:bp + 0x000A:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x000A:word16] = 0x0000
	// succ:  l0137_07A3
l0137_07A3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0137_07B5
	// succ:  l0137_07B1 l0137_07B5
l0137_07B1:
	sp = sp - 0x0002
	call fn0137_1CE4 (retsize: 2;)
l0137_07B5:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_06D4_exit
fn0137_06D4_exit:


// fn0137_07C2
// Return size: 4
void fn0137_07C2()
fn0137_07C2_entry:
	// succ:  l0137_07C2
l0137_07C2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000A:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0137_082F
	// succ:  l0137_07D8 l0137_082F
l0137_07D8:
	ax = 0x0352
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	di = ax
	Mem0[ss:bp + 0x0008:word16] = 0x0000
	bx = si
	bx = bx << 0x0001
	SCZO = cond(bx)
	SCZO = cond(Mem0[0x0137:bx + 0x0A5B:word16] - di)
	branch Test(UGT,CZ) l0137_0813
	// succ:  l0137_07F3 l0137_0813
l0137_07F3:
	dx = si
	dx = dx << 0x0001
	SCZO = cond(dx)
	dx = dx + 0x0A5B
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0004:word16] = dx
	Mem0[ss:bp - 0x0006:word16] = di
	di = dx
	cx = Mem0[ss:bp - 0x0006:word16]
	ax = 0x0137
	es = ax
	// succ:  l0137_080B
l0137_080B:
	si = si + 0x0001
	SZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(Mem0[0x0137:di:word16] - cx)
	branch Test(ULE,CZ) l0137_080B
	// succ:  l0137_0813 l0137_080B
l0137_0813:
	SCZO = cond(si - 0x0005)
	branch Test(NE,Z) l0137_0821
	// succ:  l0137_0818 l0137_0821
l0137_0818:
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0004)
	branch Test(UGE,C) l0137_0821
	// succ:  l0137_081E l0137_0821
l0137_081E:
	si = 0x0002
	// succ:  l0137_0821
l0137_0821:
	SCZO = cond(si - 0x0004)
	branch Test(NE,Z) l0137_082F
	// succ:  l0137_0826 l0137_082F
l0137_0826:
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0008)
	branch Test(UGE,C) l0137_082F
	// succ:  l0137_082C l0137_082F
l0137_082C:
	si = 0x0001
	// succ:  l0137_082F
l0137_082F:
	SCZO = cond(si - 0x0010)
	branch Test(EQ,Z) l0137_0844
	// succ:  l0137_0834 l0137_0844
l0137_0834:
	SCZO = cond(si - 0x000F)
	branch Test(EQ,Z) l0137_0844
	// succ:  l0137_0839 l0137_0844
l0137_0839:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_0000 (retsize: 2;)
	sp = sp + 0x0002
	goto l0137_0848
	// succ:  l0137_0848
l0137_0844:
	sp = sp - 0x0002
	call fn0137_00A8 (retsize: 2;)
l0137_0848:
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0137_0854
	// succ:  l0137_084E l0137_0854
l0137_084E:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0137_0A4F
	// succ:  l0137_0A4F
l0137_0854:
	Mem0[ss:bp - 0x0004:word16] = di
	Mem0[ss:bp + 0x000A:word16] = si
	dx = si
	ax = si
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0013)
	branch Test(ULE,CZ) l0137_0867
	// succ:  l0137_0864 l0137_0867
l0137_0864:
	goto l0137_0A4F
	// succ:  l0137_0A4F
l0137_0867:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v18 = ax
	ax = bx
	bx = v18
	call Mem0[0x0137:bx + 0x0870:word16] (retsize: 4;)
	return
	// succ:  fn0137_07C2_exit
l0137_0A4F:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_07C2_exit
fn0137_07C2_exit:


// fn0137_0CAC
// Return size: 4
void fn0137_0CAC()
fn0137_0CAC_entry:
	// succ:  l0137_0CAC
l0137_0CAC:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0137_0CC8
	// succ:  l0137_0CC1 l0137_0CC8
l0137_0CC1:
	cx = 0x005F
	goto l0137_1175
	// succ:  l0137_1175
l0137_0CC8:
	al = Mem0[ds:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0013)
	branch Test(UGT,CZ) l0137_0D02
	// succ:  l0137_0CD2 l0137_0D02
l0137_0CD2:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v16 = ax
	ax = bx
	bx = v16
	switch (ax) { l0137_0D08 l0137_0DB2 l0137_0DC4 l0137_0DEC l0137_0E10 l0137_0E28 l0137_0E78 l0137_0EE4 l0137_0F62 l0137_0FCE l0137_1016 l0137_106A l0137_10B2 l0137_10EE l0137_113C l0137_114A l0137_1158 l0137_115E l0137_116C l0137_1172 }
	// succ:  l0137_0D08 l0137_0DB2 l0137_0DC4 l0137_0DEC l0137_0E10 l0137_0E28 l0137_0E78 l0137_0EE4 l0137_0F62 l0137_0FCE l0137_1016 l0137_106A l0137_10B2 l0137_10EE l0137_113C l0137_114A l0137_1158 l0137_115E l0137_116C l0137_1172
l0137_0D02:
	cx = 0x0001
	goto l0137_1175
	// succ:  l0137_1175
l0137_0D08:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0137_0D20
	// succ:  l0137_0D0E l0137_0D20
l0137_0D0E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_1956 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0137_0D20
	// succ:  l0137_0D1A l0137_0D20
l0137_0D1A:
	cx = 0x0046
	goto l0137_1175
	// succ:  l0137_1175
l0137_0D20:
	al = Mem0[ds:si + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - 0x002A)
	branch Test(UGT,CZ) l0137_0D1A
	// succ:  l0137_0D2A l0137_0D1A
l0137_0D2A:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v22 = ax
	ax = bx
	bx = v22
	switch (ax) { l0137_0D88 l0137_0D1A l0137_0D8E l0137_0D1A l0137_0D94 l0137_0D94 l0137_0D1A l0137_0D1A l0137_0D94 l0137_0D1A l0137_0D9A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0DA0 l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0DA6 l0137_0DA6 l0137_0DA6 l0137_0DA6 l0137_0DAC l0137_0DAC l0137_0DAC l0137_0DAC l0137_0DAC }
	// succ:  l0137_0D88 l0137_0D1A l0137_0D8E l0137_0D1A l0137_0D94 l0137_0D94 l0137_0D1A l0137_0D1A l0137_0D94 l0137_0D1A l0137_0D9A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0DA0 l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0D1A l0137_0DA6 l0137_0DA6 l0137_0DA6 l0137_0DA6 l0137_0DAC l0137_0DAC l0137_0DAC l0137_0DAC l0137_0DAC
l0137_0D88:
	cx = 0x0090
	goto l0137_1175
	// succ:  l0137_1175
l0137_0D8E:
	cx = 0x008B
	goto l0137_1175
	// succ:  l0137_1175
l0137_0D94:
	cx = 0x00A1
	goto l0137_1175
	// succ:  l0137_1175
l0137_0D9A:
	cx = 0x008C
	goto l0137_1175
	// succ:  l0137_1175
l0137_0DA0:
	cx = 0x008D
	goto l0137_1175
	// succ:  l0137_1175
l0137_0DA6:
	cx = 0x008F
	goto l0137_1175
	// succ:  l0137_1175
l0137_0DAC:
	cx = 0x008E
	goto l0137_1175
	// succ:  l0137_1175
l0137_0DB2:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x01)
	branch Test(NE,Z) l0137_0DBE
	// succ:  l0137_0DB8 l0137_0DBE
l0137_0DB8:
	cx = 0x0048
	goto l0137_1175
	// succ:  l0137_1175
l0137_0DBE:
	cx = 0x0047
	goto l0137_1175
	// succ:  l0137_1175
l0137_0DC4:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0137_0DDC
	// succ:  l0137_0DCA l0137_0DDC
l0137_0DCA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_1956 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0137_0DDC
	// succ:  l0137_0DD6 l0137_0DDC
l0137_0DD6:
	cx = 0x0049
	goto l0137_1175
	// succ:  l0137_1175
l0137_0DDC:
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	cl = Mem0[0x0137:bx + 0x119E:byte]
	// succ:  l0137_0DE6
l0137_0DE6:
	ch = ch - ch
	SCZO = cond(ch)
	goto l0137_1175
	// succ:  l0137_1175
l0137_0DEC:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0137_0E04
	// succ:  l0137_0DF2 l0137_0E04
l0137_0DF2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_1956 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0137_0E04
	// succ:  l0137_0DFE l0137_0E04
l0137_0DFE:
	cx = 0x004A
	goto l0137_1175
	// succ:  l0137_1175
l0137_0E04:
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	cl = Mem0[0x0137:bx + 0x118D:byte]
	goto l0137_0DE6
	// succ:  l0137_0DE6
l0137_0E10:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0137_0E1C
	// succ:  l0137_0E16 l0137_0E1C
l0137_0E16:
	cx = 0x004B
	goto l0137_1175
	// succ:  l0137_1175
l0137_0E1C:
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	cl = Mem0[0x0137:bx + 0x11EE:byte]
	goto l0137_0DE6
	// succ:  l0137_0DE6
l0137_0E28:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0137_0E6A
	// succ:  l0137_0E2E l0137_0E6A
l0137_0E2E:
	ah = Mem0[ds:si + 0x0009:byte]
	ax = ax & 0x0600
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_0E6A
	// succ:  l0137_0E3B l0137_0E6A
l0137_0E3B:
	SCZO = cond(ax - 0x0600)
	branch Test(EQ,Z) l0137_0E6A
	// succ:  l0137_0E40 l0137_0E6A
l0137_0E40:
	SCZO = cond(ax - 0x0200)
	branch Test(NE,Z) l0137_0E52
	// succ:  l0137_0E45 l0137_0E52
l0137_0E45:
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	cl = Mem0[0x0137:bx + 0x11B8:byte]
	goto l0137_0DE6
	// succ:  l0137_0DE6
l0137_0E52:
	cx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - 0x0400)
	branch Test(EQ,Z) l0137_0E5D
	// succ:  l0137_0E5A l0137_0E5D
l0137_0E5A:
	goto l0137_1175
	// succ:  l0137_1175
l0137_0E5D:
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	cl = Mem0[0x0137:bx + 0x11CA:byte]
	goto l0137_0DE6
	// succ:  l0137_0DE6
l0137_0E6A:
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	cl = Mem0[0x0137:bx + 0x11DC:byte]
	goto l0137_0DE6
	// succ:  l0137_0DE6
l0137_0E78:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0137_0EC6
	// succ:  l0137_0E7E l0137_0EC6
l0137_0E7E:
	ah = Mem0[ds:si + 0x0009:byte]
	ax = ax & 0x0600
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_0EC6
	// succ:  l0137_0E8B l0137_0EC6
l0137_0E8B:
	SCZO = cond(ax - 0x0600)
	branch Test(EQ,Z) l0137_0EC6
	// succ:  l0137_0E90 l0137_0EC6
l0137_0E90:
	SCZO = cond(ax - 0x0200)
	branch Test(NE,Z) l0137_0EA8
	// succ:  l0137_0E95 l0137_0EA8
l0137_0E95:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x04)
	branch Test(ULT,C) l0137_0EA2
	// succ:  l0137_0E9B l0137_0EA2
l0137_0E9B:
	cx = 0x006C
	goto l0137_1175
	// succ:  l0137_1175
l0137_0EA2:
	cx = 0x0085
	goto l0137_1175
	// succ:  l0137_1175
l0137_0EA8:
	cx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - 0x0400)
	branch Test(EQ,Z) l0137_0EB3
	// succ:  l0137_0EB0 l0137_0EB3
l0137_0EB0:
	goto l0137_1175
	// succ:  l0137_1175
l0137_0EB3:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x04)
	branch Test(ULT,C) l0137_0EC0
	// succ:  l0137_0EB9 l0137_0EC0
l0137_0EB9:
	cx = 0x006D
	goto l0137_1175
	// succ:  l0137_1175
l0137_0EC0:
	cx = 0x0086
	goto l0137_1175
	// succ:  l0137_1175
l0137_0EC6:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x00)
	branch Test(NE,Z) l0137_0ED2
	// succ:  l0137_0ECC l0137_0ED2
l0137_0ECC:
	cx = 0x006E
	goto l0137_1175
	// succ:  l0137_1175
l0137_0ED2:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x04)
	branch Test(UGE,C) l0137_0EDE
	// succ:  l0137_0ED8 l0137_0EDE
l0137_0ED8:
	cx = 0x0050
	goto l0137_1175
	// succ:  l0137_1175
l0137_0EDE:
	cx = 0x004F
	goto l0137_1175
	// succ:  l0137_1175
l0137_0EE4:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0137_0F3E
	// succ:  l0137_0EEA l0137_0F3E
l0137_0EEA:
	ah = Mem0[ds:si + 0x0009:byte]
	ax = ax & 0x0600
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_0F3E
	// succ:  l0137_0EF7 l0137_0F3E
l0137_0EF7:
	SCZO = cond(ax - 0x0600)
	branch Test(EQ,Z) l0137_0F3E
	// succ:  l0137_0EFC l0137_0F3E
l0137_0EFC:
	SCZO = cond(ax - 0x0200)
	branch Test(NE,Z) l0137_0F1A
	// succ:  l0137_0F01 l0137_0F1A
l0137_0F01:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x02)
	branch Test(ULE,CZ) l0137_0F14
	// succ:  l0137_0F07 l0137_0F14
l0137_0F07:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x04)
	branch Test(EQ,Z) l0137_0F14
	// succ:  l0137_0F0D l0137_0F14
l0137_0F0D:
	cx = 0x0093
	goto l0137_1175
	// succ:  l0137_1175
l0137_0F14:
	cx = 0x0087
	goto l0137_1175
	// succ:  l0137_1175
l0137_0F1A:
	SCZO = cond(ax - 0x0400)
	branch Test(NE,Z) l0137_0F32
	// succ:  l0137_0F1F l0137_0F32
l0137_0F1F:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x02)
	branch Test(ULE,CZ) l0137_0F38
	// succ:  l0137_0F25 l0137_0F38
l0137_0F25:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x04)
	branch Test(EQ,Z) l0137_0F38
	// succ:  l0137_0F2B l0137_0F38
l0137_0F2B:
	cx = 0x0094
	goto l0137_1175
	// succ:  l0137_1175
l0137_0F32:
	cx = Mem0[ss:bp - 0x0004:word16]
	goto l0137_1175
	// succ:  l0137_1175
l0137_0F38:
	cx = 0x0088
	goto l0137_1175
	// succ:  l0137_1175
l0137_0F3E:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x00)
	branch Test(NE,Z) l0137_0F4A
	// succ:  l0137_0F44 l0137_0F4A
l0137_0F44:
	cx = 0x00A2
	goto l0137_1175
	// succ:  l0137_1175
l0137_0F4A:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x02)
	branch Test(ULE,CZ) l0137_0F5C
	// succ:  l0137_0F50 l0137_0F5C
l0137_0F50:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x04)
	branch Test(EQ,Z) l0137_0F5C
	// succ:  l0137_0F56 l0137_0F5C
l0137_0F56:
	cx = 0x0051
	goto l0137_1175
	// succ:  l0137_1175
l0137_0F5C:
	cx = 0x0052
	goto l0137_1175
	// succ:  l0137_1175
l0137_0F62:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0137_0FB0
	// succ:  l0137_0F68 l0137_0FB0
l0137_0F68:
	ah = Mem0[ds:si + 0x0009:byte]
	ax = ax & 0x0600
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_0FB0
	// succ:  l0137_0F75 l0137_0FB0
l0137_0F75:
	SCZO = cond(ax - 0x0600)
	branch Test(EQ,Z) l0137_0FB0
	// succ:  l0137_0F7A l0137_0FB0
l0137_0F7A:
	SCZO = cond(ax - 0x0200)
	branch Test(NE,Z) l0137_0F92
	// succ:  l0137_0F7F l0137_0F92
l0137_0F7F:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x01)
	branch Test(NE,Z) l0137_0F8C
	// succ:  l0137_0F85 l0137_0F8C
l0137_0F85:
	cx = 0x0084
	goto l0137_1175
	// succ:  l0137_1175
l0137_0F8C:
	cx = 0x0081
	goto l0137_1175
	// succ:  l0137_1175
l0137_0F92:
	cx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - 0x0400)
	branch Test(EQ,Z) l0137_0F9D
	// succ:  l0137_0F9A l0137_0F9D
l0137_0F9A:
	goto l0137_1175
	// succ:  l0137_1175
l0137_0F9D:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x01)
	branch Test(NE,Z) l0137_0FAA
	// succ:  l0137_0FA3 l0137_0FAA
l0137_0FA3:
	cx = 0x0083
	goto l0137_1175
	// succ:  l0137_1175
l0137_0FAA:
	cx = 0x0080
	goto l0137_1175
	// succ:  l0137_1175
l0137_0FB0:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x00)
	branch Test(NE,Z) l0137_0FBC
	// succ:  l0137_0FB6 l0137_0FBC
l0137_0FB6:
	cx = 0x00A3
	goto l0137_1175
	// succ:  l0137_1175
l0137_0FBC:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x01)
	branch Test(NE,Z) l0137_0FC8
	// succ:  l0137_0FC2 l0137_0FC8
l0137_0FC2:
	cx = 0x0054
	goto l0137_1175
	// succ:  l0137_1175
l0137_0FC8:
	cx = 0x0053
	goto l0137_1175
	// succ:  l0137_1175
l0137_0FCE:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x00)
	branch Test(NE,Z) l0137_0FDA
	// succ:  l0137_0FD4 l0137_0FDA
l0137_0FD4:
	cx = 0x00AE
	goto l0137_1175
	// succ:  l0137_1175
l0137_0FDA:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0137_1010
	// succ:  l0137_0FE0 l0137_1010
l0137_0FE0:
	ah = Mem0[ds:si + 0x0009:byte]
	ax = ax & 0x0600
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_1010
	// succ:  l0137_0FED l0137_1010
l0137_0FED:
	SCZO = cond(ax - 0x0600)
	branch Test(EQ,Z) l0137_1010
	// succ:  l0137_0FF2 l0137_1010
l0137_0FF2:
	SCZO = cond(ax - 0x0200)
	branch Test(NE,Z) l0137_0FFE
	// succ:  l0137_0FF7 l0137_0FFE
l0137_0FF7:
	cx = 0x007A
	goto l0137_1175
	// succ:  l0137_1175
l0137_0FFE:
	cx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - 0x0400)
	branch Test(EQ,Z) l0137_1009
	// succ:  l0137_1006 l0137_1009
l0137_1006:
	goto l0137_1175
	// succ:  l0137_1175
l0137_1009:
	cx = 0x0079
	goto l0137_1175
	// succ:  l0137_1175
l0137_1010:
	cx = 0x0055
	goto l0137_1175
	// succ:  l0137_1175
l0137_1016:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x00)
	branch Test(NE,Z) l0137_1022
	// succ:  l0137_101C l0137_1022
l0137_101C:
	cx = 0x00AD
	goto l0137_1175
	// succ:  l0137_1175
l0137_1022:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0137_1064
	// succ:  l0137_1028 l0137_1064
l0137_1028:
	ah = Mem0[ds:si + 0x0009:byte]
	ax = ax & 0x0600
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_1064
	// succ:  l0137_1035 l0137_1064
l0137_1035:
	SCZO = cond(ax - 0x0600)
	branch Test(EQ,Z) l0137_1064
	// succ:  l0137_103A l0137_1064
l0137_103A:
	SCZO = cond(ax - 0x0200)
	branch Test(NE,Z) l0137_1052
	// succ:  l0137_103F l0137_1052
l0137_103F:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x05)
	branch Test(NE,Z) l0137_104C
	// succ:  l0137_1045 l0137_104C
l0137_1045:
	cx = 0x007F
	goto l0137_1175
	// succ:  l0137_1175
l0137_104C:
	cx = 0x007E
	goto l0137_1175
	// succ:  l0137_1175
l0137_1052:
	cx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - 0x0400)
	branch Test(EQ,Z) l0137_105D
	// succ:  l0137_105A l0137_105D
l0137_105A:
	goto l0137_1175
	// succ:  l0137_1175
l0137_105D:
	cx = 0x007D
	goto l0137_1175
	// succ:  l0137_1175
l0137_1064:
	cx = 0x0056
	goto l0137_1175
	// succ:  l0137_1175
l0137_106A:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x00)
	branch Test(NE,Z) l0137_1076
	// succ:  l0137_1070 l0137_1076
l0137_1070:
	cx = 0x00AF
	goto l0137_1175
	// succ:  l0137_1175
l0137_1076:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0137_10AC
	// succ:  l0137_107C l0137_10AC
l0137_107C:
	ah = Mem0[ds:si + 0x0009:byte]
	ax = ax & 0x0600
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_10AC
	// succ:  l0137_1089 l0137_10AC
l0137_1089:
	SCZO = cond(ax - 0x0600)
	branch Test(EQ,Z) l0137_10AC
	// succ:  l0137_108E l0137_10AC
l0137_108E:
	SCZO = cond(ax - 0x0200)
	branch Test(NE,Z) l0137_109A
	// succ:  l0137_1093 l0137_109A
l0137_1093:
	cx = 0x007C
	goto l0137_1175
	// succ:  l0137_1175
l0137_109A:
	cx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - 0x0400)
	branch Test(EQ,Z) l0137_10A5
	// succ:  l0137_10A2 l0137_10A5
l0137_10A2:
	goto l0137_1175
	// succ:  l0137_1175
l0137_10A5:
	cx = 0x007B
	goto l0137_1175
	// succ:  l0137_1175
l0137_10AC:
	cx = 0x0057
	goto l0137_1175
	// succ:  l0137_1175
l0137_10B2:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0137_10E8
	// succ:  l0137_10B8 l0137_10E8
l0137_10B8:
	ah = Mem0[ds:si + 0x0009:byte]
	ax = ax & 0x0600
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_10E8
	// succ:  l0137_10C5 l0137_10E8
l0137_10C5:
	SCZO = cond(ax - 0x0600)
	branch Test(EQ,Z) l0137_10E8
	// succ:  l0137_10CA l0137_10E8
l0137_10CA:
	SCZO = cond(ax - 0x0200)
	branch Test(NE,Z) l0137_10D6
	// succ:  l0137_10CF l0137_10D6
l0137_10CF:
	cx = 0x0091
	goto l0137_1175
	// succ:  l0137_1175
l0137_10D6:
	cx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - 0x0400)
	branch Test(EQ,Z) l0137_10E1
	// succ:  l0137_10DE l0137_10E1
l0137_10DE:
	goto l0137_1175
	// succ:  l0137_1175
l0137_10E1:
	cx = 0x0092
	goto l0137_1175
	// succ:  l0137_1175
l0137_10E8:
	cx = 0x0058
	goto l0137_1175
	// succ:  l0137_1175
l0137_10EE:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x00)
	branch Test(NE,Z) l0137_10FA
	// succ:  l0137_10F4 l0137_10FA
l0137_10F4:
	cx = 0x00B2
	goto l0137_1175
	// succ:  l0137_1175
l0137_10FA:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0137_1136
	// succ:  l0137_1100 l0137_1136
l0137_1100:
	ah = Mem0[ds:si + 0x0009:byte]
	ax = ax & 0x0600
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_1136
	// succ:  l0137_110D l0137_1136
l0137_110D:
	SCZO = cond(ax - 0x0600)
	branch Test(EQ,Z) l0137_1136
	// succ:  l0137_1112 l0137_1136
l0137_1112:
	SCZO = cond(ax - 0x0200)
	branch Test(NE,Z) l0137_1128
	// succ:  l0137_1117 l0137_1128
l0137_1117:
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x06)
	branch Test(NE,Z) l0137_1122
	// succ:  l0137_111D l0137_1122
l0137_111D:
	cx = 0x0076
	goto l0137_1175
	// succ:  l0137_1175
l0137_1122:
	cx = 0x0077
	goto l0137_1175
	// succ:  l0137_1175
l0137_1128:
	cx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(ax - 0x0400)
	branch Test(NE,Z) l0137_1175
	// succ:  l0137_1130 l0137_1175
l0137_1130:
	cx = 0x0078
	goto l0137_1175
	// succ:  l0137_1175
l0137_1136:
	cx = 0x0059
	goto l0137_1175
	// succ:  l0137_1175
l0137_113C:
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	cl = Mem0[0x0137:bx + 0x11B2:byte]
	goto l0137_0DE6
	// succ:  l0137_0DE6
l0137_114A:
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	cl = Mem0[0x0137:bx + 0x11F9:byte]
	goto l0137_0DE6
	// succ:  l0137_0DE6
l0137_1158:
	cx = 0x005E
	goto l0137_1175
	// succ:  l0137_1175
l0137_115E:
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	cl = Mem0[0x0137:bx + 0x1194:byte]
	goto l0137_0DE6
	// succ:  l0137_0DE6
l0137_116C:
	cx = 0x0028
	goto l0137_1175
	// succ:  l0137_1175
l0137_1172:
	cx = 0x00C2
	// succ:  l0137_1175
l0137_1175:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_0CAC_exit
fn0137_0CAC_exit:


// fn0137_1208
// Return size: 4
void fn0137_1208()
fn0137_1208_entry:
	// succ:  l0137_1208
l0137_1208:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = 0x0001
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0013)
	branch Test(ULE,CZ) l0137_1225
	// succ:  l0137_1222 l0137_1225
l0137_1222:
	goto l0137_130B
	// succ:  l0137_130B
l0137_1225:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v12 = ax
	ax = bx
	bx = v12
	switch (ax) { l0137_1256 l0137_125C l0137_126E l0137_1274 l0137_127A l0137_1280 l0137_128E l0137_12A0 l0137_12B8 l0137_12C8 l0137_12CE l0137_12D4 l0137_12DA l0137_12E0 l0137_12E6 l0137_12EC l0137_12F6 l0137_12FC l0137_1302 l0137_1308 }
	// succ:  l0137_1256 l0137_125C l0137_126E l0137_1274 l0137_127A l0137_1280 l0137_128E l0137_12A0 l0137_12B8 l0137_12C8 l0137_12CE l0137_12D4 l0137_12DA l0137_12E0 l0137_12E6 l0137_12EC l0137_12F6 l0137_12FC l0137_1302 l0137_1308
l0137_1256:
	cx = 0x0002
	goto l0137_130B
	// succ:  l0137_130B
l0137_125C:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - cx)
	branch Test(NE,Z) l0137_1268
	// succ:  l0137_1261 l0137_1268
l0137_1261:
	cx = 0x0004
	goto l0137_130B
	// succ:  l0137_130B
l0137_1268:
	cx = 0x0003
	goto l0137_130B
	// succ:  l0137_130B
l0137_126E:
	cx = 0x0005
	goto l0137_130B
	// succ:  l0137_130B
l0137_1274:
	cx = 0x0006
	goto l0137_130B
	// succ:  l0137_130B
l0137_127A:
	cx = 0x0007
	goto l0137_130B
	// succ:  l0137_130B
l0137_1280:
	bx = Mem0[ss:bp + 0x0006:word16]
	cl = Mem0[0x0137:bx + 0x132C:byte]
	// succ:  l0137_1288
l0137_1288:
	ch = ch - ch
	SCZO = cond(ch)
	goto l0137_130B
	// succ:  l0137_130B
l0137_128E:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0004)
	branch Test(ULT,C) l0137_129A
	// succ:  l0137_1294 l0137_129A
l0137_1294:
	cx = 0x000B
	goto l0137_130B
	// succ:  l0137_130B
l0137_129A:
	cx = 0x000C
	goto l0137_130B
	// succ:  l0137_130B
l0137_12A0:
	dx = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(dx - 0x0002)
	branch Test(ULE,CZ) l0137_12B2
	// succ:  l0137_12A8 l0137_12B2
l0137_12A8:
	SCZO = cond(dx - 0x0004)
	branch Test(EQ,Z) l0137_12B2
	// succ:  l0137_12AD l0137_12B2
l0137_12AD:
	cx = 0x000D
	goto l0137_130B
	// succ:  l0137_130B
l0137_12B2:
	cx = 0x000E
	goto l0137_130B
	// succ:  l0137_130B
l0137_12B8:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - cx)
	branch Test(NE,Z) l0137_12C2
	// succ:  l0137_12BD l0137_12C2
l0137_12BD:
	cx = 0x0010
	goto l0137_130B
	// succ:  l0137_130B
l0137_12C2:
	cx = 0x000F
	goto l0137_130B
	// succ:  l0137_130B
l0137_12C8:
	cx = 0x0011
	goto l0137_130B
	// succ:  l0137_130B
l0137_12CE:
	cx = 0x0012
	goto l0137_130B
	// succ:  l0137_130B
l0137_12D4:
	cx = 0x0013
	goto l0137_130B
	// succ:  l0137_130B
l0137_12DA:
	cx = 0x0014
	goto l0137_130B
	// succ:  l0137_130B
l0137_12E0:
	cx = 0x0015
	goto l0137_130B
	// succ:  l0137_130B
l0137_12E6:
	cx = 0x0016
	goto l0137_130B
	// succ:  l0137_130B
l0137_12EC:
	bx = Mem0[ss:bp + 0x0006:word16]
	cl = Mem0[0x0137:bx + 0x133E:byte]
	goto l0137_1288
	// succ:  l0137_1288
l0137_12F6:
	cx = 0x001A
	goto l0137_130B
	// succ:  l0137_130B
l0137_12FC:
	cx = 0x001B
	goto l0137_130B
	// succ:  l0137_130B
l0137_1302:
	cx = 0x0025
	goto l0137_130B
	// succ:  l0137_130B
l0137_1308:
	cx = 0x0024
	// succ:  l0137_130B
l0137_130B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LoadCursor(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0137_1321
	// succ:  l0137_131E l0137_1321
l0137_131E:
	ax = Mem0[ds:0x3D74:word16]
	// succ:  l0137_1321
l0137_1321:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_1208_exit
fn0137_1208_exit:


// fn0137_134C
// Return size: 4
void fn0137_134C()
fn0137_134C_entry:
	// succ:  l0137_134C
l0137_134C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn0137_14DE (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0137_137A
	// succ:  l0137_1377 l0137_137A
l0137_1377:
	goto l0137_140D
	// succ:  l0137_140D
l0137_137A:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0137_1397
	// succ:  l0137_1380 l0137_1397
l0137_1380:
	al = Mem0[ds:si + 0x0008:byte]
	al = al & 0xC0
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x80)
	branch Test(NE,Z) l0137_1397
	// succ:  l0137_1389 l0137_1397
l0137_1389:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_1956 (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = 0x0001
	// succ:  l0137_1397
l0137_1397:
	SZO = cond(Mem0[ds:si + 0x0008:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0137_140D
	// succ:  l0137_139D l0137_140D
l0137_139D:
	dx = si + 0x000C
	cx = cx - cx
	SCZO = cond(cx)
	al = Mem0[ds:si + 0x000A:byte]
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l0137_140D
	// succ:  l0137_13AF l0137_140D
l0137_13AF:
	si = dx
	di = cx
	// succ:  l0137_13B3
l0137_13B3:
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l0137_1404
	// succ:  l0137_13B9 l0137_1404
l0137_13B9:
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0137_13EA
	// succ:  l0137_13BF l0137_13EA
l0137_13BF:
	ax = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:si + 0x0002:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:si:word16]
	ah = ah & 0x03
	SZO = cond(ah)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0006:word16]
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0137_1404
	// succ:  l0137_13E7 l0137_1404
l0137_13E7:
	goto l0137_140D
	// succ:  l0137_140D
l0137_13EA:
	ax = Mem0[ds:si:word16]
	ah = ah & 0x03
	SZO = cond(ah)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn0167_070A (retsize: 4;)
	sp = sp + 0x000C
	// succ:  l0137_1404
l0137_1404:
	si = si + 0x000A
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - Mem0[ss:bp - 0x000A:word16])
	branch Test(LT,SO) l0137_13B3
	// succ:  l0137_140D l0137_13B3
l0137_140D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_134C_exit fn0137_134C_exit
fn0137_134C_exit:


// fn0137_1422
// Return size: 4
void fn0137_1422()
fn0137_1422_entry:
	// succ:  l0137_1422
l0137_1422:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	SZO = cond(Mem0[ds:si + 0x0008:byte] & 0x02)
	C = false
	branch Test(NE,Z) l0137_1445
	// succ:  l0137_1442 l0137_1445
l0137_1442:
	goto l0137_14C9
	// succ:  l0137_14C9
l0137_1445:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn0137_14DE (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_14C9
	// succ:  l0137_1451 l0137_14C9
l0137_1451:
	dx = si + 0x000C
	cx = cx - cx
	SCZO = cond(cx)
	al = Mem0[ds:si + 0x000A:byte]
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l0137_14C9
	// succ:  l0137_1463 l0137_14C9
l0137_1463:
	si = dx
	di = cx
	// succ:  l0137_1467
l0137_1467:
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l0137_14C0
	// succ:  l0137_146D l0137_14C0
l0137_146D:
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0137_149E
	// succ:  l0137_1473 l0137_149E
l0137_1473:
	ax = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:si + 0x0002:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:si:word16]
	ah = ah & 0x03
	SZO = cond(ah)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0006:word16]
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0137_14C0
	// succ:  l0137_149B l0137_14C0
l0137_149B:
	goto l0137_14C9
	// succ:  l0137_14C9
l0137_149E:
	ax = Mem0[ds:si:word16]
	ah = ah & 0x03
	SZO = cond(ah)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0006:word16]
	al = Mem0[ds:si + 0x0001:byte]
	ax = ax & 0x0004
	SZO = cond(ax)
	C = false
	al = al >>u 0x01
	SCZO = cond(al)
	al = al >>u 0x01
	SCZO = cond(al)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_070A (retsize: 4;)
	sp = sp + 0x000C
	// succ:  l0137_14C0
l0137_14C0:
	si = si + 0x000A
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - di)
	branch Test(GT,SZO) l0137_1467
	// succ:  l0137_14C9 l0137_1467
l0137_14C9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_1422_exit fn0137_1422_exit
fn0137_1422_exit:


// fn0137_14DE
// Return size: 4
void fn0137_14DE()
fn0137_14DE_entry:
	// succ:  l0137_14DE
l0137_14DE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	dx = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(dx - 0x0002)
	branch Test(NE,Z) l0137_1502
	// succ:  l0137_14F3 l0137_1502
l0137_14F3:
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x06)
	branch Test(NE,Z) l0137_1516
	// succ:  l0137_14FD l0137_1516
l0137_14FD:
	ax = 0x0001
	goto l0137_1518
	// succ:  l0137_1518
l0137_1502:
	SCZO = cond(dx - 0x0007)
	branch Test(EQ,Z) l0137_1516
	// succ:  l0137_1507 l0137_1516
l0137_1507:
	SCZO = cond(dx - 0x0004)
	branch Test(NE,Z) l0137_14FD
	// succ:  l0137_150C l0137_14FD
l0137_150C:
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x0F)
	branch Test(EQ,Z) l0137_14FD
	// succ:  l0137_1516 l0137_14FD
l0137_1516:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0137_1518
l0137_1518:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_14DE_exit
fn0137_14DE_exit:


// fn0137_1522
// Return size: 4
void fn0137_1522()
fn0137_1522_entry:
	// succ:  l0137_1522
l0137_1522:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx - 0x000F)
	branch Test(UGE,C) l0137_1552
	// succ:  l0137_1539 l0137_1552
l0137_1539:
	di = Mem0[ds:0x4DEA:word16]
	si = bx
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + bx
	SCZO = cond(si)
	si = si + Mem0[ds:di:word16]
	SCZO = cond(si)
	ax = Mem0[ds:si + 0x002B:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = di
	goto l0137_1577
	// succ:  l0137_1577
l0137_1552:
	si = Mem0[ds:0x4DEA:word16]
	si = Mem0[ds:si:word16]
	ax = Mem0[ds:si + 0x003F:word16]
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_1577
	// succ:  l0137_1562 l0137_1577
l0137_1562:
	si = bx
	ax = bx
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	bx = Mem0[ss:bp - 0x000C:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx - 0x0020 + si:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	// succ:  l0137_1577
l0137_1577:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	si = di + 0x000C
	al = Mem0[ds:di + 0x000A:byte]
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0004:word16] = ax
	al = Mem0[ds:di:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0010)
	branch Test(UGT,CZ) l0137_15C2
	// succ:  l0137_1597 l0137_15C2
l0137_1597:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v17 = ax
	ax = bx
	bx = v17
	switch (ax) { l0137_15CA l0137_15CA l0137_15CA l0137_15CA l0137_15D2 l0137_15CA l0137_15CA l0137_15CA l0137_15CA l0137_15CA l0137_15CA l0137_15CA l0137_15D2 l0137_15CA l0137_15C2 l0137_15C2 l0137_15DA }
	// succ:  l0137_15CA l0137_15CA l0137_15CA l0137_15CA l0137_15D2 l0137_15CA l0137_15CA l0137_15CA l0137_15CA l0137_15CA l0137_15CA l0137_15CA l0137_15D2 l0137_15CA l0137_15C2 l0137_15C2 l0137_15DA
l0137_15C2:
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	goto l0137_15DF
	// succ:  l0137_15DF
l0137_15CA:
	Mem0[ss:bp - 0x0006:word16] = 0x0064
	goto l0137_15DF
	// succ:  l0137_15DF
l0137_15D2:
	Mem0[ss:bp - 0x0006:word16] = 0x0032
	goto l0137_15DF
	// succ:  l0137_15DF
l0137_15DA:
	Mem0[ss:bp - 0x0006:word16] = 0x012C
	// succ:  l0137_15DF
l0137_15DF:
	SZO = cond(Mem0[ds:di + 0x0008:byte] & 0x04)
	C = false
	branch Test(NE,Z) l0137_15E8
	// succ:  l0137_15E5 l0137_15E8
l0137_15E5:
	goto l0137_16E6
	// succ:  l0137_16E6
l0137_15E8:
	SZO = cond(Mem0[ds:di + 0x0008:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l0137_161F
	// succ:  l0137_15EE l0137_161F
l0137_15EE:
	SZO = cond(Mem0[ds:si + 0x0002:word16] & 0xFFFC)
	C = false
	branch Test(NE,Z) l0137_1604
	// succ:  l0137_15F5 l0137_1604
l0137_15F5:
	v18 = Mem0[ds:di + 0x0009:byte] | 0x01
	Mem0[ds:di + 0x0009:byte] = v18
	SZO = cond(Mem0[ds:di + 0x0009:byte])
	C = false
	call fn0087_04C4 (retsize: 4;)
	ax = 0x0291
	goto l0137_16E9
	// succ:  l0137_16E9
l0137_1604:
	v19 = Mem0[ds:si + 0x0002:word16] - 0x0004
	Mem0[ds:si + 0x0002:word16] = v19
	SCZO = cond(v19)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0147_2C00 (retsize: 4;)
	sp = sp + 0x0002
	call fn0087_04C4 (retsize: 4;)
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x02)
	branch Test(NE,Z) l0137_161F
	// succ:  l0137_161A l0137_161F
l0137_161A:
	call fn0087_08FA (retsize: 4;)
	// succ:  l0137_161F
l0137_161F:
	dx = dx - dx
	SCZO = cond(dx)
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - dx)
	branch Test(GT,SZO) l0137_1629
	// succ:  l0137_1626 l0137_1629
l0137_1626:
	goto l0137_16F3
	// succ:  l0137_16F3
l0137_1629:
	Mem0[ss:bp - 0x000E:word16] = di
	Mem0[ss:bp - 0x0008:word16] = dx
	di = dx
	// succ:  l0137_1631
l0137_1631:
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x10)
	C = false
	branch Test(NE,Z) l0137_163A
	// succ:  l0137_1637 l0137_163A
l0137_1637:
	goto l0137_16D5
	// succ:  l0137_16D5
l0137_163A:
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l0137_166D
	// succ:  l0137_1640 l0137_166D
l0137_1640:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	SCZO = cond(Mem0[ds:si + 0x0008:word16] - dx)
	branch Test(UGT,CZ) l0137_169E
	// succ:  l0137_164C l0137_169E
l0137_164C:
	branch Test(ULT,C) l0137_1653
	// succ:  l0137_164E l0137_1653
l0137_164E:
	SCZO = cond(Mem0[ds:si + 0x0006:word16] - ax)
	branch Test(UGE,C) l0137_169E
	// succ:  l0137_1653 l0137_169E
l0137_1653:
	ax = Mem0[ds:si + 0x0002:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	cx = 0x8CA0
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[ds:0x3CFA:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ds:0x3CFC:word16] + C
	SCZO = cond(dx)
	Mem0[ds:si + 0x0006:word16] = ax
	Mem0[ds:si + 0x0008:word16] = dx
	// succ:  l0137_166D
l0137_166D:
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0137_16AE
	// succ:  l0137_1673 l0137_16AE
l0137_1673:
	ax = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:si + 0x0002:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:si:word16]
	ah = ah & 0x03
	SZO = cond(ah)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0006:word16]
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0137_16D5
	// succ:  l0137_169B l0137_16D5
l0137_169B:
	goto l0137_16E1
	// succ:  l0137_16E1
l0137_169E:
	ax = 0x0323
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	goto l0137_16D5
	// succ:  l0137_16D5
l0137_16AE:
	ax = Mem0[ss:bp - 0x000A:word16]
	Mem0[ds:0x4C28:word16] = ax
	ax = Mem0[ds:si:word16]
	ah = ah & 0x03
	SZO = cond(ah)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_070A (retsize: 4;)
	sp = sp + 0x000C
	Mem0[ds:0x4C28:word16] = 0x0000
	// succ:  l0137_16D5
l0137_16D5:
	si = si + 0x000A
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - di)
	branch Test(LE,SZO) l0137_16E1
	// succ:  l0137_16DE l0137_16E1
l0137_16DE:
	goto l0137_1631
	// succ:  l0137_1631
l0137_16E1:
	di = Mem0[ss:bp - 0x000E:word16]
	goto l0137_16F3
	// succ:  l0137_16F3
l0137_16E6:
	ax = 0x013C
	// succ:  l0137_16E9
l0137_16E9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0137_16F3
l0137_16F3:
	al = Mem0[ds:di + 0x0008:byte]
	al = al & 0xC0
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x40)
	branch Test(NE,Z) l0137_1710
	// succ:  l0137_16FC l0137_1710
l0137_16FC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_1956 (retsize: 2;)
	sp = sp + 0x0004
	SZO = cond(Mem0[ds:di + 0x0008:byte] & 0x10)
	C = false
	branch Test(NE,Z) l0137_1710
	// succ:  l0137_170B l0137_1710
l0137_170B:
	call fn0087_04C4 (retsize: 4;)
	// succ:  l0137_1710
l0137_1710:
	SZO = cond(Mem0[ds:di + 0x0008:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l0137_1746
	// succ:  l0137_1716 l0137_1746
l0137_1716:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_06D4 (retsize: 2;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	call fn0137_0066 (retsize: 2;)
	sp = sp + 0x0002
	call fn0087_04C4 (retsize: 4;)
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x02)
	branch Test(NE,Z) l0137_174E
	// succ:  l0137_173F l0137_174E
l0137_173F:
	call fn0087_08FA (retsize: 4;)
	goto l0137_174E
	// succ:  l0137_174E
l0137_1746:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0137_174E
l0137_174E:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x02)
	branch Test(NE,Z) l0137_175F
	// succ:  l0137_1755 l0137_175F
l0137_1755:
	call fn0087_08FA (retsize: 4;)
	call fn0077_1B56 (retsize: 4;)
	// succ:  l0137_175F
l0137_175F:
	SCZO = cond(Mem0[ds:0x032A:word16] - 0x0000)
	branch Test(NE,Z) l0137_177E
	// succ:  l0137_1766 l0137_177E
l0137_1766:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_10B8 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0BB0 (retsize: 4;)
	sp = sp + 0x0004
	goto l0137_178D
	// succ:  l0137_178D
l0137_177E:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_10B8 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x032E:word16] = ax
	// succ:  l0137_178D
l0137_178D:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_1522_exit
fn0137_1522_exit:


// fn0137_179A
// Return size: 4
void fn0137_179A()
fn0137_179A_entry:
	// succ:  l0137_179A
l0137_179A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0010
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = Mem0[ss:bp + 0x0008:word16]
	bx = cx
	si = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x00)
	branch Test(EQ,Z) l0137_1825
	// succ:  l0137_17B6 l0137_1825
l0137_17B6:
	di = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ds:si + 0x0012:word16]
	dx = Mem0[ds:si + 0x0014:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn015F_0000 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	call fn0137_0326 (retsize: 2;)
	sp = sp + 0x000A
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_1828
	// succ:  l0137_17E8 l0137_1828
l0137_17E8:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	cl = Mem0[ds:si + 0x0001:byte]
	ch = ch - ch
	SCZO = cond(ch)
	si = cx
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + cx
	SCZO = cond(si)
	bx = Mem0[ds:di:word16]
	bx = Mem0[ds:bx + 0x0026 + si:word16]
	bx = Mem0[ds:bx:word16]
	v18 = Mem0[ds:bx + 0x0012:word16] + ax
	Mem0[ds:bx + 0x0012:word16] = v18
	SCZO = cond(v18)
	v19 = Mem0[ds:bx + 0x0014:word16] + dx + C
	Mem0[ds:bx + 0x0014:word16] = v19
	SCZO = cond(v19)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_044A (retsize: 2;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	call fn0137_1CE4 (retsize: 2;)
l0137_1825:
	ax = 0x0001
	// succ:  l0137_1828
l0137_1828:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_179A_exit
fn0137_179A_exit:


// fn0137_1834
// Return size: 4
void fn0137_1834()
fn0137_1834_entry:
	// succ:  l0137_1834
l0137_1834:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = si - si
	SCZO = cond(si)
	di = Mem0[ss:bp + 0x0008:word16]
	// succ:  l0137_1848
l0137_1848:
	bx = Mem0[ds:di:word16]
	ax = Mem0[ds:bx + 0x002B + si:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = ax
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x0012:word16]
	dx = Mem0[ds:bx + 0x0014:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn0137_044A (retsize: 2;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn0137_179A (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_1896
	// succ:  l0137_187E l0137_1896
l0137_187E:
	bx = Mem0[ss:bp - 0x0004:word16]
	bx = Mem0[ds:bx:word16]
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:bx + 0x0014:word16] = ax
	Mem0[ds:bx + 0x0012:word16] = ax
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - 0x0014)
	branch Test(LT,SO) l0137_1848
	// succ:  l0137_1893 l0137_1848
l0137_1893:
	goto l0137_18B4
	// succ:  l0137_18B4
l0137_1896:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_044A (retsize: 2;)
	sp = sp + 0x000E
	ax = ax - ax
	SCZO = cond(ax)
	goto l0137_18B7
	// succ:  l0137_18B7
l0137_18B4:
	ax = 0x0001
	// succ:  l0137_18B7
l0137_18B7:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_1834_exit
fn0137_1834_exit:


// fn0137_18C4
// Return size: 4
void fn0137_18C4()
fn0137_18C4_entry:
	// succ:  l0137_18C4
l0137_18C4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x000A:word16]
	si = Mem0[ss:bp + 0x000C:word16]
	ax = Mem0[ds:si:word16]
	si = di
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + di
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	bx = Mem0[ds:si + 0x0026:word16]
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l0137_1948
	// succ:  l0137_18EC l0137_1948
l0137_18EC:
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	si = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:si + 0x0014:word16] - dx)
	branch Test(ULT,C) l0137_1948
	// succ:  l0137_18F9 l0137_1948
l0137_18F9:
	branch Test(UGT,CZ) l0137_1900
	// succ:  l0137_18FB l0137_1900
l0137_18FB:
	SCZO = cond(Mem0[ds:si + 0x0012:word16] - ax)
	branch Test(ULT,C) l0137_1948
	// succ:  l0137_1900 l0137_1948
l0137_1900:
	Mem0[ss:bp - 0x0006:word16] = bx
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_0000 (retsize: 2;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_1948
	// succ:  l0137_1912 l0137_1948
l0137_1912:
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn0147_20D8 (retsize: 4;)
	sp = sp + 0x0008
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	bx = Mem0[ss:bp - 0x0006:word16]
	bx = Mem0[ds:bx:word16]
	v16 = Mem0[ds:bx + 0x0012:word16] - ax
	Mem0[ds:bx + 0x0012:word16] = v16
	SCZO = cond(v16)
	v17 = Mem0[ds:bx + 0x0014:word16] - dx - C
	Mem0[ds:bx + 0x0014:word16] = v17
	SCZO = cond(v17)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_044A (retsize: 2;)
	sp = sp + 0x000E
	ax = si
	goto l0137_194A
	// succ:  l0137_194A
l0137_1948:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0137_194A
l0137_194A:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_18C4_exit
fn0137_18C4_exit:


// fn0137_1956
// Return size: 4
void fn0137_1956()
fn0137_1956_entry:
	// succ:  l0137_1956
l0137_1956:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	dx = Mem0[ss:bp + 0x0006:word16]
	si = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[ds:si + 0x0001:byte]
	Mem0[ss:bp - 0x0003:byte] = al
	SZO = cond(dl & 0x01)
	C = false
	branch Test(EQ,Z) l0137_1979
	// succ:  l0137_1975 l0137_1979
l0137_1975:
	v15 = Mem0[ds:si + 0x0009:byte] | 0x01
	Mem0[ds:si + 0x0009:byte] = v15
	SZO = cond(Mem0[ds:si + 0x0009:byte])
	C = false
	// succ:  l0137_1979
l0137_1979:
	al = Mem0[ds:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0137_198E
	// succ:  l0137_1980 l0137_198E
l0137_1980:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0137_1994
	// succ:  l0137_1983 l0137_1994
l0137_1983:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0137_199A
	// succ:  l0137_1986 l0137_199A
l0137_1986:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0137_19A0
	// succ:  l0137_1989 l0137_19A0
l0137_1989:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0137_19DC
	// succ:  l0137_19DC
l0137_198E:
	si = 0x3D6C
	goto l0137_19A3
	// succ:  l0137_19A3
l0137_1994:
	si = 0x3D7C
	goto l0137_19A3
	// succ:  l0137_19A3
l0137_199A:
	si = 0x4100
	goto l0137_19A3
	// succ:  l0137_19A3
l0137_19A0:
	si = 0x3D81
	// succ:  l0137_19A3
l0137_19A3:
	SZO = cond(dl & 0x02)
	C = false
	branch Test(EQ,Z) l0137_19C2
	// succ:  l0137_19A8 l0137_19C2
l0137_19A8:
	cl = Mem0[ss:bp - 0x0003:byte]
	cl = cl & 0x07
	SZO = cond(cl)
	C = false
	al = 0x01
	al = al << cl
	SCZO = cond(al)
	cl = 0x03
	bl = Mem0[ss:bp - 0x0003:byte]
	bl = bl >>u cl
	SCZO = cond(bl)
	bh = bh - bh
	SCZO = cond(bh)
	v21 = Mem0[ds:bx + si:byte] | al
	Mem0[ds:bx + si:byte] = v21
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	ax = 0x0001
	goto l0137_19DC
	// succ:  l0137_19DC
l0137_19C2:
	cl = 0x03
	bl = Mem0[ss:bp - 0x0003:byte]
	bl = bl >>u cl
	SCZO = cond(bl)
	bh = bh - bh
	SCZO = cond(bh)
	al = Mem0[ds:bx + si:byte]
	cl = Mem0[ss:bp - 0x0003:byte]
	cl = cl & 0x07
	SZO = cond(cl)
	C = false
	dx = 0x0001
	dx = dx << cl
	SCZO = cond(dx)
	al = al & dl
	SZO = cond(al)
	C = false
	ah = ah - ah
	SCZO = cond(ah)
	// succ:  l0137_19DC
l0137_19DC:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_1956_exit
fn0137_1956_exit:


// fn0137_19E8
// Return size: 4
void fn0137_19E8()
fn0137_19E8_entry:
	// succ:  l0137_19E8
l0137_19E8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x4100
	cx = 0x0003
	di = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l0137_1A02
l0137_1A02:
	branch cx == 0x0000 l0137_1A04
	// succ:  l0137_1A02_1 l0137_1A04
l0137_1A02_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0137_1A02
	// succ:  l0137_1A02
l0137_1A04:
	dx = 0x3D7C
	cx = 0x0005
	di = dx
	// succ:  l0137_1A0C
l0137_1A0C:
	branch cx == 0x0000 l0137_1A0E
	// succ:  l0137_1A0C_1 l0137_1A0E
l0137_1A0C_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0137_1A0C
	// succ:  l0137_1A0C
l0137_1A0E:
	dx = 0x3D81
	cx = 0x0001
	di = dx
	// succ:  l0137_1A16
l0137_1A16:
	branch cx == 0x0000 l0137_1A18
	// succ:  l0137_1A16_1 l0137_1A18
l0137_1A16_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0137_1A16
	// succ:  l0137_1A16
l0137_1A18:
	di = 0x3D6C
	cx = 0x0006
	// succ:  l0137_1A1E
l0137_1A1E:
	branch cx == 0x0000 l0137_1A20
	// succ:  l0137_1A1E_1 l0137_1A20
l0137_1A1E_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0137_1A1E
	// succ:  l0137_1A1E
l0137_1A20:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_19E8_exit
fn0137_19E8_exit:


// fn0137_1A62
// Return size: 4
void fn0137_1A62()
fn0137_1A62_entry:
	// succ:  l0137_1A62
l0137_1A62:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0073
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x4DEA:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_1AEF
	// succ:  l0137_1A8A l0137_1AEF
l0137_1A8A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	v13 = Mem0[ds:si + 0x0009:byte] | 0x40
	Mem0[ds:si + 0x0009:byte] = v13
	SZO = cond(Mem0[ds:si + 0x0009:byte])
	C = false
	v14 = Mem0[ds:si + 0x0009:byte] | 0x80
	Mem0[ds:si + 0x0009:byte] = v14
	SZO = cond(Mem0[ds:si + 0x0009:byte])
	C = false
	Mem0[ds:si + 0x0026:word16] = 0x000F
	Mem0[ds:si + 0x0024:word16] = 0x000F
	Mem0[ds:si + 0x0018:word16] = 0x4240
	Mem0[ds:si + 0x001A:word16] = 0x000F
	di = si + 0x0028
	Mem0[ss:bp - 0x0008:word16] = si
	si = di
	di = Mem0[ss:bp - 0x0006:word16]
	ax = 0x0137
	es = ax
	// succ:  l0137_1ABE
l0137_1ABE:
	al = Mem0[0x0137:di + 0x0056:byte]
	al = al ^ Mem0[ds:si:byte]
	SZO = cond(al)
	C = false
	ax = ax & 0x007F
	SZO = cond(ax)
	C = false
	v17 = Mem0[ds:si:word16] ^ ax
	Mem0[ds:si:word16] = v17
	SZO = cond(Mem0[ds:si:word16])
	C = false
	si = si + 0x0005
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - 0x000F)
	branch Test(LT,SO) l0137_1ABE
	// succ:  l0137_1AD3 l0137_1ABE
l0137_1AD3:
	si = Mem0[ss:bp - 0x0008:word16]
	v19 = Mem0[ds:si + 0x0069:byte] | 0x80
	Mem0[ds:si + 0x0069:byte] = v19
	SZO = cond(Mem0[ds:si + 0x0069:byte])
	C = false
	Mem0[ds:si + 0x0070:byte] = 0x0D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	call fn0167_175E (retsize: 4;)
	ax = 0x0001
	// succ:  l0137_1AEF
l0137_1AEF:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_1A62_exit
fn0137_1A62_exit:


// fn0137_1AFA
// Return size: 4
void fn0137_1AFA()
fn0137_1AFA_entry:
	// succ:  l0137_1AFA
l0137_1AFA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_07C2 (retsize: 2;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0137_1B28
	// succ:  l0137_1B23 l0137_1B28
l0137_1B23:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0137_1B71
	// succ:  l0137_1B71
l0137_1B28:
	di = di - di
	SCZO = cond(di)
	si = di
	// succ:  l0137_1B2C
l0137_1B2C:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_0000 (retsize: 2;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0137_1B64
	// succ:  l0137_1B3B l0137_1B64
l0137_1B3B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0147_20D8 (retsize: 4;)
	sp = sp + 0x0008
	bx = Mem0[ss:bp - 0x0006:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:bx + 0x002B + di:word16] = ax
	ax = si + 0x0001
	si = ax
	di = di + 0x0005
	SCZO = cond(di)
	SCZO = cond(di - 0x0014)
	branch Test(LT,SO) l0137_1B2C
	// succ:  l0137_1B61 l0137_1B2C
l0137_1B61:
	goto l0137_1B6E
	// succ:  l0137_1B6E
l0137_1B64:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	call fn0137_00F0 (retsize: 2;)
	sp = sp + 0x0002
	goto l0137_1B23
	// succ:  l0137_1B23
l0137_1B6E:
	ax = Mem0[ss:bp - 0x0006:word16]
	// succ:  l0137_1B71
l0137_1B71:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_1AFA_exit
fn0137_1AFA_exit:


// fn0137_1B7C
// Return size: 4
void fn0137_1B7C()
fn0137_1B7C_entry:
	// succ:  l0137_1B7C
l0137_1B7C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	si = Mem0[ds:bx + 0x006C:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0137_1BCE
	// succ:  l0137_1B98 l0137_1BCE
l0137_1B98:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0137_1BD8 (retsize: 2;)
	sp = sp + 0x0002
	di = di - di
	SCZO = cond(di)
	SCZO = cond(Mem0[ds:0x4CBC:word16] - di)
	branch Test(LE,SZO) l0137_1BCE
	// succ:  l0137_1BA5 l0137_1BCE
l0137_1BA5:
	Mem0[ss:bp - 0x0006:word16] = si
	dx = 0x4B6F
	si = dx
	// succ:  l0137_1BAD
l0137_1BAD:
	ax = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(NE,Z) l0137_1BC4
	// succ:  l0137_1BB4 l0137_1BC4
l0137_1BB4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si - 0x000F:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l0137_1BC4
l0137_1BC4:
	si = si + 0x0011
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(Mem0[ds:0x4CBC:word16] - di)
	branch Test(GT,SZO) l0137_1BAD
	// succ:  l0137_1BCE l0137_1BAD
l0137_1BCE:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_1B7C_exit fn0137_1B7C_exit
fn0137_1B7C_exit:


// fn0137_1BD8
// Return size: 4
void fn0137_1BD8()
fn0137_1BD8_entry:
	// succ:  l0137_1BD8
l0137_1BD8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = Mem0[ds:bx:word16]
	si = bx + 0x0028
	cx = Mem0[ds:bx + 0x0024:word16]
	ax = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx + bx
	SCZO = cond(cx)
	cx = cx + 0x0028
	SCZO = cond(cx)
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l0137_1C08
	// succ:  l0137_1C05 l0137_1C08
l0137_1C05:
	goto l0137_1CD8
	// succ:  l0137_1CD8
l0137_1C08:
	Mem0[ss:bp - 0x000C:word16] = bx
	SCZO = cond(cx - si)
	branch Test(UGT,CZ) l0137_1C12
	// succ:  l0137_1C0F l0137_1C12
l0137_1C0F:
	goto l0137_1CD8
	// succ:  l0137_1CD8
l0137_1C12:
	Mem0[ss:bp - 0x000E:word16] = cx
	// succ:  l0137_1C15
l0137_1C15:
	bx = Mem0[ds:si + 0x0003:word16]
	di = Mem0[ds:bx:word16]
	ax = Mem0[ss:bp - 0x000C:word16]
	ax = ax + 0x0028
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	bx = Mem0[ds:bx:word16]
	al = Mem0[ds:bx:byte]
	Mem0[ss:bp - 0x0003:byte] = al
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0137_1C42
	// succ:  l0137_1C30 l0137_1C42
l0137_1C30:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_1956 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0137_1C42
	// succ:  l0137_1C3C l0137_1C42
l0137_1C3C:
	Mem0[ss:bp - 0x0007:byte] = 0xFA
	goto l0137_1C48
	// succ:  l0137_1C48
l0137_1C42:
	al = Mem0[ds:di + 0x0001:byte]
	Mem0[ss:bp - 0x0007:byte] = al
	// succ:  l0137_1C48
l0137_1C48:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - si)
	branch Test(UGE,C) l0137_1C7E
	// succ:  l0137_1C4D l0137_1C7E
l0137_1C4D:
	Mem0[ss:bp - 0x000A:word16] = si
	di = Mem0[ss:bp - 0x0006:word16]
	// succ:  l0137_1C53
l0137_1C53:
	bx = Mem0[ds:di + 0x0003:word16]
	si = Mem0[ds:bx:word16]
	bx = Mem0[ds:bx:word16]
	al = Mem0[ss:bp - 0x0003:byte]
	SCZO = cond(Mem0[ds:bx:byte] - al)
	branch Test(UGT,CZ) l0137_1C9A
	// succ:  l0137_1C61 l0137_1C9A
l0137_1C61:
	SCZO = cond(Mem0[ds:si:byte] - al)
	branch Test(NE,Z) l0137_1C92
	// succ:  l0137_1C65 l0137_1C92
l0137_1C65:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0137_1C84
	// succ:  l0137_1C6B l0137_1C84
l0137_1C6B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0137_1956 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0137_1C84
	// succ:  l0137_1C77 l0137_1C84
l0137_1C77:
	Mem0[ss:bp - 0x0004:byte] = 0xFA
	goto l0137_1C8A
	// succ:  l0137_1C8A
l0137_1C7E:
	di = Mem0[ss:bp - 0x0006:word16]
	goto l0137_1C9D
	// succ:  l0137_1C9D
l0137_1C84:
	al = Mem0[ds:si + 0x0001:byte]
	Mem0[ss:bp - 0x0004:byte] = al
	// succ:  l0137_1C8A
l0137_1C8A:
	al = Mem0[ss:bp - 0x0007:byte]
	SCZO = cond(Mem0[ss:bp - 0x0004:byte] - al)
	branch Test(UGT,CZ) l0137_1C9A
	// succ:  l0137_1C92 l0137_1C9A
l0137_1C92:
	di = di + 0x0005
	SCZO = cond(di)
	SCZO = cond(di - Mem0[ss:bp - 0x000A:word16])
	branch Test(ULT,C) l0137_1C53
	// succ:  l0137_1C9A l0137_1C53
l0137_1C9A:
	si = Mem0[ss:bp - 0x000A:word16]
	si = Mem0[ss:bp - 0x000A:word16]
	// succ:  l0137_1C9D
l0137_1C9D:
	SCZO = cond(di - si)
	branch Test(UGE,C) l0137_1CCD
	// succ:  l0137_1CA1 l0137_1CCD
l0137_1CA1:
	ax = Mem0[ds:si + 0x0003:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = si
	ax = ax - di
	SCZO = cond(ax)
	cx = 0x0005
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = di + 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0932 (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0008:word16]
	Mem0[ds:di + 0x0003:word16] = ax
	// succ:  l0137_1CCD
l0137_1CCD:
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x000E:word16])
	branch Test(UGE,C) l0137_1CD8
	// succ:  l0137_1CD5 l0137_1CD8
l0137_1CD5:
	goto l0137_1C15
	// succ:  l0137_1C15
l0137_1CD8:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_1BD8_exit
fn0137_1BD8_exit:


// fn0137_1CE4
// Return size: 4
void fn0137_1CE4()
fn0137_1CE4_entry:
	// succ:  l0137_1CE4
l0137_1CE4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4DEA:word16] - 0x0000)
	branch Test(EQ,Z) l0137_1D6A
	// succ:  l0137_1CF9 l0137_1D6A
l0137_1CF9:
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x000C:word16]
	dx = Mem0[ds:bx + 0x000E:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	cx = Mem0[ds:bx + 0x0014:word16]
	si = Mem0[ds:bx + 0x0016:word16]
	Mem0[ss:bp - 0x0006:word16] = cx
	Mem0[ss:bp - 0x0004:word16] = si
	si = si >>u 0x0001
	SCZO = cond(si)
	v14 = (cx & 0x0001 << 0x01) != 0x0000
	cx = __rcr(cx, 0x01, C)
	C = v14
	SCZO = cond(si - dx)
	branch Test(ULT,C) l0137_1D2A
	// succ:  l0137_1D1F l0137_1D2A
l0137_1D1F:
	branch Test(UGT,CZ) l0137_1D25
	// succ:  l0137_1D21 l0137_1D25
l0137_1D21:
	SCZO = cond(cx - ax)
	branch Test(ULE,CZ) l0137_1D2A
	// succ:  l0137_1D25 l0137_1D2A
l0137_1D25:
	ax = 0x0032
	goto l0137_1D5E
	// succ:  l0137_1D5E
l0137_1D2A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	ax = 0x0032
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	v18 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v18
	cx = Mem0[ss:bp - 0x0006:word16]
	bx = Mem0[ss:bp - 0x0004:word16]
	cl = cl & 0xFE
	SZO = cond(cl)
	C = false
	ax = ax - cx
	SCZO = cond(ax)
	dx = dx - bx - C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax + 0x0032
	SCZO = cond(ax)
	// succ:  l0137_1D5E
l0137_1D5E:
	Mem0[ds:0x4D18:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0137_1D6A
l0137_1D6A:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_1CE4_exit
fn0137_1CE4_exit:


// fn0137_1D74
// Return size: 4
void fn0137_1D74()
fn0137_1D74_entry:
	// succ:  l0137_1D74
l0137_1D74:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ds:si:word16]
	ax = ax + 0x0028
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	bx = Mem0[ds:si:word16]
	cx = Mem0[ds:bx + 0x0024:word16]
	ax = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(cx)
	SCZO = cond(Mem0[ds:bx:byte] - 0x10)
	branch Test(NE,Z) l0137_1DB6
	// succ:  l0137_1DA2 l0137_1DB6
l0137_1DA2:
	SCZO = cond(Mem0[ds:bx + 0x0001:byte] - 0x0D)
	branch Test(NE,Z) l0137_1DB6
	// succ:  l0137_1DA8 l0137_1DB6
l0137_1DA8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1700 (retsize: 4;)
	sp = sp + 0x0002
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0137_1DCD
	// succ:  l0137_1DB2 l0137_1DCD
l0137_1DB2:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0137_1DD0
	// succ:  l0137_1DD0
l0137_1DB6:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - cx)
	branch Test(UGE,C) l0137_1DCD
	// succ:  l0137_1DBB l0137_1DCD
l0137_1DBB:
	bx = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(Mem0[ds:bx + 0x0003:word16] - 0x0000)
	branch Test(NE,Z) l0137_1DB2
	// succ:  l0137_1DC4 l0137_1DB2
l0137_1DC4:
	v15 = Mem0[ss:bp - 0x0006:word16] + 0x0005
	Mem0[ss:bp - 0x0006:word16] = v15
	SCZO = cond(v15)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - cx)
	branch Test(ULT,C) l0137_1DBB
	// succ:  l0137_1DCD l0137_1DBB
l0137_1DCD:
	ax = 0x0001
	// succ:  l0137_1DD0
l0137_1DD0:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0137_1D74_exit
fn0137_1D74_exit:


// fn0147_20D8
// Return size: 4
void fn0147_20D8()
fn0147_20D8_entry:
	// succ:  l0147_20D8
l0147_20D8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = si
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = ax
	Mem0[ds:bx:byte] = 0x12
	al = Mem0[ss:bp + 0x000A:byte]
	Mem0[ds:bx + 0x0001:byte] = al
	v13 = Mem0[ds:bx + 0x0009:byte] | 0x01
	Mem0[ds:bx + 0x0009:byte] = v13
	SZO = cond(Mem0[ds:bx + 0x0009:byte])
	C = false
	v15 = Mem0[ds:bx + 0x0009:byte] | 0x08
	Mem0[ds:bx + 0x0009:byte] = v15
	SZO = cond(Mem0[ds:bx + 0x0009:byte])
	C = false
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:bx + 0x0004:word16] = ax
	Mem0[ds:bx + 0x0002:word16] = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx + 0x0012:word16] = ax
	Mem0[ds:bx + 0x0014:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = di
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0147_20D8_exit
fn0147_20D8_exit:


// fn0147_2A26
// Return size: 4
void fn0147_2A26()
fn0147_2A26_entry:
	// succ:  l0147_2A26
l0147_2A26:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x000A:word16]
	// succ:  l0147_2A38
l0147_2A38:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	bx = si
	bx = bx + di
	SCZO = cond(bx)
	es = Mem0[ss:bp + 0x000C:selector]
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(EQ,Z) l0147_2A38
	// succ:  l0147_2A4F l0147_2A38
l0147_2A4F:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0147_2A81
	// succ:  l0147_2A53 l0147_2A81
l0147_2A53:
	ax = es
	// succ:  l0147_2A55
l0147_2A55:
	bx = di
	al = Mem0[es:bx + si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - Mem0[ss:bp + 0x000E:word16])
	branch Test(ULE,CZ) l0147_2A81
	// succ:  l0147_2A61 l0147_2A81
l0147_2A61:
	Mem0[ss:bp - 0x0004:word16] = si
	// succ:  l0147_2A64
l0147_2A64:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	bx = si
	ax = Mem0[ss:bp + 0x000C:word16]
	bx = bx + di
	SCZO = cond(bx)
	es = ax
	SCZO = cond(Mem0[es:bx:byte] - 0x00)
	branch Test(EQ,Z) l0147_2A64
	// succ:  l0147_2A7D l0147_2A64
l0147_2A7D:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0147_2A55
	// succ:  l0147_2A81 l0147_2A55
l0147_2A81:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l0147_2A8E
	// succ:  l0147_2A87 l0147_2A8E
l0147_2A87:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0147_2A8E
	// succ:  l0147_2A8B l0147_2A8E
l0147_2A8B:
	si = 0x0001
	// succ:  l0147_2A8E
l0147_2A8E:
	ax = si
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0147_2A26_exit
fn0147_2A26_exit:


// fn0147_2A9C
// Return size: 4
void fn0147_2A9C()
fn0147_2A9C_entry:
	// succ:  l0147_2A9C
l0147_2A9C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0147_2AB6
	// succ:  l0147_2AB3 l0147_2AB6
l0147_2AB3:
	goto l0147_2B6E
	// succ:  l0147_2B6E
l0147_2AB6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0147_2AC6
	// succ:  l0147_2AC3 l0147_2AC6
l0147_2AC3:
	goto l0147_2B6E
	// succ:  l0147_2B6E
l0147_2AC6:
	al = Mem0[ds:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0006
	SCZO = cond(ax)
	branch Test(EQ,Z) l0147_2AEE
	// succ:  l0147_2ACF l0147_2AEE
l0147_2ACF:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0147_2B12
	// succ:  l0147_2AD2 l0147_2B12
l0147_2AD2:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0147_2B32
	// succ:  l0147_2AD5 l0147_2B32
l0147_2AD5:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0147_2B52
	// succ:  l0147_2AD8 l0147_2B52
l0147_2AD8:
	bl = Mem0[ds:si:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[0x0147:bx + 0x2BD4:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	goto l0147_2B99
	// succ:  l0147_2B99
l0147_2AEE:
	ax = 0x0005
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0147:bx + 0x24DE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0147:bx + 0x24DC:word16]
	goto l0147_2B91
	// succ:  l0147_2B91
l0147_2B12:
	ax = 0x0005
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0147:bx + 0x0428:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0147:bx + 0x0426:word16]
	goto l0147_2B91
	// succ:  l0147_2B91
l0147_2B32:
	ax = 0x0005
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0147:bx + 0x1D52:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0147:bx + 0x1D50:word16]
	goto l0147_2B91
	// succ:  l0147_2B91
l0147_2B52:
	ax = 0x0005
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cl = 0x03
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0147:bx + 0x1292:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0147:bx + 0x1290:word16]
	goto l0147_2B91
	// succ:  l0147_2B91
l0147_2B6E:
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0002:word16]
	ax = Mem0[ds:0x00B0:word16]
	dx_ax = Mem0[ds:0x4C60:word16] *u ax
	SCZO = cond(dx_ax)
	ax = ax - 0x003C
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l0147_2B91
l0147_2B91:
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0004:word16] = dx
	// succ:  l0147_2B99
l0147_2B99:
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0x0003)
	branch Test(NE,Z) l0147_2BC6
	// succ:  l0147_2BA0 l0147_2BC6
l0147_2BA0:
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0147_2BBF
	// succ:  l0147_2BA6 l0147_2BBF
l0147_2BA6:
	SCZO = cond(Mem0[ds:si + 0x0004:word16] - 0x0000)
	branch Test(LT,SO) l0147_2BBF
	// succ:  l0147_2BAC l0147_2BBF
l0147_2BAC:
	branch Test(GT,SZO) l0147_2BB4
	// succ:  l0147_2BAE l0147_2BB4
l0147_2BAE:
	SCZO = cond(Mem0[ds:si + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l0147_2BBF
	// succ:  l0147_2BB4 l0147_2BBF
l0147_2BB4:
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(NE,Z) l0147_2BBF
	// succ:  l0147_2BBA l0147_2BBF
l0147_2BBA:
	SCZO = cond(ax - 0x0019)
	branch Test(ULT,C) l0147_2BC6
	// succ:  l0147_2BBF l0147_2BC6
l0147_2BBF:
	ax = 0x0019
	dx_ax = (int32) ax
	goto l0147_2BC9
	// succ:  l0147_2BC9
l0147_2BC6:
	dx = Mem0[ss:bp - 0x0004:word16]
	// succ:  l0147_2BC9
l0147_2BC9:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0147_2A9C_exit
fn0147_2A9C_exit:


// fn0147_2C00
// Return size: 4
void fn0147_2C00()
fn0147_2C00_entry:
	// succ:  l0147_2C00
l0147_2C00:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(Mem0[ds:si:byte] - 0x03)
	branch Test(EQ,Z) l0147_2C1B
	// succ:  l0147_2C16 l0147_2C1B
l0147_2C16:
	SCZO = cond(Mem0[ds:si:byte] - 0x04)
	branch Test(NE,Z) l0147_2C5F
	// succ:  l0147_2C1B l0147_2C5F
l0147_2C1B:
	SCZO = cond(Mem0[ds:si:byte] - 0x03)
	branch Test(NE,Z) l0147_2C3E
	// succ:  l0147_2C20 l0147_2C3E
l0147_2C20:
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[0x0147:bx + 0x22D9:word16]
	dx = Mem0[0x0147:bx + 0x22DB:word16]
	goto l0147_2C59
	// succ:  l0147_2C59
l0147_2C3E:
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[0x0147:bx + 0x1F7F:word16]
	dx = Mem0[0x0147:bx + 0x1F81:word16]
	// succ:  l0147_2C59
l0147_2C59:
	v15 = Mem0[ds:si + 0x0002:word16] - ax
	Mem0[ds:si + 0x0002:word16] = v15
	SCZO = cond(v15)
	v17 = Mem0[ds:si + 0x0004:word16] - dx - C
	Mem0[ds:si + 0x0004:word16] = v17
	SCZO = cond(v17)
	// succ:  l0147_2C5F
l0147_2C5F:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0147_2C00_exit
fn0147_2C00_exit:


// fn0147_2C6A
// Return size: 4
void fn0147_2C6A()
fn0147_2C6A_entry:
	// succ:  l0147_2C6A
l0147_2C6A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000A:word16]
	di = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l0147_2CB0
	// succ:  l0147_2C85 l0147_2CB0
l0147_2C85:
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	cx = Mem0[ds:si + 0x000E:word16]
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	cx = cx + di
	SCZO = cond(cx)
	cx = cx + 0x000F
	SCZO = cond(cx)
	SCZO = cond(cx - ax)
	branch Test(ULE,CZ) l0147_2CB0
	// succ:  l0147_2C9E l0147_2CB0
l0147_2C9E:
	ax = 0x038F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax - ax
	SCZO = cond(ax)
	goto l0147_2D1A
	// succ:  l0147_2D1A
l0147_2CB0:
	SCZO = cond(Mem0[ds:si:byte] - 0x03)
	branch Test(NE,Z) l0147_2CD8
	// succ:  l0147_2CB5 l0147_2CD8
l0147_2CB5:
	ax = di
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0147:bx + 0x22DB:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0147:bx + 0x22D9:word16]
	goto l0147_2CF8
	// succ:  l0147_2CF8
l0147_2CD8:
	ax = di
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0147:bx + 0x1F81:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0147:bx + 0x1F7F:word16]
	// succ:  l0147_2CF8
l0147_2CF8:
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	v19 = Mem0[ds:si + 0x0002:word16] + ax
	Mem0[ds:si + 0x0002:word16] = v19
	SCZO = cond(v19)
	v21 = Mem0[ds:si + 0x0004:word16] + dx + C
	Mem0[ds:si + 0x0004:word16] = v21
	SCZO = cond(v21)
	di = di << 0x0001
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + Mem0[ds:si + 0x000E:word16]
	SCZO = cond(di)
	ax = di
	al = al ^ Mem0[ds:si + 0x000E:byte]
	SZO = cond(al)
	C = false
	ax = ax & 0x0003
	SZO = cond(ax)
	C = false
	di = di ^ ax
	SZO = cond(di)
	C = false
	Mem0[ds:si + 0x000E:word16] = di
	ax = 0x0001
	// succ:  l0147_2D1A
l0147_2D1A:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0147_2C6A_exit
fn0147_2C6A_exit:


// fn015F_0000
// Return size: 4
void fn015F_0000()
fn015F_0000_entry:
	// succ:  l015F_0000
l015F_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000A:word16]
	bx = Mem0[ds:si:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l015F_005A
	// succ:  l015F_001A l015F_005A
l015F_001A:
	si = Mem0[ds:si:word16]
	SZO = cond(Mem0[ds:si + 0x0009:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l015F_002A
	// succ:  l015F_0022 l015F_002A
l015F_0022:
	ax = Mem0[ds:bx + 0x001C:word16]
	dx = Mem0[ds:bx + 0x001E:word16]
	goto l015F_0030
	// succ:  l015F_0030
l015F_002A:
	ax = Mem0[ds:bx + 0x000C:word16]
	dx = Mem0[ds:bx + 0x000E:word16]
	// succ:  l015F_0030
l015F_0030:
	si = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:si:word16] = ax
	Mem0[ds:si + 0x0002:word16] = dx
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l015F_0050
	// succ:  l015F_003E l015F_0050
l015F_003E:
	ax = Mem0[ds:bx + 0x0020:word16]
	dx = Mem0[ds:bx + 0x0022:word16]
	si = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:si:word16] = ax
	Mem0[ds:si + 0x0002:word16] = dx
	goto l015F_0210
	// succ:  l015F_0210
l015F_0050:
	ax = Mem0[ds:bx + 0x0010:word16]
	dx = Mem0[ds:bx + 0x0012:word16]
	goto l015F_0208
	// succ:  l015F_0208
l015F_005A:
	di = bx
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0012)
	branch Test(UGT,CZ) l015F_0096
	// succ:  l015F_0067 l015F_0096
l015F_0067:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v18 = ax
	ax = bx
	bx = v18
	switch (ax) { l015F_009C l015F_00B8 l015F_00CE l015F_00B8 l015F_00E4 l015F_0122 l015F_0138 l015F_0168 l015F_0180 l015F_0180 l015F_0196 l015F_01AC l015F_01C2 l015F_0096 l015F_0096 l015F_01D8 l015F_01E0 l015F_01F6 l015F_01FC }
	// succ:  l015F_009C l015F_00B8 l015F_00CE l015F_00B8 l015F_00E4 l015F_0122 l015F_0138 l015F_0168 l015F_0180 l015F_0180 l015F_0196 l015F_01AC l015F_01C2 l015F_0096 l015F_0096 l015F_01D8 l015F_01E0 l015F_01F6 l015F_01FC
l015F_0096:
	ax = 0x00C8
	goto l015F_01DB
	// succ:  l015F_01DB
l015F_009C:
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = 0x0096
	Mem0[ds:bx + 0x0002:word16] = 0x0000
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x00C8
	// succ:  l015F_00AF
l015F_00AF:
	Mem0[ds:bx + 0x0002:word16] = 0x0000
	goto l015F_0210
	// succ:  l015F_0210
l015F_00B8:
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = 0x00C8
	Mem0[ds:bx + 0x0002:word16] = 0x0000
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x015E
	goto l015F_00AF
	// succ:  l015F_00AF
l015F_00CE:
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = 0x02EE
	Mem0[ds:bx + 0x0002:word16] = 0x0000
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x1388
	goto l015F_00AF
	// succ:  l015F_00AF
l015F_00E4:
	al = Mem0[ds:di + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0454
	SCZO = cond(si)
	// succ:  l015F_00F9
l015F_00F9:
	ax = Mem0[0x015F:si + 0x0004:word16]
	dx = Mem0[0x015F:si + 0x0006:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = ax
	Mem0[ds:bx + 0x0002:word16] = dx
	ax = Mem0[0x015F:si + 0x0008:word16]
	dx = Mem0[0x015F:si + 0x000A:word16]
	// succ:  l015F_0111
l015F_0111:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = ax
	Mem0[ds:bx + 0x0002:word16] = dx
	ax = 0x015F
	es = ax
	goto l015F_0210
	// succ:  l015F_0210
l015F_0122:
	al = Mem0[ds:di + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + 0x06F6
	SCZO = cond(si)
	goto l015F_00F9
	// succ:  l015F_00F9
l015F_0138:
	al = Mem0[ds:di + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + 0x05E8
	SCZO = cond(si)
	// succ:  l015F_014D
l015F_014D:
	ax = Mem0[0x015F:si + 0x0006:word16]
	dx = Mem0[0x015F:si + 0x0008:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = ax
	Mem0[ds:bx + 0x0002:word16] = dx
	ax = Mem0[0x015F:si + 0x000A:word16]
	dx = Mem0[0x015F:si + 0x000C:word16]
	goto l015F_0111
	// succ:  l015F_0111
l015F_0168:
	al = Mem0[ds:di + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + 0x056A
	SCZO = cond(si)
	goto l015F_014D
	// succ:  l015F_014D
l015F_0180:
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = 0x01F4
	Mem0[ds:bx + 0x0002:word16] = 0x0000
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x07D0
	goto l015F_00AF
	// succ:  l015F_00AF
l015F_0196:
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = 0x01F4
	Mem0[ds:bx + 0x0002:word16] = 0x0000
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x1770
	goto l015F_00AF
	// succ:  l015F_00AF
l015F_01AC:
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = 0x001E
	Mem0[ds:bx + 0x0002:word16] = 0x0000
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0032
	goto l015F_00AF
	// succ:  l015F_00AF
l015F_01C2:
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = 0x05DC
	Mem0[ds:bx + 0x0002:word16] = 0x0000
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0FA0
	goto l015F_00AF
	// succ:  l015F_00AF
l015F_01D8:
	ax = 0x01F4
	// succ:  l015F_01DB
l015F_01DB:
	dx = dx - dx
	SCZO = cond(dx)
	goto l015F_0200
	// succ:  l015F_0200
l015F_01E0:
	bx = di
	ax = Mem0[ds:bx + 0x0012:word16]
	dx = Mem0[ds:bx + 0x0014:word16]
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = ax
	Mem0[ds:bx + 0x0002:word16] = dx
	bx = Mem0[ss:bp + 0x0008:word16]
	goto l015F_020B
	// succ:  l015F_020B
l015F_01F6:
	ax = 0x1388
	goto l015F_01FF
	// succ:  l015F_01FF
l015F_01FC:
	ax = 0x0064
	// succ:  l015F_01FF
l015F_01FF:
	dx_ax = (int32) ax
	// succ:  l015F_0200
l015F_0200:
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = ax
	Mem0[ds:bx + 0x0002:word16] = dx
	// succ:  l015F_0208
l015F_0208:
	bx = Mem0[ss:bp + 0x0006:word16]
	// succ:  l015F_020B
l015F_020B:
	Mem0[ds:bx:word16] = ax
	Mem0[ds:bx + 0x0002:word16] = dx
	// succ:  l015F_0210
l015F_0210:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn015F_0000_exit
fn015F_0000_exit:


// fn015F_0808
// Return size: 4
void fn015F_0808()
fn015F_0808_entry:
	// succ:  l015F_0808
l015F_0808:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x000C:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0006:word16] = bx
	al = Mem0[ds:bx + 0x0001:byte]
	Mem0[ss:bp - 0x0007:byte] = al
	al = Mem0[ds:bx:byte]
	Mem0[ss:bp - 0x0003:byte] = al
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l015F_0862
	// succ:  l015F_0830 l015F_0862
l015F_0830:
	di = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l015F_083D
	// succ:  l015F_0839 l015F_083D
l015F_0839:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l015F_08B0
	// succ:  l015F_083D l015F_08B0
l015F_083D:
	al = Mem0[ds:bx + 0x0009:byte]
	ax = ax & 0x0006
	SZO = cond(ax)
	C = false
	al = al >>u 0x01
	SCZO = cond(al)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l015F_0874
	// succ:  l015F_084B l015F_0874
l015F_084B:
	al = Mem0[ss:bp - 0x0003:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0006
	SCZO = cond(ax)
	branch Test(LT,SO) l015F_08B0
	// succ:  l015F_0855 l015F_08B0
l015F_0855:
	ax = ax - 0x0005
	SCZO = cond(ax)
	branch Test(LE,SZO) l015F_0868
	// succ:  l015F_085A l015F_0868
l015F_085A:
	ax = ax - 0x0003
	SCZO = cond(ax)
	branch Test(EQ,Z) l015F_0868
	// succ:  l015F_085F l015F_0868
l015F_085F:
	goto l015F_08B0
	// succ:  l015F_08B0
l015F_0862:
	di = Mem0[ss:bp + 0x0008:word16]
	goto l015F_08B0
	// succ:  l015F_08B0
l015F_0868:
	SCZO = cond(Mem0[ss:bp - 0x0007:byte] - 0x00)
	branch Test(EQ,Z) l015F_08B0
	// succ:  l015F_086E l015F_08B0
l015F_086E:
	ax = 0x0313
	goto l015F_08A3
	// succ:  l015F_08A3
l015F_0874:
	SCZO = cond(si - 0x0001)
	branch Test(NE,Z) l015F_0896
	// succ:  l015F_0879 l015F_0896
l015F_0879:
	SCZO = cond(Mem0[ss:bp - 0x0003:byte] - 0x01)
	branch Test(EQ,Z) l015F_08B0
	// succ:  l015F_087F l015F_08B0
l015F_087F:
	SCZO = cond(Mem0[ss:bp - 0x0003:byte] - 0x02)
	branch Test(EQ,Z) l015F_08B0
	// succ:  l015F_0885 l015F_08B0
l015F_0885:
	SCZO = cond(Mem0[ss:bp - 0x0003:byte] - 0x03)
	branch Test(EQ,Z) l015F_08B0
	// succ:  l015F_088B l015F_08B0
l015F_088B:
	SCZO = cond(Mem0[ss:bp - 0x0003:byte] - 0x04)
	branch Test(EQ,Z) l015F_08B0
	// succ:  l015F_0891 l015F_08B0
l015F_0891:
	ax = 0x030B
	goto l015F_08A3
	// succ:  l015F_08A3
l015F_0896:
	SCZO = cond(si - 0x0002)
	branch Test(NE,Z) l015F_08A0
	// succ:  l015F_089B l015F_08A0
l015F_089B:
	ax = 0x0311
	goto l015F_08A3
	// succ:  l015F_08A3
l015F_08A0:
	ax = 0x031A
	// succ:  l015F_08A3
l015F_08A3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax - 0x0001
	SZO = cond(ax)
	v18 = Mem0[ss:bp + 0x000A:word16] + ax
	Mem0[ss:bp + 0x000A:word16] = v18
	SCZO = cond(v18)
	// succ:  l015F_08B0
l015F_08B0:
	bx = Mem0[ss:bp - 0x0006:word16]
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0013)
	branch Test(ULE,CZ) l015F_08C0
	// succ:  l015F_08BD l015F_08C0
l015F_08BD:
	goto l015F_0E38
	// succ:  l015F_0E38
l015F_08C0:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v19 = ax
	ax = bx
	bx = v19
	switch (ax) { l015F_08F0 l015F_094A l015F_09D8 l015F_0A72 l015F_0B20 l015F_0B68 l015F_0B92 l015F_0BBE l015F_0BEC l015F_0C16 l015F_0C6A l015F_0CA0 l015F_0CFC l015F_0D40 l015F_0D7C l015F_0DA0 l015F_0DE6 l015F_0DEC l015F_0E10 l015F_0E2C }
	// succ:  l015F_08F0 l015F_094A l015F_09D8 l015F_0A72 l015F_0B20 l015F_0B68 l015F_0B92 l015F_0BBE l015F_0BEC l015F_0C16 l015F_0C6A l015F_0CA0 l015F_0CFC l015F_0D40 l015F_0D7C l015F_0DA0 l015F_0DE6 l015F_0DEC l015F_0E10 l015F_0E2C
l015F_08F0:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l015F_08FF
	// succ:  l015F_08F4 l015F_08FF
l015F_08F4:
	bx = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - di)
	branch Test(EQ,Z) l015F_08FF
	// succ:  l015F_08FC l015F_08FF
l015F_08FC:
	goto l015F_0A94
	// succ:  l015F_0A94
l015F_08FF:
	bx = Mem0[ss:bp - 0x0006:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l015F_0928
	// succ:  l015F_0908 l015F_0928
l015F_0908:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l015F_0928
	// succ:  l015F_0915 l015F_0928
l015F_0915:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = 0x0033
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x01B0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0150
	// succ:  l015F_0923
l015F_0923:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l015F_0C57
	// succ:  l015F_0C57
l015F_0928:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	bl = Mem0[ss:bp - 0x0007:byte]
	bh = bh - bh
	SCZO = cond(bh)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + 0x02B6
	SCZO = cond(bx)
	// succ:  l015F_093C
l015F_093C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:bx + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:bx + 0x0004:word16]
	goto l015F_0C57
	// succ:  l015F_0C57
l015F_094A:
	dx = Mem0[ss:bp - 0x0006:word16]
	si = Mem0[ss:bp + 0x0008:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l015F_095E
	// succ:  l015F_0954 l015F_095E
l015F_0954:
	bx = dx
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - si)
	branch Test(EQ,Z) l015F_095E
	// succ:  l015F_095B l015F_095E
l015F_095B:
	goto l015F_0A94
	// succ:  l015F_0A94
l015F_095E:
	SCZO = cond(Mem0[ss:bp - 0x0007:byte] - 0x01)
	branch Test(NE,Z) l015F_099E
	// succ:  l015F_0964 l015F_099E
l015F_0964:
	bx = dx
	si = Mem0[ds:bx + 0x0010:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l015F_0986
	// succ:  l015F_096F l015F_0986
l015F_096F:
	bx = si
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + si
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	SCZO = cond(Mem0[ds:bx + 0x063E:byte] - 0xFF)
	branch Test(NE,Z) l015F_0986
	// succ:  l015F_0980 l015F_0986
l015F_0980:
	ax = 0x0208
	goto l015F_0E2F
	// succ:  l015F_0E2F
l015F_0986:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = 0x003E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x063A:word16]
	goto l015F_0DD8
	// succ:  l015F_0DD8
l015F_099E:
	di = dx
	SZO = cond(Mem0[ds:di + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l015F_09C4
	// succ:  l015F_09A6 l015F_09C4
l015F_09A6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l015F_09C4
	// succ:  l015F_09B3 l015F_09C4
l015F_09B3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = 0x0033
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x01B0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0149
	goto l015F_0923
	// succ:  l015F_0923
l015F_09C4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	bl = Mem0[ss:bp - 0x0007:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + 0x03B8
	SCZO = cond(bx)
	goto l015F_0D6C
	// succ:  l015F_0D6C
l015F_09D8:
	bx = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ds:bx + 0x000E:word16]
	dx = dx >>u 0x0001
	SCZO = cond(dx)
	dx = dx >>u 0x0001
	SCZO = cond(dx)
	al = Mem0[ss:bp - 0x0007:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + 0x0252
	SCZO = cond(si)
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l015F_0A1E
	// succ:  l015F_09F5 l015F_0A1E
l015F_09F5:
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - di)
	branch Test(EQ,Z) l015F_0A1E
	// succ:  l015F_09FA l015F_0A1E
l015F_09FA:
	bx = Mem0[ds:bx + 0x0006:word16]
	si = Mem0[ds:bx:word16]
	di = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	si = Mem0[ss:bp + 0x000A:word16]
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l015F_0A0B
l015F_0A0B:
	branch cx == 0x0000 l015F_0A0D
	// succ:  l015F_0A0B_1 l015F_0A0D
l015F_0A0B_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l015F_0A0B
	// succ:  l015F_0A0D l015F_0A0B
l015F_0A0D:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v23 = si
	si = di
	di = v23
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l015F_0A15
l015F_0A15:
	branch cx == 0x0000 l015F_0A17
	// succ:  l015F_0A15_2 l015F_0A17
l015F_0A15_2:
	v24 = Mem0[si:word16]
	Mem0[di:word16] = v24
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l015F_0A15
	// succ:  l015F_0A15
l015F_0A17:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l015F_0A19
l015F_0A19:
	branch cx == 0x0000 l015F_0A1B
	// succ:  l015F_0A19_1 l015F_0A1B
l015F_0A19_1:
	v30 = Mem0[si:byte]
	Mem0[di:byte] = v30
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l015F_0A19
	// succ:  l015F_0A19
l015F_0A1B:
	goto l015F_0A4C
	// succ:  l015F_0A4C
l015F_0A1E:
	Mem0[ss:bp - 0x0004:word16] = dx
	di = dx
	SCZO = cond(Mem0[0x015F:si:word16] - 0x0000)
	branch Test(EQ,Z) l015F_0A40
	// succ:  l015F_0A29 l015F_0A40
l015F_0A29:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:si + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	goto l015F_0A4C
	// succ:  l015F_0A4C
l015F_0A40:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:si + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l015F_0A4C
l015F_0A4C:
	bx = Mem0[ss:bp - 0x0006:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l015F_0A58
	// succ:  l015F_0A55 l015F_0A58
l015F_0A55:
	goto l015F_0E38
	// succ:  l015F_0E38
l015F_0A58:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l015F_0A6C
	// succ:  l015F_0A65 l015F_0A6C
l015F_0A65:
	ax = 0x04EE
	goto l015F_0B02
	// succ:  l015F_0B02
l015F_0A6C:
	ax = 0x0141
	goto l015F_0E2F
	// succ:  l015F_0E2F
l015F_0A72:
	bx = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ds:bx + 0x000E:word16]
	dx = dx >>u 0x0001
	SCZO = cond(dx)
	dx = dx >>u 0x0001
	SCZO = cond(dx)
	al = Mem0[ss:bp - 0x0007:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + 0x077A
	SCZO = cond(si)
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l015F_0AB8
	// succ:  l015F_0A8F l015F_0AB8
l015F_0A8F:
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - di)
	branch Test(EQ,Z) l015F_0AB8
	// succ:  l015F_0A94 l015F_0AB8
l015F_0A94:
	bx = Mem0[ds:bx + 0x0006:word16]
	bx = Mem0[ds:bx + 0x0006:word16]
	// succ:  l015F_0A97
l015F_0A97:
	si = Mem0[ds:bx:word16]
	di = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	si = Mem0[ss:bp + 0x000A:word16]
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l015F_0AA5
l015F_0AA5:
	branch cx == 0x0000 l015F_0AA7
	// succ:  l015F_0AA5_1 l015F_0AA7
l015F_0AA5_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l015F_0AA5
	// succ:  l015F_0AA7 l015F_0AA5
l015F_0AA7:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v27 = si
	si = di
	di = v27
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l015F_0AAF
l015F_0AAF:
	branch cx == 0x0000 l015F_0AB1
	// succ:  l015F_0AAF_2 l015F_0AB1
l015F_0AAF_2:
	v28 = Mem0[si:word16]
	Mem0[di:word16] = v28
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l015F_0AAF
	// succ:  l015F_0AAF
l015F_0AB1:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l015F_0AB3
l015F_0AB3:
	branch cx == 0x0000 l015F_0AB5
	// succ:  l015F_0AB3_1 l015F_0AB5
l015F_0AB3_1:
	v29 = Mem0[si:byte]
	Mem0[di:byte] = v29
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l015F_0AB3
	// succ:  l015F_0AB3
l015F_0AB5:
	goto l015F_0E38
	// succ:  l015F_0E38
l015F_0AB8:
	Mem0[ss:bp - 0x0004:word16] = dx
	di = dx
	SCZO = cond(Mem0[0x015F:si:word16] - 0x0000)
	branch Test(EQ,Z) l015F_0ADA
	// succ:  l015F_0AC3 l015F_0ADA
l015F_0AC3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:si + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	goto l015F_0AE6
	// succ:  l015F_0AE6
l015F_0ADA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:si + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l015F_0AE6
l015F_0AE6:
	bx = Mem0[ss:bp - 0x0006:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l015F_0AF2
	// succ:  l015F_0AEF l015F_0AF2
l015F_0AEF:
	goto l015F_0E38
	// succ:  l015F_0E38
l015F_0AF2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l015F_0B1A
	// succ:  l015F_0AFF l015F_0B1A
l015F_0AFF:
	ax = 0x04F9
	// succ:  l015F_0B02
l015F_0B02:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	call fn004F_08D8 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	bx = ax
	si = Mem0[ss:bp + 0x000A:word16]
	Mem0[ds:bx + si:byte] = 0x00
	goto l015F_0E38
	// succ:  l015F_0E38
l015F_0B1A:
	ax = 0x014D
	goto l015F_0E2F
	// succ:  l015F_0E2F
l015F_0B20:
	dx = Mem0[ss:bp - 0x0006:word16]
	si = Mem0[ss:bp + 0x0008:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l015F_0B34
	// succ:  l015F_0B2A l015F_0B34
l015F_0B2A:
	bx = dx
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - si)
	branch Test(EQ,Z) l015F_0B34
	// succ:  l015F_0B31 l015F_0B34
l015F_0B31:
	goto l015F_0A94
	// succ:  l015F_0A94
l015F_0B34:
	bx = dx
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l015F_0B56
	// succ:  l015F_0B3C l015F_0B56
l015F_0B3C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	bl = Mem0[ss:bp - 0x0007:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + 0x053E
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:bx + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:bx:word16]
	goto l015F_0DD8
	// succ:  l015F_0DD8
l015F_0B56:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = 0x0033
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x024C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x014C
	goto l015F_0923
	// succ:  l015F_0923
l015F_0B68:
	si = Mem0[ss:bp + 0x0008:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l015F_0B7A
	// succ:  l015F_0B6F l015F_0B7A
l015F_0B6F:
	di = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(Mem0[ds:di + 0x0006:word16] - si)
	branch Test(EQ,Z) l015F_0B7A
	// succ:  l015F_0B77 l015F_0B7A
l015F_0B77:
	goto l015F_0DAF
	// succ:  l015F_0DAF
l015F_0B7A:
	al = Mem0[ss:bp - 0x0007:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0454
	SCZO = cond(si)
	goto l015F_0DC5
	// succ:  l015F_0DC5
l015F_0B92:
	si = Mem0[ss:bp + 0x0008:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l015F_0BA4
	// succ:  l015F_0B99 l015F_0BA4
l015F_0B99:
	di = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(Mem0[ds:di + 0x0006:word16] - si)
	branch Test(EQ,Z) l015F_0BA4
	// succ:  l015F_0BA1 l015F_0BA4
l015F_0BA1:
	goto l015F_0DAF
	// succ:  l015F_0DAF
l015F_0BA4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	bl = Mem0[ss:bp - 0x0007:byte]
	bh = bh - bh
	SCZO = cond(bh)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + 0x06F6
	SCZO = cond(bx)
	goto l015F_0D6C
	// succ:  l015F_0D6C
l015F_0BBE:
	si = Mem0[ss:bp + 0x0008:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l015F_0BD0
	// succ:  l015F_0BC5 l015F_0BD0
l015F_0BC5:
	di = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(Mem0[ds:di + 0x0006:word16] - si)
	branch Test(EQ,Z) l015F_0BD0
	// succ:  l015F_0BCD l015F_0BD0
l015F_0BCD:
	goto l015F_0DAF
	// succ:  l015F_0DAF
l015F_0BD0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	bl = Mem0[ss:bp - 0x0007:byte]
	bh = bh - bh
	SCZO = cond(bh)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + 0x05E8
	SCZO = cond(bx)
	goto l015F_093C
	// succ:  l015F_093C
l015F_0BEC:
	si = Mem0[ss:bp + 0x0008:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l015F_0BFE
	// succ:  l015F_0BF3 l015F_0BFE
l015F_0BF3:
	di = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(Mem0[ds:di + 0x0006:word16] - si)
	branch Test(EQ,Z) l015F_0BFE
	// succ:  l015F_0BFB l015F_0BFE
l015F_0BFB:
	goto l015F_0DAF
	// succ:  l015F_0DAF
l015F_0BFE:
	al = Mem0[ss:bp - 0x0007:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + 0x056A
	SCZO = cond(si)
	goto l015F_0C43
	// succ:  l015F_0C43
l015F_0C16:
	dx = Mem0[ss:bp - 0x0006:word16]
	si = Mem0[ss:bp + 0x0008:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l015F_0C2A
	// succ:  l015F_0C20 l015F_0C2A
l015F_0C20:
	bx = dx
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - si)
	branch Test(EQ,Z) l015F_0C2A
	// succ:  l015F_0C27 l015F_0C2A
l015F_0C27:
	goto l015F_0A94
	// succ:  l015F_0A94
l015F_0C2A:
	bx = dx
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l015F_0C64
	// succ:  l015F_0C32 l015F_0C64
l015F_0C32:
	al = Mem0[ss:bp - 0x0007:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + 0x06AC
	SCZO = cond(si)
	// succ:  l015F_0C43
l015F_0C43:
	SCZO = cond(Mem0[0x015F:si:word16] - 0x0000)
	branch Test(EQ,Z) l015F_0C5C
	// succ:  l015F_0C49 l015F_0C5C
l015F_0C49:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:si + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:si + 0x0004:word16]
	// succ:  l015F_0C57
l015F_0C57:
	ax = ax - ax
	SCZO = cond(ax)
	goto l015F_0DDB
	// succ:  l015F_0DDB
l015F_0C5C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:si + 0x0002:word16]
	goto l015F_0E30
	// succ:  l015F_0E30
l015F_0C64:
	ax = 0x014B
	goto l015F_0E2F
	// succ:  l015F_0E2F
l015F_0C6A:
	dx = Mem0[ss:bp - 0x0006:word16]
	si = Mem0[ss:bp + 0x0008:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l015F_0C7E
	// succ:  l015F_0C74 l015F_0C7E
l015F_0C74:
	bx = dx
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - si)
	branch Test(EQ,Z) l015F_0C7E
	// succ:  l015F_0C7B l015F_0C7E
l015F_0C7B:
	goto l015F_0A94
	// succ:  l015F_0A94
l015F_0C7E:
	bx = dx
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l015F_0C9A
	// succ:  l015F_0C86 l015F_0C9A
l015F_0C86:
	al = Mem0[ss:bp - 0x0007:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + 0x07DE
	SCZO = cond(si)
	goto l015F_0C43
	// succ:  l015F_0C43
l015F_0C9A:
	ax = 0x0146
	goto l015F_0E2F
	// succ:  l015F_0E2F
l015F_0CA0:
	si = Mem0[ss:bp + 0x0008:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l015F_0CB2
	// succ:  l015F_0CA7 l015F_0CB2
l015F_0CA7:
	bx = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - si)
	branch Test(EQ,Z) l015F_0CB2
	// succ:  l015F_0CAF l015F_0CB2
l015F_0CAF:
	goto l015F_0A94
	// succ:  l015F_0A94
l015F_0CB2:
	bx = Mem0[ss:bp - 0x0006:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l015F_0CEA
	// succ:  l015F_0CBB l015F_0CEA
l015F_0CBB:
	al = Mem0[ss:bp - 0x0007:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + 0x07BE
	SCZO = cond(si)
	di = Mem0[0x015F:si:word16]
	ax = 0x015F
	es = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l015F_0CE3
	// succ:  l015F_0CD6 l015F_0CE3
l015F_0CD6:
	bl = Mem0[ds:bx + 0x000B:byte]
	bx = bx & 0x0007
	SZO = cond(bx)
	C = false
	bx = bx << 0x0001
	SCZO = cond(bx)
	di = Mem0[0x015F:bx + 0x02AE:word16]
	// succ:  l015F_0CE3
l015F_0CE3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	goto l015F_0DD4
	// succ:  l015F_0DD4
l015F_0CEA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = 0x0033
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x01B0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0144
	goto l015F_0923
	// succ:  l015F_0923
l015F_0CFC:
	dx = Mem0[ss:bp - 0x0006:word16]
	si = Mem0[ss:bp + 0x0008:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l015F_0D10
	// succ:  l015F_0D06 l015F_0D10
l015F_0D06:
	bx = dx
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - si)
	branch Test(EQ,Z) l015F_0D10
	// succ:  l015F_0D0D l015F_0D10
l015F_0D0D:
	goto l015F_0A94
	// succ:  l015F_0A94
l015F_0D10:
	bx = dx
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l015F_0D2E
	// succ:  l015F_0D18 l015F_0D2E
l015F_0D18:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = 0x0013
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bl = Mem0[ss:bp - 0x0007:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:bx + 0x0244:word16]
	goto l015F_0DD8
	// succ:  l015F_0DD8
l015F_0D2E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = 0x0033
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x01B0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0145
	goto l015F_0923
	// succ:  l015F_0923
l015F_0D40:
	dx = Mem0[ss:bp - 0x0006:word16]
	si = Mem0[ss:bp + 0x0008:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l015F_0D54
	// succ:  l015F_0D4A l015F_0D54
l015F_0D4A:
	bx = dx
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - si)
	branch Test(EQ,Z) l015F_0D54
	// succ:  l015F_0D51 l015F_0D54
l015F_0D51:
	goto l015F_0A94
	// succ:  l015F_0A94
l015F_0D54:
	bx = dx
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l015F_0D76
	// succ:  l015F_0D5C l015F_0D76
l015F_0D5C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	bl = Mem0[ss:bp - 0x0007:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + 0x021C
	SCZO = cond(bx)
	// succ:  l015F_0D6C
l015F_0D6C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:bx + 0x0002:word16]
	goto l015F_0DD8
	// succ:  l015F_0DD8
l015F_0D76:
	ax = 0x0147
	goto l015F_0E2F
	// succ:  l015F_0E2F
l015F_0D7C:
	si = Mem0[ss:bp + 0x0008:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l015F_0D8B
	// succ:  l015F_0D83 l015F_0D8B
l015F_0D83:
	di = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(Mem0[ds:di + 0x0006:word16] - si)
	branch Test(NE,Z) l015F_0DAF
	// succ:  l015F_0D8B l015F_0DAF
l015F_0D8B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = 0x0036
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bl = Mem0[ss:bp - 0x0007:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:bx + 0x02A2:word16]
	goto l015F_0DD8
	// succ:  l015F_0DD8
l015F_0DA0:
	si = Mem0[ss:bp + 0x0008:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l015F_0DB6
	// succ:  l015F_0DA7 l015F_0DB6
l015F_0DA7:
	di = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(Mem0[ds:di + 0x0006:word16] - si)
	branch Test(EQ,Z) l015F_0DB6
	// succ:  l015F_0DAF l015F_0DB6
l015F_0DAF:
	bx = Mem0[ds:di + 0x0006:word16]
	goto l015F_0A97
	// succ:  l015F_0A97
l015F_0DB6:
	al = Mem0[ss:bp - 0x0007:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + 0x06BE
	SCZO = cond(si)
	// succ:  l015F_0DC5
l015F_0DC5:
	SCZO = cond(Mem0[0x015F:si:word16] - 0x0000)
	branch Test(NE,Z) l015F_0DCE
	// succ:  l015F_0DCB l015F_0DCE
l015F_0DCB:
	goto l015F_0C5C
	// succ:  l015F_0C5C
l015F_0DCE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:si:word16]
	// succ:  l015F_0DD4
l015F_0DD4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:si + 0x0002:word16]
	// succ:  l015F_0DD8
l015F_0DD8:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l015F_0DDB
l015F_0DDB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l015F_0DDC
l015F_0DDC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	goto l015F_0E38
	// succ:  l015F_0E38
l015F_0DE6:
	ax = 0x0151
	goto l015F_0E2F
	// succ:  l015F_0E2F
l015F_0DEC:
	di = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	bl = Mem0[ss:bp - 0x0007:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + 0x0796
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x015F:bx + 0x0002:word16]
	ax = ax - ax
	SCZO = cond(ax)
	goto l015F_0DDC
	// succ:  l015F_0DDC
l015F_0E10:
	bx = Mem0[ss:bp - 0x0006:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x01)
	C = false
	branch Test(NE,Z) l015F_0E22
	// succ:  l015F_0E19 l015F_0E22
l015F_0E19:
	si = Mem0[ss:bp + 0x000A:word16]
	ax = 0x0398
	goto l015F_0E28
	// succ:  l015F_0E28
l015F_0E22:
	si = Mem0[ss:bp + 0x000A:word16]
	ax = 0x03EB
	// succ:  l015F_0E28
l015F_0E28:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	goto l015F_0E33
	// succ:  l015F_0E33
l015F_0E2C:
	ax = 0x03E9
	// succ:  l015F_0E2F
l015F_0E2F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l015F_0E30
l015F_0E30:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	// succ:  l015F_0E33
l015F_0E33:
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l015F_0E38
l015F_0E38:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn015F_0808_exit
fn015F_0808_exit:


// fn015F_0E44
// Return size: 4
void fn015F_0E44()
fn015F_0E44_entry:
	// succ:  l015F_0E44
l015F_0E44:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0006:word16]
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[0x015F:bx + 0x0460:byte]
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn015F_0E44_exit
fn015F_0E44_exit:


// fn0167_0000
// Return size: 4
void fn0167_0000()
fn0167_0000_entry:
	// succ:  l0167_0000
l0167_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0012:word16]
	SCZO = cond(Mem0[ds:di:word16] - 0x0000)
	branch Test(NE,Z) l0167_0038
	// succ:  l0167_0017 l0167_0038
l0167_0017:
	ax = Mem0[ss:bp + 0x000E:word16]
	Mem0[ds:di:word16] = ax
	ax = Mem0[ss:bp + 0x000C:word16]
	Mem0[ds:di + 0x0002:word16] = ax
	ax = Mem0[ss:bp + 0x000A:word16]
	Mem0[ds:di + 0x0004:word16] = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:di + 0x0006:word16] = ax
	Mem0[ds:di + 0x0008:word16] = dx
	goto l0167_0194
	// succ:  l0167_0194
l0167_0038:
	ax = Mem0[ds:di:word16]
	SCZO = cond(Mem0[ss:bp + 0x000E:word16] - ax)
	branch Test(UGE,C) l0167_0085
	// succ:  l0167_003F l0167_0085
l0167_003F:
	bx = Mem0[ds:di + 0x0002:word16]
	ax = Mem0[ss:bp + 0x000C:word16]
	Mem0[ds:di + 0x0002:word16] = ax
	Mem0[ss:bp + 0x000C:word16] = bx
	bx = Mem0[ds:di:word16]
	ax = Mem0[ss:bp + 0x000E:word16]
	Mem0[ds:di:word16] = ax
	Mem0[ss:bp + 0x000E:word16] = bx
	bx = Mem0[ds:di + 0x0004:word16]
	ax = Mem0[ss:bp + 0x000A:word16]
	Mem0[ds:di + 0x0004:word16] = ax
	Mem0[ss:bp + 0x000A:word16] = bx
	ax = Mem0[ds:di + 0x0006:word16]
	dx = Mem0[ds:di + 0x0008:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:di + 0x0006:word16] = ax
	Mem0[ds:di + 0x0008:word16] = dx
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ss:bp + 0x0006:word16] = ax
	Mem0[ss:bp + 0x0008:word16] = dx
	// succ:  l0167_0085
l0167_0085:
	bx = Mem0[ss:bp + 0x0010:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l0167_00BC
	// succ:  l0167_008D l0167_00BC
l0167_008D:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	bx = Mem0[ss:bp + 0x0010:word16]
	Mem0[ds:bx:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0167_00A8
	// succ:  l0167_00A3 l0167_00A8
l0167_00A3:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0167_0197
	// succ:  l0167_0197
l0167_00A8:
	di = Mem0[ss:bp + 0x0010:word16]
	bx = Mem0[ds:di:word16]
	si = Mem0[ds:bx:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx:word16] = 0x0000
	Mem0[ds:si + 0x0002:word16] = 0x0001
	goto l0167_00C2
	// succ:  l0167_00C2
l0167_00BC:
	di = bx
	bx = Mem0[ds:di:word16]
	si = Mem0[ds:bx:word16]
	// succ:  l0167_00C2
l0167_00C2:
	ax = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:si + 0x0002:word16] - ax)
	branch Test(NE,Z) l0167_0102
	// succ:  l0167_00C9 l0167_0102
l0167_00C9:
	ax = Mem0[ds:si + 0x0002:word16]
	ax = ax + 0x0004
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + 0x0004
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalReAlloc(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0167_00A3
	// succ:  l0167_00F2 l0167_00A3
l0167_00F2:
	dx = ax
	Mem0[ds:di:word16] = dx
	bx = ax
	si = Mem0[ds:bx:word16]
	ax = Mem0[ss:bp - 0x0006:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x0002:word16] = ax
	// succ:  l0167_0102
l0167_0102:
	ax = Mem0[ds:si:word16]
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + si
	SCZO = cond(ax)
	ax = ax + 0x0004
	SCZO = cond(ax)
	cx = ax
	bx = Mem0[ss:bp + 0x0012:word16]
	di = Mem0[ss:bp + 0x000E:word16]
	di = di - Mem0[ds:bx:word16]
	SCZO = cond(di)
	Mem0[ss:bp - 0x0008:word16] = si
	dx = si + 0x0004
	Mem0[ss:bp - 0x0004:word16] = dx
	SCZO = cond(ax - dx)
	branch Test(ULE,CZ) l0167_0130
	// succ:  l0167_012A l0167_0130
l0167_012A:
	Mem0[ss:bp - 0x0008:word16] = si
	goto l0167_0138
	// succ:  l0167_0138
l0167_0130:
	Mem0[ss:bp - 0x0006:word16] = cx
	si = Mem0[ss:bp - 0x0004:word16]
	goto l0167_014B
	// succ:  l0167_014B
l0167_0138:
	si = Mem0[ss:bp - 0x0004:word16]
	Mem0[ss:bp - 0x0006:word16] = cx
	// succ:  l0167_013E
l0167_013E:
	SCZO = cond(Mem0[ds:si:word16] - di)
	branch Test(UGE,C) l0167_014B
	// succ:  l0167_0142 l0167_014B
l0167_0142:
	di = di - Mem0[ds:si:word16]
	SCZO = cond(di)
	si = si + 0x000A
	SCZO = cond(si)
	SCZO = cond(si - cx)
	branch Test(ULT,C) l0167_013E
	// succ:  l0167_014B l0167_013E
l0167_014B:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - si)
	branch Test(EQ,Z) l0167_0175
	// succ:  l0167_0150 l0167_0175
l0167_0150:
	v17 = Mem0[ds:si:word16] - di
	Mem0[ds:si:word16] = v17
	SCZO = cond(v17)
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - si
	SCZO = cond(ax)
	cx = 0x000A
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = si + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0932 (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0167_0175
l0167_0175:
	Mem0[ds:si:word16] = di
	ax = Mem0[ss:bp + 0x000C:word16]
	Mem0[ds:si + 0x0002:word16] = ax
	ax = Mem0[ss:bp + 0x000A:word16]
	Mem0[ds:si + 0x0004:word16] = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:si + 0x0006:word16] = ax
	Mem0[ds:si + 0x0008:word16] = dx
	bx = Mem0[ss:bp - 0x0008:word16]
	v19 = Mem0[ds:bx:word16] + 0x0001
	Mem0[ds:bx:word16] = v19
	SZO = cond(v19)
	// succ:  l0167_0194
l0167_0194:
	ax = 0x0001
	// succ:  l0167_0197
l0167_0197:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0167_0000_exit
fn0167_0000_exit:


// fn0167_01A4
// Return size: 4
void fn0167_01A4()
fn0167_01A4_entry:
	// succ:  l0167_01A4
l0167_01A4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l0167_01C0
	// succ:  l0167_01BB l0167_01C0
l0167_01BB:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0167_02D8
	// succ:  l0167_02D8
l0167_01C0:
	ax = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - ax)
	branch Test(NE,Z) l0167_0236
	// succ:  l0167_01C8 l0167_0236
l0167_01C8:
	ax = Mem0[ds:bx:word16]
	si = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:si:word16] = ax
	si = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(EQ,Z) l0167_022E
	// succ:  l0167_01D7 l0167_022E
l0167_01D7:
	si = Mem0[ds:si:word16]
	cx = Mem0[ds:si:word16]
	ax = cx
	ax = ax + 0x0004
	SCZO = cond(ax)
	di = ax
	si = di
	ax = Mem0[ds:si:word16]
	v14 = Mem0[ds:bx:word16] + ax
	Mem0[ds:bx:word16] = v14
	SCZO = cond(v14)
	ax = Mem0[ds:di + 0x0002:word16]
	Mem0[ds:bx + 0x0002:word16] = ax
	ax = Mem0[ds:di + 0x0004:word16]
	Mem0[ds:bx + 0x0004:word16] = ax
	ax = Mem0[ds:di + 0x0006:word16]
	dx = Mem0[ds:di + 0x0008:word16]
	Mem0[ds:bx + 0x0006:word16] = ax
	Mem0[ds:bx + 0x0008:word16] = dx
	bx = cx
	v16 = Mem0[ds:bx:word16] - 0x0001
	Mem0[ds:bx:word16] = v16
	SZO = cond(v16)
	branch Test(EQ,Z) l0167_021C
	// succ:  l0167_0206 l0167_021C
l0167_0206:
	ax = Mem0[ds:bx:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = di + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	goto l0167_02CD
	// succ:  l0167_02CD
l0167_021C:
	si = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:si:word16] = 0x0000
	goto l0167_02D5
	// succ:  l0167_02D5
l0167_022E:
	Mem0[ds:bx:word16] = 0x0000
	goto l0167_02D5
	// succ:  l0167_02D5
l0167_0236:
	cx = Mem0[ds:bx:word16]
	di = Mem0[ss:bp + 0x000A:word16]
	bx = Mem0[ds:di:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	dx = ax
	ax = ax + 0x0004
	SCZO = cond(ax)
	bx = dx
	si = Mem0[ds:bx:word16]
	bx = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + bx
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	dx = dx + si
	SCZO = cond(dx)
	dx = dx + 0x0004
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = dx
	SCZO = cond(dx - ax)
	branch Test(EQ,Z) l0167_027E
	// succ:  l0167_0261 l0167_027E
l0167_0261:
	si = ax
	di = dx
	dx = Mem0[ss:bp + 0x0008:word16]
	// succ:  l0167_0268
l0167_0268:
	SCZO = cond(Mem0[ds:si + 0x0002:word16] - dx)
	branch Test(EQ,Z) l0167_0276
	// succ:  l0167_026D l0167_0276
l0167_026D:
	cx = cx + Mem0[ds:si:word16]
	SCZO = cond(cx)
	si = si + 0x000A
	SCZO = cond(si)
	SCZO = cond(si - di)
	branch Test(NE,Z) l0167_0268
	// succ:  l0167_0276 l0167_0268
l0167_0276:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - si)
	branch Test(NE,Z) l0167_0282
	// succ:  l0167_027B l0167_0282
l0167_027B:
	goto l0167_01BB
	// succ:  l0167_01BB
l0167_027E:
	si = ax
	goto l0167_0276
	// succ:  l0167_0276
l0167_0282:
	cx = cx + Mem0[ds:si:word16]
	SCZO = cond(cx)
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = cx
	bx = Mem0[ss:bp - 0x0008:word16]
	v17 = Mem0[ds:bx:word16] - 0x0001
	Mem0[ds:bx:word16] = v17
	SZO = cond(v17)
	branch Test(NE,Z) l0167_02A0
	// succ:  l0167_0290 l0167_02A0
l0167_0290:
	di = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:di:word16] = 0x0000
	goto l0167_02D5
	// succ:  l0167_02D5
l0167_02A0:
	di = Mem0[ss:bp - 0x0006:word16]
	ax = si
	ax = ax - di
	SCZO = cond(ax)
	SCZO = cond(ax - 0xFFF6)
	branch Test(EQ,Z) l0167_02D5
	// succ:  l0167_02AC l0167_02D5
l0167_02AC:
	ax = Mem0[ds:si:word16]
	v18 = Mem0[ds:si + 0x000A:word16] + ax
	Mem0[ds:si + 0x000A:word16] = v18
	SCZO = cond(v18)
	ax = di
	ax = ax - si
	SCZO = cond(ax)
	cx = 0x000A
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax - cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	// succ:  l0167_02CD
l0167_02CD:
	call fn004F_0932 (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0167_02D5
l0167_02D5:
	ax = 0x0001
	// succ:  l0167_02D8
l0167_02D8:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0167_01A4_exit
fn0167_01A4_exit:


// fn0167_02E4
// Return size: 4
void fn0167_02E4()
fn0167_02E4_entry:
	// succ:  l0167_02E4
l0167_02E4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000A:word16]
	di = di - di
	SCZO = cond(di)
	SCZO = cond(Mem0[ds:si:word16] - di)
	branch Test(EQ,Z) l0167_0326
	// succ:  l0167_02FC l0167_0326
l0167_02FC:
	dx = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0167_02FF
l0167_02FF:
	SCZO = cond(Mem0[ds:si:word16] - dx)
	branch Test(UGT,CZ) l0167_0324
	// succ:  l0167_0303 l0167_0324
l0167_0303:
	branch Test(UGE,C) l0167_0309
	// succ:  l0167_0305 l0167_0309
l0167_0305:
	di = dx
	di = di - Mem0[ds:si:word16]
	SCZO = cond(di)
	// succ:  l0167_0309
l0167_0309:
	Mem0[ds:si:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	call fn0167_0332 (retsize: 2;)
	sp = sp + 0x0004
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0167_0326
	// succ:  l0167_0319 l0167_0326
l0167_0319:
	dx = di
	di = di - di
	SCZO = cond(di)
	SCZO = cond(Mem0[ds:si:word16] - di)
	branch Test(NE,Z) l0167_02FF
	// succ:  l0167_0321 l0167_02FF
l0167_0321:
	goto l0167_0326
	// succ:  l0167_0326
l0167_0324:
	v15 = Mem0[ds:si:word16] - dx
	Mem0[ds:si:word16] = v15
	SCZO = cond(v15)
	// succ:  l0167_0326
l0167_0326:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0167_02E4_exit
fn0167_02E4_exit:


// fn0167_0332
// Return size: 4
void fn0167_0332()
fn0167_0332_entry:
	// succ:  l0167_0332
l0167_0332:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(EQ,Z) l0167_034C
	// succ:  l0167_0349 l0167_034C
l0167_0349:
	goto l0167_03D3
	// succ:  l0167_03D3
l0167_034C:
	di = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0167_034F
l0167_034F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0167_070A (retsize: 2;)
	sp = sp + 0x000C
	SCZO = cond(Mem0[ds:di:word16] - 0x0000)
	branch Test(EQ,Z) l0167_03D3
	// succ:  l0167_036B l0167_03D3
l0167_036B:
	bx = Mem0[ds:di:word16]
	cx = Mem0[ds:bx:word16]
	ax = cx
	ax = ax + 0x0004
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = ax
	ax = Mem0[ds:bx:word16]
	Mem0[ds:si:word16] = ax
	bx = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[ds:bx + 0x0002:word16]
	Mem0[ds:si + 0x0002:word16] = ax
	ax = Mem0[ds:bx + 0x0004:word16]
	Mem0[ds:si + 0x0004:word16] = ax
	ax = Mem0[ds:bx + 0x0006:word16]
	dx = Mem0[ds:bx + 0x0008:word16]
	Mem0[ds:si + 0x0006:word16] = ax
	Mem0[ds:si + 0x0008:word16] = dx
	bx = cx
	v15 = Mem0[ds:bx:word16] - 0x0001
	Mem0[ds:bx:word16] = v15
	SZO = cond(v15)
	branch Test(EQ,Z) l0167_03C0
	// succ:  l0167_039E l0167_03C0
l0167_039E:
	ax = Mem0[ds:bx:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x000A
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn004F_0932 (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	goto l0167_03CB
	// succ:  l0167_03CB
l0167_03C0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:di:word16] = 0x0000
	// succ:  l0167_03CB
l0167_03CB:
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(NE,Z) l0167_03D3
	// succ:  l0167_03D0 l0167_03D3
l0167_03D0:
	goto l0167_034F
	// succ:  l0167_034F
l0167_03D3:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0167_0332_exit
fn0167_0332_exit:


// fn0167_03E0
// Return size: 4
void fn0167_03E0()
fn0167_03E0_entry:
	// succ:  l0167_03E0
l0167_03E0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0010:word16]
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(NE,Z) l0167_0424
	// succ:  l0167_03F7 l0167_0424
l0167_03F7:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:si:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0167_0410
	// succ:  l0167_040A l0167_0410
l0167_040A:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0167_04E0
	// succ:  l0167_04E0
l0167_0410:
	bx = ax
	cx = Mem0[ds:bx:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx:word16] = 0x0000
	bx = cx
	Mem0[ds:bx + 0x0002:word16] = 0x0001
	goto l0167_0428
	// succ:  l0167_0428
l0167_0424:
	bx = Mem0[ds:si:word16]
	cx = Mem0[ds:bx:word16]
	// succ:  l0167_0428
l0167_0428:
	bx = cx
	ax = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - ax)
	branch Test(NE,Z) l0167_0467
	// succ:  l0167_0431 l0167_0467
l0167_0431:
	ax = Mem0[ds:bx + 0x0002:word16]
	ax = ax + 0x0004
	SCZO = cond(ax)
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	cx = di
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + 0x0004
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalReAlloc(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0167_040A
	// succ:  l0167_0456 l0167_040A
l0167_0456:
	Mem0[ss:bp - 0x0006:word16] = di
	bx = ax
	Mem0[ds:si:word16] = bx
	cx = Mem0[ds:bx:word16]
	dx = Mem0[ss:bp - 0x0006:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x0002:word16] = dx
	// succ:  l0167_0467
l0167_0467:
	bx = cx
	di = Mem0[ds:bx:word16]
	ax = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + bx
	SCZO = cond(di)
	di = di + 0x0004
	SCZO = cond(di)
	Mem0[ss:bp - 0x0008:word16] = cx
	si = bx + 0x0004
	SCZO = cond(di - si)
	branch Test(ULE,CZ) l0167_0495
	// succ:  l0167_0484 l0167_0495
l0167_0484:
	Mem0[ss:bp - 0x0008:word16] = cx
	dx = Mem0[ss:bp + 0x000E:word16]
	// succ:  l0167_048A
l0167_048A:
	SCZO = cond(Mem0[ds:si:word16] - dx)
	branch Test(UGE,C) l0167_0495
	// succ:  l0167_048E l0167_0495
l0167_048E:
	si = si + 0x000A
	SCZO = cond(si)
	SCZO = cond(si - di)
	branch Test(ULT,C) l0167_048A
	// succ:  l0167_0495 l0167_048A
l0167_0495:
	SCZO = cond(si - di)
	branch Test(EQ,Z) l0167_04BB
	// succ:  l0167_0499 l0167_04BB
l0167_0499:
	ax = di
	ax = ax - si
	SCZO = cond(ax)
	cx = 0x000A
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = si + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0932 (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0167_04BB
l0167_04BB:
	ax = Mem0[ss:bp + 0x000E:word16]
	Mem0[ds:si:word16] = ax
	ax = Mem0[ss:bp + 0x000C:word16]
	Mem0[ds:si + 0x0002:word16] = ax
	ax = Mem0[ss:bp + 0x000A:word16]
	Mem0[ds:si + 0x0004:word16] = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:si + 0x0006:word16] = ax
	Mem0[ds:si + 0x0008:word16] = dx
	bx = Mem0[ss:bp - 0x0008:word16]
	v18 = Mem0[ds:bx:word16] + 0x0001
	Mem0[ds:bx:word16] = v18
	SZO = cond(v18)
	ax = 0x0001
	// succ:  l0167_04E0
l0167_04E0:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0167_03E0_exit
fn0167_03E0_exit:


// fn0167_04EC
// Return size: 4
void fn0167_04EC()
fn0167_04EC_entry:
	// succ:  l0167_04EC
l0167_04EC:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(NE,Z) l0167_0508
	// succ:  l0167_0503 l0167_0508
l0167_0503:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0167_05AC
	// succ:  l0167_05AC
l0167_0508:
	bx = Mem0[ds:si:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	dx = ax
	ax = ax + 0x0004
	SCZO = cond(ax)
	cx = ax
	bx = dx
	di = Mem0[ds:bx:word16]
	bx = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + bx
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	dx = dx + di
	SCZO = cond(dx)
	dx = dx + 0x0004
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = cx
	SCZO = cond(dx - ax)
	branch Test(NE,Z) l0167_0538
	// succ:  l0167_0533 l0167_0538
l0167_0533:
	si = ax
	goto l0167_054C
	// succ:  l0167_054C
l0167_0538:
	si = cx
	dx = Mem0[ss:bp + 0x0008:word16]
	di = Mem0[ss:bp - 0x0006:word16]
	// succ:  l0167_0540
l0167_0540:
	SCZO = cond(Mem0[ds:si + 0x0002:word16] - dx)
	branch Test(EQ,Z) l0167_054C
	// succ:  l0167_0545 l0167_054C
l0167_0545:
	si = si + 0x000A
	SCZO = cond(si)
	SCZO = cond(si - di)
	branch Test(NE,Z) l0167_0540
	// succ:  l0167_054C l0167_0540
l0167_054C:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - si)
	branch Test(EQ,Z) l0167_0503
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - si)
	branch Test(EQ,Z) l0167_0503
	// succ:  l0167_0551 l0167_0503
l0167_0551:
	Mem0[ss:bp - 0x0004:word16] = si
	cx = si
	bx = si
	ax = Mem0[ds:bx:word16]
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = ax
	bx = Mem0[ss:bp - 0x0008:word16]
	v15 = Mem0[ds:bx:word16] - 0x0001
	Mem0[ds:bx:word16] = v15
	SZO = cond(v15)
	branch Test(NE,Z) l0167_0576
	Mem0[ss:bp - 0x0004:word16] = si
	cx = si
	bx = si
	ax = Mem0[ds:bx:word16]
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = ax
	bx = Mem0[ss:bp - 0x0008:word16]
	v16 = Mem0[ds:bx:word16] - 0x0001
	Mem0[ds:bx:word16] = v16
	SZO = cond(v16)
	branch Test(NE,Z) l0167_0576
	// succ:  l0167_0566 l0167_0576
l0167_0566:
	si = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:si:word16] = 0x0000
	si = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:si:word16] = 0x0000
	goto l0167_05A9
	// succ:  l0167_05A9
l0167_0576:
	si = Mem0[ss:bp - 0x0004:word16]
	di = Mem0[ss:bp - 0x0006:word16]
	ax = si
	ax = ax - di
	SCZO = cond(ax)
	SCZO = cond(ax - 0xFFF6)
	branch Test(EQ,Z) l0167_05A9
	// succ:  l0167_0585 l0167_05A9
l0167_0585:
	ax = di
	ax = ax - si
	SCZO = cond(ax)
	cx = 0x000A
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax - cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_0932 (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0167_05A9
l0167_05A9:
	ax = 0x0001
	// succ:  l0167_05AC
l0167_05AC:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0167_04EC_exit
fn0167_04EC_exit:


// fn0167_05B8
// Return size: 4
void fn0167_05B8()
fn0167_05B8_entry:
	// succ:  l0167_05B8
l0167_05B8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0167_060A
	// succ:  l0167_05CE l0167_060A
l0167_05CE:
	ax = Mem0[ds:di:word16]
	cx = ax
	ax = ax + 0x0004
	SCZO = cond(ax)
	bx = ax
	dx = cx
	si = cx
	di = Mem0[ds:si:word16]
	si = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + si
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	dx = dx + di
	SCZO = cond(dx)
	dx = dx + 0x0004
	SCZO = cond(dx)
	cx = dx
	SCZO = cond(dx - ax)
	branch Test(EQ,Z) l0167_060A
	// succ:  l0167_05F2 l0167_060A
l0167_05F2:
	dx = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0167_05F5
l0167_05F5:
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - dx)
	branch Test(EQ,Z) l0167_0604
	// succ:  l0167_05FA l0167_0604
l0167_05FA:
	bx = bx + 0x000A
	SCZO = cond(bx)
	SCZO = cond(bx - cx)
	branch Test(NE,Z) l0167_05F5
	// succ:  l0167_0601 l0167_05F5
l0167_0601:
	goto l0167_060A
	// succ:  l0167_060A
l0167_0604:
	ax = 0x0001
	goto l0167_060C
	// succ:  l0167_060C
l0167_060A:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0167_060C
l0167_060C:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0167_05B8_exit
fn0167_05B8_exit:


// fn0167_0618
// Return size: 4
void fn0167_0618()
fn0167_0618_entry:
	// succ:  l0167_0618
l0167_0618:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(NE,Z) l0167_0632
	// succ:  l0167_062F l0167_0632
l0167_062F:
	goto l0167_06FE
	// succ:  l0167_06FE
l0167_0632:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0167_0642
	// succ:  l0167_063F l0167_0642
l0167_063F:
	goto l0167_06FE
	// succ:  l0167_06FE
l0167_0642:
	ax = di + 0x0004
	cx = ax
	ax = Mem0[ds:di:word16]
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + di
	SCZO = cond(ax)
	ax = ax + 0x0004
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = di
	si = cx
	// succ:  l0167_0660
l0167_0660:
	ax = Mem0[ss:bp + 0x0006:word16]
	v15 = Mem0[ss:bp + 0x0006:word16] - 0x0001
	Mem0[ss:bp + 0x0006:word16] = v15
	SZO = cond(v15)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GT,SZO) l0167_066D
	// succ:  l0167_066A l0167_066D
l0167_066A:
	goto l0167_06F4
	// succ:  l0167_06F4
l0167_066D:
	di = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(di - si)
	branch Test(ULE,CZ) l0167_06D2
	// succ:  l0167_0674 l0167_06D2
l0167_0674:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn0167_070A (retsize: 2;)
	sp = sp + 0x000C
	v17 = Mem0[ds:si:word16] - 0x0001
	Mem0[ds:si:word16] = v17
	SZO = cond(v17)
	branch Test(NE,Z) l0167_06C8
	// succ:  l0167_068E l0167_06C8
l0167_068E:
	bx = Mem0[ss:bp - 0x0008:word16]
	v19 = Mem0[ds:bx:word16] - 0x0001
	Mem0[ds:bx:word16] = v19
	SZO = cond(v19)
	branch Test(EQ,Z) l0167_06DC
	// succ:  l0167_0695 l0167_06DC
l0167_0695:
	ax = si
	ax = ax - di
	SCZO = cond(ax)
	SCZO = cond(ax - 0xFFF6)
	branch Test(EQ,Z) l0167_06C2
	// succ:  l0167_069E l0167_06C2
l0167_069E:
	ax = di
	ax = ax - si
	SCZO = cond(ax)
	cx = 0x000A
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax - cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_0932 (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l0167_06C2
l0167_06C2:
	di = di - 0x000A
	SCZO = cond(di)
	goto l0167_06CB
	// succ:  l0167_06CB
l0167_06C8:
	si = si + 0x000A
	SCZO = cond(si)
	// succ:  l0167_06CB
l0167_06CB:
	SCZO = cond(di - si)
	branch Test(UGT,CZ) l0167_0674
	// succ:  l0167_06CF l0167_0674
l0167_06CF:
	Mem0[ss:bp - 0x0006:word16] = di
	// succ:  l0167_06D2
l0167_06D2:
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax + 0x0004
	SCZO = cond(ax)
	si = ax
	goto l0167_0660
	// succ:  l0167_0660
l0167_06DC:
	si = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:si:word16] = 0x0000
	goto l0167_06FE
	// succ:  l0167_06FE
l0167_06F4:
	bx = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0167_06FE
l0167_06FE:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0167_0618_exit
fn0167_0618_exit:


// fn0167_070A
// Return size: 4
void fn0167_070A()
fn0167_070A_entry:
	// succ:  l0167_070A
l0167_070A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0288
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = Mem0[ss:bp + 0x0010:word16]
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	ax = cx
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x00A5)
	branch Test(ULE,CZ) l0167_072D
	// succ:  l0167_072A l0167_072D
l0167_072A:
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_072D:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v13 = ax
	ax = bx
	bx = v13
	switch (ax) { l0167_0882 l0167_0882 l0167_0882 l0167_0882 l0167_0882 l0167_0882 l0167_0882 l0167_10E0 l0167_10E0 l0167_0882 l0167_0882 l0167_0882 l0167_08A2 l0167_08D4 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_08F4 l0167_093A l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_0950 l0167_10E0 l0167_10E0 l0167_0970 l0167_0976 l0167_097C l0167_0982 l0167_0988 l0167_098E l0167_0994 l0167_099A l0167_09A0 l0167_09A6 l0167_09AC l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_0882 l0167_09B2 l0167_09F4 l0167_10E0 l0167_0A00 l0167_0A1A l0167_0A20 l0167_0A26 l0167_0A00 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_0A2C l0167_0A32 l0167_0A38 l0167_0A3E l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_0A4A l0167_0A52 l0167_10E0 l0167_0AB6 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_0ABE l0167_0B30 l0167_10E0 l0167_0B5A l0167_0B72 l0167_0B7E l0167_0B8C l0167_10E0 l0167_10E0 l0167_10E0 l0167_0BAE l0167_0BAE l0167_0BAE l0167_0BAE l0167_0BEE l0167_0C82 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_0CB2 l0167_10E0 l0167_10E0 l0167_10E0 l0167_0CFA l0167_0D08 l0167_0D12 l0167_0D62 l0167_10E0 l0167_10E0 l0167_0E72 l0167_0E84 l0167_0E96 l0167_0EA8 l0167_0EBA l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_0ECC l0167_0F36 l0167_0FA2 l0167_1010 l0167_102C l0167_103E l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10A8 }
	// succ:  l0167_0882 l0167_0882 l0167_0882 l0167_0882 l0167_0882 l0167_0882 l0167_0882 l0167_10E0 l0167_10E0 l0167_0882 l0167_0882 l0167_0882 l0167_08A2 l0167_08D4 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_08F4 l0167_093A l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_0950 l0167_10E0 l0167_10E0 l0167_0970 l0167_0976 l0167_097C l0167_0982 l0167_0988 l0167_098E l0167_0994 l0167_099A l0167_09A0 l0167_09A6 l0167_09AC l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_0882 l0167_09B2 l0167_09F4 l0167_10E0 l0167_0A00 l0167_0A1A l0167_0A20 l0167_0A26 l0167_0A00 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_0A2C l0167_0A32 l0167_0A38 l0167_0A3E l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_0A4A l0167_0A52 l0167_10E0 l0167_0AB6 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_0ABE l0167_0B30 l0167_10E0 l0167_0B5A l0167_0B72 l0167_0B7E l0167_0B8C l0167_10E0 l0167_10E0 l0167_10E0 l0167_0BAE l0167_0BAE l0167_0BAE l0167_0BAE l0167_0BEE l0167_0C82 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_0CB2 l0167_10E0 l0167_10E0 l0167_10E0 l0167_0CFA l0167_0D08 l0167_0D12 l0167_0D62 l0167_10E0 l0167_10E0 l0167_0E72 l0167_0E84 l0167_0E96 l0167_0EA8 l0167_0EBA l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_0ECC l0167_0F36 l0167_0FA2 l0167_1010 l0167_102C l0167_103E l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10E0 l0167_10A8
l0167_0882:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0167_0892
	// succ:  l0167_088C l0167_0892
l0167_088C:
	ax = si
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	goto l0167_0894
	// succ:  l0167_0894
l0167_0892:
	ax = si
	// succ:  l0167_0894
l0167_0894:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	// succ:  l0167_0898
l0167_0898:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn0167_118E (retsize: 2;)
	sp = sp + 0x0008
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_08A2:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0167_08BE
	// succ:  l0167_08A8 l0167_08BE
l0167_08A8:
	Mem0[ds:0x0090:word16] = 0x0002
	Mem0[ds:0x0092:word16] = 0x0001
	Mem0[ds:0x0094:word16] = 0x0000
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_08BE:
	ax = Mem0[ss:bp + 0x000C:word16]
	Mem0[ds:0x0090:word16] = ax
	ax = Mem0[ss:bp + 0x000A:word16]
	Mem0[ds:0x0092:word16] = ax
	ax = Mem0[ss:bp + 0x000E:word16]
	Mem0[ds:0x0094:word16] = ax
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_08D4:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0167_08E4
	// succ:  l0167_08DA l0167_08E4
l0167_08DA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	// succ:  l0167_08DD
l0167_08DD:
	sp = sp - 0x0002
	call fn0167_1100 (retsize: 2;)
	sp = sp + 0x0002
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_08E4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	// succ:  l0167_08ED
l0167_08ED:
	sp = sp - 0x0002
	call fn0167_1152 (retsize: 2;)
	sp = sp + 0x0006
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_08F4:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0167_0910
	// succ:  l0167_08FA l0167_0910
l0167_08FA:
	ax = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0167_1100 (retsize: 2;)
	sp = sp + 0x0002
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0167_1100 (retsize: 2;)
	sp = sp + 0x0002
	ax = 0x0020
	// succ:  l0167_090D
l0167_090D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0167_08DD
	// succ:  l0167_08DD
l0167_0910:
	ax = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0202
	dx_ax = (word32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0167_1152 (retsize: 2;)
	sp = sp + 0x0006
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0303
	dx_ax = (word32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0167_1152 (retsize: 2;)
	sp = sp + 0x0006
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0404
	// succ:  l0167_0933
l0167_0933:
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0167_08ED
	// succ:  l0167_08ED
l0167_093A:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0167_0946
	// succ:  l0167_0940 l0167_0946
l0167_0940:
	ax = 0x0004
	goto l0167_090D
	// succ:  l0167_090D
l0167_0946:
	ax = 0x0004
	// succ:  l0167_0949
l0167_0949:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0303
	goto l0167_0933
	// succ:  l0167_0933
l0167_0950:
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_2710 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0167_0960
	// succ:  l0167_095D l0167_0960
l0167_095D:
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0960:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x027D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_268A (retsize: 4;)
	sp = sp + 0x0004
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0970:
	cx = cx - cx
	SCZO = cond(cx)
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_0976:
	cx = 0x0001
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_097C:
	cx = 0x0002
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_0982:
	cx = 0x0003
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_0988:
	cx = 0x0004
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_098E:
	cx = 0x0005
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_0994:
	cx = 0x0006
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_099A:
	cx = 0x0007
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_09A0:
	cx = 0x0008
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_09A6:
	cx = 0x0009
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_09AC:
	cx = 0x000A
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_09B2:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0167_09D6
	// succ:  l0167_09B8 l0167_09D6
l0167_09B8:
	ax = 0x0318
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	v32 = Mem0[ds:bx + 0x000C:word16] - 0x4E20
	Mem0[ds:bx + 0x000C:word16] = v32
	SCZO = cond(v32)
	v33 = Mem0[ds:bx + 0x000E:word16] - 0x00 - C
	Mem0[ds:bx + 0x000E:word16] = v33
	SCZO = cond(v33)
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_09D6:
	ax = 0x0317
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	v34 = Mem0[ds:bx + 0x000C:word16] + 0x4E20
	Mem0[ds:bx + 0x000C:word16] = v34
	SCZO = cond(v34)
	v35 = Mem0[ds:bx + 0x000E:word16] + 0x00 + C
	Mem0[ds:bx + 0x000E:word16] = v35
	SCZO = cond(v35)
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_09F4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	call fn01D7_2E56 (retsize: 4;)
	sp = sp + 0x0002
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0A00:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0167_0A10
	// succ:  l0167_0A0A l0167_0A10
l0167_0A0A:
	ax = si
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	goto l0167_0A12
	// succ:  l0167_0A12
l0167_0A10:
	ax = si
	// succ:  l0167_0A12
l0167_0A12:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0167_0A15
l0167_0A15:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0167_0898
	// succ:  l0167_0898
l0167_0A1A:
	cx = 0x0010
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_0A20:
	cx = 0x000B
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_0A26:
	cx = 0x0013
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_0A2C:
	cx = 0x000F
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_0A32:
	cx = 0x0012
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_0A38:
	cx = 0x0011
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_0A3E:
	cx = 0x0014
	Mem0[ss:bp - 0x0008:word16] = 0x0001
	goto l0167_0B3E
	// succ:  l0167_0B3E
l0167_0A4A:
	call fn01D7_0F68 (retsize: 4;)
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0A52:
	di = Mem0[ss:bp + 0x000E:word16]
	SCZO = cond(di - 0x0001)
	branch Test(NE,Z) l0167_0A89
	// succ:  l0167_0A5A l0167_0A89
l0167_0A5A:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(NE,Z) l0167_0A89
	// succ:  l0167_0A60 l0167_0A89
l0167_0A60:
	cl = 0x05
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + 0x0010
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + 0x0010
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01D7_2096 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l0167_0A89
l0167_0A89:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0167_0A96
	// succ:  l0167_0A8F l0167_0A96
l0167_0A8F:
	cx = di
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	goto l0167_0A98
	// succ:  l0167_0A98
l0167_0A96:
	cx = di
	// succ:  l0167_0A98
l0167_0A98:
	ax = 0x0015
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn0167_146C (retsize: 2;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0AB6:
	call fn01D7_1036 (retsize: 4;)
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0ABE:
	ax = Mem0[ds:0x4CFE:word16]
	dx_ax = Mem0[ss:bp + 0x000E:word16] *u ax
	SCZO = cond(dx_ax)
	cx = 0x0064
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	si = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01D7_2470 (retsize: 4;)
	sp = sp + 0x0004
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - si
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	cx = ~cx
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + si
	SCZO = cond(ax)
	si = ax
	ax = ax + Mem0[ds:0x4CFC:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x4CFE:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + Mem0[ds:0x4CFE:word16]
	SCZO = cond(ax)
	Mem0[ds:0x4CFC:word16] = ax
	ax = bp - 0x0088
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0069
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0383
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x0088
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0167_0B24
l0167_0B24:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0167_0B26
l0167_0B26:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0B30:
	cx = 0x000E
	ax = Mem0[ds:0x4934:word16]
	Mem0[ss:bp + 0x000E:word16] = ax
	Mem0[ss:bp + 0x0008:word16] = 0x0001
	// succ:  l0167_0B3E
l0167_0B3E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0167_0B4C
	// succ:  l0167_0B45 l0167_0B4C
l0167_0B45:
	ax = Mem0[ss:bp + 0x000E:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	goto l0167_0B4F
	// succ:  l0167_0B4F
l0167_0B4C:
	ax = Mem0[ss:bp + 0x000E:word16]
	// succ:  l0167_0B4F
l0167_0B4F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn0167_146C (retsize: 2;)
	sp = sp + 0x0006
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0B5A:
	call fn00F7_12A4 (retsize: 4;)
	ax = ax - Mem0[ds:0x4D06:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ds:0x4D08:word16] - C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1320 (retsize: 4;)
	sp = sp + 0x0004
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0B72:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	call fn01D7_0000 (retsize: 4;)
	sp = sp + 0x0002
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0B7E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01D7_01E0 (retsize: 4;)
	sp = sp + 0x0004
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0B8C:
	call fn00F7_12E2 (retsize: 4;)
	cx = Mem0[ds:0x4D06:word16]
	bx = Mem0[ds:0x4D08:word16]
	cx = cx - ax
	SCZO = cond(cx)
	bx = bx - dx - C
	SCZO = cond(bx)
	cx = cx - 0x0001
	SCZO = cond(cx)
	bx = bx - 0x00 - C
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn00F7_14F8 (retsize: 4;)
	sp = sp + 0x0004
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0BAE:
	si = cx
	si = si - 0x006E
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:si + 0x4CF0:byte] - 0x00)
	branch Test(GE,SO) l0167_0BD1
	// succ:  l0167_0BBA l0167_0BD1
l0167_0BBA:
	ax = si + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x4CF0:byte]
	ax = (int16) al
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn0167_118E (retsize: 2;)
	sp = sp + 0x0008
l0167_0BD1:
	SCZO = cond(Mem0[ds:si + 0x4CF4:byte] - 0x00)
	branch Test(LT,SO) l0167_0BDB
	// succ:  l0167_0BD8 l0167_0BDB
l0167_0BD8:
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0BDB:
	ax = si + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x4CF4:byte]
	ax = (int16) al
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	goto l0167_0A15
	// succ:  l0167_0A15
l0167_0BEE:
	di = Mem0[ss:bp + 0x000E:word16]
	ax = Mem0[ds:0x4D02:word16]
	dx_ax = di *s ax
	SCZO = cond(dx_ax)
	cx = 0x0064
	dx_ax = (word32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	si = ax
	SCZO = cond(Mem0[ds:0x4D02:word16] - 0x0000)
	branch Test(GE,SO) l0167_0C16
	// succ:  l0167_0C05 l0167_0C16
l0167_0C05:
	ax = 0x03D4
	// succ:  l0167_0C08
l0167_0C08:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0C16:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01D7_2470 (retsize: 4;)
	sp = sp + 0x0004
	ax = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax - si)
	branch Test(GE,SO) l0167_0C2E
	// succ:  l0167_0C2C l0167_0C2E
l0167_0C2C:
	ax = si
	// succ:  l0167_0C2E
l0167_0C2E:
	si = ax
	SCZO = cond(Mem0[ds:0x4D00:word16] - 0x0000)
	branch Test(GE,SO) l0167_0C44
	// succ:  l0167_0C37 l0167_0C44
l0167_0C37:
	SCZO = cond(di - 0x0064)
	branch Test(NE,Z) l0167_0C44
	// succ:  l0167_0C3C l0167_0C44
l0167_0C3C:
	si = Mem0[ds:0x4D02:word16]
	si = si - Mem0[ds:0x4D00:word16]
	SCZO = cond(si)
	// succ:  l0167_0C44
l0167_0C44:
	si = si + Mem0[ds:0x4D00:word16]
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ds:0x4D02:word16])
	branch Test(LE,SZO) l0167_0C52
	// succ:  l0167_0C4E l0167_0C52
l0167_0C4E:
	si = Mem0[ds:0x4D02:word16]
	// succ:  l0167_0C52
l0167_0C52:
	Mem0[ds:0x4D00:word16] = si
	ax = bp - 0x0108
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0069
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x03C8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x0108
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	ax = 0x0001
	goto l0167_0B26
	// succ:  l0167_0B26
l0167_0C82:
	di = di - di
	SCZO = cond(di)
	si = 0x4CF4
	Mem0[ss:bp - 0x0004:word16] = 0x4CF8
	// succ:  l0167_0C8C
l0167_0C8C:
	SCZO = cond(Mem0[ds:si:byte] - 0x00)
	branch Test(GE,SO) l0167_0CA6
	// succ:  l0167_0C91 l0167_0CA6
l0167_0C91:
	ax = di + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si:byte]
	ax = (int16) al
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn0167_118E (retsize: 2;)
	sp = sp + 0x0008
l0167_0CA6:
	di = di + 0x0001
	SZO = cond(di)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x4CF8)
	branch Test(ULT,C) l0167_0C8C
	// succ:  l0167_0CAE l0167_0C8C
l0167_0CAE:
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0CB2:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01D7_2470 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0167_0CC1
l0167_0CC1:
	ax = 0x0504
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0167_04EC (retsize: 2;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0167_0CC1
	// succ:  l0167_0CD5 l0167_0CC1
l0167_0CD5:
	ax = 0x0506
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0167_04EC (retsize: 2;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0167_0CD5
	// succ:  l0167_0CE9 l0167_0CD5
l0167_0CE9:
	ax = 0x0384
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	goto l0167_0B24
	// succ:  l0167_0B24
l0167_0CFA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	// succ:  l0167_0D00
l0167_0D00:
	call fn01AF_1158 (retsize: 4;)
	sp = sp + 0x0004
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0D08:
	ax = 0x0009
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0167_0D00
	// succ:  l0167_0D00
l0167_0D12:
	ax = 0x0009
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1B00 (retsize: 4;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0167_0D2C
	// succ:  l0167_0D26 l0167_0D2C
l0167_0D26:
	ax = 0x0402
	goto l0167_0C08
	// succ:  l0167_0C08
l0167_0D2C:
	ax = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x007F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0167_0000 (retsize: 2;)
	sp = sp + 0x000E
	ax = 0x02B3
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x0508:word16] = 0x0001
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0D62:
	di = Mem0[ds:0x0096:word16]
	ax = 0x0009
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1B00 (retsize: 4;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0167_0D90
	// succ:  l0167_0D7A l0167_0D90
l0167_0D7A:
	ax = 0x0402
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x0508:word16] = 0x0000
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0D90:
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0003)
	branch Test(GE,SO) l0167_0DB6
	// succ:  l0167_0D97 l0167_0DB6
l0167_0D97:
	dx = 0x0003
	bx = 0x3DF8
	// succ:  l0167_0D9D
l0167_0D9D:
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l0167_0DA8
	// succ:  l0167_0DA2 l0167_0DA8
l0167_0DA2:
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l0167_0DAA
	// succ:  l0167_0DA8 l0167_0DAA
l0167_0DA8:
	di = dx
	// succ:  l0167_0DAA
l0167_0DAA:
	dx = dx + 0x0001
	SZO = cond(dx)
	bx = bx + 0x0024
	SCZO = cond(bx)
	SCZO = cond(bx - 0x3E64)
	branch Test(ULE,CZ) l0167_0D9D
	// succ:  l0167_0DB4 l0167_0D9D
l0167_0DB4:
	goto l0167_0DF2
	// succ:  l0167_0DF2
l0167_0DB6:
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0006)
	branch Test(GT,SZO) l0167_0DC2
	// succ:  l0167_0DBD l0167_0DC2
l0167_0DBD:
	di = 0x0002
	goto l0167_0DF2
	// succ:  l0167_0DF2
l0167_0DC2:
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0009)
	branch Test(GT,SZO) l0167_0DE8
	// succ:  l0167_0DC9 l0167_0DE8
l0167_0DC9:
	dx = 0x000A
	bx = 0x3EF4
	// succ:  l0167_0DCF
l0167_0DCF:
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l0167_0DDA
	// succ:  l0167_0DD4 l0167_0DDA
l0167_0DD4:
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l0167_0DDC
	// succ:  l0167_0DDA l0167_0DDC
l0167_0DDA:
	di = dx
	// succ:  l0167_0DDC
l0167_0DDC:
	dx = dx + 0x0001
	SZO = cond(dx)
	bx = bx + 0x0024
	SCZO = cond(bx)
	SCZO = cond(bx - 0x405C)
	branch Test(ULE,CZ) l0167_0DCF
	// succ:  l0167_0DE6 l0167_0DCF
l0167_0DE6:
	goto l0167_0DF2
	// succ:  l0167_0DF2
l0167_0DE8:
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0014)
	branch Test(GT,SZO) l0167_0DF2
	// succ:  l0167_0DEF l0167_0DF2
l0167_0DEF:
	di = 0x0009
	// succ:  l0167_0DF2
l0167_0DF2:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01D7_3854 (retsize: 4;)
	sp = sp + 0x0002
	ax = 0x02B4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x02)
	branch Test(NE,Z) l0167_0E17
	// succ:  l0167_0E0E l0167_0E17
l0167_0E0E:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1E96 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0167_0E17
l0167_0E17:
	SCZO = cond(Mem0[ds:0x0096:word16] - di)
	branch Test(EQ,Z) l0167_0E27
	// succ:  l0167_0E1D l0167_0E27
l0167_0E1D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00DF_0494 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l0167_0E27
l0167_0E27:
	Mem0[ds:0x0508:word16] = 0x0000
	call fn0017_1E46 (retsize: 4;)
	Mem0[ds:0x0330:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0001)
	branch Test(NE,Z) l0167_0E44
	// succ:  l0167_0E3F l0167_0E44
l0167_0E3F:
	call fn00AF_0AD6 (retsize: 4;)
	// succ:  l0167_0E44
l0167_0E44:
	SCZO = cond(Mem0[ds:0x00B6:word16] - 0x0000)
	branch Test(EQ,Z) l0167_0E50
	// succ:  l0167_0E4B l0167_0E50
l0167_0E4B:
	v30 = Mem0[ds:0x4D1A:byte] | 0x01
	Mem0[ds:0x4D1A:byte] = v30
	SZO = cond(Mem0[ds:0x4D1A:byte])
	C = false
	// succ:  l0167_0E50
l0167_0E50:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(Mem0[ds:0x00B6:word16] - 0x0000)
	branch Test(EQ,Z) l0167_0E65
	// succ:  l0167_0E60 l0167_0E65
l0167_0E60:
	v31 = Mem0[ds:0x4D1A:byte] & 0xFE
	Mem0[ds:0x4D1A:byte] = v31
	SZO = cond(Mem0[ds:0x4D1A:byte])
	C = false
	// succ:  l0167_0E65
l0167_0E65:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01D7_3854 (retsize: 4;)
	sp = sp + 0x0002
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0E72:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0167_0E7E
	// succ:  l0167_0E78 l0167_0E7E
l0167_0E78:
	ax = 0x1000
	goto l0167_090D
	// succ:  l0167_090D
l0167_0E7E:
	ax = 0x1000
	goto l0167_0949
	// succ:  l0167_0949
l0167_0E84:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0167_0E90
	// succ:  l0167_0E8A l0167_0E90
l0167_0E8A:
	ax = 0x0800
	goto l0167_090D
	// succ:  l0167_090D
l0167_0E90:
	ax = 0x0800
	goto l0167_0949
	// succ:  l0167_0949
l0167_0E96:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0167_0EA2
	// succ:  l0167_0E9C l0167_0EA2
l0167_0E9C:
	ax = 0x0200
	goto l0167_090D
	// succ:  l0167_090D
l0167_0EA2:
	ax = 0x0200
	goto l0167_0949
	// succ:  l0167_0949
l0167_0EA8:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0167_0EB4
	// succ:  l0167_0EAE l0167_0EB4
l0167_0EAE:
	ax = 0x0001
	goto l0167_090D
	// succ:  l0167_090D
l0167_0EB4:
	ax = 0x0001
	goto l0167_0949
	// succ:  l0167_0949
l0167_0EBA:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0167_0EC6
	// succ:  l0167_0EC0 l0167_0EC6
l0167_0EC0:
	ax = 0x0010
	goto l0167_090D
	// succ:  l0167_090D
l0167_0EC6:
	ax = 0x0010
	goto l0167_0949
	// succ:  l0167_0949
l0167_0ECC:
	di = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn0167_17DA (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0167_0EDB
	// succ:  l0167_0ED8 l0167_0EDB
l0167_0ED8:
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0EDB:
	si = Mem0[ds:di:word16]
	v19 = Mem0[ds:si + 0x000B:byte] & 0xFD
	Mem0[ds:si + 0x000B:byte] = v19
	SZO = cond(Mem0[ds:si + 0x000B:byte])
	C = false
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0167_0EFF
	// succ:  l0167_0EFC l0167_0EFF
l0167_0EFC:
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0EFF:
	ax = bp - 0x0188
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0071
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cl = Mem0[ds:si + 0x0001:byte]
	ch = ch - ch
	SCZO = cond(ch)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0387
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x0188
	// succ:  l0167_0F29
l0167_0F29:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0F36:
	di = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn0167_17DA (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0167_0F45
	// succ:  l0167_0F42 l0167_0F45
l0167_0F42:
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0F45:
	al = Mem0[ss:bp + 0x000A:byte]
	si = Mem0[ds:di:word16]
	v22 = Mem0[ds:si + 0x0007:byte] + al
	Mem0[ds:si + 0x0007:byte] = v22
	SCZO = cond(v22)
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0167_0F6B
	// succ:  l0167_0F68 l0167_0F6B
l0167_0F68:
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0F6B:
	ax = bp - 0x0208
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0071
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cl = Mem0[ds:si + 0x0001:byte]
	ch = ch - ch
	SCZO = cond(ch)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x0000)
	branch Test(LE,SZO) l0167_0F8E
	// succ:  l0167_0F89 l0167_0F8E
l0167_0F89:
	ax = 0x0388
	goto l0167_0F91
	// succ:  l0167_0F91
l0167_0F8E:
	ax = 0x0389
	// succ:  l0167_0F91
l0167_0F91:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x0208
	goto l0167_0F29
	// succ:  l0167_0F29
l0167_0FA2:
	di = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn0167_17DA (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0167_0FB1
	// succ:  l0167_0FAE l0167_0FB1
l0167_0FAE:
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0FB1:
	al = Mem0[ss:bp + 0x000A:byte]
	si = Mem0[ds:di:word16]
	v23 = Mem0[ds:si + 0x0006:byte] + al
	Mem0[ds:si + 0x0006:byte] = v23
	SCZO = cond(v23)
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0167_0FD7
	// succ:  l0167_0FD4 l0167_0FD7
l0167_0FD4:
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_0FD7:
	ax = bp - 0x0288
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0071
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cl = Mem0[ds:si + 0x0001:byte]
	ch = ch - ch
	SCZO = cond(ch)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x0000)
	branch Test(LT,SO) l0167_0FFA
	// succ:  l0167_0FF5 l0167_0FFA
l0167_0FF5:
	ax = 0x0389
	goto l0167_0FFD
	// succ:  l0167_0FFD
l0167_0FFA:
	ax = 0x0388
	// succ:  l0167_0FFD
l0167_0FFD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x0288
	goto l0167_0F29
	// succ:  l0167_0F29
l0167_1010:
	ax = 0x033C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x032C:word16] = 0x0039
	ax = Mem0[ss:bp + 0x000E:word16]
	Mem0[ds:0x032E:word16] = ax
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_102C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	call fn0177_24F8 (retsize: 4;)
	sp = sp + 0x0006
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_103E:
	si = Mem0[ss:bp + 0x000E:word16]
	SCZO = cond(si - 0x000A)
	branch Test(NE,Z) l0167_1049
	// succ:  l0167_1046 l0167_1049
l0167_1046:
	si = 0x000F
	// succ:  l0167_1049
l0167_1049:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(EQ,Z) l0167_105E
	// succ:  l0167_1050 l0167_105E
l0167_1050:
	SCZO = cond(si - 0x000F)
	branch Test(NE,Z) l0167_105E
	// succ:  l0167_1055 l0167_105E
l0167_1055:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1E96 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0167_105E
l0167_105E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	call fn0177_1AEE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(si - 0x0002)
	branch Test(NE,Z) l0167_1078
	// succ:  l0167_1070 l0167_1078
l0167_1070:
	v18 = Mem0[ds:0x4EB7:byte] | 0x08
	Mem0[ds:0x4EB7:byte] = v18
	SZO = cond(Mem0[ds:0x4EB7:byte])
	C = false
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_1078:
	SCZO = cond(si - 0x000F)
	branch Test(NE,Z) l0167_10E0
	// succ:  l0167_107D l0167_10E0
l0167_107D:
	bx = Mem0[ds:0x4C28:word16]
	bx = Mem0[ds:bx:word16]
	v24 = Mem0[ds:bx + 0x0008:byte] & 0xFB
	Mem0[ds:bx + 0x0008:byte] = v24
	SZO = cond(Mem0[ds:bx + 0x0008:byte])
	C = false
	si = Mem0[ds:0x4C28:word16]
	ax = Mem0[ds:si:word16]
	ax = ax + 0x000C
	SCZO = cond(ax)
	bx = ax
	si = ax
	v25 = Mem0[ds:si:word16] & 0xFC00
	Mem0[ds:si:word16] = v25
	SZO = cond(Mem0[ds:si:word16])
	C = false
	Mem0[ds:bx + 0x0004:word16] = 0x0000
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:bx + 0x0008:word16] = ax
	Mem0[ds:bx + 0x0006:word16] = ax
	goto l0167_10E0
	// succ:  l0167_10E0
l0167_10A8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_1AEE (retsize: 4;)
	sp = sp + 0x0006
	bx = Mem0[ds:0x4C28:word16]
	ax = Mem0[ds:bx:word16]
	ax = ax + 0x000C
	SCZO = cond(ax)
	si = ax
	bx = ax
	cx = Mem0[ds:bx:word16]
	cx = cx & 0xFC91
	SZO = cond(cx)
	C = false
	cl = cl | 0x91
	SZO = cond(cl)
	C = false
	Mem0[ds:bx:word16] = cx
	Mem0[ds:si + 0x0004:word16] = 0x000F
	Mem0[ds:si + 0x0006:word16] = 0x0001
	Mem0[ds:si + 0x0008:word16] = 0x0000
	// succ:  l0167_10E0
l0167_10E0:
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0167_10F4
	// succ:  l0167_10E6 l0167_10F4
l0167_10E6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l0167_10F4
l0167_10F4:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0167_070A_exit
fn0167_070A_exit:


// fn0167_1100
// Return size: 4
void fn0167_1100()
fn0167_1100_entry:
	// succ:  l0167_1100
l0167_1100:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	dx = Mem0[ss:bp + 0x0006:word16]
	si = 0x4D70
	SCZO = cond(Mem0[ds:si:word16] - dx)
	branch Test(EQ,Z) l0167_111F
	// succ:  l0167_1118 l0167_111F
l0167_1118:
	si = si + 0x0006
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:si:word16] - dx)
	branch Test(NE,Z) l0167_1118
	// succ:  l0167_111F l0167_1118
l0167_111F:
	ax = 0x4D70
	ax = ax - si
	SCZO = cond(ax)
	cx = 0x0006
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	ax = ax + 0x0003
	SCZO = cond(ax)
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_0932 (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	v14 = Mem0[ds:0x4D26:word16] - 0x0001
	Mem0[ds:0x4D26:word16] = v14
	SZO = cond(v14)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0167_1100_exit
fn0167_1100_exit:


// fn0167_1152
// Return size: 4
void fn0167_1152()
fn0167_1152_entry:
	// succ:  l0167_1152
l0167_1152:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bx = Mem0[ds:0x4D26:word16]
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + 0x4D70
	SCZO = cond(bx)
	v10 = Mem0[ds:0x4D26:word16] + 0x0001
	Mem0[ds:0x4D26:word16] = v10
	SZO = cond(v10)
	ax = Mem0[ss:bp + 0x000A:word16]
	Mem0[ds:bx:word16] = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx + 0x0002:word16] = ax
	Mem0[ds:bx + 0x0004:word16] = dx
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0167_1152_exit
fn0167_1152_exit:


// fn0167_118E
// Return size: 4
void fn0167_118E()
fn0167_118E_entry:
	// succ:  l0167_118E
l0167_118E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0056
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(ax - 0x0040)
	branch Test(NE,Z) l0167_11A8
	// succ:  l0167_11A5 l0167_11A8
l0167_11A5:
	goto l0167_142C
	// succ:  l0167_142C
l0167_11A8:
	branch Test(ULE,CZ) l0167_11AD
	// succ:  l0167_11AA l0167_11AD
l0167_11AA:
	goto l0167_144F
	// succ:  l0167_144F
l0167_11AD:
	SCZO = cond(al - 0x38)
	branch Test(NE,Z) l0167_11B4
	// succ:  l0167_11B1 l0167_11B4
l0167_11B1:
	goto l0167_1448
	// succ:  l0167_1448
l0167_11B4:
	branch Test(GT,SZO) l0167_11E0
	// succ:  l0167_11B6 l0167_11E0
l0167_11B6:
	al = al - 0x01
	SZO = cond(al)
	SCZO = cond(ax - 0x000B)
	branch Test(ULE,CZ) l0167_11C0
	// succ:  l0167_11BD l0167_11C0
l0167_11BD:
	goto l0167_144F
	// succ:  l0167_144F
l0167_11C0:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v19 = ax
	ax = bx
	bx = v19
	switch (ax) { l0167_11EA l0167_11F4 l0167_11FE l0167_1230 l0167_1230 l0167_1230 l0167_1230 l0167_144F l0167_144F l0167_13AE l0167_13D6 l0167_13E0 }
	// succ:  l0167_11EA l0167_11F4 l0167_11FE l0167_1230 l0167_1230 l0167_1230 l0167_1230 l0167_144F l0167_144F l0167_13AE l0167_13D6 l0167_13E0
l0167_11E0:
	al = al - 0x3C
	SCZO = cond(al)
	branch Test(NE,Z) l0167_11E7
	// succ:  l0167_11E4 l0167_11E7
l0167_11E4:
	goto l0167_141C
	// succ:  l0167_141C
l0167_11E7:
	goto l0167_144F
	// succ:  l0167_144F
l0167_11EA:
	ax = Mem0[ss:bp + 0x000A:word16]
	v21 = Mem0[ds:0x4D10:word16] + ax
	Mem0[ds:0x4D10:word16] = v21
	SCZO = cond(v21)
	goto l0167_144F
	// succ:  l0167_144F
l0167_11F4:
	ax = Mem0[ss:bp + 0x000A:word16]
	v38 = Mem0[ds:0x4D12:word16] + ax
	Mem0[ds:0x4D12:word16] = v38
	SCZO = cond(v38)
	goto l0167_144F
	// succ:  l0167_144F
l0167_11FE:
	ax = bp - 0x0056
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0069
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x0000)
	branch Test(LE,SZO) l0167_1212
	// succ:  l0167_120C l0167_1212
l0167_120C:
	ax = 0x036F
	goto l0167_1215
	// succ:  l0167_1215
l0167_1212:
	ax = 0x0370
	// succ:  l0167_1215
l0167_1215:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x0056
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	goto l0167_1448
	// succ:  l0167_1448
l0167_1230:
	si = Mem0[ss:bp + 0x0008:word16]
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax - 0x0004
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0167_15A0 (retsize: 2;)
	sp = sp + 0x0004
	SZO = cond(si & 0x0001)
	C = false
	branch Test(EQ,Z) l0167_1262
	// succ:  l0167_124B l0167_1262
l0167_124B:
	al = Mem0[ss:bp + 0x000A:byte]
	bx = Mem0[ss:bp - 0x0004:word16]
	v30 = Mem0[ds:bx + 0x4CE8:byte] + al
	Mem0[ds:bx + 0x4CE8:byte] = v30
	SCZO = cond(v30)
	branch Test(NS,S) l0167_1296
	// succ:  l0167_1257 l0167_1296
l0167_1257:
	bx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:bx + 0x4CE8:byte] = 0x00
	goto l0167_1296
	// succ:  l0167_1296
l0167_1262:
	SZO = cond(si & 0x0002)
	C = false
	branch Test(EQ,Z) l0167_1274
	// succ:  l0167_1268 l0167_1274
l0167_1268:
	al = Mem0[ss:bp + 0x000A:byte]
	bx = Mem0[ss:bp - 0x0004:word16]
	v37 = Mem0[ds:bx + 0x4CF4:byte] + al
	Mem0[ds:bx + 0x4CF4:byte] = v37
	SCZO = cond(v37)
	goto l0167_1296
	// succ:  l0167_1296
l0167_1274:
	SZO = cond(si & 0x0004)
	C = false
	branch Test(EQ,Z) l0167_1286
	// succ:  l0167_127A l0167_1286
l0167_127A:
	al = Mem0[ss:bp + 0x000A:byte]
	bx = Mem0[ss:bp - 0x0004:word16]
	v39 = Mem0[ds:bx + 0x4CF0:byte] + al
	Mem0[ds:bx + 0x4CF0:byte] = v39
	SCZO = cond(v39)
	goto l0167_1296
	// succ:  l0167_1296
l0167_1286:
	ax = si
	SZO = cond(al & 0x08)
	C = false
	branch Test(EQ,Z) l0167_1296
	// succ:  l0167_128C l0167_1296
l0167_128C:
	al = Mem0[ss:bp + 0x000A:byte]
	bx = Mem0[ss:bp - 0x0004:word16]
	v40 = Mem0[ds:bx + 0x4CF8:byte] + al
	Mem0[ds:bx + 0x4CF8:byte] = v40
	SCZO = cond(v40)
	// succ:  l0167_1296
l0167_1296:
	bx = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[ds:bx + 0x4CE8:byte]
	ax = (int16) al
	cx = ax
	al = Mem0[ds:bx + 0x4CF8:byte]
	ax = (int16) al
	dx = ax
	al = Mem0[ds:bx + 0x4CF4:byte]
	ax = (int16) al
	si = ax
	al = Mem0[ds:bx + 0x4CF0:byte]
	ax = (int16) al
	si = si + ax
	SCZO = cond(si)
	dx = dx + si
	SCZO = cond(dx)
	cx = cx + dx
	SCZO = cond(cx)
	Mem0[ss:bp - 0x0006:word16] = cx
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(GE,SO) l0167_1317
	// succ:  l0167_12C0 l0167_1317
l0167_12C0:
	ax = 0x4D8E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x003A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0393
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x0191
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0056
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	di = bp - 0x0056
	si = 0x4D8E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0167_12F4
l0167_12F4:
	branch cx == 0x0000 l0167_12F6
	// succ:  l0167_12F4_1 l0167_12F6
l0167_12F4_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0167_12F4
	// succ:  l0167_12F6 l0167_12F4
l0167_12F6:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	bx = cx
	v34 = si
	si = di
	di = v34
	cx = 0xFFFF
	// succ:  l0167_1301
l0167_1301:
	branch cx == 0x0000 l0167_1303
	// succ:  l0167_1301_2 l0167_1303
l0167_1301_2:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0167_1301
	// succ:  l0167_1303 l0167_1301
l0167_1303:
	di = di - 0x0001
	SZO = cond(di)
	cx = bx
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0167_1308
l0167_1308:
	branch cx == 0x0000 l0167_130A
	// succ:  l0167_1308_3 l0167_130A
l0167_1308_3:
	v35 = Mem0[si:word16]
	Mem0[di:word16] = v35
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0167_1308
	// succ:  l0167_1308
l0167_130A:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0167_130C
l0167_130C:
	branch cx == 0x0000 l0167_130E
	// succ:  l0167_130C_1 l0167_130E
l0167_130C_1:
	v36 = Mem0[si:byte]
	Mem0[di:byte] = v36
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0167_130C
	// succ:  l0167_130C
l0167_130E:
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1E96 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0167_1317
l0167_1317:
	ax = Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax - 0x0064)
	branch Test(LE,SZO) l0167_1322
	// succ:  l0167_131F l0167_1322
l0167_131F:
	ax = 0x0064
	// succ:  l0167_1322
l0167_1322:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l0167_1328
	// succ:  l0167_1326 l0167_1328
l0167_1326:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0167_1328
l0167_1328:
	Mem0[ss:bp - 0x0006:word16] = ax
	bx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:bx + 0x4CEC:byte] = al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0167_15A0 (retsize: 2;)
	sp = sp + 0x0004
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x0000)
	branch Test(EQ,Z) l0167_137A
	// succ:  l0167_1341 l0167_137A
l0167_1341:
	branch Test(LE,SZO) l0167_1350
	// succ:  l0167_1343 l0167_1350
l0167_1343:
	bx = Mem0[ss:bp + 0x000C:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	si = Mem0[0x0167:bx + 0x145B:word16]
	goto l0167_135A
	// succ:  l0167_135A
l0167_1350:
	bx = Mem0[ss:bp + 0x000C:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	si = Mem0[0x0167:bx + 0x1453:word16]
	// succ:  l0167_135A
l0167_135A:
	ax = bp - 0x0056
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0069
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x0056
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0167_137A
l0167_137A:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0014)
	branch Test(LT,SO) l0167_1383
	// succ:  l0167_1380 l0167_1383
l0167_1380:
	goto l0167_144F
	// succ:  l0167_144F
l0167_1383:
	ax = bp - 0x0056
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x00DC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = Mem0[ss:bp + 0x000C:word16]
	cx = cx + 0x018D
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	// succ:  l0167_1399
l0167_1399:
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x0056
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	goto l0167_144F
	// succ:  l0167_144F
l0167_13AE:
	dx = Mem0[ss:bp + 0x000A:word16]
	v27 = Mem0[ds:0x4CFC:word16] + dx
	Mem0[ds:0x4CFC:word16] = v27
	SCZO = cond(v27)
	bx = Mem0[ss:bp + 0x0008:word16]
	SZO = cond(bl & 0x01)
	C = false
	branch Test(EQ,Z) l0167_13C1
	// succ:  l0167_13BD l0167_13C1
l0167_13BD:
	v29 = Mem0[ds:0x4CFE:word16] + dx
	Mem0[ds:0x4CFE:word16] = v29
	SCZO = cond(v29)
	// succ:  l0167_13C1
l0167_13C1:
	SZO = cond(bl & 0x04)
	C = false
	branch Test(EQ,Z) l0167_13CA
	// succ:  l0167_13C6 l0167_13CA
l0167_13C6:
	v32 = Mem0[ds:0x4D2A:word16] + dx
	Mem0[ds:0x4D2A:word16] = v32
	SCZO = cond(v32)
	// succ:  l0167_13CA
l0167_13CA:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0167_13CC
l0167_13CC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	goto l0167_144F
	// succ:  l0167_144F
l0167_13D6:
	ax = Mem0[ss:bp + 0x000A:word16]
	v25 = Mem0[ds:0x4D04:word16] + ax
	Mem0[ds:0x4D04:word16] = v25
	SCZO = cond(v25)
	goto l0167_144F
	// succ:  l0167_144F
l0167_13E0:
	si = Mem0[ss:bp + 0x000A:word16]
	v22 = Mem0[ds:0x4D00:word16] + si
	Mem0[ds:0x4D00:word16] = v22
	SCZO = cond(v22)
	SZO = cond(Mem0[ss:bp + 0x0008:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0167_13F1
	// succ:  l0167_13ED l0167_13F1
l0167_13ED:
	v23 = Mem0[ds:0x4D02:word16] + si
	Mem0[ds:0x4D02:word16] = v23
	SCZO = cond(v23)
	// succ:  l0167_13F1
l0167_13F1:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	ax = bp - 0x0056
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0033
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(LE,SZO) l0167_140C
	// succ:  l0167_1406 l0167_140C
l0167_1406:
	ax = 0x03C7
	goto l0167_140F
	// succ:  l0167_140F
l0167_140C:
	ax = 0x028F
	// succ:  l0167_140F
l0167_140F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x01AD
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0167_1399
	// succ:  l0167_1399
l0167_141C:
	cx = Mem0[ss:bp + 0x000A:word16]
	v24 = Mem0[ds:0x4D14:word16] + cx
	Mem0[ds:0x4D14:word16] = v24
	SCZO = cond(v24)
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(LE,SZO) l0167_1437
	// succ:  l0167_1427 l0167_1437
l0167_1427:
	ax = 0x02BA
	ax = 0x02BA
	goto l0167_143A
	// succ:  l0167_143A
l0167_142C:
	cx = Mem0[ss:bp + 0x000A:word16]
	v14 = Mem0[ds:0x4D16:word16] + cx
	Mem0[ds:0x4D16:word16] = v14
	SCZO = cond(v14)
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(LT,SO) l0167_1427
	// succ:  l0167_1437 l0167_1427
l0167_1437:
	ax = 0x02B9
	// succ:  l0167_143A
l0167_143A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	ax = 0x0002
l0167_1448:
	ax = Mem0[ss:bp + 0x000A:word16]
	v18 = Mem0[ds:0x4D0E:word16] + ax
	Mem0[ds:0x4D0E:word16] = v18
	SCZO = cond(v18)
	// succ:  l0167_13CC l0167_144F
l0167_144F:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0167_118E_exit
fn0167_118E_exit:


// fn0167_146C
// Return size: 4
void fn0167_146C()
fn0167_146C_entry:
	// succ:  l0167_146C
l0167_146C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0056
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax - 0x0015)
	branch Test(ULE,CZ) l0167_1485
	// succ:  l0167_1482 l0167_1485
l0167_1482:
	goto l0167_156A
	// succ:  l0167_156A
l0167_1485:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v11 = ax
	ax = bx
	bx = v11
	switch (v11) { l0167_14BA l0167_14BA l0167_14BA l0167_14BA l0167_14BA l0167_14BA }
	// succ:  l0167_14BA l0167_14BA l0167_14BA l0167_14BA l0167_14BA l0167_14BA
l0167_14BA:
	bx = Mem0[ss:bp + 0x000A:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0054:word16] = bx
	SCZO = cond(Mem0[ds:bx + 0x4918:word16] - 0x0000)
	branch Test(NE,Z) l0167_14D4
	// succ:  l0167_14C9 l0167_14D4
l0167_14C9:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(LE,SZO) l0167_14DB
	// succ:  l0167_14CF l0167_14DB
l0167_14CF:
	si = 0x0354
	goto l0167_14DE
	// succ:  l0167_14DE
l0167_14D4:
	SCZO = cond(Mem0[ds:bx + 0x4918:word16] - 0x0000)
	branch Test(GT,SZO) l0167_14CF
	// succ:  l0167_14DB l0167_14CF
l0167_14DB:
	si = 0x0353
	// succ:  l0167_14DE
l0167_14DE:
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x006A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	bx = Mem0[ss:bp - 0x0054:word16]
	ax = Mem0[ds:bx + 0x4918:word16]
	dx_ax = Mem0[ss:bp + 0x0008:word16] *s ax
	SCZO = cond(dx_ax)
	Mem0[ss:bp - 0x0056:word16] = si
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l0167_14FC
	// succ:  l0167_14F7 l0167_14FC
l0167_14F7:
	ax = 0x035F
	goto l0167_14FF
	// succ:  l0167_14FF
l0167_14FC:
	ax = 0x035E
	// succ:  l0167_14FF
l0167_14FF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0167:bx + 0x1589:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0167_156A
l0167_156A:
	ax = Mem0[ss:bp + 0x0008:word16]
	bx = Mem0[ss:bp + 0x000A:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	v13 = Mem0[ds:bx + 0x4918:word16] + ax
	Mem0[ds:bx + 0x4918:word16] = v13
	SCZO = cond(v13)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0167_146C_exit
fn0167_146C_exit:


// fn0167_15A0
// Return size: 4
void fn0167_15A0()
fn0167_15A0_entry:
	// succ:  l0167_15A0
l0167_15A0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0022
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[ds:di + 0x4CEC:byte]
	ax = (int16) al
	si = ax
	ax = di
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0167_15D2
	// succ:  l0167_15BF l0167_15D2
l0167_15BF:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0167_1600
	// succ:  l0167_15C2 l0167_1600
l0167_15C2:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0167_15C8
	// succ:  l0167_15C5 l0167_15C8
l0167_15C5:
	goto l0167_1658
	// succ:  l0167_1658
l0167_15C8:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0167_15CE
	// succ:  l0167_15CB l0167_15CE
l0167_15CB:
	goto l0167_171E
	// succ:  l0167_171E
l0167_15CE:
	goto l0167_1752
	// succ:  l0167_1752
l0167_15D2:
	SCZO = cond(si - 0x003C)
	branch Test(LE,SZO) l0167_15DC
	// succ:  l0167_15D7 l0167_15DC
l0167_15D7:
	ax = si - 0x003C
	goto l0167_15E4
	// succ:  l0167_15E4
l0167_15DC:
	SCZO = cond(si - 0x0020)
	branch Test(GE,SO) l0167_15F9
	// succ:  l0167_15E1 l0167_15F9
l0167_15E1:
	ax = si - 0x0020
	// succ:  l0167_15E4
l0167_15E4:
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0002
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	dx_ax = Mem0[ss:bp + 0x0006:word16] *s ax
	SCZO = cond(dx_ax)
	v21 = Mem0[ds:0x4D12:word16] + ax
	Mem0[ds:0x4D12:word16] = v21
	SCZO = cond(v21)
	// succ:  l0167_15F9
l0167_15F9:
	sp = sp - 0x0002
	call fn0167_175E (retsize: 2;)
	goto l0167_1752
	// succ:  l0167_1752
l0167_1600:
	SCZO = cond(si - 0x0040)
	branch Test(LE,SZO) l0167_1622
	// succ:  l0167_1605 l0167_1622
l0167_1605:
	bx = Mem0[ss:bp + 0x0006:word16]
	ax = si - 0x0040
	cx = 0x0003
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	dx_ax = bx *s ax
	SCZO = cond(dx_ax)
	dx_ax = Mem0[ds:0x4D04:word16] *s ax
	SCZO = cond(dx_ax)
	v33 = Mem0[ds:0x4D00:word16] + ax
	Mem0[ds:0x4D00:word16] = v33
	SCZO = cond(v33)
	v34 = Mem0[ds:0x4D02:word16] + ax
	Mem0[ds:0x4D02:word16] = v34
	SCZO = cond(v34)
	goto l0167_164B
	// succ:  l0167_164B
l0167_1622:
	SCZO = cond(si - 0x0020)
	branch Test(GE,SO) l0167_164B
	// succ:  l0167_1627 l0167_164B
l0167_1627:
	bx = Mem0[ss:bp + 0x0006:word16]
	ax = 0x0020
	ax = ax - si
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0002
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	dx_ax = bx *s ax
	SCZO = cond(dx_ax)
	dx_ax = Mem0[ds:0x4D04:word16] *s ax
	SCZO = cond(dx_ax)
	v35 = Mem0[ds:0x4D00:word16] - ax
	Mem0[ds:0x4D00:word16] = v35
	SCZO = cond(v35)
	v36 = Mem0[ds:0x4D02:word16] - ax
	Mem0[ds:0x4D02:word16] = v36
	SCZO = cond(v36)
	// succ:  l0167_164B
l0167_164B:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	goto l0167_1752
	// succ:  l0167_1752
l0167_1658:
	SCZO = cond(si - 0x0038)
	branch Test(LE,SZO) l0167_1682
	// succ:  l0167_165D l0167_1682
l0167_165D:
	bx = Mem0[ss:bp + 0x0006:word16]
	ax = si - 0x0038
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0002
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	dx_ax = Mem0[ds:0x4D04:word16] *s ax
	SCZO = cond(dx_ax)
	dx_ax = bx *s ax
	SCZO = cond(dx_ax)
	v19 = Mem0[ds:0x4CFE:word16] + ax
	Mem0[ds:0x4CFE:word16] = v19
	SCZO = cond(v19)
	v20 = Mem0[ds:0x4CFC:word16] + ax
	Mem0[ds:0x4CFC:word16] = v20
	SCZO = cond(v20)
	goto l0167_16A9
	// succ:  l0167_16A9
l0167_1682:
	SCZO = cond(si - 0x0020)
	branch Test(GE,SO) l0167_16A9
	// succ:  l0167_1687 l0167_16A9
l0167_1687:
	ax = 0x0020
	ax = ax - si
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0002
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	dx_ax = Mem0[ds:0x4D04:word16] *s ax
	SCZO = cond(dx_ax)
	dx_ax = Mem0[ss:bp + 0x0006:word16] *s ax
	SCZO = cond(dx_ax)
	v23 = Mem0[ds:0x4CFE:word16] - ax
	Mem0[ds:0x4CFE:word16] = v23
	SCZO = cond(v23)
	v24 = Mem0[ds:0x4CFC:word16] - ax
	Mem0[ds:0x4CFC:word16] = v24
	SCZO = cond(v24)
	// succ:  l0167_16A9
l0167_16A9:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0001)
	branch Test(EQ,Z) l0167_16BA
	// succ:  l0167_16B7 l0167_16BA
l0167_16B7:
	goto l0167_1752
	// succ:  l0167_1752
l0167_16BA:
	SCZO = cond(Mem0[ds:0x4CFC:word16] - 0x0000)
	branch Test(LE,SZO) l0167_16C4
	// succ:  l0167_16C1 l0167_16C4
l0167_16C1:
	goto l0167_1752
	// succ:  l0167_1752
l0167_16C4:
	ax = 0x4D8E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x003A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0393
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax + 0x0191
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	di = bp - 0x0022
	si = 0x4D8E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l0167_16F8
l0167_16F8:
	branch cx == 0x0000 l0167_16FA
	// succ:  l0167_16F8_1 l0167_16FA
l0167_16F8_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0167_16F8
	// succ:  l0167_16FA l0167_16F8
l0167_16FA:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	bx = cx
	v26 = si
	si = di
	di = v26
	cx = 0xFFFF
	// succ:  l0167_1705
l0167_1705:
	branch cx == 0x0000 l0167_1707
	// succ:  l0167_1705_2 l0167_1707
l0167_1705_2:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l0167_1705
	// succ:  l0167_1707 l0167_1705
l0167_1707:
	di = di - 0x0001
	SZO = cond(di)
	cx = bx
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l0167_170C
l0167_170C:
	branch cx == 0x0000 l0167_170E
	// succ:  l0167_170C_3 l0167_170E
l0167_170C_3:
	v27 = Mem0[si:word16]
	Mem0[di:word16] = v27
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l0167_170C
	// succ:  l0167_170C
l0167_170E:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l0167_1710
l0167_1710:
	branch cx == 0x0000 l0167_1712
	// succ:  l0167_1710_1 l0167_1712
l0167_1710_1:
	v28 = Mem0[si:byte]
	Mem0[di:byte] = v28
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0167_1710
	// succ:  l0167_1710
l0167_1712:
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1E96 (retsize: 4;)
	sp = sp + 0x0002
	goto l0167_1752
	// succ:  l0167_1752
l0167_171E:
	bx = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(si - 0x0038)
	branch Test(LE,SZO) l0167_172F
	// succ:  l0167_1726 l0167_172F
l0167_1726:
	ax = si - 0x0038
	dx_ax = bx *s ax
	SCZO = cond(dx_ax)
	v29 = Mem0[ds:0x4D0E:word16] + ax
	Mem0[ds:0x4D0E:word16] = v29
	SCZO = cond(v29)
	// succ:  l0167_172F
l0167_172F:
	SCZO = cond(si - 0x003C)
	branch Test(LE,SZO) l0167_1740
	// succ:  l0167_1734 l0167_1740
l0167_1734:
	ax = si - 0x003C
	dx_ax = bx *s ax
	SCZO = cond(dx_ax)
	v30 = Mem0[ds:0x4D10:word16] + ax
	Mem0[ds:0x4D10:word16] = v30
	SCZO = cond(v30)
	goto l0167_1752
	// succ:  l0167_1752
l0167_1740:
	SCZO = cond(si - 0x0020)
	branch Test(GE,SO) l0167_1752
	// succ:  l0167_1745 l0167_1752
l0167_1745:
	ax = si - 0x0020
	dx_ax = bx *s ax
	SCZO = cond(dx_ax)
	v31 = Mem0[ds:0x4D10:word16] + ax
	Mem0[ds:0x4D10:word16] = v31
	SCZO = cond(v31)
	v32 = Mem0[ds:0x4D0E:word16] + ax
	Mem0[ds:0x4D0E:word16] = v32
	SCZO = cond(v32)
	// succ:  l0167_1752
l0167_1752:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0167_15A0_exit
fn0167_15A0_exit:


// fn0167_175E
// Return size: 4
void fn0167_175E()
fn0167_175E_entry:
	// succ:  l0167_175E
l0167_175E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0006:word16] = 0x61A8
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x4DEA:word16] - 0x0000)
	branch Test(EQ,Z) l0167_17D1
	// succ:  l0167_177D l0167_17D1
l0167_177D:
	al = Mem0[ds:0x4CEC:byte]
	ax = (int16) al
	si = ax
	SCZO = cond(si - 0x0020)
	branch Test(UGE,C) l0167_17A0
	// succ:  l0167_1788 l0167_17A0
l0167_1788:
	ax = 0x0020
	ax = ax - si
	SCZO = cond(ax)
	cx = 0x01F4
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	cx = 0x61A8
	dx = dx - dx
	SCZO = cond(dx)
	cx = cx - ax
	SCZO = cond(cx)
	dx = dx - dx - C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = cx
	goto l0167_17B7
	// succ:  l0167_17B7
l0167_17A0:
	SCZO = cond(si - 0x0030)
	branch Test(ULE,CZ) l0167_17BA
	// succ:  l0167_17A5 l0167_17BA
l0167_17A5:
	cx = 0x03E8
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	ax = ax + 0x4480
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	ax = ax + 0x61A8
	SCZO = cond(ax)
	dx = dx + dx + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = ax
	// succ:  l0167_17B7
l0167_17B7:
	Mem0[ss:bp - 0x0004:word16] = dx
	// succ:  l0167_17BA
l0167_17BA:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x0014:word16] = ax
	Mem0[ds:bx + 0x0016:word16] = dx
	call fn0137_1CE4 (retsize: 4;)
	// succ:  l0167_17D1
l0167_17D1:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0167_175E_exit
fn0167_175E_exit:


// fn0167_17DA
// Return size: 4
void fn0167_17DA()
fn0167_17DA_entry:
	// succ:  l0167_17DA
l0167_17DA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4EBA:word16] - 0x0000)
	branch Test(EQ,Z) l0167_1824
	// succ:  l0167_17F0 l0167_1824
l0167_17F0:
	si = Mem0[ds:0x4EBA:word16]
	ax = Mem0[ds:si:word16]
	cx = ax
	ax = ax + 0x0004
	SCZO = cond(ax)
	bx = ax
	si = cx
	dx = Mem0[ds:si:word16]
	dx = dx << 0x0001
	SCZO = cond(dx)
	cx = cx + dx
	SCZO = cond(cx)
	cx = cx + 0x0004
	SCZO = cond(cx)
	di = cx
	SCZO = cond(cx - ax)
	branch Test(ULE,CZ) l0167_1824
	// succ:  l0167_180E l0167_1824
l0167_180E:
	dx = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0167_1811
l0167_1811:
	SCZO = cond(Mem0[ds:bx:word16] - dx)
	branch Test(EQ,Z) l0167_181E
	// succ:  l0167_1815 l0167_181E
l0167_1815:
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	SCZO = cond(bx - di)
	branch Test(ULT,C) l0167_1811
	// succ:  l0167_181B l0167_1811
l0167_181B:
	goto l0167_1824
	// succ:  l0167_1824
l0167_181E:
	ax = 0x0001
	goto l0167_1826
	// succ:  l0167_1826
l0167_1824:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0167_1826
l0167_1826:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0167_17DA_exit
fn0167_17DA_exit:


// fn0177_0000
// Return size: 4
void fn0177_0000()
fn0177_0000_entry:
	// succ:  l0177_0000
l0177_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	// succ:  l0177_0000_thunk_fn0177_0001
l0177_0000_thunk_fn0177_0001:
	call fn0177_0001 (retsize: 0;)
	return
	// succ:  fn0177_0000_exit
fn0177_0000_exit:


// fn0177_0001
// Return size: 0
void fn0177_0001()
fn0177_0001_entry:
	// succ:  l0177_0001
l0177_0001:
	sp = fp
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	goto l0177_0001_thunk_fn0177_0002
	// succ:  l0177_0001_thunk_fn0177_0002
l0177_0001:
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	goto l0177_0003_thunk_fn0177_0004
	// succ:  l0177_0003_thunk_fn0177_0004
l0177_0001_thunk_fn0177_0002:
	call fn0177_0002 (retsize: 0;)
	return
	// succ:  fn0177_0001_exit
l0177_0003_thunk_fn0177_0004:
	call fn0177_0004 (retsize: 0;)
	return
	// succ:  fn0177_0001_exit
fn0177_0001_exit:


// fn0177_0002
// Return size: 0
void fn0177_0002()
fn0177_0002_entry:
	// succ:  l0177_0002
l0177_0002:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	goto l0177_0003_thunk_fn0177_0004
	// succ:  l0177_0003_thunk_fn0177_0004
l0177_0002:
	bp = bp + 0x0001
	SZO = cond(bp)
	goto l0177_0003_thunk_fn0177_0004
	// succ:  l0177_0003_thunk_fn0177_0004
l0177_0003_thunk_fn0177_0004:
	call fn0177_0004 (retsize: 0;)
	return
	// succ:  fn0177_0002_exit
l0177_0003_thunk_fn0177_0004:
	call fn0177_0004 (retsize: 0;)
	return
	// succ:  fn0177_0002_exit
fn0177_0002_exit:


// fn0177_0004
// Return size: 0
void fn0177_0004()
fn0177_0004_entry:
	// succ:  l0177_0004
l0177_0004:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	goto l0177_0005_thunk_fn0177_0007
	// succ:  l0177_0005_thunk_fn0177_0007
l0177_0004:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	// succ:  l0177_0005_thunk_fn0177_0006
l0177_0005_thunk_fn0177_0006:
	call fn0177_0006 (retsize: 0;)
	return
	// succ:  fn0177_0004_exit
l0177_0005_thunk_fn0177_0007:
	call fn0177_0007 (retsize: 0;)
	return
	// succ:  fn0177_0004_exit
fn0177_0004_exit:


// fn0177_0006
// Return size: 0
void fn0177_0006()
fn0177_0006_entry:
	// succ:  l0177_0006
l0177_0006:
	sp = fp
	al = __inb(dx)
	goto l0177_0006_thunk_fn0177_0007
	// succ:  l0177_0006_thunk_fn0177_0007
l0177_0006:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = 0x0001
	bx = 0x4962
	goto l0177_0011_thunk_fn0177_0015
	// succ:  l0177_0011_thunk_fn0177_0015
l0177_0006_thunk_fn0177_0007:
	call fn0177_0007 (retsize: 0;)
	return
	// succ:  fn0177_0006_exit
l0177_0011_thunk_fn0177_0015:
	call fn0177_0015 (retsize: 0;)
	return
	// succ:  fn0177_0006_exit
fn0177_0006_exit:


// fn0177_0007
// Return size: 0
void fn0177_0007()
fn0177_0007_entry:
	// succ:  l0177_0007
l0177_0007:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	goto l0177_0008_thunk_fn0177_000A
	// succ:  l0177_0008_thunk_fn0177_000A
l0177_0007:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	goto l0177_0008_thunk_fn0177_000A
	// succ:  l0177_0008_thunk_fn0177_000A
l0177_0008_thunk_fn0177_000A:
	call fn0177_000A (retsize: 0;)
	return
	// succ:  fn0177_0007_exit
l0177_0008_thunk_fn0177_000A:
	call fn0177_000A (retsize: 0;)
	return
	// succ:  fn0177_0007_exit
fn0177_0007_exit:


// fn0177_000A
// Return size: 0
void fn0177_000A()
fn0177_000A_entry:
	// succ:  l0177_000A
l0177_000A:
	sp = fp
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = 0x0001
	bx = 0x4962
	goto l0177_0012_thunk_fn0177_0015
	// succ:  l0177_0012_thunk_fn0177_0015
l0177_000A:
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = 0x0001
	bx = 0x4962
	goto l0177_0012_thunk_fn0177_0015
	// succ:  l0177_0012_thunk_fn0177_0015
l0177_0012_thunk_fn0177_0015:
	call fn0177_0015 (retsize: 0;)
	return
	// succ:  fn0177_000A_exit
l0177_0012_thunk_fn0177_0015:
	call fn0177_0015 (retsize: 0;)
	return
	// succ:  fn0177_000A_exit
fn0177_000A_exit:


// fn0177_0015
// Return size: 0
void fn0177_0015()
fn0177_0015_entry:
	// succ:  l0177_0015
l0177_0015:
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(EQ,Z) l0177_0026
	// succ:  l0177_001A l0177_0026
l0177_001A:
	di = di + 0x0001
	SZO = cond(di)
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	SCZO = cond(bx - 0x4B60)
	branch Test(ULT,C) l0177_0015
	// succ:  l0177_0023 l0177_0015
l0177_0023:
l0177_0026:
	si = Mem0[ds:0x4960:word16]
	// succ:  l0177_0026_thunk_fn0177_0028
l0177_0026_thunk_fn0177_0028:
	call fn0177_0028 (retsize: 0;)
	return
	// succ:  fn0177_0015_exit
fn0177_0015_exit:


// fn0177_0024
// Return size: 0
void fn0177_0024()
fn0177_0024_entry:
	// succ:  l0177_0024
l0177_0024:
	sp = fp
	v7 = Mem0[ds:bx + 0x368B + si:word16] ^ dx
	Mem0[ds:bx + 0x368B + si:word16] = v7
	SZO = cond(Mem0[ds:bx + 0x368B + si:word16])
	C = false
	goto l0177_0024_thunk_fn0177_0028
	// succ:  l0177_0024_thunk_fn0177_0028
l0177_0024:
	goto l0177_0056
	// succ:  l0177_0056
l0177_0024_thunk_fn0177_0028:
	call fn0177_0028 (retsize: 0;)
	return
l0177_0025:
	goto fn0177_0024_exit
	// succ:  fn0177_0024_exit
l0177_0056:
	al = al - al
	SCZO = cond(al)
	// succ:  l0177_0056_thunk_fn0177_0040
l0177_0056_thunk_fn0177_0040:
	call fn0177_0040 (retsize: 0;)
	return
	// succ:  fn0177_0024_exit
fn0177_0024_exit:


// fn0177_0028
// Return size: 0
void fn0177_0028()
fn0177_0028_entry:
	// succ:  l0177_0028
l0177_0028:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cx = cx - 0x0001
	SZO = cond(cx)
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0177_002C_thunk_fn0177_0040
	goto l0177_002C_thunk_fn0177_002E
	// succ:  l0177_002C_thunk_fn0177_002E l0177_002C_thunk_fn0177_0040
l0177_0028:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0177_0040
	// succ:  l0177_002A_thunk_fn0177_002E l0177_002C_thunk_fn0177_0040
l0177_002A_thunk_fn0177_002E:
	call fn0177_002E (retsize: 0;)
	return
	// succ:  fn0177_0028_exit
l0177_002C_thunk_fn0177_002E:
	call fn0177_002E (retsize: 0;)
	return
	// succ:  fn0177_0028_exit l0177_002C_thunk_fn0177_002E
l0177_002C_thunk_fn0177_002E:
	call fn0177_002E (retsize: 0;)
	return
	// succ:  fn0177_0028_exit
l0177_002C_thunk_fn0177_0040:
	call fn0177_0040 (retsize: 0;)
	return
	// succ:  fn0177_0028_exit
l0177_002C_thunk_fn0177_0040:
	call fn0177_0040 (retsize: 0;)
	return
	// succ:  fn0177_0028_exit
fn0177_0028_exit:


// fn0177_002E
// Return size: 0
void fn0177_002E()
fn0177_002E_entry:
	// succ:  l0177_002E
l0177_002E:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	si = ax
fn0177_002E_exit:


// fn0177_003C
// Return size: 0
void fn0177_003C()
fn0177_003C_entry:
	// succ:  l0177_003C
l0177_003C:
	sp = fp
	__lock()
	goto l0177_003D_thunk_fn0177_0046
	// succ:  l0177_003D_thunk_fn0177_0046
l0177_003C:
l0177_003D_thunk_fn0177_0046:
	call fn0177_0046 (retsize: 0;)
	return
	// succ:  fn0177_003C_exit
fn0177_003C_exit:


// fn0177_003E
// Return size: 0
void fn0177_003E()
fn0177_003E_entry:
	// succ:  l0177_003E
l0177_003E:
	sp = fp
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	goto l0177_003F_thunk_fn0177_0040
	// succ:  l0177_003F_thunk_fn0177_0040
l0177_003E:
	call fn0177_0040 (retsize: 0;)
	return
	// succ:  l0177_003E_thunk_fn0177_0046 fn0177_003E_exit
l0177_003E_thunk_fn0177_0046:
	call fn0177_0046 (retsize: 0;)
	return
	// succ:  fn0177_003E_exit
l0177_003F_thunk_fn0177_0040:
	call fn0177_0040 (retsize: 0;)
	return
	// succ:  fn0177_003E_exit
fn0177_003E_exit:


// fn0177_0040
// Return size: 0
void fn0177_0040()
fn0177_0040_entry:
	// succ:  l0177_0040
l0177_0040:
	Mem0[ds:0x4960:word16] = 0x0000
	// succ:  l0177_0040_thunk_fn0177_0046
l0177_0040_thunk_fn0177_0046:
	call fn0177_0046 (retsize: 0;)
	return
	// succ:  fn0177_0040_exit
fn0177_0040_exit:


// fn0177_0046
// Return size: 0
void fn0177_0046()
fn0177_0046_entry:
	// succ:  l0177_0046
l0177_0046:
	ax = di
	di = di << 0x0001
	SCZO = cond(di)
	Mem0[ds:di + 0x4960:word16] = si
	bx = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0177_004E_thunk_fn0177_004F
l0177_004E_thunk_fn0177_004F:
	call fn0177_004F (retsize: 0;)
	return
	// succ:  fn0177_0046_exit
fn0177_0046_exit:


// fn0177_004F
// Return size: 0
void fn0177_004F()
fn0177_004F_entry:
	// succ:  l0177_004F
l0177_004F:
	sp = fp
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	Mem0[ds:bx:word16] = si
	goto l0177_0058_in_fn0177_004F
	// succ:  l0177_0058_in_fn0177_004F
l0177_004F:
	Mem0[ds:bx:word16] = si
	// succ:  l0177_0058
l0177_0058:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
l0177_0058_in_fn0177_004F:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_004F_exit
fn0177_004F_exit:


// fn0177_008C
// Return size: 0
void fn0177_008C()
fn0177_008C_entry:
	// succ:  l0177_008C
l0177_008C:
	sp = fp
	v7 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v7
	SCZO = cond(v7)
	v9 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v9
	SCZO = cond(v9)
	v10 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v10
	SCZO = cond(v10)
	v11 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v11
	SCZO = cond(v11)
	v12 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v12
	SCZO = cond(v12)
	v13 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v13
	SCZO = cond(v13)
	v16 = Mem0[ds:bx + si:word16] + ax + C
	Mem0[ds:bx + si:word16] = v16
	SCZO = cond(v16)
	v17 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v17
	SCZO = cond(v17)
	v18 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v18
	SCZO = cond(v18)
	v19 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v19
	SCZO = cond(v19)
	goto l0177_009E_thunk_fn0177_00A0
	// succ:  l0177_009E_thunk_fn0177_00A0
l0177_008C:
l0177_009E_thunk_fn0177_00A0:
	call fn0177_00A0 (retsize: 0;)
	return
	// succ:  fn0177_008C_exit
fn0177_008C_exit:


// fn0177_00A0
// Return size: 0
void fn0177_00A0()
fn0177_00A0_entry:
	// succ:  l0177_00A0
l0177_00A0:
	sp = fp
	v7 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v7
	SCZO = cond(v7)
	v9 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v9
	SCZO = cond(v9)
	v10 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v10
	SCZO = cond(v10)
	v11 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v11
	SCZO = cond(v11)
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	ax = ax + Mem0[ss:bp + di:word16]
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + si:word16]
	SCZO = cond(ax)
	al = al + Mem0[ds:bx + si:byte]
	SCZO = cond(al)
	v17 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v17
	SCZO = cond(v17)
	v18 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v18
	SCZO = cond(v18)
	v19 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v19
	SCZO = cond(v19)
	v20 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v20
	SCZO = cond(v20)
	v21 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v21
	SCZO = cond(v21)
	al = al + Mem0[ss:bp + si:byte]
	SCZO = cond(al)
	v22 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v22
	SCZO = cond(v22)
	v23 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v23
	SCZO = cond(v23)
	v24 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v24
	SCZO = cond(v24)
	v25 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v25
	SCZO = cond(v25)
	v26 = Mem0[ss:bp + di:byte] + al
	Mem0[ss:bp + di:byte] = v26
	SCZO = cond(v26)
	v27 = Mem0[ss:bp + si:byte] + al
	Mem0[ss:bp + si:byte] = v27
	SCZO = cond(v27)
	ax = ax + Mem0[ss:bp + di:word16]
	SCZO = cond(ax)
	v28 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v28
	SCZO = cond(v28)
	v29 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v29
	SCZO = cond(v29)
	v30 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v30
	SCZO = cond(v30)
	goto l0177_00CD_thunk_fn0177_00CF
	// succ:  l0177_00CD_thunk_fn0177_00CF
l0177_00A0:
l0177_00CD_thunk_fn0177_00CF:
	call fn0177_00CF (retsize: 0;)
	return
	// succ:  fn0177_00A0_exit
fn0177_00A0_exit:


// fn0177_00CF
// Return size: 0
void fn0177_00CF()
fn0177_00CF_entry:
	// succ:  l0177_00CF
l0177_00CF:
	sp = fp
	v7 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v7
	SCZO = cond(v7)
	v9 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v9
	SCZO = cond(v9)
	v10 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v10
	SCZO = cond(v10)
	v11 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v11
	SCZO = cond(v11)
	v12 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v12
	SCZO = cond(v12)
	v13 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v13
	SCZO = cond(v13)
	v14 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v14
	SCZO = cond(v14)
	v15 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v15
	SCZO = cond(v15)
	v16 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v16
	SCZO = cond(v16)
	v17 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v17
	SCZO = cond(v17)
	v18 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v18
	SCZO = cond(v18)
	v19 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v19
	SCZO = cond(v19)
	v20 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v20
	SCZO = cond(v20)
	v21 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v21
	SCZO = cond(v21)
	v22 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v22
	SCZO = cond(v22)
	v23 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v23
	SCZO = cond(v23)
	v24 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v24
	SCZO = cond(v24)
	v25 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v25
	SCZO = cond(v25)
	v26 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v26
	SCZO = cond(v26)
	v27 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v27
	SCZO = cond(v27)
	goto l0177_00F5_thunk_fn0177_00F7
	// succ:  l0177_00F5_thunk_fn0177_00F7
l0177_00CF:
	v28 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v28
	SCZO = cond(v28)
	v29 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v29
	SCZO = cond(v29)
	v30 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v30
	SCZO = cond(v30)
	v31 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v31
	SCZO = cond(v31)
	v32 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v32
	SCZO = cond(v32)
	v33 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v33
	SCZO = cond(v33)
	v34 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v34
	SCZO = cond(v34)
	v35 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v35
	SCZO = cond(v35)
	v36 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v36
	SCZO = cond(v36)
	v37 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v37
	SCZO = cond(v37)
	v38 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v38
	SCZO = cond(v38)
	v39 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v39
	SCZO = cond(v39)
	v40 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v40
	SCZO = cond(v40)
	v41 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v41
	SCZO = cond(v41)
	v42 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v42
	SCZO = cond(v42)
	v43 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v43
	SCZO = cond(v43)
	v44 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v44
	SCZO = cond(v44)
	v45 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v45
	SCZO = cond(v45)
	v46 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v46
	SCZO = cond(v46)
	v47 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v47
	SCZO = cond(v47)
	goto l0177_00F5_thunk_fn0177_00F7
	// succ:  l0177_00F5_thunk_fn0177_00F7
l0177_00F5_thunk_fn0177_00F7:
	call fn0177_00F7 (retsize: 0;)
	return
	// succ:  fn0177_00CF_exit
l0177_00F5_thunk_fn0177_00F7:
	call fn0177_00F7 (retsize: 0;)
	return
	// succ:  fn0177_00CF_exit
fn0177_00CF_exit:


// fn0177_00F7
// Return size: 0
void fn0177_00F7()
fn0177_00F7_entry:
	// succ:  l0177_00F7
l0177_00F7:
	sp = fp
	v7 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v7
	SCZO = cond(v7)
	v9 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v9
	SCZO = cond(v9)
	v10 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v10
	SCZO = cond(v10)
	v11 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v11
	SCZO = cond(v11)
	v12 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v12
	SCZO = cond(v12)
	ax = ax + Mem0[ds:si:word16]
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + si:word16]
	SCZO = cond(ax)
	al = al + Mem0[ds:bx + si:byte]
	SCZO = cond(al)
	v16 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v16
	SCZO = cond(v16)
	v17 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v17
	SCZO = cond(v17)
	v18 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v18
	SCZO = cond(v18)
	v19 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v19
	SCZO = cond(v19)
	v20 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v20
	SCZO = cond(v20)
	v21 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v21
	SCZO = cond(v21)
	v22 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v22
	SCZO = cond(v22)
	v24 = Mem0[ds:si:byte] + cl
	Mem0[ds:si:byte] = v24
	SCZO = cond(v24)
	v25 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v25
	SCZO = cond(v25)
	v26 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v26
	SCZO = cond(v26)
	v27 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v27
	SCZO = cond(v27)
	v28 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v28
	SCZO = cond(v28)
	v29 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v29
	SCZO = cond(v29)
	v30 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v30
	SCZO = cond(v30)
	v31 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v31
	SCZO = cond(v31)
	v32 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v32
	SCZO = cond(v32)
	al = al + 0x04
	SCZO = cond(al)
	ax = ax + Mem0[ss:bp + si:word16]
	SCZO = cond(ax)
	al = al + Mem0[ds:bx + si:byte]
	SCZO = cond(al)
	v33 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v33
	SCZO = cond(v33)
	v34 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v34
	SCZO = cond(v34)
	v35 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v35
	SCZO = cond(v35)
	ax = ax + Mem0[ds:bx + si:word16]
	SCZO = cond(ax)
	v36 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v36
	SCZO = cond(v36)
	v37 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v37
	SCZO = cond(v37)
	v38 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v38
	SCZO = cond(v38)
	v39 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v39
	SCZO = cond(v39)
	ax = ax + Mem0[ss:bp + si:word16]
	SCZO = cond(ax)
	v40 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v40
	SCZO = cond(v40)
	v41 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v41
	SCZO = cond(v41)
	v42 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v42
	SCZO = cond(v42)
	v43 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v43
	SCZO = cond(v43)
	v44 = Mem0[ss:bp + si:byte] + al
	Mem0[ss:bp + si:byte] = v44
	SCZO = cond(v44)
	v46 = Mem0[ss:bp + di:byte] + al
	Mem0[ss:bp + di:byte] = v46
	SCZO = cond(v46)
	al = al + Mem0[ss:bp + di:byte]
	SCZO = cond(al)
	v47 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v47
	SCZO = cond(v47)
	v48 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v48
	SCZO = cond(v48)
	v49 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v49
	SCZO = cond(v49)
	v50 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v50
	SCZO = cond(v50)
	v51 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v51
	SCZO = cond(v51)
	v52 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v52
	SCZO = cond(v52)
	goto l0177_0157_thunk_fn0177_0159
	// succ:  l0177_0157_thunk_fn0177_0159
l0177_00F7:
	goto fn0177_00F7_exit
	// succ:  fn0177_00F7_exit
l0177_0157_thunk_fn0177_0159:
	call fn0177_0159 (retsize: 0;)
	return
	// succ:  fn0177_00F7_exit
fn0177_00F7_exit:


// fn0177_0159
// Return size: 0
void fn0177_0159()
fn0177_0159_entry:
	// succ:  l0177_0159
l0177_0159:
	sp = fp
	v7 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v7
	SCZO = cond(v7)
	v9 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v9
	SCZO = cond(v9)
	v10 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v10
	SCZO = cond(v10)
	v11 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v11
	SCZO = cond(v11)
	v12 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v12
	SCZO = cond(v12)
	v13 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v13
	SCZO = cond(v13)
	v14 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v14
	SCZO = cond(v14)
	goto l0177_0165_thunk_fn0177_0167
	// succ:  l0177_0165_thunk_fn0177_0167
l0177_0159:
	v42 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v42
	SCZO = cond(v42)
	v43 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v43
	SCZO = cond(v43)
	v44 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v44
	SCZO = cond(v44)
	v45 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v45
	SCZO = cond(v45)
	v46 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v46
	SCZO = cond(v46)
	v47 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v47
	SCZO = cond(v47)
	v48 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v48
	SCZO = cond(v48)
	v49 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v49
	SCZO = cond(v49)
	v50 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v50
	SCZO = cond(v50)
	v51 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v51
	SCZO = cond(v51)
	v52 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v52
	SCZO = cond(v52)
	v53 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v53
	SCZO = cond(v53)
	v54 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v54
	SCZO = cond(v54)
	v55 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v55
	SCZO = cond(v55)
	v56 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v56
	SCZO = cond(v56)
	v57 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v57
	SCZO = cond(v57)
	v58 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v58
	SCZO = cond(v58)
	v59 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v59
	SCZO = cond(v59)
	v60 = Mem0[ds:bx:byte] + al
	Mem0[ds:bx:byte] = v60
	SCZO = cond(v60)
	v61 = Mem0[ds:bx + di:word16] + ax
	Mem0[ds:bx + di:word16] = v61
	SCZO = cond(v61)
	v62 = Mem0[ss:bp + di:byte] + cl
	Mem0[ss:bp + di:byte] = v62
	SCZO = cond(v62)
	v63 = Mem0[ds:bx + di:word16] + ax
	Mem0[ds:bx + di:word16] = v63
	SCZO = cond(v63)
	v64 = Mem0[ss:bp + si:byte] + cl
	Mem0[ss:bp + si:byte] = v64
	SCZO = cond(v64)
	v65 = Mem0[ds:bx + di:word16] + ax
	Mem0[ds:bx + di:word16] = v65
	SCZO = cond(v65)
	v66 = Mem0[ds:0x0103:byte] + al
	Mem0[ds:0x0103:byte] = v66
	SCZO = cond(v66)
	v67 = Mem0[ds:0x0107:byte] + al
	Mem0[ds:0x0107:byte] = v67
	SCZO = cond(v67)
	v68 = Mem0[ds:0x0106:byte] + al
	Mem0[ds:0x0106:byte] = v68
	SCZO = cond(v68)
	v69 = Mem0[ds:0x9058:byte] + bl
	Mem0[ds:0x9058:byte] = v69
	SCZO = cond(v69)
	goto l0177_0195_thunk_fn0177_0199
	// succ:  l0177_0195_thunk_fn0177_0199
l0177_0165_thunk_fn0177_0167:
	call fn0177_0167 (retsize: 0;)
	return
	// succ:  fn0177_0159_exit
l0177_0195_thunk_fn0177_0199:
	call fn0177_0199 (retsize: 0;)
	return
	// succ:  fn0177_0159_exit
fn0177_0159_exit:


// fn0177_0167
// Return size: 0
void fn0177_0167()
fn0177_0167_entry:
	// succ:  l0177_0167
l0177_0167:
	sp = fp
	v7 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v7
	SCZO = cond(v7)
	v9 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v9
	SCZO = cond(v9)
	v10 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v10
	SCZO = cond(v10)
	v11 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v11
	SCZO = cond(v11)
	v12 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v12
	SCZO = cond(v12)
	v13 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v13
	SCZO = cond(v13)
	v14 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v14
	SCZO = cond(v14)
	v15 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v15
	SCZO = cond(v15)
	v16 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v16
	SCZO = cond(v16)
	v17 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v17
	SCZO = cond(v17)
	v18 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v18
	SCZO = cond(v18)
	v19 = Mem0[ds:bx:byte] + al
	Mem0[ds:bx:byte] = v19
	SCZO = cond(v19)
	v22 = Mem0[ds:bx + di:word16] + ax
	Mem0[ds:bx + di:word16] = v22
	SCZO = cond(v22)
	v26 = Mem0[ss:bp + di:byte] + cl
	Mem0[ss:bp + di:byte] = v26
	SCZO = cond(v26)
	v27 = Mem0[ds:bx + di:word16] + ax
	Mem0[ds:bx + di:word16] = v27
	SCZO = cond(v27)
	v28 = Mem0[ss:bp + si:byte] + cl
	Mem0[ss:bp + si:byte] = v28
	SCZO = cond(v28)
	v29 = Mem0[ds:bx + di:word16] + ax
	Mem0[ds:bx + di:word16] = v29
	SCZO = cond(v29)
	v30 = Mem0[ds:0x0103:byte] + al
	Mem0[ds:0x0103:byte] = v30
	SCZO = cond(v30)
	v31 = Mem0[ds:0x0107:byte] + al
	Mem0[ds:0x0107:byte] = v31
	SCZO = cond(v31)
	v32 = Mem0[ds:0x0106:byte] + al
	Mem0[ds:0x0106:byte] = v32
	SCZO = cond(v32)
	v34 = Mem0[ds:0x9058:byte] + bl
	Mem0[ds:0x9058:byte] = v34
	SCZO = cond(v34)
	goto l0177_0195_thunk_fn0177_0199
	// succ:  l0177_0195_thunk_fn0177_0199
l0177_0167:
	v35 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v35
	SCZO = cond(v35)
	v36 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v36
	SCZO = cond(v36)
	v37 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v37
	SCZO = cond(v37)
	v38 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v38
	SCZO = cond(v38)
	v39 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v39
	SCZO = cond(v39)
	v40 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v40
	SCZO = cond(v40)
	v41 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v41
	SCZO = cond(v41)
	v42 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v42
	SCZO = cond(v42)
	v43 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v43
	SCZO = cond(v43)
	v44 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v44
	SCZO = cond(v44)
	v45 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v45
	SCZO = cond(v45)
	v46 = Mem0[ds:bx:byte] + al
	Mem0[ds:bx:byte] = v46
	SCZO = cond(v46)
	v47 = Mem0[ds:bx + di:word16] + ax
	Mem0[ds:bx + di:word16] = v47
	SCZO = cond(v47)
	v48 = Mem0[ss:bp + di:byte] + cl
	Mem0[ss:bp + di:byte] = v48
	SCZO = cond(v48)
	v49 = Mem0[ds:bx + di:word16] + ax
	Mem0[ds:bx + di:word16] = v49
	SCZO = cond(v49)
	v50 = Mem0[ss:bp + si:byte] + cl
	Mem0[ss:bp + si:byte] = v50
	SCZO = cond(v50)
	v51 = Mem0[ds:bx + di:word16] + ax
	Mem0[ds:bx + di:word16] = v51
	SCZO = cond(v51)
	v52 = Mem0[ds:0x0103:byte] + al
	Mem0[ds:0x0103:byte] = v52
	SCZO = cond(v52)
	v53 = Mem0[ds:0x0107:byte] + al
	Mem0[ds:0x0107:byte] = v53
	SCZO = cond(v53)
	v54 = Mem0[ds:0x0106:byte] + al
	Mem0[ds:0x0106:byte] = v54
	SCZO = cond(v54)
	v55 = Mem0[ds:0x9058:byte] + bl
	Mem0[ds:0x9058:byte] = v55
	SCZO = cond(v55)
	goto l0177_0195_thunk_fn0177_0199
	// succ:  l0177_0195_thunk_fn0177_0199
l0177_0195_thunk_fn0177_0199:
	call fn0177_0199 (retsize: 0;)
	return
	// succ:  fn0177_0167_exit
l0177_0195_thunk_fn0177_0199:
	call fn0177_0199 (retsize: 0;)
	return
	// succ:  fn0177_0167_exit
fn0177_0167_exit:


// fn0177_0196
// Return size: 4
void fn0177_0196()
fn0177_0196_entry:
	// succ:  l0177_0196
l0177_0196:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l0177_0197_thunk_fn0177_0199
l0177_0197_thunk_fn0177_0199:
	call fn0177_0199 (retsize: 0;)
	return
	// succ:  fn0177_0196_exit
fn0177_0196_exit:


// fn0177_0199
// Return size: 0
void fn0177_0199()
fn0177_0199_entry:
	// succ:  l0177_0199
l0177_0199:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x4960:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ds:bx + 0x4960:word16] = 0x0000
	goto l0177_01B1_thunk_fn0177_01B6
	// succ:  l0177_01B1_thunk_fn0177_01B6
l0177_0199:
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x4960:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ds:bx + 0x4960:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	di = Mem0[ds:si:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0177_01E2
	goto l0177_01C5_thunk_fn0177_01C7
	// succ:  l0177_01C5_thunk_fn0177_01C7 l0177_01C5_thunk_fn0177_01E2
l0177_01B1_thunk_fn0177_01B6:
	call fn0177_01B6 (retsize: 0;)
	return
	// succ:  fn0177_0199_exit
l0177_01C5_thunk_fn0177_01C7:
	call fn0177_01C7 (retsize: 0;)
	return
	// succ:  fn0177_0199_exit
l0177_01C5_thunk_fn0177_01E2:
	call fn0177_01E2 (retsize: 0;)
	return
	// succ:  fn0177_0199_exit
fn0177_0199_exit:


// fn0177_01B6
// Return size: 0
void fn0177_01B6()
fn0177_01B6_entry:
	// succ:  l0177_01B6
l0177_01B6:
	sp = fp
	bh = bh + bh
	SCZO = cond(bh)
	goto l0177_01B6_thunk_fn0177_01B8
	// succ:  l0177_01B6_thunk_fn0177_01B8
l0177_01B6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	goto l0177_01B6_thunk_fn0177_01B8
	// succ:  l0177_01B6_thunk_fn0177_01B8
l0177_01B6_thunk_fn0177_01B8:
	call fn0177_01B8 (retsize: 0;)
	return
	// succ:  fn0177_01B6_exit
l0177_01B6_thunk_fn0177_01B8:
	call fn0177_01B8 (retsize: 0;)
	return
	// succ:  fn0177_01B6_exit
fn0177_01B6_exit:


// fn0177_01B8
// Return size: 0
void fn0177_01B8()
fn0177_01B8_entry:
	// succ:  l0177_01B8
l0177_01B8:
	sp = fp
	branch Test(ULE,CZ) l0177_01B8_thunk_fn0177_01B6
	goto l0177_01BA
	// succ:  l0177_01BA l0177_01B8_thunk_fn0177_01B6
l0177_01B8:
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	di = Mem0[ds:si:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0177_01C5_thunk_fn0177_01E2
	goto l0177_01C5_thunk_fn0177_01C7
	// succ:  l0177_01C5_thunk_fn0177_01C7 l0177_01C5_thunk_fn0177_01E2
l0177_01B8_thunk_fn0177_01B6:
	call fn0177_01B6 (retsize: 0;)
	return
	// succ:  fn0177_01B8_exit
l0177_01BA:
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	di = Mem0[ds:si:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0177_01C5_thunk_fn0177_01E2
	// succ:  l0177_01C5_thunk_fn0177_01C7 l0177_01C5_thunk_fn0177_01E2
l0177_01C5_thunk_fn0177_01C7:
	call fn0177_01C7 (retsize: 0;)
	return
	// succ:  fn0177_01B8_exit l0177_01C5_thunk_fn0177_01C7
l0177_01C5_thunk_fn0177_01C7:
	call fn0177_01C7 (retsize: 0;)
	return
	// succ:  fn0177_01B8_exit
l0177_01C5_thunk_fn0177_01C7:
	call fn0177_01C7 (retsize: 0;)
	return
	// succ:  fn0177_01B8_exit l0177_01C5_thunk_fn0177_01C7
l0177_01C5_thunk_fn0177_01C7:
	call fn0177_01C7 (retsize: 0;)
	return
	// succ:  fn0177_01B8_exit
l0177_01C5_thunk_fn0177_01E2:
	call fn0177_01E2 (retsize: 0;)
	return
	// succ:  fn0177_01B8_exit
l0177_01C5_thunk_fn0177_01E2:
	call fn0177_01E2 (retsize: 0;)
	return
	// succ:  fn0177_01B8_exit
fn0177_01B8_exit:


// fn0177_01C7
// Return size: 0
void fn0177_01C7()
fn0177_01C7_entry:
	// succ:  l0177_01C7
l0177_01C7:
	bx = Mem0[ds:di:word16]
	ax = Mem0[ds:bx + 0x0008:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_01D6
	// succ:  l0177_01D0 l0177_01D6
l0177_01D0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_00F0 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0177_01D6
l0177_01D6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	// succ:  l0177_01D6_thunk_fn0177_01D7
l0177_01D6_thunk_fn0177_01D7:
	call fn0177_01D7 (retsize: 0;)
	return
	// succ:  fn0177_01C7_exit
fn0177_01C7_exit:


// fn0177_01D7
// Return size: 0
void fn0177_01D7()
fn0177_01D7_entry:
	// succ:  l0177_01D7
l0177_01D7:
	sp = fp
	call fn018F_0000 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	goto l0177_01DD_thunk_fn0177_01E2
	// succ:  l0177_01DD_thunk_fn0177_01E2
l0177_01D7:
	call fn018F_0000 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	goto l0177_01DD_thunk_fn0177_01E2
	// succ:  l0177_01DD_thunk_fn0177_01E2
l0177_01DD_thunk_fn0177_01E2:
	call fn0177_01E2 (retsize: 0;)
	return
	// succ:  fn0177_01D7_exit
l0177_01DD_thunk_fn0177_01E2:
	call fn0177_01E2 (retsize: 0;)
	return
	// succ:  fn0177_01D7_exit
fn0177_01D7_exit:


// fn0177_01E2
// Return size: 0
void fn0177_01E2()
fn0177_01E2_entry:
	// succ:  l0177_01E2
l0177_01E2:
	SCZO = cond(Mem0[ds:si + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l0177_01F0
	// succ:  l0177_01E8 l0177_01F0
l0177_01E8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0002:word16]
	call fn0137_00F0 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0177_01F0
l0177_01F0:
	SCZO = cond(Mem0[ds:0x4960:word16] - 0x0000)
	// succ:  l0177_01F0_thunk_fn0177_01F2
l0177_01F0_thunk_fn0177_01F2:
	call fn0177_01F2 (retsize: 0;)
	return
	// succ:  fn0177_01E2_exit
fn0177_01E2_exit:


// fn0177_01F2
// Return size: 0
void fn0177_01F2()
fn0177_01F2_entry:
	// succ:  l0177_01F2
l0177_01F2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cx = cx - 0x0001
	SZO = cond(cx)
	v14 = Mem0[ds:di + 0x001B:byte] + dh
	Mem0[ds:di + 0x001B:byte] = v14
	SCZO = cond(v14)
	goto l0177_01F4_thunk_fn0177_01F7
	// succ:  l0177_01F4_thunk_fn0177_01F7
l0177_01F2:
	branch Test(NE,Z) l0177_0212
	// succ:  l0177_01F2_thunk_fn0177_01F7 l0177_0212
l0177_01F2_thunk_fn0177_01F7:
	call fn0177_01F7 (retsize: 0;)
	return
	// succ:  fn0177_01F2_exit
l0177_01F4_thunk_fn0177_01F7:
	call fn0177_01F7 (retsize: 0;)
	return
	// succ:  fn0177_01F2_exit
l0177_0212:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0177_021D_thunk_fn0177_01F7
l0177_021D_thunk_fn0177_01F7:
	call fn0177_01F7 (retsize: 0;)
	return
	// succ:  fn0177_01F2_exit
fn0177_01F2_exit:


// fn0177_01F7
// Return size: 0
void fn0177_01F7()
fn0177_01F7_entry:
	// succ:  l0177_01F7
l0177_01F7:
	ax = ax - ax
	SCZO = cond(ax)
	cx = 0x0008
	di = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l0177_0200
l0177_0200:
	branch cx == 0x0000 l0177_0202
	// succ:  l0177_0200_1 l0177_0202
l0177_0200_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0177_0200
	// succ:  l0177_0200
l0177_0202:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:0x4960:word16] = ax
	// succ:  l0177_0222
l0177_0222:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l0177_022A
l0177_022A:
	bp = bp - 0x0001
	SZO = cond(bp)
	// succ:  l0177_022B
l0177_022B:
	return
fn0177_01F7_exit:


// fn0177_022C
// Return size: 4
void fn0177_022C()
fn0177_022C_entry:
	// succ:  l0177_022C
l0177_022C:
	sp = fp
	al = al + Mem0[ds:bx + si:byte]
	SCZO = cond(al)
	goto l0177_022C_thunk_fn0177_022E
	// succ:  l0177_022C_thunk_fn0177_022E
l0177_022C:
	goto fn0177_022C_exit
	// succ:  fn0177_022C_exit
l0177_022C_thunk_fn0177_022E:
	call fn0177_022E (retsize: 0;)
	return
	// succ:  fn0177_022C_exit
fn0177_022C_exit:


// fn0177_022E
// Return size: 0
void fn0177_022E()
fn0177_022E_entry:
	// succ:  l0177_022E
l0177_022E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	goto l0177_022F_thunk_fn0177_0230
	// succ:  l0177_022F_thunk_fn0177_0230
l0177_022E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	goto l0177_0232
	// succ:  l0177_0232
l0177_022F_thunk_fn0177_0230:
	call fn0177_0230 (retsize: 0;)
	return
	// succ:  fn0177_022E_exit
l0177_0232:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x053E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_0704 (retsize: 2;)
	sp = sp + 0x0004
	// succ:  l0177_0247
l0177_0247:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
fn0177_022E_exit:


// fn0177_0230
// Return size: 0
void fn0177_0230()
fn0177_0230_entry:
	// succ:  l0177_0230
l0177_0230:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	goto l0177_0232_in_fn0177_0230
	// succ:  l0177_0232_in_fn0177_0230
l0177_0230:
	bp = bp + 0x0001
	SZO = cond(bp)
	// succ:  l0177_0232_in_fn0177_022E
l0177_0232_in_fn0177_022E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x053E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_0704 (retsize: 2;)
	sp = sp + 0x0004
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0230_exit
l0177_0232_in_fn0177_0230:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x053E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_0704 (retsize: 2;)
	sp = sp + 0x0004
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0230_exit
fn0177_0230_exit:


// fn0177_0250
// Return size: 0
void fn0177_0250()
fn0177_0250_entry:
	// succ:  l0177_0250
l0177_0250:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0011)
	branch Test(UGT,CZ) l0177_02A9_in_fn0177_0250
	// succ:  l0177_0266 l0177_02A9_in_fn0177_0250
l0177_0266:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v10 = ax
	ax = bx
	bx = v10
	switch (ax) { l0177_0292 l0177_0292 l0177_0298 l0177_029E l0177_0298 l0177_0298 l0177_0298 l0177_0298 l0177_02A4 l0177_02A4 l0177_02A4 l0177_02A4 l0177_0298 l0177_02A4 l0177_0292 l0177_02A4 l0177_0292 l0177_0292 }
	// succ:  l0177_0292 l0177_0292 l0177_0298 l0177_029E l0177_0298 l0177_0298 l0177_0298 l0177_0298 l0177_02A4 l0177_02A4 l0177_02A4 l0177_02A4 l0177_0298 l0177_02A4 l0177_0292 l0177_02A4 l0177_0292 l0177_0292
l0177_0269_thunk_fn0177_0292:
	call fn0177_0292 (retsize: 0;)
	return
	// succ:  fn0177_0250_exit
l0177_0269_thunk_fn0177_0292:
	call fn0177_0292 (retsize: 0;)
	return
	// succ:  fn0177_0250_exit
l0177_0269_thunk_fn0177_0292:
	call fn0177_0292 (retsize: 0;)
	return
	// succ:  fn0177_0250_exit
l0177_0269_thunk_fn0177_0292:
	call fn0177_0292 (retsize: 0;)
	return
	// succ:  fn0177_0250_exit
l0177_0269_thunk_fn0177_0292:
	call fn0177_0292 (retsize: 0;)
	return
	// succ:  fn0177_0250_exit
l0177_0298:
	ax = 0x01F4
	// succ:  l0177_029B_thunk_fn0177_02A7
l0177_029B_thunk_fn0177_02A7:
	call fn0177_02A7 (retsize: 0;)
	return
	// succ:  fn0177_0250_exit
l0177_029E:
	ax = 0x03E8
	// succ:  l0177_029E_thunk_fn0177_02A1
l0177_029E_thunk_fn0177_02A1:
	call fn0177_02A1 (retsize: 0;)
	return
	// succ:  fn0177_0250_exit
l0177_02A4:
	ax = 0x00C8
	// succ:  l0177_02A4_thunk_fn0177_02A7
l0177_02A4_thunk_fn0177_02A7:
	call fn0177_02A7 (retsize: 0;)
	return
	// succ:  fn0177_0250_exit
l0177_02A9_in_fn0177_0250:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0250_exit
fn0177_0250_exit:


// fn0177_0277
// Return size: 0
void fn0177_0277()
fn0177_0277_entry:
	// succ:  l0177_0277
l0177_0277:
	sp = fp
	bl = bl + Mem0[ds:(bx + 0x9802) + si:byte]
	SCZO = cond(bl)
	bl = bl + Mem0[ds:(bx + 0xA402) + si:byte]
	SCZO = cond(bl)
	goto l0177_027B_thunk_fn0177_027F
	// succ:  l0177_027B_thunk_fn0177_027F
l0177_0277:
l0177_027B_thunk_fn0177_027F:
	call fn0177_027F (retsize: 0;)
	return
	// succ:  fn0177_0277_exit
fn0177_0277_exit:


// fn0177_027C
// Return size: 4
void fn0177_027C()
fn0177_027C_entry:
	// succ:  l0177_027C
l0177_027C:
	sp = fp
	ax = (int16) al
	ah = ah + Mem0[ds:si + 0xA402:byte]
	SCZO = cond(ah)
	goto l0177_027D_thunk_fn0177_027F
	// succ:  l0177_027D_thunk_fn0177_027F
l0177_027C:
	goto fn0177_027C_exit
	// succ:  fn0177_027C_exit
l0177_027D_thunk_fn0177_027F:
	call fn0177_027F (retsize: 0;)
	return
	// succ:  fn0177_027C_exit
fn0177_027C_exit:


// fn0177_027F
// Return size: 0
void fn0177_027F()
fn0177_027F_entry:
	// succ:  l0177_027F
l0177_027F:
	sp = fp
	ah = ah + Mem0[ds:si + 0xA402:byte]
	SCZO = cond(ah)
	ah = ah + Mem0[ds:si + 0x9802:byte]
	SCZO = cond(ah)
	ah = ah + Mem0[ds:si + 0x9202:byte]
	SCZO = cond(ah)
	ah = ah + Mem0[ds:si + 0x9202:byte]
	SCZO = cond(ah)
	dl = dl + Mem0[ss:(bp + 0xB802) + si:byte]
	SCZO = cond(dl)
	goto l0177_028F_thunk_fn0177_0292
	// succ:  l0177_028F_thunk_fn0177_0292
l0177_027F:
	ah = ah + Mem0[ds:si + 0xA402:byte]
	SCZO = cond(ah)
	bl = bl + Mem0[ds:(bx + 0xA402) + si:byte]
	SCZO = cond(bl)
	dl = dl + Mem0[ss:(bp + 0xA402) + si:byte]
	SCZO = cond(dl)
	dl = dl + Mem0[ss:(bp + 0x9202) + si:byte]
	SCZO = cond(dl)
	bh = bh + Mem0[ds:(bx + 0x0064) + si:byte]
	SCZO = cond(bh)
	goto l0177_028F_thunk_fn0177_02A7
	// succ:  l0177_028F_thunk_fn0177_02A7
l0177_028F_thunk_fn0177_0292:
	call fn0177_0292 (retsize: 0;)
	return
	// succ:  fn0177_027F_exit
l0177_028F_thunk_fn0177_02A7:
	call fn0177_02A7 (retsize: 0;)
	return
	// succ:  fn0177_027F_exit
fn0177_027F_exit:


// fn0177_0292
// Return size: 0
void fn0177_0292()
fn0177_0292_entry:
	// succ:  l0177_0292
l0177_0292:
	sp = fp
	ax = 0x0064
	goto l0177_0295_thunk_fn0177_02A7
	// succ:  l0177_0295_thunk_fn0177_02A7
l0177_0292:
	bl = bl + ch
	SCZO = cond(bl)
	v12 = Mem0[ds:bx + 0xF4B8 + si:byte] + dl + C
	Mem0[ds:bx + 0xF4B8 + si:byte] = v12
	SCZO = cond(v12)
	bx = bx + bp
	SCZO = cond(bx)
	dl = dl | Mem0[ds:(bx + 0xE8B8) + si:byte]
	SZO = cond(dl)
	C = false
	bp = bp + bx
	SCZO = cond(bp)
	goto l0177_02A0_thunk_fn0177_02A1
	// succ:  l0177_02A0_thunk_fn0177_02A1
l0177_0295_thunk_fn0177_02A7:
	call fn0177_02A7 (retsize: 0;)
	return
	// succ:  fn0177_0292_exit
l0177_02A0_thunk_fn0177_02A1:
	call fn0177_02A1 (retsize: 0;)
	return
	// succ:  fn0177_0292_exit
fn0177_0292_exit:


// fn0177_02A1
// Return size: 0
void fn0177_02A1()
fn0177_02A1_entry:
	// succ:  l0177_02A1
l0177_02A1:
	sp = fp
	goto l0177_02A7_in_fn0177_02A1
	// succ:  l0177_02A7_in_fn0177_02A1
l0177_02A1:
	al = al + 0x90
	SCZO = cond(al)
	ax = 0x00C8
	// succ:  l0177_02A7_in_fn0177_027F
l0177_02A7_in_fn0177_027F:
	dx = dx - dx
	SCZO = cond(dx)
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_02A1_exit
l0177_02A7_in_fn0177_02A1:
	dx = dx - dx
	SCZO = cond(dx)
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_02A1_exit
fn0177_02A1_exit:


// fn0177_02A7
// Return size: 0
void fn0177_02A7()
fn0177_02A7_entry:
	// succ:  l0177_02A7
l0177_02A7:
	dx = dx - dx
	SCZO = cond(dx)
	// succ:  l0177_02A9
l0177_02A9:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_02A7_exit
fn0177_02A7_exit:


// fn0177_02B4
// Return size: 0
void fn0177_02B4()
fn0177_02B4_entry:
	// succ:  l0177_02B4
l0177_02B4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x00A2
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x0508:word16] - 0x0000)
	branch Test(EQ,Z) l0177_02D8
	// succ:  l0177_02C9 l0177_02D8
l0177_02C9:
	ax = 0x02B5
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	goto l0177_0342_in_fn0177_02B4
	// succ:  l0177_0342_in_fn0177_02B4
l0177_02D8:
	ax = 0x0259
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	ax = 0x025A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	GetActiveWindow()
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	SCZO = cond(ax - 0x0006)
	branch Test(NE,Z) l0177_0342_in_fn0177_02B4
	// succ:  l0177_0312 l0177_0342_in_fn0177_02B4
l0177_0312:
	sp = sp - 0x0002
	call fn0177_035C (retsize: 2;)
l0177_0342_in_fn0177_02B4:
	al = Mem0[ds:0x4D1E:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1F:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00BF_113E (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x032C:word16] = ax
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_02B4_exit
l0177_0342_in_fn0177_02B4:
	al = Mem0[ds:0x4D1E:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1F:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00BF_113E (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x032C:word16] = ax
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_02B4_exit
fn0177_02B4_exit:


// fn0177_035C
// Return size: 0
void fn0177_035C()
fn0177_035C_entry:
	// succ:  l0177_035C
l0177_035C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ds:0x4DEA:word16]
	ax = Mem0[ds:bx:word16]
	cx = ax
	ax = ax + 0x0073
	SCZO = cond(ax)
	// succ:  l0177_0373_thunk_fn0177_0376
l0177_0373_thunk_fn0177_0376:
	call fn0177_0376 (retsize: 0;)
	return
	// succ:  fn0177_035C_exit
fn0177_035C_exit:


// fn0177_0376
// Return size: 0
void fn0177_0376()
fn0177_0376_entry:
	// succ:  l0177_0376
l0177_0376:
	sp = fp
	Mem0[ss:bp - 0x000E:word16] = ax
	goto l0177_0376_thunk_fn0177_0379
	// succ:  l0177_0376_thunk_fn0177_0379
l0177_0376:
l0177_0376_thunk_fn0177_0379:
	call fn0177_0379 (retsize: 0;)
	return
	// succ:  fn0177_0376_exit
fn0177_0376_exit:


// fn0177_0379
// Return size: 0
void fn0177_0379()
fn0177_0379_entry:
	// succ:  l0177_0379
l0177_0379:
	sp = fp
	cx = cx + 0x0028
	SCZO = cond(cx)
	Mem0[ss:bp - 0x000A:word16] = cx
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	SCZO = cond(cx - ax)
	branch Test(ULT,C) l0177_0386_thunk_fn0177_038B
	goto l0177_0386_thunk_fn0177_0388
	// succ:  l0177_0386_thunk_fn0177_0388 l0177_0386_thunk_fn0177_038B
l0177_0379:
	cx = cx + 0x0028
	SCZO = cond(cx)
	Mem0[ss:bp - 0x000A:word16] = cx
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	SCZO = cond(cx - ax)
	branch Test(ULT,C) l0177_0386_thunk_fn0177_038B
	goto l0177_0386_thunk_fn0177_0388
	// succ:  l0177_0386_thunk_fn0177_0388 l0177_0386_thunk_fn0177_038B
l0177_0386_thunk_fn0177_0388:
	call fn0177_0388 (retsize: 0;)
	return
	// succ:  fn0177_0379_exit l0177_0386_thunk_fn0177_0388
l0177_0386_thunk_fn0177_0388:
	call fn0177_0388 (retsize: 0;)
	return
	// succ:  fn0177_0379_exit
l0177_0386_thunk_fn0177_0388:
	call fn0177_0388 (retsize: 0;)
	return
	// succ:  fn0177_0379_exit
l0177_0386_thunk_fn0177_038B:
	call fn0177_038B (retsize: 0;)
	return
	// succ:  fn0177_0379_exit
l0177_0386_thunk_fn0177_038B:
	call fn0177_038B (retsize: 0;)
	return
	// succ:  fn0177_0379_exit
fn0177_0379_exit:


// fn0177_0388
// Return size: 0
void fn0177_0388()
fn0177_0388_entry:
	// succ:  l0177_0388
l0177_0388:
	// succ:  l0177_042B_in_fn0177_0376 l0177_042B_in_fn0177_0376
l0177_042B_in_fn0177_0376:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0388_exit
l0177_042B_in_fn0177_0376:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0388_exit
fn0177_0388_exit:


// fn0177_038B
// Return size: 0
void fn0177_038B()
fn0177_038B_entry:
	// succ:  l0177_038B
l0177_038B:
	bx = Mem0[ss:bp - 0x000A:word16]
	di = Mem0[ds:bx + 0x0003:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0177_0398
	// succ:  l0177_0395 l0177_0398
l0177_0395:
	goto l0177_0419
	// succ:  l0177_0419
l0177_0398:
	cx = Mem0[ds:di:word16]
	bx = cx
	SCZO = cond(Mem0[ds:bx:byte] - 0x12)
	branch Test(NE,Z) l0177_03FC
	// succ:  l0177_03A1 l0177_03FC
l0177_03A1:
	ax = Mem0[ds:bx + 0x0012:word16]
	dx = Mem0[ds:bx + 0x0014:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	SCZO = cond(si - 0x0001)
	branch Test(ULE,CZ) l0177_03D8
	// succ:  l0177_03B9 l0177_03D8
l0177_03B9:
	Mem0[ss:bp - 0x0008:word16] = di
	// succ:  l0177_03BC
l0177_03BC:
	ax = si
	si = si - 0x0001
	SZO = cond(si)
	SCZO = cond(ax - 0x0001)
	branch Test(ULE,CZ) l0177_03D8
	// succ:  l0177_03C4 l0177_03D8
l0177_03C4:
	ax = 0x000A
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B3C (retsize: 4;)
	sp = sp + 0x0006
	goto l0177_03BC
	// succ:  l0177_03BC
l0177_03D8:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	v22 = Mem0[ds:0x4C62:word16] + ax
	Mem0[ds:0x4C62:word16] = v22
	SCZO = cond(v22)
	v23 = Mem0[ds:0x4C64:word16] + dx + C
	Mem0[ds:0x4C64:word16] = v23
	SCZO = cond(v23)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	// succ:  l0177_03EB
l0177_03EB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	call fn0137_06D4 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0137_0066 (retsize: 4;)
	sp = sp + 0x0002
	goto l0177_0419
	// succ:  l0177_0419
l0177_03FC:
	SCZO = cond(Mem0[ds:bx:byte] - 0x10)
	branch Test(NE,Z) l0177_040E
	// succ:  l0177_0401 l0177_040E
l0177_0401:
	SCZO = cond(Mem0[ds:bx + 0x0001:byte] - 0x0D)
	branch Test(NE,Z) l0177_040E
	// succ:  l0177_0407 l0177_040E
l0177_0407:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn0177_0534 (retsize: 2;)
	goto l0177_0419
	// succ:  l0177_0419
l0177_040E:
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	// succ:  l0177_0412
l0177_0412:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn0177_0436 (retsize: 2;)
	// succ:  l0177_0419
l0177_0419:
	v10 = Mem0[ss:bp - 0x000C:word16] + 0x0001
	Mem0[ss:bp - 0x000C:word16] = v10
	SZO = cond(v10)
	ax = Mem0[ss:bp - 0x000E:word16]
	v12 = Mem0[ss:bp - 0x000A:word16] + 0x0005
	Mem0[ss:bp - 0x000A:word16] = v12
	SCZO = cond(v12)
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - ax)
	branch Test(UGE,C) l0177_042B
	// succ:  l0177_0428 l0177_042B
l0177_0428:
	goto l0177_038B
	// succ:  l0177_038B
l0177_042B:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_038B_exit
fn0177_038B_exit:


// fn0177_0436
// Return size: 0
void fn0177_0436()
fn0177_0436_entry:
	// succ:  l0177_0436
l0177_0436:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0014
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	// succ:  l0177_0444_thunk_fn0177_0445
l0177_0444_thunk_fn0177_0445:
	call fn0177_0445 (retsize: 0;)
	return
	// succ:  fn0177_0436_exit
fn0177_0436_exit:


// fn0177_0445
// Return size: 0
void fn0177_0445()
fn0177_0445_entry:
	// succ:  l0177_0445
l0177_0445:
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x0024:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x000E:word16] = ax
	// succ:  l0177_044E_thunk_fn0177_0451
l0177_044E_thunk_fn0177_0451:
	call fn0177_0451 (retsize: 0;)
	return
	// succ:  fn0177_0445_exit
fn0177_0445_exit:


// fn0177_0451
// Return size: 0
void fn0177_0451()
fn0177_0451_entry:
	// succ:  l0177_0451
l0177_0451:
	sp = fp
	cx = bx + 0x0028
	goto l0177_0451_thunk_fn0177_0454
	// succ:  l0177_0451_thunk_fn0177_0454
l0177_0451:
l0177_0451_thunk_fn0177_0454:
	call fn0177_0454 (retsize: 0;)
	return
	// succ:  fn0177_0451_exit
fn0177_0451_exit:


// fn0177_0454
// Return size: 0
void fn0177_0454()
fn0177_0454_entry:
	// succ:  l0177_0454
l0177_0454:
	sp = fp
	Mem0[ss:bp - 0x0010:word16] = cx
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax + bx
	SCZO = cond(ax)
	ax = ax + 0x0028
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	goto l0177_0464_thunk_fn0177_0467
	// succ:  l0177_0464_thunk_fn0177_0467
l0177_0454:
	Mem0[ss:bp - 0x0010:word16] = cx
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax + bx
	SCZO = cond(ax)
	ax = ax + 0x0028
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	goto l0177_0464_thunk_fn0177_0467
	// succ:  l0177_0464_thunk_fn0177_0467
l0177_0464_thunk_fn0177_0467:
	call fn0177_0467 (retsize: 0;)
	return
	// succ:  fn0177_0454_exit
l0177_0464_thunk_fn0177_0467:
	call fn0177_0467 (retsize: 0;)
	return
	// succ:  fn0177_0454_exit
fn0177_0454_exit:


// fn0177_0467
// Return size: 0
void fn0177_0467()
fn0177_0467_entry:
	// succ:  l0177_0467
l0177_0467:
	SCZO = cond(ax - cx)
	branch Test(UGE,C) l0177_046E
	// succ:  l0177_046B l0177_046E
l0177_046B:
	goto l0177_0527
	// succ:  l0177_0527
l0177_046E:
	Mem0[ss:bp - 0x0012:word16] = bx
	// succ:  l0177_0471
l0177_0471:
	bx = Mem0[ss:bp - 0x000C:word16]
	si = Mem0[ds:bx + 0x0003:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0177_047E
	// succ:  l0177_047B l0177_047E
l0177_047B:
	goto l0177_0515
	// succ:  l0177_0515
l0177_047E:
	di = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:di:byte] - 0x12)
	branch Test(NE,Z) l0177_04F8
	// succ:  l0177_0485 l0177_04F8
l0177_0485:
	ax = Mem0[ds:di + 0x0012:word16]
	dx = Mem0[ds:di + 0x0014:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = dx
	cl = Mem0[ds:di + 0x0001:byte]
	ch = ch - ch
	SCZO = cond(ch)
	SCZO = cond(cx - 0x0001)
	branch Test(ULE,CZ) l0177_04C0
	// succ:  l0177_049B l0177_04C0
l0177_049B:
	Mem0[ss:bp - 0x000A:word16] = si
	Mem0[ss:bp - 0x0004:word16] = cx
	si = cx
	goto l0177_04B5
	// succ:  l0177_04B5
l0177_04A6:
	ax = 0x000A
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B3C (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l0177_04B5
l0177_04B5:
	ax = si
	si = si - 0x0001
	SZO = cond(si)
	// succ:  l0177_04B8
l0177_04B8:
	SCZO = cond(ax - 0x0001)
	branch Test(UGT,CZ) l0177_04A6
	// succ:  l0177_04BD l0177_04A6
l0177_04BD:
	si = Mem0[ss:bp - 0x000A:word16]
	// succ:  l0177_04C0
l0177_04C0:
	ax = Mem0[ss:bp - 0x0008:word16]
	dx = Mem0[ss:bp - 0x0006:word16]
	v21 = Mem0[ds:0x4C62:word16] + ax
	Mem0[ds:0x4C62:word16] = v21
	SCZO = cond(v21)
	v22 = Mem0[ds:0x4C64:word16] + dx + C
	Mem0[ds:0x4C64:word16] = v22
	SCZO = cond(v22)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	bx = Mem0[ss:bp - 0x0012:word16]
	Mem0[ss:bp - 0x0014:word16] = si
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x40)
	C = false
	branch Test(EQ,Z) l0177_04E4
	// succ:  l0177_04DE l0177_04E4
l0177_04DE:
	ax = Mem0[ss:bp - 0x000E:word16]
	goto l0177_04E7
	// succ:  l0177_04E7
l0177_04E4:
	ax = 0xFFFF
	// succ:  l0177_04E7
l0177_04E7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_06D4 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	call fn0137_0066 (retsize: 4;)
	sp = sp + 0x0002
	goto l0177_0515
	// succ:  l0177_0515
l0177_04F8:
	SCZO = cond(Mem0[ds:di:byte] - 0x10)
	branch Test(NE,Z) l0177_050A
	// succ:  l0177_04FD l0177_050A
l0177_04FD:
	SCZO = cond(Mem0[ds:di + 0x0001:byte] - 0x0D)
	branch Test(NE,Z) l0177_050A
	// succ:  l0177_0503 l0177_050A
l0177_0503:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0177_0534 (retsize: 2;)
	goto l0177_0515
	// succ:  l0177_0515
l0177_050A:
	SZO = cond(Mem0[ds:di + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0177_0515
	// succ:  l0177_0510 l0177_0515
l0177_0510:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0177_0436 (retsize: 2;)
l0177_0515:
	v15 = Mem0[ss:bp - 0x000E:word16] - 0x0001
	Mem0[ss:bp - 0x000E:word16] = v15
	SZO = cond(v15)
	ax = Mem0[ss:bp - 0x0010:word16]
	v16 = Mem0[ss:bp - 0x000C:word16] - 0x0005
	Mem0[ss:bp - 0x000C:word16] = v16
	SCZO = cond(v16)
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - ax)
	branch Test(ULT,C) l0177_0527
	// succ:  l0177_0524 l0177_0527
l0177_0524:
	goto l0177_0471
	// succ:  l0177_0471
l0177_0527:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0467_exit
fn0177_0467_exit:


// fn0177_0534
// Return size: 0
void fn0177_0534()
fn0177_0534_entry:
	// succ:  l0177_0534
l0177_0534:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1700 (retsize: 4;)
	sp = sp + 0x0002
	v11 = Mem0[ds:0x4C62:word16] + ax
	Mem0[ds:0x4C62:word16] = v11
	SCZO = cond(v11)
	v14 = Mem0[ds:0x4C64:word16] + dx + C
	Mem0[ds:0x4C64:word16] = v14
	SCZO = cond(v14)
	si = si - si
	SCZO = cond(si)
	// succ:  l0177_0554_thunk_fn0177_0556
l0177_0554_thunk_fn0177_0556:
	call fn0177_0556 (retsize: 0;)
	return
	// succ:  fn0177_0534_exit
fn0177_0534_exit:


// fn0177_0556
// Return size: 0
void fn0177_0556()
fn0177_0556_entry:
	// succ:  l0177_0556
l0177_0556:
	sp = fp
	bx = Mem0[ds:di:word16]
	bx = Mem0[ds:bx + 0x002B + si:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x0012:word16]
	dx = Mem0[ds:bx + 0x0014:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	goto l0177_0563_thunk_fn0177_0566
	// succ:  l0177_0563_thunk_fn0177_0566
l0177_0556:
	bx = Mem0[ds:di:word16]
	bx = Mem0[ds:bx + 0x002B + si:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x0012:word16]
	dx = Mem0[ds:bx + 0x0014:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	goto l0177_0563_thunk_fn0177_0566
	// succ:  l0177_0563_thunk_fn0177_0566
l0177_0563_thunk_fn0177_0566:
	call fn0177_0566 (retsize: 0;)
	return
	// succ:  fn0177_0556_exit
l0177_0563_thunk_fn0177_0566:
	call fn0177_0566 (retsize: 0;)
	return
	// succ:  fn0177_0556_exit
fn0177_0556_exit:


// fn0177_0566
// Return size: 0
void fn0177_0566()
fn0177_0566_entry:
	// succ:  l0177_0566
l0177_0566:
	sp = fp
	Mem0[ss:bp - 0x0004:word16] = dx
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:bx + 0x0014:word16] = ax
	Mem0[ds:bx + 0x0012:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	goto l0177_057B_thunk_fn0177_057E
	// succ:  l0177_057B_thunk_fn0177_057E
l0177_0566:
	Mem0[ss:bp - 0x0004:word16] = dx
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:bx + 0x0014:word16] = ax
	Mem0[ds:bx + 0x0012:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	goto l0177_057B_thunk_fn0177_057E
	// succ:  l0177_057B_thunk_fn0177_057E
l0177_057B_thunk_fn0177_057E:
	call fn0177_057E (retsize: 0;)
	return
	// succ:  fn0177_0566_exit
l0177_057B_thunk_fn0177_057E:
	call fn0177_057E (retsize: 0;)
	return
	// succ:  fn0177_0566_exit
fn0177_0566_exit:


// fn0177_057E
// Return size: 0
void fn0177_057E()
fn0177_057E_entry:
	// succ:  l0177_057E
l0177_057E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_044A (retsize: 4;)
	sp = sp + 0x000E
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - 0x0014)
	branch Test(LT,SO) l0177_058E_thunk_fn0177_0556
	goto l0177_0590
	// succ:  l0177_0590 l0177_058E_thunk_fn0177_0556
l0177_058E_thunk_fn0177_0556:
	call fn0177_0556 (retsize: 0;)
	return
	// succ:  fn0177_057E_exit
l0177_0590:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_057E_exit
fn0177_057E_exit:


// fn0177_059C
// Return size: 4
void fn0177_059C()
fn0177_059C_entry:
	// succ:  l0177_059C
l0177_059C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x0508:word16] - 0x0000)
	branch Test(EQ,Z) l0177_05C0
	// succ:  l0177_05B2 l0177_05C0
l0177_05B2:
	ax = 0x02B5
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	goto l0177_05FB
	// succ:  l0177_05FB
l0177_05C0:
	ax = 0x0A38
	dx = 0x0097
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l0177_05FB
	// succ:  l0177_05DA l0177_05FB
l0177_05DA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0136
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = ax
	DialogBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	FreeProcInstance(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	// succ:  l0177_05FB
l0177_05FB:
	al = Mem0[ds:0x4D1E:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1F:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00BF_113E (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x032C:word16] = ax
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_059C_exit
fn0177_059C_exit:


// fn0177_0618
// Return size: 4
void fn0177_0618()
fn0177_0618_entry:
	// succ:  l0177_0618
l0177_0618:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x055A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_0704 (retsize: 2;)
	sp = sp + 0x0004
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0618_exit
fn0177_0618_exit:


// fn0177_063A
// Return size: 0
void fn0177_063A()
fn0177_063A_entry:
	// succ:  l0177_063A
l0177_063A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	// succ:  l0177_0647_in_fn0177_063A
l0177_0647_in_fn0177_063A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_0704 (retsize: 2;)
	sp = sp + 0x0004
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_063A_exit
fn0177_063A_exit:


// fn0177_065C
// Return size: 0
void fn0177_065C()
fn0177_065C_entry:
	// succ:  l0177_065C
l0177_065C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0530
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_0704 (retsize: 2;)
	sp = sp + 0x0004
fn0177_065C_exit:


// fn0177_067E
// Return size: 4
void fn0177_067E()
fn0177_067E_entry:
	// succ:  l0177_067E
l0177_067E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0576
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_0704 (retsize: 2;)
	sp = sp + 0x0004
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_067E_exit
fn0177_067E_exit:


// fn0177_06A0
// Return size: 4
void fn0177_06A0()
fn0177_06A0_entry:
	// succ:  l0177_06A0
l0177_06A0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0584
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_0704 (retsize: 2;)
	sp = sp + 0x0004
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_06A0_exit
fn0177_06A0_exit:


// fn0177_06C2
// Return size: 4
void fn0177_06C2()
fn0177_06C2_entry:
	// succ:  l0177_06C2
l0177_06C2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0522
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_0704 (retsize: 2;)
	sp = sp + 0x0004
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_06C2_exit
fn0177_06C2_exit:


// fn0177_06E2
// Return size: 0
void fn0177_06E2()
fn0177_06E2_entry:
	// succ:  l0177_06E2
l0177_06E2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x054C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_0704 (retsize: 2;)
	sp = sp + 0x0004
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	// succ:  l0177_06FF_in_fn0177_06E2
l0177_06FF_in_fn0177_06E2:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_06E2_exit
fn0177_06E2_exit:


// fn0177_0704
// Return size: 4
void fn0177_0704()
fn0177_0704_entry:
	// succ:  l0177_0704
l0177_0704:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(Mem0[ds:0x0508:word16] - 0x0000)
	branch Test(EQ,Z) l0177_0758
	// succ:  l0177_0737 l0177_0758
l0177_0737:
	ax = 0x02B5
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	al = Mem0[ds:0x4D1E:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1F:byte]
	// succ:  l0177_0749_thunk_fn0177_074B
l0177_0749_thunk_fn0177_074B:
	call fn0177_074B (retsize: 0;)
	return
	// succ:  fn0177_0704_exit
l0177_0758:
	si = Mem0[ss:bp + 0x0006:word16]
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + 0x4960
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0008:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(si - 0x0002)
	branch Test(EQ,Z) l0177_078E
	// succ:  l0177_0775 l0177_078E
l0177_0775:
	di = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(si - 0x0003)
	branch Test(EQ,Z) l0177_0799
	goto l0177_077D
	// succ:  l0177_077D l0177_077B_thunk_fn0177_0799
l0177_077B_thunk_fn0177_0799:
	call fn0177_0799 (retsize: 0;)
	return
	// succ:  fn0177_0704_exit
l0177_077D:
	SCZO = cond(Mem0[ds:di + 0x000C:word16] - 0x0000)
	branch Test(NE,Z) l0177_0794
	// succ:  l0177_0783 l0177_0794
l0177_0783:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0177_07EE (retsize: 2;)
	sp = sp + 0xFFFC
	Mem0[ds:di + 0x000C:word16] = ax
l0177_078E:
	di = Mem0[ss:bp + 0x0008:word16]
	// succ:  l0177_078E_thunk_fn0177_0799
l0177_078E_thunk_fn0177_0799:
	call fn0177_0799 (retsize: 0;)
	return
	// succ:  fn0177_0704_exit
l0177_0794:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0177_090E (retsize: 2;)
	sp = sp + 0xFFFC
fn0177_0704_exit:


// fn0177_074B
// Return size: 0
void fn0177_074B()
fn0177_074B_entry:
	// succ:  l0177_074B
l0177_074B:
	sp = fp
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00BF_113E (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x032C:word16] = ax
	goto l0177_0755_thunk_fn0177_07E2
	// succ:  l0177_0755_thunk_fn0177_07E2
l0177_074B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00BF_113E (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x032C:word16] = ax
	// succ:  l0177_0752_thunk_fn0177_0799
l0177_0752_thunk_fn0177_0799:
	call fn0177_0799 (retsize: 0;)
	return
	// succ:  fn0177_074B_exit
l0177_0755_thunk_fn0177_07E2:
	call fn0177_07E2 (retsize: 0;)
	return
	// succ:  fn0177_074B_exit
fn0177_074B_exit:


// fn0177_0789
// Return size: 0
void fn0177_0789()
fn0177_0789_entry:
	// succ:  l0177_0789
l0177_0789:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	al = al | 0xEB
	SZO = cond(al)
	C = false
l0177_0789:
fn0177_0789_exit:


// fn0177_078B
// Return size: 0
void fn0177_078B()
fn0177_078B_entry:
	// succ:  l0177_078B
l0177_078B:
	sp = fp
	goto l0177_078B_thunk_fn0177_0799
	// succ:  l0177_078B_thunk_fn0177_0799
l0177_078B:
	call fn0177_0799 (retsize: 0;)
	return
	// succ:  l0177_078B_thunk_fn0177_0799 fn0177_078B_exit
l0177_078B_thunk_fn0177_0799:
	call fn0177_0799 (retsize: 0;)
	return
l0177_078B_thunk_fn0177_0799:
	call fn0177_0799 (retsize: 0;)
	return
	// succ:  fn0177_078B_exit
l0177_078C:
	// succ:  fn0177_078B_exit
fn0177_078B_exit:


// fn0177_0799
// Return size: 0
void fn0177_0799()
fn0177_0799_entry:
	// succ:  l0177_0799
l0177_0799:
	SCZO = cond(Mem0[ds:di + 0x000A:word16] - 0x0000)
	branch Test(NE,Z) l0177_07B0
	// succ:  l0177_079F l0177_07B0
l0177_079F:
	bx = si
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0177:bx + 0x0064:word16]
	call fn0107_5344 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:di + 0x000A:word16] = ax
	// succ:  l0177_07B0
l0177_07B0:
	bx = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[ds:bx + 0x0002:word16]
	Mem0[ds:0x05B0:word16] = ax
	ax = Mem0[ds:di + 0x000C:word16]
	Mem0[ds:bx + 0x0002:word16] = ax
	bx = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x05AE:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x0111
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0068
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	PostMessage(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
fn0177_0799_exit:


// fn0177_07E1
// Return size: 0
void fn0177_07E1()
fn0177_07E1_entry:
	// succ:  l0177_07E1
l0177_07E1:
	sp = fp
	bl = bl + Mem0[ss:bp + 0x005F:byte]
	SCZO = cond(bl)
	goto l0177_07E4_in_fn0177_07E1
	// succ:  l0177_07E4_in_fn0177_07E1
l0177_07E1:
	call fn0177_07E2 (retsize: 0;)
	return
	// succ:  l0177_07E1_thunk_fn0177_07E2 fn0177_07E1_exit
l0177_07E1_thunk_fn0177_07E2:
	call fn0177_07E2 (retsize: 0;)
	return
	// succ:  fn0177_07E1_exit
l0177_07E4_in_fn0177_07E1:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_07E1_exit
fn0177_07E1_exit:


// fn0177_07E2
// Return size: 0
void fn0177_07E2()
fn0177_07E2_entry:
	// succ:  l0177_07E2
l0177_07E2:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l0177_07E4
l0177_07E4:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_07E2_exit
fn0177_07E2_exit:


// fn0177_07EE
// Return size: 4
void fn0177_07EE()
fn0177_07EE_entry:
	// succ:  l0177_07EE
l0177_07EE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0016
	dx_ax = Mem0[ss:bp + 0x0006:word16] *u ax
	SCZO = cond(dx_ax)
	ax = ax + 0x00A2
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	call fn0137_00A8 (retsize: 4;)
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_0818
	// succ:  l0177_0815 l0177_0818
l0177_0815:
	// succ:  l0177_0815_thunk_fn0177_0902
l0177_0815_thunk_fn0177_0902:
	call fn0177_0902 (retsize: 4;)
	return
	// succ:  fn0177_07EE_exit
l0177_0818:
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	al = al & 0xFC
	SZO = cond(al)
	C = false
	ax = ax + 0x0007
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l0177_087F
	goto l0177_082D
	// succ:  l0177_082D l0177_082B_thunk_fn0177_086D
l0177_082B_thunk_fn0177_086D:
	call fn0177_086D (retsize: 0;)
	return
	// succ:  fn0177_07EE_exit
l0177_082D:
	si = 0x017E
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	// succ:  l0177_0830_thunk_fn0177_086D
l0177_0830_thunk_fn0177_086D:
	call fn0177_086D (retsize: 0;)
	return
	// succ:  fn0177_07EE_exit
l0177_0871:
	goto fn0177_07EE_exit
	// succ:  fn0177_07EE_exit
l0177_0890_thunk_fn0177_0892:
	call fn0177_0892 (retsize: 0;)
	return
	// succ:  fn0177_07EE_exit l0177_0890_thunk_fn0177_0892
l0177_0890_thunk_fn0177_0892:
	call fn0177_0892 (retsize: 0;)
	return
	// succ:  fn0177_07EE_exit
l0177_0890_thunk_fn0177_08F5:
	call fn0177_08F5 (retsize: 0;)
	return
	// succ:  fn0177_07EE_exit
fn0177_07EE_exit:


// fn0177_086D
// Return size: 0
void fn0177_086D()
fn0177_086D_entry:
	goto l0177_086D
	// succ:  l0177_086D
l0177_0835:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[0x0177:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[0x0177:si + 0x0001:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0177:si + 0x0002:word16]
	call fn0137_07C2 (retsize: 4;)
	sp = sp + 0x0008
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0177_0856
	// succ:  l0177_0853 l0177_0856
l0177_0853:
	// succ:  l0177_0853_thunk_fn0177_08FF
l0177_0853_thunk_fn0177_08FF:
	call fn0177_08FF (retsize: 4;)
	return
	// succ:  fn0177_086D_exit
l0177_0856:
	bx = Mem0[ds:di:word16]
	v19 = Mem0[ds:bx + 0x0009:byte] | 0x01
	Mem0[ds:bx + 0x0009:byte] = v19
	SZO = cond(Mem0[ds:bx + 0x0009:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	goto l0177_086D
	// succ:  l0177_086D
l0177_086D:
	sp = fp
	v5 = Mem0[ds:di + 0x0003:byte] << 0xE9
	Mem0[ds:di + 0x0003:byte] = v5
	SCZO = cond(v5)
l0177_086D:
	branch Test(NE,Z) l0177_0873
	// succ:  l0177_0870 l0177_0873
l0177_0870:
	// succ:  l0177_0870_thunk_fn0177_08FF
l0177_0870_thunk_fn0177_08FF:
	call fn0177_08FF (retsize: 4;)
	return
l0177_0873:
	si = si + 0x0004
	SCZO = cond(si)
	v11 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v11
	SZO = cond(v11)
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0006)
	branch Test(ULT,C) l0177_0835
	// succ:  l0177_087F l0177_0835
l0177_087F:
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	bx = Mem0[ss:bp - 0x0008:word16]
	ax = 0x0177
	es = ax
	// succ:  l0177_088A_thunk_fn0177_088C
l0177_088A_thunk_fn0177_088C:
	call fn0177_088C (retsize: 0;)
	return
	// succ:  fn0177_086D_exit
fn0177_086D_exit:


// fn0177_088C
// Return size: 0
void fn0177_088C()
fn0177_088C_entry:
	// succ:  l0177_088C
l0177_088C:
	sp = fp
	SCZO = cond(Mem0[0x0177:bx:byte] - 0x00)
	branch Test(EQ,Z) l0177_0890_thunk_fn0177_08F5
	branch Test(EQ,Z) l0177_0890_thunk_fn0177_08F5
	// succ:  l0177_0890_thunk_fn0177_0892 l0177_0890_thunk_fn0177_08F5 l0177_0890_thunk_fn0177_0892 l0177_0890_thunk_fn0177_08F5
l0177_088C:
	SCZO = cond(Mem0[0x0177:bx:byte] - 0x00)
l0177_0890_thunk_fn0177_0892:
	call fn0177_0892 (retsize: 0;)
	return
	// succ:  fn0177_088C_exit
l0177_0890_thunk_fn0177_08F5:
	call fn0177_08F5 (retsize: 0;)
	return
	// succ:  fn0177_088C_exit
fn0177_088C_exit:


// fn0177_0892
// Return size: 0
void fn0177_0892()
fn0177_0892_entry:
	// succ:  l0177_0892
l0177_0892:
	di = di - di
	SCZO = cond(di)
	SCZO = cond(Mem0[0x0177:bx:byte] - 0x00)
	branch Test(EQ,Z) l0177_0898_thunk_fn0177_08F5
	goto l0177_089A
	// succ:  l0177_089A l0177_0898_thunk_fn0177_08F5
l0177_0898_thunk_fn0177_08F5:
	call fn0177_08F5 (retsize: 0;)
	return
	// succ:  fn0177_0892_exit
l0177_089A:
	Mem0[ss:bp - 0x0008:word16] = bx
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x0001
	SZO = cond(ax)
	C = false
	ax = ax + 0x0001
	SZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x000E:word16] = ax
	// succ:  l0177_08A8_thunk_fn0177_08AB l0177_08AE_thunk_fn0177_08B3
l0177_08A8_thunk_fn0177_08AB:
	call fn0177_08AB (retsize: 4;)
	return
	// succ:  fn0177_0892_exit
l0177_08AE_thunk_fn0177_08B3:
	call fn0177_08B3 (retsize: 4;)
	return
	// succ:  fn0177_0892_exit
fn0177_0892_exit:


// fn0177_08AB
// Return size: 4
void fn0177_08AB()
fn0177_08AB_entry:
	// succ:  l0177_08AB
l0177_08AB:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	goto l0177_08AB_thunk_fn0177_08AE
	// succ:  l0177_08AB_thunk_fn0177_08AE
l0177_08AB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
l0177_08AB_thunk_fn0177_08AE:
	call fn0177_08AE (retsize: 4;)
	return
	// succ:  fn0177_08AB_exit
fn0177_08AB_exit:


// fn0177_08AE
// Return size: 4
void fn0177_08AE()
fn0177_08AE_entry:
	// succ:  l0177_08AE
l0177_08AE:
	sp = fp
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	goto l0177_08AE_thunk_fn0177_08B3
	// succ:  l0177_08AE_thunk_fn0177_08B3
l0177_08AE:
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	goto l0177_08AE_thunk_fn0177_08B3
	// succ:  l0177_08AE_thunk_fn0177_08B3
l0177_08AE_thunk_fn0177_08B3:
	call fn0177_08B3 (retsize: 4;)
	return
	// succ:  fn0177_08AE_exit
l0177_08AE_thunk_fn0177_08B3:
	call fn0177_08B3 (retsize: 4;)
	return
	// succ:  fn0177_08AE_exit
fn0177_08AE_exit:


// fn0177_08B3
// Return size: 4
void fn0177_08B3()
fn0177_08B3_entry:
	// succ:  l0177_08B3
l0177_08B3:
	sp = fp
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0177_08B4_thunk_fn0177_08B5
	// succ:  l0177_08B4_thunk_fn0177_08B5
l0177_08B3:
l0177_08B4_thunk_fn0177_08B5:
	call fn0177_08B5 (retsize: 4;)
	return
	// succ:  fn0177_08B3_exit
fn0177_08B3_exit:


// fn0177_08B5
// Return size: 4
void fn0177_08B5()
fn0177_08B5_entry:
	// succ:  l0177_08B5
l0177_08B5:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	call fn0137_07C2 (retsize: 4;)
	sp = sp + 0x0008
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0177_08C7_thunk_fn0177_08FF
	goto l0177_08C7_thunk_fn0177_08C9
	// succ:  l0177_08C7_thunk_fn0177_08C9 l0177_08C7_thunk_fn0177_08FF
l0177_08B5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	call fn0137_07C2 (retsize: 4;)
	sp = sp + 0x0008
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0177_08C7_thunk_fn0177_08FF
	goto l0177_08C7_thunk_fn0177_08C9
	// succ:  l0177_08C7_thunk_fn0177_08C9 l0177_08C7_thunk_fn0177_08FF
l0177_08C7_thunk_fn0177_08C9:
	call fn0177_08C9 (retsize: 0;)
	return
	// succ:  fn0177_08B5_exit l0177_08C7_thunk_fn0177_08C9
l0177_08C7_thunk_fn0177_08C9:
	call fn0177_08C9 (retsize: 0;)
	return
	// succ:  fn0177_08B5_exit
l0177_08C7_thunk_fn0177_08C9:
	call fn0177_08C9 (retsize: 0;)
	return
	// succ:  fn0177_08B5_exit
l0177_08C7_thunk_fn0177_08FF:
	call fn0177_08FF (retsize: 4;)
	return
	// succ:  fn0177_08B5_exit
l0177_08C7_thunk_fn0177_08FF:
	call fn0177_08FF (retsize: 4;)
	return
	// succ:  fn0177_08B5_exit
fn0177_08B5_exit:


// fn0177_08C9
// Return size: 0
void fn0177_08C9()
fn0177_08C9_entry:
	// succ:  l0177_08C9
l0177_08C9:
	bx = Mem0[ds:si:word16]
	v5 = Mem0[ds:bx + 0x0009:byte] | 0x01
	Mem0[ds:bx + 0x0009:byte] = v5
	SZO = cond(Mem0[ds:bx + 0x0009:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_08E1_thunk_fn0177_08FF
	goto l0177_08E3
	// succ:  l0177_08E3 l0177_08E1_thunk_fn0177_08FF
l0177_08E1_thunk_fn0177_08FF:
	call fn0177_08FF (retsize: 4;)
	return
	// succ:  fn0177_08C9_exit
l0177_08E3:
	ax = 0x0177
	es = ax
	bx = Mem0[ss:bp - 0x0008:word16]
	al = Mem0[0x0177:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(ax - di)
	branch Test(UGT,CZ) l0177_08F3_thunk_fn0177_08AB
	goto l0177_08F3_thunk_fn0177_08F5
	// succ:  l0177_08F3_thunk_fn0177_08F5 l0177_08F3_thunk_fn0177_08AB
l0177_08F3_thunk_fn0177_08AB:
	call fn0177_08AB (retsize: 4;)
	return
	// succ:  fn0177_08C9_exit
l0177_08F3_thunk_fn0177_08F5:
	call fn0177_08F5 (retsize: 0;)
	return
	// succ:  fn0177_08C9_exit l0177_08F3_thunk_fn0177_08F5
l0177_08F3_thunk_fn0177_08F5:
	call fn0177_08F5 (retsize: 0;)
	return
	// succ:  fn0177_08C9_exit
fn0177_08C9_exit:


// fn0177_08F5
// Return size: 0
void fn0177_08F5()
fn0177_08F5_entry:
	// succ:  l0177_08F5
l0177_08F5:
	sp = fp
	bx = bx + 0x0001
	SZO = cond(bx)
	v7 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v7
	SZO = cond(v7)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0016)
	branch Test(ULT,C) l0177_08FD_thunk_fn0177_088C
	goto l0177_08FD_thunk_fn0177_08FF
	// succ:  l0177_08FD_thunk_fn0177_08FF l0177_08FD_thunk_fn0177_088C
l0177_08F5:
l0177_08FD_thunk_fn0177_088C:
	call fn0177_088C (retsize: 0;)
	return
	// succ:  fn0177_08F5_exit
l0177_08FD_thunk_fn0177_08FF:
	call fn0177_08FF (retsize: 4;)
	return
	// succ:  fn0177_08F5_exit l0177_08FD_thunk_fn0177_08FF
l0177_08FD_thunk_fn0177_08FF:
	call fn0177_08FF (retsize: 4;)
	return
	// succ:  fn0177_08F5_exit
fn0177_08F5_exit:


// fn0177_08FF
// Return size: 4
void fn0177_08FF()
fn0177_08FF_entry:
	// succ:  l0177_08FF
l0177_08FF:
	sp = fp
	ax = Mem0[ss:bp - 0x000A:word16]
	goto l0177_08FF_thunk_fn0177_0902
	// succ:  l0177_08FF_thunk_fn0177_0902
l0177_08FF:
l0177_08FF_thunk_fn0177_0902:
	call fn0177_0902 (retsize: 4;)
	return
	// succ:  fn0177_08FF_exit
fn0177_08FF_exit:


// fn0177_0902
// Return size: 4
void fn0177_0902()
fn0177_0902_entry:
	// succ:  l0177_0902
l0177_0902:
	sp = fp
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0902_exit
l0177_0902:
fn0177_0902_exit:


// fn0177_090E
// Return size: 4
void fn0177_090E()
fn0177_090E_entry:
	// succ:  l0177_090E
l0177_090E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	// succ:  l0177_0916_thunk_fn0177_0918
l0177_0916_thunk_fn0177_0918:
	call fn0177_0918 (retsize: 4;)
	return
	// succ:  fn0177_090E_exit
fn0177_090E_exit:


// fn0177_0918
// Return size: 4
void fn0177_0918()
fn0177_0918_entry:
	// succ:  l0177_0918
l0177_0918:
	sp = fp
	sp = sp - 0x0016
	SCZO = cond(sp)
	goto l0177_0918_thunk_fn0177_091B
	// succ:  l0177_0918_thunk_fn0177_091B
l0177_0918:
l0177_0918_thunk_fn0177_091B:
	call fn0177_091B (retsize: 4;)
	return
	// succ:  fn0177_0918_exit
fn0177_0918_exit:


// fn0177_091B
// Return size: 4
void fn0177_091B()
fn0177_091B_entry:
	// succ:  l0177_091B
l0177_091B:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x0006:word16]
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	goto l0177_0926_thunk_fn0177_0928
	// succ:  l0177_0926_thunk_fn0177_0928
l0177_091B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x0006:word16]
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	goto l0177_0926_thunk_fn0177_0928
	// succ:  l0177_0926_thunk_fn0177_0928
l0177_0926_thunk_fn0177_0928:
	call fn0177_0928 (retsize: 4;)
	return
	// succ:  fn0177_091B_exit
l0177_0926_thunk_fn0177_0928:
	call fn0177_0928 (retsize: 4;)
	return
	// succ:  fn0177_091B_exit
fn0177_091B_exit:


// fn0177_0928
// Return size: 4
void fn0177_0928()
fn0177_0928_entry:
	// succ:  l0177_0928
l0177_0928:
	sp = fp
	bx = bx + ax
	SCZO = cond(bx)
	goto l0177_0928_thunk_fn0177_0929
	// succ:  l0177_0928_thunk_fn0177_0929
l0177_0928:
l0177_0928_thunk_fn0177_0929:
	call fn0177_0929 (retsize: 4;)
	return
	// succ:  fn0177_0928_exit
fn0177_0928_exit:


// fn0177_0929
// Return size: 4
void fn0177_0929()
fn0177_0929_entry:
	// succ:  l0177_0929
l0177_0929:
	sp = fp
	FPUF = cond(rArg0 - rArg0)
	branch cx == 0x0000 l0177_092B_thunk_fn0177_08AE
	goto l0177_092B_thunk_fn0177_092D
	// succ:  l0177_092B_thunk_fn0177_092D l0177_092B_thunk_fn0177_08AE
l0177_0929:
	bx = bx << 0x0001
	SCZO = cond(bx)
	// succ:  l0177_0929_thunk_fn0177_092C
l0177_0929_thunk_fn0177_092C:
	call fn0177_092C (retsize: 0;)
	return
	// succ:  fn0177_0929_exit
l0177_092B_thunk_fn0177_08AE:
	call fn0177_08AE (retsize: 4;)
	return
	// succ:  fn0177_0929_exit
l0177_092B_thunk_fn0177_092D:
	call fn0177_092D (retsize: 2;)
	return
	// succ:  fn0177_0929_exit l0177_092B_thunk_fn0177_092D
l0177_092B_thunk_fn0177_092D:
	call fn0177_092D (retsize: 2;)
	return
	// succ:  fn0177_0929_exit
fn0177_0929_exit:


// fn0177_092C
// Return size: 0
void fn0177_092C()
fn0177_092C_entry:
	// succ:  l0177_092C
l0177_092C:
	sp = fp
	bx = bx + 0x0522
	SCZO = cond(bx)
	goto l0177_092C_thunk_fn0177_092D
	// succ:  l0177_092C_thunk_fn0177_092D
l0177_092C:
	bx = bx + 0x0522
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x000C:word16]
	Mem0[ss:bp - 0x000E:word16] = ax
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	al = al & 0xFC
	SZO = cond(al)
	C = false
	ax = ax + 0x0007
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0012:word16] = ax
	ax = 0xD2F0
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	ax = ax - Mem0[ds:bx + 0x0002:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ds:bx + 0x0004:word16] - C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0010:word16] = ax
	SCZO = cond(ax - 0x000F)
	branch Test(LE,SZO) l0177_096D
	goto l0177_0966_thunk_fn0177_0968
	// succ:  l0177_0966_thunk_fn0177_0968 l0177_0966_thunk_fn0177_096D
l0177_092C_thunk_fn0177_092D:
	call fn0177_092D (retsize: 2;)
	return
	// succ:  fn0177_092C_exit
l0177_0966_thunk_fn0177_0968:
	call fn0177_0968 (retsize: 0;)
	return
	// succ:  fn0177_092C_exit
l0177_0966_thunk_fn0177_096D:
	call fn0177_096D (retsize: 0;)
	return
	// succ:  fn0177_092C_exit
fn0177_092C_exit:


// fn0177_092D
// Return size: 2
void fn0177_092D()
fn0177_092D_entry:
	// succ:  l0177_092D
l0177_092D:
	sp = fp
	return
	// succ:  fn0177_092D_exit
l0177_092D:
	ax = Mem0[ds:bx + 0x000C:word16]
	Mem0[ss:bp - 0x000E:word16] = ax
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	al = al & 0xFC
	SZO = cond(al)
	C = false
	ax = ax + 0x0007
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0012:word16] = ax
	ax = 0xD2F0
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	ax = ax - Mem0[ds:bx + 0x0002:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ds:bx + 0x0004:word16] - C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0010:word16] = ax
	SCZO = cond(ax - 0x000F)
	branch Test(LE,SZO) l0177_0966_thunk_fn0177_096D
	// succ:  l0177_0966_thunk_fn0177_0968 l0177_0966_thunk_fn0177_096D
l0177_0966_thunk_fn0177_0968:
	call fn0177_0968 (retsize: 0;)
	return
	// succ:  fn0177_092D_exit l0177_0966_thunk_fn0177_0968
l0177_0966_thunk_fn0177_0968:
	call fn0177_0968 (retsize: 0;)
	return
	// succ:  fn0177_092D_exit
l0177_0966_thunk_fn0177_096D:
	call fn0177_096D (retsize: 0;)
	return
	// succ:  fn0177_092D_exit
fn0177_092D_exit:


// fn0177_0968
// Return size: 0
void fn0177_0968()
fn0177_0968_entry:
	// succ:  l0177_0968
l0177_0968:
	Mem0[ss:bp - 0x0010:word16] = 0x000F
	// succ:  l0177_0968_thunk_fn0177_096D
l0177_0968_thunk_fn0177_096D:
	call fn0177_096D (retsize: 0;)
	return
	// succ:  fn0177_0968_exit
fn0177_0968_exit:


// fn0177_096D
// Return size: 0
void fn0177_096D()
fn0177_096D_entry:
	// succ:  l0177_096D
l0177_096D:
	SCZO = cond(Mem0[ss:bp - 0x0010:word16] - 0x0000)
	branch Test(NE,Z) l0177_0976
	// succ:  l0177_0973 l0177_0976
l0177_0973:
	// succ:  l0177_0973_thunk_fn0177_0AA9
l0177_0973_thunk_fn0177_0AA9:
	call fn0177_0AA9 (retsize: 4;)
	return
	// succ:  fn0177_096D_exit
l0177_0976:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = ax
	Mem0[ss:bp - 0x0004:word16] = bx
	ax = Mem0[ds:bx + 0x0024:word16]
	si = ax
	di = Mem0[ss:bp - 0x0010:word16]
	SCZO = cond(ax - 0x000F)
	branch Test(GT,SZO) l0177_0995
	// succ:  l0177_0990 l0177_0995
l0177_0990:
	SCZO = cond(si - 0x000F)
	branch Test(GE,SO) l0177_099A
	// succ:  l0177_0995 l0177_099A
l0177_0995:
	ax = si - 0x000F
	di = di + ax
	SCZO = cond(di)
	// succ:  l0177_099A
l0177_099A:
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	ax = di
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l0177_09A7
	// succ:  l0177_09A5 l0177_09A7
l0177_09A5:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0177_09A7
l0177_09A7:
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LE,SZO) l0177_09E0
	// succ:  l0177_09AD l0177_09E0
l0177_09AD:
	Mem0[ss:bp - 0x0006:word16] = di
	Mem0[ss:bp - 0x0008:word16] = di
	// succ:  l0177_09B3
l0177_09B3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(bx)
	di = Mem0[ds:bx + 0x002B:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_06D4 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0137_0066 (retsize: 4;)
	sp = sp + 0x0002
	si = si - 0x0001
	SZO = cond(si)
	v15 = Mem0[ss:bp - 0x0006:word16] - 0x0001
	Mem0[ss:bp - 0x0006:word16] = v15
	SZO = cond(v15)
	branch Test(NE,Z) l0177_09B3
	// succ:  l0177_09E0 l0177_09B3
l0177_09E0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = 0x0016
	dx_ax = Mem0[ss:bp + 0x0006:word16] *s ax
	SCZO = cond(dx_ax)
	ax = ax + 0x00A2
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0014:word16] = ax
	si = ax
	di = di - di
	SCZO = cond(di)
	Mem0[ss:bp - 0x0008:word16] = 0x0016
	cx = Mem0[ss:bp - 0x0008:word16]
	ax = 0x0177
	es = ax
	// succ:  l0177_0A05
l0177_0A05:
	al = Mem0[0x0177:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = di + ax
	SCZO = cond(di)
	si = si + 0x0001
	SZO = cond(si)
	cx = cx - 0x0001
	branch cx != 0x0000 l0177_0A05
	// succ:  l0177_0A0F l0177_0A05
l0177_0A0F:
	Mem0[ss:bp - 0x000A:word16] = di
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	SCZO = cond(Mem0[ss:bp - 0x0010:word16] - 0x0000)
	branch Test(GT,SZO) l0177_0A20
	// succ:  l0177_0A1D l0177_0A20
l0177_0A1D:
	// succ:  l0177_0A1D_thunk_fn0177_0AA9
l0177_0A1D_thunk_fn0177_0AA9:
	call fn0177_0AA9 (retsize: 4;)
	return
	// succ:  fn0177_096D_exit
l0177_0A20:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x0001
	SZO = cond(ax)
	C = false
	ax = ax + 0x0001
	SZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x0016:word16] = ax
	// succ:  l0177_0A2B_thunk_fn0177_0A2E
l0177_0A2B_thunk_fn0177_0A2E:
	call fn0177_0A2E (retsize: 0;)
	return
	// succ:  fn0177_096D_exit
fn0177_096D_exit:


// fn0177_0A2E
// Return size: 0
void fn0177_0A2E()
fn0177_0A2E_entry:
	// succ:  l0177_0A2E
l0177_0A2E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = Mem0[ss:bp - 0x0014:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	bx = ax
	cx = Mem0[ss:bp - 0x0004:word16]
	di = Mem0[ss:bp - 0x0008:word16]
	ax = 0x0177
	es = ax
	goto l0177_0A4F_thunk_fn0177_0A51
	// succ:  l0177_0A4F_thunk_fn0177_0A51
l0177_0A2E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = Mem0[ss:bp - 0x0014:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	bx = ax
	cx = Mem0[ss:bp - 0x0004:word16]
	di = Mem0[ss:bp - 0x0008:word16]
	ax = 0x0177
	es = ax
	goto l0177_0A4F_thunk_fn0177_0A51
	// succ:  l0177_0A4F_thunk_fn0177_0A51
l0177_0A4F_thunk_fn0177_0A51:
	call fn0177_0A51 (retsize: 0;)
	return
	// succ:  fn0177_0A2E_exit
l0177_0A4F_thunk_fn0177_0A51:
	call fn0177_0A51 (retsize: 0;)
	return
	// succ:  fn0177_0A2E_exit
fn0177_0A2E_exit:


// fn0177_0A51
// Return size: 0
void fn0177_0A51()
fn0177_0A51_entry:
	// succ:  l0177_0A51
l0177_0A51:
	al = Mem0[0x0177:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - cx)
	branch Test(UGT,CZ) l0177_0A63
	// succ:  l0177_0A5A l0177_0A63
l0177_0A5A:
	cx = cx - ax
	SCZO = cond(cx)
	bx = bx + 0x0001
	SZO = cond(bx)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - 0x0016)
	branch Test(LT,SO) l0177_0A51
	// succ:  l0177_0A63 l0177_0A51
l0177_0A63:
	Mem0[ss:bp - 0x0008:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	// succ:  l0177_0A70_thunk_fn0177_0A73
l0177_0A70_thunk_fn0177_0A73:
	call fn0177_0A73 (retsize: 0;)
	return
	// succ:  fn0177_0A51_exit
fn0177_0A51_exit:


// fn0177_0A73
// Return size: 0
void fn0177_0A73()
fn0177_0A73_entry:
	// succ:  l0177_0A73
l0177_0A73:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0177_0A73_thunk_fn0177_0A75
l0177_0A73_thunk_fn0177_0A75:
	call fn0177_0A75 (retsize: 0;)
	return
	// succ:  fn0177_0A73_exit
fn0177_0A73_exit:


// fn0177_0A74
// Return size: 0
void fn0177_0A74()
fn0177_0A74_entry:
	// succ:  l0177_0A74
l0177_0A74:
	sp = fp
	v3 = (Mem0[ds:bx - 0x0001 + si:byte] & 0x01 << 0x08 - 0x76) != 0x00
	Mem0[ds:bx - 0x0001 + si:byte] = __rcl(Mem0[ds:bx - 0x0001 + si:byte], 0x76, C)
	C = v3
l0177_0A74:
fn0177_0A74_exit:


// fn0177_0A75
// Return size: 0
void fn0177_0A75()
fn0177_0A75_entry:
	// succ:  l0177_0A75
l0177_0A75:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0177_0A75_thunk_fn0177_0A76
	// succ:  l0177_0A75_thunk_fn0177_0A76
l0177_0A75:
l0177_0A75_thunk_fn0177_0A76:
	call fn0177_0A76 (retsize: 0;)
	return
	// succ:  fn0177_0A75_exit
fn0177_0A75_exit:


// fn0177_0A76
// Return size: 4
void fn0177_0A76()
fn0177_0A76_entry:
	// succ:  l0177_0A76
l0177_0A76:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0016:word16]
	// succ:  l0177_0A76_thunk_fn0177_0A79
l0177_0A76_thunk_fn0177_0A79:
	call fn0177_0A79 (retsize: 4;)
	return
	// succ:  fn0177_0A76_exit
fn0177_0A76_exit:


// fn0177_0A78
// Return size: 0
void fn0177_0A78()
fn0177_0A78_entry:
	// succ:  l0177_0A78
l0177_0A78:
fn0177_0A78_exit:


// fn0177_0A79
// Return size: 4
void fn0177_0A79()
fn0177_0A79_entry:
	// succ:  l0177_0A79
l0177_0A79:
	sp = fp
	call fn0137_07C2 (retsize: 4;)
	sp = sp + 0x0008
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0177_0A82_thunk_fn0177_0AA9
	goto l0177_0A84
	// succ:  l0177_0A84 l0177_0A82_thunk_fn0177_0AA9
l0177_0A79:
	goto l3707_C29A
	// succ:  l3707_C29A
l0177_0A82_thunk_fn0177_0AA9:
	call fn0177_0AA9 (retsize: 4;)
	return
	// succ:  fn0177_0A79_exit
l0177_0A84:
	bx = Mem0[ds:si:word16]
	v10 = Mem0[ds:bx + 0x0009:byte] | 0x01
	Mem0[ds:bx + 0x0009:byte] = v10
	SZO = cond(Mem0[ds:bx + 0x0009:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_0A9C_thunk_fn0177_0AA9
	goto l0177_0A9E
	// succ:  l0177_0A9E l0177_0A9C_thunk_fn0177_0AA9
l0177_0A9C_thunk_fn0177_0AA9:
	call fn0177_0AA9 (retsize: 4;)
	return
	// succ:  fn0177_0A79_exit
l0177_0A9E:
	ax = Mem0[ss:bp - 0x0010:word16]
	v14 = Mem0[ss:bp - 0x000C:word16] + 0x0001
	Mem0[ss:bp - 0x000C:word16] = v14
	SZO = cond(v14)
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - ax)
	branch Test(LT,SO) l0177_0AA7_thunk_fn0177_0A2E
	goto l0177_0AA7_thunk_fn0177_0AA9
	// succ:  l0177_0AA7_thunk_fn0177_0AA9 l0177_0AA7_thunk_fn0177_0A2E
l0177_0AA7_thunk_fn0177_0A2E:
	call fn0177_0A2E (retsize: 0;)
	return
	// succ:  fn0177_0A79_exit
l0177_0AA7_thunk_fn0177_0AA9:
	call fn0177_0AA9 (retsize: 4;)
	return
	// succ:  fn0177_0A79_exit l0177_0AA7_thunk_fn0177_0AA9
l0177_0AA7_thunk_fn0177_0AA9:
	call fn0177_0AA9 (retsize: 4;)
	return
	// succ:  fn0177_0A79_exit
l3707_C29A:
fn0177_0A79_exit:


// fn0177_0AA9
// Return size: 4
void fn0177_0AA9()
fn0177_0AA9_entry:
	// succ:  l0177_0AA9
l0177_0AA9:
	sp = fp
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0AA9_exit
l0177_0AA9:
fn0177_0AA9_exit:


// fn0177_0AB6
// Return size: 4
void fn0177_0AB6()
fn0177_0AB6_entry:
	// succ:  l0177_0AB6
l0177_0AB6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l0177_0AB7_thunk_fn0177_0AB8
l0177_0AB7_thunk_fn0177_0AB8:
	call fn0177_0AB8 (retsize: 0;)
	return
	// succ:  fn0177_0AB6_exit
fn0177_0AB6_exit:


// fn0177_0AB8
// Return size: 0
void fn0177_0AB8()
fn0177_0AB8_entry:
	// succ:  l0177_0AB8
l0177_0AB8:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	bx = Mem0[ds:0x05AE:word16]
	cx = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + cx
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + cx
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	Mem0[ds:bx + 0x0524:word16] = ax
	Mem0[ds:bx + 0x0526:word16] = dx
	Mem0[ds:0x05AE:word16] = 0xFFFF
	ax = Mem0[ds:0x05B0:word16]
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	cl = Mem0[ds:0x4D1D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	bx = bx + cx
	SCZO = cond(bx)
	cx = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	goto l0177_0B01_in_fn0177_0AB8
	// succ:  l0177_0B01_in_fn0177_0AB8
l0177_0AB8:
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	bx = Mem0[ds:0x05AE:word16]
	cx = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + cx
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + cx
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	Mem0[ds:bx + 0x0524:word16] = ax
	Mem0[ds:bx + 0x0526:word16] = dx
	Mem0[ds:0x05AE:word16] = 0xFFFF
	ax = Mem0[ds:0x05B0:word16]
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	cl = Mem0[ds:0x4D1D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	bx = bx + cx
	SCZO = cond(bx)
	cx = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	// succ:  l0177_0B01
l0177_0B01:
	bx = bx + cx
	SCZO = cond(bx)
	bl = Mem0[ds:bx + 0x0CE4:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x0002:word16] = ax
	al = Mem0[ds:0x4D1E:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1F:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00BF_113E (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x032C:word16] = ax
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
l0177_0B01_in_fn0177_0AB8:
	bx = bx + cx
	SCZO = cond(bx)
	bl = Mem0[ds:bx + 0x0CE4:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x0002:word16] = ax
	al = Mem0[ds:0x4D1E:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1F:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00BF_113E (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x032C:word16] = ax
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0AB8_exit
fn0177_0AB8_exit:


// fn0177_0B2E
// Return size: 0
void fn0177_0B2E()
fn0177_0B2E_entry:
	// succ:  l0177_0B2E
l0177_0B2E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	SCZO = cond(Mem0[ds:0x05AE:word16] - 0x0003)
	branch Test(NE,Z) l0177_0B52
	// succ:  l0177_0B42 l0177_0B52
l0177_0B42:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0012)
	branch Test(EQ,Z) l0177_0B4E
	// succ:  l0177_0B48 l0177_0B4E
l0177_0B48:
	ax = 0x0001
	// succ:  l0177_0B48_thunk_fn0177_0B4B
l0177_0B48_thunk_fn0177_0B4B:
	call fn0177_0B4B (retsize: 0;)
	return
	// succ:  fn0177_0B2E_exit
l0177_0B4E:
	ax = ax - ax
	SCZO = cond(ax)
	goto l0177_0B65_in_fn0177_0B2E
	// succ:  l0177_0B65_in_fn0177_0B2E
l0177_0B52:
	ax = 0x0016
	dx_ax = Mem0[ds:0x05AE:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	bx = bx + Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(bx)
	al = Mem0[0x0177:bx + 0x00A2:byte]
	ah = ah - ah
	SCZO = cond(ah)
	// succ:  l0177_0B65_in_fn0177_0B2E
l0177_0B65_in_fn0177_0B2E:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B2E_exit
l0177_0B65_in_fn0177_0B2E:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B2E_exit
fn0177_0B2E_exit:


// fn0177_0B49
// Return size: 4
void fn0177_0B49()
fn0177_0B49_entry:
	// succ:  l0177_0B49
l0177_0B49:
	sp = fp
	v7 = Mem0[ds:bx + si:word16] + ax
	Mem0[ds:bx + si:word16] = v7
	SCZO = cond(v7)
l0177_0B49:
	// succ:  fn0177_0B49_exit
fn0177_0B49_exit:


// fn0177_0B4B
// Return size: 0
void fn0177_0B4B()
fn0177_0B4B_entry:
	// succ:  l0177_0B4B
l0177_0B4B:
	sp = fp
	goto l0177_0B65_in_fn0177_0B4B
	// succ:  l0177_0B65_in_fn0177_0B4B
l0177_0B4B:
	// succ:  l0177_0B65
l0177_0B65:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B4B_exit
l0177_0B65_in_fn0177_0B4B:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B4B_exit
fn0177_0B4B_exit:


// fn0177_0B70
// Return size: 4
void fn0177_0B70()
fn0177_0B70_entry:
	goto l0177_0B70
	// succ:  l0177_0B70
l0177_022A_in_fn0177_0B70:
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_022B_in_fn0177_0B70:
	return
	// succ:  fn0177_0B70_exit
l0177_0232_in_fn0177_0B70:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x053E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_0704 (retsize: 2;)
	sp = sp + 0x0004
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_0247_in_fn0177_0B70:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_0314:
	si = si + 0x0001
	SZO = cond(si)
	v547 = Mem0[ds:bx + 0x025B + si:byte] + bh
	Mem0[ds:bx + 0x025B + si:byte] = v547
	SCZO = cond(v547)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	GetActiveWindow()
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00A2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	call fn0137_1CE4 (retsize: 4;)
	// succ:  l0177_0342
l0177_0342:
	al = Mem0[ds:0x4D1E:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1F:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00BF_113E (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x032C:word16] = ax
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_0375:
	v4250 = Mem0[ds:bx + 0xF246 + di:byte] + cl
	Mem0[ds:bx + 0xF246 + di:byte] = v4250
	SCZO = cond(v4250)
	// succ:  l0177_0375_thunk_fn0177_0379
l0177_0375_thunk_fn0177_0379:
	call fn0177_0379 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_03B8:
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l0177_03B8_thunk_fn0177_038B
l0177_03B8_thunk_fn0177_038B:
	call fn0177_038B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0410:
	v854 = Mem0[ds:bx + 0x0574 + si:word16] | ax
	Mem0[ds:bx + 0x0574 + si:word16] = v854
	SZO = cond(Mem0[ds:bx + 0x0574 + si:word16])
	C = false
	// succ:  l0177_0410_thunk_fn0177_038B
l0177_0410_thunk_fn0177_038B:
	call fn0177_038B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_044F:
	si = si + 0x0001
	SZO = cond(si)
	branch cx == 0x0000 l0177_0450_thunk_fn0177_0454
	// succ:  l0177_0450_1 l0177_0450_thunk_fn0177_0454
l0177_0450_1:
	goto l0177_0450_thunk_fn0177_0454
	// succ:  l0177_0450_thunk_fn0177_0454
l0177_0450_thunk_fn0177_0454:
	call fn0177_0454 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0450_thunk_fn0177_0454:
	call fn0177_0454 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0565:
	__cli()
	// succ:  l0177_0565_thunk_fn0177_0566
l0177_0565_thunk_fn0177_0566:
	call fn0177_0566 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0645:
	al = __inb(dx)
	bh = bh + Mem0[ds:(bx + 0x0568) + si:byte]
	SCZO = cond(bh)
	// succ:  l0177_0647
l0177_0647:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_0704 (retsize: 2;)
	sp = sp + 0x0004
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_0675:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_06FE:
	ax = __inw(0x1F)
	// succ:  l0177_06FF
l0177_06FF:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_08B1:
	SZO = cond(Mem0[ds:bx + si:word16] & 0x5040)
	C = false
	// succ:  l0177_08B1_thunk_fn0177_08B5
l0177_08B1_thunk_fn0177_08B5:
	call fn0177_08B5 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_0917:
	rArg0 = rArg0 + Mem0[ss:(bp + 0x16EC) + di:real32]
	// succ:  l0177_0917_thunk_fn0177_091B
l0177_0917_thunk_fn0177_091B:
	call fn0177_091B (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_0927:
	branch cx == 0x0000 l0177_0927_thunk_fn0177_092C
	// succ:  l0177_0927_thunk_fn0177_0929 l0177_0927_thunk_fn0177_092C
l0177_0927_thunk_fn0177_0929:
	call fn0177_0929 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit l0177_0927_thunk_fn0177_0929
l0177_0927_thunk_fn0177_0929:
	call fn0177_0929 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_0927_thunk_fn0177_092C:
	call fn0177_092C (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0B01_in_fn0177_0B70:
	bx = bx + cx
	SCZO = cond(bx)
	bl = Mem0[ds:bx + 0x0CE4:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x0002:word16] = ax
	al = Mem0[ds:0x4D1E:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1F:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00BF_113E (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x032C:word16] = ax
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_0B01_in_fn0177_0B70:
	bx = bx + cx
	SCZO = cond(bx)
	bl = Mem0[ds:bx + 0x0CE4:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x0002:word16] = ax
	al = Mem0[ds:0x4D1E:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1F:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00BF_113E (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x032C:word16] = ax
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_0B70:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0144
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0012:word16] = ax
	Mem0[ss:bp - 0x0014:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x000E:word16] = ax
	Mem0[ss:bp - 0x0016:word16] = 0x0001
	cl = 0x06
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax << cl
	SCZO = cond(ax)
	cl = Mem0[ds:0x4D1D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0010:word16] = ax
	bx = ax
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	// succ:  l0177_0BB8
l0177_0BB8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2210 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - 0x000B)
	branch Test(NE,Z) l0177_0BEC
	// succ:  l0177_0BC4 l0177_0BEC
l0177_0BC4:
	SCZO = cond(Mem0[ds:0x492E:word16] - 0x0000)
	branch Test(LE,SZO) l0177_0BEC
	// succ:  l0177_0BCB l0177_0BEC
l0177_0BCB:
	bx = Mem0[ss:bp - 0x0010:word16]
	bl = Mem0[ds:bx + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	bl = Mem0[ds:bx + 0x0004:byte]
	bx = bx & 0x007F
	SZO = cond(bx)
	C = false
	SCZO = cond(Mem0[0x0177:bx + 0x18F8:byte] - 0x00)
	branch Test(NE,Z) l0177_0BEC
	// succ:  l0177_0BE9 l0177_0BEC
l0177_0BE9:
l0177_0BEB:
	ax = ax | 0x06C7
	SZO = cond(ax)
	C = false
	// succ:  l0177_18EE l0177_0BEE
l0177_0BEC:
	Mem0[ds:0x0330:word16] = 0x0000
	// succ:  l0177_0BEE
l0177_0BEE:
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0001)
	branch Test(NE,Z) l0177_0BFE
	// succ:  l0177_0BF9 l0177_0BFE
l0177_0BF9:
	call fn00AF_0AD6 (retsize: 4;)
l0177_0BFC:
	SCZO = cond(ax - Mem0[di:word16])
	di = di + 0x0002
	bh = bh + bh
	SCZO = cond(bh)
	// succ:  l0177_0BFE l0177_0BFF
l0177_0BFE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	// succ:  l0177_0BFF
l0177_0BFF:
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = Mem0[ss:bp - 0x0010:word16]
	bl = Mem0[ds:bx + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4960:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0008:word16] = ax
	bx = Mem0[ss:bp - 0x0010:word16]
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2210 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - 0x000B)
	branch Test(EQ,Z) l0177_0C32
	// succ:  l0177_0C2F l0177_0C32
l0177_0C2F:
	goto l0177_16F2
	// succ:  l0177_16F2
l0177_0C32:
	cl = 0x04
	bx = Mem0[ss:bp - 0x0010:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	ax = ax & 0x0010
	SZO = cond(ax)
	C = false
	ax = ax >>u cl
	SCZO = cond(ax)
	di = ax
	v21 = Mem0[ds:bx + 0x0001:byte] & 0xEF
	Mem0[ds:bx + 0x0001:byte] = v21
	SZO = cond(Mem0[ds:bx + 0x0001:byte])
	C = false
	bx = Mem0[ss:bp - 0x0008:word16]
	bl = Mem0[ds:bx + 0x0004:byte]
	bx = bx & 0x007F
	SZO = cond(bx)
	C = false
	bx = bx << 0x0001
	SCZO = cond(bx)
	// succ:  l0177_0C4F
l0177_0C4F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0177:bx + 0x0078:word16]
	call fn0017_1E2E (retsize: 4;)
	sp = sp + 0x0002
	bx = Mem0[ss:bp - 0x0008:word16]
	al = Mem0[ds:bx + 0x0004:byte]
	ax = ax & 0x007F
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0016)
	branch Test(ULE,CZ) l0177_0C6F
	// succ:  l0177_0C6C l0177_0C6F
l0177_0C6C:
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_0C6F:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v23 = ax
	ax = bx
	bx = v23
l0177_0C72_thunk_fn0177_0000:
	call fn0177_0000 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0000:
	call fn0177_0000 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0004:
	call fn0177_0004 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0006:
	call fn0177_0006 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0006:
	call fn0177_0006 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0006:
	call fn0177_0006 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_000A:
	call fn0177_000A (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_000A:
	call fn0177_000A (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0024:
	call fn0177_0024 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_003E:
	call fn0177_003E (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_004F:
	call fn0177_004F (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_008C:
	call fn0177_008C (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_00A0:
	call fn0177_00A0 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_00A0:
	call fn0177_00A0 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_00F7:
	call fn0177_00F7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_00F7:
	call fn0177_00F7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_00F7:
	call fn0177_00F7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_00F7:
	call fn0177_00F7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_00F7:
	call fn0177_00F7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_00F7:
	call fn0177_00F7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_00F7:
	call fn0177_00F7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_00F7:
	call fn0177_00F7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_00F7:
	call fn0177_00F7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0159:
	call fn0177_0159 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0159:
	call fn0177_0159 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0159:
	call fn0177_0159 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0159:
	call fn0177_0159 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0159:
	call fn0177_0159 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0159:
	call fn0177_0159 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_01B8:
	call fn0177_01B8 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_01D7:
	call fn0177_01D7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_01F2:
	call fn0177_01F2 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_022C:
	call fn0177_022C (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_022E:
	call fn0177_022E (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0230:
	call fn0177_0230 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_074B:
	call fn0177_074B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0789:
	call fn0177_0789 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_078B:
	call fn0177_078B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_07E1:
	call fn0177_07E1 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_086D:
	call fn0177_086D (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0A73:
	call fn0177_0A73 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0A74:
	call fn0177_0A74 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0AB8:
	call fn0177_0AB8 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0AB8:
	call fn0177_0AB8 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0AB8:
	call fn0177_0AB8 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0B49:
	call fn0177_0B49 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_0B49:
	call fn0177_0B49 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_19EB:
	call fn0177_19EB (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_3BED:
	call fn0177_3BED (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_3CFE:
	call fn0177_3CFE (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_3CFE:
	call fn0177_3CFE (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_3CFE:
	call fn0177_3CFE (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_3F80:
	call fn0177_3F80 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_3FB8:
	call fn0177_3FB8 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4000:
	call fn0177_4000 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4000:
	call fn0177_4000 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4689:
	call fn0177_4689 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4689:
	call fn0177_4689 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4689:
	call fn0177_4689 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4689:
	call fn0177_4689 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4689:
	call fn0177_4689 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4926:
	call fn0177_4926 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4926:
	call fn0177_4926 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4926:
	call fn0177_4926 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4926:
	call fn0177_4926 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4CEF:
	call fn0177_4CEF (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4CEF:
	call fn0177_4CEF (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4CEF:
	call fn0177_4CEF (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4E8A:
	call fn0177_4E8A (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4E8A:
	call fn0177_4E8A (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4F80:
	call fn0177_4F80 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_4F80:
	call fn0177_4F80 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5000:
	call fn0177_5000 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5000:
	call fn0177_5000 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5000:
	call fn0177_5000 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5000:
	call fn0177_5000 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5000:
	call fn0177_5000 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5000:
	call fn0177_5000 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5000:
	call fn0177_5000 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5001:
	call fn0177_5001 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_52D2:
	call fn0177_52D2 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_55F6:
	call fn0177_55F6 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_59EC:
	call fn0177_59EC (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_59EC:
	call fn0177_59EC (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5E8B:
	call fn0177_5E8B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5E8B:
	call fn0177_5E8B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5E8B:
	call fn0177_5E8B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5E8B:
	call fn0177_5E8B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5E8B:
	call fn0177_5E8B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5E8B:
	call fn0177_5E8B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5E8B:
	call fn0177_5E8B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5E8B:
	call fn0177_5E8B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5E8B:
	call fn0177_5E8B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_5E8B:
	call fn0177_5E8B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_64B8:
	call fn0177_64B8 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_6780:
	call fn0177_6780 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_6780:
	call fn0177_6780 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_6780:
	call fn0177_6780 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_7E89:
	call fn0177_7E89 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_7E89:
	call fn0177_7E89 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_7ED3:
	call fn0177_7ED3 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_7ED3:
	call fn0177_7ED3 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_8004:
	call fn0177_8004 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_8004:
	call fn0177_8004 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_8004:
	call fn0177_8004 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_8004:
	call fn0177_8004 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_80F8:
	call fn0177_80F8 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_80F8:
	call fn0177_80F8 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_80F8:
	call fn0177_80F8 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_80F8:
	call fn0177_80F8 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_80F8:
	call fn0177_80F8 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_80F8:
	call fn0177_80F8 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_80F8:
	call fn0177_80F8 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_80F8:
	call fn0177_80F8 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_9A50:
	call fn0177_9A50 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_9A50:
	call fn0177_9A50 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_9A50:
	call fn0177_9A50 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_9A50:
	call fn0177_9A50 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_9A50:
	call fn0177_9A50 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_9A50:
	call fn0177_9A50 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_9A50:
	call fn0177_9A50 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_9A50:
	call fn0177_9A50 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_9A50:
	call fn0177_9A50 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_9A80:
	call fn0177_9A80 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_9AF0:
	call fn0177_9AF0 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_A2B8:
	call fn0177_A2B8 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_A8EB:
	call fn0177_A8EB (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_B2E9:
	call fn0177_B2E9 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_B802:
	call fn0177_B802 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_B802:
	call fn0177_B802 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_B802:
	call fn0177_B802 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_B802:
	call fn0177_B802 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_B802:
	call fn0177_B802 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_B802:
	call fn0177_B802 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_B805:
	call fn0177_B805 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_B805:
	call fn0177_B805 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_B805:
	call fn0177_B805 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_B880:
	call fn0177_B880 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_B880:
	call fn0177_B880 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_B880:
	call fn0177_B880 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_C00B:
	call fn0177_C00B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_C13B:
	call fn0177_C13B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_C13B:
	call fn0177_C13B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_C13B:
	call fn0177_C13B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_C13B:
	call fn0177_C13B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_C2E9:
	call fn0177_C2E9 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_C8F6:
	call fn0177_C8F6 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_C9F6:
	call fn0177_C9F6 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_D1D2:
	call fn0177_D1D2 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_D1D2:
	call fn0177_D1D2 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_D1E1:
	call fn0177_D1E1 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_D1E1:
	call fn0177_D1E1 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_D1E1:
	call fn0177_D1E1 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_D3FC:
	call fn0177_D3FC (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_D3FC:
	call fn0177_D3FC (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_D9F7:
	call fn0177_D9F7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_E486:
	call fn0177_E486 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F003:
	call fn0177_F003 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F05E:
	call fn0177_F05E (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F05E:
	call fn0177_F05E (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F05E:
	call fn0177_F05E (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F446:
	call fn0177_F446 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F446:
	call fn0177_F446 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F446:
	call fn0177_F446 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F446:
	call fn0177_F446 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F446:
	call fn0177_F446 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F47E:
	call fn0177_F47E (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F47E:
	call fn0177_F47E (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F47E:
	call fn0177_F47E (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F60B:
	call fn0177_F60B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F646:
	call fn0177_F646 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F646:
	call fn0177_F646 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F646:
	call fn0177_F646 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F646:
	call fn0177_F646 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F676:
	call fn0177_F676 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F703:
	call fn0177_F703 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F703:
	call fn0177_F703 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F703:
	call fn0177_F703 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F703:
	call fn0177_F703 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F703:
	call fn0177_F703 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F703:
	call fn0177_F703 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F7E9:
	call fn0177_F7E9 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F85E:
	call fn0177_F85E (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F85E:
	call fn0177_F85E (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F85E:
	call fn0177_F85E (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F85E:
	call fn0177_F85E (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F88B:
	call fn0177_F88B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F88B:
	call fn0177_F88B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F88B:
	call fn0177_F88B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C72_thunk_fn0177_F88B:
	call fn0177_F88B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_0C73:
	call Mem0[ds:bx + 0x0C78:word16] (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_0CA6:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0177_0CC4
	// succ:  l0177_0CAA l0177_0CC4
l0177_0CAA:
	Mem0[ss:bp - 0x000A:word16] = 0x0227
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	di = ax
	di = di + 0x0001
	SZO = cond(di)
	bx = Mem0[ss:bp - 0x0008:word16]
	v3621 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v3621
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	goto l0177_0CF7
	// succ:  l0177_0CF7
l0177_0CC4:
	ax = 0x0190
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	cl = Mem0[ds:0x4CEF:byte]
	ch = ch - ch
	SCZO = cond(ch)
	cx = cx - 0x0078
	SCZO = cond(cx)
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	SCZO = cond(ax - cx)
	branch Test(ULE,CZ) l0177_0CE6
	// succ:  l0177_0CDC l0177_0CE6
l0177_0CDC:
	Mem0[ss:bp - 0x000A:word16] = 0x02C8
	di = di - di
	SCZO = cond(di)
	goto l0177_0CF7
	// succ:  l0177_0CF7
l0177_0CE6:
	Mem0[ss:bp - 0x000A:word16] = 0x02C9
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	di = ax
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l0177_0CF7
l0177_0CF7:
	Mem0[ss:bp - 0x000C:word16] = di
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0177_0D01
	// succ:  l0177_0CFE l0177_0D01
l0177_0CFE:
	goto l0177_1635
	// succ:  l0177_1635
l0177_0D01:
	ax = Mem0[ds:0x4926:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_0D0E
	// succ:  l0177_0D0B l0177_0D0E
l0177_0D0B:
	goto l0177_1635
	// succ:  l0177_1635
l0177_0D0E:
	Mem0[ss:bp - 0x0014:word16] = 0x0159
	cl = Mem0[ss:bp - 0x0004:byte]
	di = di >> cl
	SCZO = cond(di)
	// succ:  l0177_0D18
l0177_0D18:
	Mem0[ss:bp - 0x000C:word16] = di
	goto l0177_1635
	// succ:  l0177_1635
l0177_0D1E:
	bx = Mem0[ss:bp - 0x0008:word16]
	v26 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v26
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	ax = 0x00A0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	cl = Mem0[ds:0x4CEF:byte]
	ch = ch - ch
	SCZO = cond(ch)
	SCZO = cond(ax - cx)
	branch Test(UGE,C) l0177_0D42
	// succ:  l0177_0D38 l0177_0D42
l0177_0D38:
	Mem0[ss:bp - 0x000A:word16] = 0x0232
	goto l0177_0D3D
	// succ:  l0177_0D3D
l0177_0D3C:
	ch = ch + Mem0[ss:bp + di:byte]
	SCZO = cond(ch)
	goto l0177_0D3E
	// succ:  l0177_0D3E
l0177_0D3D:
	di = di - di
	SCZO = cond(di)
l0177_0D3E:
	call ebx (retsize: 4;)
	return
	// succ:  l0177_0D69 fn0177_0B70_exit
l0177_0D42:
	Mem0[ss:bp - 0x000A:word16] = 0x0231
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	di = ax
	di = di + 0x0001
	SZO = cond(di)
	branch Test(EQ,Z) l0177_0D69
	// succ:  l0177_0D55 l0177_0D69
l0177_0D55:
	ax = Mem0[ds:0x4926:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_0D69
	// succ:  l0177_0D5F l0177_0D69
l0177_0D5F:
	Mem0[ss:bp - 0x0014:word16] = 0x0159
	cl = Mem0[ss:bp - 0x0004:byte]
	di = di >> cl
	SCZO = cond(di)
	// succ:  l0177_0D69
l0177_0D69:
	Mem0[ss:bp - 0x0012:word16] = 0x022A
	goto l0177_0D18
	// succ:  l0177_0D18
l0177_0D70:
	bx = Mem0[ss:bp - 0x0008:word16]
	v1949 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v1949
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	call fn01D7_1F96 (retsize: 4;)
	Mem0[ss:bp - 0x000A:word16] = 0x0255
	goto l0177_1635
	// succ:  l0177_1635
l0177_0D84:
	bx = Mem0[ss:bp - 0x0008:word16]
	v3622 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v3622
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	Mem0[ss:bp - 0x000A:word16] = 0x022C
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0016:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0014:word16]
	cx = Mem0[ds:bx + 0x000C:word16]
	dx = Mem0[ds:bx + 0x000E:word16]
	cx = cx << 0x0001
	SCZO = cond(cx)
	v3623 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v3623
	cx = cx << 0x0001
	SCZO = cond(cx)
	v3624 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v3624
	cx = cx << 0x0001
	SCZO = cond(cx)
	v3625 = (dx & 0x0001 << 0x10 - 0x01) != 0x0000
	dx = __rcl(dx, 0x01, C)
	C = v3625
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	si = ax
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	si = si + ax
	SCZO = cond(si)
	Mem0[ss:bp - 0x000C:word16] = si
	goto l0177_1635
	// succ:  l0177_1635
l0177_0DC8:
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	cl = Mem0[ds:0x4CEF:byte]
	ch = ch - ch
	SCZO = cond(ch)
	SCZO = cond(ax - cx)
	branch Test(UGE,C) l0177_0DE4
	// succ:  l0177_0DDB l0177_0DE4
l0177_0DDB:
	Mem0[ss:bp - 0x000A:word16] = 0x0232
	di = di - di
	SCZO = cond(di)
	goto l0177_0E0B
	// succ:  l0177_0E0B
l0177_0DE4:
	Mem0[ss:bp - 0x000A:word16] = 0x0231
	ax = 0x000A
	goto l0177_0DEC
	// succ:  l0177_0DEC
l0177_0DEB:
	v3618 = Mem0[ds:bx - 0x0066 + si:byte] + dl
	Mem0[ds:bx - 0x0066 + si:byte] = v3618
	SCZO = cond(v3618)
	// succ:  l0177_0DEC
l0177_0DEC:
	al = al + 0x03 + C
	SCZO = cond(al)
	SZO = cond(Mem0[ds:bx + si:word16] & 0xF88B)
	C = false
	di = di + 0x0001
	SZO = cond(di)
	branch Test(EQ,Z) l0177_0E0B
	// succ:  l0177_0DF7 l0177_0E0B
l0177_0DF7:
	ax = Mem0[ds:0x4926:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_0E0B
	// succ:  l0177_0E01 l0177_0E0B
l0177_0E01:
	Mem0[ss:bp - 0x0014:word16] = 0x0159
	cl = Mem0[ss:bp - 0x0004:byte]
	di = di >> cl
	SCZO = cond(di)
	// succ:  l0177_0E0B
l0177_0E0B:
	Mem0[ss:bp - 0x0012:word16] = 0x022B
	bx = Mem0[ss:bp - 0x0008:word16]
	v3620 = Mem0[ds:bx + 0x0004:byte] & 0x80
	Mem0[ds:bx + 0x0004:byte] = v3620
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	bx = Mem0[ss:bp - 0x0010:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x22)
	branch Test(NE,Z) l0177_0E2A
	// succ:  l0177_0E1F l0177_0E2A
l0177_0E1F:
	Mem0[ss:bp - 0x000C:word16] = di
	ax = Mem0[ds:bx:word16]
	al = al & 0x23
	SZO = cond(al)
	C = false
	al = al | 0x23
	SZO = cond(al)
	C = false
	goto l0177_0E43
	// succ:  l0177_0E43
l0177_0E2A:
	Mem0[ss:bp - 0x000C:word16] = di
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0118:word16] = ax
	SCZO = cond(al - 0x3D)
	branch Test(NE,Z) l0177_0E3C
	// succ:  l0177_0E37 l0177_0E3C
l0177_0E37:
	ax = 0x003E
	goto l0177_0E3F
	// succ:  l0177_0E3F
l0177_0E3C:
	ax = 0x00A2
	// succ:  l0177_0E3F
l0177_0E3F:
	ah = Mem0[ss:bp - 0x0117:byte]
	// succ:  l0177_0E43
l0177_0E43:
	Mem0[ds:bx:word16] = ax
	bx = Mem0[ss:bp - 0x0010:word16]
	// succ:  l0177_0E48
l0177_0E48:
	v800 = Mem0[ds:bx + 0x0001:byte] & 0xFE
	Mem0[ds:bx + 0x0001:byte] = v800
	SZO = cond(Mem0[ds:bx + 0x0001:byte])
	C = false
	Mem0[ss:bp - 0x000E:word16] = 0x0001
	goto l0177_0E51
	// succ:  l0177_0E51
l0177_0E50:
	cl = cl + ch
	SCZO = cond(cl)
	goto l0177_0E52
	// succ:  l0177_0E52
l0177_0E51:
l0177_0E52:
	cx = cx - 0x0001
	branch Test(EQ,Z) && cx != 0x0000 l0177_0E5B
	// succ:  l0177_1635 l0177_0E54 l0177_0E5B
l0177_0E54:
	bx = Mem0[ss:bp - 0x0008:word16]
	v27 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v27
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	bx = Mem0[ss:bp - 0x0008:word16]
	v4445 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v4445
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	// succ:  l0177_0E5B
l0177_0E5B:
	ax = 0x008C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	cl = Mem0[ds:0x4CEF:byte]
	ch = ch - ch
	SCZO = cond(ch)
	SCZO = cond(ax - cx)
	branch Test(UGE,C) l0177_0E78
	// succ:  l0177_0E6E l0177_0E78
l0177_0E6E:
	si = 0x0232
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	goto l0177_0E88
	// succ:  l0177_0E88
l0177_0E78:
	si = 0x0231
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	// succ:  l0177_0E88
l0177_0E88:
	Mem0[ss:bp - 0x0012:word16] = 0x022F
	goto l0177_0E8D
	// succ:  l0177_0E8D
l0177_0E8A:
	__outb(dx, al)
	C = __das(al, &al)
	cl = cl + Mem0[ds:(bx + 0xF676) + di:byte]
	SCZO = cond(cl)
	goto l0177_0E90
	// succ:  l0177_0E90
l0177_0E8D:
	Mem0[ss:bp - 0x000A:word16] = si
l0177_0E90:
	goto l0177_1635
	// succ:  l0177_1635
l0177_0E94:
	bx = Mem0[ss:bp - 0x0008:word16]
	v1441 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v1441
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	ax = 0x00A0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	cl = Mem0[ds:0x4CEF:byte]
	ch = ch - ch
	SCZO = cond(ch)
	SCZO = cond(ax - cx)
	branch Test(UGE,C) l0177_0EBA
	// succ:  l0177_0EAE l0177_0EBA
l0177_0EAE:
	Mem0[ss:bp - 0x000A:word16] = 0x0232
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	goto l0177_0EE2
	// succ:  l0177_0EE2
l0177_0EBA:
	Mem0[ss:bp - 0x000A:word16] = 0x0231
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_0EE2
	// succ:  l0177_0ED0 l0177_0EE2
l0177_0ED0:
	si = Mem0[ds:0x4926:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0177_0EE2
	// succ:  l0177_0ED8 l0177_0EE2
l0177_0ED8:
	Mem0[ss:bp - 0x0014:word16] = 0x0159
	cx = si
	v1603 = Mem0[ss:bp - 0x000C:word16] >> cl
	Mem0[ss:bp - 0x000C:word16] = v1603
	SCZO = cond(v1603)
	// succ:  l0177_0EE2
l0177_0EE2:
	Mem0[ss:bp - 0x0012:word16] = 0x0229
	goto l0177_1635
	// succ:  l0177_1635
l0177_0EEA:
	Mem0[ss:bp - 0x000A:word16] = 0x0228
	bx = Mem0[ss:bp - 0x0008:word16]
	v1950 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v1950
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_2710 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_0F0A
	// succ:  l0177_0F03 l0177_0F0A
l0177_0F03:
	Mem0[ss:bp - 0x0014:word16] = 0x0159
	goto l0177_0F17
	// succ:  l0177_0F17
l0177_0F0A:
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	// succ:  l0177_0F17
l0177_0F17:
	si = Mem0[ds:0x4918:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0177_0F29
	// succ:  l0177_0F1F l0177_0F29
l0177_0F1F:
	Mem0[ss:bp - 0x0014:word16] = 0x0159
	cx = si
	v1954 = Mem0[ss:bp - 0x000C:word16] >> cl
	Mem0[ss:bp - 0x000C:word16] = v1954
	SCZO = cond(v1954)
	// succ:  l0177_0F29
l0177_0F29:
	bx = Mem0[ss:bp - 0x0008:word16]
	v1959 = Mem0[ds:bx + 0x0004:byte] & 0x80
	Mem0[ds:bx + 0x0004:byte] = v1959
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	bx = Mem0[ss:bp - 0x0010:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x011A:word16] = ax
	SCZO = cond(al - 0x22)
	branch Test(NE,Z) l0177_0F42
	// succ:  l0177_0F3D l0177_0F42
l0177_0F3D:
	ax = 0x0024
	goto l0177_0F45
	// succ:  l0177_0F45
l0177_0F42:
	ax = 0x003F
	// succ:  l0177_0F45
l0177_0F45:
	ah = Mem0[ss:bp - 0x0119:byte]
	// succ:  l0177_0F49
l0177_0F49:
	bx = Mem0[ss:bp - 0x0010:word16]
	Mem0[ds:bx:word16] = ax
	goto l0177_0E48
	// succ:  l0177_0E48
l0177_0F52:
	bx = Mem0[ss:bp - 0x0008:word16]
	v2580 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v2580
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	goto l0177_0F59
	// succ:  l0177_0F59
l0177_0F56:
	di = di - 0x0001
	SZO = cond(di)
	al = al + 0x80
	SCZO = cond(al)
	// succ:  l0177_0F59
l0177_0F59:
	Mem0[ss:bp - 0x000A:word16] = 0x022E
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_2710 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_0F74
	// succ:  l0177_0F6B l0177_0F74
l0177_0F6B:
	Mem0[ss:bp - 0x0014:word16] = 0x0159
	goto l0177_1635
	// succ:  l0177_1635
l0177_0F74:
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000C:word16] = ax
	goto l0177_1635
	// succ:  l0177_1635
l0177_0F84:
	bx = Mem0[ss:bp - 0x0008:word16]
	v3626 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v3626
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	Mem0[ss:bp - 0x000A:word16] = 0x0230
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax + 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	si = Mem0[ds:0x492C:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0177_0FAF
	// succ:  l0177_0FA5 l0177_0FAF
l0177_0FA5:
	Mem0[ss:bp - 0x0014:word16] = 0x0159
	cx = si
	v3627 = Mem0[ss:bp - 0x000C:word16] >> cl
	Mem0[ss:bp - 0x000C:word16] = v3627
	SCZO = cond(v3627)
	// succ:  l0177_0FAF
l0177_0FAF:
	bx = Mem0[ss:bp - 0x0008:word16]
	v3652 = Mem0[ds:bx + 0x0004:byte] & 0x80
	Mem0[ds:bx + 0x0004:byte] = v3652
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	bx = Mem0[ss:bp - 0x0010:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x011C:word16] = ax
	SCZO = cond(al - 0x22)
	branch Test(NE,Z) l0177_0FC8
	// succ:  l0177_0FC3 l0177_0FC8
l0177_0FC3:
	ax = 0x0025
	goto l0177_0FCB
	// succ:  l0177_0FCB
l0177_0FC8:
	ax = 0x0040
	// succ:  l0177_0FCB
l0177_0FCB:
	ah = Mem0[ss:bp - 0x011B:byte]
	goto l0177_0F49
	// succ:  l0177_0F49
l0177_0FD2:
	si = 0x0001
	bx = Mem0[ss:bp - 0x0008:word16]
	v4062 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v4062
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0005)
	branch Test(EQ,Z) l0177_1017
	// succ:  l0177_0FE3 l0177_1017
l0177_0FE3:
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0013)
	branch Test(EQ,Z) l0177_1017
	// succ:  l0177_0FEA l0177_1017
l0177_0FEA:
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_1017
	// succ:  l0177_0FF7 l0177_1017
l0177_0FF7:
	si = 0x0002
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0004)
	branch Test(EQ,Z) l0177_1017
	// succ:  l0177_1001 l0177_1017
l0177_1001:
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0012)
	branch Test(EQ,Z) l0177_1017
	// succ:  l0177_1008 l0177_1017
l0177_1008:
	ax = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_1017
	// succ:  l0177_1014 l0177_1017
l0177_1014:
	si = 0x0003
	// succ:  l0177_1017
l0177_1017:
	bx = Mem0[ss:bp - 0x0010:word16]
	bl = Mem0[ds:bx + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4960:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0016:word16] = 0x0000
	si = si + Mem0[ds:0x0096:word16]
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFFF
	// succ:  l0177_1037
l0177_1037:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00DF_0494 (retsize: 4;)
	sp = sp + 0x0006
	Mem0[ss:bp - 0x000A:word16] = 0x0233
	goto l0177_1635
	// succ:  l0177_1635
l0177_1048:
	ax = 0x022D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	ax = 0x008F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0258
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_070A (retsize: 4;)
	sp = sp + 0x000C
	bx = Mem0[ss:bp - 0x0008:word16]
	v4080 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v4080
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	goto l0177_1635
	// succ:  l0177_1635
l0177_1072:
	bx = Mem0[ss:bp - 0x0008:word16]
	v4253 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v4253
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	Mem0[ss:bp - 0x000A:word16] = 0x022D
	ax = 0x0504
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	ax = Mem0[ds:bx + 0x3D88:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l0177_109A
l0177_109A:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_03E0 (retsize: 4;)
	sp = sp + 0x000C
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	goto l0177_1635
	// succ:  l0177_1635
l0177_10B2:
	bx = Mem0[ss:bp - 0x0008:word16]
	v28 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v28
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	ax = 0x022D
	goto l0177_1226
	// succ:  l0177_1226
l0177_10C0:
	bx = Mem0[ss:bp - 0x0008:word16]
	v876 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v876
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	ax = 0x0230
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x000A:word16] = 0x0231
	Mem0[ss:bp - 0x0012:word16] = 0x0172
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_2710 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_10F2
	// succ:  l0177_10EA l0177_10F2
l0177_10EA:
	Mem0[ss:bp - 0x0014:word16] = 0x0159
	goto l0177_10EF
	// succ:  l0177_10EF
l0177_10EB:
	si = si + 0x0001
	SZO = cond(si)
	al = __inb(dx)
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bx = bx + bp
	SCZO = cond(bx)
	goto l0177_10F0
	// succ:  l0177_10F0
l0177_10EF:
l0177_10F0:
	ax = ax | 0xB890
	SZO = cond(ax)
	C = false
	// succ:  l0177_10FE l0177_10F3
l0177_10F2:
	ax = 0x000A
	// succ:  l0177_10F3
l0177_10F3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000C:word16] = ax
	// succ:  l0177_10FE
l0177_10FE:
	si = Mem0[ds:0x4918:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0177_1110
	// succ:  l0177_1106 l0177_1110
l0177_1106:
	Mem0[ss:bp - 0x0014:word16] = 0x0159
	cx = si
	v1052 = Mem0[ss:bp - 0x000C:word16] >> cl
	Mem0[ss:bp - 0x000C:word16] = v1052
	SCZO = cond(v1052)
	// succ:  l0177_1110
l0177_1110:
	bx = Mem0[ss:bp - 0x0008:word16]
	v1067 = Mem0[ds:bx + 0x0004:byte] & 0x80
	Mem0[ds:bx + 0x0004:byte] = v1067
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	bx = Mem0[ss:bp - 0x0010:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x011E:word16] = ax
	SCZO = cond(al - 0x22)
	branch Test(NE,Z) l0177_112A
	// succ:  l0177_1124 l0177_112A
l0177_1124:
	ax = 0x0024
	goto l0177_112D
	// succ:  l0177_112D
l0177_112A:
	ax = 0x003F
	// succ:  l0177_112D
l0177_112D:
	ah = Mem0[ss:bp - 0x011D:byte]
	goto l0177_0F49
	// succ:  l0177_0F49
l0177_1134:
	bx = Mem0[ss:bp - 0x0008:word16]
	v1442 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v1442
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	ax = 0x0230
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x000A:word16] = 0x0231
	Mem0[ss:bp - 0x0012:word16] = 0x0175
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_2710 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_1166
	// succ:  l0177_115E l0177_1166
l0177_115E:
	Mem0[ss:bp - 0x0014:word16] = 0x0159
	goto l0177_1172
	// succ:  l0177_1172
l0177_1166:
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000C:word16] = ax
	// succ:  l0177_1172
l0177_1172:
	si = Mem0[ds:0x491C:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0177_1184
	// succ:  l0177_117A l0177_1184
l0177_117A:
	Mem0[ss:bp - 0x0014:word16] = 0x0159
	cx = si
	v1602 = Mem0[ss:bp - 0x000C:word16] >> cl
	Mem0[ss:bp - 0x000C:word16] = v1602
	SCZO = cond(v1602)
	// succ:  l0177_1184
l0177_1184:
	bx = Mem0[ss:bp - 0x0008:word16]
	v1607 = Mem0[ds:bx + 0x0004:byte] & 0x80
	Mem0[ds:bx + 0x0004:byte] = v1607
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	bx = Mem0[ss:bp - 0x0010:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0120:word16] = ax
	SCZO = cond(al - 0x22)
	branch Test(NE,Z) l0177_119E
	// succ:  l0177_1198 l0177_119E
l0177_1198:
	ax = 0x0025
	goto l0177_11A1
	// succ:  l0177_11A1
l0177_119E:
	ax = 0x0040
	// succ:  l0177_11A1
l0177_11A1:
	ah = Mem0[ss:bp - 0x011F:byte]
	goto l0177_0F49
	// succ:  l0177_0F49
l0177_11A8:
	bx = Mem0[ss:bp - 0x0008:word16]
	v1909 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v1909
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	ax = 0x0230
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x000A:word16] = 0x0231
	Mem0[ss:bp - 0x0012:word16] = 0x0173
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_2710 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_11DA
	// succ:  l0177_11D2 l0177_11DA
l0177_11D2:
	Mem0[ss:bp - 0x0014:word16] = 0x0159
	goto l0177_11E6
	// succ:  l0177_11E6
l0177_11DA:
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000C:word16] = ax
	// succ:  l0177_11E6
l0177_11E6:
	si = Mem0[ds:0x491A:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0177_11F8
	// succ:  l0177_11EE l0177_11F8
l0177_11EE:
	Mem0[ss:bp - 0x0014:word16] = 0x0159
	cx = si
	v1910 = Mem0[ss:bp - 0x000C:word16] >> cl
	Mem0[ss:bp - 0x000C:word16] = v1910
	SCZO = cond(v1910)
	// succ:  l0177_11F8
l0177_11F8:
	bx = Mem0[ss:bp - 0x0008:word16]
	v1912 = Mem0[ds:bx + 0x0004:byte] & 0x80
	Mem0[ds:bx + 0x0004:byte] = v1912
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	bx = Mem0[ss:bp - 0x0010:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0122:word16] = ax
	SCZO = cond(al - 0x22)
	branch Test(NE,Z) l0177_1212
	// succ:  l0177_120C l0177_1212
l0177_120C:
	ax = 0x0025
	goto l0177_1215
	// succ:  l0177_1215
l0177_1212:
	ax = 0x0040
	// succ:  l0177_1215
l0177_1215:
	ah = Mem0[ss:bp - 0x0121:byte]
	goto l0177_0F49
	// succ:  l0177_0F49
l0177_121C:
	bx = Mem0[ss:bp - 0x0008:word16]
	v1951 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v1951
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	ax = 0x0230
	// succ:  l0177_1226
l0177_1226:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	ax = 0x0040
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0032
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0167_070A (retsize: 4;)
	sp = sp + 0x000C
	ax = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x001E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0040
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFCE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	bx = Mem0[ss:bp - 0x0008:word16]
	al = Mem0[ds:bx + 0x0004:byte]
	al = al & 0x7F
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x0E)
	branch Test(NE,Z) l0177_126E
	// succ:  l0177_126B l0177_126E
l0177_126B:
	goto l0177_1635
	// succ:  l0177_1635
l0177_126E:
	v53 = Mem0[ds:bx + 0x0004:byte] & 0x80
	Mem0[ds:bx + 0x0004:byte] = v53
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	bx = Mem0[ss:bp - 0x0010:word16]
	goto l0177_1275
	// succ:  l0177_1275
l0177_1274:
	__lock()
	// succ:  l0177_1275
l0177_1275:
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0124:word16] = ax
	SCZO = cond(al - 0x22)
	branch Test(NE,Z) l0177_1284
	// succ:  l0177_127F l0177_1284
l0177_127F:
	ax = 0x0025
	goto l0177_1287
	// succ:  l0177_1287
l0177_1284:
	ax = 0x0040
	// succ:  l0177_1287
l0177_1287:
	ah = Mem0[ss:bp - 0x0123:byte]
	goto l0177_0F49
	// succ:  l0177_0F49
l0177_128E:
	bx = Mem0[ss:bp - 0x0008:word16]
	v2027 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v2027
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	Mem0[ss:bp - 0x000A:word16] = 0x0230
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	cx = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	si = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	si = si + ax
	SCZO = cond(si)
	Mem0[ss:bp - 0x000C:word16] = si
	bx = Mem0[ss:bp - 0x0008:word16]
	v2028 = Mem0[ds:bx + 0x0004:byte] & 0x80
	Mem0[ds:bx + 0x0004:byte] = v2028
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	bx = Mem0[ss:bp - 0x0010:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0126:word16] = ax
	SCZO = cond(al - 0x22)
	branch Test(NE,Z) l0177_12CC
	// succ:  l0177_12C7 l0177_12CC
l0177_12C7:
	ax = 0x0025
	goto l0177_12CF
	// succ:  l0177_12CF
l0177_12CC:
	ax = 0x0040
	// succ:  l0177_12CF
l0177_12CF:
	ah = Mem0[ss:bp - 0x0125:byte]
	goto l0177_0F49
	// succ:  l0177_0F49
l0177_12D6:
	bx = Mem0[ss:bp - 0x0008:word16]
	v2581 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v2581
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	ax = 0x0230
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(Mem0[ds:0x4D00:word16] - 0x0000)
	branch Test(EQ,Z) l0177_1314
	// succ:  l0177_12F0 l0177_1314
l0177_12F0:
	ax = 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4D00:word16]
	dx_ax = (int32) ax
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_070A (retsize: 4;)
	sp = sp + 0x000C
	// succ:  l0177_1314
l0177_1314:
	bx = Mem0[ss:bp - 0x0008:word16]
	v2643 = Mem0[ds:bx + 0x0004:byte] & 0x80
	Mem0[ds:bx + 0x0004:byte] = v2643
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	bx = Mem0[ss:bp - 0x0010:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0128:word16] = ax
	SCZO = cond(al - 0x22)
	branch Test(NE,Z) l0177_132E
	// succ:  l0177_1328 l0177_132E
l0177_1328:
	ax = 0x0025
	goto l0177_1331
	// succ:  l0177_1331
l0177_132E:
	ax = 0x0040
	// succ:  l0177_1331
l0177_1331:
	ah = Mem0[ss:bp - 0x0127:byte]
	goto l0177_0F49
	// succ:  l0177_0F49
l0177_1338:
	bx = Mem0[ss:bp - 0x0008:word16]
	v2774 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v2774
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	di = ax
	ax = 0x0230
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	ax = di + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax + 0x000A
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_070A (retsize: 4;)
	sp = sp + 0x000C
	ax = bp - 0x0116
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0033
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x028F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = di + 0x0191
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x0116
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	bx = Mem0[ss:bp - 0x0008:word16]
	v2775 = Mem0[ds:bx + 0x0004:byte] & 0x80
	Mem0[ds:bx + 0x0004:byte] = v2775
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	bx = Mem0[ss:bp - 0x0010:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x012A:word16] = ax
	SCZO = cond(al - 0x22)
	branch Test(NE,Z) l0177_13BC
	// succ:  l0177_13B6 l0177_13BC
l0177_13B6:
	ax = 0x0025
	goto l0177_13BF
	// succ:  l0177_13BF
l0177_13BC:
	ax = 0x0040
	// succ:  l0177_13BF
l0177_13BF:
	ah = Mem0[ss:bp - 0x0129:byte]
	goto l0177_0F49
	// succ:  l0177_0F49
l0177_13C6:
	bx = Mem0[ss:bp - 0x0008:word16]
	v3628 = Mem0[ds:bx + 0x0004:byte] | 0x80
	Mem0[ds:bx + 0x0004:byte] = v3628
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	bx = Mem0[ss:bp - 0x0010:word16]
	bl = Mem0[ds:bx + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4960:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0016:word16] = 0x0000
	ax = Mem0[ds:0x0096:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	goto l0177_1037
	// succ:  l0177_1037
l0177_13F0:
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x0A99:word16]
	Mem0[ss:bp - 0x012C:word16] = ax
	Mem0[ss:bp - 0x012E:word16] = bx
	SCZO = cond(al - 0x1F)
	branch Test(NE,Z) l0177_141C
	// succ:  l0177_1417 l0177_141C
l0177_1417:
	ax = 0x0001
	goto l0177_141F
	// succ:  l0177_141F
l0177_141C:
	ax = 0x0002
	// succ:  l0177_141F
l0177_141F:
	ah = Mem0[ss:bp - 0x012B:byte]
	Mem0[ds:bx + 0x0A99:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0003
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0003
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0048
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn01AF_12A6 (retsize: 4;)
	sp = sp + 0x000A
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x0A9F:word16]
	Mem0[ss:bp - 0x0130:word16] = ax
	Mem0[ss:bp - 0x0132:word16] = bx
	SCZO = cond(al - 0x1F)
	branch Test(NE,Z) l0177_1476
	// succ:  l0177_1471 l0177_1476
l0177_1471:
	ax = 0x0001
	goto l0177_1479
	// succ:  l0177_1479
l0177_1476:
	ax = 0x0002
	// succ:  l0177_1479
l0177_1479:
	ah = Mem0[ss:bp - 0x012F:byte]
	Mem0[ds:bx + 0x0A9F:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0003
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0047
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0001
	goto l0177_149C
	// succ:  l0177_149C
l0177_149A:
	v2201 = Mem0[ds:bx + si:word16] + ax
	Mem0[ds:bx + si:word16] = v2201
	SCZO = cond(v2201)
	// succ:  l0177_149C
l0177_149C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn01AF_12A6 (retsize: 4;)
	sp = sp + 0x000A
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x0AA5:word16]
	Mem0[ss:bp - 0x0134:word16] = ax
	Mem0[ss:bp - 0x0136:word16] = bx
	SCZO = cond(al - 0x1F)
	branch Test(NE,Z) l0177_14CE
	// succ:  l0177_14C9 l0177_14CE
l0177_14C9:
	ax = 0x0001
	goto l0177_14D1
	// succ:  l0177_14D1
l0177_14CE:
	ax = 0x0002
	// succ:  l0177_14D1
l0177_14D1:
	ah = Mem0[ss:bp - 0x0133:byte]
	Mem0[ds:bx + 0x0AA5:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0003
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0048
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn01AF_12A6 (retsize: 4;)
	sp = sp + 0x000A
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x0F1F:word16]
	Mem0[ss:bp - 0x0138:word16] = ax
	Mem0[ss:bp - 0x013A:word16] = bx
	SCZO = cond(al - 0x1F)
	branch Test(NE,Z) l0177_1526
	// succ:  l0177_1521 l0177_1526
l0177_1521:
	ax = 0x0001
	goto l0177_1529
	// succ:  l0177_1529
l0177_1526:
	ax = 0x0002
	// succ:  l0177_1529
l0177_1529:
	ah = Mem0[ss:bp - 0x0137:byte]
	Mem0[ds:bx + 0x0F1F:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + 0x0003
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0047
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn01AF_12A6 (retsize: 4;)
	sp = sp + 0x000A
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x0F25:word16]
	Mem0[ss:bp - 0x013C:word16] = ax
	Mem0[ss:bp - 0x013E:word16] = bx
	SCZO = cond(al - 0x1F)
	branch Test(NE,Z) l0177_157E
	// succ:  l0177_1579 l0177_157E
l0177_1579:
	ax = 0x0001
	goto l0177_1581
	// succ:  l0177_1581
l0177_157E:
	ax = 0x0002
	// succ:  l0177_1581
l0177_1581:
	ah = Mem0[ss:bp - 0x013B:byte]
	Mem0[ds:bx + 0x0F25:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + 0x0003
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0048
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn01AF_12A6 (retsize: 4;)
	sp = sp + 0x000A
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x0F2B:word16]
	Mem0[ss:bp - 0x0140:word16] = ax
	Mem0[ss:bp - 0x0142:word16] = bx
	SCZO = cond(al - 0x1F)
	branch Test(NE,Z) l0177_15D6
	// succ:  l0177_15D1 l0177_15D6
l0177_15D1:
	ax = 0x0001
	goto l0177_15D9
	// succ:  l0177_15D9
l0177_15D6:
	ax = 0x0002
	// succ:  l0177_15D9
l0177_15D9:
	ah = Mem0[ss:bp - 0x013F:byte]
	Mem0[ds:bx + 0x0F2B:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + 0x0003
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + 0x0003
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0047
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01AF_12A6 (retsize: 4;)
	sp = sp + 0x000A
	bx = Mem0[ss:bp - 0x0008:word16]
	v2620 = Mem0[ds:bx + 0x0004:byte] & 0x80
	Mem0[ds:bx + 0x0004:byte] = v2620
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	bx = Mem0[ss:bp - 0x0010:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0144:word16] = ax
	SCZO = cond(al - 0x22)
	branch Test(NE,Z) l0177_161E
	// succ:  l0177_1618 l0177_161E
l0177_1618:
	ax = 0x0025
	goto l0177_1621
	// succ:  l0177_1621
l0177_161E:
	ax = 0x0040
	// succ:  l0177_1621
l0177_1621:
	ah = Mem0[ss:bp - 0x0143:byte]
	Mem0[ds:bx:word16] = ax
	v2637 = Mem0[ds:bx + 0x0001:byte] & 0xFE
	Mem0[ds:bx + 0x0001:byte] = v2637
	SZO = cond(Mem0[ds:bx + 0x0001:byte])
	C = false
	Mem0[ss:bp - 0x000E:word16] = 0x0001
	Mem0[ss:bp - 0x000A:word16] = 0x03F9
	// succ:  l0177_1635
l0177_1635:
	SCZO = cond(Mem0[ss:bp - 0x0012:word16] - 0x0000)
	branch Test(EQ,Z) l0177_1664
	// succ:  l0177_163B l0177_1664
l0177_163B:
	ax = bp - 0x0116
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x002E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x0116
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	goto l0177_1675
	// succ:  l0177_1675
l0177_1664:
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0000)
	branch Test(EQ,Z) l0177_1675
	// succ:  l0177_166A l0177_1675
l0177_166A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0177_1675
l0177_1675:
	SCZO = cond(Mem0[ss:bp - 0x0014:word16] - 0x0000)
	goto l0177_1679
	// succ:  l0177_1679
l0177_1677:
	al = __inb(dx)
	v4173 = Mem0[ds:si + 0x000B:byte] + dh
	Mem0[ds:si + 0x000B:byte] = v4173
	SCZO = cond(v4173)
	goto l0177_167B
	// succ:  l0177_167B
l0177_1679:
	branch Test(EQ,Z) l0177_1686
	// succ:  l0177_167B l0177_1686
l0177_167B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0177_1686
l0177_1686:
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l0177_169D
	// succ:  l0177_168C l0177_169D
l0177_168C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	bx = Mem0[ss:bp - 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0444:word16]
	call fn018F_268A (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0177_169D
l0177_169D:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(NE,Z) l0177_16A6
	// succ:  l0177_16A3 l0177_16A6
l0177_16A3:
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_16A6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	call fn0177_1A2A (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_16DD
	// succ:  l0177_16B1 l0177_16DD
l0177_16B1:
	bx = Mem0[ss:bp - 0x0010:word16]
	bl = Mem0[ds:bx + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4960:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = Mem0[ss:bp - 0x0010:word16]
	al = Mem0[ds:bx + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_0196 (retsize: 2;)
	sp = sp + 0x0002
	bx = Mem0[ss:bp - 0x0010:word16]
	Mem0[ds:bx + 0x0002:byte] = 0x00
	Mem0[ss:bp - 0x0016:word16] = 0x0000
	// succ:  l0177_16DD
l0177_16DD:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_16F2:
	di = Mem0[ss:bp - 0x0008:word16]
	SZO = cond(Mem0[ds:di + 0x0005:byte] & 0xFC)
	C = false
	branch Test(NE,Z) l0177_16FE
	// succ:  l0177_16FB l0177_16FE
l0177_16FB:
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_16FE:
	al = Mem0[ds:di + 0x0005:byte]
	al = al >>u 0x01
	SCZO = cond(al)
	al = al >>u 0x01
	SCZO = cond(al)
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0012)
	branch Test(ULE,CZ) l0177_1710
	// succ:  l0177_170D l0177_1710
l0177_170D:
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_1710:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v24 = ax
	ax = bx
	bx = v24
l0177_1713_thunk_fn0177_0000:
	call fn0177_0000 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_0000:
	call fn0177_0000 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_0001:
	call fn0177_0001 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_0001:
	call fn0177_0001 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_0002:
	call fn0177_0002 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_0006:
	call fn0177_0006 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_0006:
	call fn0177_0006 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_003C:
	call fn0177_003C (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_00CF:
	call fn0177_00CF (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_00F7:
	call fn0177_00F7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_00F7:
	call fn0177_00F7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_0159:
	call fn0177_0159 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_0167:
	call fn0177_0167 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_0277:
	call fn0177_0277 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_027C:
	call fn0177_027C (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_02A1:
	call fn0177_02A1 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_20E9:
	call fn0177_20E9 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_38CC:
	call fn0177_38CC (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_394D:
	call fn0177_394D (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_4CFE:
	call fn0177_4CFE (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_4D1C:
	call fn0177_4D1C (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_4EAE:
	call fn0177_4EAE (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_5001:
	call fn0177_5001 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_50C0:
	call fn0177_50C0 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_50C0:
	call fn0177_50C0 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_50C0:
	call fn0177_50C0 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_50C0:
	call fn0177_50C0 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_57FE:
	call fn0177_57FE (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_5E8B:
	call fn0177_5E8B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_5E8B:
	call fn0177_5E8B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_5F8A:
	call fn0177_5F8A (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_60B7:
	call fn0177_60B7 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_63E8:
	call fn0177_63E8 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_68E9:
	call fn0177_68E9 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_6B06:
	call fn0177_6B06 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_8000:
	call fn0177_8000 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_8003:
	call fn0177_8003 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_80E9:
	call fn0177_80E9 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_80F0:
	call fn0177_80F0 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_9A00:
	call fn0177_9A00 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_9A49:
	call fn0177_9A49 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_9A50:
	call fn0177_9A50 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_9A50:
	call fn0177_9A50 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_A000:
	call fn0177_A000 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_A050:
	call fn0177_A050 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_AE36:
	call fn0177_AE36 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_B6E9:
	call fn0177_B6E9 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_B806:
	call fn0177_B806 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_B84D:
	call fn0177_B84D (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_C00B:
	call fn0177_C00B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_C02B:
	call fn0177_C02B (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_C1E8:
	call fn0177_C1E8 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_CEE9:
	call fn0177_CEE9 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_CF02:
	call fn0177_CF02 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_CF02:
	call fn0177_CF02 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_CF02:
	call fn0177_CF02 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_CF02:
	call fn0177_CF02 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_D1FF:
	call fn0177_D1FF (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_D6E9:
	call fn0177_D6E9 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_E42A:
	call fn0177_E42A (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_E42A:
	call fn0177_E42A (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_E480:
	call fn0177_E480 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_EE6A:
	call fn0177_EE6A (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_EE84:
	call fn0177_EE84 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_EF02:
	call fn0177_EF02 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_EF70:
	call fn0177_EF70 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_EF78:
	call fn0177_EF78 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_F05E:
	call fn0177_F05E (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_F05E:
	call fn0177_F05E (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn0177_F1E9:
	call fn0177_F1E9 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_1713_thunk_fn018F_17C6:
	call fn018F_17C6 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_173E:
	sp = sp - 0x0002
	call fn0177_022E (retsize: 2;)
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_1746:
	sp = sp - 0x0002
	call fn0177_02B4 (retsize: 2;)
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_174E:
	sp = sp - 0x0002
	call fn0177_06C2 (retsize: 2;)
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_1756:
	sp = sp - 0x0002
	call fn0177_065C (retsize: 2;)
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_175E:
	sp = sp - 0x0002
	call fn0177_059C (retsize: 2;)
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_1766:
	sp = sp - 0x0002
	call fn0177_06E2 (retsize: 2;)
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_176E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_177C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0006:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_1AEE (retsize: 2;)
	sp = sp + 0x0006
	goto l0177_1799
	// succ:  l0177_1799
l0177_178E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0177_1799
l0177_1799:
	v2869 = Mem0[ds:di + 0x0005:byte] & 0x03
	Mem0[ds:di + 0x0005:byte] = v2869
	SZO = cond(Mem0[ds:di + 0x0005:byte])
	C = false
	Mem0[ds:di + 0x0006:word16] = 0x0000
	bx = Mem0[ss:bp - 0x0010:word16]
	v2870 = Mem0[ds:bx + 0x0001:byte] & 0xFE
	Mem0[ds:bx + 0x0001:byte] = v2870
	SZO = cond(Mem0[ds:bx + 0x0001:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn0177_1A2A (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_17B5
	// succ:  l0177_17B2 l0177_17B5
l0177_17B2:
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_17B5:
	bx = Mem0[ss:bp - 0x0010:word16]
	bl = Mem0[ds:bx + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4960:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = Mem0[ss:bp - 0x0010:word16]
	al = Mem0[ds:bx + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_0196 (retsize: 2;)
	sp = sp + 0x0002
	bx = Mem0[ss:bp - 0x0010:word16]
	Mem0[ds:bx + 0x0002:byte] = 0x00
	goto l0177_18D0
	// succ:  l0177_18D0
l0177_17E0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	ax = Mem0[ds:di + 0x0004:word16]
	ah = ah & 0x03
	SZO = cond(ah)
	C = false
	ah = ah | 0x38
	SZO = cond(ah)
	C = false
	Mem0[ds:di + 0x0004:word16] = ax
	Mem0[ds:di + 0x0006:word16] = 0x0000
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_1800:
	sp = sp - 0x0002
	call fn0177_0618 (retsize: 2;)
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_1808:
	sp = sp - 0x0002
	call fn0177_063A (retsize: 2;)
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_1810:
	sp = sp - 0x0002
	call fn0177_067E (retsize: 2;)
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_1818:
	sp = sp - 0x0002
	call fn0177_06A0 (retsize: 2;)
	goto l0177_18D5
	// succ:  l0177_18D5
l0177_1820:
	SCZO = cond(Mem0[ds:di + 0x0006:word16] - 0x036B)
	branch Test(NE,Z) l0177_1872
	// succ:  l0177_1827 l0177_1872
l0177_1827:
	v4220 = Mem0[ds:0x3CFA:word16] + 0x2F00
	Mem0[ds:0x3CFA:word16] = v4220
	SCZO = cond(v4220)
	v4221 = Mem0[ds:0x3CFC:word16] + 0x0D + C
	Mem0[ds:0x3CFC:word16] = v4221
	SCZO = cond(v4221)
	v4222 = Mem0[ds:0x4C52:byte] + 0x01
	Mem0[ds:0x4C52:byte] = v4222
	SZO = cond(v4222)
	// succ:  l0177_1836
l0177_1836:
	si = 0x0018
	// succ:  l0177_1839
l0177_1839:
	call fn00F7_0F56 (retsize: 4;)
	ax = Mem0[ds:0x4D02:word16]
	SCZO = cond(Mem0[ds:0x4D00:word16] - ax)
	branch Test(GE,SO) l0177_1854
	// succ:  l0177_1847 l0177_1854
l0177_1847:
	v3644 = Mem0[ds:0x4D00:word16] + 0x0001
	Mem0[ds:0x4D00:word16] = v3644
	SZO = cond(v3644)
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0177_1854
l0177_1854:
	si = si - 0x0001
	SZO = cond(si)
	branch Test(NE,Z) l0177_1839
	// succ:  l0177_1857 l0177_1839
l0177_1857:
	ax = Mem0[ds:0x4CFE:word16]
	Mem0[ds:0x4CFC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0006:word16]
	ax = 0x0157
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D72 (retsize: 4;)
	sp = sp + 0x0008
	goto l0177_187D
	// succ:  l0177_187D
l0177_1872:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0177_187D
l0177_187D:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00DF_097A (retsize: 4;)
	sp = sp + 0x0004
	si = ax
	bx = Mem0[ds:0x0096:word16]
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx + si
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x3D94:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	al = Mem0[ds:bx + 0x3D95:byte]
	si = ax
	bx = Mem0[ss:bp - 0x0010:word16]
	bl = Mem0[ds:bx + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4960:word16]
	goto l0177_18BF
	// succ:  l0177_18BF
l0177_18BE:
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0177_18BF
l0177_18BF:
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00DF_0494 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l0177_18D0
l0177_18D0:
	Mem0[ss:bp - 0x0016:word16] = 0x0000
	// succ:  l0177_18D5
l0177_18D5:
	SCZO = cond(Mem0[ss:bp - 0x0016:word16] - 0x0000)
	branch Test(EQ,Z) l0177_18EE
	// succ:  l0177_18DB l0177_18EE
l0177_18DB:
	bx = Mem0[ss:bp - 0x0010:word16]
	bl = Mem0[ds:bx + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4960:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0177_18EE
l0177_18EE:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_1D72:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	dh = dh + Mem0[ds:bx + 0x0002:byte]
	SCZO = cond(dh)
	// succ:  l0177_1D73_thunk_fn0177_1D76
l0177_1D73_thunk_fn0177_1D76:
	call fn0177_1D76 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_2324:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cx = cx - 0x0001
	SZO = cond(cx)
	// succ:  l0177_2325_thunk_fn0177_2318
l0177_2325_thunk_fn0177_2318:
	call fn0177_2318 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_27EB:
	v550 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v550
	SCZO = cond(v550)
	v551 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v551
	SCZO = cond(v551)
	v552 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v552
	SCZO = cond(v552)
	v553 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v553
	SCZO = cond(v553)
	v554 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v554
	SCZO = cond(v554)
	v555 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v555
	SCZO = cond(v555)
	goto l0177_27F7
	// succ:  l0177_27F7
l0177_27F6:
	v4223 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4223
	SCZO = cond(v4223)
	goto l0177_27F8
	// succ:  l0177_27F8
l0177_27F7:
	v611 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v611
	SCZO = cond(v611)
	// succ:  l0177_27F8
l0177_27F8:
	v612 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v612
	SCZO = cond(v612)
	v613 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v613
	SCZO = cond(v613)
	v614 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v614
	SCZO = cond(v614)
	v615 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v615
	SCZO = cond(v615)
	v616 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v616
	SCZO = cond(v616)
	v617 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v617
	SCZO = cond(v617)
	v618 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v618
	SCZO = cond(v618)
	v619 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v619
	SCZO = cond(v619)
	v620 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v620
	SCZO = cond(v620)
	v621 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v621
	SCZO = cond(v621)
	v622 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v622
	SCZO = cond(v622)
	v623 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v623
	SCZO = cond(v623)
	v624 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v624
	SCZO = cond(v624)
	v625 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v625
	SCZO = cond(v625)
	v626 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v626
	SCZO = cond(v626)
	v627 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v627
	SCZO = cond(v627)
	v628 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v628
	SCZO = cond(v628)
	v629 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v629
	SCZO = cond(v629)
	v630 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v630
	SCZO = cond(v630)
	v631 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v631
	SCZO = cond(v631)
	v632 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v632
	SCZO = cond(v632)
	v633 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v633
	SCZO = cond(v633)
	v634 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v634
	SCZO = cond(v634)
	v635 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v635
	SCZO = cond(v635)
	v636 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v636
	SCZO = cond(v636)
	v637 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v637
	SCZO = cond(v637)
	v638 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v638
	SCZO = cond(v638)
	v639 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v639
	SCZO = cond(v639)
	v640 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v640
	SCZO = cond(v640)
	v641 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v641
	SCZO = cond(v641)
	v642 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v642
	SCZO = cond(v642)
	v643 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v643
	SCZO = cond(v643)
	v644 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v644
	SCZO = cond(v644)
	v645 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v645
	SCZO = cond(v645)
	v646 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v646
	SCZO = cond(v646)
	v647 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v647
	SCZO = cond(v647)
	v648 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v648
	SCZO = cond(v648)
	v649 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v649
	SCZO = cond(v649)
	v650 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v650
	SCZO = cond(v650)
	v651 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v651
	SCZO = cond(v651)
	v652 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v652
	SCZO = cond(v652)
	v653 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v653
	SCZO = cond(v653)
	v654 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v654
	SCZO = cond(v654)
	v655 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v655
	SCZO = cond(v655)
	v656 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v656
	SCZO = cond(v656)
	v657 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v657
	SCZO = cond(v657)
	v658 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v658
	SCZO = cond(v658)
	v659 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v659
	SCZO = cond(v659)
	v660 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v660
	SCZO = cond(v660)
	v661 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v661
	SCZO = cond(v661)
	v662 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v662
	SCZO = cond(v662)
	v663 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v663
	SCZO = cond(v663)
	v664 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v664
	SCZO = cond(v664)
	v665 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v665
	SCZO = cond(v665)
	v666 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v666
	SCZO = cond(v666)
	v667 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v667
	SCZO = cond(v667)
	v668 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v668
	SCZO = cond(v668)
	v669 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v669
	SCZO = cond(v669)
	v670 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v670
	SCZO = cond(v670)
	v671 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v671
	SCZO = cond(v671)
	v672 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v672
	SCZO = cond(v672)
	v673 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v673
	SCZO = cond(v673)
	v674 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v674
	SCZO = cond(v674)
	v675 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v675
	SCZO = cond(v675)
	v676 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v676
	SCZO = cond(v676)
	v677 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v677
	SCZO = cond(v677)
	v678 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v678
	SCZO = cond(v678)
	v679 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v679
	SCZO = cond(v679)
	v680 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v680
	SCZO = cond(v680)
	v681 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v681
	SCZO = cond(v681)
	v682 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v682
	SCZO = cond(v682)
	v683 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v683
	SCZO = cond(v683)
	v684 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v684
	SCZO = cond(v684)
	v685 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v685
	SCZO = cond(v685)
	v686 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v686
	SCZO = cond(v686)
	v687 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v687
	SCZO = cond(v687)
	v688 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v688
	SCZO = cond(v688)
	v689 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v689
	SCZO = cond(v689)
	v690 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v690
	SCZO = cond(v690)
	v691 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v691
	SCZO = cond(v691)
	v692 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v692
	SCZO = cond(v692)
	v693 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v693
	SCZO = cond(v693)
	v694 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v694
	SCZO = cond(v694)
	v695 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v695
	SCZO = cond(v695)
	v696 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v696
	SCZO = cond(v696)
	v697 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v697
	SCZO = cond(v697)
	v698 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v698
	SCZO = cond(v698)
	v699 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v699
	SCZO = cond(v699)
	v700 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v700
	SCZO = cond(v700)
	v701 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v701
	SCZO = cond(v701)
	v702 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v702
	SCZO = cond(v702)
	v703 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v703
	SCZO = cond(v703)
	v704 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v704
	SCZO = cond(v704)
	v705 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v705
	SCZO = cond(v705)
	v706 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v706
	SCZO = cond(v706)
	v707 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v707
	SCZO = cond(v707)
	v708 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v708
	SCZO = cond(v708)
	v709 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v709
	SCZO = cond(v709)
	v710 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v710
	SCZO = cond(v710)
	v711 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v711
	SCZO = cond(v711)
	v712 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v712
	SCZO = cond(v712)
	v713 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v713
	SCZO = cond(v713)
	v714 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v714
	SCZO = cond(v714)
	v715 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v715
	SCZO = cond(v715)
	v716 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v716
	SCZO = cond(v716)
	v717 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v717
	SCZO = cond(v717)
	v718 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v718
	SCZO = cond(v718)
	v719 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v719
	SCZO = cond(v719)
	v720 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v720
	SCZO = cond(v720)
	v721 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v721
	SCZO = cond(v721)
	v722 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v722
	SCZO = cond(v722)
	v723 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v723
	SCZO = cond(v723)
	v724 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v724
	SCZO = cond(v724)
	v725 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v725
	SCZO = cond(v725)
	v726 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v726
	SCZO = cond(v726)
	v727 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v727
	SCZO = cond(v727)
	v728 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v728
	SCZO = cond(v728)
	v729 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v729
	SCZO = cond(v729)
	v730 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v730
	SCZO = cond(v730)
	v731 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v731
	SCZO = cond(v731)
	v732 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v732
	SCZO = cond(v732)
	// succ:  l0177_28EB
l0177_28EB:
	v2288 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2288
	SCZO = cond(v2288)
	v2289 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2289
	SCZO = cond(v2289)
	v2290 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2290
	SCZO = cond(v2290)
	v2291 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2291
	SCZO = cond(v2291)
	v2292 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2292
	SCZO = cond(v2292)
	v2293 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2293
	SCZO = cond(v2293)
	goto l0177_28F7
	// succ:  l0177_28F7
l0177_28F6:
	v2867 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2867
	SCZO = cond(v2867)
	goto l0177_28F8
	// succ:  l0177_28F8
l0177_28F7:
	v2446 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2446
	SCZO = cond(v2446)
	// succ:  l0177_28F8
l0177_28F8:
	v2447 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2447
	SCZO = cond(v2447)
	v2448 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2448
	SCZO = cond(v2448)
	v2449 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2449
	SCZO = cond(v2449)
	v2450 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2450
	SCZO = cond(v2450)
	v2451 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2451
	SCZO = cond(v2451)
	v2452 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2452
	SCZO = cond(v2452)
	v2453 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2453
	SCZO = cond(v2453)
	v2454 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2454
	SCZO = cond(v2454)
	v2455 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2455
	SCZO = cond(v2455)
	v2456 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2456
	SCZO = cond(v2456)
	v2457 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2457
	SCZO = cond(v2457)
	v2458 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2458
	SCZO = cond(v2458)
	v2459 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2459
	SCZO = cond(v2459)
	v2460 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2460
	SCZO = cond(v2460)
	v2461 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2461
	SCZO = cond(v2461)
	v2462 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2462
	SCZO = cond(v2462)
	v2463 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2463
	SCZO = cond(v2463)
	v2464 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2464
	SCZO = cond(v2464)
	v2465 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2465
	SCZO = cond(v2465)
	v2466 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2466
	SCZO = cond(v2466)
	v2467 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2467
	SCZO = cond(v2467)
	v2468 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2468
	SCZO = cond(v2468)
	v2469 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2469
	SCZO = cond(v2469)
	v2470 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2470
	SCZO = cond(v2470)
	v2471 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2471
	SCZO = cond(v2471)
	v2472 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2472
	SCZO = cond(v2472)
	v2473 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2473
	SCZO = cond(v2473)
	v2474 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2474
	SCZO = cond(v2474)
	v2475 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2475
	SCZO = cond(v2475)
	v2476 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2476
	SCZO = cond(v2476)
	v2477 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2477
	SCZO = cond(v2477)
	v2478 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2478
	SCZO = cond(v2478)
	v2479 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2479
	SCZO = cond(v2479)
	v2480 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2480
	SCZO = cond(v2480)
	v2481 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2481
	SCZO = cond(v2481)
	v2482 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2482
	SCZO = cond(v2482)
	v2483 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2483
	SCZO = cond(v2483)
	v2484 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2484
	SCZO = cond(v2484)
	v2485 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2485
	SCZO = cond(v2485)
	v2486 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2486
	SCZO = cond(v2486)
	v2487 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2487
	SCZO = cond(v2487)
	v2488 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2488
	SCZO = cond(v2488)
	v2489 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2489
	SCZO = cond(v2489)
	v2490 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2490
	SCZO = cond(v2490)
	v2491 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2491
	SCZO = cond(v2491)
	v2492 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2492
	SCZO = cond(v2492)
	v2493 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2493
	SCZO = cond(v2493)
	v2494 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2494
	SCZO = cond(v2494)
	v2495 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2495
	SCZO = cond(v2495)
	v2496 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2496
	SCZO = cond(v2496)
	v2497 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2497
	SCZO = cond(v2497)
	v2498 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2498
	SCZO = cond(v2498)
	v2499 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2499
	SCZO = cond(v2499)
	v2500 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2500
	SCZO = cond(v2500)
	v2501 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2501
	SCZO = cond(v2501)
	v2502 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2502
	SCZO = cond(v2502)
	v2503 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2503
	SCZO = cond(v2503)
	v2504 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2504
	SCZO = cond(v2504)
	v2505 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2505
	SCZO = cond(v2505)
	v2506 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2506
	SCZO = cond(v2506)
	v2507 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2507
	SCZO = cond(v2507)
	v2508 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2508
	SCZO = cond(v2508)
	v2509 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2509
	SCZO = cond(v2509)
	v2510 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2510
	SCZO = cond(v2510)
	v2511 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2511
	SCZO = cond(v2511)
	v2512 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2512
	SCZO = cond(v2512)
	v2513 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2513
	SCZO = cond(v2513)
	v2514 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2514
	SCZO = cond(v2514)
	v2515 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2515
	SCZO = cond(v2515)
	v2516 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2516
	SCZO = cond(v2516)
	v2517 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2517
	SCZO = cond(v2517)
	v2518 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2518
	SCZO = cond(v2518)
	v2519 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2519
	SCZO = cond(v2519)
	v2520 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2520
	SCZO = cond(v2520)
	v2521 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2521
	SCZO = cond(v2521)
	v2522 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2522
	SCZO = cond(v2522)
	v2523 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2523
	SCZO = cond(v2523)
	v2524 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2524
	SCZO = cond(v2524)
	v2525 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2525
	SCZO = cond(v2525)
	v2526 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2526
	SCZO = cond(v2526)
	v2527 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2527
	SCZO = cond(v2527)
	v2528 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2528
	SCZO = cond(v2528)
	v2529 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2529
	SCZO = cond(v2529)
	v2530 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2530
	SCZO = cond(v2530)
	v2531 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2531
	SCZO = cond(v2531)
	v2532 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2532
	SCZO = cond(v2532)
	v2533 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2533
	SCZO = cond(v2533)
	v2534 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2534
	SCZO = cond(v2534)
	v2535 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2535
	SCZO = cond(v2535)
	v2536 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2536
	SCZO = cond(v2536)
	v2537 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2537
	SCZO = cond(v2537)
	v2538 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2538
	SCZO = cond(v2538)
	v2539 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2539
	SCZO = cond(v2539)
	v2540 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2540
	SCZO = cond(v2540)
	v2541 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2541
	SCZO = cond(v2541)
	v2542 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2542
	SCZO = cond(v2542)
	v2543 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2543
	SCZO = cond(v2543)
	v2544 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2544
	SCZO = cond(v2544)
	v2545 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2545
	SCZO = cond(v2545)
	v2546 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2546
	SCZO = cond(v2546)
	v2547 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2547
	SCZO = cond(v2547)
	v2548 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2548
	SCZO = cond(v2548)
	v2549 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2549
	SCZO = cond(v2549)
	v2550 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2550
	SCZO = cond(v2550)
	v2551 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2551
	SCZO = cond(v2551)
	v2552 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2552
	SCZO = cond(v2552)
	v2553 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2553
	SCZO = cond(v2553)
	v2554 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2554
	SCZO = cond(v2554)
	v2555 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2555
	SCZO = cond(v2555)
	v2556 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2556
	SCZO = cond(v2556)
	v2557 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2557
	SCZO = cond(v2557)
	v2558 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2558
	SCZO = cond(v2558)
	v2559 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2559
	SCZO = cond(v2559)
	v2560 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2560
	SCZO = cond(v2560)
	v2561 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2561
	SCZO = cond(v2561)
	v2562 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2562
	SCZO = cond(v2562)
	v2563 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2563
	SCZO = cond(v2563)
	v2564 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2564
	SCZO = cond(v2564)
	v2565 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2565
	SCZO = cond(v2565)
	v2566 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2566
	SCZO = cond(v2566)
	v2567 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2567
	SCZO = cond(v2567)
	v2568 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2568
	SCZO = cond(v2568)
	v2569 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2569
	SCZO = cond(v2569)
	goto l0177_29EF
	// succ:  l0177_29EF
l0177_29EE:
	v2693 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2693
	SCZO = cond(v2693)
	goto l0177_29F0
	// succ:  l0177_29F0
l0177_29EF:
	v2570 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2570
	SCZO = cond(v2570)
	// succ:  l0177_29F0
l0177_29F0:
	v2571 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2571
	SCZO = cond(v2571)
	v2572 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2572
	SCZO = cond(v2572)
	v2573 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2573
	SCZO = cond(v2573)
	v2574 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2574
	SCZO = cond(v2574)
	v2575 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2575
	SCZO = cond(v2575)
	v2576 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2576
	SCZO = cond(v2576)
	v2577 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2577
	SCZO = cond(v2577)
	v2578 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2578
	SCZO = cond(v2578)
	v2579 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2579
	SCZO = cond(v2579)
	goto l0177_2A03
	// succ:  l0177_2A03
l0177_2A02:
	v556 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v556
	SCZO = cond(v556)
	// succ:  l0177_2A03
l0177_2A03:
	v557 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v557
	SCZO = cond(v557)
	v558 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v558
	SCZO = cond(v558)
	v559 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v559
	SCZO = cond(v559)
	v560 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v560
	SCZO = cond(v560)
	v561 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v561
	SCZO = cond(v561)
	v562 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v562
	SCZO = cond(v562)
	v563 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v563
	SCZO = cond(v563)
	v564 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v564
	SCZO = cond(v564)
	v565 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v565
	SCZO = cond(v565)
	v566 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v566
	SCZO = cond(v566)
	v567 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v567
	SCZO = cond(v567)
	v568 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v568
	SCZO = cond(v568)
	v569 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v569
	SCZO = cond(v569)
	v570 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v570
	SCZO = cond(v570)
	v571 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v571
	SCZO = cond(v571)
	v572 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v572
	SCZO = cond(v572)
	v573 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v573
	SCZO = cond(v573)
	v574 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v574
	SCZO = cond(v574)
	v575 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v575
	SCZO = cond(v575)
	v576 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v576
	SCZO = cond(v576)
	v577 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v577
	SCZO = cond(v577)
	v578 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v578
	SCZO = cond(v578)
	v579 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v579
	SCZO = cond(v579)
	v580 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v580
	SCZO = cond(v580)
	v581 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v581
	SCZO = cond(v581)
	v582 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v582
	SCZO = cond(v582)
	v583 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v583
	SCZO = cond(v583)
	v584 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v584
	SCZO = cond(v584)
	v585 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v585
	SCZO = cond(v585)
	v586 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v586
	SCZO = cond(v586)
	v587 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v587
	SCZO = cond(v587)
	v588 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v588
	SCZO = cond(v588)
	v589 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v589
	SCZO = cond(v589)
	v590 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v590
	SCZO = cond(v590)
	v591 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v591
	SCZO = cond(v591)
	v592 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v592
	SCZO = cond(v592)
	// succ:  l0177_2A4C
l0177_2A4C:
	v2776 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2776
	SCZO = cond(v2776)
	v2777 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2777
	SCZO = cond(v2777)
	v2778 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2778
	SCZO = cond(v2778)
	v2779 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2779
	SCZO = cond(v2779)
	v2780 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2780
	SCZO = cond(v2780)
	v2781 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2781
	SCZO = cond(v2781)
	v2782 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2782
	SCZO = cond(v2782)
	v2783 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2783
	SCZO = cond(v2783)
	v2784 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2784
	SCZO = cond(v2784)
	v2785 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2785
	SCZO = cond(v2785)
	v2786 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2786
	SCZO = cond(v2786)
	v2787 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2787
	SCZO = cond(v2787)
	v2788 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2788
	SCZO = cond(v2788)
	v2789 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2789
	SCZO = cond(v2789)
	v2790 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2790
	SCZO = cond(v2790)
	v2791 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2791
	SCZO = cond(v2791)
	v2792 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2792
	SCZO = cond(v2792)
	v2793 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2793
	SCZO = cond(v2793)
	v2794 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2794
	SCZO = cond(v2794)
	v2795 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2795
	SCZO = cond(v2795)
	v2796 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2796
	SCZO = cond(v2796)
	v2797 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2797
	SCZO = cond(v2797)
	v2798 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2798
	SCZO = cond(v2798)
	v2799 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2799
	SCZO = cond(v2799)
	v2800 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2800
	SCZO = cond(v2800)
	v2801 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2801
	SCZO = cond(v2801)
	v2802 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2802
	SCZO = cond(v2802)
	v2803 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2803
	SCZO = cond(v2803)
	v2804 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2804
	SCZO = cond(v2804)
	v2805 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2805
	SCZO = cond(v2805)
	v2806 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2806
	SCZO = cond(v2806)
	v2807 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2807
	SCZO = cond(v2807)
	v2808 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2808
	SCZO = cond(v2808)
	v2809 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2809
	SCZO = cond(v2809)
	v2810 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2810
	SCZO = cond(v2810)
	v2811 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2811
	SCZO = cond(v2811)
	v2812 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2812
	SCZO = cond(v2812)
	v2813 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2813
	SCZO = cond(v2813)
	v2814 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2814
	SCZO = cond(v2814)
	v2815 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2815
	SCZO = cond(v2815)
	v2816 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2816
	SCZO = cond(v2816)
	v2817 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2817
	SCZO = cond(v2817)
	v2818 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2818
	SCZO = cond(v2818)
	v2819 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2819
	SCZO = cond(v2819)
	v2820 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2820
	SCZO = cond(v2820)
	v2821 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2821
	SCZO = cond(v2821)
	v2822 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2822
	SCZO = cond(v2822)
	v2823 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2823
	SCZO = cond(v2823)
	v2824 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2824
	SCZO = cond(v2824)
	v2825 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2825
	SCZO = cond(v2825)
	v2826 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2826
	SCZO = cond(v2826)
	v2827 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2827
	SCZO = cond(v2827)
	v2828 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2828
	SCZO = cond(v2828)
	v2829 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2829
	SCZO = cond(v2829)
	v2830 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2830
	SCZO = cond(v2830)
	v2831 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2831
	SCZO = cond(v2831)
	v2832 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2832
	SCZO = cond(v2832)
	v2833 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2833
	SCZO = cond(v2833)
	v2834 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2834
	SCZO = cond(v2834)
	v2835 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2835
	SCZO = cond(v2835)
	v2836 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2836
	SCZO = cond(v2836)
	v2837 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2837
	SCZO = cond(v2837)
	v2838 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2838
	SCZO = cond(v2838)
	v2839 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2839
	SCZO = cond(v2839)
	v2840 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2840
	SCZO = cond(v2840)
	v2841 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2841
	SCZO = cond(v2841)
	v2842 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2842
	SCZO = cond(v2842)
	v2843 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2843
	SCZO = cond(v2843)
	v2844 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2844
	SCZO = cond(v2844)
	v2845 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2845
	SCZO = cond(v2845)
	v2846 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2846
	SCZO = cond(v2846)
	v2847 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2847
	SCZO = cond(v2847)
	v2848 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2848
	SCZO = cond(v2848)
	v2849 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2849
	SCZO = cond(v2849)
	v2850 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2850
	SCZO = cond(v2850)
	v2851 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2851
	SCZO = cond(v2851)
	v2852 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2852
	SCZO = cond(v2852)
	v2853 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2853
	SCZO = cond(v2853)
	v2854 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2854
	SCZO = cond(v2854)
	v2855 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2855
	SCZO = cond(v2855)
	v2856 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2856
	SCZO = cond(v2856)
	v2857 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2857
	SCZO = cond(v2857)
	v2858 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2858
	SCZO = cond(v2858)
	v2859 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2859
	SCZO = cond(v2859)
	v2860 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2860
	SCZO = cond(v2860)
	v2861 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2861
	SCZO = cond(v2861)
	v2862 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2862
	SCZO = cond(v2862)
	v2863 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2863
	SCZO = cond(v2863)
	v2864 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2864
	SCZO = cond(v2864)
	v2865 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2865
	SCZO = cond(v2865)
	v2866 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2866
	SCZO = cond(v2866)
	// succ:  l0177_2B02
l0177_2B02:
	v4065 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4065
	SCZO = cond(v4065)
	v4066 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4066
	SCZO = cond(v4066)
	// succ:  l0177_2B06
l0177_2B06:
	v2294 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2294
	SCZO = cond(v2294)
	v2295 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2295
	SCZO = cond(v2295)
	v2296 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2296
	SCZO = cond(v2296)
	v2297 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2297
	SCZO = cond(v2297)
	v2298 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2298
	SCZO = cond(v2298)
	v2299 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2299
	SCZO = cond(v2299)
	v2300 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2300
	SCZO = cond(v2300)
	v2301 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2301
	SCZO = cond(v2301)
	v2302 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2302
	SCZO = cond(v2302)
	v2303 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2303
	SCZO = cond(v2303)
	v2304 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2304
	SCZO = cond(v2304)
	v2305 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2305
	SCZO = cond(v2305)
	v2306 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2306
	SCZO = cond(v2306)
	v2307 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2307
	SCZO = cond(v2307)
	v2308 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2308
	SCZO = cond(v2308)
	v2309 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2309
	SCZO = cond(v2309)
	v2310 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2310
	SCZO = cond(v2310)
	v2311 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2311
	SCZO = cond(v2311)
	v2312 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2312
	SCZO = cond(v2312)
	v2313 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2313
	SCZO = cond(v2313)
	v2314 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2314
	SCZO = cond(v2314)
	v2315 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2315
	SCZO = cond(v2315)
	v2316 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2316
	SCZO = cond(v2316)
	v2317 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2317
	SCZO = cond(v2317)
	v2318 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2318
	SCZO = cond(v2318)
	v2319 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2319
	SCZO = cond(v2319)
	v2320 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2320
	SCZO = cond(v2320)
	v2321 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2321
	SCZO = cond(v2321)
	v2322 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2322
	SCZO = cond(v2322)
	v2323 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2323
	SCZO = cond(v2323)
	v2324 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2324
	SCZO = cond(v2324)
	v2325 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2325
	SCZO = cond(v2325)
	v2326 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2326
	SCZO = cond(v2326)
	v2327 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2327
	SCZO = cond(v2327)
	v2328 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2328
	SCZO = cond(v2328)
	v2329 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2329
	SCZO = cond(v2329)
	v2330 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2330
	SCZO = cond(v2330)
	v2331 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2331
	SCZO = cond(v2331)
	v2332 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2332
	SCZO = cond(v2332)
	v2333 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2333
	SCZO = cond(v2333)
	v2334 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2334
	SCZO = cond(v2334)
	v2335 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2335
	SCZO = cond(v2335)
	v2336 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2336
	SCZO = cond(v2336)
	v2337 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2337
	SCZO = cond(v2337)
	v2338 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2338
	SCZO = cond(v2338)
	v2339 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2339
	SCZO = cond(v2339)
	v2340 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2340
	SCZO = cond(v2340)
	v2341 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2341
	SCZO = cond(v2341)
	v2342 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2342
	SCZO = cond(v2342)
	v2343 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2343
	SCZO = cond(v2343)
	v2344 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2344
	SCZO = cond(v2344)
	v2345 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2345
	SCZO = cond(v2345)
	v2346 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2346
	SCZO = cond(v2346)
	v2347 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2347
	SCZO = cond(v2347)
	v2348 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2348
	SCZO = cond(v2348)
	v2349 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2349
	SCZO = cond(v2349)
	v2350 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2350
	SCZO = cond(v2350)
	v2351 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2351
	SCZO = cond(v2351)
	v2352 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2352
	SCZO = cond(v2352)
	v2353 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2353
	SCZO = cond(v2353)
	v2354 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2354
	SCZO = cond(v2354)
	v2355 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2355
	SCZO = cond(v2355)
	v2356 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2356
	SCZO = cond(v2356)
	v2357 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2357
	SCZO = cond(v2357)
	v2358 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2358
	SCZO = cond(v2358)
	v2359 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2359
	SCZO = cond(v2359)
	v2360 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2360
	SCZO = cond(v2360)
	v2361 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2361
	SCZO = cond(v2361)
	v2362 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2362
	SCZO = cond(v2362)
	v2363 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2363
	SCZO = cond(v2363)
	v2364 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2364
	SCZO = cond(v2364)
	v2365 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2365
	SCZO = cond(v2365)
	v2366 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2366
	SCZO = cond(v2366)
	v2367 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2367
	SCZO = cond(v2367)
	v2368 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2368
	SCZO = cond(v2368)
	v2369 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2369
	SCZO = cond(v2369)
	v2370 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2370
	SCZO = cond(v2370)
	v2371 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2371
	SCZO = cond(v2371)
	v2372 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2372
	SCZO = cond(v2372)
	v2373 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2373
	SCZO = cond(v2373)
	v2374 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2374
	SCZO = cond(v2374)
	v2375 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2375
	SCZO = cond(v2375)
	v2376 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2376
	SCZO = cond(v2376)
	v2377 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2377
	SCZO = cond(v2377)
	v2378 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2378
	SCZO = cond(v2378)
	v2379 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2379
	SCZO = cond(v2379)
	v2380 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2380
	SCZO = cond(v2380)
	v2381 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2381
	SCZO = cond(v2381)
	v2382 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2382
	SCZO = cond(v2382)
	v2383 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2383
	SCZO = cond(v2383)
	v2384 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2384
	SCZO = cond(v2384)
	v2385 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2385
	SCZO = cond(v2385)
	v2386 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2386
	SCZO = cond(v2386)
	v2387 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2387
	SCZO = cond(v2387)
	v2388 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2388
	SCZO = cond(v2388)
	v2389 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2389
	SCZO = cond(v2389)
	v2390 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2390
	SCZO = cond(v2390)
	v2391 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2391
	SCZO = cond(v2391)
	v2392 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2392
	SCZO = cond(v2392)
	v2393 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2393
	SCZO = cond(v2393)
	v2394 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2394
	SCZO = cond(v2394)
	v2395 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2395
	SCZO = cond(v2395)
	v2396 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2396
	SCZO = cond(v2396)
	v2397 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2397
	SCZO = cond(v2397)
	v2398 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2398
	SCZO = cond(v2398)
	v2399 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2399
	SCZO = cond(v2399)
	v2400 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2400
	SCZO = cond(v2400)
	v2401 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2401
	SCZO = cond(v2401)
	v2402 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2402
	SCZO = cond(v2402)
	v2403 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2403
	SCZO = cond(v2403)
	v2404 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2404
	SCZO = cond(v2404)
	v2405 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2405
	SCZO = cond(v2405)
	v2406 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2406
	SCZO = cond(v2406)
	v2407 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2407
	SCZO = cond(v2407)
	v2408 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2408
	SCZO = cond(v2408)
	v2409 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2409
	SCZO = cond(v2409)
	v2410 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2410
	SCZO = cond(v2410)
	v2411 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2411
	SCZO = cond(v2411)
	v2412 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2412
	SCZO = cond(v2412)
	v2413 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2413
	SCZO = cond(v2413)
	v2414 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2414
	SCZO = cond(v2414)
	v2415 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2415
	SCZO = cond(v2415)
	v2416 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2416
	SCZO = cond(v2416)
	v2417 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2417
	SCZO = cond(v2417)
	v2418 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2418
	SCZO = cond(v2418)
	v2419 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2419
	SCZO = cond(v2419)
	v2420 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2420
	SCZO = cond(v2420)
	v2421 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2421
	SCZO = cond(v2421)
	v2422 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2422
	SCZO = cond(v2422)
	v2423 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2423
	SCZO = cond(v2423)
	v2424 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2424
	SCZO = cond(v2424)
	v2425 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2425
	SCZO = cond(v2425)
	v2426 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2426
	SCZO = cond(v2426)
	v2427 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2427
	SCZO = cond(v2427)
	v2428 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2428
	SCZO = cond(v2428)
	v2429 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2429
	SCZO = cond(v2429)
	v2430 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2430
	SCZO = cond(v2430)
	v2431 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2431
	SCZO = cond(v2431)
	v2432 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2432
	SCZO = cond(v2432)
	v2433 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2433
	SCZO = cond(v2433)
	v2434 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2434
	SCZO = cond(v2434)
	v2435 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2435
	SCZO = cond(v2435)
	v2436 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2436
	SCZO = cond(v2436)
	v2437 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2437
	SCZO = cond(v2437)
	v2438 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2438
	SCZO = cond(v2438)
	v2439 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2439
	SCZO = cond(v2439)
	v2440 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2440
	SCZO = cond(v2440)
	v2441 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2441
	SCZO = cond(v2441)
	v2442 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2442
	SCZO = cond(v2442)
	v2443 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2443
	SCZO = cond(v2443)
	v2444 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2444
	SCZO = cond(v2444)
	v2445 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2445
	SCZO = cond(v2445)
	// succ:  l0177_2C36
l0177_2C36:
	v54 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v54
	SCZO = cond(v54)
	v55 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v55
	SCZO = cond(v55)
	v56 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v56
	SCZO = cond(v56)
	v57 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v57
	SCZO = cond(v57)
	v58 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v58
	SCZO = cond(v58)
	v59 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v59
	SCZO = cond(v59)
	v60 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v60
	SCZO = cond(v60)
	v61 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v61
	SCZO = cond(v61)
	v62 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v62
	SCZO = cond(v62)
	v63 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v63
	SCZO = cond(v63)
	v64 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v64
	SCZO = cond(v64)
	v65 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v65
	SCZO = cond(v65)
	v66 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v66
	SCZO = cond(v66)
	v67 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v67
	SCZO = cond(v67)
	v68 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v68
	SCZO = cond(v68)
	v69 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v69
	SCZO = cond(v69)
	v70 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v70
	SCZO = cond(v70)
	v71 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v71
	SCZO = cond(v71)
	v72 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v72
	SCZO = cond(v72)
	v73 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v73
	SCZO = cond(v73)
	v74 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v74
	SCZO = cond(v74)
	v75 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v75
	SCZO = cond(v75)
	v76 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v76
	SCZO = cond(v76)
	v77 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v77
	SCZO = cond(v77)
	v78 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v78
	SCZO = cond(v78)
	v79 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v79
	SCZO = cond(v79)
	v80 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v80
	SCZO = cond(v80)
	v81 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v81
	SCZO = cond(v81)
	v82 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v82
	SCZO = cond(v82)
	v83 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v83
	SCZO = cond(v83)
	v84 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v84
	SCZO = cond(v84)
	v85 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v85
	SCZO = cond(v85)
	v86 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v86
	SCZO = cond(v86)
	v87 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v87
	SCZO = cond(v87)
	v88 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v88
	SCZO = cond(v88)
	v89 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v89
	SCZO = cond(v89)
	v90 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v90
	SCZO = cond(v90)
	v91 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v91
	SCZO = cond(v91)
	v92 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v92
	SCZO = cond(v92)
	v93 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v93
	SCZO = cond(v93)
	v94 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v94
	SCZO = cond(v94)
	v95 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v95
	SCZO = cond(v95)
	v96 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v96
	SCZO = cond(v96)
	v97 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v97
	SCZO = cond(v97)
	v98 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v98
	SCZO = cond(v98)
	v99 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v99
	SCZO = cond(v99)
	v100 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v100
	SCZO = cond(v100)
	v101 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v101
	SCZO = cond(v101)
	v102 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v102
	SCZO = cond(v102)
	v103 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v103
	SCZO = cond(v103)
	v104 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v104
	SCZO = cond(v104)
	v105 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v105
	SCZO = cond(v105)
	v106 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v106
	SCZO = cond(v106)
	v107 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v107
	SCZO = cond(v107)
	v108 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v108
	SCZO = cond(v108)
	v109 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v109
	SCZO = cond(v109)
	v110 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v110
	SCZO = cond(v110)
	v111 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v111
	SCZO = cond(v111)
	v112 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v112
	SCZO = cond(v112)
	v113 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v113
	SCZO = cond(v113)
	v114 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v114
	SCZO = cond(v114)
	v115 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v115
	SCZO = cond(v115)
	v116 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v116
	SCZO = cond(v116)
	v117 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v117
	SCZO = cond(v117)
	v118 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v118
	SCZO = cond(v118)
	v119 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v119
	SCZO = cond(v119)
	v120 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v120
	SCZO = cond(v120)
	v121 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v121
	SCZO = cond(v121)
	v122 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v122
	SCZO = cond(v122)
	v123 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v123
	SCZO = cond(v123)
	v124 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v124
	SCZO = cond(v124)
	v125 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v125
	SCZO = cond(v125)
	v126 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v126
	SCZO = cond(v126)
	v127 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v127
	SCZO = cond(v127)
	v128 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v128
	SCZO = cond(v128)
	v129 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v129
	SCZO = cond(v129)
	v130 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v130
	SCZO = cond(v130)
	v131 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v131
	SCZO = cond(v131)
	v132 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v132
	SCZO = cond(v132)
	v133 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v133
	SCZO = cond(v133)
	v134 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v134
	SCZO = cond(v134)
	v135 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v135
	SCZO = cond(v135)
	v136 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v136
	SCZO = cond(v136)
	v137 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v137
	SCZO = cond(v137)
	v138 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v138
	SCZO = cond(v138)
	v139 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v139
	SCZO = cond(v139)
	v140 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v140
	SCZO = cond(v140)
	v141 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v141
	SCZO = cond(v141)
	v142 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v142
	SCZO = cond(v142)
	v143 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v143
	SCZO = cond(v143)
	v144 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v144
	SCZO = cond(v144)
	v145 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v145
	SCZO = cond(v145)
	v146 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v146
	SCZO = cond(v146)
	v147 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v147
	SCZO = cond(v147)
	v148 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v148
	SCZO = cond(v148)
	v149 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v149
	SCZO = cond(v149)
	v150 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v150
	SCZO = cond(v150)
	v151 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v151
	SCZO = cond(v151)
	v152 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v152
	SCZO = cond(v152)
	v153 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v153
	SCZO = cond(v153)
	v154 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v154
	SCZO = cond(v154)
	v155 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v155
	SCZO = cond(v155)
	v156 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v156
	SCZO = cond(v156)
	v157 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v157
	SCZO = cond(v157)
	v158 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v158
	SCZO = cond(v158)
	v159 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v159
	SCZO = cond(v159)
	v160 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v160
	SCZO = cond(v160)
	v161 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v161
	SCZO = cond(v161)
	v162 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v162
	SCZO = cond(v162)
	v163 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v163
	SCZO = cond(v163)
	v164 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v164
	SCZO = cond(v164)
	v165 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v165
	SCZO = cond(v165)
	v166 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v166
	SCZO = cond(v166)
	v167 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v167
	SCZO = cond(v167)
	v168 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v168
	SCZO = cond(v168)
	v169 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v169
	SCZO = cond(v169)
	v170 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v170
	SCZO = cond(v170)
	v171 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v171
	SCZO = cond(v171)
	v172 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v172
	SCZO = cond(v172)
	v173 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v173
	SCZO = cond(v173)
	v174 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v174
	SCZO = cond(v174)
	v175 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v175
	SCZO = cond(v175)
	v176 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v176
	SCZO = cond(v176)
	v177 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v177
	SCZO = cond(v177)
	v178 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v178
	SCZO = cond(v178)
	v179 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v179
	SCZO = cond(v179)
	v180 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v180
	SCZO = cond(v180)
	v181 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v181
	SCZO = cond(v181)
	v182 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v182
	SCZO = cond(v182)
	v183 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v183
	SCZO = cond(v183)
	v184 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v184
	SCZO = cond(v184)
	v185 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v185
	SCZO = cond(v185)
	v186 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v186
	SCZO = cond(v186)
	v187 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v187
	SCZO = cond(v187)
	v188 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v188
	SCZO = cond(v188)
	v189 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v189
	SCZO = cond(v189)
	v190 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v190
	SCZO = cond(v190)
	v191 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v191
	SCZO = cond(v191)
	v192 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v192
	SCZO = cond(v192)
	v193 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v193
	SCZO = cond(v193)
	v194 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v194
	SCZO = cond(v194)
	v195 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v195
	SCZO = cond(v195)
	v196 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v196
	SCZO = cond(v196)
	v197 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v197
	SCZO = cond(v197)
	v198 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v198
	SCZO = cond(v198)
	v199 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v199
	SCZO = cond(v199)
	v200 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v200
	SCZO = cond(v200)
	v201 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v201
	SCZO = cond(v201)
	v202 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v202
	SCZO = cond(v202)
	v203 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v203
	SCZO = cond(v203)
	v204 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v204
	SCZO = cond(v204)
	v205 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v205
	SCZO = cond(v205)
	v206 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v206
	SCZO = cond(v206)
	v207 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v207
	SCZO = cond(v207)
	v208 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v208
	SCZO = cond(v208)
	v209 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v209
	SCZO = cond(v209)
	v210 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v210
	SCZO = cond(v210)
	v211 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v211
	SCZO = cond(v211)
	v212 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v212
	SCZO = cond(v212)
	v213 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v213
	SCZO = cond(v213)
	v214 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v214
	SCZO = cond(v214)
	v215 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v215
	SCZO = cond(v215)
	v216 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v216
	SCZO = cond(v216)
	v217 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v217
	SCZO = cond(v217)
	v218 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v218
	SCZO = cond(v218)
	v219 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v219
	SCZO = cond(v219)
	v220 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v220
	SCZO = cond(v220)
	v221 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v221
	SCZO = cond(v221)
	v222 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v222
	SCZO = cond(v222)
	v223 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v223
	SCZO = cond(v223)
	v224 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v224
	SCZO = cond(v224)
	v225 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v225
	SCZO = cond(v225)
	v226 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v226
	SCZO = cond(v226)
	v227 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v227
	SCZO = cond(v227)
	v228 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v228
	SCZO = cond(v228)
	v229 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v229
	SCZO = cond(v229)
	v230 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v230
	SCZO = cond(v230)
	v231 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v231
	SCZO = cond(v231)
	v232 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v232
	SCZO = cond(v232)
	v233 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v233
	SCZO = cond(v233)
	v234 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v234
	SCZO = cond(v234)
	v235 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v235
	SCZO = cond(v235)
	v236 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v236
	SCZO = cond(v236)
	v237 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v237
	SCZO = cond(v237)
	v238 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v238
	SCZO = cond(v238)
	v239 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v239
	SCZO = cond(v239)
	v240 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v240
	SCZO = cond(v240)
	v241 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v241
	SCZO = cond(v241)
	v242 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v242
	SCZO = cond(v242)
	v243 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v243
	SCZO = cond(v243)
	v244 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v244
	SCZO = cond(v244)
	v245 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v245
	SCZO = cond(v245)
	v246 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v246
	SCZO = cond(v246)
	v247 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v247
	SCZO = cond(v247)
	v248 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v248
	SCZO = cond(v248)
	v249 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v249
	SCZO = cond(v249)
	v250 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v250
	SCZO = cond(v250)
	v251 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v251
	SCZO = cond(v251)
	v252 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v252
	SCZO = cond(v252)
	v253 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v253
	SCZO = cond(v253)
	v254 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v254
	SCZO = cond(v254)
	v255 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v255
	SCZO = cond(v255)
	v256 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v256
	SCZO = cond(v256)
	v257 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v257
	SCZO = cond(v257)
	v258 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v258
	SCZO = cond(v258)
	v259 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v259
	SCZO = cond(v259)
	v260 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v260
	SCZO = cond(v260)
	v261 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v261
	SCZO = cond(v261)
	v262 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v262
	SCZO = cond(v262)
	v263 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v263
	SCZO = cond(v263)
	v264 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v264
	SCZO = cond(v264)
	v265 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v265
	SCZO = cond(v265)
	v266 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v266
	SCZO = cond(v266)
	v267 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v267
	SCZO = cond(v267)
	v268 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v268
	SCZO = cond(v268)
	v269 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v269
	SCZO = cond(v269)
	v270 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v270
	SCZO = cond(v270)
	v271 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v271
	SCZO = cond(v271)
	v272 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v272
	SCZO = cond(v272)
	v273 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v273
	SCZO = cond(v273)
	v274 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v274
	SCZO = cond(v274)
	v275 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v275
	SCZO = cond(v275)
	v276 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v276
	SCZO = cond(v276)
	v277 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v277
	SCZO = cond(v277)
	v278 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v278
	SCZO = cond(v278)
	v279 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v279
	SCZO = cond(v279)
	v280 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v280
	SCZO = cond(v280)
	v281 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v281
	SCZO = cond(v281)
	v282 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v282
	SCZO = cond(v282)
	v283 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v283
	SCZO = cond(v283)
	v284 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v284
	SCZO = cond(v284)
	v285 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v285
	SCZO = cond(v285)
	v286 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v286
	SCZO = cond(v286)
	v287 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v287
	SCZO = cond(v287)
	v288 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v288
	SCZO = cond(v288)
	v289 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v289
	SCZO = cond(v289)
	v290 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v290
	SCZO = cond(v290)
	v291 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v291
	SCZO = cond(v291)
	v292 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v292
	SCZO = cond(v292)
	v293 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v293
	SCZO = cond(v293)
	v294 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v294
	SCZO = cond(v294)
	v295 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v295
	SCZO = cond(v295)
	v296 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v296
	SCZO = cond(v296)
	v297 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v297
	SCZO = cond(v297)
	v298 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v298
	SCZO = cond(v298)
	v299 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v299
	SCZO = cond(v299)
	v300 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v300
	SCZO = cond(v300)
	v301 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v301
	SCZO = cond(v301)
	v302 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v302
	SCZO = cond(v302)
	v303 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v303
	SCZO = cond(v303)
	v304 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v304
	SCZO = cond(v304)
	v305 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v305
	SCZO = cond(v305)
	v306 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v306
	SCZO = cond(v306)
	v307 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v307
	SCZO = cond(v307)
	v308 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v308
	SCZO = cond(v308)
	v309 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v309
	SCZO = cond(v309)
	v310 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v310
	SCZO = cond(v310)
	v311 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v311
	SCZO = cond(v311)
	v312 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v312
	SCZO = cond(v312)
	v313 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v313
	SCZO = cond(v313)
	v314 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v314
	SCZO = cond(v314)
	v315 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v315
	SCZO = cond(v315)
	v316 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v316
	SCZO = cond(v316)
	v317 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v317
	SCZO = cond(v317)
	v318 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v318
	SCZO = cond(v318)
	v319 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v319
	SCZO = cond(v319)
	v320 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v320
	SCZO = cond(v320)
	v321 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v321
	SCZO = cond(v321)
	v322 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v322
	SCZO = cond(v322)
	v323 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v323
	SCZO = cond(v323)
	v324 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v324
	SCZO = cond(v324)
	v325 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v325
	SCZO = cond(v325)
	v326 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v326
	SCZO = cond(v326)
	v327 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v327
	SCZO = cond(v327)
	v328 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v328
	SCZO = cond(v328)
	v329 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v329
	SCZO = cond(v329)
	v330 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v330
	SCZO = cond(v330)
	v331 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v331
	SCZO = cond(v331)
	v332 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v332
	SCZO = cond(v332)
	v333 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v333
	SCZO = cond(v333)
	v334 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v334
	SCZO = cond(v334)
	v335 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v335
	SCZO = cond(v335)
	v336 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v336
	SCZO = cond(v336)
	v337 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v337
	SCZO = cond(v337)
	v338 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v338
	SCZO = cond(v338)
	v339 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v339
	SCZO = cond(v339)
	v340 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v340
	SCZO = cond(v340)
	v341 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v341
	SCZO = cond(v341)
	v342 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v342
	SCZO = cond(v342)
	v343 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v343
	SCZO = cond(v343)
	v344 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v344
	SCZO = cond(v344)
	v345 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v345
	SCZO = cond(v345)
	v346 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v346
	SCZO = cond(v346)
	v347 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v347
	SCZO = cond(v347)
	v348 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v348
	SCZO = cond(v348)
	v349 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v349
	SCZO = cond(v349)
	v350 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v350
	SCZO = cond(v350)
	v351 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v351
	SCZO = cond(v351)
	v352 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v352
	SCZO = cond(v352)
	v353 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v353
	SCZO = cond(v353)
	v354 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v354
	SCZO = cond(v354)
	v355 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v355
	SCZO = cond(v355)
	v356 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v356
	SCZO = cond(v356)
	v357 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v357
	SCZO = cond(v357)
	v358 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v358
	SCZO = cond(v358)
	v359 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v359
	SCZO = cond(v359)
	v360 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v360
	SCZO = cond(v360)
	v361 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v361
	SCZO = cond(v361)
	v362 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v362
	SCZO = cond(v362)
	v363 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v363
	SCZO = cond(v363)
	v364 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v364
	SCZO = cond(v364)
	v365 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v365
	SCZO = cond(v365)
	v366 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v366
	SCZO = cond(v366)
	v367 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v367
	SCZO = cond(v367)
	v368 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v368
	SCZO = cond(v368)
	v369 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v369
	SCZO = cond(v369)
	v370 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v370
	SCZO = cond(v370)
	v371 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v371
	SCZO = cond(v371)
	v372 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v372
	SCZO = cond(v372)
	v373 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v373
	SCZO = cond(v373)
	v374 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v374
	SCZO = cond(v374)
	v375 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v375
	SCZO = cond(v375)
	v376 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v376
	SCZO = cond(v376)
	v377 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v377
	SCZO = cond(v377)
	v378 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v378
	SCZO = cond(v378)
	v379 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v379
	SCZO = cond(v379)
	v380 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v380
	SCZO = cond(v380)
	v381 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v381
	SCZO = cond(v381)
	v382 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v382
	SCZO = cond(v382)
	v383 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v383
	SCZO = cond(v383)
	v384 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v384
	SCZO = cond(v384)
	v385 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v385
	SCZO = cond(v385)
	v386 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v386
	SCZO = cond(v386)
	v387 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v387
	SCZO = cond(v387)
	v388 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v388
	SCZO = cond(v388)
	v389 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v389
	SCZO = cond(v389)
	v390 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v390
	SCZO = cond(v390)
	v391 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v391
	SCZO = cond(v391)
	v392 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v392
	SCZO = cond(v392)
	v393 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v393
	SCZO = cond(v393)
	v394 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v394
	SCZO = cond(v394)
	v395 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v395
	SCZO = cond(v395)
	v396 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v396
	SCZO = cond(v396)
	v397 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v397
	SCZO = cond(v397)
	v398 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v398
	SCZO = cond(v398)
	v399 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v399
	SCZO = cond(v399)
	v400 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v400
	SCZO = cond(v400)
	v401 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v401
	SCZO = cond(v401)
	v402 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v402
	SCZO = cond(v402)
	v403 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v403
	SCZO = cond(v403)
	v404 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v404
	SCZO = cond(v404)
	v405 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v405
	SCZO = cond(v405)
	v406 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v406
	SCZO = cond(v406)
	v407 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v407
	SCZO = cond(v407)
	v408 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v408
	SCZO = cond(v408)
	v409 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v409
	SCZO = cond(v409)
	v410 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v410
	SCZO = cond(v410)
	v411 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v411
	SCZO = cond(v411)
	v412 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v412
	SCZO = cond(v412)
	v413 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v413
	SCZO = cond(v413)
	v414 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v414
	SCZO = cond(v414)
	v415 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v415
	SCZO = cond(v415)
	v416 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v416
	SCZO = cond(v416)
	v417 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v417
	SCZO = cond(v417)
	v418 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v418
	SCZO = cond(v418)
	v419 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v419
	SCZO = cond(v419)
	v420 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v420
	SCZO = cond(v420)
	v421 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v421
	SCZO = cond(v421)
	v422 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v422
	SCZO = cond(v422)
	v423 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v423
	SCZO = cond(v423)
	v424 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v424
	SCZO = cond(v424)
	v425 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v425
	SCZO = cond(v425)
	v426 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v426
	SCZO = cond(v426)
	v427 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v427
	SCZO = cond(v427)
	v428 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v428
	SCZO = cond(v428)
	v429 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v429
	SCZO = cond(v429)
	v430 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v430
	SCZO = cond(v430)
	v431 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v431
	SCZO = cond(v431)
	v432 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v432
	SCZO = cond(v432)
	v433 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v433
	SCZO = cond(v433)
	v434 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v434
	SCZO = cond(v434)
	v435 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v435
	SCZO = cond(v435)
	v436 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v436
	SCZO = cond(v436)
	v437 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v437
	SCZO = cond(v437)
	v438 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v438
	SCZO = cond(v438)
	v439 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v439
	SCZO = cond(v439)
	v440 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v440
	SCZO = cond(v440)
	v441 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v441
	SCZO = cond(v441)
	v442 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v442
	SCZO = cond(v442)
	v443 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v443
	SCZO = cond(v443)
	v444 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v444
	SCZO = cond(v444)
	v445 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v445
	SCZO = cond(v445)
	v446 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v446
	SCZO = cond(v446)
	v447 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v447
	SCZO = cond(v447)
	v448 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v448
	SCZO = cond(v448)
	v449 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v449
	SCZO = cond(v449)
	v450 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v450
	SCZO = cond(v450)
	v451 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v451
	SCZO = cond(v451)
	v452 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v452
	SCZO = cond(v452)
	v453 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v453
	SCZO = cond(v453)
	v454 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v454
	SCZO = cond(v454)
	v455 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v455
	SCZO = cond(v455)
	v456 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v456
	SCZO = cond(v456)
	v457 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v457
	SCZO = cond(v457)
	v458 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v458
	SCZO = cond(v458)
	v459 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v459
	SCZO = cond(v459)
	v460 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v460
	SCZO = cond(v460)
	v461 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v461
	SCZO = cond(v461)
	v462 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v462
	SCZO = cond(v462)
	v463 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v463
	SCZO = cond(v463)
	v464 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v464
	SCZO = cond(v464)
	v465 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v465
	SCZO = cond(v465)
	v466 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v466
	SCZO = cond(v466)
	v467 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v467
	SCZO = cond(v467)
	v468 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v468
	SCZO = cond(v468)
	v469 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v469
	SCZO = cond(v469)
	v470 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v470
	SCZO = cond(v470)
	v471 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v471
	SCZO = cond(v471)
	v472 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v472
	SCZO = cond(v472)
	v473 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v473
	SCZO = cond(v473)
	v474 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v474
	SCZO = cond(v474)
	v475 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v475
	SCZO = cond(v475)
	v476 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v476
	SCZO = cond(v476)
	v477 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v477
	SCZO = cond(v477)
	v478 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v478
	SCZO = cond(v478)
	v479 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v479
	SCZO = cond(v479)
	v480 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v480
	SCZO = cond(v480)
	v481 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v481
	SCZO = cond(v481)
	v482 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v482
	SCZO = cond(v482)
	v483 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v483
	SCZO = cond(v483)
	v484 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v484
	SCZO = cond(v484)
	v485 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v485
	SCZO = cond(v485)
	v486 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v486
	SCZO = cond(v486)
	v487 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v487
	SCZO = cond(v487)
	v488 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v488
	SCZO = cond(v488)
	v489 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v489
	SCZO = cond(v489)
	v490 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v490
	SCZO = cond(v490)
	v491 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v491
	SCZO = cond(v491)
	v492 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v492
	SCZO = cond(v492)
	v493 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v493
	SCZO = cond(v493)
	v494 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v494
	SCZO = cond(v494)
	v495 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v495
	SCZO = cond(v495)
	v496 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v496
	SCZO = cond(v496)
	v497 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v497
	SCZO = cond(v497)
	v498 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v498
	SCZO = cond(v498)
	v499 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v499
	SCZO = cond(v499)
	v500 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v500
	SCZO = cond(v500)
	v501 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v501
	SCZO = cond(v501)
	v502 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v502
	SCZO = cond(v502)
	v503 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v503
	SCZO = cond(v503)
	v504 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v504
	SCZO = cond(v504)
	v505 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v505
	SCZO = cond(v505)
	v506 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v506
	SCZO = cond(v506)
	v507 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v507
	SCZO = cond(v507)
	v508 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v508
	SCZO = cond(v508)
	v509 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v509
	SCZO = cond(v509)
	v510 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v510
	SCZO = cond(v510)
	v511 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v511
	SCZO = cond(v511)
	v512 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v512
	SCZO = cond(v512)
	v513 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v513
	SCZO = cond(v513)
	v514 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v514
	SCZO = cond(v514)
	v515 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v515
	SCZO = cond(v515)
	v516 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v516
	SCZO = cond(v516)
	v517 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v517
	SCZO = cond(v517)
	v518 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v518
	SCZO = cond(v518)
	v519 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v519
	SCZO = cond(v519)
	v520 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v520
	SCZO = cond(v520)
	v521 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v521
	SCZO = cond(v521)
	v522 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v522
	SCZO = cond(v522)
	v523 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v523
	SCZO = cond(v523)
	v524 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v524
	SCZO = cond(v524)
	v525 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v525
	SCZO = cond(v525)
	v526 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v526
	SCZO = cond(v526)
	v527 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v527
	SCZO = cond(v527)
	v528 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v528
	SCZO = cond(v528)
	v529 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v529
	SCZO = cond(v529)
	// succ:  l0177_2FEE
l0177_2FEE:
	v2129 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2129
	SCZO = cond(v2129)
	v2130 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2130
	SCZO = cond(v2130)
	v2131 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2131
	SCZO = cond(v2131)
	v2132 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2132
	SCZO = cond(v2132)
	v2133 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2133
	SCZO = cond(v2133)
	v2134 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2134
	SCZO = cond(v2134)
	v2135 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2135
	SCZO = cond(v2135)
	v2136 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2136
	SCZO = cond(v2136)
	v2137 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2137
	SCZO = cond(v2137)
	// succ:  l0177_2FFE_thunk_fn018F_0000
l0177_2FFE_thunk_fn018F_0000:
	call fn018F_0000 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_31BE:
	v2006 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2006
	SCZO = cond(v2006)
	v2007 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2007
	SCZO = cond(v2007)
	v2008 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2008
	SCZO = cond(v2008)
	v2009 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2009
	SCZO = cond(v2009)
	v2010 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2010
	SCZO = cond(v2010)
	v2011 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2011
	SCZO = cond(v2011)
	v2012 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2012
	SCZO = cond(v2012)
	v2013 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2013
	SCZO = cond(v2013)
	v2014 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2014
	SCZO = cond(v2014)
	v2015 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2015
	SCZO = cond(v2015)
	v2016 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2016
	SCZO = cond(v2016)
	v2017 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2017
	SCZO = cond(v2017)
	v2018 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2018
	SCZO = cond(v2018)
	v2019 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2019
	SCZO = cond(v2019)
	v2020 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2020
	SCZO = cond(v2020)
	v2021 = Mem0[ss:bp + di:byte] + al
	Mem0[ss:bp + di:byte] = v2021
	SCZO = cond(v2021)
	v2022 = Mem0[ds:di:byte] + al
	Mem0[ds:di:byte] = v2022
	SCZO = cond(v2022)
	v2023 = Mem0[ds:si:byte] + al
	Mem0[ds:si:byte] = v2023
	SCZO = cond(v2023)
	cx = cx + Mem0[ds:0x0000:word16]
	SCZO = cond(cx)
	v2024 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2024
	SCZO = cond(v2024)
	v2025 = Mem0[ds:0x0880:byte] + bl
	Mem0[ds:0x0880:byte] = v2025
	SCZO = cond(v2025)
	ch = ch + Mem0[ds:bx:byte]
	SCZO = cond(ch)
	di = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	v2026 = Mem0[ds:si:byte] + al
	Mem0[ds:si:byte] = v2026
	SCZO = cond(v2026)
	dl = dl + Mem0[ds:si:byte]
	SCZO = cond(dl)
	// succ:  l0177_31F6
l0177_31F6:
	v2202 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2202
	SCZO = cond(v2202)
	v2203 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2203
	SCZO = cond(v2203)
	v2204 = Mem0[ss:bp + si:byte] + bl
	Mem0[ss:bp + si:byte] = v2204
	SCZO = cond(v2204)
	v2205 = Mem0[ds:bx + si:byte] + cl
	Mem0[ds:bx + si:byte] = v2205
	SCZO = cond(v2205)
	v2206 = Mem0[ds:bx:word16] + bp
	Mem0[ds:bx:word16] = v2206
	SCZO = cond(v2206)
	di = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	v2207 = Mem0[ds:si:byte] + al
	Mem0[ds:si:byte] = v2207
	SCZO = cond(v2207)
	bp = bp + Mem0[ds:bx + si:word16]
	SCZO = cond(bp)
	v2208 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2208
	SCZO = cond(v2208)
	v2209 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2209
	SCZO = cond(v2209)
	v2210 = Mem0[ds:si:byte] + bl
	Mem0[ds:si:byte] = v2210
	SCZO = cond(v2210)
	v2211 = Mem0[ds:bx + si:byte] | 0x02
	Mem0[ds:bx + si:byte] = v2211
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	di = Mem0[ds:bx + 0x0000:word16] *s 0x0000
	SCZO = cond(di)
	v2212 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2212
	SCZO = cond(v2212)
	v2213 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2213
	SCZO = cond(v2213)
	v2214 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2214
	SCZO = cond(v2214)
	v2215 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2215
	SCZO = cond(v2215)
	v2216 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2216
	SCZO = cond(v2216)
	v2217 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2217
	SCZO = cond(v2217)
	v2218 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2218
	SCZO = cond(v2218)
	v2219 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v2219
	SCZO = cond(v2219)
	v2220 = Mem0[ds:si:byte] + al
	Mem0[ds:si:byte] = v2220
	SCZO = cond(v2220)
	v2221 = Mem0[ss:bp + di:byte] + al
	Mem0[ss:bp + di:byte] = v2221
	SCZO = cond(v2221)
	v2222 = Mem0[ss:bp + di:word16] + ax
	Mem0[ss:bp + di:word16] = v2222
	SCZO = cond(v2222)
	v2223 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2223
	SCZO = cond(v2223)
	v2224 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2224
	SCZO = cond(v2224)
	v2225 = Mem0[ds:bx + si:byte] + dl
	Mem0[ds:bx + si:byte] = v2225
	SCZO = cond(v2225)
	v2226 = Mem0[ds:bx + 0x0000 + si:byte] + al
	Mem0[ds:bx + 0x0000 + si:byte] = v2226
	SCZO = cond(v2226)
	SZO = cond(Mem0[ds:bx + 0x0002 + di:byte] & ah)
	C = false
	ax = ax + 0x0300
	SCZO = cond(ax)
	v2227 = Mem0[ds:di:word16] + ax
	Mem0[ds:di:word16] = v2227
	SCZO = cond(v2227)
	v2228 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2228
	SCZO = cond(v2228)
	v2229 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2229
	SCZO = cond(v2229)
	v2230 = Mem0[ds:bx + si:byte] + dl
	Mem0[ds:bx + si:byte] = v2230
	SCZO = cond(v2230)
	v2231 = Mem0[ds:bx + 0x0000 + si:byte] + 0x84
	Mem0[ds:bx + 0x0000 + si:byte] = v2231
	SCZO = cond(v2231)
	ax = Mem0[ds:0x0003:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	v2232 = Mem0[ss:bp + si:byte] + al
	Mem0[ss:bp + si:byte] = v2232
	SCZO = cond(v2232)
	cl = cl + Mem0[ss:bp + si:byte]
	SCZO = cond(cl)
	v2233 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2233
	SCZO = cond(v2233)
	v2234 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2234
	SCZO = cond(v2234)
	v2235 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2235
	SCZO = cond(v2235)
	v2236 = Mem0[ds:bx + 0x0000 + si:byte] + al
	Mem0[ds:bx + 0x0000 + si:byte] = v2236
	SCZO = cond(v2236)
	SCZDOP = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[ds:0x0000:word16]
	v2237 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2237
	SCZO = cond(v2237)
	v2238 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2238
	SCZO = cond(v2238)
	v2239 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2239
	SCZO = cond(v2239)
	v2240 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2240
	SCZO = cond(v2240)
	v2241 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2241
	SCZO = cond(v2241)
	v2242 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2242
	SCZO = cond(v2242)
	v2243 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2243
	SCZO = cond(v2243)
	v2244 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2244
	SCZO = cond(v2244)
	v2245 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2245
	SCZO = cond(v2245)
	v2246 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2246
	SCZO = cond(v2246)
	v2247 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2247
	SCZO = cond(v2247)
	v2248 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2248
	SCZO = cond(v2248)
	v2249 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2249
	SCZO = cond(v2249)
	v2250 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2250
	SCZO = cond(v2250)
	v2251 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2251
	SCZO = cond(v2251)
	v2252 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2252
	SCZO = cond(v2252)
	v2253 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2253
	SCZO = cond(v2253)
	ax = ax + 0x0A00
	SCZO = cond(ax)
	v2254 = Mem0[ss:bp + di:byte] + al
	Mem0[ss:bp + di:byte] = v2254
	SCZO = cond(v2254)
	dl = dl + Mem0[ds:si:byte]
	SCZO = cond(dl)
	v2255 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2255
	SCZO = cond(v2255)
	v2256 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2256
	SCZO = cond(v2256)
	al = al + 0x04
	SCZO = cond(al)
	v2257 = Mem0[ds:di + 0x0000:byte] + cl
	Mem0[ds:di + 0x0000:byte] = v2257
	SCZO = cond(v2257)
	SCZDOP = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[si:word16]
	si = si + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	v2258 = Mem0[ds:si:byte] + cl
	Mem0[ds:si:byte] = v2258
	SCZO = cond(v2258)
	v2259 = Mem0[ss:bp + di:byte] + al
	Mem0[ss:bp + di:byte] = v2259
	SCZO = cond(v2259)
	bp = bp + Mem0[ds:bx + si:word16]
	SCZO = cond(bp)
	v2260 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2260
	SCZO = cond(v2260)
	v2261 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2261
	SCZO = cond(v2261)
	al = al + 0x04
	SCZO = cond(al)
	v2262 = Mem0[ds:di + 0x0000:byte] + cl
	Mem0[ds:di + 0x0000:byte] = v2262
	SCZO = cond(v2262)
	SCZDOP = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[si:word16]
	si = si + 0x0002
	ax = ax + 0x0A00
	SCZO = cond(ax)
	v2263 = Mem0[ss:bp + di:byte] + al
	Mem0[ss:bp + di:byte] = v2263
	SCZO = cond(v2263)
	dl = dl + Mem0[ds:si:byte]
	SCZO = cond(dl)
	v2264 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2264
	SCZO = cond(v2264)
	v2265 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2265
	SCZO = cond(v2265)
	v2266 = Mem0[ds:si:byte] + al + C
	Mem0[ds:si:byte] = v2266
	SCZO = cond(v2266)
	v2267 = Mem0[ds:bx + 0x0010 + di:byte] + cl
	Mem0[ds:bx + 0x0010 + di:byte] = v2267
	SCZO = cond(v2267)
	SCZDOP = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[si:word16]
	si = si + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	v2268 = Mem0[ds:si:byte] + cl
	Mem0[ds:si:byte] = v2268
	SCZO = cond(v2268)
	v2269 = Mem0[ss:bp + di:byte] + al
	Mem0[ss:bp + di:byte] = v2269
	SCZO = cond(v2269)
	sp = sp + Mem0[ss:bp + di:word16]
	SCZO = cond(sp)
	v2270 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2270
	SCZO = cond(v2270)
	// succ:  l0177_32BE
l0177_32BE:
	v1965 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1965
	SCZO = cond(v1965)
	v1966 = Mem0[ds:si:byte] + al + C
	Mem0[ds:si:byte] = v1966
	SCZO = cond(v1966)
	v1967 = Mem0[ds:bx + 0x0010 + di:byte] + cl
	Mem0[ds:bx + 0x0010 + di:byte] = v1967
	SCZO = cond(v1967)
	SCZDOP = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[si:word16]
	si = si + 0x0002
	ax = ax + 0x0A00
	SCZO = cond(ax)
	v1969 = Mem0[ss:bp + di:byte] + al
	Mem0[ss:bp + di:byte] = v1969
	SCZO = cond(v1969)
	dl = dl + Mem0[ss:bp + si:byte]
	SCZO = cond(dl)
	v1970 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1970
	SCZO = cond(v1970)
	v1971 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1971
	SCZO = cond(v1971)
	v1972 = Mem0[ds:si:byte] | al
	Mem0[ds:si:byte] = v1972
	SZO = cond(Mem0[ds:si:byte])
	C = false
	v1973 = Mem0[ss:bp + 0x0000 + di:byte] + cl
	Mem0[ss:bp + 0x0000 + di:byte] = v1973
	SCZO = cond(v1973)
	SCZDOP = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[si:word16]
	si = si + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	v1974 = Mem0[ds:si:byte] + cl
	Mem0[ds:si:byte] = v1974
	SCZO = cond(v1974)
	v1975 = Mem0[ss:bp + di:byte] + al
	Mem0[ss:bp + di:byte] = v1975
	SCZO = cond(v1975)
	sp = sp + Mem0[ss:bp + di:word16]
	SCZO = cond(sp)
	v1976 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1976
	SCZO = cond(v1976)
	v1977 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1977
	SCZO = cond(v1977)
	v1978 = Mem0[ds:si:byte] | al
	Mem0[ds:si:byte] = v1978
	SZO = cond(Mem0[ds:si:byte])
	C = false
	v1979 = Mem0[ss:bp + 0x0000 + di:byte] + cl
	Mem0[ss:bp + 0x0000 + di:byte] = v1979
	SCZO = cond(v1979)
	SCZDOP = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[si:word16]
	si = si + 0x0002
	ax = ax + 0x0A00
	SCZO = cond(ax)
	v1980 = Mem0[ss:bp + di:byte] + al
	Mem0[ss:bp + di:byte] = v1980
	SCZO = cond(v1980)
	dl = dl + Mem0[ss:bp + si:byte]
	SCZO = cond(dl)
	v1981 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1981
	SCZO = cond(v1981)
	v1982 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1982
	SCZO = cond(v1982)
	// succ:  l0177_32F6
l0177_32F6:
	v2029 = Mem0[ds:si:byte] + 0x00
	Mem0[ds:si:byte] = v2029
	SCZO = cond(v2029)
	cx = cx - 0x0001
	SZO = cond(cx)
	v2030 = Mem0[ds:di + 0x06AD:byte] + bl
	Mem0[ds:di + 0x06AD:byte] = v2030
	SCZO = cond(v2030)
	v2031 = Mem0[ds:si:byte] + cl
	Mem0[ds:si:byte] = v2031
	SCZO = cond(v2031)
	v2032 = Mem0[ss:bp + di:byte] + al
	Mem0[ss:bp + di:byte] = v2032
	SCZO = cond(v2032)
	sp = sp + Mem0[ss:bp + di:word16]
	SCZO = cond(sp)
	v2033 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2033
	SCZO = cond(v2033)
	v2034 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2034
	SCZO = cond(v2034)
	v2035 = Mem0[ds:si:byte] + 0x00
	Mem0[ds:si:byte] = v2035
	SCZO = cond(v2035)
	cx = cx - 0x0001
	SZO = cond(cx)
	v2036 = Mem0[ds:di + 0x00AD:byte] + bl
	Mem0[ds:di + 0x00AD:byte] = v2036
	SCZO = cond(v2036)
	v2037 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2037
	SCZO = cond(v2037)
	v2038 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2038
	SCZO = cond(v2038)
	v2039 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2039
	SCZO = cond(v2039)
	v2040 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2040
	SCZO = cond(v2040)
	v2041 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2041
	SCZO = cond(v2041)
	v2042 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2042
	SCZO = cond(v2042)
	v2043 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2043
	SCZO = cond(v2043)
	v2044 = Mem0[ds:di + 0x00AD:byte] + bl
	Mem0[ds:di + 0x00AD:byte] = v2044
	SCZO = cond(v2044)
	v2045 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2045
	SCZO = cond(v2045)
	v2046 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2046
	SCZO = cond(v2046)
	v2047 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2047
	SCZO = cond(v2047)
	v2048 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2048
	SCZO = cond(v2048)
	v2049 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2049
	SCZO = cond(v2049)
	v2050 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2050
	SCZO = cond(v2050)
	v2051 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2051
	SCZO = cond(v2051)
	v2052 = Mem0[ds:di + 0x03AD:byte] + bl
	Mem0[ds:di + 0x03AD:byte] = v2052
	SCZO = cond(v2052)
	v2053 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v2053
	SCZO = cond(v2053)
	v2054 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2054
	SCZO = cond(v2054)
	v2055 = Mem0[ss:bp + si:word16] + cx
	Mem0[ss:bp + si:word16] = v2055
	SCZO = cond(v2055)
	v2056 = Mem0[ds:di:byte] + cl
	Mem0[ds:di:byte] = v2056
	SCZO = cond(v2056)
	v2057 = Mem0[ds:bx + si:byte] + dl
	Mem0[ds:bx + si:byte] = v2057
	SCZO = cond(v2057)
	al = al + Mem0[ds:bx + si:byte]
	SCZO = cond(al)
	v2058 = Mem0[ds:bx + si:byte] + 0x00
	Mem0[ds:bx + si:byte] = v2058
	SCZO = cond(v2058)
	v2059 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2059
	SCZO = cond(v2059)
	al = al + 0x00
	SCZO = cond(al)
	ax = ax + Mem0[ds:bx + si:word16]
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + si:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	v2060 = Mem0[ds:di:byte] + cl
	Mem0[ds:di:byte] = v2060
	SCZO = cond(v2060)
	v2061 = Mem0[ds:si + 0x040B:byte] + al
	Mem0[ds:si + 0x040B:byte] = v2061
	SCZO = cond(v2061)
	v2062 = Mem0[ds:bx + si:byte] + 0x00
	Mem0[ds:bx + si:byte] = v2062
	SCZO = cond(v2062)
	v2063 = Mem0[ds:bx + 0x0000 + si:byte] + al
	Mem0[ds:bx + 0x0000 + si:byte] = v2063
	SCZO = cond(v2063)
	v2064 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2064
	SCZO = cond(v2064)
	v2065 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2065
	SCZO = cond(v2065)
	v2066 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2066
	SCZO = cond(v2066)
	v2067 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2067
	SCZO = cond(v2067)
	v2068 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2068
	SCZO = cond(v2068)
	v2069 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2069
	SCZO = cond(v2069)
	v2070 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2070
	SCZO = cond(v2070)
	v2071 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2071
	SCZO = cond(v2071)
	v2072 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2072
	SCZO = cond(v2072)
	v2073 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2073
	SCZO = cond(v2073)
	v2074 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2074
	SCZO = cond(v2074)
	v2075 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2075
	SCZO = cond(v2075)
	v2076 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2076
	SCZO = cond(v2076)
	v2077 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2077
	SCZO = cond(v2077)
	v2078 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2078
	SCZO = cond(v2078)
	v2079 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2079
	SCZO = cond(v2079)
	v2080 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2080
	SCZO = cond(v2080)
	v2081 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2081
	SCZO = cond(v2081)
	v2082 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2082
	SCZO = cond(v2082)
	v2083 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2083
	SCZO = cond(v2083)
	v2084 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2084
	SCZO = cond(v2084)
	v2085 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2085
	SCZO = cond(v2085)
	v2086 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2086
	SCZO = cond(v2086)
	v2087 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2087
	SCZO = cond(v2087)
	v2088 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2088
	SCZO = cond(v2088)
	v2089 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2089
	SCZO = cond(v2089)
	v2090 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2090
	SCZO = cond(v2090)
	v2091 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2091
	SCZO = cond(v2091)
	v2092 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2092
	SCZO = cond(v2092)
	v2093 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2093
	SCZO = cond(v2093)
	v2094 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2094
	SCZO = cond(v2094)
	v2095 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2095
	SCZO = cond(v2095)
	v2096 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2096
	SCZO = cond(v2096)
	v2097 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2097
	SCZO = cond(v2097)
	v2098 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2098
	SCZO = cond(v2098)
	v2099 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2099
	SCZO = cond(v2099)
	v2100 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2100
	SCZO = cond(v2100)
	v2101 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2101
	SCZO = cond(v2101)
	v2102 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2102
	SCZO = cond(v2102)
	v2103 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2103
	SCZO = cond(v2103)
	v2104 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2104
	SCZO = cond(v2104)
	v2105 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2105
	SCZO = cond(v2105)
	v2106 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2106
	SCZO = cond(v2106)
	v2107 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2107
	SCZO = cond(v2107)
	v2108 = Mem0[ds:bx + si:word16] + ax
	Mem0[ds:bx + si:word16] = v2108
	SCZO = cond(v2108)
	ax = ax + Mem0[ds:bx + si:word16]
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + si:word16]
	SCZO = cond(ax)
	ax = ax + Mem0[ds:bx + si:word16]
	SCZO = cond(ax)
	v2109 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2109
	SCZO = cond(v2109)
	v2110 = Mem0[ss:bp + si:byte] + al
	Mem0[ss:bp + si:byte] = v2110
	SCZO = cond(v2110)
	v2111 = Mem0[ds:bx + 0x0020 + si:byte] - al - C
	Mem0[ds:bx + 0x0020 + si:byte] = v2111
	SCZO = cond(v2111)
	C = __das(al, &al)
	v2112 = Mem0[ss:bp + si:word16]
	Mem0[ss:bp + si:word16] = ax
	ax = v2112
	v2113 = Mem0[ds:si:byte] + al
	Mem0[ds:si:byte] = v2113
	SCZO = cond(v2113)
	v2114 = Mem0[ss:bp + di:byte] + al
	Mem0[ss:bp + di:byte] = v2114
	SCZO = cond(v2114)
	al = al + Mem0[ds:bx:byte]
	SCZO = cond(al)
	v2115 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2115
	SCZO = cond(v2115)
	v2116 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2116
	SCZO = cond(v2116)
	bl = bl + Mem0[ds:bx + si:byte]
	SCZO = cond(bl)
	v2117 = Mem0[ds:bx + si:byte] + ah
	Mem0[ds:bx + si:byte] = v2117
	SCZO = cond(v2117)
	v2118 = Mem0[ds:bx:byte] + ch
	Mem0[ds:bx:byte] = v2118
	SCZO = cond(v2118)
	v2119 = Mem0[ds:di:word16]
	Mem0[ds:di:word16] = ax
	ax = v2119
	v2120 = Mem0[ss:bp + si:byte] + cl
	Mem0[ss:bp + si:byte] = v2120
	SCZO = cond(v2120)
	v2121 = Mem0[ds:di:byte] + al
	Mem0[ds:di:byte] = v2121
	SCZO = cond(v2121)
	v2122 = Mem0[ds:si:word16] + dx
	Mem0[ds:si:word16] = v2122
	SCZO = cond(v2122)
	v2123 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2123
	SCZO = cond(v2123)
	al = al + ah
	SCZO = cond(al)
	bh = bh + Mem0[ds:bx + si:byte]
	SCZO = cond(bh)
	v2124 = Mem0[ds:bx + si:byte] + ch
	Mem0[ds:bx + si:byte] = v2124
	SCZO = cond(v2124)
	v2125 = Mem0[ds:bx:byte] + cl
	Mem0[ds:bx:byte] = v2125
	SCZO = cond(v2125)
	ax = __aad(ax)
	v2126 = Mem0[ss:bp + si:byte] + cl
	Mem0[ss:bp + si:byte] = v2126
	SCZO = cond(v2126)
	v2127 = Mem0[ds:si:byte] + al
	Mem0[ds:si:byte] = v2127
	SCZO = cond(v2127)
	goto l0177_33EC
	// succ:  l0177_33EC
l0177_33EB:
	al = al + 0x03
	SCZO = cond(al)
	// succ:  l0177_33EC
l0177_33EC:
	ax = ax & Mem0[ds:bx + si:word16]
	SZO = cond(ax)
	C = false
	v1952 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1952
	SCZO = cond(v1952)
	cx = cx - 0x0001
	branch Test(NE,Z) && cx != 0x0000 l0177_33F5
	// succ:  l0177_33F3 l0177_33F5
l0177_33F3:
	v1953 = Mem0[ds:bx + si:byte] - al - C
	Mem0[ds:bx + si:byte] = v1953
	SCZO = cond(v1953)
	// succ:  l0177_33F5
l0177_33F5:
	v1955 = Mem0[ds:bx + si:byte] - al
	Mem0[ds:bx + si:byte] = v1955
	SCZO = cond(v1955)
	C = __das(al, &al)
	di = 0x0006
	ax = ax | Mem0[ds:bx + si:word16]
	SZO = cond(ax)
	C = false
	al = al + 0x03
	SCZO = cond(al)
	v1956 = Mem0[ds:bx + si:byte] - al
	Mem0[ds:bx + si:byte] = v1956
	SCZO = cond(v1956)
	v1957 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1957
	SCZO = cond(v1957)
	cx = cx - 0x0001
	branch Test(NE,Z) && cx != 0x0000 l0177_3407
	// succ:  l0177_3405 l0177_3407
l0177_3405:
	v1958 = Mem0[ds:bx + si:byte] - al - C
	Mem0[ds:bx + si:byte] = v1958
	SCZO = cond(v1958)
	// succ:  l0177_3407
l0177_3407:
	v1960 = Mem0[ds:bx + si:byte] - al
	Mem0[ds:bx + si:byte] = v1960
	SCZO = cond(v1960)
	C = __das(al, &al)
	di = 0x0006
	ax = ax | Mem0[ds:bx + si:word16]
	SZO = cond(ax)
	C = false
	al = al + 0x02
	SCZO = cond(al)
	ax = ax & Mem0[ds:bx + si:word16]
	SZO = cond(ax)
	C = false
	v1961 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1961
	SCZO = cond(v1961)
	cx = cx - 0x0001
	branch Test(NE,Z) && cx != 0x0000 l0177_3419
	// succ:  l0177_3417 l0177_3419
l0177_3417:
	SCZO = cond(Mem0[ds:bx + si:byte] - al)
	// succ:  l0177_3419
l0177_3419:
	v1962 = Mem0[ds:bx + si:byte] - al
	Mem0[ds:bx + si:byte] = v1962
	SCZO = cond(v1962)
l0177_34E9:
	ax = ax - Mem0[ds:bx + si:word16] - C
	SCZO = cond(ax)
	v4254 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4254
	SCZO = cond(v4254)
	v4255 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4255
	SCZO = cond(v4255)
	v4256 = Mem0[ds:bx + si:byte] - al - C
	Mem0[ds:bx + si:byte] = v4256
	SCZO = cond(v4256)
	v4257 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4257
	SCZO = cond(v4257)
	ax = ax - 0x00A5 - C
	SCZO = cond(ax)
	v4258 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4258
	SCZO = cond(v4258)
	v4259 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4259
	SCZO = cond(v4259)
	v4260 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4260
	SCZO = cond(v4260)
	v4261 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4261
	SCZO = cond(v4261)
	v4262 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4262
	SCZO = cond(v4262)
	v4263 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4263
	SCZO = cond(v4263)
	v4264 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4264
	SCZO = cond(v4264)
	v4265 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4265
	SCZO = cond(v4265)
	v4266 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4266
	SCZO = cond(v4266)
	v4267 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4267
	SCZO = cond(v4267)
	v4268 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4268
	SCZO = cond(v4268)
	v4269 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4269
	SCZO = cond(v4269)
	v4270 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4270
	SCZO = cond(v4270)
	v4271 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4271
	SCZO = cond(v4271)
	v4272 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4272
	SCZO = cond(v4272)
	v4273 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4273
	SCZO = cond(v4273)
	v4274 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4274
	SCZO = cond(v4274)
	v4275 = Mem0[ss:bp + si:byte] + al
	Mem0[ss:bp + si:byte] = v4275
	SCZO = cond(v4275)
	v4276 = Mem0[ds:0x0300:byte] + al
	Mem0[ds:0x0300:byte] = v4276
	SCZO = cond(v4276)
	al = al + Mem0[ds:bx:byte]
	SCZO = cond(al)
	v4277 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4277
	SCZO = cond(v4277)
	v4278 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4278
	SCZO = cond(v4278)
	v4279 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4279
	SCZO = cond(v4279)
	v4280 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4280
	SCZO = cond(v4280)
	v4281 = Mem0[ds:di:byte] + dl
	Mem0[ds:di:byte] = v4281
	SCZO = cond(v4281)
	SZO = cond(Mem0[ss:bp + di:word16] & ax)
	C = false
	v4282 = Mem0[ds:si:byte] + al
	Mem0[ds:si:byte] = v4282
	SCZO = cond(v4282)
	v4283 = Mem0[ss:bp + di:byte] + al
	Mem0[ss:bp + di:byte] = v4283
	SCZO = cond(v4283)
	v4284 = Mem0[ss:bp + si:word16] + cx
	Mem0[ss:bp + si:word16] = v4284
	SCZO = cond(v4284)
	v4285 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4285
	SCZO = cond(v4285)
	v4286 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4286
	SCZO = cond(v4286)
	v4287 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4287
	SCZO = cond(v4287)
	v4288 = Mem0[ds:bx + si:byte] + 0x00
	Mem0[ds:bx + si:byte] = v4288
	SCZO = cond(v4288)
	ax = ax + 0x0385
	SCZO = cond(ax)
	v4289 = Mem0[ds:bx:byte] + al
	Mem0[ds:bx:byte] = v4289
	SCZO = cond(v4289)
	v4290 = Mem0[ss:bp + si:byte] + al
	Mem0[ss:bp + si:byte] = v4290
	SCZO = cond(v4290)
	cl = cl + Mem0[ss:bp + di:byte]
	SCZO = cond(cl)
	v4291 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4291
	SCZO = cond(v4291)
	v4292 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4292
	SCZO = cond(v4292)
	v4293 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4293
	SCZO = cond(v4293)
	v4294 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4294
	SCZO = cond(v4294)
	v4295 = Mem0[ds:di:byte] + dl
	Mem0[ds:di:byte] = v4295
	SCZO = cond(v4295)
	SZO = cond(Mem0[ds:bx + si:word16] & ax)
	C = false
	v4296 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4296
	SCZO = cond(v4296)
	v4297 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4297
	SCZO = cond(v4297)
	v4298 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4298
	SCZO = cond(v4298)
	v4299 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4299
	SCZO = cond(v4299)
	v4300 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4300
	SCZO = cond(v4300)
	v4301 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4301
	SCZO = cond(v4301)
	v4302 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4302
	SCZO = cond(v4302)
	v4303 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4303
	SCZO = cond(v4303)
	v4304 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4304
	SCZO = cond(v4304)
	v4305 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4305
	SCZO = cond(v4305)
	v4306 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4306
	SCZO = cond(v4306)
	v4307 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4307
	SCZO = cond(v4307)
	v4308 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4308
	SCZO = cond(v4308)
	v4309 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4309
	SCZO = cond(v4309)
	v4310 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4310
	SCZO = cond(v4310)
	v4311 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4311
	SCZO = cond(v4311)
	v4312 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4312
	SCZO = cond(v4312)
	v4313 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4313
	SCZO = cond(v4313)
	v4314 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4314
	SCZO = cond(v4314)
	v4315 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4315
	SCZO = cond(v4315)
	v4316 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4316
	SCZO = cond(v4316)
	v4317 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4317
	SCZO = cond(v4317)
	v4318 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4318
	SCZO = cond(v4318)
	v4319 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4319
	SCZO = cond(v4319)
	v4320 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4320
	SCZO = cond(v4320)
	v4321 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4321
	SCZO = cond(v4321)
	v4322 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4322
	SCZO = cond(v4322)
	v4323 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4323
	SCZO = cond(v4323)
	v4324 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4324
	SCZO = cond(v4324)
	v4325 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4325
	SCZO = cond(v4325)
	v4326 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4326
	SCZO = cond(v4326)
	v4327 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4327
	SCZO = cond(v4327)
	v4328 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4328
	SCZO = cond(v4328)
	v4329 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4329
	SCZO = cond(v4329)
	v4330 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4330
	SCZO = cond(v4330)
	v4331 = Mem0[ds:bx + si:byte] + cl
	Mem0[ds:bx + si:byte] = v4331
	SCZO = cond(v4331)
	v4332 = Mem0[ds:si:byte] + cl
	Mem0[ds:si:byte] = v4332
	SCZO = cond(v4332)
	v4333 = Mem0[ds:0x3C02:byte] + al
	Mem0[ds:0x3C02:byte] = v4333
	SCZO = cond(v4333)
	v4334 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4334
	SCZO = cond(v4334)
	v4335 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v4335
	SCZO = cond(v4335)
	bl = bl | Mem0[ds:0x0800:byte]
	SZO = cond(bl)
	C = false
	v4336 = Mem0[ds:bx + 0x00BF:byte] & ch
	Mem0[ds:bx + 0x00BF:byte] = v4336
	SZO = cond(Mem0[ds:bx + 0x00BF:byte])
	C = false
	v4337 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4337
	SCZO = cond(v4337)
	v4338 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4338
	SCZO = cond(v4338)
	v4339 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4339
	SCZO = cond(v4339)
	v4340 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4340
	SCZO = cond(v4340)
	v4341 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4341
	SCZO = cond(v4341)
	v4342 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4342
	SCZO = cond(v4342)
	v4343 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4343
	SCZO = cond(v4343)
	v4344 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4344
	SCZO = cond(v4344)
	v4345 = Mem0[ds:0x0600:byte] + al
	Mem0[ds:0x0600:byte] = v4345
	SCZO = cond(v4345)
	v4346 = Mem0[ss:bp + si:byte] + al
	Mem0[ss:bp + si:byte] = v4346
	SCZO = cond(v4346)
	bl = bl + Mem0[ds:bx + di:byte]
	SCZO = cond(bl)
	v4347 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4347
	SCZO = cond(v4347)
	v4348 = Mem0[ds:bx + si:byte] + ah
	Mem0[ds:bx + si:byte] = v4348
	SCZO = cond(v4348)
	al = al | 0x04
	SZO = cond(al)
	C = false
	v4349 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4349
	SCZO = cond(v4349)
	v4350 = Mem0[ds:bx:byte] + ch
	Mem0[ds:bx:byte] = v4350
	SCZO = cond(v4350)
	v4351 = Mem0[ds:di:word16] + 0x0000
	Mem0[ds:di:word16] = v4351
	SCZO = cond(v4351)
	ax = ax + 0x0200
	SCZO = cond(ax)
	dl = dl + Mem0[ds:bx + di:byte]
	SCZO = cond(dl)
	v4352 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4352
	SCZO = cond(v4352)
	v4353 = Mem0[ds:bx + si:byte] + ah
	Mem0[ds:bx + si:byte] = v4353
	SCZO = cond(v4353)
	v4354 = Mem0[ds:si:byte] - al - C
	Mem0[ds:si:byte] = v4354
	SCZO = cond(v4354)
	v4355 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4355
	SCZO = cond(v4355)
	v4356 = Mem0[ds:bx:byte] + ch
	Mem0[ds:bx:byte] = v4356
	SCZO = cond(v4356)
	v4357 = Mem0[ds:bx + si:word16] + 0x0000
	Mem0[ds:bx + si:word16] = v4357
	SCZO = cond(v4357)
	v4358 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4358
	SCZO = cond(v4358)
	v4359 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4359
	SCZO = cond(v4359)
	v4360 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4360
	SCZO = cond(v4360)
	v4361 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4361
	SCZO = cond(v4361)
	v4362 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4362
	SCZO = cond(v4362)
	v4363 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4363
	SCZO = cond(v4363)
	v4364 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4364
	SCZO = cond(v4364)
	v4365 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4365
	SCZO = cond(v4365)
	v4366 = Mem0[ds:bx + si:byte] | al
	Mem0[ds:bx + si:byte] = v4366
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4367 = Mem0[ds:bx + si:word16] | ax
	Mem0[ds:bx + si:word16] = v4367
	SZO = cond(Mem0[ds:bx + si:word16])
	C = false
	al = al + 0x03
	SCZO = cond(al)
	si = si + 0x0001
	SZO = cond(si)
	v4368 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4368
	SCZO = cond(v4368)
	v4369 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4369
	SCZO = cond(v4369)
	bl = bl + Mem0[ds:si:byte]
	SCZO = cond(bl)
	v4370 = Mem0[ds:bx + si:byte] | 0x02
	Mem0[ds:bx + si:byte] = v4370
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	di = Mem0[ds:bx + 0x0000:word16] *s 0x0000
	SCZO = cond(di)
	v4371 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4371
	SCZO = cond(v4371)
	v4372 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4372
	SCZO = cond(v4372)
	v4373 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4373
	SCZO = cond(v4373)
	v4374 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4374
	SCZO = cond(v4374)
	v4375 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4375
	SCZO = cond(v4375)
	v4376 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4376
	SCZO = cond(v4376)
	v4377 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4377
	SCZO = cond(v4377)
	v4378 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4378
	SCZO = cond(v4378)
	v4379 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4379
	SCZO = cond(v4379)
	v4380 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4380
	SCZO = cond(v4380)
	v4381 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4381
	SCZO = cond(v4381)
	v4382 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4382
	SCZO = cond(v4382)
	v4383 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4383
	SCZO = cond(v4383)
	v4384 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4384
	SCZO = cond(v4384)
	v4385 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4385
	SCZO = cond(v4385)
	v4386 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4386
	SCZO = cond(v4386)
	v4387 = Mem0[ds:bx:byte] + al
	Mem0[ds:bx:byte] = v4387
	SCZO = cond(v4387)
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v4388 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4388
	SCZO = cond(v4388)
	v4389 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v4389
	SCZO = cond(v4389)
	v4390 = Mem0[ds:bx:word16] + ax
	Mem0[ds:bx:word16] = v4390
	SCZO = cond(v4390)
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v4391 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v4391
	SCZO = cond(v4391)
	v4392 = Mem0[ds:bx + di:word16] + ax
	Mem0[ds:bx + di:word16] = v4392
	SCZO = cond(v4392)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v4393 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v4393
	SCZO = cond(v4393)
	al = al + Mem0[ds:bx + di:byte]
	SCZO = cond(al)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	v4394 = Mem0[ss:bp + si:word16] + 0x0001
	Mem0[ss:bp + si:word16] = v4394
	SZO = cond(v4394)
	al = al + Mem0[ss:bp + si:byte]
	SCZO = cond(al)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	ax = ax + 0x0405
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + si:word16]
	SCZO = cond(ax)
	ax = ax + Mem0[ds:di:word16]
	SCZO = cond(ax)
	ax = ax + 0x0405
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + di:word16]
	SCZO = cond(ax)
	ax = ax + Mem0[ds:di:word16]
	SCZO = cond(ax)
	ax = ax + 0x0404
	SCZO = cond(ax)
	al = al + 0x03
	SCZO = cond(al)
	di = di + si
	SCZO = cond(di)
	v4395 = Mem0[ss:bp + 0x0001 + di:word16] + ax
	Mem0[ss:bp + 0x0001 + di:word16] = v4395
	SCZO = cond(v4395)
	v4396 = Mem0[ss:bp + si:byte] + al
	Mem0[ss:bp + si:byte] = v4396
	SCZO = cond(v4396)
	v4397 = Mem0[ss:bp + si:word16] + ax
	Mem0[ss:bp + si:word16] = v4397
	SCZO = cond(v4397)
	al = al | Mem0[ss:bp + si:byte]
	SZO = cond(al)
	C = false
	ax = ax | Mem0[ss:bp + si:word16]
	SZO = cond(ax)
	C = false
	al = al | 0x02
	SZO = cond(al)
	C = false
	ax = Mem0[ss:bp + si:word16]
	SCZO = cond(Mem0[si:byte] - Mem0[di:byte])
	si = si - 0x0001
	di = di - 0x0001
	dl = dl + ch
	SCZO = cond(dl)
	dh = dh + Mem0[ds:bx + 0xB802:byte]
	SCZO = cond(dh)
	bl = bl + Mem0[ss:(bp + 0x0001) + si:byte]
	SCZO = cond(bl)
	branch Test(OV,O) l0177_3675
	// succ:  l0177_3674 l0177_3675
l0177_3674:
	branch Test(NO,O) l0177_3677
	goto l0177_3676
	// succ:  l0177_3676 l0177_3677
l0177_3675:
	v4423 = Mem0[ds:bx + 0x0001 + di:word16] + si
	Mem0[ds:bx + 0x0001 + di:word16] = v4423
	SCZO = cond(v4423)
	goto l0177_3678
	// succ:  l0177_3678
l0177_3676:
	branch Test(NO,O) l0177_3679
	goto l0177_3678
	// succ:  l0177_3678 l0177_3679
l0177_3677:
	v4424 = Mem0[ds:bx + si:word16] + ax
	Mem0[ds:bx + si:word16] = v4424
	SCZO = cond(v4424)
	goto l0177_3679
	// succ:  l0177_3679
l0177_3678:
	v4398 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4398
	SCZO = cond(v4398)
	goto l0177_367A
	// succ:  l0177_367A
l0177_3679:
	v4425 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4425
	SCZO = cond(v4425)
	goto l0177_367B
	// succ:  l0177_367B
l0177_367A:
	v4426 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4426
	SCZO = cond(v4426)
	goto l0177_367C
	// succ:  l0177_367C
l0177_367B:
	v4427 = Mem0[ds:bx + 0x0001 + si:byte] + ch
	Mem0[ds:bx + 0x0001 + si:byte] = v4427
	SCZO = cond(v4427)
	goto l0177_367E
	// succ:  l0177_367E
l0177_367C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = 0x3601
	goto l0177_367F
	// succ:  l0177_367F
l0177_367E:
	v4428 = Mem0[ss:bp + 0x0001:word16] + sp
	Mem0[ss:bp + 0x0001:word16] = v4428
	SCZO = cond(v4428)
	goto l0177_3682
	// succ:  l0177_3682
l0177_367F:
	v4429 = Mem0[ss:bp + 0x0001:word16] + sp
	Mem0[ss:bp + 0x0001:word16] = v4429
	SCZO = cond(v4429)
	// succ:  l0177_3682
l0177_3682:
	v4430 = Mem0[ss:bp + 0x0001:word16] + sp
	Mem0[ss:bp + 0x0001:word16] = v4430
	SCZO = cond(v4430)
	branch Test(LT,SO) l0177_3689
	// succ:  l0177_3688 l0177_3689
l0177_3688:
	branch Test(PE,P) l0177_368B
	goto l0177_368A
	// succ:  l0177_368A l0177_368B
l0177_3689:
	v4433 = Mem0[ss:bp + 0x0001 + di:word16] + di
	Mem0[ss:bp + 0x0001 + di:word16] = v4433
	SCZO = cond(v4433)
	goto l0177_368C
	// succ:  l0177_368C
l0177_368A:
	branch Test(PO,P) l0177_368D
	goto l0177_368C
	// succ:  l0177_368C l0177_368D
l0177_368B:
	v2598 = Mem0[ds:bx + si:word16] + ax
	Mem0[ds:bx + si:word16] = v2598
	SCZO = cond(v2598)
l0177_368C:
	v4432 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4432
	SCZO = cond(v4432)
	// succ:  l0177_368D l0177_368E
l0177_368D:
	v2599 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2599
	SCZO = cond(v2599)
	// succ:  l0177_368E
l0177_368E:
	v2600 = Mem0[ds:0x4901:byte] + bh
	Mem0[ds:0x4901:byte] = v2600
	SCZO = cond(v2600)
	v2601 = Mem0[ds:si + 0x0001:word16] + cx
	Mem0[ds:si + 0x0001:word16] = v2601
	SCZO = cond(v2601)
	v2602 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2602
	SCZO = cond(v2602)
	SCZO = cond(Mem0[ds:bx + di:byte] - al)
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	v2603 = Mem0[ds:bx + 0x0001 + si:word16] + ax
	Mem0[ds:bx + 0x0001 + si:word16] = v2603
	SCZO = cond(v2603)
	v2604 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2604
	SCZO = cond(v2604)
	v2605 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2605
	SCZO = cond(v2605)
	cx = cx + 0x0001
	SZO = cond(cx)
	v2606 = Mem0[ds:bx + 0x0001 + di:word16] + ax
	Mem0[ds:bx + 0x0001 + di:word16] = v2606
	SCZO = cond(v2606)
	dx = dx + 0x0001
	SZO = cond(dx)
	v2607 = Mem0[ss:bp + 0x0001 + si:word16] + ax
	Mem0[ss:bp + 0x0001 + si:word16] = v2607
	SCZO = cond(v2607)
	si = si - 0x0001
	SZO = cond(si)
	v2608 = Mem0[ss:bp + 0x0001:word16] + cx
	Mem0[ss:bp + 0x0001:word16] = v2608
	SCZO = cond(v2608)
	di = di - 0x0001
	SZO = cond(di)
	v2609 = Mem0[ds:bx + 0x0001:word16] + cx
	Mem0[ds:bx + 0x0001:word16] = v2609
	SCZO = cond(v2609)
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	dx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	v2610 = Mem0[ds:bx + 0x0001 + di:word16] + sp
	Mem0[ds:bx + 0x0001 + di:word16] = v2610
	SCZO = cond(v2610)
	ax = ax - 0x0001
	SZO = cond(ax)
	v2611 = Mem0[ds:di + 0x0001:word16] + dx
	Mem0[ds:di + 0x0001:word16] = v2611
	SCZO = cond(v2611)
	v2612 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2612
	SCZO = cond(v2612)
	v2613 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2613
	SCZO = cond(v2613)
	v2614 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2614
	SCZO = cond(v2614)
	v2615 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2615
	SCZO = cond(v2615)
	v2616 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2616
	SCZO = cond(v2616)
	SCZO = cond(ax - Mem0[ds:bx + di:word16])
	C = __aas(al, ah, &al, &ah)
	v2617 = Mem0[ss:bp + 0x0001:word16] + ax
	Mem0[ss:bp + 0x0001:word16] = v2617
	SCZO = cond(v2617)
	branch Test(UGE,C) l0177_36CD
	// succ:  l0177_36CC l0177_36CD
l0177_36CC:
	branch Test(UGE,C) l0177_36CF
	goto l0177_36CE
	// succ:  l0177_36CE l0177_36CF
l0177_36CD:
	v2642 = Mem0[ds:si + 0x0001:word16] + si
	Mem0[ds:si + 0x0001:word16] = v2642
	SCZO = cond(v2642)
	goto l0177_36D0
	// succ:  l0177_36D0
l0177_36CE:
	branch Test(EQ,Z) l0177_36D1
	goto l0177_36D0
	// succ:  l0177_36D0 l0177_36D1
l0177_36CF:
	v2641 = Mem0[ds:di + 0x0001:word16] + di
	Mem0[ds:di + 0x0001:word16] = v2641
	SCZO = cond(v2641)
	goto l0177_36D2
	// succ:  l0177_36D2
l0177_36D0:
	branch Test(GE,SO) l0177_36D3
	goto l0177_36D2
	// succ:  l0177_36D2 l0177_36D3
l0177_36D1:
	v2638 = Mem0[ds:bx + si:word16] + ax
	Mem0[ds:bx + si:word16] = v2638
	SCZO = cond(v2638)
	goto l0177_36D3
	// succ:  l0177_36D3
l0177_36D2:
	v2619 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2619
	SCZO = cond(v2619)
	goto l0177_36D4
	// succ:  l0177_36D4
l0177_36D3:
	v4444 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4444
	SCZO = cond(v4444)
	goto l0177_36D5
	// succ:  l0177_36D5
l0177_36D4:
	v2621 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2621
	SCZO = cond(v2621)
	// succ:  l0177_36D5
l0177_36D5:
	C = __aaa(al, ah, &al, &ah)
	v2622 = Mem0[ss:bp + si:word16] + di
	Mem0[ss:bp + si:word16] = v2622
	SCZO = cond(v2622)
	v2623 = Mem0[ds:di:word16] + di
	Mem0[ds:di:word16] = v2623
	SCZO = cond(v2623)
	v2624 = Mem0[ds:di + 0x0001:word16] + ax
	Mem0[ds:di + 0x0001:word16] = v2624
	SCZO = cond(v2624)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	v2625 = Mem0[ds:bx + 0x0001 + di:word16] + bp
	Mem0[ds:bx + 0x0001 + di:word16] = v2625
	SCZO = cond(v2625)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = 0x0001
	ax = Mem0[ds:bx + di:word16] *s 0x006C
	SCZO = cond(ax)
	v2626 = Mem0[ds:bx + si:word16] + ax
	Mem0[ds:bx + si:word16] = v2626
	SCZO = cond(v2626)
	v2627 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2627
	SCZO = cond(v2627)
	v2628 = Mem0[ds:bx + di:byte] + bh
	Mem0[ds:bx + di:byte] = v2628
	SCZO = cond(v2628)
	v2629 = Mem0[ds:si:word16] + di
	Mem0[ds:si:word16] = v2629
	SCZO = cond(v2629)
	v2630 = Mem0[ds:bx + 0x0001:word16] + ax
	Mem0[ds:bx + 0x0001:word16] = v2630
	SCZO = cond(v2630)
	v2631 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2631
	SCZO = cond(v2631)
	v2632 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2632
	SCZO = cond(v2632)
	v2633 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2633
	SCZO = cond(v2633)
	v2634 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2634
	SCZO = cond(v2634)
	sp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	v2635 = Mem0[ds:bx + si:word16] + ax
	Mem0[ds:bx + si:word16] = v2635
	SCZO = cond(v2635)
	v2636 = Mem0[ds:di + 0x0001:byte] + dh
	Mem0[ds:di + 0x0001:byte] = v2636
	SCZO = cond(v2636)
	goto l0177_3700
	// succ:  l0177_3700
l0177_36FF:
	v4437 = Mem0[ds:bx + 0x0001 + si:word16] + di
	Mem0[ds:bx + 0x0001 + si:word16] = v4437
	SCZO = cond(v4437)
	goto l0177_3702
	// succ:  l0177_3702
l0177_3700:
	branch Test(SG,S) l0177_3703
	// succ:  l0177_3702 l0177_3703
l0177_3702:
	v2640 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2640
	SCZO = cond(v2640)
	goto l0177_3704
	// succ:  l0177_3704
l0177_3703:
	v2670 = Mem0[ds:si + 0x0001:byte] + ah
	Mem0[ds:si + 0x0001:byte] = v2670
	SCZO = cond(v2670)
	goto l0177_3706
	// succ:  l0177_3706
l0177_3704:
	v2645 = Mem0[fs:bx + si:word16] + ax
	Mem0[fs:bx + si:word16] = v2645
	SCZO = cond(v2645)
	// succ:  l0177_3706
l0177_3706:
	v2646 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2646
	SCZO = cond(v2646)
	bh = bh + cl
	SCZO = cond(bh)
	dh = dh + Mem0[ss:(bp + 0xB303) + si:byte]
	SCZO = cond(dh)
	ax = ax + bx
	SCZO = cond(ax)
	ax = ax + Mem0[ds:bx + si:word16]
	SCZO = cond(ax)
	v2647 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2647
	SCZO = cond(v2647)
	v2648 = Mem0[ss:bp + 0x0001:byte] + ch
	Mem0[ss:bp + 0x0001:byte] = v2648
	SCZO = cond(v2648)
	Mem0[di:byte] = __in(dx)
	di = di + 0x0001
	v2649 = Mem0[ds:bx + 0x0001:word16] + bp
	Mem0[ds:bx + 0x0001:word16] = v2649
	SCZO = cond(v2649)
	Mem0[di:word16] = __in(dx)
	di = di + 0x0002
	sp = sp + bp
	SCZO = cond(sp)
	v2650 = Mem0[ds:bx + 0xC003:word16] + di
	Mem0[ds:bx + 0xC003:word16] = v2650
	SCZO = cond(v2650)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + Mem0[ds:bx + si:word16]
	SCZO = cond(ax)
	v2651 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2651
	SCZO = cond(v2651)
	al = al + bh
	SCZO = cond(al)
	v2652 = Mem0[ss:bp + si:word16] + di
	Mem0[ss:bp + si:word16] = v2652
	SCZO = cond(v2652)
	al = al + Mem0[ss:(bp + 0x0002) + si:byte]
	SCZO = cond(al)
	v2653 = Mem0[ds:bx + 0x0001 + si:byte] + dh
	Mem0[ds:bx + 0x0001 + si:byte] = v2653
	SCZO = cond(v2653)
	v2654 = (Mem0[ss:bp + si:byte] & 0x01 << 0x08 - 0x01) != 0x00
	Mem0[ss:bp + si:byte] = __rol(Mem0[ss:bp + si:byte], 0x01)
	C = v2654
	D = true
	v2656 = Mem0[ds:bx + si:word16] + ax
	Mem0[ds:bx + si:word16] = v2656
	SCZO = cond(v2656)
	v2657 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2657
	SCZO = cond(v2657)
	v2658 = Mem0[ds:si + 0x0002:byte] + bl
	Mem0[ds:si + 0x0002:byte] = v2658
	SCZO = cond(v2658)
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ah = ah + Mem0[ds:(bx + 0x0002) + di:byte]
	SCZO = cond(ah)
	__bound(ax, Mem0[ss:bp + si:word16])
	v2659 = ax
	ax = bp
	bp = v2659
	dl = dl + Mem0[ss:bp + 0x9B02:byte]
	SCZO = cond(dl)
	bl = bl + Mem0[ds:si + 0x0002:byte]
	SCZO = cond(bl)
	v2660 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2660
	SCZO = cond(v2660)
	v2661 = Mem0[ds:bx + di:byte] + bh
	Mem0[ds:bx + di:byte] = v2661
	SCZO = cond(v2661)
	ch = ch + Mem0[ds:di + 0x0002:byte]
	SCZO = cond(ch)
	v2662 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2662
	SCZO = cond(v2662)
	v2663 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2663
	SCZO = cond(v2663)
	v2664 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2664
	SCZO = cond(v2664)
	v2665 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2665
	SCZO = cond(v2665)
	ch = ch + ch
	SCZO = cond(ch)
	sp = sp + di
	SCZO = cond(sp)
	v2666 = Mem0[ds:bx:word16] + si
	Mem0[ds:bx:word16] = v2666
	SCZO = cond(v2666)
	dh = dh + Mem0[ds:di + 0xB603:byte]
	SCZO = cond(dh)
	di = di + Mem0[ds:(bx + 0xC503) + si:word16]
	SCZO = cond(di)
	ax = ax + Mem0[ds:bx + si:word16]
	SCZO = cond(ax)
	v2667 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2667
	SCZO = cond(v2667)
	v2668 = Mem0[ds:bx + 0x0001 + di:byte] + dh
	Mem0[ds:bx + 0x0001 + di:byte] = v2668
	SCZO = cond(v2668)
l0177_4589_in_fn0177_0B70:
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_4C52_in_fn0177_0B70:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[0x018F:bx + 0x0670:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_578B:
	C = __daa(al, &al)
	v4224 = Mem0[ds:bx:byte] << cl
	Mem0[ds:bx:byte] = v4224
	SCZO = cond(v4224)
	v4225 = Mem0[ds:bx:byte] << cl
	Mem0[ds:bx:byte] = v4225
	SCZO = cond(v4225)
	v4226 = Mem0[ds:bx:byte] << cl
	Mem0[ds:bx:byte] = v4226
	SCZO = cond(v4226)
	v4227 = Mem0[ds:bx:byte] << cl
	Mem0[ds:bx:byte] = v4227
	SCZO = cond(v4227)
	v4228 = Mem0[ds:bx:byte] << cl
	Mem0[ds:bx:byte] = v4228
	SCZO = cond(v4228)
	v4229 = Mem0[ds:bx:byte] << cl
	Mem0[ds:bx:byte] = v4229
	SCZO = cond(v4229)
	v4230 = Mem0[ds:bx:byte] << cl
	Mem0[ds:bx:byte] = v4230
	SCZO = cond(v4230)
	v4231 = Mem0[ds:bx:byte] << cl
	Mem0[ds:bx:byte] = v4231
	SCZO = cond(v4231)
	__syscall(0x03)
	C = __daa(al, &al)
	v4232 = Mem0[ds:bx:byte] << cl
	Mem0[ds:bx:byte] = v4232
	SCZO = cond(v4232)
	v4233 = Mem0[ds:bx:byte] << cl
	Mem0[ds:bx:byte] = v4233
	SCZO = cond(v4233)
	v4234 = Mem0[ds:bx:byte] << cl
	Mem0[ds:bx:byte] = v4234
	SCZO = cond(v4234)
	v4235 = Mem0[ds:bx:byte] << cl
	Mem0[ds:bx:byte] = v4235
	SCZO = cond(v4235)
	v4236 = Mem0[ds:bx:byte] << cl
	Mem0[ds:bx:byte] = v4236
	SCZO = cond(v4236)
	v4237 = Mem0[ds:bx:byte] << cl
	Mem0[ds:bx:byte] = v4237
	SCZO = cond(v4237)
	__syscall(0x03)
	C = __daa(al, &al)
	__syscall(0x03)
	C = __daa(al, &al)
	__syscall(0x03)
	C = __daa(al, &al)
	__syscall(0x03)
	C = __daa(al, &al)
	__syscall(0x03)
	C = __daa(al, &al)
	__syscall(0x03)
	C = __daa(al, &al)
	__syscall(0x03)
	C = __daa(al, &al)
	// succ:  l0177_57B8
l0177_57B8:
	__syscall(0x03)
	C = __daa(al, &al)
	__syscall(0x03)
	C = __daa(al, &al)
	__syscall(0x03)
	C = __daa(al, &al)
	__syscall(0x03)
	C = __daa(al, &al)
	__syscall(0x03)
	C = __daa(al, &al)
	__syscall(0x03)
	C = __daa(al, &al)
	v594 = Mem0[ds:bx:byte] << cl
	Mem0[ds:bx:byte] = v594
	SCZO = cond(v594)
	__syscall(0x03)
	C = __daa(al, &al)
	v595 = Mem0[ds:bx:byte] << cl
	Mem0[ds:bx:byte] = v595
	SCZO = cond(v595)
	__syscall(0x03)
	C = __daa(al, &al)
	// succ:  l0177_57CB_thunk_fn0177_57CC
l0177_57CB_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_70E9:
	v2671 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2671
	SCZO = cond(v2671)
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp + 0x0002
	bx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	dx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	cx = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	v2672 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2672
	SCZO = cond(v2672)
	v2673 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2673
	SCZO = cond(v2673)
	v2674 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2674
	SCZO = cond(v2674)
	v2675 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2675
	SCZO = cond(v2675)
	v2676 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2676
	SCZO = cond(v2676)
	v2677 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2677
	SCZO = cond(v2677)
	v2678 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2678
	SCZO = cond(v2678)
	v2679 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2679
	SCZO = cond(v2679)
	v2680 = Mem0[ds:di:word16] + cx
	Mem0[ds:di:word16] = v2680
	SCZO = cond(v2680)
	v2681 = Mem0[ds:bx + si:byte] - al
	Mem0[ds:bx + si:byte] = v2681
	SCZO = cond(v2681)
	ax = ax + Mem0[ds:bx + si:word16]
	SCZO = cond(ax)
	dh = dh ^ Mem0[ss:bp + si:byte]
	SZO = cond(dh)
	C = false
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v2682 = Mem0[ds:bx:byte] + cl
	Mem0[ds:bx:byte] = v2682
	SCZO = cond(v2682)
	v2683 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2683
	SCZO = cond(v2683)
	v2684 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2684
	SCZO = cond(v2684)
	v2685 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2685
	SCZO = cond(v2685)
	v2686 = Mem0[ss:bp + si:byte] + al
	Mem0[ss:bp + si:byte] = v2686
	SCZO = cond(v2686)
	v2687 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v2687
	SCZO = cond(v2687)
	bh = bh + bh
	SCZO = cond(bh)
l0177_73C1:
	C = __aas(al, ah, &al, &ah)
	al = al + 0x00 + C
	SCZO = cond(al)
	al = al + Mem0[ds:bx + si:byte]
	SCZO = cond(al)
	dh = dh ^ Mem0[ss:bp + si:byte]
	SZO = cond(dh)
	C = false
	v30 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v30
	SCZO = cond(v30)
l0177_7447:
	v2271 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2271
	SCZO = cond(v2271)
	v2272 = Mem0[ss:bp + di:byte] + bl
	Mem0[ss:bp + di:byte] = v2272
	SCZO = cond(v2272)
	v2273 = Mem0[ds:0x0200:byte] + al
	Mem0[ds:0x0200:byte] = v2273
	SCZO = cond(v2273)
	v2274 = Mem0[ds:bx + si:byte] - al
	Mem0[ds:bx + si:byte] = v2274
	SCZO = cond(v2274)
	dx = dx + 0x0001
	SZO = cond(dx)
	bh = bh + Mem0[ds:bx + si:byte]
	SCZO = cond(bh)
	v2275 = Mem0[ds:bx + 0x2C02 + di:byte] + al
	Mem0[ds:bx + 0x2C02 + di:byte] = v2275
	SCZO = cond(v2275)
	v2276 = Mem0[ds:bx + 0x2A08 + di:byte] + ah
	Mem0[ds:bx + 0x2A08 + di:byte] = v2276
	SCZO = cond(v2276)
	v2277 = Mem0[ds:bx + 0x0000 + di:byte] + al
	Mem0[ds:bx + 0x0000 + di:byte] = v2277
	SCZO = cond(v2277)
	v2278 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2278
	SCZO = cond(v2278)
	v2279 = Mem0[ds:bx + di:byte] + cl
	Mem0[ds:bx + di:byte] = v2279
	SCZO = cond(v2279)
	cx = cx - Mem0[ds:si:word16]
	SCZO = cond(cx)
	v2280 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v2280
	SCZO = cond(v2280)
	v2281 = Mem0[ss:bp + di:byte] + ah
	Mem0[ss:bp + di:byte] = v2281
	SCZO = cond(v2281)
	al = al ^ Mem0[ds:bx + si:byte]
	SZO = cond(al)
	C = false
	v2282 = Mem0[ds:bx:byte] + cl
	Mem0[ds:bx:byte] = v2282
	SCZO = cond(v2282)
	v2283 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2283
	SCZO = cond(v2283)
	v2284 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2284
	SCZO = cond(v2284)
	v2285 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2285
	SCZO = cond(v2285)
	v2286 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v2286
	SCZO = cond(v2286)
	v2287 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v2287
	SCZO = cond(v2287)
	bh = bh + bh
	SCZO = cond(bh)
l0177_74C0:
	v2582 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2582
	SCZO = cond(v2582)
	v2583 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2583
	SCZO = cond(v2583)
	v2584 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2584
	SCZO = cond(v2584)
	v2585 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2585
	SCZO = cond(v2585)
	v2586 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2586
	SCZO = cond(v2586)
	v2587 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2587
	SCZO = cond(v2587)
	v2588 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2588
	SCZO = cond(v2588)
	v2589 = Mem0[ss:bp + si:word16] + cx
	Mem0[ss:bp + si:word16] = v2589
	SCZO = cond(v2589)
	v2590 = Mem0[ds:bx + si:byte] | al
	Mem0[ds:bx + si:byte] = v2590
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	al = al + Mem0[ds:bx + si:byte]
	SCZO = cond(al)
	v2591 = Mem0[ss:bp + si:byte] - dh
	Mem0[ss:bp + si:byte] = v2591
	SCZO = cond(v2591)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	v2592 = Mem0[ds:bx:byte] + cl
	Mem0[ds:bx:byte] = v2592
	SCZO = cond(v2592)
	v2593 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2593
	SCZO = cond(v2593)
	v2594 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2594
	SCZO = cond(v2594)
	v2595 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2595
	SCZO = cond(v2595)
	v2596 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v2596
	SCZO = cond(v2596)
	v2597 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v2597
	SCZO = cond(v2597)
	bh = bh + bh
	SCZO = cond(bh)
l0177_74F6:
	v3645 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3645
	SCZO = cond(v3645)
	v3646 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3646
	SCZO = cond(v3646)
	v3647 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3647
	SCZO = cond(v3647)
	v3648 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3648
	SCZO = cond(v3648)
	v3649 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3649
	SCZO = cond(v3649)
	v3650 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3650
	SCZO = cond(v3650)
	v3651 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3651
	SCZO = cond(v3651)
	goto l0177_7504
	// succ:  l0177_7504
l0177_7503:
	v1608 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v1608
	SCZO = cond(v1608)
	// succ:  l0177_7504
l0177_7504:
	dx = dx | Mem0[ds:0x0200:word16]
	SZO = cond(dx)
	C = false
	v1609 = Mem0[ss:bp + si:byte] + dh
	Mem0[ss:bp + si:byte] = v1609
	SCZO = cond(v1609)
	al = al ^ Mem0[ds:0x0F00:byte]
	SZO = cond(al)
	C = false
	v1610 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1610
	SCZO = cond(v1610)
	v1611 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1611
	SCZO = cond(v1611)
	v1612 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1612
	SCZO = cond(v1612)
	v1613 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v1613
	SCZO = cond(v1613)
	v1614 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v1614
	SCZO = cond(v1614)
	bh = bh + bh
	SCZO = cond(bh)
l0177_7522:
	v1000 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1000
	SCZO = cond(v1000)
	v1001 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1001
	SCZO = cond(v1001)
	al = al + 0x00
	SCZO = cond(al)
	v1002 = Mem0[ds:bx + 0x0000 + di:byte] + dl
	Mem0[ds:bx + 0x0000 + di:byte] = v1002
	SCZO = cond(v1002)
	v1003 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1003
	SCZO = cond(v1003)
	v1004 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1004
	SCZO = cond(v1004)
	v1005 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1005
	SCZO = cond(v1005)
	v1006 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1006
	SCZO = cond(v1006)
	v1007 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1007
	SCZO = cond(v1007)
	v1008 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1008
	SCZO = cond(v1008)
	v1009 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1009
	SCZO = cond(v1009)
	v1010 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v1010
	SCZO = cond(v1010)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	al = al + 0x00
	SCZO = cond(al)
	goto l0177_753E
	// succ:  l0177_753E
l0177_753D:
	v1616 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1616
	SCZO = cond(v1616)
	goto l0177_753F
	// succ:  l0177_753F
l0177_753E:
	v1042 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1042
	SCZO = cond(v1042)
	// succ:  l0177_753F
l0177_753F:
	dh = dh ^ Mem0[ss:bp + si:byte]
	SZO = cond(dh)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	v1043 = Mem0[ds:bx:byte] + cl
	Mem0[ds:bx:byte] = v1043
	SCZO = cond(v1043)
	v1044 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1044
	SCZO = cond(v1044)
	v1045 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1045
	SCZO = cond(v1045)
	v1046 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1046
	SCZO = cond(v1046)
	v1047 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v1047
	SCZO = cond(v1047)
	v1048 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v1048
	SCZO = cond(v1048)
	goto l0177_754F
	// succ:  l0177_754F
l0177_754E:
	v999 = Mem0[ds:bx + si:word16] + ax
	Mem0[ds:bx + si:word16] = v999
	SCZO = cond(v999)
l0177_754F:
	bh = bh + bh
	SCZO = cond(bh)
l0177_75C0:
	v31 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v31
	SCZO = cond(v31)
	v32 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v32
	SCZO = cond(v32)
	v33 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v33
	SCZO = cond(v33)
	v34 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v34
	SCZO = cond(v34)
	ch = ch + Mem0[ds:bx + si:byte]
	SCZO = cond(ch)
	v36 = Mem0[ss:bp + 0x0004 + si:byte] + dl
	Mem0[ss:bp + 0x0004 + si:byte] = v36
	SCZO = cond(v36)
	al = al - Mem0[ds:bx + si:byte]
	SCZO = cond(al)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	al = al + 0x04
	SCZO = cond(al)
	v37 = Mem0[ds:bx + 0x0000 + di:byte] + ah
	Mem0[ds:bx + 0x0000 + di:byte] = v37
	SCZO = cond(v37)
	v38 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v38
	SCZO = cond(v38)
	v39 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v39
	SCZO = cond(v39)
	v40 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v40
	SCZO = cond(v40)
	v41 = Mem0[ds:bx + 0xA803 + si:byte] + dh
	Mem0[ds:bx + 0xA803 + si:byte] = v41
	SCZO = cond(v41)
	bx = bx + Mem0[ds:(bx + 0x8C03) + si:word16]
	SCZO = cond(bx)
	di = di + Mem0[ss:bp + 0x0003:word16]
	SCZO = cond(di)
	branch Test(OV,O) l0177_75EB
	// succ:  l0177_75E8 l0177_75EB
l0177_75E8:
	v43 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v43
	SCZO = cond(v43)
	v44 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v44
	SCZO = cond(v44)
	goto l0177_75EC
	// succ:  l0177_75EC
l0177_75EB:
	v52 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v52
	SCZO = cond(v52)
	goto l0177_75ED
	// succ:  l0177_75ED
l0177_75EC:
	v45 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v45
	SCZO = cond(v45)
	// succ:  l0177_75ED
l0177_75ED:
	v46 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v46
	SCZO = cond(v46)
	v47 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v47
	SCZO = cond(v47)
	al = al + 0x00 + C
	SCZO = cond(al)
	al = al + Mem0[ds:bx + si:byte]
	SCZO = cond(al)
	dh = dh ^ Mem0[ss:bp + si:byte]
	SZO = cond(dh)
	C = false
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v49 = Mem0[ds:bx:byte] + cl
	Mem0[ds:bx:byte] = v49
	SCZO = cond(v49)
	v50 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v50
	SCZO = cond(v50)
	v51 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v51
	SCZO = cond(v51)
	// succ:  l0177_75FF
l0177_75FF:
	v4434 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4434
	SCZO = cond(v4434)
	v4435 = Mem0[ss:bp + si:byte] + al
	Mem0[ss:bp + si:byte] = v4435
	SCZO = cond(v4435)
	v4436 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v4436
	SCZO = cond(v4436)
	bh = bh + bh
	SCZO = cond(bh)
l0177_7689:
	v4438 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4438
	SCZO = cond(v4438)
	v4439 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4439
	SCZO = cond(v4439)
	v4440 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4440
	SCZO = cond(v4440)
	v4441 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4441
	SCZO = cond(v4441)
	v4442 = Mem0[ss:bp + si:byte] + cl
	Mem0[ss:bp + si:byte] = v4442
	SCZO = cond(v4442)
	C = __aaa(al, ah, &al, &ah)
	ax = ax & Mem0[ds:bx + si:word16]
	SZO = cond(ax)
	C = false
	ax = ax + Mem0[ds:bx + si:word16]
	SCZO = cond(ax)
	dh = dh ^ Mem0[ss:bp + si:byte]
	SZO = cond(dh)
	C = false
	v4443 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4443
	SCZO = cond(v4443)
l0177_77FF:
	ax = ax + Mem0[ss:bp + di:word16]
	SCZO = cond(ax)
	al = al + 0x04
	SCZO = cond(al)
	al = al + 0x04
	SCZO = cond(al)
	ax = ax + 0x0505
	SCZO = cond(ax)
	ax = ax + 0x0606
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	al = al + Mem0[ss:bp + si:byte]
	SCZO = cond(al)
	ax = ax + Mem0[ss:bp + di:word16]
	SCZO = cond(ax)
	al = al + 0x04
	SCZO = cond(al)
	al = al + 0x04
	SCZO = cond(al)
	ax = ax + 0x0505
	SCZO = cond(ax)
	ax = ax + 0x0606
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v4175 = Mem0[ss:bp + si:byte] | al
	Mem0[ss:bp + si:byte] = v4175
	SZO = cond(Mem0[ss:bp + si:byte])
	C = false
	ax = ax + Mem0[ss:bp + di:word16]
	SCZO = cond(ax)
	al = al + 0x04
	SCZO = cond(al)
	al = al + 0x05
	SCZO = cond(al)
	ax = ax + 0x0605
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v4176 = Mem0[ds:bx + si:byte] | cl
	Mem0[ds:bx + si:byte] = v4176
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4177 = Mem0[ss:bp + di:byte] | al
	Mem0[ss:bp + di:byte] = v4177
	SZO = cond(Mem0[ss:bp + di:byte])
	C = false
	ax = ax + Mem0[ds:si:word16]
	SCZO = cond(ax)
	al = al + 0x05
	SCZO = cond(al)
	ax = ax + 0x0505
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v4178 = Mem0[ds:bx + si:byte] | cl
	Mem0[ds:bx + si:byte] = v4178
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4179 = Mem0[ds:bx + di:byte] | cl
	Mem0[ds:bx + di:byte] = v4179
	SZO = cond(Mem0[ds:bx + di:byte])
	C = false
	ax = ax + Mem0[ds:si:word16]
	SCZO = cond(ax)
	al = al + 0x05
	SCZO = cond(al)
	ax = ax + 0x0605
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v4180 = Mem0[ds:bx + si:byte] | cl
	Mem0[ds:bx + si:byte] = v4180
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4181 = Mem0[ds:bx + si:byte] | cl
	Mem0[ds:bx + si:byte] = v4181
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4182 = Mem0[ds:bx + di:word16] | cx
	Mem0[ds:bx + di:word16] = v4182
	SZO = cond(Mem0[ds:bx + di:word16])
	C = false
	v4183 = Mem0[ds:si:word16] | ax
	Mem0[ds:si:word16] = v4183
	SZO = cond(Mem0[ds:si:word16])
	C = false
	al = al + 0x05
	SCZO = cond(al)
	ax = ax + 0x0605
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v4184 = Mem0[ds:bx + si:byte] | cl
	Mem0[ds:bx + si:byte] = v4184
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4185 = Mem0[ds:bx + si:byte] | cl
	Mem0[ds:bx + si:byte] = v4185
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4186 = Mem0[ds:bx + di:word16] | cx
	Mem0[ds:bx + di:word16] = v4186
	SZO = cond(Mem0[ds:bx + di:word16])
	C = false
	v4187 = Mem0[ss:bp + si:word16] | cx
	Mem0[ss:bp + si:word16] = v4187
	SZO = cond(Mem0[ss:bp + si:word16])
	C = false
	al = al + 0x05
	SCZO = cond(al)
	ax = ax + 0x0606
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v4188 = Mem0[ds:bx + si:byte] | cl
	Mem0[ds:bx + si:byte] = v4188
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4189 = Mem0[ds:bx + si:byte] | cl
	Mem0[ds:bx + si:byte] = v4189
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4190 = Mem0[ds:bx + di:word16] | cx
	Mem0[ds:bx + di:word16] = v4190
	SZO = cond(Mem0[ds:bx + di:word16])
	C = false
	v4191 = Mem0[ds:bx + di:word16] | cx
	Mem0[ds:bx + di:word16] = v4191
	SZO = cond(Mem0[ds:bx + di:word16])
	C = false
	cl = cl | Mem0[ss:bp + si:byte]
	SZO = cond(cl)
	C = false
	ax = ax + 0x0605
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v4192 = Mem0[ds:bx + si:byte] | cl
	Mem0[ds:bx + si:byte] = v4192
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4193 = Mem0[ds:bx + si:byte] | cl
	Mem0[ds:bx + si:byte] = v4193
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4194 = Mem0[ds:bx + si:byte] | cl
	Mem0[ds:bx + si:byte] = v4194
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4195 = Mem0[ds:bx + di:word16] | cx
	Mem0[ds:bx + di:word16] = v4195
	SZO = cond(Mem0[ds:bx + di:word16])
	C = false
	v4196 = Mem0[ds:bx + di:word16] | cx
	Mem0[ds:bx + di:word16] = v4196
	SZO = cond(Mem0[ds:bx + di:word16])
	C = false
	v4197 = Mem0[ss:bp + si:word16] | cx
	Mem0[ss:bp + si:word16] = v4197
	SZO = cond(Mem0[ss:bp + si:word16])
	C = false
	al = al | Mem0[ds:di:byte]
	SZO = cond(al)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v4198 = Mem0[ds:bx + si:byte] | cl
	Mem0[ds:bx + si:byte] = v4198
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4199 = Mem0[ds:bx + si:byte] | cl
	Mem0[ds:bx + si:byte] = v4199
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4200 = Mem0[ds:bx + si:byte] | cl
	Mem0[ds:bx + si:byte] = v4200
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4201 = Mem0[ds:bx + di:word16] | cx
	Mem0[ds:bx + di:word16] = v4201
	SZO = cond(Mem0[ds:bx + di:word16])
	C = false
	v4202 = Mem0[ds:bx + di:word16] | cx
	Mem0[ds:bx + di:word16] = v4202
	SZO = cond(Mem0[ds:bx + di:word16])
	C = false
	v4203 = Mem0[ss:bp + si:word16] | cx
	Mem0[ss:bp + si:word16] = v4203
	SZO = cond(Mem0[ss:bp + si:word16])
	C = false
	cl = cl | Mem0[ss:bp + si:byte]
	SZO = cond(cl)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v4204 = Mem0[ds:bx + si:byte] | cl
	Mem0[ds:bx + si:byte] = v4204
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4205 = Mem0[ds:bx + si:byte] | cl
	Mem0[ds:bx + si:byte] = v4205
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4206 = Mem0[ds:bx + si:byte] | cl
	Mem0[ds:bx + si:byte] = v4206
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v4207 = Mem0[ds:bx + di:word16] | cx
	Mem0[ds:bx + di:word16] = v4207
	SZO = cond(Mem0[ds:bx + di:word16])
	C = false
	v4208 = Mem0[ds:bx + di:word16] | cx
	Mem0[ds:bx + di:word16] = v4208
	SZO = cond(Mem0[ds:bx + di:word16])
	C = false
	v4209 = Mem0[ss:bp + si:word16] | cx
	Mem0[ss:bp + si:word16] = v4209
	SZO = cond(Mem0[ss:bp + si:word16])
	C = false
	cl = cl | Mem0[ss:bp + si:byte]
	SZO = cond(cl)
	C = false
	al = al | Mem0[ss:bp + si:byte]
	SZO = cond(al)
	C = false
	v4210 = Mem0[ds:bx + di:word16] + bx + C
	Mem0[ds:bx + di:word16] = v4210
	SCZO = cond(v4210)
	v4211 = Mem0[ss:bp + di:byte] + al
	Mem0[ss:bp + di:byte] = v4211
	SCZO = cond(v4211)
	v4212 = Mem0[ds:di:byte] + ch
	Mem0[ds:di:byte] = v4212
	SCZO = cond(v4212)
	al = al ^ Mem0[ds:bx + si:byte]
	SZO = cond(al)
	C = false
	v4213 = Mem0[ds:bx:byte] + cl
	Mem0[ds:bx:byte] = v4213
	SCZO = cond(v4213)
	v4214 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4214
	SCZO = cond(v4214)
	v4215 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4215
	SCZO = cond(v4215)
	v4216 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4216
	SCZO = cond(v4216)
	v4217 = Mem0[ss:bp + si:byte] + al
	Mem0[ss:bp + si:byte] = v4217
	SCZO = cond(v4217)
	v4218 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v4218
	SCZO = cond(v4218)
	bh = bh + bh
	SCZO = cond(bh)
l0177_78E9:
	dx = dx + 0x0001
	SZO = cond(dx)
	al = al + 0x00
	SCZO = cond(al)
	v3629 = Mem0[ds:bx + 0x0000 + di:byte] + ah
	Mem0[ds:bx + 0x0000 + di:byte] = v3629
	SCZO = cond(v3629)
	v3630 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3630
	SCZO = cond(v3630)
	v3631 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3631
	SCZO = cond(v3631)
	v3632 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3632
	SCZO = cond(v3632)
	v3633 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3633
	SCZO = cond(v3633)
	v3634 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3634
	SCZO = cond(v3634)
	v3635 = Mem0[ds:si:byte] + al
	Mem0[ds:si:byte] = v3635
	SCZO = cond(v3635)
	dx = dx - Mem0[ds:si:word16] - C
	SCZO = cond(dx)
	v3636 = Mem0[ss:bp + si:byte] + al
	Mem0[ss:bp + si:byte] = v3636
	SCZO = cond(v3636)
	v3637 = Mem0[ss:bp + si:byte] + dh
	Mem0[ss:bp + si:byte] = v3637
	SCZO = cond(v3637)
	cl = cl ^ Mem0[ss:bp + si:byte]
	SZO = cond(cl)
	C = false
	v3638 = Mem0[ds:bx:byte] + cl
	Mem0[ds:bx:byte] = v3638
	SCZO = cond(v3638)
	v3639 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3639
	SCZO = cond(v3639)
	v3640 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3640
	SCZO = cond(v3640)
	v3641 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3641
	SCZO = cond(v3641)
	v3642 = Mem0[ds:si:byte] + al
	Mem0[ds:si:byte] = v3642
	SCZO = cond(v3642)
	v3643 = Mem0[ss:bp + si:byte] + al
	Mem0[ss:bp + si:byte] = v3643
	SCZO = cond(v3643)
	bh = bh + bh
	SCZO = cond(bh)
l0177_7D4D:
	ax = ax ^ 0x0011
	SZO = cond(ax)
	C = false
	al = al + Mem0[ds:bx + si:byte]
	SCZO = cond(al)
	dh = dh ^ Mem0[ss:bp + si:byte]
	SZO = cond(dh)
	C = false
	v1911 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1911
	SCZO = cond(v1911)
l0177_7D81:
	v1593 = Mem0[ds:di:byte] + al
	Mem0[ds:di:byte] = v1593
	SCZO = cond(v1593)
	al = al & 0x14
	SZO = cond(al)
	C = false
	v1594 = Mem0[ss:bp + si:byte] + al
	Mem0[ss:bp + si:byte] = v1594
	SCZO = cond(v1594)
	v1595 = Mem0[ss:bp + di:byte] + ah
	Mem0[ss:bp + di:byte] = v1595
	SCZO = cond(v1595)
	al = al ^ Mem0[ds:bx + di:byte]
	SZO = cond(al)
	C = false
	v1596 = Mem0[ds:bx:byte] + cl
	Mem0[ds:bx:byte] = v1596
	SCZO = cond(v1596)
	v1597 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1597
	SCZO = cond(v1597)
	v1598 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1598
	SCZO = cond(v1598)
	v1599 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1599
	SCZO = cond(v1599)
	v1600 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v1600
	SCZO = cond(v1600)
	v1601 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v1601
	SCZO = cond(v1601)
	bh = bh + bh
	SCZO = cond(bh)
l0177_832F_in_fn0177_0B70:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_83ED:
	v2871 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2871
	SCZO = cond(v2871)
	v2872 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2872
	SCZO = cond(v2872)
	v2873 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2873
	SCZO = cond(v2873)
	v2874 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2874
	SCZO = cond(v2874)
	v2875 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2875
	SCZO = cond(v2875)
	v2876 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2876
	SCZO = cond(v2876)
	v2877 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2877
	SCZO = cond(v2877)
	v2878 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2878
	SCZO = cond(v2878)
	v2879 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2879
	SCZO = cond(v2879)
	v2880 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2880
	SCZO = cond(v2880)
	v2881 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2881
	SCZO = cond(v2881)
	v2882 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2882
	SCZO = cond(v2882)
	v2883 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2883
	SCZO = cond(v2883)
	v2884 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2884
	SCZO = cond(v2884)
	v2885 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2885
	SCZO = cond(v2885)
	v2886 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2886
	SCZO = cond(v2886)
	v2887 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2887
	SCZO = cond(v2887)
	v2888 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2888
	SCZO = cond(v2888)
	v2889 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2889
	SCZO = cond(v2889)
	v2890 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2890
	SCZO = cond(v2890)
	v2891 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2891
	SCZO = cond(v2891)
	v2892 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2892
	SCZO = cond(v2892)
	v2893 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2893
	SCZO = cond(v2893)
	v2894 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2894
	SCZO = cond(v2894)
	v2895 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2895
	SCZO = cond(v2895)
	v2896 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2896
	SCZO = cond(v2896)
	v2897 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2897
	SCZO = cond(v2897)
	v2898 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2898
	SCZO = cond(v2898)
	v2899 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2899
	SCZO = cond(v2899)
	v2900 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2900
	SCZO = cond(v2900)
	v2901 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2901
	SCZO = cond(v2901)
	v2902 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2902
	SCZO = cond(v2902)
	v2903 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2903
	SCZO = cond(v2903)
	v2904 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2904
	SCZO = cond(v2904)
	v2905 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2905
	SCZO = cond(v2905)
	v2906 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2906
	SCZO = cond(v2906)
	v2907 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2907
	SCZO = cond(v2907)
	v2908 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2908
	SCZO = cond(v2908)
	v2909 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2909
	SCZO = cond(v2909)
	v2910 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2910
	SCZO = cond(v2910)
	v2911 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2911
	SCZO = cond(v2911)
	v2912 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2912
	SCZO = cond(v2912)
	v2913 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2913
	SCZO = cond(v2913)
	v2914 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2914
	SCZO = cond(v2914)
	v2915 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2915
	SCZO = cond(v2915)
	v2916 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2916
	SCZO = cond(v2916)
	v2917 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2917
	SCZO = cond(v2917)
	v2918 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2918
	SCZO = cond(v2918)
	v2919 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2919
	SCZO = cond(v2919)
	v2920 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2920
	SCZO = cond(v2920)
	v2921 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2921
	SCZO = cond(v2921)
	v2922 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2922
	SCZO = cond(v2922)
	v2923 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2923
	SCZO = cond(v2923)
	v2924 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2924
	SCZO = cond(v2924)
	v2925 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2925
	SCZO = cond(v2925)
	v2926 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2926
	SCZO = cond(v2926)
	v2927 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2927
	SCZO = cond(v2927)
	v2928 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2928
	SCZO = cond(v2928)
	v2929 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2929
	SCZO = cond(v2929)
	v2930 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2930
	SCZO = cond(v2930)
	v2931 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2931
	SCZO = cond(v2931)
	v2932 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2932
	SCZO = cond(v2932)
	v2933 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2933
	SCZO = cond(v2933)
	v2934 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2934
	SCZO = cond(v2934)
	v2935 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2935
	SCZO = cond(v2935)
	v2936 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2936
	SCZO = cond(v2936)
	v2937 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2937
	SCZO = cond(v2937)
	v2938 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2938
	SCZO = cond(v2938)
	v2939 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2939
	SCZO = cond(v2939)
	v2940 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2940
	SCZO = cond(v2940)
	v2941 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2941
	SCZO = cond(v2941)
	v2942 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2942
	SCZO = cond(v2942)
	v2943 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2943
	SCZO = cond(v2943)
	v2944 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2944
	SCZO = cond(v2944)
	v2945 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2945
	SCZO = cond(v2945)
	v2946 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2946
	SCZO = cond(v2946)
	v2947 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2947
	SCZO = cond(v2947)
	v2948 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2948
	SCZO = cond(v2948)
	v2949 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2949
	SCZO = cond(v2949)
	v2950 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2950
	SCZO = cond(v2950)
	v2951 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2951
	SCZO = cond(v2951)
	v2952 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2952
	SCZO = cond(v2952)
	v2953 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2953
	SCZO = cond(v2953)
	v2954 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2954
	SCZO = cond(v2954)
	v2955 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2955
	SCZO = cond(v2955)
	v2956 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2956
	SCZO = cond(v2956)
	v2957 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2957
	SCZO = cond(v2957)
	v2958 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2958
	SCZO = cond(v2958)
	v2959 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2959
	SCZO = cond(v2959)
	v2960 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2960
	SCZO = cond(v2960)
	v2961 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2961
	SCZO = cond(v2961)
	v2962 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2962
	SCZO = cond(v2962)
	v2963 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2963
	SCZO = cond(v2963)
	v2964 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2964
	SCZO = cond(v2964)
	v2965 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2965
	SCZO = cond(v2965)
	v2966 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2966
	SCZO = cond(v2966)
	v2967 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2967
	SCZO = cond(v2967)
	v2968 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2968
	SCZO = cond(v2968)
	v2969 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2969
	SCZO = cond(v2969)
	v2970 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2970
	SCZO = cond(v2970)
	v2971 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2971
	SCZO = cond(v2971)
	v2972 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2972
	SCZO = cond(v2972)
	v2973 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2973
	SCZO = cond(v2973)
	v2974 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2974
	SCZO = cond(v2974)
	v2975 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2975
	SCZO = cond(v2975)
	v2976 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2976
	SCZO = cond(v2976)
	v2977 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2977
	SCZO = cond(v2977)
	v2978 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2978
	SCZO = cond(v2978)
	v2979 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2979
	SCZO = cond(v2979)
	v2980 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2980
	SCZO = cond(v2980)
	v2981 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2981
	SCZO = cond(v2981)
	v2982 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2982
	SCZO = cond(v2982)
	v2983 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2983
	SCZO = cond(v2983)
	v2984 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2984
	SCZO = cond(v2984)
	v2985 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2985
	SCZO = cond(v2985)
	v2986 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2986
	SCZO = cond(v2986)
	v2987 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2987
	SCZO = cond(v2987)
	v2988 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2988
	SCZO = cond(v2988)
	v2989 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2989
	SCZO = cond(v2989)
	v2990 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2990
	SCZO = cond(v2990)
	v2991 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2991
	SCZO = cond(v2991)
	v2992 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2992
	SCZO = cond(v2992)
	v2993 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2993
	SCZO = cond(v2993)
	v2994 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2994
	SCZO = cond(v2994)
	v2995 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2995
	SCZO = cond(v2995)
	v2996 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2996
	SCZO = cond(v2996)
	v2997 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2997
	SCZO = cond(v2997)
	v2998 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2998
	SCZO = cond(v2998)
	v2999 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2999
	SCZO = cond(v2999)
	v3000 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3000
	SCZO = cond(v3000)
	v3001 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3001
	SCZO = cond(v3001)
	v3002 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3002
	SCZO = cond(v3002)
	v3003 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3003
	SCZO = cond(v3003)
	v3004 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3004
	SCZO = cond(v3004)
	v3005 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3005
	SCZO = cond(v3005)
	v3006 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3006
	SCZO = cond(v3006)
	v3007 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3007
	SCZO = cond(v3007)
	v3008 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3008
	SCZO = cond(v3008)
	v3009 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3009
	SCZO = cond(v3009)
	v3010 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3010
	SCZO = cond(v3010)
	v3011 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3011
	SCZO = cond(v3011)
	v3012 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3012
	SCZO = cond(v3012)
	v3013 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3013
	SCZO = cond(v3013)
	v3014 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3014
	SCZO = cond(v3014)
	v3015 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3015
	SCZO = cond(v3015)
	v3016 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3016
	SCZO = cond(v3016)
	v3017 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3017
	SCZO = cond(v3017)
	v3018 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3018
	SCZO = cond(v3018)
	v3019 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3019
	SCZO = cond(v3019)
	v3020 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3020
	SCZO = cond(v3020)
	v3021 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3021
	SCZO = cond(v3021)
	v3022 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3022
	SCZO = cond(v3022)
	v3023 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3023
	SCZO = cond(v3023)
	v3024 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3024
	SCZO = cond(v3024)
	v3025 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3025
	SCZO = cond(v3025)
	v3026 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3026
	SCZO = cond(v3026)
	v3027 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3027
	SCZO = cond(v3027)
	v3028 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3028
	SCZO = cond(v3028)
	v3029 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3029
	SCZO = cond(v3029)
	v3030 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3030
	SCZO = cond(v3030)
	v3031 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3031
	SCZO = cond(v3031)
	v3032 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3032
	SCZO = cond(v3032)
	v3033 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3033
	SCZO = cond(v3033)
	v3034 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3034
	SCZO = cond(v3034)
	v3035 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3035
	SCZO = cond(v3035)
	v3036 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3036
	SCZO = cond(v3036)
	v3037 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3037
	SCZO = cond(v3037)
	v3038 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3038
	SCZO = cond(v3038)
	v3039 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3039
	SCZO = cond(v3039)
	v3040 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3040
	SCZO = cond(v3040)
	v3041 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3041
	SCZO = cond(v3041)
	v3042 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3042
	SCZO = cond(v3042)
	v3043 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3043
	SCZO = cond(v3043)
	v3044 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3044
	SCZO = cond(v3044)
	v3045 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3045
	SCZO = cond(v3045)
	v3046 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3046
	SCZO = cond(v3046)
	v3047 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3047
	SCZO = cond(v3047)
	v3048 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3048
	SCZO = cond(v3048)
	v3049 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3049
	SCZO = cond(v3049)
	v3050 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3050
	SCZO = cond(v3050)
	v3051 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3051
	SCZO = cond(v3051)
	v3052 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3052
	SCZO = cond(v3052)
	v3053 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3053
	SCZO = cond(v3053)
	v3054 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3054
	SCZO = cond(v3054)
	v3055 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3055
	SCZO = cond(v3055)
	v3056 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3056
	SCZO = cond(v3056)
	v3057 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3057
	SCZO = cond(v3057)
	v3058 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3058
	SCZO = cond(v3058)
	v3059 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3059
	SCZO = cond(v3059)
	v3060 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3060
	SCZO = cond(v3060)
	v3061 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3061
	SCZO = cond(v3061)
	v3062 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3062
	SCZO = cond(v3062)
	v3063 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3063
	SCZO = cond(v3063)
	v3064 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3064
	SCZO = cond(v3064)
	v3065 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3065
	SCZO = cond(v3065)
	v3066 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3066
	SCZO = cond(v3066)
	v3067 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3067
	SCZO = cond(v3067)
	v3068 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3068
	SCZO = cond(v3068)
	v3069 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3069
	SCZO = cond(v3069)
	v3070 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3070
	SCZO = cond(v3070)
	v3071 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3071
	SCZO = cond(v3071)
	v3072 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3072
	SCZO = cond(v3072)
	v3073 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3073
	SCZO = cond(v3073)
	v3074 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3074
	SCZO = cond(v3074)
	v3075 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3075
	SCZO = cond(v3075)
	v3076 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3076
	SCZO = cond(v3076)
	v3077 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3077
	SCZO = cond(v3077)
	v3078 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3078
	SCZO = cond(v3078)
	v3079 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3079
	SCZO = cond(v3079)
	v3080 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3080
	SCZO = cond(v3080)
	v3081 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3081
	SCZO = cond(v3081)
	v3082 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3082
	SCZO = cond(v3082)
	v3083 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3083
	SCZO = cond(v3083)
	v3084 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3084
	SCZO = cond(v3084)
	v3085 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3085
	SCZO = cond(v3085)
	v3086 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3086
	SCZO = cond(v3086)
	v3087 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3087
	SCZO = cond(v3087)
	v3088 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3088
	SCZO = cond(v3088)
	v3089 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3089
	SCZO = cond(v3089)
	v3090 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3090
	SCZO = cond(v3090)
	v3091 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3091
	SCZO = cond(v3091)
	v3092 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3092
	SCZO = cond(v3092)
	v3093 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3093
	SCZO = cond(v3093)
	v3094 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3094
	SCZO = cond(v3094)
	v3095 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3095
	SCZO = cond(v3095)
	v3096 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3096
	SCZO = cond(v3096)
	v3097 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3097
	SCZO = cond(v3097)
	v3098 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3098
	SCZO = cond(v3098)
	v3099 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3099
	SCZO = cond(v3099)
	v3100 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3100
	SCZO = cond(v3100)
	v3101 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3101
	SCZO = cond(v3101)
	v3102 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3102
	SCZO = cond(v3102)
	v3103 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3103
	SCZO = cond(v3103)
	v3104 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3104
	SCZO = cond(v3104)
	v3105 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3105
	SCZO = cond(v3105)
	v3106 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3106
	SCZO = cond(v3106)
	v3107 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3107
	SCZO = cond(v3107)
	v3108 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3108
	SCZO = cond(v3108)
	v3109 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3109
	SCZO = cond(v3109)
	v3110 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3110
	SCZO = cond(v3110)
	v3111 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3111
	SCZO = cond(v3111)
	v3112 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3112
	SCZO = cond(v3112)
	v3113 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3113
	SCZO = cond(v3113)
	v3114 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3114
	SCZO = cond(v3114)
	v3115 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3115
	SCZO = cond(v3115)
	v3116 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3116
	SCZO = cond(v3116)
	v3117 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3117
	SCZO = cond(v3117)
	v3118 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3118
	SCZO = cond(v3118)
	v3119 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3119
	SCZO = cond(v3119)
	v3120 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3120
	SCZO = cond(v3120)
	v3121 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3121
	SCZO = cond(v3121)
	v3122 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3122
	SCZO = cond(v3122)
	v3123 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3123
	SCZO = cond(v3123)
	v3124 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3124
	SCZO = cond(v3124)
	v3125 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3125
	SCZO = cond(v3125)
	v3126 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3126
	SCZO = cond(v3126)
	v3127 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3127
	SCZO = cond(v3127)
	v3128 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3128
	SCZO = cond(v3128)
	v3129 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3129
	SCZO = cond(v3129)
	v3130 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3130
	SCZO = cond(v3130)
	v3131 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3131
	SCZO = cond(v3131)
	v3132 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3132
	SCZO = cond(v3132)
	v3133 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3133
	SCZO = cond(v3133)
	v3134 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3134
	SCZO = cond(v3134)
	v3135 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3135
	SCZO = cond(v3135)
	v3136 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3136
	SCZO = cond(v3136)
	v3137 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3137
	SCZO = cond(v3137)
	v3138 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3138
	SCZO = cond(v3138)
	v3139 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3139
	SCZO = cond(v3139)
	v3140 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3140
	SCZO = cond(v3140)
	v3141 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3141
	SCZO = cond(v3141)
	v3142 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3142
	SCZO = cond(v3142)
	v3143 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3143
	SCZO = cond(v3143)
	v3144 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3144
	SCZO = cond(v3144)
	v3145 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3145
	SCZO = cond(v3145)
	v3146 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3146
	SCZO = cond(v3146)
	v3147 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3147
	SCZO = cond(v3147)
	v3148 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3148
	SCZO = cond(v3148)
	v3149 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3149
	SCZO = cond(v3149)
	v3150 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3150
	SCZO = cond(v3150)
	v3151 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3151
	SCZO = cond(v3151)
	v3152 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3152
	SCZO = cond(v3152)
	v3153 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3153
	SCZO = cond(v3153)
	v3154 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3154
	SCZO = cond(v3154)
	v3155 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3155
	SCZO = cond(v3155)
	v3156 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3156
	SCZO = cond(v3156)
	v3157 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3157
	SCZO = cond(v3157)
	v3158 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3158
	SCZO = cond(v3158)
	v3159 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3159
	SCZO = cond(v3159)
	v3160 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3160
	SCZO = cond(v3160)
	v3161 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3161
	SCZO = cond(v3161)
	v3162 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3162
	SCZO = cond(v3162)
	v3163 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3163
	SCZO = cond(v3163)
	v3164 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3164
	SCZO = cond(v3164)
	v3165 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3165
	SCZO = cond(v3165)
	v3166 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3166
	SCZO = cond(v3166)
	v3167 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3167
	SCZO = cond(v3167)
	v3168 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3168
	SCZO = cond(v3168)
	v3169 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3169
	SCZO = cond(v3169)
	v3170 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3170
	SCZO = cond(v3170)
	v3171 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3171
	SCZO = cond(v3171)
	v3172 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3172
	SCZO = cond(v3172)
	v3173 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3173
	SCZO = cond(v3173)
	v3174 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3174
	SCZO = cond(v3174)
	v3175 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3175
	SCZO = cond(v3175)
	v3176 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3176
	SCZO = cond(v3176)
	v3177 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3177
	SCZO = cond(v3177)
	v3178 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3178
	SCZO = cond(v3178)
	v3179 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3179
	SCZO = cond(v3179)
	v3180 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3180
	SCZO = cond(v3180)
	v3181 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3181
	SCZO = cond(v3181)
	v3182 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3182
	SCZO = cond(v3182)
	v3183 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3183
	SCZO = cond(v3183)
	v3184 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3184
	SCZO = cond(v3184)
	v3185 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3185
	SCZO = cond(v3185)
	v3186 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3186
	SCZO = cond(v3186)
	v3187 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3187
	SCZO = cond(v3187)
	v3188 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3188
	SCZO = cond(v3188)
	v3189 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3189
	SCZO = cond(v3189)
	v3190 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3190
	SCZO = cond(v3190)
	v3191 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3191
	SCZO = cond(v3191)
	v3192 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3192
	SCZO = cond(v3192)
	v3193 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3193
	SCZO = cond(v3193)
	v3194 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3194
	SCZO = cond(v3194)
	v3195 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3195
	SCZO = cond(v3195)
	v3196 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3196
	SCZO = cond(v3196)
	v3197 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3197
	SCZO = cond(v3197)
	v3198 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3198
	SCZO = cond(v3198)
	v3199 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3199
	SCZO = cond(v3199)
	v3200 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3200
	SCZO = cond(v3200)
	v3201 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3201
	SCZO = cond(v3201)
	v3202 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3202
	SCZO = cond(v3202)
	v3203 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3203
	SCZO = cond(v3203)
	v3204 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3204
	SCZO = cond(v3204)
	v3205 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3205
	SCZO = cond(v3205)
	v3206 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3206
	SCZO = cond(v3206)
	v3207 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3207
	SCZO = cond(v3207)
	v3208 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3208
	SCZO = cond(v3208)
	v3209 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3209
	SCZO = cond(v3209)
	v3210 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3210
	SCZO = cond(v3210)
	v3211 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3211
	SCZO = cond(v3211)
	v3212 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3212
	SCZO = cond(v3212)
	v3213 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3213
	SCZO = cond(v3213)
	v3214 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3214
	SCZO = cond(v3214)
	v3215 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3215
	SCZO = cond(v3215)
	v3216 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3216
	SCZO = cond(v3216)
	v3217 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3217
	SCZO = cond(v3217)
	v3218 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3218
	SCZO = cond(v3218)
	v3219 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3219
	SCZO = cond(v3219)
	v3220 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3220
	SCZO = cond(v3220)
	v3221 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3221
	SCZO = cond(v3221)
	v3222 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3222
	SCZO = cond(v3222)
	v3223 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3223
	SCZO = cond(v3223)
	v3224 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3224
	SCZO = cond(v3224)
	v3225 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3225
	SCZO = cond(v3225)
	v3226 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3226
	SCZO = cond(v3226)
	v3227 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3227
	SCZO = cond(v3227)
	v3228 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3228
	SCZO = cond(v3228)
	v3229 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3229
	SCZO = cond(v3229)
	v3230 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3230
	SCZO = cond(v3230)
	v3231 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3231
	SCZO = cond(v3231)
	v3232 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3232
	SCZO = cond(v3232)
	v3233 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3233
	SCZO = cond(v3233)
	v3234 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3234
	SCZO = cond(v3234)
	v3235 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3235
	SCZO = cond(v3235)
	v3236 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3236
	SCZO = cond(v3236)
	v3237 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3237
	SCZO = cond(v3237)
	v3238 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3238
	SCZO = cond(v3238)
	v3239 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3239
	SCZO = cond(v3239)
	v3240 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3240
	SCZO = cond(v3240)
	v3241 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3241
	SCZO = cond(v3241)
	v3242 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3242
	SCZO = cond(v3242)
	v3243 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3243
	SCZO = cond(v3243)
	v3244 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3244
	SCZO = cond(v3244)
	v3245 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3245
	SCZO = cond(v3245)
	v3246 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3246
	SCZO = cond(v3246)
	v3247 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3247
	SCZO = cond(v3247)
	v3248 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3248
	SCZO = cond(v3248)
	v3249 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3249
	SCZO = cond(v3249)
	v3250 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3250
	SCZO = cond(v3250)
	v3251 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3251
	SCZO = cond(v3251)
	v3252 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3252
	SCZO = cond(v3252)
	v3253 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3253
	SCZO = cond(v3253)
	v3254 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3254
	SCZO = cond(v3254)
	v3255 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3255
	SCZO = cond(v3255)
	v3256 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3256
	SCZO = cond(v3256)
	v3257 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3257
	SCZO = cond(v3257)
	v3258 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3258
	SCZO = cond(v3258)
	v3259 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3259
	SCZO = cond(v3259)
	v3260 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3260
	SCZO = cond(v3260)
	v3261 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3261
	SCZO = cond(v3261)
	v3262 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3262
	SCZO = cond(v3262)
	v3263 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3263
	SCZO = cond(v3263)
	v3264 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3264
	SCZO = cond(v3264)
	v3265 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3265
	SCZO = cond(v3265)
	v3266 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3266
	SCZO = cond(v3266)
	v3267 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3267
	SCZO = cond(v3267)
	v3268 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3268
	SCZO = cond(v3268)
	v3269 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3269
	SCZO = cond(v3269)
	v3270 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3270
	SCZO = cond(v3270)
	v3271 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3271
	SCZO = cond(v3271)
	v3272 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3272
	SCZO = cond(v3272)
	v3273 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3273
	SCZO = cond(v3273)
	v3274 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3274
	SCZO = cond(v3274)
	v3275 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3275
	SCZO = cond(v3275)
	v3276 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3276
	SCZO = cond(v3276)
	v3277 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3277
	SCZO = cond(v3277)
	v3278 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3278
	SCZO = cond(v3278)
	v3279 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3279
	SCZO = cond(v3279)
	v3280 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3280
	SCZO = cond(v3280)
	v3281 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3281
	SCZO = cond(v3281)
	v3282 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3282
	SCZO = cond(v3282)
	v3283 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3283
	SCZO = cond(v3283)
	v3284 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3284
	SCZO = cond(v3284)
	v3285 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3285
	SCZO = cond(v3285)
	v3286 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3286
	SCZO = cond(v3286)
	v3287 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3287
	SCZO = cond(v3287)
	v3288 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3288
	SCZO = cond(v3288)
	v3289 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3289
	SCZO = cond(v3289)
	v3290 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3290
	SCZO = cond(v3290)
	v3291 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3291
	SCZO = cond(v3291)
	v3292 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3292
	SCZO = cond(v3292)
	v3293 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3293
	SCZO = cond(v3293)
	v3294 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3294
	SCZO = cond(v3294)
	v3295 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3295
	SCZO = cond(v3295)
	v3296 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3296
	SCZO = cond(v3296)
	v3297 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3297
	SCZO = cond(v3297)
	v3298 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3298
	SCZO = cond(v3298)
	v3299 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3299
	SCZO = cond(v3299)
	v3300 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3300
	SCZO = cond(v3300)
	v3301 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3301
	SCZO = cond(v3301)
	v3302 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3302
	SCZO = cond(v3302)
	v3303 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3303
	SCZO = cond(v3303)
	v3304 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3304
	SCZO = cond(v3304)
	v3305 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3305
	SCZO = cond(v3305)
	v3306 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3306
	SCZO = cond(v3306)
	v3307 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3307
	SCZO = cond(v3307)
	v3308 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3308
	SCZO = cond(v3308)
	v3309 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3309
	SCZO = cond(v3309)
	v3310 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3310
	SCZO = cond(v3310)
	v3311 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3311
	SCZO = cond(v3311)
	v3312 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3312
	SCZO = cond(v3312)
	v3313 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3313
	SCZO = cond(v3313)
	v3314 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3314
	SCZO = cond(v3314)
	v3315 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3315
	SCZO = cond(v3315)
	v3316 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3316
	SCZO = cond(v3316)
	v3317 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3317
	SCZO = cond(v3317)
	v3318 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3318
	SCZO = cond(v3318)
	v3319 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3319
	SCZO = cond(v3319)
	v3320 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3320
	SCZO = cond(v3320)
	v3321 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3321
	SCZO = cond(v3321)
	v3322 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3322
	SCZO = cond(v3322)
	v3323 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3323
	SCZO = cond(v3323)
	v3324 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3324
	SCZO = cond(v3324)
	v3325 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3325
	SCZO = cond(v3325)
	v3326 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3326
	SCZO = cond(v3326)
	v3327 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3327
	SCZO = cond(v3327)
	v3328 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3328
	SCZO = cond(v3328)
	v3329 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3329
	SCZO = cond(v3329)
	v3330 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3330
	SCZO = cond(v3330)
	v3331 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3331
	SCZO = cond(v3331)
	v3332 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3332
	SCZO = cond(v3332)
	v3333 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3333
	SCZO = cond(v3333)
	v3334 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3334
	SCZO = cond(v3334)
	v3335 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3335
	SCZO = cond(v3335)
	v3336 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3336
	SCZO = cond(v3336)
	v3337 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3337
	SCZO = cond(v3337)
	v3338 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3338
	SCZO = cond(v3338)
	v3339 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3339
	SCZO = cond(v3339)
	v3340 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3340
	SCZO = cond(v3340)
	v3341 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3341
	SCZO = cond(v3341)
	v3342 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3342
	SCZO = cond(v3342)
	v3343 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3343
	SCZO = cond(v3343)
	v3344 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3344
	SCZO = cond(v3344)
	v3345 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3345
	SCZO = cond(v3345)
	v3346 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3346
	SCZO = cond(v3346)
	v3347 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3347
	SCZO = cond(v3347)
	v3348 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3348
	SCZO = cond(v3348)
	v3349 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3349
	SCZO = cond(v3349)
	v3350 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3350
	SCZO = cond(v3350)
	v3351 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3351
	SCZO = cond(v3351)
	v3352 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3352
	SCZO = cond(v3352)
	v3353 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3353
	SCZO = cond(v3353)
	v3354 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3354
	SCZO = cond(v3354)
	v3355 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3355
	SCZO = cond(v3355)
	v3356 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3356
	SCZO = cond(v3356)
	v3357 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3357
	SCZO = cond(v3357)
	v3358 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3358
	SCZO = cond(v3358)
	v3359 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3359
	SCZO = cond(v3359)
	v3360 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3360
	SCZO = cond(v3360)
	v3361 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3361
	SCZO = cond(v3361)
	v3362 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3362
	SCZO = cond(v3362)
	v3363 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3363
	SCZO = cond(v3363)
	v3364 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3364
	SCZO = cond(v3364)
	v3365 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3365
	SCZO = cond(v3365)
	v3366 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3366
	SCZO = cond(v3366)
	v3367 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3367
	SCZO = cond(v3367)
	v3368 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3368
	SCZO = cond(v3368)
	v3369 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3369
	SCZO = cond(v3369)
	v3370 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3370
	SCZO = cond(v3370)
	v3371 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3371
	SCZO = cond(v3371)
	v3372 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3372
	SCZO = cond(v3372)
	v3373 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3373
	SCZO = cond(v3373)
	v3374 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3374
	SCZO = cond(v3374)
	v3375 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3375
	SCZO = cond(v3375)
	v3376 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3376
	SCZO = cond(v3376)
	v3377 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3377
	SCZO = cond(v3377)
	v3378 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3378
	SCZO = cond(v3378)
	v3379 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3379
	SCZO = cond(v3379)
	v3380 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3380
	SCZO = cond(v3380)
	v3381 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3381
	SCZO = cond(v3381)
	v3382 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3382
	SCZO = cond(v3382)
	v3383 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3383
	SCZO = cond(v3383)
	v3384 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3384
	SCZO = cond(v3384)
	v3385 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3385
	SCZO = cond(v3385)
	v3386 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3386
	SCZO = cond(v3386)
	v3387 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3387
	SCZO = cond(v3387)
	v3388 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3388
	SCZO = cond(v3388)
	v3389 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3389
	SCZO = cond(v3389)
	v3390 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3390
	SCZO = cond(v3390)
	v3391 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3391
	SCZO = cond(v3391)
	v3392 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3392
	SCZO = cond(v3392)
	v3393 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3393
	SCZO = cond(v3393)
	v3394 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3394
	SCZO = cond(v3394)
	v3395 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3395
	SCZO = cond(v3395)
	v3396 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3396
	SCZO = cond(v3396)
	v3397 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3397
	SCZO = cond(v3397)
	v3398 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3398
	SCZO = cond(v3398)
	v3399 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3399
	SCZO = cond(v3399)
	v3400 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3400
	SCZO = cond(v3400)
	v3401 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3401
	SCZO = cond(v3401)
	v3402 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3402
	SCZO = cond(v3402)
	v3403 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3403
	SCZO = cond(v3403)
	v3404 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3404
	SCZO = cond(v3404)
	v3405 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3405
	SCZO = cond(v3405)
	v3406 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3406
	SCZO = cond(v3406)
	v3407 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3407
	SCZO = cond(v3407)
	v3408 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3408
	SCZO = cond(v3408)
	v3409 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3409
	SCZO = cond(v3409)
	v3410 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3410
	SCZO = cond(v3410)
	v3411 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3411
	SCZO = cond(v3411)
	v3412 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3412
	SCZO = cond(v3412)
	v3413 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3413
	SCZO = cond(v3413)
	v3414 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3414
	SCZO = cond(v3414)
	v3415 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3415
	SCZO = cond(v3415)
	v3416 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3416
	SCZO = cond(v3416)
	v3417 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3417
	SCZO = cond(v3417)
	v3418 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3418
	SCZO = cond(v3418)
	v3419 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3419
	SCZO = cond(v3419)
	v3420 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3420
	SCZO = cond(v3420)
	v3421 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3421
	SCZO = cond(v3421)
	v3422 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3422
	SCZO = cond(v3422)
	v3423 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3423
	SCZO = cond(v3423)
	v3424 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3424
	SCZO = cond(v3424)
	v3425 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3425
	SCZO = cond(v3425)
	v3426 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3426
	SCZO = cond(v3426)
	v3427 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3427
	SCZO = cond(v3427)
	v3428 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3428
	SCZO = cond(v3428)
	v3429 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3429
	SCZO = cond(v3429)
	v3430 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3430
	SCZO = cond(v3430)
	v3431 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3431
	SCZO = cond(v3431)
	v3432 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3432
	SCZO = cond(v3432)
	v3433 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3433
	SCZO = cond(v3433)
	v3434 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3434
	SCZO = cond(v3434)
	v3435 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3435
	SCZO = cond(v3435)
	v3436 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3436
	SCZO = cond(v3436)
	v3437 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3437
	SCZO = cond(v3437)
	v3438 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3438
	SCZO = cond(v3438)
	v3439 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3439
	SCZO = cond(v3439)
	v3440 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3440
	SCZO = cond(v3440)
	v3441 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3441
	SCZO = cond(v3441)
	v3442 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3442
	SCZO = cond(v3442)
	v3443 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3443
	SCZO = cond(v3443)
	v3444 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3444
	SCZO = cond(v3444)
	v3445 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3445
	SCZO = cond(v3445)
	v3446 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3446
	SCZO = cond(v3446)
	v3447 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3447
	SCZO = cond(v3447)
	v3448 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3448
	SCZO = cond(v3448)
	v3449 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3449
	SCZO = cond(v3449)
	v3450 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3450
	SCZO = cond(v3450)
	v3451 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3451
	SCZO = cond(v3451)
	v3452 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3452
	SCZO = cond(v3452)
	v3453 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3453
	SCZO = cond(v3453)
	v3454 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3454
	SCZO = cond(v3454)
	v3455 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3455
	SCZO = cond(v3455)
	v3456 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3456
	SCZO = cond(v3456)
	v3457 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3457
	SCZO = cond(v3457)
	v3458 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3458
	SCZO = cond(v3458)
	v3459 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3459
	SCZO = cond(v3459)
	v3460 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3460
	SCZO = cond(v3460)
	v3461 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3461
	SCZO = cond(v3461)
	v3462 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3462
	SCZO = cond(v3462)
	v3463 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3463
	SCZO = cond(v3463)
	v3464 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3464
	SCZO = cond(v3464)
	v3465 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3465
	SCZO = cond(v3465)
	v3466 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3466
	SCZO = cond(v3466)
	v3467 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3467
	SCZO = cond(v3467)
	v3468 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3468
	SCZO = cond(v3468)
	v3469 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3469
	SCZO = cond(v3469)
	v3470 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3470
	SCZO = cond(v3470)
	v3471 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3471
	SCZO = cond(v3471)
	v3472 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3472
	SCZO = cond(v3472)
	v3473 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3473
	SCZO = cond(v3473)
	v3474 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3474
	SCZO = cond(v3474)
	v3475 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3475
	SCZO = cond(v3475)
	v3476 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3476
	SCZO = cond(v3476)
	v3477 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3477
	SCZO = cond(v3477)
	v3478 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3478
	SCZO = cond(v3478)
	v3479 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3479
	SCZO = cond(v3479)
	v3480 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3480
	SCZO = cond(v3480)
	v3481 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3481
	SCZO = cond(v3481)
	v3482 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3482
	SCZO = cond(v3482)
	v3483 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3483
	SCZO = cond(v3483)
	v3484 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3484
	SCZO = cond(v3484)
	v3485 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3485
	SCZO = cond(v3485)
	v3486 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3486
	SCZO = cond(v3486)
	v3487 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3487
	SCZO = cond(v3487)
	v3488 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3488
	SCZO = cond(v3488)
	v3489 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3489
	SCZO = cond(v3489)
	v3490 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3490
	SCZO = cond(v3490)
	v3491 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3491
	SCZO = cond(v3491)
	v3492 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3492
	SCZO = cond(v3492)
	v3493 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3493
	SCZO = cond(v3493)
	v3494 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3494
	SCZO = cond(v3494)
	v3495 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3495
	SCZO = cond(v3495)
	v3496 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3496
	SCZO = cond(v3496)
	v3497 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3497
	SCZO = cond(v3497)
	v3498 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3498
	SCZO = cond(v3498)
	v3499 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3499
	SCZO = cond(v3499)
	v3500 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3500
	SCZO = cond(v3500)
	v3501 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3501
	SCZO = cond(v3501)
	v3502 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3502
	SCZO = cond(v3502)
	v3503 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3503
	SCZO = cond(v3503)
	v3504 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3504
	SCZO = cond(v3504)
	v3505 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3505
	SCZO = cond(v3505)
	v3506 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3506
	SCZO = cond(v3506)
	v3507 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3507
	SCZO = cond(v3507)
	v3508 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3508
	SCZO = cond(v3508)
	// succ:  l0177_88E9
l0177_88E9:
	v4238 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4238
	SCZO = cond(v4238)
	v4239 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4239
	SCZO = cond(v4239)
	v4240 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4240
	SCZO = cond(v4240)
	v4241 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4241
	SCZO = cond(v4241)
	v4242 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4242
	SCZO = cond(v4242)
	v4243 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4243
	SCZO = cond(v4243)
	v4244 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4244
	SCZO = cond(v4244)
	v4245 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4245
	SCZO = cond(v4245)
	v4246 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4246
	SCZO = cond(v4246)
	v4247 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4247
	SCZO = cond(v4247)
	v4248 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4248
	SCZO = cond(v4248)
	v4249 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4249
	SCZO = cond(v4249)
	goto l0177_8901
	// succ:  l0177_8901
l0177_8900:
	v4064 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4064
	SCZO = cond(v4064)
l0177_8901:
	v4251 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4251
	SCZO = cond(v4251)
	// succ:  l0177_8902 l0177_8903
l0177_8902:
	v2198 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2198
	SCZO = cond(v2198)
	// succ:  l0177_8903
l0177_8903:
	v2199 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2199
	SCZO = cond(v2199)
	v2200 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2200
	SCZO = cond(v2200)
	goto l0177_8908
	// succ:  l0177_8908
l0177_8907:
	v1451 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1451
	SCZO = cond(v1451)
	// succ:  l0177_8908
l0177_8908:
	v1452 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1452
	SCZO = cond(v1452)
	// succ:  l0177_890B
l0177_890B:
	v1011 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1011
	SCZO = cond(v1011)
	v1012 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1012
	SCZO = cond(v1012)
	v1013 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1013
	SCZO = cond(v1013)
	v1014 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1014
	SCZO = cond(v1014)
	v1015 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1015
	SCZO = cond(v1015)
	v1016 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1016
	SCZO = cond(v1016)
	v1017 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1017
	SCZO = cond(v1017)
	v1018 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1018
	SCZO = cond(v1018)
	v1019 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1019
	SCZO = cond(v1019)
	v1020 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1020
	SCZO = cond(v1020)
	v1021 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1021
	SCZO = cond(v1021)
	v1022 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1022
	SCZO = cond(v1022)
	v1023 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1023
	SCZO = cond(v1023)
	v1024 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1024
	SCZO = cond(v1024)
	v1025 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1025
	SCZO = cond(v1025)
	v1026 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1026
	SCZO = cond(v1026)
	v1027 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1027
	SCZO = cond(v1027)
	v1028 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1028
	SCZO = cond(v1028)
	v1029 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1029
	SCZO = cond(v1029)
	v1030 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1030
	SCZO = cond(v1030)
	v1031 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1031
	SCZO = cond(v1031)
	v1032 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1032
	SCZO = cond(v1032)
	v1033 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1033
	SCZO = cond(v1033)
	v1034 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1034
	SCZO = cond(v1034)
	v1035 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1035
	SCZO = cond(v1035)
	v1036 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1036
	SCZO = cond(v1036)
	v1037 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1037
	SCZO = cond(v1037)
	goto l0177_8941
	// succ:  l0177_8941
l0177_8940:
	v2128 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2128
	SCZO = cond(v2128)
	goto l0177_8942
	// succ:  l0177_8942
l0177_8941:
	v1049 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1049
	SCZO = cond(v1049)
	// succ:  l0177_8942
l0177_8942:
	v1050 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1050
	SCZO = cond(v1050)
	v1051 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1051
	SCZO = cond(v1051)
	// succ:  l0177_8947
l0177_8947:
	v4081 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4081
	SCZO = cond(v4081)
	v4082 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4082
	SCZO = cond(v4082)
	v4083 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4083
	SCZO = cond(v4083)
	v4084 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4084
	SCZO = cond(v4084)
	v4085 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4085
	SCZO = cond(v4085)
	v4086 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4086
	SCZO = cond(v4086)
	v4087 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4087
	SCZO = cond(v4087)
	v4088 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4088
	SCZO = cond(v4088)
	v4089 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4089
	SCZO = cond(v4089)
	v4090 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4090
	SCZO = cond(v4090)
	v4091 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4091
	SCZO = cond(v4091)
	v4092 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4092
	SCZO = cond(v4092)
	v4093 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4093
	SCZO = cond(v4093)
	v4094 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4094
	SCZO = cond(v4094)
	v4095 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4095
	SCZO = cond(v4095)
	v4096 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4096
	SCZO = cond(v4096)
	v4097 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4097
	SCZO = cond(v4097)
	v4098 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4098
	SCZO = cond(v4098)
	v4099 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4099
	SCZO = cond(v4099)
	v4100 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4100
	SCZO = cond(v4100)
	v4101 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4101
	SCZO = cond(v4101)
	v4102 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4102
	SCZO = cond(v4102)
	v4103 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4103
	SCZO = cond(v4103)
	v4104 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4104
	SCZO = cond(v4104)
	v4105 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4105
	SCZO = cond(v4105)
	v4106 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4106
	SCZO = cond(v4106)
	v4107 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4107
	SCZO = cond(v4107)
	v4108 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4108
	SCZO = cond(v4108)
	v4109 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4109
	SCZO = cond(v4109)
	v4110 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4110
	SCZO = cond(v4110)
	v4111 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4111
	SCZO = cond(v4111)
	v4112 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4112
	SCZO = cond(v4112)
	v4113 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4113
	SCZO = cond(v4113)
	v4114 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4114
	SCZO = cond(v4114)
	v4115 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4115
	SCZO = cond(v4115)
	v4116 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4116
	SCZO = cond(v4116)
	v4117 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4117
	SCZO = cond(v4117)
	v4118 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4118
	SCZO = cond(v4118)
	v4119 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4119
	SCZO = cond(v4119)
	v4120 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4120
	SCZO = cond(v4120)
	v4121 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4121
	SCZO = cond(v4121)
	v4122 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4122
	SCZO = cond(v4122)
	v4123 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4123
	SCZO = cond(v4123)
	v4124 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4124
	SCZO = cond(v4124)
	v4125 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4125
	SCZO = cond(v4125)
	v4126 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4126
	SCZO = cond(v4126)
	v4127 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4127
	SCZO = cond(v4127)
	v4128 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4128
	SCZO = cond(v4128)
	v4129 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4129
	SCZO = cond(v4129)
	v4130 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4130
	SCZO = cond(v4130)
	v4131 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4131
	SCZO = cond(v4131)
	v4132 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4132
	SCZO = cond(v4132)
	v4133 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4133
	SCZO = cond(v4133)
	v4134 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4134
	SCZO = cond(v4134)
	v4135 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4135
	SCZO = cond(v4135)
	v4136 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4136
	SCZO = cond(v4136)
	v4137 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4137
	SCZO = cond(v4137)
	v4138 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4138
	SCZO = cond(v4138)
	v4139 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4139
	SCZO = cond(v4139)
	v4140 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4140
	SCZO = cond(v4140)
	v4141 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4141
	SCZO = cond(v4141)
	v4142 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4142
	SCZO = cond(v4142)
	v4143 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4143
	SCZO = cond(v4143)
	v4144 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4144
	SCZO = cond(v4144)
	v4145 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4145
	SCZO = cond(v4145)
	v4146 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4146
	SCZO = cond(v4146)
	v4147 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4147
	SCZO = cond(v4147)
	v4148 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4148
	SCZO = cond(v4148)
	v4149 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4149
	SCZO = cond(v4149)
	v4150 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4150
	SCZO = cond(v4150)
	v4151 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4151
	SCZO = cond(v4151)
	v4152 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4152
	SCZO = cond(v4152)
	v4153 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4153
	SCZO = cond(v4153)
	v4154 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4154
	SCZO = cond(v4154)
	v4155 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4155
	SCZO = cond(v4155)
	v4156 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4156
	SCZO = cond(v4156)
	v4157 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4157
	SCZO = cond(v4157)
	v4158 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4158
	SCZO = cond(v4158)
	v4159 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4159
	SCZO = cond(v4159)
	v4160 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4160
	SCZO = cond(v4160)
	v4161 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4161
	SCZO = cond(v4161)
	v4162 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4162
	SCZO = cond(v4162)
	v4163 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4163
	SCZO = cond(v4163)
	v4164 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4164
	SCZO = cond(v4164)
	v4165 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4165
	SCZO = cond(v4165)
	v4166 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4166
	SCZO = cond(v4166)
	v4167 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4167
	SCZO = cond(v4167)
	v4168 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4168
	SCZO = cond(v4168)
	v4169 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4169
	SCZO = cond(v4169)
	v4170 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4170
	SCZO = cond(v4170)
	v4171 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4171
	SCZO = cond(v4171)
	v4172 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4172
	SCZO = cond(v4172)
	goto l0177_89FF
	// succ:  l0177_89FF
l0177_89FE:
	v1913 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1913
	SCZO = cond(v1913)
l0177_89FF:
	v4174 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4174
	SCZO = cond(v4174)
	// succ:  l0177_8A00 l0177_8A01
l0177_8A00:
	v2689 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2689
	SCZO = cond(v2689)
	goto l0177_8A02
	// succ:  l0177_8A02
l0177_8A01:
	v877 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v877
	SCZO = cond(v877)
	// succ:  l0177_8A02
l0177_8A02:
	v878 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v878
	SCZO = cond(v878)
	v879 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v879
	SCZO = cond(v879)
	v880 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v880
	SCZO = cond(v880)
	v881 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v881
	SCZO = cond(v881)
	v882 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v882
	SCZO = cond(v882)
	v883 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v883
	SCZO = cond(v883)
	v884 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v884
	SCZO = cond(v884)
	v885 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v885
	SCZO = cond(v885)
	v886 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v886
	SCZO = cond(v886)
	v887 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v887
	SCZO = cond(v887)
	v888 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v888
	SCZO = cond(v888)
	v889 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v889
	SCZO = cond(v889)
	v890 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v890
	SCZO = cond(v890)
	v891 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v891
	SCZO = cond(v891)
	v892 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v892
	SCZO = cond(v892)
	v893 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v893
	SCZO = cond(v893)
	v894 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v894
	SCZO = cond(v894)
	v895 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v895
	SCZO = cond(v895)
	v896 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v896
	SCZO = cond(v896)
	v897 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v897
	SCZO = cond(v897)
	v898 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v898
	SCZO = cond(v898)
	v899 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v899
	SCZO = cond(v899)
	v900 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v900
	SCZO = cond(v900)
	v901 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v901
	SCZO = cond(v901)
	v902 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v902
	SCZO = cond(v902)
	v903 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v903
	SCZO = cond(v903)
	v904 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v904
	SCZO = cond(v904)
	v905 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v905
	SCZO = cond(v905)
	v906 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v906
	SCZO = cond(v906)
	v907 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v907
	SCZO = cond(v907)
	v908 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v908
	SCZO = cond(v908)
	v909 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v909
	SCZO = cond(v909)
	v910 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v910
	SCZO = cond(v910)
	v911 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v911
	SCZO = cond(v911)
	v912 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v912
	SCZO = cond(v912)
	v913 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v913
	SCZO = cond(v913)
	v914 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v914
	SCZO = cond(v914)
	v915 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v915
	SCZO = cond(v915)
	v916 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v916
	SCZO = cond(v916)
	v917 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v917
	SCZO = cond(v917)
	v918 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v918
	SCZO = cond(v918)
	v919 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v919
	SCZO = cond(v919)
	v920 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v920
	SCZO = cond(v920)
	v921 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v921
	SCZO = cond(v921)
	v922 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v922
	SCZO = cond(v922)
	v923 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v923
	SCZO = cond(v923)
	v924 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v924
	SCZO = cond(v924)
	v925 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v925
	SCZO = cond(v925)
	v926 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v926
	SCZO = cond(v926)
	v927 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v927
	SCZO = cond(v927)
	v928 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v928
	SCZO = cond(v928)
	v929 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v929
	SCZO = cond(v929)
	v930 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v930
	SCZO = cond(v930)
	v931 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v931
	SCZO = cond(v931)
	v932 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v932
	SCZO = cond(v932)
	v933 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v933
	SCZO = cond(v933)
	v934 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v934
	SCZO = cond(v934)
	v935 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v935
	SCZO = cond(v935)
	v936 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v936
	SCZO = cond(v936)
	v937 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v937
	SCZO = cond(v937)
	v938 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v938
	SCZO = cond(v938)
	v939 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v939
	SCZO = cond(v939)
	v940 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v940
	SCZO = cond(v940)
	v941 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v941
	SCZO = cond(v941)
	v942 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v942
	SCZO = cond(v942)
	v943 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v943
	SCZO = cond(v943)
	v944 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v944
	SCZO = cond(v944)
	v945 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v945
	SCZO = cond(v945)
	v946 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v946
	SCZO = cond(v946)
	v947 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v947
	SCZO = cond(v947)
	v948 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v948
	SCZO = cond(v948)
	v949 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v949
	SCZO = cond(v949)
	v950 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v950
	SCZO = cond(v950)
	v951 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v951
	SCZO = cond(v951)
	v952 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v952
	SCZO = cond(v952)
	v953 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v953
	SCZO = cond(v953)
	v954 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v954
	SCZO = cond(v954)
	v955 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v955
	SCZO = cond(v955)
	v956 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v956
	SCZO = cond(v956)
	v957 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v957
	SCZO = cond(v957)
	v958 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v958
	SCZO = cond(v958)
	v959 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v959
	SCZO = cond(v959)
	v960 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v960
	SCZO = cond(v960)
	v961 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v961
	SCZO = cond(v961)
	v962 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v962
	SCZO = cond(v962)
	v963 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v963
	SCZO = cond(v963)
	v964 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v964
	SCZO = cond(v964)
	v965 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v965
	SCZO = cond(v965)
	v966 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v966
	SCZO = cond(v966)
	v967 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v967
	SCZO = cond(v967)
	v968 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v968
	SCZO = cond(v968)
	v969 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v969
	SCZO = cond(v969)
	v970 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v970
	SCZO = cond(v970)
	v971 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v971
	SCZO = cond(v971)
	v972 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v972
	SCZO = cond(v972)
	v973 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v973
	SCZO = cond(v973)
	v974 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v974
	SCZO = cond(v974)
	v975 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v975
	SCZO = cond(v975)
	v976 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v976
	SCZO = cond(v976)
	v977 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v977
	SCZO = cond(v977)
	v978 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v978
	SCZO = cond(v978)
	v979 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v979
	SCZO = cond(v979)
	v980 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v980
	SCZO = cond(v980)
	v981 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v981
	SCZO = cond(v981)
	v982 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v982
	SCZO = cond(v982)
	v983 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v983
	SCZO = cond(v983)
	v984 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v984
	SCZO = cond(v984)
	v985 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v985
	SCZO = cond(v985)
	v986 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v986
	SCZO = cond(v986)
	v987 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v987
	SCZO = cond(v987)
	v988 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v988
	SCZO = cond(v988)
	v989 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v989
	SCZO = cond(v989)
	v990 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v990
	SCZO = cond(v990)
	v991 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v991
	SCZO = cond(v991)
	v992 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v992
	SCZO = cond(v992)
	v993 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v993
	SCZO = cond(v993)
	v994 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v994
	SCZO = cond(v994)
	v995 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v995
	SCZO = cond(v995)
	v996 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v996
	SCZO = cond(v996)
	goto l0177_8AF1
	// succ:  l0177_8AF1
l0177_8AF0:
	v997 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v997
	SCZO = cond(v997)
	goto l0177_8AF2
	// succ:  l0177_8AF2
l0177_8AF1:
	v1038 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1038
	SCZO = cond(v1038)
	goto l0177_8AF3
	// succ:  l0177_8AF3
l0177_8AF2:
	v1039 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1039
	SCZO = cond(v1039)
	goto l0177_8AF4
	// succ:  l0177_8AF4
l0177_8AF3:
	v1053 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1053
	SCZO = cond(v1053)
	goto l0177_8AF5
	// succ:  l0177_8AF5
l0177_8AF4:
	v1054 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1054
	SCZO = cond(v1054)
	goto l0177_8AF6
	// succ:  l0177_8AF6
l0177_8AF5:
	v1065 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1065
	SCZO = cond(v1065)
	goto l0177_8AF7
	// succ:  l0177_8AF7
l0177_8AF6:
	v1066 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1066
	SCZO = cond(v1066)
	goto l0177_8AF8
	// succ:  l0177_8AF8
l0177_8AF7:
	v1070 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1070
	SCZO = cond(v1070)
	goto l0177_8AF9
	// succ:  l0177_8AF9
l0177_8AF8:
	v1071 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1071
	SCZO = cond(v1071)
	goto l0177_8AFA
	// succ:  l0177_8AFA
l0177_8AF9:
	v1116 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1116
	SCZO = cond(v1116)
	goto l0177_8AFB
	// succ:  l0177_8AFB
l0177_8AFA:
	v1117 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1117
	SCZO = cond(v1117)
	goto l0177_8AFC
	// succ:  l0177_8AFC
l0177_8AFB:
	v1301 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1301
	SCZO = cond(v1301)
	goto l0177_8AFD
	// succ:  l0177_8AFD
l0177_8AFC:
	v1302 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1302
	SCZO = cond(v1302)
	goto l0177_8AFE
	// succ:  l0177_8AFE
l0177_8AFD:
	v1436 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1436
	SCZO = cond(v1436)
	goto l0177_8AFF
	// succ:  l0177_8AFF
l0177_8AFE:
	v1437 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1437
	SCZO = cond(v1437)
	goto l0177_8B00
	// succ:  l0177_8B00
l0177_8AFF:
	v1440 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1440
	SCZO = cond(v1440)
	goto l0177_8B01
	// succ:  l0177_8B01
l0177_8B00:
	v4070 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4070
	SCZO = cond(v4070)
	goto l0177_8B02
	// succ:  l0177_8B02
l0177_8B01:
	v2690 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2690
	SCZO = cond(v2690)
	goto l0177_8B03
	// succ:  l0177_8B03
l0177_8B02:
	v2868 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2868
	SCZO = cond(v2868)
	goto l0177_8B04
	// succ:  l0177_8B04
l0177_8B03:
	v2708 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2708
	SCZO = cond(v2708)
	// succ:  l0177_8B04
l0177_8B04:
	v2709 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2709
	SCZO = cond(v2709)
	// succ:  l0177_8B07
l0177_8B07:
	v1914 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1914
	SCZO = cond(v1914)
	v1915 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1915
	SCZO = cond(v1915)
	v1916 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1916
	SCZO = cond(v1916)
	v1917 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1917
	SCZO = cond(v1917)
	v1918 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1918
	SCZO = cond(v1918)
	v1919 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1919
	SCZO = cond(v1919)
	v1920 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1920
	SCZO = cond(v1920)
	goto l0177_8B15
	// succ:  l0177_8B15
l0177_8B14:
	v4219 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4219
	SCZO = cond(v4219)
	goto l0177_8B16
	// succ:  l0177_8B16
l0177_8B15:
	v1922 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1922
	SCZO = cond(v1922)
	// succ:  l0177_8B16
l0177_8B16:
	v1923 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1923
	SCZO = cond(v1923)
	v1924 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1924
	SCZO = cond(v1924)
	v1925 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1925
	SCZO = cond(v1925)
	v1926 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1926
	SCZO = cond(v1926)
	v1927 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1927
	SCZO = cond(v1927)
	v1928 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1928
	SCZO = cond(v1928)
	v1929 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1929
	SCZO = cond(v1929)
	v1930 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1930
	SCZO = cond(v1930)
	v1931 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1931
	SCZO = cond(v1931)
	v1932 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1932
	SCZO = cond(v1932)
	v1933 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1933
	SCZO = cond(v1933)
	v1934 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1934
	SCZO = cond(v1934)
	v1935 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1935
	SCZO = cond(v1935)
	v1936 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1936
	SCZO = cond(v1936)
	v1937 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1937
	SCZO = cond(v1937)
	v1938 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1938
	SCZO = cond(v1938)
	v1939 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1939
	SCZO = cond(v1939)
	v1940 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1940
	SCZO = cond(v1940)
	v1941 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1941
	SCZO = cond(v1941)
	v1942 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1942
	SCZO = cond(v1942)
	v1943 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1943
	SCZO = cond(v1943)
	v1944 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1944
	SCZO = cond(v1944)
	v1945 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1945
	SCZO = cond(v1945)
	v1946 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1946
	SCZO = cond(v1946)
	// succ:  l0177_8B47
l0177_8B47:
	v1443 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1443
	SCZO = cond(v1443)
	v1444 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1444
	SCZO = cond(v1444)
	v1445 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1445
	SCZO = cond(v1445)
	// succ:  l0177_8B4D
l0177_8B4D:
	v4072 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4072
	SCZO = cond(v4072)
	v4073 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4073
	SCZO = cond(v4073)
	// succ:  l0177_8B51
l0177_8B51:
	v4399 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4399
	SCZO = cond(v4399)
	v4400 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4400
	SCZO = cond(v4400)
	v4401 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4401
	SCZO = cond(v4401)
	v4402 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4402
	SCZO = cond(v4402)
	v4403 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4403
	SCZO = cond(v4403)
	v4404 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4404
	SCZO = cond(v4404)
	v4405 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4405
	SCZO = cond(v4405)
	v4406 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4406
	SCZO = cond(v4406)
	v4407 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4407
	SCZO = cond(v4407)
	v4408 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4408
	SCZO = cond(v4408)
	v4409 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4409
	SCZO = cond(v4409)
	v4410 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4410
	SCZO = cond(v4410)
	v4411 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4411
	SCZO = cond(v4411)
	v4412 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4412
	SCZO = cond(v4412)
	v4413 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4413
	SCZO = cond(v4413)
	v4414 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4414
	SCZO = cond(v4414)
	v4415 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4415
	SCZO = cond(v4415)
	v4416 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4416
	SCZO = cond(v4416)
	v4417 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4417
	SCZO = cond(v4417)
	v4418 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4418
	SCZO = cond(v4418)
	v4419 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4419
	SCZO = cond(v4419)
	v4420 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4420
	SCZO = cond(v4420)
	v4421 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4421
	SCZO = cond(v4421)
	v4422 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4422
	SCZO = cond(v4422)
	goto l0177_8B81
	// succ:  l0177_8B81
l0177_8B80:
	v801 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v801
	SCZO = cond(v801)
	// succ:  l0177_8B81
l0177_8B81:
	v802 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v802
	SCZO = cond(v802)
	v803 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v803
	SCZO = cond(v803)
	v804 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v804
	SCZO = cond(v804)
	v805 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v805
	SCZO = cond(v805)
	v806 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v806
	SCZO = cond(v806)
	v807 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v807
	SCZO = cond(v807)
	v808 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v808
	SCZO = cond(v808)
	v809 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v809
	SCZO = cond(v809)
	v810 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v810
	SCZO = cond(v810)
	v811 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v811
	SCZO = cond(v811)
	v812 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v812
	SCZO = cond(v812)
	v813 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v813
	SCZO = cond(v813)
	v814 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v814
	SCZO = cond(v814)
	v815 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v815
	SCZO = cond(v815)
	v816 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v816
	SCZO = cond(v816)
	v817 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v817
	SCZO = cond(v817)
	v818 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v818
	SCZO = cond(v818)
	v819 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v819
	SCZO = cond(v819)
	v820 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v820
	SCZO = cond(v820)
	v821 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v821
	SCZO = cond(v821)
	v822 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v822
	SCZO = cond(v822)
	v823 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v823
	SCZO = cond(v823)
	v824 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v824
	SCZO = cond(v824)
	v825 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v825
	SCZO = cond(v825)
	v826 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v826
	SCZO = cond(v826)
	v827 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v827
	SCZO = cond(v827)
	v828 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v828
	SCZO = cond(v828)
	v829 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v829
	SCZO = cond(v829)
	v830 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v830
	SCZO = cond(v830)
	v831 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v831
	SCZO = cond(v831)
	v832 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v832
	SCZO = cond(v832)
	v833 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v833
	SCZO = cond(v833)
	v834 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v834
	SCZO = cond(v834)
	v835 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v835
	SCZO = cond(v835)
	v836 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v836
	SCZO = cond(v836)
	v837 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v837
	SCZO = cond(v837)
	v838 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v838
	SCZO = cond(v838)
	v839 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v839
	SCZO = cond(v839)
	v840 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v840
	SCZO = cond(v840)
	v841 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v841
	SCZO = cond(v841)
	v842 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v842
	SCZO = cond(v842)
	v843 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v843
	SCZO = cond(v843)
	v844 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v844
	SCZO = cond(v844)
	v845 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v845
	SCZO = cond(v845)
	v846 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v846
	SCZO = cond(v846)
	v847 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v847
	SCZO = cond(v847)
	v848 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v848
	SCZO = cond(v848)
	v849 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v849
	SCZO = cond(v849)
	v850 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v850
	SCZO = cond(v850)
	v851 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v851
	SCZO = cond(v851)
	v852 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v852
	SCZO = cond(v852)
	v853 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v853
	SCZO = cond(v853)
	goto l0177_8BEA
	// succ:  l0177_8BEA
l0177_8BE9:
	v998 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v998
	SCZO = cond(v998)
	goto l0177_8BEB
	// succ:  l0177_8BEB
l0177_8BEA:
	v858 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v858
	SCZO = cond(v858)
	// succ:  l0177_8BEB
l0177_8BEB:
	v859 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v859
	SCZO = cond(v859)
	v860 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v860
	SCZO = cond(v860)
	// succ:  l0177_8BF0
l0177_8BF0:
	v3653 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3653
	SCZO = cond(v3653)
	v3654 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3654
	SCZO = cond(v3654)
	// succ:  l0177_8BF4
l0177_8BF4:
	v1446 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1446
	SCZO = cond(v1446)
	v1447 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1447
	SCZO = cond(v1447)
	v1448 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1448
	SCZO = cond(v1448)
	v1449 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1449
	SCZO = cond(v1449)
	v1450 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1450
	SCZO = cond(v1450)
	// succ:  l0177_8BFE
l0177_8BFE:
	v3656 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3656
	SCZO = cond(v3656)
	v3657 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3657
	SCZO = cond(v3657)
	v3658 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3658
	SCZO = cond(v3658)
	v3659 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3659
	SCZO = cond(v3659)
	v3660 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3660
	SCZO = cond(v3660)
	v3661 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3661
	SCZO = cond(v3661)
	v3662 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3662
	SCZO = cond(v3662)
	v3663 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3663
	SCZO = cond(v3663)
	v3664 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3664
	SCZO = cond(v3664)
	v3665 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3665
	SCZO = cond(v3665)
	v3666 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3666
	SCZO = cond(v3666)
	v3667 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3667
	SCZO = cond(v3667)
	v3668 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3668
	SCZO = cond(v3668)
	v3669 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3669
	SCZO = cond(v3669)
	v3670 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3670
	SCZO = cond(v3670)
	v3671 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3671
	SCZO = cond(v3671)
	v3672 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3672
	SCZO = cond(v3672)
	v3673 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3673
	SCZO = cond(v3673)
	v3674 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3674
	SCZO = cond(v3674)
	v3675 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3675
	SCZO = cond(v3675)
	v3676 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3676
	SCZO = cond(v3676)
	v3677 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3677
	SCZO = cond(v3677)
	v3678 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3678
	SCZO = cond(v3678)
	v3679 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3679
	SCZO = cond(v3679)
	v3680 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3680
	SCZO = cond(v3680)
	v3681 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3681
	SCZO = cond(v3681)
	v3682 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3682
	SCZO = cond(v3682)
	v3683 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3683
	SCZO = cond(v3683)
	v3684 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3684
	SCZO = cond(v3684)
	v3685 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3685
	SCZO = cond(v3685)
	v3686 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3686
	SCZO = cond(v3686)
	v3687 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3687
	SCZO = cond(v3687)
	v3688 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3688
	SCZO = cond(v3688)
	v3689 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3689
	SCZO = cond(v3689)
	v3690 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3690
	SCZO = cond(v3690)
	v3691 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3691
	SCZO = cond(v3691)
	v3692 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3692
	SCZO = cond(v3692)
	v3693 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3693
	SCZO = cond(v3693)
	v3694 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3694
	SCZO = cond(v3694)
	v3695 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3695
	SCZO = cond(v3695)
	v3696 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3696
	SCZO = cond(v3696)
	v3697 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3697
	SCZO = cond(v3697)
	v3698 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3698
	SCZO = cond(v3698)
	v3699 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3699
	SCZO = cond(v3699)
	v3700 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3700
	SCZO = cond(v3700)
	v3701 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3701
	SCZO = cond(v3701)
	v3702 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3702
	SCZO = cond(v3702)
	v3703 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3703
	SCZO = cond(v3703)
	v3704 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3704
	SCZO = cond(v3704)
	v3705 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3705
	SCZO = cond(v3705)
	v3706 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3706
	SCZO = cond(v3706)
	v3707 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3707
	SCZO = cond(v3707)
	v3708 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3708
	SCZO = cond(v3708)
	v3709 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3709
	SCZO = cond(v3709)
	v3710 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3710
	SCZO = cond(v3710)
	v3711 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3711
	SCZO = cond(v3711)
	v3712 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3712
	SCZO = cond(v3712)
	v3713 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3713
	SCZO = cond(v3713)
	v3714 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3714
	SCZO = cond(v3714)
	v3715 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3715
	SCZO = cond(v3715)
	v3716 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3716
	SCZO = cond(v3716)
	v3717 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3717
	SCZO = cond(v3717)
	v3718 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3718
	SCZO = cond(v3718)
	v3719 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3719
	SCZO = cond(v3719)
	v3720 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3720
	SCZO = cond(v3720)
	v3721 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3721
	SCZO = cond(v3721)
	v3722 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3722
	SCZO = cond(v3722)
	v3723 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3723
	SCZO = cond(v3723)
	v3724 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3724
	SCZO = cond(v3724)
	v3725 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3725
	SCZO = cond(v3725)
	v3726 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3726
	SCZO = cond(v3726)
	v3727 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3727
	SCZO = cond(v3727)
	v3728 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3728
	SCZO = cond(v3728)
	v3729 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3729
	SCZO = cond(v3729)
	v3730 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3730
	SCZO = cond(v3730)
	v3731 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3731
	SCZO = cond(v3731)
	v3732 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3732
	SCZO = cond(v3732)
	v3733 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3733
	SCZO = cond(v3733)
	v3734 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3734
	SCZO = cond(v3734)
	v3735 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3735
	SCZO = cond(v3735)
	v3736 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3736
	SCZO = cond(v3736)
	v3737 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3737
	SCZO = cond(v3737)
	v3738 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3738
	SCZO = cond(v3738)
	v3739 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3739
	SCZO = cond(v3739)
	v3740 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3740
	SCZO = cond(v3740)
	v3741 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3741
	SCZO = cond(v3741)
	v3742 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3742
	SCZO = cond(v3742)
	v3743 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3743
	SCZO = cond(v3743)
	v3744 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3744
	SCZO = cond(v3744)
	v3745 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3745
	SCZO = cond(v3745)
	v3746 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3746
	SCZO = cond(v3746)
	v3747 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3747
	SCZO = cond(v3747)
	v3748 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3748
	SCZO = cond(v3748)
	v3749 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3749
	SCZO = cond(v3749)
	v3750 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3750
	SCZO = cond(v3750)
	v3751 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3751
	SCZO = cond(v3751)
	v3752 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3752
	SCZO = cond(v3752)
	v3753 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3753
	SCZO = cond(v3753)
	v3754 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3754
	SCZO = cond(v3754)
	v3755 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3755
	SCZO = cond(v3755)
	v3756 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3756
	SCZO = cond(v3756)
	v3757 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3757
	SCZO = cond(v3757)
	v3758 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3758
	SCZO = cond(v3758)
	v3759 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3759
	SCZO = cond(v3759)
	v3760 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3760
	SCZO = cond(v3760)
	v3761 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3761
	SCZO = cond(v3761)
	v3762 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3762
	SCZO = cond(v3762)
	v3763 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3763
	SCZO = cond(v3763)
	v3764 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3764
	SCZO = cond(v3764)
	v3765 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3765
	SCZO = cond(v3765)
	v3766 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3766
	SCZO = cond(v3766)
	v3767 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3767
	SCZO = cond(v3767)
	v3768 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3768
	SCZO = cond(v3768)
	v3769 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3769
	SCZO = cond(v3769)
	v3770 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3770
	SCZO = cond(v3770)
	v3771 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3771
	SCZO = cond(v3771)
	v3772 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3772
	SCZO = cond(v3772)
	v3773 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3773
	SCZO = cond(v3773)
	v3774 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3774
	SCZO = cond(v3774)
	v3775 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3775
	SCZO = cond(v3775)
	v3776 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3776
	SCZO = cond(v3776)
	v3777 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3777
	SCZO = cond(v3777)
	v3778 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3778
	SCZO = cond(v3778)
	v3779 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3779
	SCZO = cond(v3779)
	v3780 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3780
	SCZO = cond(v3780)
	v3781 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3781
	SCZO = cond(v3781)
	v3782 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3782
	SCZO = cond(v3782)
	v3783 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3783
	SCZO = cond(v3783)
	v3784 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3784
	SCZO = cond(v3784)
	v3785 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3785
	SCZO = cond(v3785)
	v3786 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3786
	SCZO = cond(v3786)
	v3787 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3787
	SCZO = cond(v3787)
	v3788 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3788
	SCZO = cond(v3788)
	v3789 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3789
	SCZO = cond(v3789)
	v3790 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3790
	SCZO = cond(v3790)
	v3791 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3791
	SCZO = cond(v3791)
	v3792 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3792
	SCZO = cond(v3792)
	v3793 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3793
	SCZO = cond(v3793)
	v3794 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3794
	SCZO = cond(v3794)
	v3795 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3795
	SCZO = cond(v3795)
	v3796 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3796
	SCZO = cond(v3796)
	v3797 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3797
	SCZO = cond(v3797)
	v3798 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3798
	SCZO = cond(v3798)
	v3799 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3799
	SCZO = cond(v3799)
	v3800 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3800
	SCZO = cond(v3800)
	v3801 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3801
	SCZO = cond(v3801)
	v3802 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3802
	SCZO = cond(v3802)
	v3803 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3803
	SCZO = cond(v3803)
	v3804 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3804
	SCZO = cond(v3804)
	v3805 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3805
	SCZO = cond(v3805)
	v3806 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3806
	SCZO = cond(v3806)
	v3807 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3807
	SCZO = cond(v3807)
	v3808 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3808
	SCZO = cond(v3808)
	v3809 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3809
	SCZO = cond(v3809)
	v3810 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3810
	SCZO = cond(v3810)
	v3811 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3811
	SCZO = cond(v3811)
	v3812 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3812
	SCZO = cond(v3812)
	v3813 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3813
	SCZO = cond(v3813)
	v3814 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3814
	SCZO = cond(v3814)
	v3815 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3815
	SCZO = cond(v3815)
	v3816 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3816
	SCZO = cond(v3816)
	v3817 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3817
	SCZO = cond(v3817)
	v3818 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3818
	SCZO = cond(v3818)
	v3819 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3819
	SCZO = cond(v3819)
	v3820 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3820
	SCZO = cond(v3820)
	v3821 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3821
	SCZO = cond(v3821)
	v3822 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3822
	SCZO = cond(v3822)
	v3823 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3823
	SCZO = cond(v3823)
	v3824 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3824
	SCZO = cond(v3824)
	v3825 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3825
	SCZO = cond(v3825)
	v3826 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3826
	SCZO = cond(v3826)
	v3827 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3827
	SCZO = cond(v3827)
	v3828 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3828
	SCZO = cond(v3828)
	v3829 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3829
	SCZO = cond(v3829)
	v3830 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3830
	SCZO = cond(v3830)
	v3831 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3831
	SCZO = cond(v3831)
	v3832 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3832
	SCZO = cond(v3832)
	v3833 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3833
	SCZO = cond(v3833)
	v3834 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3834
	SCZO = cond(v3834)
	v3835 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3835
	SCZO = cond(v3835)
	v3836 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3836
	SCZO = cond(v3836)
	v3837 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3837
	SCZO = cond(v3837)
	v3838 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3838
	SCZO = cond(v3838)
	v3839 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3839
	SCZO = cond(v3839)
	v3840 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3840
	SCZO = cond(v3840)
	v3841 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3841
	SCZO = cond(v3841)
	v3842 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3842
	SCZO = cond(v3842)
	v3843 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3843
	SCZO = cond(v3843)
	v3844 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3844
	SCZO = cond(v3844)
	v3845 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3845
	SCZO = cond(v3845)
	v3846 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3846
	SCZO = cond(v3846)
	v3847 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3847
	SCZO = cond(v3847)
	v3848 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3848
	SCZO = cond(v3848)
	v3849 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3849
	SCZO = cond(v3849)
	v3850 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3850
	SCZO = cond(v3850)
	v3851 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3851
	SCZO = cond(v3851)
	v3852 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3852
	SCZO = cond(v3852)
	v3853 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3853
	SCZO = cond(v3853)
	v3854 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3854
	SCZO = cond(v3854)
	v3855 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3855
	SCZO = cond(v3855)
	v3856 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3856
	SCZO = cond(v3856)
	v3857 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3857
	SCZO = cond(v3857)
	v3858 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3858
	SCZO = cond(v3858)
	v3859 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3859
	SCZO = cond(v3859)
	v3860 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3860
	SCZO = cond(v3860)
	v3861 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3861
	SCZO = cond(v3861)
	v3862 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3862
	SCZO = cond(v3862)
	v3863 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3863
	SCZO = cond(v3863)
	v3864 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3864
	SCZO = cond(v3864)
	v3865 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3865
	SCZO = cond(v3865)
	v3866 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3866
	SCZO = cond(v3866)
	v3867 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3867
	SCZO = cond(v3867)
	v3868 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3868
	SCZO = cond(v3868)
	v3869 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3869
	SCZO = cond(v3869)
	v3870 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3870
	SCZO = cond(v3870)
	v3871 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3871
	SCZO = cond(v3871)
	v3872 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3872
	SCZO = cond(v3872)
	v3873 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3873
	SCZO = cond(v3873)
	v3874 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3874
	SCZO = cond(v3874)
	v3875 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3875
	SCZO = cond(v3875)
	v3876 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3876
	SCZO = cond(v3876)
	v3877 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3877
	SCZO = cond(v3877)
	v3878 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3878
	SCZO = cond(v3878)
	v3879 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3879
	SCZO = cond(v3879)
	v3880 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3880
	SCZO = cond(v3880)
	v3881 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3881
	SCZO = cond(v3881)
	v3882 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3882
	SCZO = cond(v3882)
	v3883 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3883
	SCZO = cond(v3883)
	v3884 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3884
	SCZO = cond(v3884)
	v3885 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3885
	SCZO = cond(v3885)
	v3886 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3886
	SCZO = cond(v3886)
	v3887 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3887
	SCZO = cond(v3887)
	v3888 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3888
	SCZO = cond(v3888)
	v3889 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3889
	SCZO = cond(v3889)
	v3890 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3890
	SCZO = cond(v3890)
	v3891 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3891
	SCZO = cond(v3891)
	v3892 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3892
	SCZO = cond(v3892)
	v3893 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3893
	SCZO = cond(v3893)
	v3894 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3894
	SCZO = cond(v3894)
	v3895 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3895
	SCZO = cond(v3895)
	v3896 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3896
	SCZO = cond(v3896)
	v3897 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3897
	SCZO = cond(v3897)
	v3898 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3898
	SCZO = cond(v3898)
	v3899 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3899
	SCZO = cond(v3899)
	v3900 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3900
	SCZO = cond(v3900)
	v3901 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3901
	SCZO = cond(v3901)
	v3902 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3902
	SCZO = cond(v3902)
	v3903 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3903
	SCZO = cond(v3903)
	v3904 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3904
	SCZO = cond(v3904)
	v3905 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3905
	SCZO = cond(v3905)
	v3906 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3906
	SCZO = cond(v3906)
	v3907 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3907
	SCZO = cond(v3907)
	v3908 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3908
	SCZO = cond(v3908)
	v3909 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3909
	SCZO = cond(v3909)
	v3910 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3910
	SCZO = cond(v3910)
	v3911 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3911
	SCZO = cond(v3911)
	v3912 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3912
	SCZO = cond(v3912)
	v3913 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3913
	SCZO = cond(v3913)
	v3914 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3914
	SCZO = cond(v3914)
	v3915 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3915
	SCZO = cond(v3915)
	v3916 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3916
	SCZO = cond(v3916)
	v3917 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3917
	SCZO = cond(v3917)
	v3918 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3918
	SCZO = cond(v3918)
	v3919 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3919
	SCZO = cond(v3919)
	v3920 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3920
	SCZO = cond(v3920)
	v3921 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3921
	SCZO = cond(v3921)
	v3922 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3922
	SCZO = cond(v3922)
	v3923 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3923
	SCZO = cond(v3923)
	v3924 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3924
	SCZO = cond(v3924)
	v3925 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3925
	SCZO = cond(v3925)
	v3926 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3926
	SCZO = cond(v3926)
	v3927 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3927
	SCZO = cond(v3927)
	v3928 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3928
	SCZO = cond(v3928)
	v3929 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3929
	SCZO = cond(v3929)
	v3930 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3930
	SCZO = cond(v3930)
	v3931 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3931
	SCZO = cond(v3931)
	v3932 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3932
	SCZO = cond(v3932)
	v3933 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3933
	SCZO = cond(v3933)
	v3934 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3934
	SCZO = cond(v3934)
	v3935 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3935
	SCZO = cond(v3935)
	v3936 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3936
	SCZO = cond(v3936)
	v3937 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3937
	SCZO = cond(v3937)
	v3938 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3938
	SCZO = cond(v3938)
	v3939 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3939
	SCZO = cond(v3939)
	v3940 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3940
	SCZO = cond(v3940)
	v3941 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3941
	SCZO = cond(v3941)
	v3942 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3942
	SCZO = cond(v3942)
	v3943 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3943
	SCZO = cond(v3943)
	v3944 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3944
	SCZO = cond(v3944)
	v3945 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3945
	SCZO = cond(v3945)
	v3946 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3946
	SCZO = cond(v3946)
	v3947 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3947
	SCZO = cond(v3947)
	v3948 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3948
	SCZO = cond(v3948)
	v3949 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3949
	SCZO = cond(v3949)
	v3950 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3950
	SCZO = cond(v3950)
	v3951 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3951
	SCZO = cond(v3951)
	v3952 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3952
	SCZO = cond(v3952)
	v3953 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3953
	SCZO = cond(v3953)
	v3954 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3954
	SCZO = cond(v3954)
	v3955 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3955
	SCZO = cond(v3955)
	v3956 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3956
	SCZO = cond(v3956)
	v3957 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3957
	SCZO = cond(v3957)
	v3958 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3958
	SCZO = cond(v3958)
	v3959 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3959
	SCZO = cond(v3959)
	v3960 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3960
	SCZO = cond(v3960)
	v3961 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3961
	SCZO = cond(v3961)
	v3962 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3962
	SCZO = cond(v3962)
	v3963 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3963
	SCZO = cond(v3963)
	v3964 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3964
	SCZO = cond(v3964)
	v3965 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3965
	SCZO = cond(v3965)
	v3966 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3966
	SCZO = cond(v3966)
	v3967 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3967
	SCZO = cond(v3967)
	v3968 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3968
	SCZO = cond(v3968)
	v3969 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3969
	SCZO = cond(v3969)
	v3970 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3970
	SCZO = cond(v3970)
	v3971 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3971
	SCZO = cond(v3971)
	v3972 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3972
	SCZO = cond(v3972)
	v3973 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3973
	SCZO = cond(v3973)
	v3974 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3974
	SCZO = cond(v3974)
	v3975 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3975
	SCZO = cond(v3975)
	v3976 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3976
	SCZO = cond(v3976)
	v3977 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3977
	SCZO = cond(v3977)
	v3978 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3978
	SCZO = cond(v3978)
	v3979 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3979
	SCZO = cond(v3979)
	v3980 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3980
	SCZO = cond(v3980)
	v3981 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3981
	SCZO = cond(v3981)
	v3982 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3982
	SCZO = cond(v3982)
	v3983 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3983
	SCZO = cond(v3983)
	v3984 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3984
	SCZO = cond(v3984)
	v3985 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3985
	SCZO = cond(v3985)
	v3986 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3986
	SCZO = cond(v3986)
	v3987 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3987
	SCZO = cond(v3987)
	v3988 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3988
	SCZO = cond(v3988)
	v3989 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3989
	SCZO = cond(v3989)
	v3990 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3990
	SCZO = cond(v3990)
	v3991 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3991
	SCZO = cond(v3991)
	v3992 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3992
	SCZO = cond(v3992)
	v3993 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3993
	SCZO = cond(v3993)
	v3994 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3994
	SCZO = cond(v3994)
	v3995 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3995
	SCZO = cond(v3995)
	v3996 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3996
	SCZO = cond(v3996)
	v3997 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3997
	SCZO = cond(v3997)
	v3998 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3998
	SCZO = cond(v3998)
	v3999 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3999
	SCZO = cond(v3999)
	v4000 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4000
	SCZO = cond(v4000)
	v4001 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4001
	SCZO = cond(v4001)
	v4002 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4002
	SCZO = cond(v4002)
	v4003 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4003
	SCZO = cond(v4003)
	v4004 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4004
	SCZO = cond(v4004)
	v4005 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4005
	SCZO = cond(v4005)
	v4006 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4006
	SCZO = cond(v4006)
	v4007 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4007
	SCZO = cond(v4007)
	v4008 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4008
	SCZO = cond(v4008)
	v4009 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4009
	SCZO = cond(v4009)
	v4010 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4010
	SCZO = cond(v4010)
	v4011 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4011
	SCZO = cond(v4011)
	v4012 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4012
	SCZO = cond(v4012)
	v4013 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4013
	SCZO = cond(v4013)
	v4014 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4014
	SCZO = cond(v4014)
	v4015 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4015
	SCZO = cond(v4015)
	v4016 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4016
	SCZO = cond(v4016)
	v4017 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4017
	SCZO = cond(v4017)
	v4018 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4018
	SCZO = cond(v4018)
	v4019 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4019
	SCZO = cond(v4019)
	v4020 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4020
	SCZO = cond(v4020)
	v4021 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4021
	SCZO = cond(v4021)
	v4022 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4022
	SCZO = cond(v4022)
	v4023 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4023
	SCZO = cond(v4023)
	v4024 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4024
	SCZO = cond(v4024)
	v4025 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4025
	SCZO = cond(v4025)
	v4026 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4026
	SCZO = cond(v4026)
	v4027 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4027
	SCZO = cond(v4027)
	v4028 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4028
	SCZO = cond(v4028)
	v4029 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4029
	SCZO = cond(v4029)
	v4030 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4030
	SCZO = cond(v4030)
	v4031 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4031
	SCZO = cond(v4031)
	v4032 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4032
	SCZO = cond(v4032)
	v4033 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4033
	SCZO = cond(v4033)
	v4034 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4034
	SCZO = cond(v4034)
	v4035 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4035
	SCZO = cond(v4035)
	v4036 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4036
	SCZO = cond(v4036)
	v4037 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4037
	SCZO = cond(v4037)
	v4038 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4038
	SCZO = cond(v4038)
	v4039 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4039
	SCZO = cond(v4039)
	v4040 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4040
	SCZO = cond(v4040)
	v4041 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4041
	SCZO = cond(v4041)
	v4042 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4042
	SCZO = cond(v4042)
	v4043 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4043
	SCZO = cond(v4043)
	v4044 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4044
	SCZO = cond(v4044)
	v4045 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4045
	SCZO = cond(v4045)
	v4046 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4046
	SCZO = cond(v4046)
	v4047 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4047
	SCZO = cond(v4047)
	v4048 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4048
	SCZO = cond(v4048)
	v4049 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4049
	SCZO = cond(v4049)
	v4050 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4050
	SCZO = cond(v4050)
	v4051 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4051
	SCZO = cond(v4051)
	v4052 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4052
	SCZO = cond(v4052)
	v4053 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4053
	SCZO = cond(v4053)
	v4054 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4054
	SCZO = cond(v4054)
	v4055 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4055
	SCZO = cond(v4055)
	v4056 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4056
	SCZO = cond(v4056)
	v4057 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4057
	SCZO = cond(v4057)
	v4058 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4058
	SCZO = cond(v4058)
	v4059 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4059
	SCZO = cond(v4059)
	v4060 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4060
	SCZO = cond(v4060)
	goto l0177_8F28
	// succ:  l0177_8F28
l0177_8F27:
	v3509 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3509
	SCZO = cond(v3509)
	// succ:  l0177_8F28
l0177_8F28:
	v3510 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3510
	SCZO = cond(v3510)
	v3511 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3511
	SCZO = cond(v3511)
	v3512 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3512
	SCZO = cond(v3512)
	v3513 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3513
	SCZO = cond(v3513)
	v3514 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3514
	SCZO = cond(v3514)
	v3515 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3515
	SCZO = cond(v3515)
	v3516 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3516
	SCZO = cond(v3516)
	v3517 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3517
	SCZO = cond(v3517)
	v3518 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3518
	SCZO = cond(v3518)
	v3519 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3519
	SCZO = cond(v3519)
	v3520 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3520
	SCZO = cond(v3520)
	v3521 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3521
	SCZO = cond(v3521)
	v3522 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3522
	SCZO = cond(v3522)
	v3523 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3523
	SCZO = cond(v3523)
	v3524 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3524
	SCZO = cond(v3524)
	v3525 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3525
	SCZO = cond(v3525)
	v3526 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3526
	SCZO = cond(v3526)
	v3527 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3527
	SCZO = cond(v3527)
	v3528 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3528
	SCZO = cond(v3528)
	v3529 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3529
	SCZO = cond(v3529)
	v3530 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3530
	SCZO = cond(v3530)
	v3531 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3531
	SCZO = cond(v3531)
	v3532 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3532
	SCZO = cond(v3532)
	v3533 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3533
	SCZO = cond(v3533)
	v3534 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3534
	SCZO = cond(v3534)
	v3535 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3535
	SCZO = cond(v3535)
	v3536 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3536
	SCZO = cond(v3536)
	v3537 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3537
	SCZO = cond(v3537)
	v3538 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3538
	SCZO = cond(v3538)
	v3539 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3539
	SCZO = cond(v3539)
	v3540 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3540
	SCZO = cond(v3540)
	v3541 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3541
	SCZO = cond(v3541)
	v3542 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3542
	SCZO = cond(v3542)
	v3543 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3543
	SCZO = cond(v3543)
	v3544 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3544
	SCZO = cond(v3544)
	v3545 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3545
	SCZO = cond(v3545)
	v3546 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3546
	SCZO = cond(v3546)
	v3547 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3547
	SCZO = cond(v3547)
	v3548 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3548
	SCZO = cond(v3548)
	v3549 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3549
	SCZO = cond(v3549)
	v3550 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3550
	SCZO = cond(v3550)
	v3551 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3551
	SCZO = cond(v3551)
	v3552 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3552
	SCZO = cond(v3552)
	v3553 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3553
	SCZO = cond(v3553)
	v3554 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3554
	SCZO = cond(v3554)
	v3555 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3555
	SCZO = cond(v3555)
	v3556 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3556
	SCZO = cond(v3556)
	v3557 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3557
	SCZO = cond(v3557)
	v3558 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3558
	SCZO = cond(v3558)
	v3559 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3559
	SCZO = cond(v3559)
	v3560 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3560
	SCZO = cond(v3560)
	v3561 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3561
	SCZO = cond(v3561)
	v3562 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3562
	SCZO = cond(v3562)
	v3563 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3563
	SCZO = cond(v3563)
	v3564 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3564
	SCZO = cond(v3564)
	v3565 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3565
	SCZO = cond(v3565)
	v3566 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3566
	SCZO = cond(v3566)
	v3567 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3567
	SCZO = cond(v3567)
	v3568 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3568
	SCZO = cond(v3568)
	v3569 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3569
	SCZO = cond(v3569)
	v3570 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3570
	SCZO = cond(v3570)
	v3571 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3571
	SCZO = cond(v3571)
	v3572 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3572
	SCZO = cond(v3572)
	v3573 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3573
	SCZO = cond(v3573)
	v3574 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3574
	SCZO = cond(v3574)
	v3575 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3575
	SCZO = cond(v3575)
	v3576 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3576
	SCZO = cond(v3576)
	v3577 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3577
	SCZO = cond(v3577)
	v3578 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3578
	SCZO = cond(v3578)
	v3579 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3579
	SCZO = cond(v3579)
	v3580 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3580
	SCZO = cond(v3580)
	v3581 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3581
	SCZO = cond(v3581)
	v3582 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3582
	SCZO = cond(v3582)
	v3583 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3583
	SCZO = cond(v3583)
	v3584 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3584
	SCZO = cond(v3584)
	v3585 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3585
	SCZO = cond(v3585)
	v3586 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3586
	SCZO = cond(v3586)
	v3587 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3587
	SCZO = cond(v3587)
	v3588 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3588
	SCZO = cond(v3588)
	v3589 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3589
	SCZO = cond(v3589)
	v3590 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3590
	SCZO = cond(v3590)
	v3591 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3591
	SCZO = cond(v3591)
	v3592 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3592
	SCZO = cond(v3592)
	v3593 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3593
	SCZO = cond(v3593)
	v3594 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3594
	SCZO = cond(v3594)
	v3595 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3595
	SCZO = cond(v3595)
	v3596 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3596
	SCZO = cond(v3596)
	v3597 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3597
	SCZO = cond(v3597)
	v3598 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3598
	SCZO = cond(v3598)
	v3599 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3599
	SCZO = cond(v3599)
	v3600 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3600
	SCZO = cond(v3600)
	v3601 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3601
	SCZO = cond(v3601)
	v3602 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3602
	SCZO = cond(v3602)
	v3603 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3603
	SCZO = cond(v3603)
	v3604 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3604
	SCZO = cond(v3604)
	v3605 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3605
	SCZO = cond(v3605)
	v3606 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3606
	SCZO = cond(v3606)
	v3607 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3607
	SCZO = cond(v3607)
	v3608 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3608
	SCZO = cond(v3608)
	v3609 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3609
	SCZO = cond(v3609)
	v3610 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3610
	SCZO = cond(v3610)
	v3611 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3611
	SCZO = cond(v3611)
	v3612 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3612
	SCZO = cond(v3612)
	v3613 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3613
	SCZO = cond(v3613)
	v3614 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3614
	SCZO = cond(v3614)
	v3615 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3615
	SCZO = cond(v3615)
	v3616 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3616
	SCZO = cond(v3616)
	v3617 = Mem0[ds:0x9058:byte] + bl
	Mem0[ds:0x9058:byte] = v3617
	SCZO = cond(v3617)
	// succ:  l0177_8FFE_thunk_fn01BF_0000
l0177_8FFE_thunk_fn01BF_0000:
	call fn01BF_0000 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_9006:
	al = __inb(dx)
	// succ:  l0177_9006_thunk_fn01BF_0000
l0177_9006_thunk_fn01BF_0000:
	call fn01BF_0000 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_900C:
	bh = bh + bh
	SCZO = cond(bh)
	// succ:  l0177_900C_thunk_fn01BF_0000
l0177_900C_thunk_fn01BF_0000:
	call fn01BF_0000 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_9012:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	// succ:  l0177_9012_thunk_fn01BF_0000
l0177_9012_thunk_fn01BF_0000:
	call fn01BF_0000 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_9028:
	v2138 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2138
	SCZO = cond(v2138)
	SCZO = cond(ax - 0x0000)
	SCZO = cond(al - 0x00)
	v2139 = Mem0[ss:bp + di:byte] + bh
	Mem0[ss:bp + di:byte] = v2139
	SCZO = cond(v2139)
	v2140 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2140
	SCZO = cond(v2140)
	v2141 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2141
	SCZO = cond(v2141)
	C = __aas(al, ah, &al, &ah)
	v2142 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2142
	SCZO = cond(v2142)
	bx = bx + 0x0001
	SZO = cond(bx)
	v2143 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2143
	SCZO = cond(v2143)
	sp = sp + 0x0001
	SZO = cond(sp)
	v2144 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2144
	SCZO = cond(v2144)
	dx = dx + 0x0001
	SZO = cond(dx)
	v2145 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2145
	SCZO = cond(v2145)
	v2146 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2146
	SCZO = cond(v2146)
	v2147 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2147
	SCZO = cond(v2147)
	v2148 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2148
	SCZO = cond(v2148)
	v2149 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2149
	SCZO = cond(v2149)
	v2150 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2150
	SCZO = cond(v2150)
	v2151 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2151
	SCZO = cond(v2151)
	v2152 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2152
	SCZO = cond(v2152)
	v2153 = Mem0[ds:bx + si:byte] + bh
	Mem0[ds:bx + si:byte] = v2153
	SCZO = cond(v2153)
	v2154 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2154
	SCZO = cond(v2154)
	di = di + 0x0001
	SZO = cond(di)
	v2155 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2155
	SCZO = cond(v2155)
	C = __aaa(al, ah, &al, &ah)
	v2156 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2156
	SCZO = cond(v2156)
	C = __aaa(al, ah, &al, &ah)
	v2157 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2157
	SCZO = cond(v2157)
	SCZO = cond(al - Mem0[ds:bx + si:byte])
	v2158 = Mem0[ds:bx + si:byte] + bh
	Mem0[ds:bx + si:byte] = v2158
	SCZO = cond(v2158)
	v2159 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2159
	SCZO = cond(v2159)
	ax = ax ^ Mem0[ds:bx + si:word16]
	SZO = cond(ax)
	C = false
	v2160 = Mem0[ds:bx:byte] + dh
	Mem0[ds:bx:byte] = v2160
	SCZO = cond(v2160)
	v2161 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2161
	SCZO = cond(v2161)
	v2162 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2162
	SCZO = cond(v2162)
	v2163 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2163
	SCZO = cond(v2163)
	v2164 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2164
	SCZO = cond(v2164)
	v2165 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2165
	SCZO = cond(v2165)
	v2166 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2166
	SCZO = cond(v2166)
	v2167 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2167
	SCZO = cond(v2167)
	v2168 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2168
	SCZO = cond(v2168)
	v2169 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2169
	SCZO = cond(v2169)
	v2170 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2170
	SCZO = cond(v2170)
	v2171 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2171
	SCZO = cond(v2171)
	v2172 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2172
	SCZO = cond(v2172)
	v2173 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2173
	SCZO = cond(v2173)
	v2174 = Mem0[ds:bx + si:word16] ^ ax
	Mem0[ds:bx + si:word16] = v2174
	SZO = cond(Mem0[ds:bx + si:word16])
	C = false
	v2175 = Mem0[ss:bp + 0x0000:byte] + al
	Mem0[ss:bp + 0x0000:byte] = v2175
	SCZO = cond(v2175)
	v2176 = Mem0[ds:si:byte] + dh
	Mem0[ds:si:byte] = v2176
	SCZO = cond(v2176)
	v2177 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2177
	SCZO = cond(v2177)
	al = al ^ 0x00
	SZO = cond(al)
	C = false
	v2178 = Mem0[ss:bp + si:byte] + dh
	Mem0[ss:bp + si:byte] = v2178
	SCZO = cond(v2178)
	v2179 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2179
	SCZO = cond(v2179)
	v2180 = Mem0[ds:bx + si:word16] ^ ax
	Mem0[ds:bx + si:word16] = v2180
	SZO = cond(Mem0[ds:bx + si:word16])
	C = false
	v2181 = Mem0[ss:bp + di:byte] + dh
	Mem0[ss:bp + di:byte] = v2181
	SCZO = cond(v2181)
	v2182 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2182
	SCZO = cond(v2182)
	al = al ^ 0x00
	SZO = cond(al)
	C = false
	v2183 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2183
	SCZO = cond(v2183)
	v2184 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2184
	SCZO = cond(v2184)
	v2185 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2185
	SCZO = cond(v2185)
	v2186 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2186
	SCZO = cond(v2186)
	v2187 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2187
	SCZO = cond(v2187)
	v2188 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2188
	SCZO = cond(v2188)
	v2189 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2189
	SCZO = cond(v2189)
	v2190 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2190
	SCZO = cond(v2190)
	v2191 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2191
	SCZO = cond(v2191)
	v2192 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2192
	SCZO = cond(v2192)
	v2193 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2193
	SCZO = cond(v2193)
	v2194 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2194
	SCZO = cond(v2194)
	v2195 = Mem0[ds:bx + 0xDD00 + di:byte] + al
	Mem0[ds:bx + 0xDD00 + di:byte] = v2195
	SCZO = cond(v2195)
	v2196 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2196
	SCZO = cond(v2196)
	v2197 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2197
	SCZO = cond(v2197)
	// succ:  l0177_90B8
l0177_90B8:
	v1983 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1983
	SCZO = cond(v1983)
	v1984 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1984
	SCZO = cond(v1984)
	v1985 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1985
	SCZO = cond(v1985)
	v1986 = Mem0[ds:bx + di:byte] + ah
	Mem0[ds:bx + di:byte] = v1986
	SCZO = cond(v1986)
	v1987 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1987
	SCZO = cond(v1987)
	v1988 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1988
	SCZO = cond(v1988)
	v1989 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1989
	SCZO = cond(v1989)
	v1990 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1990
	SCZO = cond(v1990)
	v1991 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1991
	SCZO = cond(v1991)
	v1992 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1992
	SCZO = cond(v1992)
	v1993 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1993
	SCZO = cond(v1993)
	v1994 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1994
	SCZO = cond(v1994)
	v1995 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1995
	SCZO = cond(v1995)
	v1996 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1996
	SCZO = cond(v1996)
	v1997 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1997
	SCZO = cond(v1997)
	v1998 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1998
	SCZO = cond(v1998)
	v1999 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1999
	SCZO = cond(v1999)
	v2000 = Mem0[ds:bx + 0x0000 + di:byte] + dl
	Mem0[ds:bx + 0x0000 + di:byte] = v2000
	SCZO = cond(v2000)
	ax = ax ^ Mem0[ds:bx + si:word16]
	SZO = cond(ax)
	C = false
	v2001 = Mem0[ds:bx:byte] + dh
	Mem0[ds:bx:byte] = v2001
	SCZO = cond(v2001)
	v2002 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2002
	SCZO = cond(v2002)
	v2003 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2003
	SCZO = cond(v2003)
	v2004 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2004
	SCZO = cond(v2004)
	v2005 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2005
	SCZO = cond(v2005)
	// succ:  l0177_90E9
l0177_90E9:
	v2697 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2697
	SCZO = cond(v2697)
	v2698 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2698
	SCZO = cond(v2698)
	v2699 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2699
	SCZO = cond(v2699)
	v2700 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2700
	SCZO = cond(v2700)
	v2701 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2701
	SCZO = cond(v2701)
	v2702 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2702
	SCZO = cond(v2702)
	v2703 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2703
	SCZO = cond(v2703)
	v2704 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2704
	SCZO = cond(v2704)
	v2705 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2705
	SCZO = cond(v2705)
	v2706 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2706
	SCZO = cond(v2706)
	v2707 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2707
	SCZO = cond(v2707)
	goto l0177_90FF
	// succ:  l0177_90FF
l0177_90FE:
	v3619 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v3619
	SCZO = cond(v3619)
	goto l0177_9100
	// succ:  l0177_9100
l0177_90FF:
	v2710 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2710
	SCZO = cond(v2710)
	// succ:  l0177_9100
l0177_9100:
	v2711 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2711
	SCZO = cond(v2711)
	v2712 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2712
	SCZO = cond(v2712)
	v2713 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2713
	SCZO = cond(v2713)
	v2714 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2714
	SCZO = cond(v2714)
	v2715 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2715
	SCZO = cond(v2715)
	v2716 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2716
	SCZO = cond(v2716)
	v2717 = Mem0[ds:bx + 0x0000 + si:word16] + ax
	Mem0[ds:bx + 0x0000 + si:word16] = v2717
	SCZO = cond(v2717)
	v2718 = Mem0[ss:bp + si:byte] + al
	Mem0[ss:bp + si:byte] = v2718
	SCZO = cond(v2718)
	v2719 = Mem0[ds:bx + si:byte] + 0x00
	Mem0[ds:bx + si:byte] = v2719
	SCZO = cond(v2719)
	ax = ax + Mem0[ds:(bx + 0x0000) + si:word16]
	SCZO = cond(ax)
	al = al + 0x80
	SCZO = cond(al)
	v2720 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2720
	SCZO = cond(v2720)
	ax = ax + 0x0080
	SCZO = cond(ax)
	v2721 = Mem0[ds:0x0000:byte] + al
	Mem0[ds:0x0000:byte] = v2721
	SCZO = cond(v2721)
	v2722 = Mem0[ds:bx:byte] + al
	Mem0[ds:bx:byte] = v2722
	SCZO = cond(v2722)
	v2723 = Mem0[ds:bx + si:byte] + 0x00
	Mem0[ds:bx + si:byte] = v2723
	SCZO = cond(v2723)
	v2724 = Mem0[ds:bx + si:byte] | al
	Mem0[ds:bx + si:byte] = v2724
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	v2725 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2725
	SCZO = cond(v2725)
	al = al | Mem0[ds:(bx + 0x0000) + si:byte]
	SZO = cond(al)
	C = false
	ax = ax | Mem0[ds:(bx + 0x0000) + si:word16]
	SZO = cond(ax)
	C = false
	v2726 = Mem0[ds:si:byte] + cl
	Mem0[ds:si:byte] = v2726
	SCZO = cond(v2726)
	v2727 = Mem0[ds:bx + si:byte] + 0x00
	Mem0[ds:bx + si:byte] = v2727
	SCZO = cond(v2727)
	ax = ax | 0x0080
	SZO = cond(ax)
	C = false
	v2728 = Mem0[ds:0x0040:byte] + cl
	Mem0[ds:0x0040:byte] = v2728
	SCZO = cond(v2728)
	v2729 = Mem0[ds:bx + di:byte] + cl
	Mem0[ds:bx + di:byte] = v2729
	SCZO = cond(v2729)
	v2730 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2730
	SCZO = cond(v2730)
	v2731 = Mem0[ds:bx:byte] + cl
	Mem0[ds:bx:byte] = v2731
	SCZO = cond(v2731)
	v2732 = Mem0[ds:bx + si:byte] + 0x00
	Mem0[ds:bx + si:byte] = v2732
	SCZO = cond(v2732)
	v2733 = Mem0[ds:bx + si:word16] + ax + C
	Mem0[ds:bx + si:word16] = v2733
	SCZO = cond(v2733)
	v2734 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2734
	SCZO = cond(v2734)
	v2735 = Mem0[ds:bx + 0x0001 + si:word16] + ax
	Mem0[ds:bx + 0x0001 + si:word16] = v2735
	SCZO = cond(v2735)
	al = al + 0x10
	SCZO = cond(al)
	v2736 = Mem0[ss:bp + si:byte] + 0x04
	Mem0[ss:bp + si:byte] = v2736
	SCZO = cond(v2736)
	v2737 = Mem0[ds:bx + 0x0B03 + si:byte] + al + C
	Mem0[ds:bx + 0x0B03 + si:byte] = v2737
	SCZO = cond(v2737)
	v2738 = Mem0[ds:bx + 0x0C04 + si:byte] + al + C
	Mem0[ds:bx + 0x0C04 + si:byte] = v2738
	SCZO = cond(v2738)
	v2739 = Mem0[ds:bx + 0x0017 + si:byte] + al
	Mem0[ds:bx + 0x0017 + si:byte] = v2739
	SCZO = cond(v2739)
	v2740 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2740
	SCZO = cond(v2740)
	v2741 = Mem0[ds:bx + si:byte] - 0x00 - C
	Mem0[ds:bx + si:byte] = v2741
	SCZO = cond(v2741)
	v2742 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2742
	SCZO = cond(v2742)
	v2743 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2743
	SCZO = cond(v2743)
	v2744 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2744
	SCZO = cond(v2744)
	v2745 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2745
	SCZO = cond(v2745)
	v2746 = Mem0[ds:bx + si:word16] + ax
	Mem0[ds:bx + si:word16] = v2746
	SCZO = cond(v2746)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	al = al + 0x01
	SCZO = cond(al)
	ax = ax + 0x0001
	SZO = cond(ax)
	v2747 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2747
	SCZO = cond(v2747)
	v2748 = Mem0[ds:bx + 0x0411 + si:word16] + ax
	Mem0[ds:bx + 0x0411 + si:word16] = v2748
	SCZO = cond(v2748)
	v2749 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2749
	SCZO = cond(v2749)
	v2750 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2750
	SCZO = cond(v2750)
	v2751 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2751
	SCZO = cond(v2751)
	v2752 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v2752
	SCZO = cond(v2752)
	v2753 = Mem0[ds:bx + 0x0205 + si:byte] + 0x82
	Mem0[ds:bx + 0x0205 + si:byte] = v2753
	SCZO = cond(v2753)
	v2754 = Mem0[ds:bx:byte] + 0x05
	Mem0[ds:bx:byte] = v2754
	SCZO = cond(v2754)
	v2755 = Mem0[ds:bx + 0x0308 + si:byte] + 0x82
	Mem0[ds:bx + 0x0308 + si:byte] = v2755
	SCZO = cond(v2755)
	v2756 = Mem0[ds:bx + di:byte] | 0x08
	Mem0[ds:bx + di:byte] = v2756
	SZO = cond(Mem0[ds:bx + di:byte])
	C = false
	v2757 = Mem0[ds:bx + 0x060A + si:byte] + 0x82
	Mem0[ds:bx + 0x060A + si:byte] = v2757
	SCZO = cond(v2757)
	v2758 = Mem0[ss:bp + di:byte] | 0x01
	Mem0[ss:bp + di:byte] = v2758
	SZO = cond(Mem0[ss:bp + di:byte])
	C = false
	v2759 = Mem0[ds:bx + 0x000D + si:byte] + 0x82
	Mem0[ds:bx + 0x000D + si:byte] = v2759
	SCZO = cond(v2759)
	v2760 = Mem0[ds:0x8200:byte] | 0x80
	Mem0[ds:0x8200:byte] = v2760
	SZO = cond(Mem0[ds:0x8200:byte])
	C = false
l0177_989A:
	cx = cx - 0x0001
	branch cx != 0x0000 l0177_989A_thunk_fn0177_98EE
l0177_A1E2:
l0177_A2E9:
	// succ:  l0177_A2E9_thunk_fn01BF_12EA
l0177_A2E9_thunk_fn01BF_12EA:
	call fn01BF_12EA (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_BEE9:
	v1453 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1453
	SCZO = cond(v1453)
	v1454 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1454
	SCZO = cond(v1454)
	v1455 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1455
	SCZO = cond(v1455)
	v1456 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1456
	SCZO = cond(v1456)
	v1457 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1457
	SCZO = cond(v1457)
	v1458 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1458
	SCZO = cond(v1458)
	v1459 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1459
	SCZO = cond(v1459)
	v1460 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1460
	SCZO = cond(v1460)
	v1461 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1461
	SCZO = cond(v1461)
	v1462 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1462
	SCZO = cond(v1462)
	v1463 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1463
	SCZO = cond(v1463)
	v1464 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1464
	SCZO = cond(v1464)
	v1465 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1465
	SCZO = cond(v1465)
	v1466 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1466
	SCZO = cond(v1466)
	v1467 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1467
	SCZO = cond(v1467)
	v1468 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1468
	SCZO = cond(v1468)
	v1469 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1469
	SCZO = cond(v1469)
	v1470 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1470
	SCZO = cond(v1470)
	v1471 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1471
	SCZO = cond(v1471)
	v1472 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1472
	SCZO = cond(v1472)
	v1473 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1473
	SCZO = cond(v1473)
	v1474 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1474
	SCZO = cond(v1474)
	v1475 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1475
	SCZO = cond(v1475)
	v1476 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1476
	SCZO = cond(v1476)
	v1477 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1477
	SCZO = cond(v1477)
	v1478 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1478
	SCZO = cond(v1478)
	v1479 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1479
	SCZO = cond(v1479)
	v1480 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1480
	SCZO = cond(v1480)
	v1481 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1481
	SCZO = cond(v1481)
	v1482 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1482
	SCZO = cond(v1482)
	v1483 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1483
	SCZO = cond(v1483)
	v1484 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1484
	SCZO = cond(v1484)
	v1485 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1485
	SCZO = cond(v1485)
	v1486 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1486
	SCZO = cond(v1486)
	v1487 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1487
	SCZO = cond(v1487)
	v1488 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1488
	SCZO = cond(v1488)
	v1489 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1489
	SCZO = cond(v1489)
	v1490 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1490
	SCZO = cond(v1490)
	v1491 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1491
	SCZO = cond(v1491)
	v1492 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1492
	SCZO = cond(v1492)
	v1493 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1493
	SCZO = cond(v1493)
	v1494 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1494
	SCZO = cond(v1494)
	v1495 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1495
	SCZO = cond(v1495)
	v1496 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1496
	SCZO = cond(v1496)
	v1497 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1497
	SCZO = cond(v1497)
	v1498 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1498
	SCZO = cond(v1498)
	v1499 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1499
	SCZO = cond(v1499)
	v1500 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1500
	SCZO = cond(v1500)
	v1501 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1501
	SCZO = cond(v1501)
	v1502 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1502
	SCZO = cond(v1502)
	v1503 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1503
	SCZO = cond(v1503)
	v1504 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1504
	SCZO = cond(v1504)
	v1505 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1505
	SCZO = cond(v1505)
	v1506 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1506
	SCZO = cond(v1506)
	v1507 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1507
	SCZO = cond(v1507)
	v1508 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1508
	SCZO = cond(v1508)
	v1509 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1509
	SCZO = cond(v1509)
	v1510 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1510
	SCZO = cond(v1510)
	v1511 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1511
	SCZO = cond(v1511)
	v1512 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1512
	SCZO = cond(v1512)
	v1513 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1513
	SCZO = cond(v1513)
	v1514 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1514
	SCZO = cond(v1514)
	v1515 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1515
	SCZO = cond(v1515)
	v1516 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1516
	SCZO = cond(v1516)
	v1517 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1517
	SCZO = cond(v1517)
	v1518 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1518
	SCZO = cond(v1518)
	v1519 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1519
	SCZO = cond(v1519)
	v1520 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1520
	SCZO = cond(v1520)
	v1521 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1521
	SCZO = cond(v1521)
	v1522 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1522
	SCZO = cond(v1522)
	v1523 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1523
	SCZO = cond(v1523)
	v1524 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1524
	SCZO = cond(v1524)
	v1525 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1525
	SCZO = cond(v1525)
	v1526 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1526
	SCZO = cond(v1526)
	v1527 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1527
	SCZO = cond(v1527)
	v1528 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1528
	SCZO = cond(v1528)
	v1529 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1529
	SCZO = cond(v1529)
	v1530 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1530
	SCZO = cond(v1530)
	v1531 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1531
	SCZO = cond(v1531)
	v1532 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1532
	SCZO = cond(v1532)
	v1533 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1533
	SCZO = cond(v1533)
	v1534 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1534
	SCZO = cond(v1534)
	v1535 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1535
	SCZO = cond(v1535)
	v1536 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1536
	SCZO = cond(v1536)
	v1537 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1537
	SCZO = cond(v1537)
	v1538 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1538
	SCZO = cond(v1538)
	v1539 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1539
	SCZO = cond(v1539)
	v1540 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1540
	SCZO = cond(v1540)
	v1541 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1541
	SCZO = cond(v1541)
	v1542 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1542
	SCZO = cond(v1542)
	v1543 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1543
	SCZO = cond(v1543)
	v1544 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1544
	SCZO = cond(v1544)
	v1545 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1545
	SCZO = cond(v1545)
	v1546 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1546
	SCZO = cond(v1546)
	v1547 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1547
	SCZO = cond(v1547)
	v1548 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1548
	SCZO = cond(v1548)
	v1549 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1549
	SCZO = cond(v1549)
	v1550 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1550
	SCZO = cond(v1550)
	v1551 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1551
	SCZO = cond(v1551)
	v1552 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1552
	SCZO = cond(v1552)
	v1553 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1553
	SCZO = cond(v1553)
	v1554 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1554
	SCZO = cond(v1554)
	v1555 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1555
	SCZO = cond(v1555)
	v1556 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1556
	SCZO = cond(v1556)
	v1557 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1557
	SCZO = cond(v1557)
	v1558 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1558
	SCZO = cond(v1558)
	v1559 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1559
	SCZO = cond(v1559)
	v1560 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1560
	SCZO = cond(v1560)
	v1561 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1561
	SCZO = cond(v1561)
	v1562 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1562
	SCZO = cond(v1562)
	v1563 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1563
	SCZO = cond(v1563)
	v1564 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1564
	SCZO = cond(v1564)
	v1565 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1565
	SCZO = cond(v1565)
	v1566 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1566
	SCZO = cond(v1566)
	v1567 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1567
	SCZO = cond(v1567)
	v1568 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1568
	SCZO = cond(v1568)
	v1569 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1569
	SCZO = cond(v1569)
	v1570 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1570
	SCZO = cond(v1570)
	v1571 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1571
	SCZO = cond(v1571)
	v1572 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1572
	SCZO = cond(v1572)
	v1573 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1573
	SCZO = cond(v1573)
	v1574 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1574
	SCZO = cond(v1574)
	v1575 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1575
	SCZO = cond(v1575)
	v1576 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1576
	SCZO = cond(v1576)
	v1577 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1577
	SCZO = cond(v1577)
	v1578 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1578
	SCZO = cond(v1578)
	v1579 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1579
	SCZO = cond(v1579)
	v1580 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1580
	SCZO = cond(v1580)
	v1581 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1581
	SCZO = cond(v1581)
	v1582 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1582
	SCZO = cond(v1582)
	v1583 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1583
	SCZO = cond(v1583)
	v1584 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1584
	SCZO = cond(v1584)
	v1585 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1585
	SCZO = cond(v1585)
	v1586 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1586
	SCZO = cond(v1586)
	v1587 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1587
	SCZO = cond(v1587)
	v1588 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1588
	SCZO = cond(v1588)
	v1589 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1589
	SCZO = cond(v1589)
	v1590 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1590
	SCZO = cond(v1590)
	v1591 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1591
	SCZO = cond(v1591)
	v1592 = Mem0[ds:0x9058:byte] + bl
	Mem0[ds:0x9058:byte] = v1592
	SCZO = cond(v1592)
	// succ:  l0177_BFFF_thunk_fn0177_C003
l0177_BFFF_thunk_fn0177_C003:
	call fn0177_C003 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_C6E9:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_C702:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	// succ:  l0177_C703
l0177_C703:
	SCZO = cond(Mem0[ds:bx:word16] - cx)
	goto l0177_C705
	// succ:  l0177_C705
l0177_C704:
	mm1 = __pcmpeqb(mm1, Mem0[ss:bp + di:word64])
	goto l0177_C707
	// succ:  l0177_C707
l0177_C705:
	branch Test(EQ,Z) l0177_C712
	// succ:  l0177_C707 l0177_C712
l0177_C707:
	dx = dx + 0x0001
	SZO = cond(dx)
	bx = bx + 0x0001
	SZO = cond(bx)
	// succ:  l0177_C709
l0177_C709:
	bx = bx + 0x0001
	SZO = cond(bx)
	// succ:  l0177_C70A
l0177_C70A:
	SCZO = cond(bx - 0x0830)
	branch Test(ULT,C) l0177_C703
	// succ:  l0177_C710 l0177_C703
l0177_C710:
	goto l0177_C716
	// succ:  l0177_C716
l0177_C712:
	ax = dx
	goto l0177_C719
	// succ:  l0177_C719
l0177_C716:
	ax = 0xFFFF
	// succ:  l0177_C719
l0177_C719:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_C780:
	v4061 = Mem0[ss:bp + 0x38C7 + di:byte] | cl
	Mem0[ss:bp + 0x38C7 + di:byte] = v4061
	SZO = cond(Mem0[ss:bp + 0x38C7 + di:byte])
	C = false
	// succ:  l0177_C780_thunk_fn01D7_0781
l0177_C780_thunk_fn01D7_0781:
	call fn01D7_0781 (retsize: 0;)
	return
	// succ:  fn0177_0B70_exit
l0177_C7FF_in_fn0177_0B70:
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_C7FF_in_fn0177_0B70:
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_CE8B_in_fn0177_0B70:
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_CE8B_in_fn0177_0B70:
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_D10E_in_fn0177_0B70:
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_D3CE_in_fn0177_0B70:
	call fn0167_146C (retsize: 4;)
	sp = sp + 0x0006
	ax = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4D04:word16]
	ax = ax + 0x000A
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x0011
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_E686:
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000E:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn018F_1C4C (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0010:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x001C:word16] = ax
	Mem0[ss:bp - 0x001A:word16] = ax
	Mem0[ss:bp - 0x0018:word16] = ax
	Mem0[ss:bp - 0x0016:word16] = ax
	Mem0[ss:bp - 0x0012:word16] = ax
	Mem0[ss:bp - 0x0014:word16] = ax
	SCZO = cond(Mem0[ds:0x00B6:word16] - ax)
	branch Test(NE,Z) l0177_E6B3
	// succ:  l0177_E6B0 l0177_E6B3
l0177_E6B0:
	goto l0177_ED8F
	// succ:  l0177_ED8F
l0177_E6B3:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(EQ,Z) l0177_E6BD
	// succ:  l0177_E6BA l0177_E6BD
l0177_E6BA:
	goto l0177_ED8F
	// succ:  l0177_ED8F
l0177_E6BD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	IsWindowEnabled(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_E6CD
	// succ:  l0177_E6CA l0177_E6CD
l0177_E6CA:
	goto l0177_ED8F
	// succ:  l0177_ED8F
l0177_E6CD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0177_E6E2
	// succ:  l0177_E6DC l0177_E6E2
l0177_E6DC:
	si = Mem0[ss:bp - 0x0014:word16]
	goto l0177_ED3F
	// succ:  l0177_ED3F
l0177_E6E2:
	si = Mem0[ss:bp - 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1E92 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0012:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_E6F5
	// succ:  l0177_E6F2 l0177_E6F5
l0177_E6F2:
	goto l0177_ED3F
	// succ:  l0177_ED3F
l0177_E6F5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1E92 (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0177_E704
	// succ:  l0177_E701 l0177_E704
l0177_E701:
	goto l0177_ED3F
	// succ:  l0177_ED3F
l0177_E704:
	ax = 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateEllipticRgn(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	Mem0[ss:bp - 0x001C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_E71D
	// succ:  l0177_E71A l0177_E71D
l0177_E71A:
	goto l0177_ED3F
	// succ:  l0177_ED3F
l0177_E71D:
	ax = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateEllipticRgn(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	Mem0[ss:bp - 0x001A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_E736
	// succ:  l0177_E733 l0177_E736
l0177_E733:
	goto l0177_ED3F
	// succ:  l0177_ED3F
l0177_E736:
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateEllipticRgn(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0018:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_E74F
	// succ:  l0177_E74C l0177_E74F
l0177_E74C:
	goto l0177_ED3F
	// succ:  l0177_ED3F
l0177_E74F:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateEllipticRgn(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0016:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_E767
	// succ:  l0177_E764 l0177_E767
l0177_E764:
	goto l0177_ED3F
	// succ:  l0177_ED3F
l0177_E767:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BitBlt(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0014
	ax = bp - 0x0024
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x003C
	bx = bx - bx
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	al = Mem0[ss:bp - 0x0024:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l0177_E7A6
l0177_E7A6:
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0023:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0022:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0021:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	ax = ax + 0x000E
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_ED9C (retsize: 2;)
	sp = sp + 0xFFFC
	ax = bp - 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l0177_E80E
l0177_E80E:
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0020:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001F:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001E:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	al = Mem0[ss:bp - 0x0024:byte]
	SCZO = cond(Mem0[ss:bp - 0x0020:byte] - al)
	branch Test(UGE,C) l0177_E868
	// succ:  l0177_E85E l0177_E868
l0177_E85E:
	v2764 = Mem0[ss:bp - 0x000A:word16] + 0xD600
	Mem0[ss:bp - 0x000A:word16] = v2764
	SCZO = cond(v2764)
	v2765 = Mem0[ss:bp - 0x0008:word16] + 0x0083 + C
	Mem0[ss:bp - 0x0008:word16] = v2765
	SCZO = cond(v2765)
	// succ:  l0177_E868
l0177_E868:
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - dx)
	branch Test(ULT,C) l0177_E885
	// succ:  l0177_E873 l0177_E885
l0177_E873:
	branch Test(UGT,CZ) l0177_E87A
	// succ:  l0177_E875 l0177_E87A
l0177_E875:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULE,CZ) l0177_E885
	// succ:  l0177_E87A l0177_E885
l0177_E87A:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1CB4 (retsize: 2;)
	sp = sp + 0x0002
l0177_E885:
	v2773 = Mem0[ss:bp - 0x0006:word16] + 0x000E
	Mem0[ss:bp - 0x0006:word16] = v2773
	SCZO = cond(v2773)
	goto l0177_E889
	// succ:  l0177_E889
l0177_E886:
	si = si + 0x0001
	SZO = cond(si)
	__cli()
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	// succ:  l0177_E889
l0177_E889:
	v1606 = Mem0[ss:bp - 0x0004:word16] + 0x00 + C
	Mem0[ss:bp - 0x0004:word16] = v1606
	SCZO = cond(v1606)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_ED9C (retsize: 2;)
	sp = sp + 0xFFFC
	ax = bp - 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0020:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001F:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001E:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	// succ:  l0177_E900
l0177_E900:
	al = Mem0[ss:bp - 0x0024:byte]
	goto l0177_E903
	// succ:  l0177_E903
l0177_E902:
	v3655 = Mem0[ds:bx + si:real64] / rArg0
	Mem0[ds:bx + si:real64] = v3655
	goto l0177_E904
	// succ:  l0177_E904
l0177_E903:
	SCZO = cond(Mem0[ss:bp - 0x0020:byte] - al)
	// succ:  l0177_E904
l0177_E904:
	branch Test(UGE,C) l0177_E912
	// succ:  l0177_E908 l0177_E912
l0177_E908:
	v548 = Mem0[ss:bp - 0x000A:word16] + 0xD600
	Mem0[ss:bp - 0x000A:word16] = v548
	SCZO = cond(v548)
	v549 = Mem0[ss:bp - 0x0008:word16] + 0x0083 + C
	Mem0[ss:bp - 0x0008:word16] = v549
	SCZO = cond(v549)
	// succ:  l0177_E912
l0177_E912:
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - dx)
	branch Test(ULT,C) l0177_E92F
	// succ:  l0177_E91D l0177_E92F
l0177_E91D:
	branch Test(UGT,CZ) l0177_E924
	// succ:  l0177_E91F l0177_E924
l0177_E91F:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULE,CZ) l0177_E92F
	// succ:  l0177_E924 l0177_E92F
l0177_E924:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1CB4 (retsize: 2;)
	sp = sp + 0x0002
l0177_E92F:
	v861 = Mem0[ss:bp - 0x0006:word16] + 0x000E
	Mem0[ss:bp - 0x0006:word16] = v861
	SCZO = cond(v861)
	v862 = Mem0[ss:bp - 0x0004:word16] + 0x00 + C
	Mem0[ss:bp - 0x0004:word16] = v862
	SCZO = cond(v862)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_ED9C (retsize: 2;)
	sp = sp + 0xFFFC
	ax = bp - 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0020:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001F:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001E:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000A:word16] = ax
	goto l0177_E9A7
	// succ:  l0177_E9A7
l0177_E9A6:
	SZO = cond(Mem0[ds:bx - 0x07AA + di:byte] & 0x8A)
	C = false
	goto l0177_E9AB
	// succ:  l0177_E9AB
l0177_E9A7:
	Mem0[ss:bp - 0x0008:word16] = dx
	al = Mem0[ss:bp - 0x0024:byte]
	// succ:  l0177_E9AB
l0177_E9AB:
	SCZO = cond(Mem0[ss:bp - 0x0020:byte] - al)
	branch Test(UGE,C) l0177_E9BC
	// succ:  l0177_E9B2 l0177_E9BC
l0177_E9B2:
	v866 = Mem0[ss:bp - 0x000A:word16] + 0xD600
	Mem0[ss:bp - 0x000A:word16] = v866
	SCZO = cond(v866)
	v867 = Mem0[ss:bp - 0x0008:word16] + 0x0083 + C
	Mem0[ss:bp - 0x0008:word16] = v867
	SCZO = cond(v867)
	// succ:  l0177_E9BC
l0177_E9BC:
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - dx)
	branch Test(ULT,C) l0177_E9D9
	// succ:  l0177_E9C7 l0177_E9D9
l0177_E9C7:
	branch Test(UGT,CZ) l0177_E9CE
	// succ:  l0177_E9C9 l0177_E9CE
l0177_E9C9:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULE,CZ) l0177_E9D9
	// succ:  l0177_E9CE l0177_E9D9
l0177_E9CE:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1CB4 (retsize: 2;)
	sp = sp + 0x0002
l0177_E9D9:
	v872 = Mem0[ss:bp - 0x0006:word16] + 0x000E
	Mem0[ss:bp - 0x0006:word16] = v872
	SCZO = cond(v872)
	v873 = Mem0[ss:bp - 0x0004:word16] + 0x00 + C
	Mem0[ss:bp - 0x0004:word16] = v873
	SCZO = cond(v873)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0016:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = 0x0001
	goto l0177_E9F5
	// succ:  l0177_E9F5
l0177_E9F4:
	v1604 = Mem0[ds:bx + 0x000E + si:byte] + dl
	Mem0[ds:bx + 0x000E + si:byte] = v1604
	SCZO = cond(v1604)
	goto l0177_E9F7
	// succ:  l0177_E9F7
l0177_E9F5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_ED9C (retsize: 2;)
	sp = sp + 0xFFFC
	// succ:  l0177_E9F7
l0177_E9F7:
	ax = bp - 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0020:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	goto l0177_EA22
	// succ:  l0177_EA22
l0177_EA1E:
	cl = cl | Mem0[ss:bp + di:byte]
	SZO = cond(cl)
	C = false
	di = di - 0x0001
	SZO = cond(di)
	v4071 = Mem0[ss:bp + 0xE14E + si:byte] + cl
	Mem0[ss:bp + 0xE14E + si:byte] = v4071
	SCZO = cond(v4071)
	goto l0177_EA25
	// succ:  l0177_EA25
l0177_EA22:
	cl = Mem0[ss:bp - 0x001F:byte]
	// succ:  l0177_EA25
l0177_EA25:
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001E:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	al = Mem0[ss:bp - 0x0024:byte]
	SCZO = cond(Mem0[ss:bp - 0x0020:byte] - al)
	branch Test(UGE,C) l0177_EA66
	// succ:  l0177_EA5C l0177_EA66
l0177_EA5C:
	v1040 = Mem0[ss:bp - 0x000A:word16] + 0xD600
	Mem0[ss:bp - 0x000A:word16] = v1040
	SCZO = cond(v1040)
	v1041 = Mem0[ss:bp - 0x0008:word16] + 0x0083 + C
	Mem0[ss:bp - 0x0008:word16] = v1041
	SCZO = cond(v1041)
	// succ:  l0177_EA66
l0177_EA66:
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - dx)
	branch Test(ULT,C) l0177_EA83
	// succ:  l0177_EA71 l0177_EA83
l0177_EA71:
	branch Test(UGT,CZ) l0177_EA78
	// succ:  l0177_EA73 l0177_EA78
l0177_EA73:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULE,CZ) l0177_EA83
	// succ:  l0177_EA78 l0177_EA83
l0177_EA78:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1CB4 (retsize: 2;)
	sp = sp + 0x0002
l0177_EA83:
	v1068 = Mem0[ss:bp - 0x0006:word16] + 0x000E
	Mem0[ss:bp - 0x0006:word16] = v1068
	SCZO = cond(v1068)
	v1069 = Mem0[ss:bp - 0x0004:word16] + 0x00 + C
	Mem0[ss:bp - 0x0004:word16] = v1069
	SCZO = cond(v1069)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0016:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_ED9C (retsize: 2;)
	sp = sp + 0xFFFC
	ax = bp - 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0020:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001F:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001E:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	goto l0177_EAED
	// succ:  l0177_EAED
l0177_EAEC:
	v2763 = Mem0[ss:bp + 0xE34E + si:byte] + cl
	Mem0[ss:bp + 0xE34E + si:byte] = v2763
	SCZO = cond(v2763)
	goto l0177_EAF0
	// succ:  l0177_EAF0
l0177_EAED:
	cl = Mem0[ss:bp - 0x001D:byte]
	// succ:  l0177_EAF0
l0177_EAF0:
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	al = Mem0[ss:bp - 0x0024:byte]
	SCZO = cond(Mem0[ss:bp - 0x0020:byte] - al)
	// succ:  l0177_EB03
l0177_EB03:
	branch Test(UGE,C) l0177_EB0F
	// succ:  l0177_EB05 l0177_EB0F
l0177_EB05:
	v4446 = Mem0[ss:bp - 0x000A:word16] + 0xD600
	Mem0[ss:bp - 0x000A:word16] = v4446
	SCZO = cond(v4446)
	v4447 = Mem0[ss:bp - 0x0008:word16] + 0x0083 + C
	Mem0[ss:bp - 0x0008:word16] = v4447
	SCZO = cond(v4447)
	// succ:  l0177_EB0F
l0177_EB0F:
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - dx)
	branch Test(ULT,C) l0177_EB2C
	// succ:  l0177_EB1A l0177_EB2C
l0177_EB1A:
	branch Test(UGT,CZ) l0177_EB21
	// succ:  l0177_EB1C l0177_EB21
l0177_EB1C:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULE,CZ) l0177_EB2C
	// succ:  l0177_EB21 l0177_EB2C
l0177_EB21:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1CB4 (retsize: 2;)
	sp = sp + 0x0002
l0177_EB2C:
	v4449 = Mem0[ss:bp - 0x0006:word16] + 0x000E
	Mem0[ss:bp - 0x0006:word16] = v4449
	SCZO = cond(v4449)
	v4450 = Mem0[ss:bp - 0x0004:word16] + 0x00 + C
	Mem0[ss:bp - 0x0004:word16] = v4450
	SCZO = cond(v4450)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_ED9C (retsize: 2;)
	sp = sp + 0xFFFC
	ax = bp - 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0020:byte]
	ah = ah - ah
	SCZO = cond(ah)
	goto l0177_EB6B
	// succ:  l0177_EB6B
l0177_EB6A:
	al = __inb(0x2B)
	// succ:  l0177_EB6B
l0177_EB6B:
	v2694 = (Mem0[ss:bp + 0x0050 + si:byte] & 0x01 << 0x08 - cl) != 0x00
	Mem0[ss:bp + 0x0050 + si:byte] = __rcl(Mem0[ss:bp + 0x0050 + si:byte], cl, C)
	C = v2694
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001F:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001E:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	al = Mem0[ss:bp - 0x0024:byte]
	SCZO = cond(Mem0[ss:bp - 0x0020:byte] - al)
	branch Test(UGE,C) l0177_EBB8
	// succ:  l0177_EBAE l0177_EBB8
l0177_EBAE:
	v2695 = Mem0[ss:bp - 0x000A:word16] + 0xD600
	Mem0[ss:bp - 0x000A:word16] = v2695
	SCZO = cond(v2695)
	v2696 = Mem0[ss:bp - 0x0008:word16] + 0x0083 + C
	Mem0[ss:bp - 0x0008:word16] = v2696
	SCZO = cond(v2696)
	// succ:  l0177_EBB8
l0177_EBB8:
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - dx)
	branch Test(ULT,C) l0177_EBD5
	// succ:  l0177_EBC3 l0177_EBD5
l0177_EBC3:
	branch Test(UGT,CZ) l0177_EBCA
	// succ:  l0177_EBC5 l0177_EBCA
l0177_EBC5:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULE,CZ) l0177_EBD5
	// succ:  l0177_EBCA l0177_EBD5
l0177_EBCA:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1CB4 (retsize: 2;)
	sp = sp + 0x0002
l0177_EBD5:
	v2771 = Mem0[ss:bp - 0x0006:word16] + 0x000E
	Mem0[ss:bp - 0x0006:word16] = v2771
	SCZO = cond(v2771)
	v2772 = Mem0[ss:bp - 0x0004:word16] + 0x00 + C
	Mem0[ss:bp - 0x0004:word16] = v2772
	SCZO = cond(v2772)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_ED9C (retsize: 2;)
	sp = sp + 0xFFFC
	ax = bp - 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	goto l0177_EC01
	// succ:  l0177_EC01
l0177_EBFF:
	es_ax = Mem0[ss:bp + 0x0000 + si:segptr32]
	// succ:  l0177_EC01
l0177_EC01:
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0020:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001F:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001E:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	// succ:  l0177_EC46
l0177_EC46:
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	al = Mem0[ss:bp - 0x0024:byte]
	SCZO = cond(Mem0[ss:bp - 0x0020:byte] - al)
	branch Test(UGE,C) l0177_EC61
	// succ:  l0177_EC57 l0177_EC61
l0177_EC57:
	v2691 = Mem0[ss:bp - 0x000A:word16] + 0xD600
	Mem0[ss:bp - 0x000A:word16] = v2691
	SCZO = cond(v2691)
	v2692 = Mem0[ss:bp - 0x0008:word16] + 0x0083 + C
	Mem0[ss:bp - 0x0008:word16] = v2692
	SCZO = cond(v2692)
	// succ:  l0177_EC61
l0177_EC61:
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - dx)
	branch Test(ULT,C) l0177_EC7E
	// succ:  l0177_EC6C l0177_EC7E
l0177_EC6C:
	branch Test(UGT,CZ) l0177_EC73
	// succ:  l0177_EC6E l0177_EC73
l0177_EC6E:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULE,CZ) l0177_EC7E
	// succ:  l0177_EC73 l0177_EC7E
l0177_EC73:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1CB4 (retsize: 2;)
	sp = sp + 0x0002
l0177_EC7E:
	v2767 = Mem0[ss:bp - 0x0006:word16] + 0x000E
	Mem0[ss:bp - 0x0006:word16] = v2767
	SCZO = cond(v2767)
	v2768 = Mem0[ss:bp - 0x0004:word16] + 0x00 + C
	Mem0[ss:bp - 0x0004:word16] = v2768
	SCZO = cond(v2768)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_ED9C (retsize: 2;)
	sp = sp + 0xFFFC
	ax = bp - 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0020:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001F:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001E:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	al = Mem0[ss:bp - 0x0024:byte]
	SCZO = cond(Mem0[ss:bp - 0x0020:byte] - al)
	branch Test(UGE,C) l0177_ED0A
	// succ:  l0177_ED00 l0177_ED0A
l0177_ED00:
	v2769 = Mem0[ss:bp - 0x000A:word16] + 0xD600
	Mem0[ss:bp - 0x000A:word16] = v2769
	SCZO = cond(v2769)
	v2770 = Mem0[ss:bp - 0x0008:word16] + 0x0083 + C
	Mem0[ss:bp - 0x0008:word16] = v2770
	SCZO = cond(v2770)
	// succ:  l0177_ED0A
l0177_ED0A:
	ax = Mem0[ss:bp - 0x000A:word16]
	dx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - dx)
	branch Test(ULT,C) l0177_ED27
	// succ:  l0177_ED15 l0177_ED27
l0177_ED15:
	branch Test(UGT,CZ) l0177_ED1C
	// succ:  l0177_ED17 l0177_ED1C
l0177_ED17:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULE,CZ) l0177_ED27
	// succ:  l0177_ED1C l0177_ED27
l0177_ED1C:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1CB4 (retsize: 2;)
	sp = sp + 0x0002
l0177_ED27:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	goto l0177_ED2B
	// succ:  l0177_ED2B
l0177_ED2A:
	si = si - 0x0001
	SZO = cond(si)
	// succ:  l0177_ED2B
l0177_ED2B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l0177_ED3F
l0177_ED3F:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0177_ED49
	// succ:  l0177_ED43 l0177_ED49
l0177_ED43:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0177_ED49
l0177_ED49:
	SCZO = cond(Mem0[ss:bp - 0x0012:word16] - 0x0000)
	branch Test(EQ,Z) l0177_ED57
	// succ:  l0177_ED4F l0177_ED57
l0177_ED4F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0177_ED57
l0177_ED57:
	SCZO = cond(Mem0[ss:bp - 0x001C:word16] - 0x0000)
	branch Test(EQ,Z) l0177_ED65
	// succ:  l0177_ED5D l0177_ED65
l0177_ED5D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0177_ED65
l0177_ED65:
	SCZO = cond(Mem0[ss:bp - 0x001A:word16] - 0x0000)
	branch Test(EQ,Z) l0177_ED73
	// succ:  l0177_ED6B l0177_ED73
l0177_ED6B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0177_ED73
l0177_ED73:
	SCZO = cond(Mem0[ss:bp - 0x0018:word16] - 0x0000)
	branch Test(EQ,Z) l0177_ED81
	// succ:  l0177_ED79 l0177_ED81
l0177_ED79:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0177_ED81
l0177_ED81:
	SCZO = cond(Mem0[ss:bp - 0x0016:word16] - 0x0000)
	branch Test(EQ,Z) l0177_ED8F
	// succ:  l0177_ED87 l0177_ED8F
l0177_ED87:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0016:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0177_ED8F
l0177_ED8F:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_EE2E:
	branch Test(ULE,CZ) l0177_EE2E_thunk_fn0177_EE3E
	// succ:  l0177_EE2E_thunk_fn0177_EE30 l0177_EE2E_thunk_fn0177_EE3E
l0177_EE2E_thunk_fn0177_EE30:
	call fn0177_EE30 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit l0177_EE2E_thunk_fn0177_EE30
l0177_EE2E_thunk_fn0177_EE30:
	call fn0177_EE30 (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_EE2E_thunk_fn0177_EE3E:
	call fn0177_EE3E (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_EE3A:
	v4252 = (Mem0[ds:bx + 0x0050 + si:byte] & 0x01 << 0x08 - 0xB8) != 0x00
	Mem0[ds:bx + 0x0050 + si:byte] = __rcl(Mem0[ds:bx + 0x0050 + si:byte], 0xB8, C)
	C = v4252
	// succ:  l0177_EE3A_thunk_fn0177_EE3E
l0177_EE3A_thunk_fn0177_EE3E:
	call fn0177_EE3E (retsize: 4;)
	return
	// succ:  fn0177_0B70_exit
l0177_EE46:
	ax = 0x7700
	bl = bl + Mem0[ss:bp + 0x005F:byte]
	SCZO = cond(bl)
	// succ:  l0177_EE4C_in_fn0177_0B70
l0177_EE4C_in_fn0177_0B70:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
l0177_EF0E_in_fn0177_0B70:
	return
	// succ:  fn0177_0B70_exit
l0177_EF0E_in_fn0177_0B70:
	return
	// succ:  fn0177_0B70_exit
l0177_FA06:
	v1617 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1617
	SCZO = cond(v1617)
	v1618 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1618
	SCZO = cond(v1618)
	v1619 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1619
	SCZO = cond(v1619)
	v1620 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1620
	SCZO = cond(v1620)
	v1621 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1621
	SCZO = cond(v1621)
	v1622 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1622
	SCZO = cond(v1622)
	v1623 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1623
	SCZO = cond(v1623)
	v1624 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1624
	SCZO = cond(v1624)
	v1625 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1625
	SCZO = cond(v1625)
	v1626 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1626
	SCZO = cond(v1626)
	v1627 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1627
	SCZO = cond(v1627)
	v1628 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1628
	SCZO = cond(v1628)
	v1629 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1629
	SCZO = cond(v1629)
	v1630 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1630
	SCZO = cond(v1630)
	v1631 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1631
	SCZO = cond(v1631)
	v1632 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1632
	SCZO = cond(v1632)
	v1633 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1633
	SCZO = cond(v1633)
	v1634 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1634
	SCZO = cond(v1634)
	v1635 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1635
	SCZO = cond(v1635)
	v1636 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1636
	SCZO = cond(v1636)
	v1637 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1637
	SCZO = cond(v1637)
	v1638 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1638
	SCZO = cond(v1638)
	v1639 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1639
	SCZO = cond(v1639)
	v1640 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1640
	SCZO = cond(v1640)
	v1641 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1641
	SCZO = cond(v1641)
	v1642 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1642
	SCZO = cond(v1642)
	v1643 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1643
	SCZO = cond(v1643)
	v1644 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1644
	SCZO = cond(v1644)
	v1645 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1645
	SCZO = cond(v1645)
	v1646 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1646
	SCZO = cond(v1646)
	v1647 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1647
	SCZO = cond(v1647)
	v1648 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1648
	SCZO = cond(v1648)
	v1649 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1649
	SCZO = cond(v1649)
	v1650 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1650
	SCZO = cond(v1650)
	v1651 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1651
	SCZO = cond(v1651)
	v1652 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1652
	SCZO = cond(v1652)
	v1653 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1653
	SCZO = cond(v1653)
	v1654 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1654
	SCZO = cond(v1654)
	v1655 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1655
	SCZO = cond(v1655)
	v1656 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1656
	SCZO = cond(v1656)
	v1657 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1657
	SCZO = cond(v1657)
	v1658 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1658
	SCZO = cond(v1658)
	v1659 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1659
	SCZO = cond(v1659)
	v1660 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1660
	SCZO = cond(v1660)
	v1661 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1661
	SCZO = cond(v1661)
	v1662 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1662
	SCZO = cond(v1662)
	v1663 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1663
	SCZO = cond(v1663)
	v1664 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1664
	SCZO = cond(v1664)
	v1665 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1665
	SCZO = cond(v1665)
	v1666 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1666
	SCZO = cond(v1666)
	v1667 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1667
	SCZO = cond(v1667)
	v1668 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1668
	SCZO = cond(v1668)
	v1669 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1669
	SCZO = cond(v1669)
	v1670 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1670
	SCZO = cond(v1670)
	v1671 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1671
	SCZO = cond(v1671)
	v1672 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1672
	SCZO = cond(v1672)
	v1673 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1673
	SCZO = cond(v1673)
	v1674 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1674
	SCZO = cond(v1674)
	v1675 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1675
	SCZO = cond(v1675)
	v1676 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1676
	SCZO = cond(v1676)
	v1677 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1677
	SCZO = cond(v1677)
	v1678 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1678
	SCZO = cond(v1678)
	v1679 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1679
	SCZO = cond(v1679)
	v1680 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1680
	SCZO = cond(v1680)
	v1681 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1681
	SCZO = cond(v1681)
	v1682 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1682
	SCZO = cond(v1682)
	v1683 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1683
	SCZO = cond(v1683)
	v1684 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1684
	SCZO = cond(v1684)
	v1685 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1685
	SCZO = cond(v1685)
	v1686 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1686
	SCZO = cond(v1686)
	v1687 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1687
	SCZO = cond(v1687)
	v1688 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1688
	SCZO = cond(v1688)
	v1689 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1689
	SCZO = cond(v1689)
	v1690 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1690
	SCZO = cond(v1690)
	v1691 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1691
	SCZO = cond(v1691)
	v1692 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1692
	SCZO = cond(v1692)
	v1693 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1693
	SCZO = cond(v1693)
	v1694 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1694
	SCZO = cond(v1694)
	v1695 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1695
	SCZO = cond(v1695)
	v1696 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1696
	SCZO = cond(v1696)
	v1697 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1697
	SCZO = cond(v1697)
	v1698 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1698
	SCZO = cond(v1698)
	v1699 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1699
	SCZO = cond(v1699)
	v1700 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1700
	SCZO = cond(v1700)
	v1701 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1701
	SCZO = cond(v1701)
	v1702 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1702
	SCZO = cond(v1702)
	v1703 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1703
	SCZO = cond(v1703)
	v1704 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1704
	SCZO = cond(v1704)
	v1705 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1705
	SCZO = cond(v1705)
	v1706 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1706
	SCZO = cond(v1706)
	v1707 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1707
	SCZO = cond(v1707)
	v1708 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1708
	SCZO = cond(v1708)
	v1709 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1709
	SCZO = cond(v1709)
	v1710 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1710
	SCZO = cond(v1710)
	v1711 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1711
	SCZO = cond(v1711)
	v1712 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1712
	SCZO = cond(v1712)
	v1713 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1713
	SCZO = cond(v1713)
	v1714 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1714
	SCZO = cond(v1714)
	v1715 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1715
	SCZO = cond(v1715)
	v1716 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1716
	SCZO = cond(v1716)
	v1717 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1717
	SCZO = cond(v1717)
	v1718 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1718
	SCZO = cond(v1718)
	v1719 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1719
	SCZO = cond(v1719)
	v1720 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1720
	SCZO = cond(v1720)
	v1721 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1721
	SCZO = cond(v1721)
	v1722 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1722
	SCZO = cond(v1722)
	v1723 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1723
	SCZO = cond(v1723)
	v1724 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1724
	SCZO = cond(v1724)
	v1725 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1725
	SCZO = cond(v1725)
	v1726 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1726
	SCZO = cond(v1726)
	v1727 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1727
	SCZO = cond(v1727)
	v1728 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1728
	SCZO = cond(v1728)
	v1729 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1729
	SCZO = cond(v1729)
	v1730 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1730
	SCZO = cond(v1730)
	v1731 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1731
	SCZO = cond(v1731)
	v1732 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1732
	SCZO = cond(v1732)
	v1733 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1733
	SCZO = cond(v1733)
	v1734 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1734
	SCZO = cond(v1734)
	v1735 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1735
	SCZO = cond(v1735)
	v1736 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1736
	SCZO = cond(v1736)
	v1737 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1737
	SCZO = cond(v1737)
	v1738 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1738
	SCZO = cond(v1738)
	v1739 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1739
	SCZO = cond(v1739)
	v1740 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1740
	SCZO = cond(v1740)
	v1741 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1741
	SCZO = cond(v1741)
	v1742 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1742
	SCZO = cond(v1742)
	v1743 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1743
	SCZO = cond(v1743)
	v1744 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1744
	SCZO = cond(v1744)
	v1745 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1745
	SCZO = cond(v1745)
	v1746 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1746
	SCZO = cond(v1746)
	v1747 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1747
	SCZO = cond(v1747)
	v1748 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1748
	SCZO = cond(v1748)
	v1749 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1749
	SCZO = cond(v1749)
	v1750 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1750
	SCZO = cond(v1750)
	v1751 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1751
	SCZO = cond(v1751)
	v1752 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1752
	SCZO = cond(v1752)
	v1753 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1753
	SCZO = cond(v1753)
	v1754 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1754
	SCZO = cond(v1754)
	v1755 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1755
	SCZO = cond(v1755)
	v1756 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1756
	SCZO = cond(v1756)
	v1757 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1757
	SCZO = cond(v1757)
	v1758 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1758
	SCZO = cond(v1758)
	v1759 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1759
	SCZO = cond(v1759)
	v1760 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1760
	SCZO = cond(v1760)
	v1761 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1761
	SCZO = cond(v1761)
	v1762 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1762
	SCZO = cond(v1762)
	v1763 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1763
	SCZO = cond(v1763)
	v1764 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1764
	SCZO = cond(v1764)
	v1765 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1765
	SCZO = cond(v1765)
	v1766 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1766
	SCZO = cond(v1766)
	v1767 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1767
	SCZO = cond(v1767)
	v1768 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1768
	SCZO = cond(v1768)
	v1769 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1769
	SCZO = cond(v1769)
	v1770 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1770
	SCZO = cond(v1770)
	v1771 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1771
	SCZO = cond(v1771)
	v1772 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1772
	SCZO = cond(v1772)
	v1773 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1773
	SCZO = cond(v1773)
	v1774 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1774
	SCZO = cond(v1774)
	v1775 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1775
	SCZO = cond(v1775)
	v1776 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1776
	SCZO = cond(v1776)
	v1777 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1777
	SCZO = cond(v1777)
	v1778 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1778
	SCZO = cond(v1778)
	v1779 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1779
	SCZO = cond(v1779)
	v1780 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1780
	SCZO = cond(v1780)
	v1781 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1781
	SCZO = cond(v1781)
	v1782 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1782
	SCZO = cond(v1782)
	v1783 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1783
	SCZO = cond(v1783)
	v1784 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1784
	SCZO = cond(v1784)
	v1785 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1785
	SCZO = cond(v1785)
	v1786 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1786
	SCZO = cond(v1786)
	v1787 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1787
	SCZO = cond(v1787)
	v1788 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1788
	SCZO = cond(v1788)
	v1789 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1789
	SCZO = cond(v1789)
	v1790 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1790
	SCZO = cond(v1790)
	v1791 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1791
	SCZO = cond(v1791)
	v1792 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1792
	SCZO = cond(v1792)
	v1793 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1793
	SCZO = cond(v1793)
	v1794 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1794
	SCZO = cond(v1794)
	v1795 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1795
	SCZO = cond(v1795)
	v1796 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1796
	SCZO = cond(v1796)
	v1797 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1797
	SCZO = cond(v1797)
	v1798 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1798
	SCZO = cond(v1798)
	v1799 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1799
	SCZO = cond(v1799)
	v1800 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1800
	SCZO = cond(v1800)
	v1801 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1801
	SCZO = cond(v1801)
	v1802 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1802
	SCZO = cond(v1802)
	v1803 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1803
	SCZO = cond(v1803)
	v1804 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1804
	SCZO = cond(v1804)
	v1805 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1805
	SCZO = cond(v1805)
	v1806 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1806
	SCZO = cond(v1806)
	v1807 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1807
	SCZO = cond(v1807)
	v1808 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1808
	SCZO = cond(v1808)
	v1809 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1809
	SCZO = cond(v1809)
	v1810 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1810
	SCZO = cond(v1810)
	v1811 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1811
	SCZO = cond(v1811)
	v1812 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1812
	SCZO = cond(v1812)
	v1813 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1813
	SCZO = cond(v1813)
	v1814 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1814
	SCZO = cond(v1814)
	v1815 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1815
	SCZO = cond(v1815)
	v1816 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1816
	SCZO = cond(v1816)
	v1817 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1817
	SCZO = cond(v1817)
	v1818 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1818
	SCZO = cond(v1818)
	v1819 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1819
	SCZO = cond(v1819)
	v1820 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1820
	SCZO = cond(v1820)
	v1821 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1821
	SCZO = cond(v1821)
	v1822 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1822
	SCZO = cond(v1822)
	v1823 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1823
	SCZO = cond(v1823)
	v1824 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1824
	SCZO = cond(v1824)
	v1825 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1825
	SCZO = cond(v1825)
	v1826 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1826
	SCZO = cond(v1826)
	v1827 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1827
	SCZO = cond(v1827)
	v1828 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1828
	SCZO = cond(v1828)
	v1829 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1829
	SCZO = cond(v1829)
	v1830 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1830
	SCZO = cond(v1830)
	v1831 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1831
	SCZO = cond(v1831)
	v1832 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1832
	SCZO = cond(v1832)
	v1833 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1833
	SCZO = cond(v1833)
	v1834 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1834
	SCZO = cond(v1834)
	v1835 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1835
	SCZO = cond(v1835)
	v1836 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1836
	SCZO = cond(v1836)
	v1837 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1837
	SCZO = cond(v1837)
	v1838 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1838
	SCZO = cond(v1838)
	v1839 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1839
	SCZO = cond(v1839)
	v1840 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1840
	SCZO = cond(v1840)
	v1841 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1841
	SCZO = cond(v1841)
	v1842 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1842
	SCZO = cond(v1842)
	v1843 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1843
	SCZO = cond(v1843)
	v1844 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1844
	SCZO = cond(v1844)
	v1845 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1845
	SCZO = cond(v1845)
	v1846 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1846
	SCZO = cond(v1846)
	v1847 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1847
	SCZO = cond(v1847)
	v1848 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1848
	SCZO = cond(v1848)
	v1849 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1849
	SCZO = cond(v1849)
	v1850 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1850
	SCZO = cond(v1850)
	v1851 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1851
	SCZO = cond(v1851)
	v1852 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1852
	SCZO = cond(v1852)
	v1853 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1853
	SCZO = cond(v1853)
	v1854 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1854
	SCZO = cond(v1854)
	v1855 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1855
	SCZO = cond(v1855)
	v1856 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1856
	SCZO = cond(v1856)
	v1857 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1857
	SCZO = cond(v1857)
	v1858 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1858
	SCZO = cond(v1858)
	v1859 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1859
	SCZO = cond(v1859)
	v1860 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1860
	SCZO = cond(v1860)
	v1861 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1861
	SCZO = cond(v1861)
	v1862 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1862
	SCZO = cond(v1862)
	v1863 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1863
	SCZO = cond(v1863)
	v1864 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1864
	SCZO = cond(v1864)
	v1865 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1865
	SCZO = cond(v1865)
	v1866 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1866
	SCZO = cond(v1866)
	v1867 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1867
	SCZO = cond(v1867)
	v1868 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1868
	SCZO = cond(v1868)
	v1869 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1869
	SCZO = cond(v1869)
	v1870 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1870
	SCZO = cond(v1870)
	v1871 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1871
	SCZO = cond(v1871)
	v1872 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1872
	SCZO = cond(v1872)
	v1873 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1873
	SCZO = cond(v1873)
	v1874 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1874
	SCZO = cond(v1874)
	v1875 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1875
	SCZO = cond(v1875)
	v1876 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1876
	SCZO = cond(v1876)
	v1877 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1877
	SCZO = cond(v1877)
	v1878 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1878
	SCZO = cond(v1878)
	v1879 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1879
	SCZO = cond(v1879)
	v1880 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1880
	SCZO = cond(v1880)
	// succ:  l0177_FC16
l0177_FC16:
	v1881 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1881
	SCZO = cond(v1881)
	v1882 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1882
	SCZO = cond(v1882)
	v1883 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1883
	SCZO = cond(v1883)
	v1884 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1884
	SCZO = cond(v1884)
	v1885 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1885
	SCZO = cond(v1885)
	v1886 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1886
	SCZO = cond(v1886)
	v1887 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1887
	SCZO = cond(v1887)
	v1888 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1888
	SCZO = cond(v1888)
	v1889 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1889
	SCZO = cond(v1889)
	v1890 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1890
	SCZO = cond(v1890)
	v1891 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1891
	SCZO = cond(v1891)
	v1892 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1892
	SCZO = cond(v1892)
	v1893 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1893
	SCZO = cond(v1893)
	v1894 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1894
	SCZO = cond(v1894)
	v1895 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1895
	SCZO = cond(v1895)
	v1896 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1896
	SCZO = cond(v1896)
	v1897 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1897
	SCZO = cond(v1897)
	v1898 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1898
	SCZO = cond(v1898)
	v1899 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1899
	SCZO = cond(v1899)
	v1900 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1900
	SCZO = cond(v1900)
	v1901 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1901
	SCZO = cond(v1901)
	v1902 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1902
	SCZO = cond(v1902)
	v1903 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1903
	SCZO = cond(v1903)
	v1904 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1904
	SCZO = cond(v1904)
	v1905 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1905
	SCZO = cond(v1905)
	v1906 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1906
	SCZO = cond(v1906)
	v1907 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1907
	SCZO = cond(v1907)
	v1908 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1908
	SCZO = cond(v1908)
	// succ:  l0177_FC4E
l0177_FC4E:
	v1072 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1072
	SCZO = cond(v1072)
	v1073 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1073
	SCZO = cond(v1073)
	v1074 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1074
	SCZO = cond(v1074)
	v1075 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1075
	SCZO = cond(v1075)
	v1076 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1076
	SCZO = cond(v1076)
	v1077 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1077
	SCZO = cond(v1077)
	v1078 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1078
	SCZO = cond(v1078)
	v1079 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1079
	SCZO = cond(v1079)
	v1080 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1080
	SCZO = cond(v1080)
	v1081 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1081
	SCZO = cond(v1081)
	v1082 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1082
	SCZO = cond(v1082)
	v1083 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1083
	SCZO = cond(v1083)
	v1084 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1084
	SCZO = cond(v1084)
	v1085 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1085
	SCZO = cond(v1085)
	v1086 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1086
	SCZO = cond(v1086)
	v1087 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1087
	SCZO = cond(v1087)
	v1088 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1088
	SCZO = cond(v1088)
	v1089 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1089
	SCZO = cond(v1089)
	v1090 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1090
	SCZO = cond(v1090)
	v1091 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1091
	SCZO = cond(v1091)
	v1092 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1092
	SCZO = cond(v1092)
	v1093 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1093
	SCZO = cond(v1093)
	v1094 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1094
	SCZO = cond(v1094)
	v1095 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1095
	SCZO = cond(v1095)
	v1096 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1096
	SCZO = cond(v1096)
	v1097 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1097
	SCZO = cond(v1097)
	v1098 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1098
	SCZO = cond(v1098)
	v1099 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1099
	SCZO = cond(v1099)
	v1100 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1100
	SCZO = cond(v1100)
	v1101 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1101
	SCZO = cond(v1101)
	v1102 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1102
	SCZO = cond(v1102)
	v1103 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1103
	SCZO = cond(v1103)
	v1104 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1104
	SCZO = cond(v1104)
	v1105 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1105
	SCZO = cond(v1105)
	v1106 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1106
	SCZO = cond(v1106)
	v1107 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1107
	SCZO = cond(v1107)
	v1108 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1108
	SCZO = cond(v1108)
	v1109 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1109
	SCZO = cond(v1109)
	v1110 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1110
	SCZO = cond(v1110)
	v1111 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1111
	SCZO = cond(v1111)
	v1112 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1112
	SCZO = cond(v1112)
	v1113 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1113
	SCZO = cond(v1113)
	v1114 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1114
	SCZO = cond(v1114)
	goto l0177_FCA4
	// succ:  l0177_FCA4
l0177_FCA3:
	v1947 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1947
	SCZO = cond(v1947)
	goto l0177_FCA5
	// succ:  l0177_FCA5
l0177_FCA4:
	v1126 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1126
	SCZO = cond(v1126)
	// succ:  l0177_FCA5
l0177_FCA5:
	v1127 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1127
	SCZO = cond(v1127)
	v1128 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1128
	SCZO = cond(v1128)
	v1129 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1129
	SCZO = cond(v1129)
	v1130 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1130
	SCZO = cond(v1130)
	v1131 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1131
	SCZO = cond(v1131)
	v1132 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1132
	SCZO = cond(v1132)
	v1133 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1133
	SCZO = cond(v1133)
	v1134 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1134
	SCZO = cond(v1134)
	v1135 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1135
	SCZO = cond(v1135)
	v1136 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1136
	SCZO = cond(v1136)
	v1137 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1137
	SCZO = cond(v1137)
	v1138 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1138
	SCZO = cond(v1138)
	v1139 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1139
	SCZO = cond(v1139)
	v1140 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1140
	SCZO = cond(v1140)
	v1141 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1141
	SCZO = cond(v1141)
	v1142 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1142
	SCZO = cond(v1142)
	v1143 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1143
	SCZO = cond(v1143)
	v1144 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1144
	SCZO = cond(v1144)
	v1145 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1145
	SCZO = cond(v1145)
	v1146 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1146
	SCZO = cond(v1146)
	v1147 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1147
	SCZO = cond(v1147)
	v1148 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1148
	SCZO = cond(v1148)
	v1149 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1149
	SCZO = cond(v1149)
	v1150 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1150
	SCZO = cond(v1150)
	v1151 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1151
	SCZO = cond(v1151)
	v1152 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1152
	SCZO = cond(v1152)
	v1153 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1153
	SCZO = cond(v1153)
	v1154 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1154
	SCZO = cond(v1154)
	v1155 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1155
	SCZO = cond(v1155)
	v1156 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1156
	SCZO = cond(v1156)
	v1157 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1157
	SCZO = cond(v1157)
	v1158 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1158
	SCZO = cond(v1158)
	v1159 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1159
	SCZO = cond(v1159)
	v1160 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1160
	SCZO = cond(v1160)
	v1161 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1161
	SCZO = cond(v1161)
	v1162 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1162
	SCZO = cond(v1162)
	v1163 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1163
	SCZO = cond(v1163)
	v1164 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1164
	SCZO = cond(v1164)
	v1165 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1165
	SCZO = cond(v1165)
	v1166 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1166
	SCZO = cond(v1166)
	v1167 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1167
	SCZO = cond(v1167)
	v1168 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1168
	SCZO = cond(v1168)
	v1169 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1169
	SCZO = cond(v1169)
	v1170 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1170
	SCZO = cond(v1170)
	v1171 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1171
	SCZO = cond(v1171)
	v1172 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1172
	SCZO = cond(v1172)
	v1173 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1173
	SCZO = cond(v1173)
	v1174 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1174
	SCZO = cond(v1174)
	v1175 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1175
	SCZO = cond(v1175)
	v1176 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1176
	SCZO = cond(v1176)
	v1177 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1177
	SCZO = cond(v1177)
	v1178 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1178
	SCZO = cond(v1178)
	v1179 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1179
	SCZO = cond(v1179)
	v1180 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1180
	SCZO = cond(v1180)
	v1181 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1181
	SCZO = cond(v1181)
	v1182 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1182
	SCZO = cond(v1182)
	v1183 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1183
	SCZO = cond(v1183)
	v1184 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1184
	SCZO = cond(v1184)
	v1185 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1185
	SCZO = cond(v1185)
	v1186 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1186
	SCZO = cond(v1186)
	v1187 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1187
	SCZO = cond(v1187)
	v1188 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1188
	SCZO = cond(v1188)
	v1189 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1189
	SCZO = cond(v1189)
	v1190 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1190
	SCZO = cond(v1190)
	v1191 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1191
	SCZO = cond(v1191)
	v1192 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1192
	SCZO = cond(v1192)
	v1193 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1193
	SCZO = cond(v1193)
	v1194 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1194
	SCZO = cond(v1194)
	v1195 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1195
	SCZO = cond(v1195)
	v1196 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1196
	SCZO = cond(v1196)
	v1197 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1197
	SCZO = cond(v1197)
	v1198 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1198
	SCZO = cond(v1198)
	v1199 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1199
	SCZO = cond(v1199)
	v1200 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1200
	SCZO = cond(v1200)
	v1201 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1201
	SCZO = cond(v1201)
	v1202 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1202
	SCZO = cond(v1202)
	v1203 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1203
	SCZO = cond(v1203)
	v1204 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1204
	SCZO = cond(v1204)
	v1205 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1205
	SCZO = cond(v1205)
	v1206 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1206
	SCZO = cond(v1206)
	v1207 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1207
	SCZO = cond(v1207)
	v1208 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1208
	SCZO = cond(v1208)
	v1209 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1209
	SCZO = cond(v1209)
	v1210 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1210
	SCZO = cond(v1210)
	v1211 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1211
	SCZO = cond(v1211)
	v1212 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1212
	SCZO = cond(v1212)
	v1213 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1213
	SCZO = cond(v1213)
	v1214 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1214
	SCZO = cond(v1214)
	v1215 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1215
	SCZO = cond(v1215)
	v1216 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1216
	SCZO = cond(v1216)
	v1217 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1217
	SCZO = cond(v1217)
	v1218 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1218
	SCZO = cond(v1218)
	v1219 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1219
	SCZO = cond(v1219)
	v1220 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1220
	SCZO = cond(v1220)
	v1221 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1221
	SCZO = cond(v1221)
	v1222 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1222
	SCZO = cond(v1222)
	v1223 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1223
	SCZO = cond(v1223)
	v1224 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1224
	SCZO = cond(v1224)
	v1225 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1225
	SCZO = cond(v1225)
	v1226 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1226
	SCZO = cond(v1226)
	v1227 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1227
	SCZO = cond(v1227)
	v1228 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1228
	SCZO = cond(v1228)
	v1229 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1229
	SCZO = cond(v1229)
	v1230 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1230
	SCZO = cond(v1230)
	v1231 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1231
	SCZO = cond(v1231)
	v1232 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1232
	SCZO = cond(v1232)
	v1233 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1233
	SCZO = cond(v1233)
	v1234 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1234
	SCZO = cond(v1234)
	v1235 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1235
	SCZO = cond(v1235)
	v1236 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1236
	SCZO = cond(v1236)
	v1237 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1237
	SCZO = cond(v1237)
	v1238 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1238
	SCZO = cond(v1238)
	v1239 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1239
	SCZO = cond(v1239)
	v1240 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1240
	SCZO = cond(v1240)
	v1241 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1241
	SCZO = cond(v1241)
	v1242 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1242
	SCZO = cond(v1242)
	v1243 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1243
	SCZO = cond(v1243)
	v1244 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1244
	SCZO = cond(v1244)
	v1245 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1245
	SCZO = cond(v1245)
	v1246 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1246
	SCZO = cond(v1246)
	v1247 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1247
	SCZO = cond(v1247)
	v1248 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1248
	SCZO = cond(v1248)
	v1249 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1249
	SCZO = cond(v1249)
	v1250 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1250
	SCZO = cond(v1250)
	v1251 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1251
	SCZO = cond(v1251)
	v1252 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1252
	SCZO = cond(v1252)
	v1253 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1253
	SCZO = cond(v1253)
	v1254 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1254
	SCZO = cond(v1254)
	v1255 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1255
	SCZO = cond(v1255)
	v1256 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1256
	SCZO = cond(v1256)
	v1257 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1257
	SCZO = cond(v1257)
	v1258 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1258
	SCZO = cond(v1258)
	v1259 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1259
	SCZO = cond(v1259)
	v1260 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1260
	SCZO = cond(v1260)
	v1261 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1261
	SCZO = cond(v1261)
	v1262 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1262
	SCZO = cond(v1262)
	v1263 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1263
	SCZO = cond(v1263)
	v1264 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1264
	SCZO = cond(v1264)
	v1265 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1265
	SCZO = cond(v1265)
	v1266 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1266
	SCZO = cond(v1266)
	v1267 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1267
	SCZO = cond(v1267)
	v1268 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1268
	SCZO = cond(v1268)
	v1269 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1269
	SCZO = cond(v1269)
	v1270 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1270
	SCZO = cond(v1270)
	v1271 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1271
	SCZO = cond(v1271)
	v1272 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1272
	SCZO = cond(v1272)
	v1273 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1273
	SCZO = cond(v1273)
	v1274 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1274
	SCZO = cond(v1274)
	v1275 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1275
	SCZO = cond(v1275)
	v1276 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1276
	SCZO = cond(v1276)
	v1277 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1277
	SCZO = cond(v1277)
	v1278 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1278
	SCZO = cond(v1278)
	v1279 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1279
	SCZO = cond(v1279)
	v1280 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1280
	SCZO = cond(v1280)
	v1281 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1281
	SCZO = cond(v1281)
	v1282 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1282
	SCZO = cond(v1282)
	v1283 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1283
	SCZO = cond(v1283)
	v1284 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1284
	SCZO = cond(v1284)
	v1285 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1285
	SCZO = cond(v1285)
	v1286 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1286
	SCZO = cond(v1286)
	v1287 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1287
	SCZO = cond(v1287)
	v1288 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1288
	SCZO = cond(v1288)
	v1289 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1289
	SCZO = cond(v1289)
	v1290 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1290
	SCZO = cond(v1290)
	v1291 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1291
	SCZO = cond(v1291)
	v1292 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1292
	SCZO = cond(v1292)
	v1293 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1293
	SCZO = cond(v1293)
	v1294 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1294
	SCZO = cond(v1294)
	v1295 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1295
	SCZO = cond(v1295)
	v1296 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1296
	SCZO = cond(v1296)
	v1297 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1297
	SCZO = cond(v1297)
	v1298 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1298
	SCZO = cond(v1298)
	v1299 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1299
	SCZO = cond(v1299)
	v1300 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1300
	SCZO = cond(v1300)
	goto l0177_FE02
	// succ:  l0177_FE02
l0177_FE01:
	v1921 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1921
	SCZO = cond(v1921)
	goto l0177_FE03
	// succ:  l0177_FE03
l0177_FE02:
	v1303 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1303
	SCZO = cond(v1303)
	// succ:  l0177_FE03
l0177_FE03:
	v1304 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1304
	SCZO = cond(v1304)
	v1305 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1305
	SCZO = cond(v1305)
	v1306 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1306
	SCZO = cond(v1306)
	v1307 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1307
	SCZO = cond(v1307)
	v1308 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1308
	SCZO = cond(v1308)
	v1309 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1309
	SCZO = cond(v1309)
	v1310 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1310
	SCZO = cond(v1310)
	v1311 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1311
	SCZO = cond(v1311)
	v1312 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1312
	SCZO = cond(v1312)
	v1313 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1313
	SCZO = cond(v1313)
	v1314 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1314
	SCZO = cond(v1314)
	v1315 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1315
	SCZO = cond(v1315)
	v1316 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1316
	SCZO = cond(v1316)
	v1317 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1317
	SCZO = cond(v1317)
	v1318 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1318
	SCZO = cond(v1318)
	v1319 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1319
	SCZO = cond(v1319)
	v1320 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1320
	SCZO = cond(v1320)
	v1321 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1321
	SCZO = cond(v1321)
	v1322 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1322
	SCZO = cond(v1322)
	v1323 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1323
	SCZO = cond(v1323)
	v1324 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1324
	SCZO = cond(v1324)
	v1325 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1325
	SCZO = cond(v1325)
	v1326 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1326
	SCZO = cond(v1326)
	v1327 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1327
	SCZO = cond(v1327)
	v1328 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1328
	SCZO = cond(v1328)
	v1329 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1329
	SCZO = cond(v1329)
	v1330 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1330
	SCZO = cond(v1330)
	v1331 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1331
	SCZO = cond(v1331)
	v1332 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1332
	SCZO = cond(v1332)
	v1333 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1333
	SCZO = cond(v1333)
	v1334 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1334
	SCZO = cond(v1334)
	v1335 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1335
	SCZO = cond(v1335)
	v1336 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1336
	SCZO = cond(v1336)
	v1337 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1337
	SCZO = cond(v1337)
	v1338 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1338
	SCZO = cond(v1338)
	v1339 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1339
	SCZO = cond(v1339)
	v1340 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1340
	SCZO = cond(v1340)
	v1341 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1341
	SCZO = cond(v1341)
	v1342 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1342
	SCZO = cond(v1342)
	v1343 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1343
	SCZO = cond(v1343)
	v1344 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1344
	SCZO = cond(v1344)
	v1345 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1345
	SCZO = cond(v1345)
	v1346 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1346
	SCZO = cond(v1346)
	v1347 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1347
	SCZO = cond(v1347)
	v1348 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1348
	SCZO = cond(v1348)
	v1349 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1349
	SCZO = cond(v1349)
	v1350 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1350
	SCZO = cond(v1350)
	v1351 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1351
	SCZO = cond(v1351)
	v1352 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1352
	SCZO = cond(v1352)
	v1353 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1353
	SCZO = cond(v1353)
	v1354 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1354
	SCZO = cond(v1354)
	v1355 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1355
	SCZO = cond(v1355)
	v1356 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1356
	SCZO = cond(v1356)
	v1357 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1357
	SCZO = cond(v1357)
	v1358 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1358
	SCZO = cond(v1358)
	v1359 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1359
	SCZO = cond(v1359)
	v1360 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1360
	SCZO = cond(v1360)
	v1361 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1361
	SCZO = cond(v1361)
	v1362 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1362
	SCZO = cond(v1362)
	v1363 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1363
	SCZO = cond(v1363)
	v1364 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1364
	SCZO = cond(v1364)
	v1365 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1365
	SCZO = cond(v1365)
	v1366 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1366
	SCZO = cond(v1366)
	v1367 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1367
	SCZO = cond(v1367)
	v1368 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1368
	SCZO = cond(v1368)
	v1369 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1369
	SCZO = cond(v1369)
	v1370 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1370
	SCZO = cond(v1370)
	v1371 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1371
	SCZO = cond(v1371)
	v1372 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1372
	SCZO = cond(v1372)
	v1373 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1373
	SCZO = cond(v1373)
	v1374 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1374
	SCZO = cond(v1374)
	v1375 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1375
	SCZO = cond(v1375)
	v1376 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1376
	SCZO = cond(v1376)
	v1377 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1377
	SCZO = cond(v1377)
	v1378 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1378
	SCZO = cond(v1378)
	v1379 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1379
	SCZO = cond(v1379)
	v1380 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1380
	SCZO = cond(v1380)
	v1381 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1381
	SCZO = cond(v1381)
	v1382 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1382
	SCZO = cond(v1382)
	v1383 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1383
	SCZO = cond(v1383)
	v1384 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1384
	SCZO = cond(v1384)
	v1385 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1385
	SCZO = cond(v1385)
	v1386 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1386
	SCZO = cond(v1386)
	v1387 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1387
	SCZO = cond(v1387)
	v1388 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1388
	SCZO = cond(v1388)
	v1389 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1389
	SCZO = cond(v1389)
	v1390 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1390
	SCZO = cond(v1390)
	v1391 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1391
	SCZO = cond(v1391)
	v1392 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1392
	SCZO = cond(v1392)
	v1393 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1393
	SCZO = cond(v1393)
	v1394 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1394
	SCZO = cond(v1394)
	v1395 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1395
	SCZO = cond(v1395)
	v1396 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1396
	SCZO = cond(v1396)
	v1397 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1397
	SCZO = cond(v1397)
	v1398 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1398
	SCZO = cond(v1398)
	v1399 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1399
	SCZO = cond(v1399)
	v1400 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1400
	SCZO = cond(v1400)
	v1401 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1401
	SCZO = cond(v1401)
	v1402 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1402
	SCZO = cond(v1402)
	v1403 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1403
	SCZO = cond(v1403)
	v1404 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1404
	SCZO = cond(v1404)
	v1405 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1405
	SCZO = cond(v1405)
	v1406 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1406
	SCZO = cond(v1406)
	v1407 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1407
	SCZO = cond(v1407)
	v1408 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1408
	SCZO = cond(v1408)
	v1409 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1409
	SCZO = cond(v1409)
	v1410 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1410
	SCZO = cond(v1410)
	v1411 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1411
	SCZO = cond(v1411)
	v1412 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1412
	SCZO = cond(v1412)
	v1413 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1413
	SCZO = cond(v1413)
	v1414 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1414
	SCZO = cond(v1414)
	v1415 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1415
	SCZO = cond(v1415)
	v1416 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1416
	SCZO = cond(v1416)
	v1417 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1417
	SCZO = cond(v1417)
	v1418 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1418
	SCZO = cond(v1418)
	v1419 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1419
	SCZO = cond(v1419)
	v1420 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1420
	SCZO = cond(v1420)
	v1421 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1421
	SCZO = cond(v1421)
	v1422 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1422
	SCZO = cond(v1422)
	v1423 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1423
	SCZO = cond(v1423)
	v1424 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1424
	SCZO = cond(v1424)
	v1425 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1425
	SCZO = cond(v1425)
	v1426 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1426
	SCZO = cond(v1426)
	v1427 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1427
	SCZO = cond(v1427)
	v1428 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1428
	SCZO = cond(v1428)
	v1429 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1429
	SCZO = cond(v1429)
	v1430 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1430
	SCZO = cond(v1430)
	v1431 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1431
	SCZO = cond(v1431)
	v1432 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1432
	SCZO = cond(v1432)
	v1433 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1433
	SCZO = cond(v1433)
	v1434 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1434
	SCZO = cond(v1434)
	v1435 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1435
	SCZO = cond(v1435)
	goto l0177_FF0C
	// succ:  l0177_FF0C
l0177_FF0B:
	v4063 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4063
	SCZO = cond(v4063)
	goto l0177_FF0D
	// succ:  l0177_FF0D
l0177_FF0C:
	v1439 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1439
	SCZO = cond(v1439)
	goto l0177_FF0E
	// succ:  l0177_FF0E
l0177_FF0D:
	v1056 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1056
	SCZO = cond(v1056)
	// succ:  l0177_FF0E
l0177_FF0E:
	v1057 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1057
	SCZO = cond(v1057)
	v1058 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1058
	SCZO = cond(v1058)
	v1059 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1059
	SCZO = cond(v1059)
	v1060 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1060
	SCZO = cond(v1060)
	v1061 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1061
	SCZO = cond(v1061)
	v1062 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1062
	SCZO = cond(v1062)
	v1063 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1063
	SCZO = cond(v1063)
	v1064 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1064
	SCZO = cond(v1064)
	// succ:  l0177_FF1F
l0177_FF1F:
	v4074 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4074
	SCZO = cond(v4074)
	v4075 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4075
	SCZO = cond(v4075)
	v4076 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4076
	SCZO = cond(v4076)
	v4077 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4077
	SCZO = cond(v4077)
	v4078 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4078
	SCZO = cond(v4078)
	v4079 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v4079
	SCZO = cond(v4079)
	// succ:  l0177_FF2B
l0177_FF2B:
	v530 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v530
	SCZO = cond(v530)
	v531 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v531
	SCZO = cond(v531)
	v532 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v532
	SCZO = cond(v532)
	v533 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v533
	SCZO = cond(v533)
	v534 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v534
	SCZO = cond(v534)
	v535 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v535
	SCZO = cond(v535)
	v536 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v536
	SCZO = cond(v536)
	v537 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v537
	SCZO = cond(v537)
	v538 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v538
	SCZO = cond(v538)
	v539 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v539
	SCZO = cond(v539)
	v540 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v540
	SCZO = cond(v540)
	v541 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v541
	SCZO = cond(v541)
	v542 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v542
	SCZO = cond(v542)
	v543 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v543
	SCZO = cond(v543)
	v544 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v544
	SCZO = cond(v544)
	v545 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v545
	SCZO = cond(v545)
	v546 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v546
	SCZO = cond(v546)
	goto l0177_FF4D
	// succ:  l0177_FF4D
l0177_FF4C:
	v857 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v857
	SCZO = cond(v857)
	goto l0177_FF4E
	// succ:  l0177_FF4E
l0177_FF4D:
	v593 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v593
	SCZO = cond(v593)
	goto l0177_FF4F
	// succ:  l0177_FF4F
l0177_FF4E:
	v1948 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1948
	SCZO = cond(v1948)
	goto l0177_FF50
	// succ:  l0177_FF50
l0177_FF4F:
	v734 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v734
	SCZO = cond(v734)
	// succ:  l0177_FF50
l0177_FF50:
	v735 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v735
	SCZO = cond(v735)
	v736 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v736
	SCZO = cond(v736)
	v737 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v737
	SCZO = cond(v737)
	v738 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v738
	SCZO = cond(v738)
	v739 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v739
	SCZO = cond(v739)
	v740 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v740
	SCZO = cond(v740)
	v741 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v741
	SCZO = cond(v741)
	v742 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v742
	SCZO = cond(v742)
	v743 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v743
	SCZO = cond(v743)
	v744 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v744
	SCZO = cond(v744)
	v745 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v745
	SCZO = cond(v745)
	v746 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v746
	SCZO = cond(v746)
	v747 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v747
	SCZO = cond(v747)
	v748 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v748
	SCZO = cond(v748)
	v749 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v749
	SCZO = cond(v749)
	v750 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v750
	SCZO = cond(v750)
	v751 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v751
	SCZO = cond(v751)
	v752 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v752
	SCZO = cond(v752)
	v753 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v753
	SCZO = cond(v753)
	v754 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v754
	SCZO = cond(v754)
	v755 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v755
	SCZO = cond(v755)
	v756 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v756
	SCZO = cond(v756)
	v757 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v757
	SCZO = cond(v757)
	v758 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v758
	SCZO = cond(v758)
	v759 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v759
	SCZO = cond(v759)
	v760 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v760
	SCZO = cond(v760)
	v761 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v761
	SCZO = cond(v761)
	v762 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v762
	SCZO = cond(v762)
	v763 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v763
	SCZO = cond(v763)
	v764 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v764
	SCZO = cond(v764)
	v765 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v765
	SCZO = cond(v765)
	v766 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v766
	SCZO = cond(v766)
	v767 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v767
	SCZO = cond(v767)
	v768 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v768
	SCZO = cond(v768)
	v769 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v769
	SCZO = cond(v769)
	v770 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v770
	SCZO = cond(v770)
	v771 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v771
	SCZO = cond(v771)
	v772 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v772
	SCZO = cond(v772)
	v773 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v773
	SCZO = cond(v773)
	v774 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v774
	SCZO = cond(v774)
	v775 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v775
	SCZO = cond(v775)
	v776 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v776
	SCZO = cond(v776)
	v777 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v777
	SCZO = cond(v777)
	v778 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v778
	SCZO = cond(v778)
	v779 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v779
	SCZO = cond(v779)
	v780 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v780
	SCZO = cond(v780)
	v781 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v781
	SCZO = cond(v781)
	v782 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v782
	SCZO = cond(v782)
	v783 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v783
	SCZO = cond(v783)
	v784 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v784
	SCZO = cond(v784)
	v785 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v785
	SCZO = cond(v785)
	v786 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v786
	SCZO = cond(v786)
	v787 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v787
	SCZO = cond(v787)
	v788 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v788
	SCZO = cond(v788)
	v789 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v789
	SCZO = cond(v789)
	v790 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v790
	SCZO = cond(v790)
	v791 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v791
	SCZO = cond(v791)
	v792 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v792
	SCZO = cond(v792)
	v793 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v793
	SCZO = cond(v793)
	v794 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v794
	SCZO = cond(v794)
	v795 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v795
	SCZO = cond(v795)
	v796 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v796
	SCZO = cond(v796)
	v797 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v797
	SCZO = cond(v797)
	v798 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v798
	SCZO = cond(v798)
	v799 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v799
	SCZO = cond(v799)
	// succ:  l0177_FFD3
l0177_FFD3:
	v1118 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1118
	SCZO = cond(v1118)
	v1119 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1119
	SCZO = cond(v1119)
	v1120 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1120
	SCZO = cond(v1120)
	v1121 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1121
	SCZO = cond(v1121)
	v1122 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1122
	SCZO = cond(v1122)
	v1123 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1123
	SCZO = cond(v1123)
	v1124 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1124
	SCZO = cond(v1124)
	v1125 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1125
	SCZO = cond(v1125)
	// succ:  l0177_FFE3
l0177_FFE3:
	v596 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v596
	SCZO = cond(v596)
	v597 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v597
	SCZO = cond(v597)
	v598 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v598
	SCZO = cond(v598)
	v599 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v599
	SCZO = cond(v599)
	v600 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v600
	SCZO = cond(v600)
	v601 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v601
	SCZO = cond(v601)
	v602 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v602
	SCZO = cond(v602)
	v603 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v603
	SCZO = cond(v603)
	v604 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v604
	SCZO = cond(v604)
	v605 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v605
	SCZO = cond(v605)
	v606 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v606
	SCZO = cond(v606)
	v607 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v607
	SCZO = cond(v607)
	v608 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v608
	SCZO = cond(v608)
	v609 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v609
	SCZO = cond(v609)
	v610 = Mem0[ds:0x9058:byte] + bl
	Mem0[ds:0x9058:byte] = v610
	SCZO = cond(v610)
l01AF_114B_in_fn0177_0B70:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_0B70_exit
fn0177_0B70_exit:


// fn0177_1910
// Return size: 4
void fn0177_1910()
fn0177_1910_entry:
	// succ:  l0177_1910
l0177_1910:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0000)
	branch Test(NE,Z) l0177_192E
	// succ:  l0177_1926 l0177_192E
l0177_1926:
	cx = cx - cx
	SCZO = cond(cx)
	bx = 0x0004
	goto l0177_1934
	// succ:  l0177_1934
l0177_192E:
	cx = 0x0004
	bx = 0x000A
	// succ:  l0177_1934
l0177_1934:
	dx = cx
	ax = dx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + 0x0522
	SCZO = cond(cx)
	si = ax
	SCZO = cond(dx - bx)
	branch Test(GE,SO) l0177_198E
	// succ:  l0177_194C l0177_198E
l0177_194C:
	dx = bx
	dx = dx - si
	SCZO = cond(dx)
	si = cx
	di = dx
	// succ:  l0177_1954
l0177_1954:
	SCZO = cond(Mem0[ds:si + 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l0177_1988
	// succ:  l0177_195A l0177_1988
l0177_195A:
	ax = Mem0[ds:si + 0x000C:word16]
	cl = 0x06
	dl = Mem0[ds:si:byte]
	dh = dh - dh
	SCZO = cond(dh)
	dx = dx << cl
	SCZO = cond(dx)
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx + dx
	SCZO = cond(bx)
	cx = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + cx
	SCZO = cond(bx)
	bl = Mem0[ds:bx + 0x0CE4:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x0002:word16] = ax
	Mem0[ds:si + 0x000C:word16] = 0x0000
	// succ:  l0177_1988
l0177_1988:
	si = si + 0x000E
	SCZO = cond(si)
	di = di - 0x0001
	SZO = cond(di)
	branch Test(NE,Z) l0177_1954
	// succ:  l0177_198E l0177_1954
l0177_198E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_1910_exit fn0177_1910_exit
fn0177_1910_exit:


// fn0177_1998
// Return size: 4
void fn0177_1998()
fn0177_1998_entry:
	// succ:  l0177_1998
l0177_1998:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0000)
	branch Test(NE,Z) l0177_19B6
	// succ:  l0177_19AE l0177_19B6
l0177_19AE:
	cx = cx - cx
	SCZO = cond(cx)
	bx = 0x0004
	goto l0177_19BC
	// succ:  l0177_19BC
l0177_19B6:
	cx = 0x0004
	bx = 0x000A
	// succ:  l0177_19BC
l0177_19BC:
	dx = cx
	ax = dx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + 0x0522
	SCZO = cond(cx)
	si = ax
	SCZO = cond(dx - bx)
	branch Test(GE,SO) l0177_1A1F
	goto l0177_19D4
	// succ:  l0177_19D4 l0177_19D2_thunk_fn0177_19DD
l0177_19D2_thunk_fn0177_19DD:
	call fn0177_19DD (retsize: 0;)
	return
	// succ:  fn0177_1998_exit
l0177_19D4:
	ax = bx
	ax = ax - si
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	si = cx
	// succ:  l0177_19DB_thunk_fn0177_19DD
l0177_19DB_thunk_fn0177_19DD:
	call fn0177_19DD (retsize: 0;)
	return
	// succ:  fn0177_1998_exit
fn0177_1998_exit:


// fn0177_19DD
// Return size: 0
void fn0177_19DD()
fn0177_19DD_entry:
	// succ:  l0177_19DD
l0177_19DD:
	cl = 0x06
	al = Mem0[ds:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax << cl
	SCZO = cond(ax)
	bl = Mem0[ds:si + 0x0001:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx + ax
	SCZO = cond(bx)
	// succ:  l0177_19EA_thunk_fn0177_19EB
l0177_19EA_thunk_fn0177_19EB:
	call fn0177_19EB (retsize: 0;)
	return
	// succ:  fn0177_19DD_exit
fn0177_19DD_exit:


// fn0177_19EB
// Return size: 0
void fn0177_19EB()
fn0177_19EB_entry:
	// succ:  l0177_19EB
l0177_19EB:
	sp = fp
	rArg0 = rArg0 * Mem0[ss:(bp + 0xD1C3) + di:real32]
	branch cx == 0x0000 l0177_19F4
	goto l0177_19F1
	// succ:  l0177_19F1 l0177_19F4
l0177_19EB:
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x0002:word16]
	Mem0[ds:si + 0x000C:word16] = ax
	di = di << 0x0001
	SCZO = cond(di)
	bx = Mem0[ds:di + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x0002:word16] = 0x0000
	si = si + 0x000E
	SCZO = cond(si)
	v19 = Mem0[ss:bp - 0x0006:word16] - 0x0001
	Mem0[ss:bp - 0x0006:word16] = v19
	SZO = cond(v19)
	branch Test(NE,Z) l0177_19DD
	goto l0177_1A1F
	// succ:  l0177_1A1F l0177_1A1C_thunk_fn0177_19DD
l0177_19F1:
	rArg0 = rArg0 * Mem0[ss:(bp + 0xE487) + si:real32]
	goto l0177_19F5
	// succ:  l0177_19F5
l0177_19F4:
	al = __inb(0x0C)
	goto l0177_19F6
	// succ:  l0177_19F6
l0177_19F5:
	al = al | 0x2A
	SZO = cond(al)
	C = false
	goto l0177_19F7
	// succ:  l0177_19F7
l0177_19F6:
	ah = ah - ah
	SCZO = cond(ah)
	goto l0177_19F8
	// succ:  l0177_19F8
l0177_19F7:
	al = __inb(0x8B)
	goto l0177_19F9
	// succ:  l0177_19F9
l0177_19F8:
	di = ax
	goto l0177_19FA
	// succ:  l0177_19FA
l0177_19F9:
	C = false
	// succ:  l0177_19FA
l0177_19FA:
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x0002:word16]
	Mem0[ds:si + 0x000C:word16] = ax
	di = di << 0x0001
	SCZO = cond(di)
	bx = Mem0[ds:di + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x0002:word16] = 0x0000
	si = si + 0x000E
	SCZO = cond(si)
	v17 = Mem0[ss:bp - 0x0006:word16] - 0x0001
	Mem0[ss:bp - 0x0006:word16] = v17
	SZO = cond(v17)
	branch Test(NE,Z) l0177_1A1D_thunk_fn0177_19DD
	goto l0177_1A1F_in_fn0177_19EB
	// succ:  l0177_1A1F_in_fn0177_19EB l0177_1A1D_thunk_fn0177_19DD
l0177_1A1C_thunk_fn0177_19DD:
	call fn0177_19DD (retsize: 0;)
	return
	// succ:  fn0177_19EB_exit
l0177_1A1D_thunk_fn0177_19DD:
	call fn0177_19DD (retsize: 0;)
	return
	// succ:  fn0177_19EB_exit
l0177_1A1F:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_19EB_exit
l0177_1A1F_in_fn0177_19EB:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_19EB_exit l0177_1A1F_in_fn0177_19EB
l0177_1A1F_in_fn0177_19EB:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_19EB_exit
fn0177_19EB_exit:


// fn0177_1A2A
// Return size: 4
void fn0177_1A2A()
fn0177_1A2A_entry:
	// succ:  l0177_1A2A
l0177_1A2A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l0177_1A67
	// succ:  l0177_1A3F l0177_1A67
l0177_1A3F:
	SZO = cond(Mem0[ds:bx + 0x0005:byte] & 0xFC)
	C = false
	branch Test(NE,Z) l0177_1A67
	// succ:  l0177_1A45 l0177_1A67
l0177_1A45:
	SZO = cond(Mem0[ds:bx + 0x0004:byte] & 0x7F)
	C = false
	branch Test(NE,Z) l0177_1A67
	// succ:  l0177_1A4B l0177_1A67
l0177_1A4B:
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l0177_1A67
	// succ:  l0177_1A51 l0177_1A67
l0177_1A51:
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0000)
	branch Test(NE,Z) l0177_1A5C
	// succ:  l0177_1A57 l0177_1A5C
l0177_1A57:
	ax = 0x0001
	goto l0177_1A69
	// succ:  l0177_1A69
l0177_1A5C:
	bx = Mem0[ds:bx + 0x0002:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx + 0x0024:word16] - 0x0000)
	branch Test(EQ,Z) l0177_1A57
	// succ:  l0177_1A67 l0177_1A57
l0177_1A67:
	ax = ax - ax
	SCZO = cond(ax)
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l0177_1A69
l0177_1A69:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_1A2A_exit
fn0177_1A2A_exit:


// fn0177_1A74
// Return size: 0
void fn0177_1A74()
fn0177_1A74_entry:
	// succ:  l0177_1A74
l0177_1A74:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4C60:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	dx_ax = Mem0[ds:0x00AA:word16] *u ax
	SCZO = cond(dx_ax)
	ax = ax + 0x0064
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	bx = Mem0[ds:0x05AE:word16]
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x0528:word16]
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	v12 = Mem0[ss:bp + 0x0006:word16] + ax
	Mem0[ss:bp + 0x0006:word16] = v12
	SCZO = cond(v12)
	v14 = Mem0[ss:bp + 0x0008:word16] + dx + C
	Mem0[ss:bp + 0x0008:word16] = v14
	SCZO = cond(v14)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp + 0x0006:word16] = ax
	Mem0[ss:bp + 0x0008:word16] = dx
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_1A74_exit
fn0177_1A74_exit:


// fn0177_1AEE
// Return size: 4
void fn0177_1AEE()
fn0177_1AEE_entry:
	// succ:  l0177_1AEE
l0177_1AEE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0016
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:di + 0x4D2E:byte] = 0x01
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0104
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FindResource(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000A
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0177_1B21
	// succ:  l0177_1B1E l0177_1B21
l0177_1B1E:
	goto l0177_1C3E
	// succ:  l0177_1C3E
l0177_1B21:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LoadResource(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_1B35
	// succ:  l0177_1B32 l0177_1B35
l0177_1B32:
	goto l0177_1C3E
	// succ:  l0177_1C3E
l0177_1B35:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LockResource(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000E:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l0177_1B50
	// succ:  l0177_1B45 l0177_1B50
l0177_1B45:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	FreeResource(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l0177_1C3E
	// succ:  l0177_1C3E
l0177_1B50:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_203C (retsize: 2;)
	sp = sp + 0x0004
	ax = 0x0050
	dx_ax = Mem0[ds:0x4132:word16] *u ax
	SCZO = cond(dx_ax)
	di = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0177_1BAC
	// succ:  l0177_1B6F l0177_1BAC
l0177_1B6F:
	ax = bp - 0x0016
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0016
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0C10
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	DrawText(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	ax = Mem0[ss:bp - 0x0010:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = Mem0[ss:bp - 0x0004:word16]
	goto l0177_1BB5
	// succ:  l0177_1BB5
l0177_1BAC:
	ax = 0x0019
	dx_ax = Mem0[ds:0x4134:word16] *u ax
	SCZO = cond(dx_ax)
	si = ax
	// succ:  l0177_1BB5
l0177_1BB5:
	ax = Mem0[ds:0x4132:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	di = di + ax
	SCZO = cond(di)
	ax = di
	ax = ax - Mem0[ds:0x4124:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + Mem0[ds:0x4124:word16]
	SCZO = cond(ax)
	di = ax
	ax = Mem0[ds:0x4134:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	si = si + ax
	SCZO = cond(si)
	ax = si
	ax = ax - Mem0[ds:0x4126:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + Mem0[ds:0x4126:word16]
	SCZO = cond(ax)
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	GlobalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = 0x0112
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	dx = 0x9240
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = di
	di = di - Mem0[ds:0x4124:word16]
	SCZO = cond(di)
	di = -di
	SCZO = cond(di)
	C = di == 0x0000
	di = di >>u 0x0001
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cx = si
	si = si - Mem0[ds:0x4126:word16]
	SCZO = cond(si)
	si = -si
	SCZO = cond(si)
	C = si == 0x0000
	si = si >>u 0x0001
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	cx = Mem0[ss:bp + 0x0008:word16]
	dx = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_1C3E
	// succ:  l0177_1C32 l0177_1C3E
l0177_1C32:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0177_1C3E
l0177_1C3E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_1AEE_exit
fn0177_1AEE_exit:


// CHURCHDLGPROC
// Return size: 0
void CHURCHDLGPROC()
CHURCHDLGPROC_entry:
	// succ:  l0177_1C4A
l0177_1C4A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x003C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = Mem0[ss:bp + 0x000C:word16]
	ax = cx
	SCZO = cond(ax - 0x0005)
	branch Test(NE,Z) l0177_1C66
	// succ:  l0177_1C63 l0177_1C66
l0177_1C63:
	goto l0177_1DE0
	// succ:  l0177_1DE0
l0177_1C66:
	branch Test(UGT,CZ) l0177_1C86
	// succ:  l0177_1C68 l0177_1C86
l0177_1C68:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0177_1CA0
	// succ:  l0177_1C6B l0177_1CA0
l0177_1C6B:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l0177_1C71
	// succ:  l0177_1C6E l0177_1C71
l0177_1C6E:
	goto l0177_1D3E
	// succ:  l0177_1D3E
l0177_1C71:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	DefWindowProc(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l0177_1C83_thunk_fn0177_1F93
l0177_1C83_thunk_fn0177_1F93:
	call fn0177_1F93 (retsize: 0;)
	return
	// succ:  CHURCHDLGPROC_exit
l0177_1C86:
	ax = ax - 0x0007
	SCZO = cond(ax)
	branch Test(NE,Z) l0177_1C8E
	// succ:  l0177_1C8B l0177_1C8E
l0177_1C8B:
	goto l0177_1E30
	// succ:  l0177_1E30
l0177_1C8E:
	ax = ax - 0x0008
	SCZO = cond(ax)
	branch Test(NE,Z) l0177_1C96
	// succ:  l0177_1C93 l0177_1C96
l0177_1C93:
	goto l0177_1E46
	// succ:  l0177_1E46
l0177_1C96:
	ax = ax - 0x0102
	SCZO = cond(ax)
	branch Test(NE,Z) l0177_1C9E
	// succ:  l0177_1C9B l0177_1C9E
l0177_1C9B:
	goto l0177_1F06
	// succ:  l0177_1F06
l0177_1C9E:
	goto l0177_1C71
	// succ:  l0177_1C71
l0177_1CA0:
	di = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[es:bx:word16]
	SetWindowWord(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	es_bx = Mem0[ss:bp + 0x0006:segptr32]
	ax = Mem0[es:bx + 0x0002:word16]
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SetWindowWord(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = 0x1FAA
	dx = 0x0177
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	MakeProcInstance(Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	ax = 0x0126
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SCZO = cond(si - 0x0001)
	branch Test(NE,Z) l0177_1CEC
	// succ:  l0177_1CE7 l0177_1CEC
l0177_1CE7:
	ax = 0x1FA4
	goto l0177_1CEF
	// succ:  l0177_1CEF
l0177_1CEC:
	ax = 0x1F9F
	// succ:  l0177_1CEF
l0177_1CEF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	dx = 0x5000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateWindow(Mem0[ss:sp + 26:segptr32], Mem0[ss:sp + 22:segptr32], Mem0[ss:sp + 18:word32], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x001E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	Mem0[ss:bp - 0x003C:word16] = ax
	GetWindowLong(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ds:0x4C5C:word16] = ax
	Mem0[ds:0x4C5E:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x003C:word16]
	ax = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	SetWindowLong(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	// succ:  l0177_1D3A_thunk_fn0177_1F90
l0177_1D3A_thunk_fn0177_1F90:
	call fn0177_1F90 (retsize: 0;)
	return
	// succ:  CHURCHDLGPROC_exit
l0177_1D3E:
	di = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowLong(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5C:word16]
	SetWindowLong(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0008
	// succ:  l0177_1D71_thunk_fn0177_1D76
l0177_1D71_thunk_fn0177_1D76:
	call fn0177_1D76 (retsize: 0;)
	return
	// succ:  CHURCHDLGPROC_exit
l0177_1DE0:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFEC
	dx_ax = Mem0[ds:0x4132:word16] *u ax
	SCZO = cond(dx_ax)
	ax = ax + Mem0[ss:bp - 0x0016:word16]
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4134:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax - Mem0[ss:bp - 0x0014:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0014
	dx_ax = Mem0[ds:0x4132:word16] *u ax
	SCZO = cond(dx_ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4134:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MoveWindow(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	// succ:  l0177_1E2D_thunk_fn0177_1F90
l0177_1E2D_thunk_fn0177_1F90:
	call fn0177_1F90 (retsize: 0;)
	return
	// succ:  CHURCHDLGPROC_exit
l0177_1E30:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0177_1E42_thunk_fn0177_1F90
l0177_1E42_thunk_fn0177_1F90:
	call fn0177_1F90 (retsize: 0;)
	return
	// succ:  CHURCHDLGPROC_exit
l0177_1E46:
	di = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0104
	dx_ax = (word32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FindResource(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x000A
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_1E71
	// succ:  l0177_1E6E l0177_1E71
l0177_1E6E:
	// succ:  l0177_1E6E_thunk_fn0177_1F90
l0177_1E6E_thunk_fn0177_1F90:
	call fn0177_1F90 (retsize: 0;)
	return
	// succ:  CHURCHDLGPROC_exit
l0177_1E71:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadResource(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LockResource(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l0177_1E90
	// succ:  l0177_1E8D l0177_1E90
l0177_1E8D:
	// succ:  l0177_1E8D_thunk_fn0177_1F90
l0177_1E8D_thunk_fn0177_1F90:
	call fn0177_1F90 (retsize: 0;)
	return
	// succ:  CHURCHDLGPROC_exit
l0177_1E90:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0177_203C (retsize: 2;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = bp - 0x003A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BeginPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_1EFB
	// succ:  l0177_1EAA l0177_1EFB
l0177_1EAA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = bp - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetClientRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = Mem0[ds:0x4132:word16]
	v21 = Mem0[ss:bp - 0x0012:word16] + ax
	Mem0[ss:bp - 0x0012:word16] = v21
	SCZO = cond(v21)
	v22 = Mem0[ss:bp - 0x000E:word16] - ax
	Mem0[ss:bp - 0x000E:word16] = v22
	SCZO = cond(v22)
	ax = Mem0[ds:0x4134:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	v23 = Mem0[ss:bp - 0x0010:word16] + ax
	Mem0[ss:bp - 0x0010:word16] = v23
	SCZO = cond(v23)
	ax = Mem0[ds:0x4134:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	v24 = Mem0[ss:bp - 0x000C:word16] - ax
	Mem0[ss:bp - 0x000C:word16] = v24
	SCZO = cond(v24)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0810
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	DrawText(Mem0[ss:sp + 12:word16], Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = bp - 0x003A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	// succ:  l0177_1EFB
l0177_1EFB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	GlobalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0177_1F03_thunk_fn0177_1F90
l0177_1F03_thunk_fn0177_1F90:
	call fn0177_1F90 (retsize: 0;)
	return
	// succ:  CHURCHDLGPROC_exit
l0177_1F06:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l0177_1F0F
	// succ:  l0177_1F0C l0177_1F0F
l0177_1F0C:
	// succ:  l0177_1F0C_thunk_fn0177_1F90
l0177_1F0C_thunk_fn0177_1F90:
	call fn0177_1F90 (retsize: 0;)
	return
	// succ:  CHURCHDLGPROC_exit
l0177_1F0F:
	si = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = ax
	SCZO = cond(di - 0x0001)
	branch Test(NE,Z) l0177_1F42
	// succ:  l0177_1F23 l0177_1F42
l0177_1F23:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	PostMessage(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0177_1F3F_thunk_fn0177_1F90
l0177_1F3F_thunk_fn0177_1F90:
	call fn0177_1F90 (retsize: 0;)
	return
	// succ:  CHURCHDLGPROC_exit
l0177_1F42:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = di - 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = ax
	SetWindowWord(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	di = di - 0x0001
	SZO = cond(di)
	branch Test(NE,Z) l0177_1F6A
	// succ:  l0177_1F55 l0177_1F6A
l0177_1F55:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x1FA4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowText(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	// succ:  l0177_1F6A
l0177_1F6A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = di + 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowWord(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l0177_1F8B_thunk_fn0177_1F90
l0177_1F8B_thunk_fn0177_1F90:
	call fn0177_1F90 (retsize: 0;)
	return
	// succ:  CHURCHDLGPROC_exit
CHURCHDLGPROC_exit:


// fn0177_1D76
// Return size: 0
void fn0177_1D76()
fn0177_1D76_entry:
	// succ:  l0177_1D76
l0177_1D76:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	FreeProcInstance(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	SCZO = cond(ax - 0x000F)
	branch Test(EQ,Z) l0177_1D8B_thunk_fn0177_1D90
	goto l0177_1D8B_thunk_fn0177_1D8D
	// succ:  l0177_1D8B_thunk_fn0177_1D8D l0177_1D8B_thunk_fn0177_1D90
l0177_1D76:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	FreeProcInstance(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	SCZO = cond(ax - 0x000F)
	branch Test(EQ,Z) l0177_1D90
	goto l0177_1D8B_thunk_fn0177_1D8D
	// succ:  l0177_1D8B_thunk_fn0177_1D8D l0177_1D8B_thunk_fn0177_1D90
l0177_1D8B_thunk_fn0177_1D8D:
	call fn0177_1D8D (retsize: 0;)
	return
	// succ:  fn0177_1D76_exit l0177_1D8B_thunk_fn0177_1D8D
l0177_1D8B_thunk_fn0177_1D8D:
	call fn0177_1D8D (retsize: 0;)
	return
	// succ:  fn0177_1D76_exit
l0177_1D8B_thunk_fn0177_1D8D:
	call fn0177_1D8D (retsize: 0;)
	return
	// succ:  fn0177_1D76_exit
l0177_1D8B_thunk_fn0177_1D90:
	call fn0177_1D90 (retsize: 0;)
	return
	// succ:  fn0177_1D76_exit
l0177_1D8B_thunk_fn0177_1D90:
	call fn0177_1D90 (retsize: 0;)
	return
	// succ:  fn0177_1D76_exit
fn0177_1D76_exit:


// fn0177_1D8D
// Return size: 0
void fn0177_1D8D()
fn0177_1D8D_entry:
	// succ:  l0177_1D8D
l0177_1D8D:
	call fn0177_1D90 (retsize: 0;)
	return
	// succ:  l0177_1F90 fn0177_1D8D_exit
fn0177_1D8D_exit:


// fn0177_1D90
// Return size: 0
void fn0177_1D90()
fn0177_1D90_entry:
	// succ:  l0177_1D90
l0177_1D90:
	SZO = cond(Mem0[ds:0x4EB7:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0177_1D9A
	// succ:  l0177_1D97 l0177_1D9A
l0177_1D97:
	call fn0177_1D8D (retsize: 0;)
	return
	// succ:  l0177_1F90 fn0177_1D90_exit
l0177_1D9A:
	v15 = Mem0[ds:0x4EB7:byte] | 0x01
	Mem0[ds:0x4EB7:byte] = v15
	SZO = cond(Mem0[ds:0x4EB7:byte])
	C = false
	v16 = Mem0[ds:0x4D1A:byte] | 0x02
	Mem0[ds:0x4D1A:byte] = v16
	SZO = cond(Mem0[ds:0x4D1A:byte])
	C = false
	// succ:  l0177_1DA4
l0177_1DA4:
	call fn01F7_0000 (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_1DC7
	// succ:  l0177_1DAD l0177_1DC7
l0177_1DAD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x034A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0157
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D72 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(ax - 0x0006)
	branch Test(NE,Z) l0177_1DA4
	// succ:  l0177_1DC7 l0177_1DA4
l0177_1DC7:
	ax = 0x02A1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4D8E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1E96 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0177_1DD8_thunk_fn0177_1D8D
l0177_1DD8_thunk_fn0177_1D8D:
	call fn0177_1D8D (retsize: 0;)
	return
	// succ:  fn0177_1D90_exit
fn0177_1D90_exit:


// fn0177_1F90
// Return size: 0
void fn0177_1F90()
fn0177_1F90_entry:
	call fn0177_1D90 (retsize: 0;)
	return
	// succ:  l0177_1F90 fn0177_1F90_exit
l0177_1F90:
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (int32) ax
	// succ:  l0177_1F92_thunk_fn0177_1F93
l0177_1F92_thunk_fn0177_1F93:
	call fn0177_1F93 (retsize: 0;)
	return
	// succ:  fn0177_1F90_exit
fn0177_1F90_exit:


// fn0177_1F93
// Return size: 0
void fn0177_1F93()
fn0177_1F93_entry:
	// succ:  l0177_1F93
l0177_1F93:
	sp = fp
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	goto l0177_1F96_in_fn0177_1F93
	// succ:  l0177_1F96_in_fn0177_1F93
l0177_1F93:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	// succ:  l0177_1F96
l0177_1F96:
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_1F93_exit
l0177_1F96_in_fn0177_1F93:
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_1F93_exit
fn0177_1F93_exit:


// HIGHSCOREWNDPROC
// Return size: 4
void HIGHSCOREWNDPROC()
HIGHSCOREWNDPROC_entry:
	// succ:  l0177_1FAA
l0177_1FAA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000E:word16]
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0100)
	branch Test(NE,Z) l0177_2016
	// succ:  l0177_1FC3 l0177_2016
l0177_1FC3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFF8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = ax
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - 0x000D
	SCZO = cond(ax)
	branch Test(EQ,Z) l0177_1FDE
	// succ:  l0177_1FD7 l0177_1FDE
l0177_1FD7:
	ax = ax - 0x000E
	SCZO = cond(ax)
	branch Test(EQ,Z) l0177_1FFA
	// succ:  l0177_1FDC l0177_1FFA
l0177_1FDC:
	goto l0177_2016
	// succ:  l0177_2016
l0177_1FDE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0111
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0xFFF4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowWord(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	PostMessage(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	goto l0177_2016
	// succ:  l0177_2016
l0177_1FFA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	PostMessage(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EnableWindow(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0177_2016
l0177_2016:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4C5C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	CallWindowProc(Mem0[ss:sp + 10:segptr32], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000E
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  HIGHSCOREWNDPROC_exit
HIGHSCOREWNDPROC_exit:


// fn0177_203C
// Return size: 4
void fn0177_203C()
fn0177_203C_entry:
	// succ:  l0177_203C
l0177_203C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x002C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = Mem0[ss:bp + 0x0006:word16]
	es = Mem0[ss:bp + 0x0008:selector]
	bx = cx
	SCZO = cond(Mem0[es:bx:byte] - 0x23)
	branch Test(EQ,Z) l0177_205C
	// succ:  l0177_2059 l0177_205C
l0177_2059:
	call fn0177_2111 (retsize: 0;)
	return
	// succ:  l0177_2127 fn0177_203C_exit
l0177_205C:
	ax = es
	di = cx
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = cx
	dx = es
	ax = ax + 0x0001
	SZO = cond(ax)
	si = ax
	Mem0[ss:bp - 0x000A:word16] = dx
	bx = si
	SCZO = cond(Mem0[es:bx:byte] - 0x23)
	branch Test(NE,Z) l0177_2078
	goto l0177_2075
	// succ:  l0177_2075 l0177_2073_thunk_fn0177_2111
l0177_2073_thunk_fn0177_2111:
	call fn0177_2111 (retsize: 0;)
	return
	// succ:  fn0177_203C_exit
l0177_2075:
	call fn0177_2111 (retsize: 0;)
	return
	// succ:  l0177_2120 fn0177_203C_exit
fn0177_203C_exit:


// fn0177_20E9
// Return size: 0
void fn0177_20E9()
fn0177_20E9_entry:
	// succ:  l0177_20E9
l0177_20E9:
	sp = fp
	v6 = Mem0[ds:bx:byte] + al
	Mem0[ds:bx:byte] = v6
	SCZO = cond(v6)
	v10 = Mem0[ds:bx - 0x03BA + di:word16] + cx
	Mem0[ds:bx - 0x03BA + di:word16] = v10
	SCZO = cond(v10)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = bp - 0x002C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	lstrcpy(Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	di = di + ax
	SCZO = cond(di)
	goto l0177_2103_thunk_fn0177_2111
	// succ:  l0177_2103_thunk_fn0177_2111
l0177_20E9:
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = bp - 0x002C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	lstrcpy(Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	di = di + ax
	SCZO = cond(di)
	// succ:  l0177_20FE_thunk_fn0177_2111
l0177_20FE_thunk_fn0177_2111:
	call fn0177_2111 (retsize: 0;)
	return
	// succ:  fn0177_20E9_exit
l0177_2103_thunk_fn0177_2111:
	call fn0177_2111 (retsize: 0;)
	return
	// succ:  fn0177_20E9_exit
fn0177_20E9_exit:


// fn0177_2111
// Return size: 0
void fn0177_2111()
fn0177_2111_entry:
	goto l0177_2111
	// succ:  l0177_2111
l0177_2078:
	es = Mem0[ss:bp - 0x000A:selector]
	SCZO = cond(Mem0[es:si:byte] - 0x00)
	branch Test(NE,Z) l0177_2084
	// succ:  l0177_2081 l0177_2084
l0177_2081:
	goto l0177_2120
	// succ:  l0177_2120
l0177_2084:
	SCZO = cond(Mem0[es:si:byte] - 0x0D)
	branch Test(NE,Z) l0177_20CE
	// succ:  l0177_208A l0177_20CE
l0177_208A:
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(Mem0[es:si:byte] - 0x0D)
	branch Test(NE,Z) l0177_20C2
	// succ:  l0177_2092 l0177_20C2
l0177_2092:
	al = Mem0[es:si:byte]
	es = Mem0[ss:bp - 0x0006:selector]
	Mem0[es:di:byte] = al
	es = Mem0[ss:bp - 0x000A:selector]
	si = si + 0x0001
	SZO = cond(si)
	al = Mem0[es:si:byte]
	cx = es
	es = Mem0[ss:bp - 0x0006:selector]
	di = di + 0x0001
	SZO = cond(di)
	Mem0[es:di:byte] = al
	ax = si
	dx = cx
	ax = ax + 0x0001
	SZO = cond(ax)
	si = ax
	Mem0[ss:bp - 0x000A:word16] = dx
	ax = di
	dx = es
	ax = ax + 0x0001
	SZO = cond(ax)
	di = ax
	Mem0[ss:bp - 0x0006:word16] = dx
	goto l0177_2114
	// succ:  l0177_2114
l0177_20C2:
	es = Mem0[ss:bp - 0x0006:selector]
	bx = di
	di = di + 0x0001
	SZO = cond(di)
	Mem0[es:bx:byte] = 0x20
	goto l0177_2114
	// succ:  l0177_2114
l0177_20CE:
	SCZO = cond(Mem0[es:si:byte] - 0x25)
	branch Test(NE,Z) l0177_2106
	// succ:  l0177_20D4 l0177_2106
l0177_20D4:
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	ax = es
	SCZO = cond(Mem0[ds:0x4D22:byte] - 0x01)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x03E0
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x002C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0177_20E7_thunk_fn0177_20E9
l0177_20E7_thunk_fn0177_20E9:
	call fn0177_20E9 (retsize: 0;)
	return
	// succ:  fn0177_2111_exit
l0177_2106:
	al = Mem0[es:si:byte]
	es = Mem0[ss:bp - 0x0006:selector]
	Mem0[es:di:byte] = al
	si = si + 0x0001
	SZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l0177_2111
l0177_2111:
	ax = Mem0[ss:bp - 0x0006:word16]
	// succ:  l0177_2114
l0177_2114:
	es = Mem0[ss:bp - 0x000A:selector]
	SCZO = cond(Mem0[es:si:byte] - 0x23)
	branch Test(EQ,Z) l0177_2120
	// succ:  l0177_211D l0177_2120
l0177_211D:
	goto l0177_2078
	// succ:  l0177_2078
l0177_2120:
	es = Mem0[ss:bp - 0x0006:selector]
	Mem0[es:di:byte] = 0x00
	// succ:  l0177_2127
l0177_2127:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_2111_exit
fn0177_2111_exit:


// fn0177_2134
// Return size: 0
void fn0177_2134()
fn0177_2134_entry:
	// succ:  l0177_2134
l0177_2134:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx + 0x0CE2
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0004:word16] = bx
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2210 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0005:byte] = al
	si = si - si
	SCZO = cond(si)
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:bx + 0x0002:byte] - 0x00)
	branch Test(EQ,Z) l0177_218B
	// succ:  l0177_2179 l0177_218B
l0177_2179:
	bl = Mem0[ds:bx + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4960:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	// succ:  l0177_218B
l0177_218B:
	SCZO = cond(Mem0[ss:bp - 0x0005:byte] - 0x05)
	branch Test(EQ,Z) l0177_2194
	// succ:  l0177_2191 l0177_2194
l0177_2191:
	goto l0177_2250
	// succ:  l0177_2250
l0177_2194:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0177_219B
	// succ:  l0177_2198 l0177_219B
l0177_2198:
	goto l0177_224A
	// succ:  l0177_224A
l0177_219B:
	al = Mem0[ds:si + 0x0004:byte]
	ax = ax & 0x007F
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_21A6
	// succ:  l0177_21A3 l0177_21A6
l0177_21A3:
	goto l0177_224A
	// succ:  l0177_224A
l0177_21A6:
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x2428
	SCZO = cond(ax)
	di = ax
	bx = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0177:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0177:bx + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0177:bx + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0177:bx + 0x0004:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_070A (retsize: 4;)
	sp = sp + 0x000C
	SCZO = cond(Mem0[0x0177:di + 0x0008:byte] - 0x00)
	branch Test(EQ,Z) l0177_21F9
	// succ:  l0177_21D6 l0177_21F9
l0177_21D6:
	ax = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x001E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0177:di:word16]
	ax = Mem0[0x0177:di + 0x0002:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0177:di + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0177:di + 0x0004:word16]
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	// succ:  l0177_21F9
l0177_21F9:
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - 0x0022)
	branch Test(ULT,C) l0177_220A
	// succ:  l0177_2207 l0177_220A
l0177_2207:
	// succ:  l0177_2207_thunk_fn0177_2314
l0177_2207_thunk_fn0177_2314:
	call fn0177_2314 (retsize: 0;)
	return
	// succ:  fn0177_2134_exit
l0177_220A:
	v22 = Mem0[ds:si + 0x0004:byte] & 0x80
	Mem0[ds:si + 0x0004:byte] = v22
	SZO = cond(Mem0[ds:si + 0x0004:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0177_1A2A (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_221A
	// succ:  l0177_2217 l0177_221A
l0177_2217:
	// succ:  l0177_2217_thunk_fn0177_2314
l0177_2217_thunk_fn0177_2314:
	call fn0177_2314 (retsize: 0;)
	return
	// succ:  fn0177_2134_exit
l0177_221A:
	bx = Mem0[ss:bp - 0x0004:word16]
	bl = Mem0[ds:bx + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4960:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[ds:bx + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_0196 (retsize: 2;)
	sp = sp + 0x0002
	bx = Mem0[ss:bp - 0x0004:word16]
	v23 = Mem0[ds:bx + 0x0001:byte] & 0xFE
	Mem0[ds:bx + 0x0001:byte] = v23
	SZO = cond(Mem0[ds:bx + 0x0001:byte])
	C = false
	Mem0[ds:bx + 0x0002:byte] = 0x00
	// succ:  l0177_2245
l0177_2245:
	si = si - si
	SCZO = cond(si)
	// succ:  l0177_2247_thunk_fn0177_2314
l0177_2247_thunk_fn0177_2314:
	call fn0177_2314 (retsize: 0;)
	return
	// succ:  fn0177_2134_exit
l0177_224A:
	ax = 0x039B
	goto l0177_230B
	// succ:  l0177_230B
l0177_2250:
	SCZO = cond(Mem0[ss:bp - 0x0005:byte] - 0x09)
	branch Test(EQ,Z) l0177_2259
	// succ:  l0177_2256 l0177_2259
l0177_2256:
	// succ:  l0177_2256_thunk_fn0177_2314
l0177_2256_thunk_fn0177_2314:
	call fn0177_2314 (retsize: 0;)
	return
	// succ:  fn0177_2134_exit
l0177_2259:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0177_2260
	// succ:  l0177_225D l0177_2260
l0177_225D:
	goto l0177_2308
	// succ:  l0177_2308
l0177_2260:
	al = Mem0[ds:si + 0x0004:byte]
	ax = ax & 0x007F
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_226B
	// succ:  l0177_2268 l0177_226B
l0177_2268:
	goto l0177_2308
	// succ:  l0177_2308
l0177_226B:
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x2335
	SCZO = cond(ax)
	di = ax
	bx = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0177:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0177:bx + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0177:bx + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0177:bx + 0x0004:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_070A (retsize: 4;)
	sp = sp + 0x000C
	SCZO = cond(Mem0[0x0177:di + 0x0008:byte] - 0x00)
	branch Test(EQ,Z) l0177_22BE
	// succ:  l0177_229B l0177_22BE
l0177_229B:
	ax = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x001E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0177:di:word16]
	ax = Mem0[0x0177:di + 0x0002:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0177:di + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x0177:di + 0x0004:word16]
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	// succ:  l0177_22BE
l0177_22BE:
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - 0x0022)
	branch Test(UGE,C) l0177_22CA_thunk_fn0177_2314
	goto l0177_22CC
	// succ:  l0177_22CC l0177_22CA_thunk_fn0177_2314
l0177_22CA_thunk_fn0177_2314:
	call fn0177_2314 (retsize: 0;)
	return
	// succ:  fn0177_2134_exit
l0177_22CC:
	v20 = Mem0[ds:si + 0x0004:byte] & 0x80
	Mem0[ds:si + 0x0004:byte] = v20
	SZO = cond(Mem0[ds:si + 0x0004:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0177_1A2A (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_22D7_thunk_fn0177_2314
	goto l0177_22D9
	// succ:  l0177_22D9 l0177_22D7_thunk_fn0177_2314
l0177_22D7_thunk_fn0177_2314:
	call fn0177_2314 (retsize: 0;)
	return
	// succ:  fn0177_2134_exit
l0177_22D9:
	bx = Mem0[ss:bp - 0x0004:word16]
	bl = Mem0[ds:bx + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4960:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[ds:bx + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_0196 (retsize: 2;)
	sp = sp + 0x0002
	bx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:bx + 0x0002:byte] = 0x00
	v21 = Mem0[ds:bx + 0x0001:byte] & 0xFE
	Mem0[ds:bx + 0x0001:byte] = v21
	SZO = cond(Mem0[ds:bx + 0x0001:byte])
	C = false
	goto l0177_2245
	// succ:  l0177_2245
l0177_2308:
	ax = 0x013C
	// succ:  l0177_230B
l0177_230B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l0177_230B_thunk_fn0177_230C
l0177_230B_thunk_fn0177_230C:
	call fn0177_230C (retsize: 0;)
	return
	// succ:  fn0177_2134_exit
fn0177_2134_exit:


// fn0177_230C
// Return size: 0
void fn0177_230C()
fn0177_230C_entry:
	// succ:  l0177_230C
l0177_230C:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l0177_230F_thunk_fn0177_2314
l0177_230F_thunk_fn0177_2314:
	call fn0177_2314 (retsize: 0;)
	return
	// succ:  fn0177_230C_exit
fn0177_230C_exit:


// fn0177_2314
// Return size: 0
void fn0177_2314()
fn0177_2314_entry:
	// succ:  l0177_2314
l0177_2314:
	sp = fp
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0177_232B_in_fn0177_2314
	goto l0177_2316_thunk_fn0177_2318
	// succ:  l0177_2316_thunk_fn0177_2318 l0177_232B_in_fn0177_2314
l0177_2314:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0177_232B
	goto l0177_2316_thunk_fn0177_2318
	// succ:  l0177_2316_thunk_fn0177_2318 l0177_2316_thunk_fn0177_2318
l0177_2316_thunk_fn0177_2318:
	call fn0177_2318 (retsize: 0;)
	return
	// succ:  fn0177_2314_exit l0177_2316_thunk_fn0177_2318
l0177_2316_thunk_fn0177_2318:
	call fn0177_2318 (retsize: 0;)
	return
	// succ:  fn0177_2314_exit
l0177_2316_thunk_fn0177_2318:
	call fn0177_2318 (retsize: 0;)
	return
	// succ:  fn0177_2314_exit
l0177_2316_thunk_fn0177_2318:
	call fn0177_2318 (retsize: 0;)
	return
	// succ:  fn0177_2314_exit
l0177_232B_in_fn0177_2314:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_2314_exit
fn0177_2314_exit:


// fn0177_2318
// Return size: 0
void fn0177_2318()
fn0177_2318_entry:
	// succ:  l0177_2318
l0177_2318:
	bx = Mem0[ss:bp - 0x0004:word16]
	bl = Mem0[ds:bx + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4960:word16]
	// succ:  l0177_2326
l0177_2326:
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0177_232B
l0177_232B:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_2318_exit
fn0177_2318_exit:


// fn0177_24F8
// Return size: 4
void fn0177_24F8()
fn0177_24F8_entry:
	// succ:  l0177_24F8
l0177_24F8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_24F8_exit
fn0177_24F8_exit:


// fn018F_0000
// Return size: 4
void fn018F_0000()
fn018F_0000_entry:
	// succ:  l018F_0000
l018F_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4EBA:word16] - 0x0000)
	branch Test(EQ,Z) l018F_0067
	// succ:  l018F_0016 l018F_0067
l018F_0016:
	bx = Mem0[ds:0x4EBA:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	cx = ax
	ax = ax + 0x0004
	SCZO = cond(ax)
	dx = ax
	bx = cx
	di = Mem0[ds:bx:word16]
	di = di << 0x0001
	SCZO = cond(di)
	cx = cx + di
	SCZO = cond(cx)
	cx = cx + 0x0004
	SCZO = cond(cx)
	si = cx
	SCZO = cond(cx - ax)
	branch Test(ULE,CZ) l018F_0067
	// succ:  l018F_0037 l018F_0067
l018F_0037:
	bx = Mem0[ss:bp + 0x0006:word16]
	// succ:  l018F_003A
l018F_003A:
	di = dx
	SCZO = cond(Mem0[ds:di:word16] - bx)
	branch Test(EQ,Z) l018F_0048
	// succ:  l018F_0040 l018F_0048
l018F_0040:
	dx = dx + 0x0001
	SZO = cond(dx)
	dx = dx + 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - si)
	branch Test(ULT,C) l018F_003A
	// succ:  l018F_0046 l018F_003A
l018F_0046:
	goto l018F_0067
	// succ:  l018F_0067
l018F_0048:
	bx = di
	cx = si
	cx = cx - bx
	SCZO = cond(cx)
	cx = cx - 0x0001
	SZO = cond(cx)
	cx = cx - 0x0001
	SZO = cond(cx)
	cl = cl & 0xFE
	SZO = cond(cl)
	C = false
	si = bx + 0x0002
	ax = ds
	es = ax
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l018F_005C
l018F_005C:
	branch cx == 0x0000 l018F_005E
	// succ:  l018F_005C_1 l018F_005E
l018F_005C_1:
	v19 = Mem0[si:word16]
	Mem0[di:word16] = v19
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l018F_005C
	// succ:  l018F_005C
l018F_005E:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l018F_0060
l018F_0060:
	branch cx == 0x0000 l018F_0062
	// succ:  l018F_0060_1 l018F_0062
l018F_0060_1:
	v20 = Mem0[si:byte]
	Mem0[di:byte] = v20
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l018F_0060
	// succ:  l018F_0060
l018F_0062:
	bx = Mem0[ss:bp - 0x0006:word16]
	v21 = Mem0[ds:bx:word16] - 0x0001
	Mem0[ds:bx:word16] = v21
	SZO = cond(v21)
	// succ:  l018F_0067
l018F_0067:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_0000_exit
fn018F_0000_exit:


// fn018F_07A4
// Return size: 4
void fn018F_07A4()
fn018F_07A4_entry:
	// succ:  l018F_07A4
l018F_07A4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000E:word16]
	bx = Mem0[ds:si:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - 0x004A)
	branch Test(NE,Z) l018F_07C4
	// succ:  l018F_07C1 l018F_07C4
l018F_07C1:
	goto l018F_0858
	// succ:  l018F_0858
l018F_07C4:
	branch Test(UGT,CZ) l018F_07D4
	// succ:  l018F_07C6 l018F_07D4
l018F_07C6:
	SCZO = cond(al - 0x24)
	branch Test(EQ,Z) l018F_081C
	// succ:  l018F_07CA l018F_081C
l018F_07CA:
	branch Test(GT,SZO) l018F_07EA
	// succ:  l018F_07CC l018F_07EA
l018F_07CC:
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l018F_07F4
	// succ:  l018F_07D0 l018F_07F4
l018F_07D0:
	al = al - 0x11
	SCZO = cond(al)
	branch Test(EQ,Z) l018F_0808
	// succ:  l018F_07D4 l018F_0808
l018F_07D4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_0874 (retsize: 2;)
	sp = sp + 0x000A
	goto l018F_0869
	// succ:  l018F_0869
l018F_07EA:
	al = al - 0x36
	SCZO = cond(al)
	branch Test(EQ,Z) l018F_0830
	// succ:  l018F_07EE l018F_0830
l018F_07EE:
	al = al - 0x01
	SZO = cond(al)
	branch Test(EQ,Z) l018F_0844
	// succ:  l018F_07F2 l018F_0844
l018F_07F2:
	goto l018F_07D4
	// succ:  l018F_07D4
l018F_07F4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_1140 (retsize: 2;)
	sp = sp + 0x000A
	goto l018F_0869
	// succ:  l018F_0869
l018F_0808:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_0C6A (retsize: 2;)
	sp = sp + 0x000A
	goto l018F_0869
	// succ:  l018F_0869
l018F_081C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_0F48 (retsize: 2;)
	sp = sp + 0x000A
	goto l018F_0869
	// succ:  l018F_0869
l018F_0830:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_0B9A (retsize: 2;)
	sp = sp + 0x000A
	goto l018F_0869
	// succ:  l018F_0869
l018F_0844:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_0D76 (retsize: 2;)
	sp = sp + 0x000A
	goto l018F_0869
	// succ:  l018F_0869
l018F_0858:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_0CD6 (retsize: 2;)
	sp = sp + 0x000A
l018F_0869:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_07A4_exit
fn018F_07A4_exit:


// fn018F_0874
// Return size: 4
void fn018F_0874()
fn018F_0874_entry:
	// succ:  l018F_0874
l018F_0874:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x005E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	al = 0x12
	ax = Mem0[ds:si + 0x0001:byte] *u al
	SCZO = cond(ax)
	ax = ax + 0x00BD
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x000C:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x000E:word16] = 0x0000
	SCZO = cond(di - 0x0001)
	branch Test(EQ,Z) l018F_08B6
	// succ:  l018F_08B3 l018F_08B6
l018F_08B3:
	goto l018F_0AB2
	// succ:  l018F_0AB2
l018F_08B6:
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn00F7_1178 (retsize: 4;)
	sp = sp + 0x0008
	di = ax
	al = Mem0[ds:0x4D1C:byte]
	// succ:  l018F_08CB_thunk_fn0177_38CC
l018F_08CB_thunk_fn0177_38CC:
	call fn0177_38CC (retsize: 0;)
	return
	// succ:  fn018F_0874_exit
l018F_0AB2:
	SCZO = cond(di - 0x0002)
	branch Test(NE,Z) l018F_0AEE
	// succ:  l018F_0AB7 l018F_0AEE
l018F_0AB7:
	ax = bp - 0x005E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SCZO = cond(Mem0[ds:si:byte] - 0x09)
	branch Test(NE,Z) l018F_0AC6
	// succ:  l018F_0AC0 l018F_0AC6
l018F_0AC0:
	ax = 0x0072
	goto l018F_0AC9
	// succ:  l018F_0AC9
l018F_0AC6:
	ax = 0x001D
	// succ:  l018F_0AC9
l018F_0AC9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_30A4 (retsize: 2;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l018F_0AE7_thunk_fn0177_3914
l018F_0AE7_thunk_fn0177_3914:
	call fn0177_3914 (retsize: 0;)
	return
	// succ:  fn018F_0874_exit
l018F_0AEE:
	SCZO = cond(di - 0x0003)
	branch Test(NE,Z) l018F_0AFD
	goto l018F_0AF3
	// succ:  l018F_0AF3 l018F_0AF1_thunk_fn0177_3914
l018F_0AF1_thunk_fn0177_3914:
	call fn0177_3914 (retsize: 0;)
	return
	// succ:  fn018F_0874_exit
l018F_0AF3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn018F_2FBE (retsize: 2;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn018F_0B14 (retsize: 2;)
	sp = sp + 0x0002
fn018F_0874_exit:


// fn0177_38CC
// Return size: 0
void fn0177_38CC()
fn0177_38CC_entry:
	// succ:  l0177_38CC
l0177_38CC:
	sp = fp
	al = al - 0x4D - C
	SCZO = cond(al)
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_38E2_thunk_fn0177_3914
	goto l0177_38E2_thunk_fn0177_38E4
	// succ:  l0177_38E2_thunk_fn0177_38E4 l0177_38E2_thunk_fn0177_3914
l0177_38CC:
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_0914
	// succ:  l0177_38E0_thunk_fn0177_38E4 l0177_38E0_thunk_fn0177_3914
l0177_38E0_thunk_fn0177_38E4:
	call fn0177_38E4 (retsize: 0;)
	return
	// succ:  fn0177_38CC_exit
l0177_38E0_thunk_fn0177_3914:
	call fn0177_3914 (retsize: 0;)
	return
	// succ:  fn0177_38CC_exit
l0177_38E2_thunk_fn0177_38E4:
	call fn0177_38E4 (retsize: 0;)
	return
	// succ:  fn0177_38CC_exit l0177_38E2_thunk_fn0177_38E4
l0177_38E2_thunk_fn0177_38E4:
	call fn0177_38E4 (retsize: 0;)
	return
	// succ:  fn0177_38CC_exit
l0177_38E2_thunk_fn0177_3914:
	call fn0177_3914 (retsize: 0;)
	return
	// succ:  fn0177_38CC_exit
fn0177_38CC_exit:


// fn0177_38E4
// Return size: 0
void fn0177_38E4()
fn0177_38E4_entry:
	// succ:  l018F_08E4
l018F_08E4:
	bx = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[0x018F:bx + 0x0004:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - di)
	branch Test(UGT,CZ) l018F_090D
	// succ:  l018F_08F1 l018F_090D
l018F_08F1:
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	cl = 0x06
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0CE3:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l018F_0914
	goto l018F_090D
	// succ:  l018F_090D l018F_090B_thunk_fn0177_3914
l018F_090B_thunk_fn0177_3914:
	call fn0177_3914 (retsize: 0;)
	return
	// succ:  fn0177_38E4_exit
l018F_090D:
	Mem0[ss:bp - 0x0006:word16] = 0x0001
	// succ:  l018F_090D_thunk_fn0177_3914
l018F_090D_thunk_fn0177_3914:
	call fn0177_3914 (retsize: 0;)
	return
	// succ:  fn0177_38E4_exit
fn0177_38E4_exit:


// fn0177_3914
// Return size: 0
void fn0177_3914()
fn0177_3914_entry:
	// succ:  l018F_0914
l018F_0914:
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	// succ:  l018F_0919
l018F_0919:
	SZO = cond(Mem0[ds:si + 0x000A:word16] & 0x0201)
	C = false
	branch Test(NE,Z) l018F_094A
	// succ:  l018F_0920 l018F_094A
l018F_0920:
	bx = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[0x018F:bx + 0x0004:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - di)
	branch Test(ULE,CZ) l018F_094A
	// succ:  l018F_092D l018F_094A
l018F_092D:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l018F_094A
	// succ:  l018F_0933 l018F_094A
l018F_0933:
	SZO = cond(Mem0[ds:si + 0x000A:byte] & 0x80)
	C = false
	branch Test(NE,Z) l018F_0946
	// succ:  l018F_0939 l018F_0946
l018F_0939:
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_094A
	// succ:  l018F_0946 l018F_094A
l018F_0946:
	v17 = Mem0[ds:si + 0x000A:byte] | 0x01
	Mem0[ds:si + 0x000A:byte] = v17
	SZO = cond(Mem0[ds:si + 0x000A:byte])
	C = false
	// succ:  l018F_094A
l018F_094A:
	SZO = cond(Mem0[ds:si + 0x000A:byte] & 0x01)
	C = false
	// succ:  l018F_094A_thunk_fn0177_394D
l018F_094A_thunk_fn0177_394D:
	call fn0177_394D (retsize: 0;)
	return
	// succ:  fn0177_3914_exit
fn0177_3914_exit:


// fn0177_394D
// Return size: 0
void fn0177_394D()
fn0177_394D_entry:
	// succ:  l0177_394D
l0177_394D:
	sp = fp
	v6 = Mem0[ds:di + 0x0003:word16] + si
	Mem0[ds:di + 0x0003:word16] = v6
	SCZO = cond(v6)
	goto l0177_394D_thunk_fn0177_3950
	// succ:  l0177_394D_thunk_fn0177_3950
l0177_394D:
	branch Test(NE,Z) l018F_0953
	goto l0177_394D_thunk_fn0177_3950
	// succ:  l0177_394D_thunk_fn0177_3950 l018F_0953
l0177_394D_thunk_fn0177_3950:
	call fn0177_3950 (retsize: 0;)
	return
	// succ:  fn0177_394D_exit
l0177_394D_thunk_fn0177_3950:
	call fn0177_3950 (retsize: 0;)
	return
	// succ:  fn0177_394D_exit
l018F_0953:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn018F_1452 (retsize: 2;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l018F_096D
	// succ:  l018F_0961 l018F_096D
l018F_0961:
	al = Mem0[ds:0x4D1C:byte]
	Mem0[ds:si + 0x0018:byte] = al
	al = Mem0[ds:0x4D1D:byte]
	Mem0[ds:si + 0x0019:byte] = al
	// succ:  l018F_096D
l018F_096D:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	SCZO = cond(Mem0[ds:si + 0x0010:word16] - dx)
	branch Test(ULE,CZ) l018F_097C
	// succ:  l018F_0979 l018F_097C
l018F_0979:
	call fn0177_3950 (retsize: 0;)
	return
	// succ:  l018F_0AA3 fn0177_394D_exit
l018F_097C:
	branch Test(ULT,C) l018F_0986
	// succ:  l018F_097E l018F_0986
l018F_097E:
	SCZO = cond(Mem0[ds:si + 0x000E:word16] - ax)
	branch Test(ULT,C) l018F_0986
	// succ:  l018F_0983 l018F_0986
l018F_0983:
	call fn0177_3950 (retsize: 0;)
	return
	// succ:  l018F_0AA3 fn0177_394D_exit
l018F_0986:
	Mem0[ss:bp - 0x0008:word16] = si
	// succ:  l018F_0989
l018F_0989:
	bx = Mem0[ss:bp + 0x000E:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x001A:byte] = 0x00
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0016:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1178 (retsize: 4;)
	sp = sp + 0x0008
	di = ax
	SZO = cond(Mem0[ds:si + 0x000A:byte] & 0x02)
	C = false
	branch Test(NE,Z) l018F_09B4
	// succ:  l018F_09B1 l018F_09B4
l018F_09B1:
	goto l018F_0A3E
	// succ:  l018F_0A3E
l018F_09B4:
	SZO = cond(Mem0[ds:si + 0x000A:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l018F_09C2
	// succ:  l018F_09BA l018F_09C2
l018F_09BA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn018F_14B2 (retsize: 2;)
	sp = sp + 0x0002
	goto l018F_0A7B
	// succ:  l018F_0A7B
l018F_09C2:
	SZO = cond(Mem0[ds:si + 0x000A:byte] & 0x04)
	C = false
	branch Test(NE,Z) l018F_09CB
	// succ:  l018F_09C8 l018F_09CB
l018F_09C8:
	goto l018F_0A6E
	// succ:  l018F_0A6E
l018F_09CB:
	SZO = cond(Mem0[ds:si + 0x000A:byte] & 0x10)
	C = false
	branch Test(EQ,Z) l018F_09DA
	// succ:  l018F_09D1 l018F_09DA
l018F_09D1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn018F_153C (retsize: 2;)
	sp = sp + 0x0002
	goto l018F_0A7B
	// succ:  l018F_0A7B
l018F_09DA:
	SCZO = cond(di - 0x0002)
	branch Test(ULT,C) l018F_0A3E
	// succ:  l018F_09DF l018F_0A3E
l018F_09DF:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l018F_0A0C
	// succ:  l018F_09E5 l018F_0A0C
l018F_09E5:
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(EQ,Z) l018F_0A04
	// succ:  l018F_09EB l018F_0A04
l018F_09EB:
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l018F_0A04
	// succ:  l018F_09F7 l018F_0A04
l018F_09F7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn018F_1E62 (retsize: 2;)
	sp = sp + 0x0002
l018F_09FC:
	Mem0[ss:bp - 0x000E:word16] = 0x0001
	goto l018F_0A7B
	// succ:  l018F_0A7B
l018F_0A04:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn018F_1564 (retsize: 2;)
	sp = sp + 0x0002
	goto l018F_0A7B
	// succ:  l018F_0A7B
l018F_0A0C:
	SCZO = cond(Mem0[ds:si + 0x0018:byte] - 0xFF)
	branch Test(EQ,Z) l018F_0A1A
	// succ:  l018F_0A12 l018F_0A1A
l018F_0A12:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn018F_1590 (retsize: 2;)
	sp = sp + 0x0002
	goto l018F_0A7B
	// succ:  l018F_0A7B
l018F_0A1A:
	SCZO = cond(Mem0[ds:si + 0x0015:byte] - 0xFF)
	branch Test(EQ,Z) l018F_09BA
	// succ:  l018F_0A20 l018F_09BA
l018F_0A20:
	cl = 0x06
	bx = Mem0[ss:bp - 0x000C:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0CE3:byte] & 0x20)
	C = false
	branch Test(NE,Z) l018F_09BA
	// succ:  l018F_0A37 l018F_09BA
l018F_0A37:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn018F_17C6 (retsize: 2;)
	sp = sp + 0x0002
	goto l018F_0A7B
	// succ:  l018F_0A7B
l018F_0A3E:
	SCZO = cond(di - 0x0001)
	branch Test(NE,Z) l018F_0A62
	// succ:  l018F_0A43 l018F_0A62
l018F_0A43:
	SZO = cond(Mem0[ds:si + 0x000B:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l018F_0A62
	// succ:  l018F_0A49 l018F_0A62
l018F_0A49:
	v19 = Mem0[ds:si + 0x000B:byte] & 0xFB
	Mem0[ds:si + 0x000B:byte] = v19
	SZO = cond(Mem0[ds:si + 0x000B:byte])
	C = false
	ax = 0x0032
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1140 (retsize: 4;)
	sp = sp + 0x0004
	dx = dx - dx
	SCZO = cond(dx)
	v20 = Mem0[ds:si + 0x000E:word16] + ax
	Mem0[ds:si + 0x000E:word16] = v20
	SCZO = cond(v20)
	v21 = Mem0[ds:si + 0x0010:word16] + dx + C
	Mem0[ds:si + 0x0010:word16] = v21
	SCZO = cond(v21)
	goto l018F_0A7B
	// succ:  l018F_0A7B
l018F_0A62:
	SCZO = cond(di - 0x0002)
	branch Test(UGE,C) l018F_0A6E
	// succ:  l018F_0A67 l018F_0A6E
l018F_0A67:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn018F_1FD8 (retsize: 2;)
	sp = sp + 0x0002
	goto l018F_09FC
	// succ:  l018F_09FC
l018F_0A6E:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	Mem0[ds:si + 0x000E:word16] = ax
	Mem0[ds:si + 0x0010:word16] = dx
	// succ:  l018F_0A7B
l018F_0A7B:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	SCZO = cond(Mem0[ds:si + 0x0010:word16] - dx)
	branch Test(UGE,C) l018F_0A8A
	// succ:  l018F_0A87 l018F_0A8A
l018F_0A87:
	goto l018F_0989
	// succ:  l018F_0989
l018F_0A8A:
	branch Test(UGT,CZ) l018F_0AA3
	goto l018F_0A8C
	// succ:  l018F_0A8C l018F_0A8A_thunk_fn0177_3950
l018F_0A8A_thunk_fn0177_3950:
	call fn0177_3950 (retsize: 0;)
	return
	// succ:  fn0177_394D_exit
l018F_0A8C:
	SCZO = cond(Mem0[ds:si + 0x000E:word16] - ax)
	branch Test(UGE,C) l018F_0A94
	// succ:  l018F_0A91 l018F_0A94
l018F_0A91:
	goto l018F_0989
	// succ:  l018F_0989
l018F_0A94:
	call fn0177_3950 (retsize: 0;)
	return
	// succ:  l018F_0AA3 fn0177_394D_exit
l018F_0AA3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn01BF_1418 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l018F_0AFD
l018F_0AFD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x000E:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_394D_exit
fn0177_394D_exit:


// fn0177_3950
// Return size: 0
void fn0177_3950()
fn0177_3950_entry:
	// succ:  l018F_0950
l018F_0950:
	// succ:  l018F_0A96
l018F_0A96:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	Mem0[ds:si + 0x000E:word16] = ax
	Mem0[ds:si + 0x0010:word16] = dx
	// succ:  l018F_0AA0_thunk_fn0177_394D
l018F_0AA0_thunk_fn0177_394D:
	call fn0177_394D (retsize: 0;)
	return
	// succ:  fn0177_3950_exit
fn0177_3950_exit:


// fn018F_0B14
// Return size: 4
void fn018F_0B14()
fn018F_0B14_entry:
	// succ:  l018F_0B14
l018F_0B14:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0014)
	branch Test(NE,Z) l018F_0B8D
	// succ:  l018F_0B2A l018F_0B8D
l018F_0B2A:
	SCZO = cond(Mem0[ds:0x4D35:byte] - 0x00)
	branch Test(NE,Z) l018F_0B8D
	// succ:  l018F_0B31 l018F_0B8D
l018F_0B31:
	bx = Mem0[ds:0x4EBA:word16]
	ax = Mem0[ds:bx:word16]
	cx = ax
	ax = ax + 0x0004
	SCZO = cond(ax)
	si = ax
	bx = cx
	dx = Mem0[ds:bx:word16]
	dx = dx << 0x0001
	SCZO = cond(dx)
	cx = cx + dx
	SCZO = cond(cx)
	cx = cx + 0x0004
	SCZO = cond(cx)
	di = cx
	SCZO = cond(cx - ax)
	branch Test(ULE,CZ) l018F_0B8D
	// succ:  l018F_0B4F l018F_0B8D
l018F_0B4F:
	bx = Mem0[ds:si:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx + 0x0001:byte] - 0x4A)
	branch Test(NE,Z) l018F_0B74
	// succ:  l018F_0B59 l018F_0B74
l018F_0B59:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:bx + 0x0016:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:bx + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_0B7C
	// succ:  l018F_0B74 l018F_0B7C
l018F_0B74:
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - di)
	branch Test(ULT,C) l018F_0B4F
	// succ:  l018F_0B7A l018F_0B4F
l018F_0B7A:
	goto l018F_0B8D
	// succ:  l018F_0B8D
l018F_0B7C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_1AEE (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l018F_0B8D
l018F_0B8D:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_0B14_exit
fn018F_0B14_exit:


// fn018F_0B9A
// Return size: 4
void fn018F_0B9A()
fn018F_0B9A_entry:
	// succ:  l018F_0B9A
l018F_0B9A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	Mem0[ss:bp - 0x0006:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0001)
	branch Test(NE,Z) l018F_0C46
	goto l018F_0BC8
	// succ:  l018F_0BC8 l018F_0BC6_thunk_fn0177_3C46
l018F_0BC6_thunk_fn0177_3C46:
	call fn0177_3C46 (retsize: 0;)
	return
	// succ:  fn018F_0B9A_exit
l018F_0BC8:
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00F7_1178 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	SCZO = cond(Mem0[ds:si + 0x0010:word16] - dx)
	branch Test(UGT,CZ) l018F_0C46
	goto l018F_0BEA
	// succ:  l018F_0BEA l018F_0BE8_thunk_fn0177_3C46
l018F_0BE8_thunk_fn0177_3C46:
	call fn0177_3C46 (retsize: 0;)
	return
	// succ:  fn018F_0B9A_exit
l018F_0BEA:
	branch Test(ULT,C) l018F_0BF1
	goto l018F_0BEC
	// succ:  l018F_0BEC l018F_0BEA_thunk_fn0177_3BF1
l018F_0BEA_thunk_fn0177_3BF1:
	call fn0177_3BF1 (retsize: 0;)
	return
	// succ:  fn018F_0B9A_exit
l018F_0BEC:
	SCZO = cond(Mem0[ds:si + 0x000E:word16] - ax)
	// succ:  l018F_0BEC_thunk_fn0177_3BED
l018F_0BEC_thunk_fn0177_3BED:
	call fn0177_3BED (retsize: 0;)
	return
	// succ:  fn018F_0B9A_exit
fn018F_0B9A_exit:


// fn0177_3BED
// Return size: 0
void fn0177_3BED()
fn0177_3BED_entry:
	// succ:  l0177_3BED
l0177_3BED:
	sp = fp
	sp = sp + 0x0001
	SZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	branch Test(UGE,C) l0177_3BEF_thunk_fn0177_3C46
	goto l0177_3BEF_thunk_fn0177_3BF1
	// succ:  l0177_3BEF_thunk_fn0177_3BF1 l0177_3BEF_thunk_fn0177_3C46
l0177_3BED:
	branch Test(UGE,C) l018F_0C46
	// succ:  l0177_3BED_thunk_fn0177_3BF1 l0177_3BED_thunk_fn0177_3C46
l0177_3BED_thunk_fn0177_3BF1:
	call fn0177_3BF1 (retsize: 0;)
	return
	// succ:  fn0177_3BED_exit
l0177_3BED_thunk_fn0177_3C46:
	call fn0177_3C46 (retsize: 0;)
	return
	// succ:  fn0177_3BED_exit
l0177_3BEF_thunk_fn0177_3BF1:
	call fn0177_3BF1 (retsize: 0;)
	return
	// succ:  fn0177_3BED_exit l0177_3BEF_thunk_fn0177_3BF1
l0177_3BEF_thunk_fn0177_3BF1:
	call fn0177_3BF1 (retsize: 0;)
	return
	// succ:  fn0177_3BED_exit
l0177_3BEF_thunk_fn0177_3C46:
	call fn0177_3C46 (retsize: 0;)
	return
	// succ:  fn0177_3BED_exit
fn0177_3BED_exit:


// fn0177_3BF1
// Return size: 0
void fn0177_3BF1()
fn0177_3BF1_entry:
	// succ:  l018F_0BF1
l018F_0BF1:
	SZO = cond(Mem0[ds:si + 0x000A:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l018F_0C46
	goto l018F_0BF7
	// succ:  l018F_0BF7 l018F_0BF5_thunk_fn0177_3C46
l018F_0BF5_thunk_fn0177_3C46:
	call fn0177_3C46 (retsize: 0;)
	return
	// succ:  fn0177_3BF1_exit
l018F_0BF7:
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0001)
	branch Test(NE,Z) l018F_0C46
	goto l018F_0BFD
	// succ:  l018F_0BFD l018F_0BFB_thunk_fn0177_3C46
l018F_0BFB_thunk_fn0177_3C46:
	call fn0177_3C46 (retsize: 0;)
	return
	// succ:  fn0177_3BF1_exit
l018F_0BFD:
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_0C46
	goto l018F_0C0A
	// succ:  l018F_0C0A l018F_0C08_thunk_fn0177_3C46
l018F_0C08_thunk_fn0177_3C46:
	call fn0177_3C46 (retsize: 0;)
	return
	// succ:  fn0177_3BF1_exit
l018F_0C0A:
	bx = Mem0[ds:di:word16]
	Mem0[ds:bx + 0x001A:byte] = 0x00
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn018F_14B2 (retsize: 2;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn01BF_1418 (retsize: 4;)
	sp = sp + 0x0006
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	SCZO = cond(Mem0[ds:si + 0x0010:word16] - dx)
	branch Test(UGT,CZ) l018F_0C3A
	// succ:  l018F_0C2D l018F_0C3A
l018F_0C2D:
	branch Test(ULT,C) l018F_0C34
	// succ:  l018F_0C2F l018F_0C34
l018F_0C2F:
	SCZO = cond(Mem0[ds:si + 0x000E:word16] - ax)
	branch Test(UGE,C) l018F_0C3A
	// succ:  l018F_0C34 l018F_0C3A
l018F_0C34:
	Mem0[ds:si + 0x000E:word16] = ax
	Mem0[ds:si + 0x0010:word16] = dx
	// succ:  l018F_0C3A
l018F_0C3A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l018F_0C40_thunk_fn0177_3C46
l018F_0C40_thunk_fn0177_3C46:
	call fn0177_3C46 (retsize: 0;)
	return
	// succ:  fn0177_3BF1_exit
fn0177_3BF1_exit:


// fn0177_3C46
// Return size: 0
void fn0177_3C46()
fn0177_3C46_entry:
	// succ:  l018F_0C46
l018F_0C46:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_0874 (retsize: 2;)
	sp = sp + 0x000A
	// succ:  l018F_0C5D
l018F_0C5D:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_3C46_exit
fn0177_3C46_exit:


// fn018F_0C6A
// Return size: 4
void fn018F_0C6A()
fn018F_0C6A_entry:
	// succ:  l018F_0C6A
l018F_0C6A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0001)
	branch Test(NE,Z) l018F_0CB3
	// succ:  l018F_0C8A l018F_0CB3
l018F_0C8A:
	ax = Mem0[ds:si + 0x0004:word16]
	SCZO = cond(Mem0[ds:si + 0x0002:word16] - ax)
	branch Test(GE,SO) l018F_0CB3
	// succ:  l018F_0C92 l018F_0CB3
l018F_0C92:
	SCZO = cond(Mem0[ds:si + 0x001E:word16] - 0x0000)
	branch Test(NE,Z) l018F_0CA4
	// succ:  l018F_0C98 l018F_0CA4
l018F_0C98:
	ax = Mem0[ds:0x3CFA:word16]
	ax = ax + 0x0014
	SCZO = cond(ax)
	Mem0[ds:si + 0x001E:word16] = ax
	goto l018F_0CB3
	// succ:  l018F_0CB3
l018F_0CA4:
	ax = Mem0[ds:0x3CFA:word16]
	SCZO = cond(Mem0[ds:si + 0x001E:word16] - ax)
	branch Test(UGE,C) l018F_0CB3
	// succ:  l018F_0CAC l018F_0CB3
l018F_0CAC:
	v14 = Mem0[ds:si + 0x0002:word16] + 0x0001
	Mem0[ds:si + 0x0002:word16] = v14
	SZO = cond(v14)
	v15 = Mem0[ds:si + 0x001E:word16] + 0x0014
	Mem0[ds:si + 0x001E:word16] = v15
	SCZO = cond(v15)
	// succ:  l018F_0CB3
l018F_0CB3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_0874 (retsize: 2;)
	sp = sp + 0x000A
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_0C6A_exit
fn018F_0C6A_exit:


// fn018F_0CD6
// Return size: 4
void fn018F_0CD6()
fn018F_0CD6_entry:
	// succ:  l018F_0CD6
l018F_0CD6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0052
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(cx - 0x0002)
	branch Test(NE,Z) l018F_0D38
	// succ:  l018F_0CEC l018F_0D38
l018F_0CEC:
	si = Mem0[ss:bp + 0x000E:word16]
	bx = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x10)
	branch Test(NE,Z) l018F_0D0A
	// succ:  l018F_0CF6 l018F_0D0A
l018F_0CF6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x000A
	// succ:  l018F_0CFD
l018F_0CFD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l018F_0CFD_thunk_fn0177_3CFE
l018F_0CFD_thunk_fn0177_3CFE:
	call fn0177_3CFE (retsize: 0;)
	return
	// succ:  fn018F_0CD6_exit
l018F_0D0A:
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0073
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ds:si:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_30A4 (retsize: 2;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l018F_0D31_thunk_fn0177_3CFE
l018F_0D31_thunk_fn0177_3CFE:
	call fn0177_3CFE (retsize: 0;)
	return
	// succ:  fn018F_0CD6_exit
l018F_0D38:
	si = Mem0[ss:bp + 0x000E:word16]
	bx = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x10)
	branch Test(NE,Z) l018F_0D5C
	// succ:  l018F_0D42 l018F_0D5C
l018F_0D42:
	SCZO = cond(cx - 0x0003)
	branch Test(NE,Z) l018F_0D5C
	// succ:  l018F_0D47 l018F_0D5C
l018F_0D47:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	call fn018F_2FBE (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(Mem0[ds:0x4D35:byte] - 0x00)
	branch Test(NE,Z) l018F_0D6B
	goto l018F_0D53
	// succ:  l018F_0D53 l018F_0D51_thunk_fn0177_3CFE
l018F_0D51_thunk_fn0177_3CFE:
	call fn0177_3CFE (retsize: 0;)
	return
	// succ:  fn018F_0CD6_exit
l018F_0D53:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x0007
	goto l018F_0CFD
	// succ:  l018F_0CFD
l018F_0D5C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_0874 (retsize: 2;)
	sp = sp + 0x000A
fn018F_0CD6_exit:


// fn0177_3CFE
// Return size: 0
void fn0177_3CFE()
fn0177_3CFE_entry:
	// succ:  l0177_3CFE
l0177_3CFE:
	sp = fp
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_1AEE (retsize: 4;)
	sp = sp + 0x0006
	goto l018F_0D6B_in_fn0177_3CFE
	// succ:  l018F_0D6B_in_fn0177_3CFE
l0177_3CFE:
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_1AEE (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l018F_0D6B
l018F_0D6B:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_3CFE_exit
l018F_0D6B_in_fn0177_3CFE:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_3CFE_exit
fn0177_3CFE_exit:


// fn018F_0D76
// Return size: 4
void fn018F_0D76()
fn018F_0D76_entry:
	// succ:  l018F_0D76
l018F_0D76:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0060
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	al = 0x12
	ax = Mem0[ds:si + 0x0001:byte] *u al
	SCZO = cond(ax)
	ax = ax + 0x00BD
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	al = Mem0[ds:si + 0x0017:byte]
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0001)
	branch Test(EQ,Z) l018F_0DB5
	// succ:  l018F_0DB2 l018F_0DB5
l018F_0DB2:
	goto l018F_0EE2
	// succ:  l018F_0EE2
l018F_0DB5:
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn00F7_1178 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0006:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0008:word16] = ax
	SZO = cond(Mem0[ds:si + 0x000A:word16] & 0x0201)
	C = false
	branch Test(NE,Z) l018F_0E0B
	// succ:  l018F_0DE6 l018F_0E0B
l018F_0DE6:
	bx = Mem0[ss:bp - 0x000A:word16]
	al = Mem0[0x018F:bx + 0x0004:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - Mem0[ss:bp - 0x0006:word16])
	branch Test(ULE,CZ) l018F_0E0B
	// succ:  l018F_0DF4 l018F_0E0B
l018F_0DF4:
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l018F_0E0B
	// succ:  l018F_0DFA l018F_0E0B
l018F_0DFA:
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_0E0B
	// succ:  l018F_0E07 l018F_0E0B
l018F_0E07:
	v17 = Mem0[ds:si + 0x000A:byte] | 0x01
	Mem0[ds:si + 0x000A:byte] = v17
	SZO = cond(Mem0[ds:si + 0x000A:byte])
	C = false
	// succ:  l018F_0E0B
l018F_0E0B:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	SCZO = cond(Mem0[ds:si + 0x0010:word16] - dx)
	branch Test(ULE,CZ) l018F_0E1A
	// succ:  l018F_0E17 l018F_0E1A
l018F_0E17:
	goto l018F_0ED2
	// succ:  l018F_0ED2
l018F_0E1A:
	branch Test(ULT,C) l018F_0E24
	// succ:  l018F_0E1C l018F_0E24
l018F_0E1C:
	SCZO = cond(Mem0[ds:si + 0x000E:word16] - ax)
	branch Test(ULT,C) l018F_0E24
	// succ:  l018F_0E21 l018F_0E24
l018F_0E21:
	goto l018F_0ED2
	// succ:  l018F_0ED2
l018F_0E24:
	SZO = cond(Mem0[ds:si + 0x000A:byte] & 0x01)
	C = false
	branch Test(NE,Z) l018F_0E2D
	// succ:  l018F_0E2A l018F_0E2D
l018F_0E2A:
	goto l018F_0ED2
	// succ:  l018F_0ED2
l018F_0E2D:
	bx = Mem0[ss:bp + 0x000E:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x001A:byte] = 0x00
	bx = Mem0[ss:bp - 0x000A:word16]
	al = Mem0[0x018F:bx + 0x0004:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - Mem0[ss:bp - 0x0006:word16])
	branch Test(ULE,CZ) l018F_0EBD
	// succ:  l018F_0E44 l018F_0EBD
l018F_0E44:
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l018F_0EBD
	// succ:  l018F_0E4A l018F_0EBD
l018F_0E4A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn00F7_1268 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_0E5D
	// succ:  l018F_0E57 l018F_0E5D
l018F_0E57:
	SZO = cond(Mem0[ds:si + 0x000A:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l018F_0EBD
	// succ:  l018F_0E5D l018F_0EBD
l018F_0E5D:
	SCZO = cond(Mem0[ds:si + 0x001E:word16] - 0x0000)
	branch Test(EQ,Z) l018F_0EBD
	// succ:  l018F_0E63 l018F_0EBD
l018F_0E63:
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_0EBD
	// succ:  l018F_0E70 l018F_0EBD
l018F_0E70:
	ax = Mem0[ss:bp - 0x0010:word16]
	ah = ah & 0x01
	SZO = cond(ah)
	C = false
	ah = ah | 0x3E
	SZO = cond(ah)
	C = false
	al = al & 0x03
	SZO = cond(al)
	C = false
	al = al | 0x02
	SZO = cond(al)
	C = false
	Mem0[ss:bp - 0x0010:word16] = ax
	v19 = Mem0[ss:bp - 0x000F:byte] | 0x01
	Mem0[ss:bp - 0x000F:byte] = v19
	SZO = cond(Mem0[ss:bp - 0x000F:byte])
	C = false
	v20 = Mem0[ss:bp - 0x000E:byte] & 0x0F
	Mem0[ss:bp - 0x000E:byte] = v20
	SZO = cond(Mem0[ss:bp - 0x000E:byte])
	C = false
	ax = Mem0[ss:bp - 0x000E:word16]
	ah = ah & 0xF6
	SZO = cond(ah)
	C = false
	ah = ah | 0x06
	SZO = cond(ah)
	C = false
	ah = ah & 0x0F
	SZO = cond(ah)
	C = false
	ah = ah | 0x60
	SZO = cond(ah)
	C = false
	Mem0[ss:bp - 0x000E:word16] = ax
	v21 = Mem0[ss:bp - 0x0010:byte] & 0xFE
	Mem0[ss:bp - 0x0010:byte] = v21
	SZO = cond(Mem0[ss:bp - 0x0010:byte])
	C = false
	v22 = Mem0[ss:bp - 0x000E:byte] & 0xF0
	Mem0[ss:bp - 0x000E:byte] = v22
	SZO = cond(Mem0[ss:bp - 0x000E:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn01BF_1CC2 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2044 (retsize: 2;)
	sp = sp + 0x0006
	v23 = Mem0[ds:si + 0x001E:word16] - 0x0001
	Mem0[ds:si + 0x001E:word16] = v23
	SZO = cond(v23)
	Mem0[ss:bp - 0x000C:word16] = 0x0001
	// succ:  l018F_0EBD
l018F_0EBD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l018F_0F28
	// succ:  l018F_0ECB l018F_0F28
l018F_0ECB:
	ax = Mem0[ss:bp - 0x000C:word16]
	goto l018F_0F3B
	// succ:  l018F_0F3B
l018F_0ED2:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	Mem0[ds:si + 0x000E:word16] = ax
	Mem0[ds:si + 0x0010:word16] = dx
	goto l018F_0F1B
	// succ:  l018F_0F1B
l018F_0EE2:
	bx = Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(bx - 0x0002)
	branch Test(NE,Z) l018F_0F16
	// succ:  l018F_0EEA l018F_0F16
l018F_0EEA:
	ax = bp - 0x0060
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x001D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_30A4 (retsize: 2;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	goto l018F_0F1B
	// succ:  l018F_0F1B
l018F_0F16:
	SCZO = cond(bx - 0x0003)
	branch Test(EQ,Z) l018F_0EBD
	// succ:  l018F_0F1B l018F_0EBD
l018F_0F1B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	goto l018F_0F3B
	// succ:  l018F_0F3B
l018F_0F28:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_0874 (retsize: 2;)
	sp = sp + 0x000A
l018F_0F3B:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_0D76_exit
fn018F_0D76_exit:


// fn018F_0F48
// Return size: 4
void fn018F_0F48()
fn018F_0F48_entry:
	// succ:  l018F_0F48
l018F_0F48:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0064
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	al = 0x12
	ax = Mem0[ds:si + 0x0001:byte] *u al
	SCZO = cond(ax)
	ax = ax + 0x00BD
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	al = Mem0[ds:si + 0x0017:byte]
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x000E:word16] = 0x0000
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0001)
	// succ:  l018F_0F7E_thunk_fn0177_3F80
l018F_0F7E_thunk_fn0177_3F80:
	call fn0177_3F80 (retsize: 0;)
	return
	// succ:  fn018F_0F48_exit
fn018F_0F48_exit:


// fn0177_3F80
// Return size: 0
void fn0177_3F80()
fn0177_3F80_entry:
	// succ:  l0177_3F80
l0177_3F80:
	sp = fp
	al = al | 0x01
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l0177_3F82_thunk_fn0177_3F87
	goto l0177_3F82_thunk_fn0177_3F84
	// succ:  l0177_3F82_thunk_fn0177_3F84 l0177_3F82_thunk_fn0177_3F87
l0177_3F80:
	branch Test(EQ,Z) l018F_0F87
	// succ:  l0177_3F80_thunk_fn0177_3F84 l0177_3F80_thunk_fn0177_3F87
l0177_3F80_thunk_fn0177_3F84:
	call fn0177_3F84 (retsize: 0;)
	return
	// succ:  fn0177_3F80_exit
l0177_3F80_thunk_fn0177_3F87:
	call fn0177_3F87 (retsize: 0;)
	return
	// succ:  fn0177_3F80_exit
l0177_3F82_thunk_fn0177_3F84:
	call fn0177_3F84 (retsize: 0;)
	return
	// succ:  fn0177_3F80_exit l0177_3F82_thunk_fn0177_3F84
l0177_3F82_thunk_fn0177_3F84:
	call fn0177_3F84 (retsize: 0;)
	return
	// succ:  fn0177_3F80_exit
l0177_3F82_thunk_fn0177_3F87:
	call fn0177_3F87 (retsize: 0;)
	return
	// succ:  fn0177_3F80_exit
fn0177_3F80_exit:


// fn0177_3F84
// Return size: 0
void fn0177_3F84()
fn0177_3F84_entry:
	// succ:  l018F_0F84
l018F_0F84:
	// succ:  l018F_10DA
l018F_10DA:
	bx = Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(bx - 0x0002)
	branch Test(NE,Z) l018F_110E
	// succ:  l018F_10E2 l018F_110E
l018F_10E2:
	ax = bp - 0x0062
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x001D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_30A4 (retsize: 2;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l018F_1107_thunk_fn0177_3F87
l018F_1107_thunk_fn0177_3F87:
	call fn0177_3F87 (retsize: 0;)
	return
	// succ:  fn0177_3F84_exit
l018F_110E:
	SCZO = cond(bx - 0x0003)
	branch Test(EQ,Z) l018F_10B7
	// succ:  l018F_1111_thunk_fn0177_3F87 l018F_1111_thunk_fn0177_3F87
l018F_1111_thunk_fn0177_3F87:
	call fn0177_3F87 (retsize: 0;)
	return
	// succ:  fn0177_3F84_exit
l018F_1111_thunk_fn0177_3F87:
	call fn0177_3F87 (retsize: 0;)
	return
	// succ:  fn0177_3F84_exit
fn0177_3F84_exit:


// fn0177_3F87
// Return size: 0
void fn0177_3F87()
fn0177_3F87_entry:
	// succ:  l018F_0F87
l018F_0F87:
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00F7_1178 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0008:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x000C:word16] = ax
	SZO = cond(Mem0[ds:si + 0x000A:byte] & 0x01)
	C = false
	branch Test(NE,Z) l018F_0FDC
	goto l018F_0FB7
	// succ:  l018F_0FB7 l018F_0FB5_thunk_fn0177_3FDC
l018F_0FB5_thunk_fn0177_3FDC:
	call fn0177_3FDC (retsize: 0;)
	return
	// succ:  fn0177_3F87_exit
l018F_0FB7:
	bx = Mem0[ss:bp - 0x000A:word16]
	// succ:  l018F_0FB7_thunk_fn0177_3FB8
l018F_0FB7_thunk_fn0177_3FB8:
	call fn0177_3FB8 (retsize: 0;)
	return
	// succ:  fn0177_3F87_exit
fn0177_3F87_exit:


// fn0177_3FB8
// Return size: 0
void fn0177_3FB8()
fn0177_3FB8_entry:
	// succ:  l0177_3FB8
l0177_3FB8:
	sp = fp
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	ax = Mem0[ds:0x478A:byte] *s al
	SCZO = cond(ax)
	al = al + 0x2A
	SCZO = cond(al)
	al = __inb(0x3B)
	si = si + 0x0001
	SZO = cond(si)
	C = false
	branch Test(ULE,CZ) l0177_3FC3_thunk_fn0177_3FDC
	goto l0177_3FC3_thunk_fn0177_3FC5
	// succ:  l0177_3FC3_thunk_fn0177_3FC5 l0177_3FC3_thunk_fn0177_3FDC
l0177_3FB8:
	al = Mem0[0x018F:bx + 0x0004:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - Mem0[ss:bp - 0x0008:word16])
	branch Test(ULE,CZ) l018F_0FDC
	// succ:  l0177_3FC1_thunk_fn0177_3FC5 l0177_3FC1_thunk_fn0177_3FDC
l0177_3FC1_thunk_fn0177_3FC5:
	call fn0177_3FC5 (retsize: 0;)
	return
	// succ:  fn0177_3FB8_exit
l0177_3FC1_thunk_fn0177_3FDC:
	call fn0177_3FDC (retsize: 0;)
	return
	// succ:  fn0177_3FB8_exit
l0177_3FC3_thunk_fn0177_3FC5:
	call fn0177_3FC5 (retsize: 0;)
	return
	// succ:  fn0177_3FB8_exit l0177_3FC3_thunk_fn0177_3FC5
l0177_3FC3_thunk_fn0177_3FC5:
	call fn0177_3FC5 (retsize: 0;)
	return
	// succ:  fn0177_3FB8_exit
l0177_3FC3_thunk_fn0177_3FDC:
	call fn0177_3FDC (retsize: 0;)
	return
	// succ:  fn0177_3FB8_exit
fn0177_3FB8_exit:


// fn0177_3FC5
// Return size: 0
void fn0177_3FC5()
fn0177_3FC5_entry:
	// succ:  l018F_0FC5
l018F_0FC5:
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l018F_0FDC
	goto l018F_0FCB
	// succ:  l018F_0FCB l018F_0FC9_thunk_fn0177_3FDC
l018F_0FC9_thunk_fn0177_3FDC:
	call fn0177_3FDC (retsize: 0;)
	return
	// succ:  fn0177_3FC5_exit
l018F_0FCB:
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_0FDC
	goto l018F_0FD8
	// succ:  l018F_0FD8 l018F_0FD6_thunk_fn0177_3FDC
l018F_0FD6_thunk_fn0177_3FDC:
	call fn0177_3FDC (retsize: 0;)
	return
	// succ:  fn0177_3FC5_exit
l018F_0FD8:
	v12 = Mem0[ds:si + 0x000A:byte] | 0x01
	Mem0[ds:si + 0x000A:byte] = v12
	SZO = cond(Mem0[ds:si + 0x000A:byte])
	C = false
	// succ:  l018F_0FD8_thunk_fn0177_3FDC
l018F_0FD8_thunk_fn0177_3FDC:
	call fn0177_3FDC (retsize: 0;)
	return
	// succ:  fn0177_3FC5_exit
fn0177_3FC5_exit:


// fn0177_3FDC
// Return size: 0
void fn0177_3FDC()
fn0177_3FDC_entry:
	// succ:  l018F_0FDC
l018F_0FDC:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	SCZO = cond(Mem0[ds:si + 0x0010:word16] - dx)
	branch Test(ULE,CZ) l018F_0FEB
	// succ:  l018F_0FE8 l018F_0FEB
l018F_0FE8:
	goto l018F_10CA
	// succ:  l018F_10CA
l018F_0FEB:
	branch Test(ULT,C) l018F_0FF5
	// succ:  l018F_0FED l018F_0FF5
l018F_0FED:
	SCZO = cond(Mem0[ds:si + 0x000E:word16] - ax)
	branch Test(ULT,C) l018F_0FF5
	// succ:  l018F_0FF2 l018F_0FF5
l018F_0FF2:
	goto l018F_10CA
	// succ:  l018F_10CA
l018F_0FF5:
	SZO = cond(Mem0[ds:si + 0x000A:byte] & 0x01)
	C = false
	branch Test(NE,Z) l018F_0FFE
	// succ:  l018F_0FFB l018F_0FFE
l018F_0FFB:
	goto l018F_10CA
	// succ:  l018F_10CA
l018F_0FFE:
	cl = 0x06
	// succ:  l018F_0FFE_thunk_fn0177_4000
l018F_0FFE_thunk_fn0177_4000:
	call fn0177_4000 (retsize: 0;)
	return
	// succ:  fn0177_3FDC_exit
l018F_10CA:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	Mem0[ds:si + 0x000E:word16] = ax
	Mem0[ds:si + 0x0010:word16] = dx
	// succ:  l018F_1113
l018F_1113:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l018F_111B_thunk_fn0177_4066
l018F_111B_thunk_fn0177_4066:
	call fn0177_4066 (retsize: 0;)
	return
	// succ:  fn0177_3FDC_exit
fn0177_3FDC_exit:


// fn0177_4000
// Return size: 0
void fn0177_4000()
fn0177_4000_entry:
	// succ:  l0177_4000
l0177_4000:
	sp = fp
	di = di << cl
	SCZO = cond(di)
	di = di + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(di)
	ax = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	al = Mem0[ds:di + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = Mem0[ss:bp + 0x000E:word16]
	bx = Mem0[ds:bx:word16]
	v13 = Mem0[ds:bx + 0x001A:byte] & ah
	Mem0[ds:bx + 0x001A:byte] = v13
	SZO = cond(Mem0[ds:bx + 0x001A:byte])
	C = false
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(EQ,Z) l0177_4020_thunk_fn0177_4066
	goto l0177_4020_thunk_fn0177_4022
	// succ:  l0177_4020_thunk_fn0177_4022 l0177_4020_thunk_fn0177_4066
l0177_4000:
	di = di << cl
	SCZO = cond(di)
	di = di + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(di)
	ax = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	al = Mem0[ds:di + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = Mem0[ss:bp + 0x000E:word16]
	bx = Mem0[ds:bx:word16]
	v17 = Mem0[ds:bx + 0x001A:byte] & ah
	Mem0[ds:bx + 0x001A:byte] = v17
	SZO = cond(Mem0[ds:bx + 0x001A:byte])
	C = false
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(EQ,Z) l018F_1066
	goto l0177_4020_thunk_fn0177_4022
	// succ:  l0177_4020_thunk_fn0177_4022 l0177_4020_thunk_fn0177_4066
l0177_4020_thunk_fn0177_4022:
	call fn0177_4022 (retsize: 0;)
	return
	// succ:  fn0177_4000_exit l0177_4020_thunk_fn0177_4022
l0177_4020_thunk_fn0177_4022:
	call fn0177_4022 (retsize: 0;)
	return
	// succ:  fn0177_4000_exit
l0177_4020_thunk_fn0177_4022:
	call fn0177_4022 (retsize: 0;)
	return
	// succ:  fn0177_4000_exit
l0177_4020_thunk_fn0177_4066:
	call fn0177_4066 (retsize: 0;)
	return
	// succ:  fn0177_4000_exit
l0177_4020_thunk_fn0177_4066:
	call fn0177_4066 (retsize: 0;)
	return
	// succ:  fn0177_4000_exit
fn0177_4000_exit:


// fn0177_4022
// Return size: 0
void fn0177_4022()
fn0177_4022_entry:
	// succ:  l018F_1022
l018F_1022:
	bx = Mem0[ss:bp - 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + 0x4960
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0064:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	SCZO = cond(Mem0[ds:di + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l018F_105C
	// succ:  l018F_103D l018F_105C
l018F_103D:
	SCZO = cond(Mem0[ds:si + 0x0008:word16] - 0x0000)
	branch Test(NE,Z) l018F_104C
	// succ:  l018F_1043 l018F_104C
l018F_1043:
	ax = Mem0[ds:di + 0x0002:word16]
	Mem0[ds:si + 0x0008:word16] = ax
	goto l018F_1057
	// succ:  l018F_1057
l018F_104C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0008:word16]
	call fn0137_0572 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l018F_1057
l018F_1057:
	Mem0[ds:di + 0x0002:word16] = 0x0000
	// succ:  l018F_105C
l018F_105C:
	bx = Mem0[ss:bp - 0x0064:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l018F_1061_thunk_fn0177_4066
l018F_1061_thunk_fn0177_4066:
	call fn0177_4066 (retsize: 0;)
	return
	// succ:  fn0177_4022_exit
fn0177_4022_exit:


// fn0177_4066
// Return size: 0
void fn0177_4066()
fn0177_4066_entry:
	// succ:  l018F_1066
l018F_1066:
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0001)
	branch Test(NE,Z) l018F_10B7
	// succ:  l018F_106C l018F_10B7
l018F_106C:
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_10B7
	// succ:  l018F_1079 l018F_10B7
l018F_1079:
	SCZO = cond(Mem0[ds:0x4944:word16] - ax)
	branch Test(NE,Z) l018F_10B7
	// succ:  l018F_107F l018F_10B7
l018F_107F:
	cx = 0x0004
	di = bp - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l018F_1087
l018F_1087:
	branch cx == 0x0000 l018F_1089
	// succ:  l018F_1087_1 l018F_1089
l018F_1087_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l018F_1087
	// succ:  l018F_1087
l018F_1089:
	Mem0[ss:bp - 0x000E:word16] = 0x0001
	v15 = Mem0[ss:bp - 0x0012:byte] | 0x01
	Mem0[ss:bp - 0x0012:byte] = v15
	SZO = cond(Mem0[ss:bp - 0x0012:byte])
	C = false
	ax = Mem0[ss:bp - 0x0012:word16]
	ah = ah & 0x01
	SZO = cond(ah)
	C = false
	ah = ah | 0x42
	SZO = cond(ah)
	C = false
	Mem0[ss:bp - 0x0012:word16] = ax
	ax = Mem0[ss:bp - 0x0010:word16]
	ah = ah & 0xF1
	SZO = cond(ah)
	C = false
	ah = ah | 0x01
	SZO = cond(ah)
	C = false
	Mem0[ss:bp - 0x0010:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2044 (retsize: 2;)
	sp = sp + 0x0006
l018F_10B7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(EQ,Z) l018F_1120
	// succ:  l018F_10C5 l018F_1120
l018F_10C5:
	ax = Mem0[ss:bp - 0x000E:word16]
	goto l018F_1133
	// succ:  l018F_1133
l018F_1120:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_0874 (retsize: 2;)
	sp = sp + 0x000A
l018F_1133:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_4066_exit
fn0177_4066_exit:


// fn018F_1140
// Return size: 4
void fn018F_1140()
fn018F_1140_entry:
	// succ:  l018F_1140
l018F_1140:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x005E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = ax
	Mem0[ss:bp - 0x000C:word16] = bx
	al = 0x12
	ax = Mem0[ds:bx + 0x0001:byte] *u al
	SCZO = cond(ax)
	ax = ax + 0x00BD
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	al = Mem0[ds:bx + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0006:word16] = ax
	al = Mem0[ds:bx + 0x0017:byte]
	Mem0[ss:bp - 0x0008:word16] = ax
	Mem0[ss:bp - 0x000E:word16] = 0x0000
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l018F_1183
	// succ:  l018F_1180 l018F_1183
l018F_1180:
	goto l018F_1214
	// succ:  l018F_1214
l018F_1183:
	call fn0137_00A8 (retsize: 4;)
	bx = Mem0[ss:bp - 0x000C:word16]
	Mem0[ds:bx + 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_1195
	// succ:  l018F_1192 l018F_1195
l018F_1192:
	goto l018F_143C
	// succ:  l018F_143C
l018F_1195:
	call fn0137_1AFA (retsize: 4;)
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l018F_11A3
	// succ:  l018F_11A0 l018F_11A3
l018F_11A0:
	goto l018F_143C
	// succ:  l018F_143C
l018F_11A3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	bx = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0008:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0000 (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l018F_11C8
	// succ:  l018F_11C5 l018F_11C8
l018F_11C5:
	goto l018F_143C
	// succ:  l018F_143C
l018F_11C8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax + 0x000A
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0147_20D8 (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0137_179A (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax + 0x000A
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0147_20D8 (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0137_179A (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0137_0066 (retsize: 4;)
	sp = sp + 0x0002
	goto l018F_143C
	// succ:  l018F_143C
l018F_1214:
	si = bx
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0001)
	branch Test(EQ,Z) l018F_121F
	// succ:  l018F_121C l018F_121F
l018F_121C:
	goto l018F_13DA
	// succ:  l018F_13DA
l018F_121F:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	call fn00F7_1178 (retsize: 4;)
	sp = sp + 0x0008
	di = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0004:word16] = ax
	SZO = cond(Mem0[ds:si + 0x000A:word16] & 0x0201)
	C = false
	branch Test(NE,Z) l018F_1279
	// succ:  l018F_1255 l018F_1279
l018F_1255:
	bx = Mem0[ss:bp - 0x000A:word16]
	al = Mem0[0x018F:bx + 0x0004:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - di)
	branch Test(ULE,CZ) l018F_1279
	// succ:  l018F_1262 l018F_1279
l018F_1262:
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(EQ,Z) l018F_1279
	// succ:  l018F_1268 l018F_1279
l018F_1268:
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_1279
	// succ:  l018F_1275 l018F_1279
l018F_1275:
	v17 = Mem0[ds:si + 0x000A:byte] | 0x01
	Mem0[ds:si + 0x000A:byte] = v17
	SZO = cond(Mem0[ds:si + 0x000A:byte])
	C = false
	// succ:  l018F_1279
l018F_1279:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	SCZO = cond(Mem0[ds:si + 0x0010:word16] - dx)
	branch Test(ULE,CZ) l018F_1288
	// succ:  l018F_1285 l018F_1288
l018F_1285:
	goto l018F_13CA
	// succ:  l018F_13CA
l018F_1288:
	branch Test(ULT,C) l018F_1292
	// succ:  l018F_128A l018F_1292
l018F_128A:
	SCZO = cond(Mem0[ds:si + 0x000E:word16] - ax)
	branch Test(ULT,C) l018F_1292
	// succ:  l018F_128F l018F_1292
l018F_128F:
	goto l018F_13CA
	// succ:  l018F_13CA
l018F_1292:
	SZO = cond(Mem0[ds:si + 0x000A:byte] & 0x01)
	C = false
	branch Test(NE,Z) l018F_129B
	// succ:  l018F_1298 l018F_129B
l018F_1298:
	goto l018F_13CA
	// succ:  l018F_13CA
l018F_129B:
	bx = Mem0[ss:bp + 0x000E:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x001A:byte] = 0x00
	SZO = cond(Mem0[ds:si + 0x001E:byte] & 0x01)
	C = false
	branch Test(NE,Z) l018F_1312
	// succ:  l018F_12AA l018F_1312
l018F_12AA:
	SCZO = cond(di - 0x0001)
	branch Test(NE,Z) l018F_1312
	// succ:  l018F_12AF l018F_1312
l018F_12AF:
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_1312
	// succ:  l018F_12BC l018F_1312
l018F_12BC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn018F_2D98 (retsize: 2;)
	sp = sp + 0x0002
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l018F_12FC
	// succ:  l018F_12C7 l018F_12FC
l018F_12C7:
	SCZO = cond(di - 0x0001)
	branch Test(EQ,Z) l018F_12F8
	// succ:  l018F_12CC l018F_12F8
l018F_12CC:
	SCZO = cond(Mem0[ds:si + 0x0008:word16] - 0x0000)
	branch Test(NE,Z) l018F_12DA
	// succ:  l018F_12D2 l018F_12DA
l018F_12D2:
	call fn0137_00A8 (retsize: 4;)
	Mem0[ds:si + 0x0008:word16] = ax
	// succ:  l018F_12DA
l018F_12DA:
	SCZO = cond(Mem0[ds:si + 0x0008:word16] - 0x0000)
	branch Test(NE,Z) l018F_12E8
	// succ:  l018F_12E0 l018F_12E8
l018F_12E0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0137_0066 (retsize: 4;)
	sp = sp + 0x0002
	goto l018F_12F8
	// succ:  l018F_12F8
l018F_12E8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0008:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	// succ:  l018F_12F8
l018F_12F8:
	v20 = Mem0[ds:si + 0x001E:byte] | 0x01
	Mem0[ds:si + 0x001E:byte] = v20
	SZO = cond(Mem0[ds:si + 0x001E:byte])
	C = false
	// succ:  l018F_12FC
l018F_12FC:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	Mem0[ds:si + 0x000E:word16] = ax
	Mem0[ds:si + 0x0010:word16] = dx
	Mem0[ss:bp - 0x000E:word16] = 0x0001
	goto l018F_1412
	// succ:  l018F_1412
l018F_1312:
	al = Mem0[ds:si + 0x001E:byte]
	al = al & 0x03
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x01)
	branch Test(NE,Z) l018F_134C
	// succ:  l018F_131B l018F_134C
l018F_131B:
	di = di - 0x0001
	SZO = cond(di)
	branch Test(NE,Z) l018F_134C
	// succ:  l018F_131E l018F_134C
l018F_131E:
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_134C
	// succ:  l018F_132B l018F_134C
l018F_132B:
	ax = 0x02D1
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_27DE (retsize: 2;)
	sp = sp + 0x0004
	v19 = Mem0[ds:si + 0x001E:byte] | 0x02
	Mem0[ds:si + 0x001E:byte] = v19
	SZO = cond(Mem0[ds:si + 0x001E:byte])
	C = false
	Mem0[ds:si + 0x0020:word16] = 0x02D0
	goto l018F_12FC
	// succ:  l018F_12FC
l018F_134C:
	SZO = cond(Mem0[ds:si + 0x001E:byte] & 0x02)
	C = false
	branch Test(NE,Z) l018F_1355
	// succ:  l018F_1352 l018F_1355
l018F_1352:
	goto l018F_1412
	// succ:  l018F_1412
l018F_1355:
	v21 = Mem0[ds:si + 0x0020:word16] - 0x0001
	Mem0[ds:si + 0x0020:word16] = v21
	SZO = cond(v21)
	branch Test(EQ,Z) l018F_135D
	// succ:  l018F_135A l018F_135D
l018F_135A:
	goto l018F_1412
	// succ:  l018F_1412
l018F_135D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0008:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	cx = ax
	ax = ax + 0x002D
	SCZO = cond(ax)
	di = ax
	bx = cx
	dx = Mem0[ds:bx + 0x0024:word16]
	bx = dx
	dx = dx << 0x0001
	SCZO = cond(dx)
	dx = dx << 0x0001
	SCZO = cond(dx)
	dx = dx + bx
	SCZO = cond(dx)
	cx = cx + dx
	SCZO = cond(cx)
	cx = cx + 0x0028
	SCZO = cond(cx)
	Mem0[ss:bp - 0x0008:word16] = cx
	SCZO = cond(cx - ax)
	branch Test(ULE,CZ) l018F_13BA
	// succ:  l018F_1385 l018F_13BA
l018F_1385:
	ax = cx
	ax = ax - di
	SCZO = cond(ax)
	ax = ax + 0x0004
	SCZO = cond(ax)
	cx = 0x0005
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = di
	// succ:  l018F_1399
l018F_1399:
	si = Mem0[ds:di + 0x0003:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0008:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_06D4 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0137_0066 (retsize: 4;)
	sp = sp + 0x0002
	v24 = Mem0[ss:bp - 0x0006:word16] - 0x0001
	Mem0[ss:bp - 0x0006:word16] = v24
	SZO = cond(v24)
	branch Test(NE,Z) l018F_1399
	// succ:  l018F_13B7 l018F_1399
l018F_13B7:
	si = Mem0[ss:bp - 0x000C:word16]
	// succ:  l018F_13BA
l018F_13BA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0008:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:si + 0x001E:word16] = 0x0000
	goto l018F_1412
	// succ:  l018F_1412
l018F_13CA:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	Mem0[ds:si + 0x000E:word16] = ax
	Mem0[ds:si + 0x0010:word16] = dx
	goto l018F_143C
	// succ:  l018F_143C
l018F_13DA:
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0002)
	branch Test(NE,Z) l018F_140C
	// succ:  l018F_13E0 l018F_140C
l018F_13E0:
	ax = bp - 0x005E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x001D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_30A4 (retsize: 2;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	goto l018F_143C
	// succ:  l018F_143C
l018F_140C:
	SCZO = cond(Mem0[ss:bp + 0x000C:word16] - 0x0003)
	branch Test(NE,Z) l018F_143C
	// succ:  l018F_1412 l018F_143C
l018F_1412:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(EQ,Z) l018F_1426
	// succ:  l018F_1420 l018F_1426
l018F_1420:
	ax = Mem0[ss:bp - 0x000E:word16]
	goto l018F_1446
	// succ:  l018F_1446
l018F_1426:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_0874 (retsize: 2;)
	sp = sp + 0x000A
	goto l018F_1446
	// succ:  l018F_1446
l018F_143C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l018F_1446
l018F_1446:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_1140_exit
fn018F_1140_exit:


// fn018F_1452
// Return size: 4
void fn018F_1452()
fn018F_1452_entry:
	// succ:  l018F_1452
l018F_1452:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	si = di + 0x0022
	al = Mem0[ds:di + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:di + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1268 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_1480
	// succ:  l018F_147A l018F_1480
l018F_147A:
	SZO = cond(Mem0[ds:di + 0x000A:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l018F_14A4
	// succ:  l018F_1480 l018F_14A4
l018F_1480:
	dx = dx - dx
	SCZO = cond(dx)
	SCZO = cond(Mem0[ds:di + 0x0012:byte] - 0x00)
	branch Test(EQ,Z) l018F_14A4
	// succ:  l018F_1488 l018F_14A4
l018F_1488:
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x01)
	C = false
	branch Test(NE,Z) l018F_149E
	// succ:  l018F_148E l018F_149E
l018F_148E:
	si = si + 0x0004
	SCZO = cond(si)
	al = Mem0[ds:di + 0x0012:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx + 0x0001
	SZO = cond(dx)
	SCZO = cond(ax - dx)
	branch Test(UGT,CZ) l018F_1488
	// succ:  l018F_149B l018F_1488
l018F_149B:
	goto l018F_14A4
	// succ:  l018F_14A4
l018F_149E:
	ax = 0x0001
	goto l018F_14A6
	// succ:  l018F_14A6
l018F_14A4:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l018F_14A6
l018F_14A6:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_1452_exit
fn018F_1452_exit:


// fn018F_14B2
// Return size: 4
void fn018F_14B2()
fn018F_14B2_entry:
	// succ:  l018F_14B2
l018F_14B2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ds:di + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	al = Mem0[ds:di + 0x0017:byte]
	Mem0[ss:bp - 0x0006:word16] = ax
	si = si - si
	SCZO = cond(si)
	// succ:  l018F_14D4
l018F_14D4:
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	dx = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_11AE (retsize: 4;)
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_1B1A (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_150B
	// succ:  l018F_1505 l018F_150B
l018F_1505:
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x0003)
	branch Test(LT,SO) l018F_14D4
	// succ:  l018F_150B l018F_14D4
l018F_150B:
	SCZO = cond(si - 0x0003)
	branch Test(NE,Z) l018F_1524
	// succ:  l018F_1510 l018F_1524
l018F_1510:
	ax = 0x0032
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1140 (retsize: 4;)
	sp = sp + 0x0004
	dx = dx - dx
	SCZO = cond(dx)
	v18 = Mem0[ds:di + 0x000E:word16] + ax
	Mem0[ds:di + 0x000E:word16] = v18
	SCZO = cond(v18)
	v19 = Mem0[ds:di + 0x0010:word16] + dx + C
	Mem0[ds:di + 0x0010:word16] = v19
	SCZO = cond(v19)
	goto l018F_152F
	// succ:  l018F_152F
l018F_1524:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	call fn018F_18FE (retsize: 2;)
	sp = sp + 0x0006
l018F_152F:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_14B2_exit
fn018F_14B2_exit:


// fn018F_153C
// Return size: 4
void fn018F_153C()
fn018F_153C_entry:
	// succ:  l018F_153C
l018F_153C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx + 0x000E:word16] = ax
	Mem0[ds:bx + 0x0010:word16] = dx
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_153C_exit
fn018F_153C_exit:


// fn018F_1564
// Return size: 4
void fn018F_1564()
fn018F_1564_entry:
	goto l018F_1564
	// succ:  l018F_1564
l0177_4589:
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_1564_exit
l018F_1564:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_15D4 (retsize: 2;)
	sp = sp + 0x0008
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	goto l0177_4589
	// succ:  l0177_4589
fn018F_1564_exit:


// fn018F_1590
// Return size: 4
void fn018F_1590()
fn018F_1590_entry:
	// succ:  l018F_1590
l018F_1590:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	al = Mem0[ds:si + 0x0018:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0019:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_15D4 (retsize: 2;)
	sp = sp + 0x0008
	al = Mem0[ds:si + 0x0018:byte]
	SCZO = cond(Mem0[ds:si + 0x0016:byte] - al)
	branch Test(NE,Z) l018F_15C8
	// succ:  l018F_15BC l018F_15C8
l018F_15BC:
	al = Mem0[ds:si + 0x0019:byte]
	SCZO = cond(Mem0[ds:si + 0x0017:byte] - al)
	branch Test(NE,Z) l018F_15C8
	// succ:  l018F_15C4 l018F_15C8
l018F_15C4:
	Mem0[ds:si + 0x0018:byte] = 0xFF
	// succ:  l018F_15C8
l018F_15C8:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_1590_exit
fn018F_1590_exit:


// fn018F_15D4
// Return size: 4
void fn018F_15D4()
fn018F_15D4_entry:
	// succ:  l018F_15D4
l018F_15D4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	dx = Mem0[ss:bp + 0x000A:word16]
	si = Mem0[ss:bp + 0x000C:word16]
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x000A:word16] = ax
	cl = Mem0[ds:si + 0x0017:byte]
	ch = ch - ch
	SCZO = cond(ch)
	Mem0[ss:bp - 0x0008:word16] = cx
	dx = dx - ax
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000E:word16] = dx
	di = Mem0[ss:bp + 0x0008:word16]
	di = di - cx
	SCZO = cond(di)
	Mem0[ss:bp - 0x000C:word16] = di
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l018F_1654
	// succ:  l018F_160A l018F_1654
l018F_160A:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l018F_1654
	// succ:  l018F_160E l018F_1654
l018F_160E:
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(LE,SZO) l018F_1618
	// succ:  l018F_1612 l018F_1618
l018F_1612:
	dx = 0x0001
	goto l018F_1623
	// succ:  l018F_1623
l018F_1618:
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(LT,SO) l018F_1620
	// succ:  l018F_161C l018F_1620
l018F_161C:
	dx = dx - dx
	SCZO = cond(dx)
	goto l018F_1623
	// succ:  l018F_1623
l018F_1620:
	dx = 0xFFFF
	// succ:  l018F_1623
l018F_1623:
	dx = dx + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0004:word16] = dx
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LE,SZO) l018F_1632
	// succ:  l018F_162D l018F_1632
l018F_162D:
	cx = 0x0001
	goto l018F_163D
	// succ:  l018F_163D
l018F_1632:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LT,SO) l018F_163A
	// succ:  l018F_1636 l018F_163A
l018F_1636:
	cx = cx - cx
	SCZO = cond(cx)
	goto l018F_163D
	// succ:  l018F_163D
l018F_163A:
	cx = 0xFFFF
	// succ:  l018F_163D
l018F_163D:
	Mem0[ss:bp - 0x000C:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	cx = cx + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(cx)
	Mem0[ss:bp - 0x0006:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_1B1A (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_1689
	goto l018F_1654
	// succ:  l018F_1654 l018F_1652_thunk_fn0177_46C7
l018F_1652_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn018F_15D4_exit
l018F_1654:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(EQ,Z) l018F_1698
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(EQ,Z) l018F_1698
	// succ:  l018F_165A l018F_1698
l018F_165A:
	branch Test(LE,SZO) l018F_1662
	branch Test(LE,SZO) l018F_1662
	// succ:  l018F_165C l018F_1662
l018F_165C:
	cx = 0x0001
	cx = 0x0001
	goto l018F_166F
	// succ:  l018F_166F
l018F_1662:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(LT,SO) l018F_166C
	// succ:  l018F_1668 l018F_166C
l018F_1668:
	cx = cx - cx
	SCZO = cond(cx)
	goto l018F_166F
	// succ:  l018F_166F
l018F_166C:
	cx = 0xFFFF
	// succ:  l018F_166F
l018F_166F:
	ax = Mem0[ss:bp - 0x0008:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = cx + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(cx)
	Mem0[ss:bp - 0x0004:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_1B1A (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_1698
	// succ:  l018F_1687_thunk_fn0177_46C7 l018F_1698
l018F_1687_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn018F_15D4_exit
l018F_1698:
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l018F_16D2
	goto l018F_169E
	// succ:  l018F_169E l018F_169C_thunk_fn0177_46C7
l018F_169C_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn018F_15D4_exit
l018F_169E:
	di = Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(LE,SZO) l018F_16AC
	// succ:  l018F_16A7 l018F_16AC
l018F_16A7:
	cx = 0x0001
	goto l018F_16B9
	// succ:  l018F_16B9
l018F_16AC:
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(LT,SO) l018F_16B6
	// succ:  l018F_16B2 l018F_16B6
l018F_16B2:
	cx = cx - cx
	SCZO = cond(cx)
	goto l018F_16B9
	// succ:  l018F_16B9
l018F_16B6:
	cx = 0xFFFF
	// succ:  l018F_16B9
l018F_16B9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cx = cx + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(cx)
	Mem0[ss:bp - 0x0006:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_1B1A (retsize: 2;)
	sp = sp + 0x0008
	// succ:  l018F_16C5_thunk_fn0177_46C7
l018F_16C5_thunk_fn0177_46C7:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  fn018F_15D4_exit
fn018F_15D4_exit:


// fn0177_4689
// Return size: 0
void fn0177_4689()
fn0177_4689_entry:
	call fn0177_46C7 (retsize: 0;)
	return
	// succ:  l018F_1689 fn0177_4689_exit
l018F_1689:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	// succ:  l018F_168A_thunk_fn0177_468D
l018F_168A_thunk_fn0177_468D:
	call fn0177_468D (retsize: 0;)
	return
	// succ:  fn0177_4689_exit
fn0177_4689_exit:


// fn0177_468D
// Return size: 0
void fn0177_468D()
fn0177_468D_entry:
	// succ:  l018F_168D
l018F_168D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	// succ:  l018F_1690
l018F_1690:
	sp = sp - 0x0002
	call fn018F_18FE (retsize: 2;)
	sp = sp + 0x0006
	// succ:  l018F_17BA
l018F_17BA:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_468D_exit
fn0177_468D_exit:


// fn0177_46C7
// Return size: 0
void fn0177_46C7()
fn0177_46C7_entry:
	// succ:  l0177_46C7
l0177_46C7:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	al = al + 0x0B
	SCZO = cond(al)
	v9 = Mem0[ds:si + 0x0005:byte] << 0x56
	Mem0[ds:si + 0x0005:byte] = v9
	SCZO = cond(v9)
	goto l0177_46CA_thunk_fn0177_46CE
	// succ:  l0177_46CA_thunk_fn0177_46CE
l0177_46C7:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_16D2
	goto l018F_16CD
	// succ:  l018F_16CD l018F_16D2
l0177_46CA_thunk_fn0177_46CE:
	call fn0177_46CE (retsize: 0;)
	return
	// succ:  fn0177_46C7_exit
l018F_16CD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	// succ:  l018F_16CD_thunk_fn0177_46CE
l018F_16CD_thunk_fn0177_46CE:
	call fn0177_46CE (retsize: 0;)
	return
	// succ:  fn0177_46C7_exit
l018F_16D2:
	bx = Mem0[ss:bp - 0x000E:word16]
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l018F_1740
	// succ:  l018F_16D9 l018F_1740
l018F_16D9:
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(LE,SZO) l018F_16E2
	// succ:  l018F_16DD l018F_16E2
l018F_16DD:
	cx = 0x0001
	goto l018F_16ED
	// succ:  l018F_16ED
l018F_16E2:
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(LT,SO) l018F_16EA
	// succ:  l018F_16E6 l018F_16EA
l018F_16E6:
	cx = cx - cx
	SCZO = cond(cx)
	goto l018F_16ED
	// succ:  l018F_16ED
l018F_16EA:
	cx = 0xFFFF
	// succ:  l018F_16ED
l018F_16ED:
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(LT,SO) l018F_16F8
	// succ:  l018F_16F3 l018F_16F8
l018F_16F3:
	ax = 0x0001
	goto l018F_16FB
	// succ:  l018F_16FB
l018F_16F8:
	ax = 0xFFFF
	// succ:  l018F_16FB
l018F_16FB:
	ax = ax + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = cx + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(cx)
	Mem0[ss:bp - 0x0004:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_1B1A (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_1718
	// succ:  l018F_1715 l018F_1718
l018F_1715:
	call fn0177_4689 (retsize: 0;)
	return
	// succ:  l018F_1689 fn0177_46C7_exit
l018F_1718:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - ax)
	branch Test(LT,SO) l018F_1726
	// succ:  l018F_1721 l018F_1726
l018F_1721:
	di = 0xFFFF
	goto l018F_1729
	// succ:  l018F_1729
l018F_1726:
	di = 0x0001
	// succ:  l018F_1729
l018F_1729:
	di = di + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_1B1A (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_1740
	// succ:  l018F_1738 l018F_1740
l018F_1738:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	// succ:  l018F_173C_thunk_fn0177_468D
l018F_173C_thunk_fn0177_468D:
	call fn0177_468D (retsize: 0;)
	return
	// succ:  fn0177_46C7_exit
l018F_1740:
	di = Mem0[ss:bp - 0x000C:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l018F_17A4
	// succ:  l018F_1747 l018F_17A4
l018F_1747:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LE,SZO) l018F_1750
	// succ:  l018F_174B l018F_1750
l018F_174B:
	cx = 0x0001
	goto l018F_175B
	// succ:  l018F_175B
l018F_1750:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LT,SO) l018F_1758
	// succ:  l018F_1754 l018F_1758
l018F_1754:
	cx = cx - cx
	SCZO = cond(cx)
	goto l018F_175B
	// succ:  l018F_175B
l018F_1758:
	cx = 0xFFFF
	// succ:  l018F_175B
l018F_175B:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(LT,SO) l018F_1766
	// succ:  l018F_1761 l018F_1766
l018F_1761:
	ax = 0x0001
	goto l018F_1769
	// succ:  l018F_1769
l018F_1766:
	ax = 0xFFFF
	// succ:  l018F_1769
l018F_1769:
	ax = ax + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = cx
	di = di + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_1B1A (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_1738
	// succ:  l018F_1782 l018F_1738
l018F_1782:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - ax)
	branch Test(LT,SO) l018F_178E
	// succ:  l018F_1788 l018F_178E
l018F_1788:
	ax = 0xFFFF
	goto l018F_1791
	// succ:  l018F_1791
l018F_178E:
	ax = 0x0001
	// succ:  l018F_1791
l018F_1791:
	ax = ax + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_1B1A (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_1738
	// succ:  l018F_17A4 l018F_1738
l018F_17A4:
	Mem0[ds:si + 0x0018:byte] = 0xFF
	ax = 0x0032
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1140 (retsize: 4;)
	sp = sp + 0x0004
	dx = dx - dx
	SCZO = cond(dx)
	v19 = Mem0[ds:si + 0x000E:word16] + ax
	Mem0[ds:si + 0x000E:word16] = v19
	SCZO = cond(v19)
	v20 = Mem0[ds:si + 0x0010:word16] + dx + C
	Mem0[ds:si + 0x0010:word16] = v20
	SCZO = cond(v20)
	// succ:  l018F_17B7_thunk_fn0177_468D
l018F_17B7_thunk_fn0177_468D:
	call fn0177_468D (retsize: 0;)
	return
	// succ:  fn0177_46C7_exit
fn0177_46C7_exit:


// fn0177_46CE
// Return size: 0
void fn0177_46CE()
fn0177_46CE_entry:
	// succ:  l0177_46CE
l0177_46CE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	goto l0177_46CF_thunk_fn0177_468D
	// succ:  l0177_46CF_thunk_fn0177_468D
l0177_46CE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	// succ:  l0177_46CE_thunk_fn0177_468D
l0177_46CE_thunk_fn0177_468D:
	call fn0177_468D (retsize: 0;)
	return
	// succ:  fn0177_46CE_exit
l0177_46CF_thunk_fn0177_468D:
	call fn0177_468D (retsize: 0;)
	return
	// succ:  fn0177_46CE_exit
fn0177_46CE_exit:


// fn018F_17C6
// Return size: 4
void fn018F_17C6()
fn018F_17C6_entry:
	// succ:  l018F_17C6
l018F_17C6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ds:di + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	cl = Mem0[ds:di + 0x0017:byte]
	ch = ch - ch
	SCZO = cond(ch)
	Mem0[ss:bp - 0x0004:word16] = cx
	dx = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	bx = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	al = Mem0[ds:di + 0x0015:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00DF_1546 (retsize: 4;)
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_1B1A (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_181E
	// succ:  l018F_180F l018F_181E
l018F_180F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	call fn018F_18FE (retsize: 2;)
	sp = sp + 0x0006
	goto l018F_18F2
	// succ:  l018F_18F2
l018F_181E:
	Mem0[ss:bp - 0x0008:word16] = si
	si = 0x0001
	// succ:  l018F_1824
l018F_1824:
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[ds:di + 0x0015:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + si
	SCZO = cond(ax)
	dx = 0x0008
	bx = dx
	dx_ax = (int32) ax
	dx = dx_ax % bx
	ax = dx_ax / bx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn00DF_1546 (retsize: 4;)
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_1B1A (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_180F
	// succ:  l018F_185A l018F_180F
l018F_185A:
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[ds:di + 0x0015:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - si
	SCZO = cond(ax)
	ax = ax + 0x0008
	SCZO = cond(ax)
	dx = 0x0008
	bx = dx
	dx_ax = (int32) ax
	dx = dx_ax % bx
	ax = dx_ax / bx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn00DF_1546 (retsize: 4;)
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_1B1A (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_1896
	// succ:  l018F_1893 l018F_1896
l018F_1893:
	goto l018F_180F
	// succ:  l018F_180F
l018F_1896:
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x0004)
	branch Test(LT,SO) l018F_1824
	// succ:  l018F_189C l018F_1824
l018F_189C:
	Mem0[ss:bp - 0x0006:word16] = si
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[ds:di + 0x0015:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax)
	ax = ax + 0x0008
	SCZO = cond(ax)
	dx = 0x0008
	bx = dx
	dx_ax = (int32) ax
	dx = dx_ax % bx
	ax = dx_ax / bx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn00DF_1546 (retsize: 4;)
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_1B1A (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_18DC
	// succ:  l018F_18D9 l018F_18DC
l018F_18D9:
	goto l018F_180F
	// succ:  l018F_180F
l018F_18DC:
	Mem0[ds:di + 0x0015:byte] = 0xFF
	ax = 0x0032
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1140 (retsize: 4;)
	sp = sp + 0x0004
	dx = dx - dx
	SCZO = cond(dx)
	v22 = Mem0[ds:di + 0x000E:word16] + ax
	Mem0[ds:di + 0x000E:word16] = v22
	SCZO = cond(v22)
	v23 = Mem0[ds:di + 0x0010:word16] + dx + C
	Mem0[ds:di + 0x0010:word16] = v23
	SCZO = cond(v23)
	// succ:  l018F_18F2
l018F_18F2:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_17C6_exit
fn018F_17C6_exit:


// fn018F_18FE
// Return size: 4
void fn018F_18FE()
fn018F_18FE_entry:
	// succ:  l018F_18FE
l018F_18FE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0016
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x000A:word16]
	si = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[ds:di + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0012:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = ax
	al = Mem0[ds:di + 0x0017:byte]
	Mem0[ss:bp - 0x0014:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = ax
	// succ:  l018F_1924_thunk_fn0177_4926
l018F_1924_thunk_fn0177_4926:
	call fn0177_4926 (retsize: 0;)
	return
	// succ:  fn018F_18FE_exit
fn018F_18FE_exit:


// fn0177_4926
// Return size: 0
void fn0177_4926()
fn0177_4926_entry:
	// succ:  l0177_4926
l0177_4926:
	sp = fp
	dx = dx_ax % Mem0[ds:(bx + 0x8B06) + di:byte]
	ax = dx_ax /u Mem0[ds:(bx + 0x8B06) + di:byte]
	SCZO = cond(ax)
l0177_4926:
	cl = 0x06
	bx = si
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0016:word16] = bx
	SCZO = cond(Mem0[ds:bx + 0x0CE2:byte] - 0x10)
	branch Test(EQ,Z) l018F_1943
	// succ:  l018F_1940 l018F_1943
l018F_1940:
	goto l018F_19C6
	// succ:  l018F_19C6
l018F_1943:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2C0C (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(ax - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x0019
	SZO = cond(ax)
	C = false
	ax = ax + 0x0011
	SCZO = cond(ax)
	al = al & 0xFF
	SZO = cond(al)
	C = false
	bx = Mem0[ss:bp - 0x0016:word16]
	cl = al
	ch = Mem0[ds:bx + 0x0CE3:byte]
	Mem0[ds:bx + 0x0CE2:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	ax = 0x0032
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1140 (retsize: 4;)
	sp = sp + 0x0004
	dx = dx - dx
	SCZO = cond(dx)
	v23 = Mem0[ds:di + 0x000E:word16] + ax
	Mem0[ds:di + 0x000E:word16] = v23
	SCZO = cond(v23)
	v24 = Mem0[ds:di + 0x0010:word16] + dx + C
	Mem0[ds:di + 0x0010:word16] = v24
	SCZO = cond(v24)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_19A2
	// succ:  l018F_199F l018F_19A2
l018F_199F:
	goto l018F_1B0D
	// succ:  l018F_1B0D
l018F_19A2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2C0C (retsize: 2;)
	sp = sp + 0x0006
	SCZO = cond(ax - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x0001
	SZO = cond(ax)
	C = false
	ax = ax + 0x033E
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	goto l018F_1B0D
	// succ:  l018F_1B0D
l018F_19C6:
	SCZO = cond(Mem0[ds:di + 0x0016:byte] - 0xFF)
	branch Test(EQ,Z) l018F_19FE
	// succ:  l018F_19CC l018F_19FE
l018F_19CC:
	cl = 0x06
	bx = Mem0[ss:bp - 0x0012:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp - 0x0014:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x000E:word16] = ax
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	si = Mem0[ds:bx + 0x4960:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = ax
	Mem0[ds:bx:word16] = 0x0000
	goto l018F_1A03
	// succ:  l018F_1A03
l018F_19FE:
	si = si - si
	SCZO = cond(si)
	Mem0[ss:bp - 0x0004:word16] = si
	// succ:  l018F_1A03
l018F_1A03:
	bx = Mem0[ss:bp - 0x0016:word16]
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_1A26
	// succ:  l018F_1A13 l018F_1A26
l018F_1A13:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x4960:word16]
	Mem0[ss:bp - 0x0010:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l018F_1A2B
	// succ:  l018F_1A2B
l018F_1A26:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0010:word16] = ax
	// succ:  l018F_1A2B
l018F_1A2B:
	Mem0[ss:bp - 0x000C:word16] = ax
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(EQ,Z) l018F_1A6C
	// succ:  l018F_1A34 l018F_1A6C
l018F_1A34:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0177_1A2A (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_1A6C
	// succ:  l018F_1A40 l018F_1A6C
l018F_1A40:
	cl = 0x06
	bx = Mem0[ss:bp - 0x0006:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ds:bx + 0x0CE4:byte] = 0x00
	SCZO = cond(Mem0[ss:bp - 0x0010:word16] - 0x0000)
	branch Test(EQ,Z) l018F_1A7B
	// succ:  l018F_1A5B l018F_1A7B
l018F_1A5B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	call fn0177_0196 (retsize: 4;)
	sp = sp + 0x0002
	goto l018F_1A7B
	// succ:  l018F_1A7B
l018F_1A6C:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l018F_1A7B
	// succ:  l018F_1A70 l018F_1A7B
l018F_1A70:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	// succ:  l018F_1A7B
l018F_1A7B:
	SCZO = cond(Mem0[ss:bp - 0x0010:word16] - 0x0000)
	branch Test(NE,Z) l018F_1ABF
	// succ:  l018F_1A81 l018F_1ABF
l018F_1A81:
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0000)
	branch Test(EQ,Z) l018F_1A9A
	// succ:  l018F_1A87 l018F_1A9A
l018F_1A87:
	ax = Mem0[ss:bp - 0x0004:word16]
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x0010:word16] = si
	dx = Mem0[ss:bp - 0x000E:word16]
	Mem0[ss:bp - 0x0008:word16] = dx
	si = dx
	goto l018F_1AB6
	// succ:  l018F_1AB6
l018F_1A9A:
	ax = bp - 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_0000 (retsize: 4;)
	sp = sp + 0x0002
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l018F_1B0D
	// succ:  l018F_1AAB l018F_1B0D
l018F_1AAB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000C:word16] = ax
	// succ:  l018F_1AB6
l018F_1AB6:
	ax = si
	bx = Mem0[ss:bp - 0x0016:word16]
	Mem0[ds:bx + 0x0CE4:byte] = al
	// succ:  l018F_1ABF
l018F_1ABF:
	ax = Mem0[ds:di + 0x001C:word16]
	bx = Mem0[ss:bp - 0x000C:word16]
	Mem0[ds:bx:word16] = ax
	al = Mem0[ss:bp + 0x0008:byte]
	Mem0[ds:di + 0x0016:byte] = al
	al = Mem0[ss:bp + 0x0006:byte]
	Mem0[ds:di + 0x0017:byte] = al
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x00FF)
	branch Test(NE,Z) l018F_1AE0
	// succ:  l018F_1ADA l018F_1AE0
l018F_1ADA:
	Mem0[ds:di + 0x0015:byte] = 0xFF
	goto l018F_1AF3
	// succ:  l018F_1AF3
l018F_1AE0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn018F_2BAE (retsize: 2;)
	sp = sp + 0x0008
	Mem0[ds:di + 0x0015:byte] = al
	// succ:  l018F_1AF3
l018F_1AF3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = 0x0032
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1140 (retsize: 4;)
	sp = sp + 0x0004
	dx = dx - dx
	SCZO = cond(dx)
	v19 = Mem0[ds:di + 0x000E:word16] + ax
	Mem0[ds:di + 0x000E:word16] = v19
	SCZO = cond(v19)
	v20 = Mem0[ds:di + 0x0010:word16] + dx + C
	Mem0[ds:di + 0x0010:word16] = v20
	SCZO = cond(v20)
	// succ:  l018F_1B0D
l018F_1B0D:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_4926_exit
fn0177_4926_exit:


// fn018F_1B1A
// Return size: 4
void fn018F_1B1A()
fn018F_1B1A_entry:
	// succ:  l018F_1B1A
l018F_1B1A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(Mem0[ds:0x0480:word16] - di)
	branch Test(NE,Z) l018F_1B35
	// succ:  l018F_1B32 l018F_1B35
l018F_1B32:
	goto l018F_1C3E
	// succ:  l018F_1C3E
l018F_1B35:
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l018F_1B3D
	// succ:  l018F_1B3A l018F_1B3D
l018F_1B3A:
	goto l018F_1C3E
	// succ:  l018F_1C3E
l018F_1B3D:
	bx = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ds:0x0482:word16] - bx)
	branch Test(NE,Z) l018F_1B49
	// succ:  l018F_1B46 l018F_1B49
l018F_1B46:
	goto l018F_1C3E
	// succ:  l018F_1C3E
l018F_1B49:
	SCZO = cond(bx - 0xFFFF)
	branch Test(NE,Z) l018F_1B51
	// succ:  l018F_1B4E l018F_1B51
l018F_1B4E:
	goto l018F_1C3E
	// succ:  l018F_1C3E
l018F_1B51:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - di)
	branch Test(NE,Z) l018F_1B64
	// succ:  l018F_1B5A l018F_1B64
l018F_1B5A:
	al = Mem0[ds:0x4D1D:byte]
	SCZO = cond(ax - bx)
	branch Test(NE,Z) l018F_1B64
	// succ:  l018F_1B61 l018F_1B64
l018F_1B61:
	goto l018F_1C3E
	// succ:  l018F_1C3E
l018F_1B64:
	cl = 0x06
	si = di
	si = si << cl
	SCZO = cond(si)
	si = si + bx
	SCZO = cond(si)
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0CE2
	SCZO = cond(si)
	al = Mem0[ds:si + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l018F_1B91
	// succ:  l018F_1B81 l018F_1B91
l018F_1B81:
	di = di << 0x0001
	SCZO = cond(di)
	bx = Mem0[ds:di + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(EQ,Z) l018F_1B91
	// succ:  l018F_1B8E l018F_1B91
l018F_1B8E:
	goto l018F_1C3E
	// succ:  l018F_1C3E
l018F_1B91:
	di = si
	al = Mem0[ds:di:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - 0x0019)
	branch Test(NE,Z) l018F_1B9F
	// succ:  l018F_1B9C l018F_1B9F
l018F_1B9C:
	goto l018F_1C34
	// succ:  l018F_1C34
l018F_1B9F:
	branch Test(UGT,CZ) l018F_1BB4
	// succ:  l018F_1BA1 l018F_1BB4
l018F_1BA1:
	SCZO = cond(ax - 0x0010)
	branch Test(EQ,Z) l018F_1C20
	// succ:  l018F_1BA6 l018F_1C20
l018F_1BA6:
	branch Test(UGT,CZ) l018F_1BD2
	// succ:  l018F_1BA8 l018F_1BD2
l018F_1BA8:
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l018F_1BDE
	// succ:  l018F_1BAC l018F_1BDE
l018F_1BAC:
	al = al - 0x09
	SCZO = cond(al)
	branch Test(EQ,Z) l018F_1BDE
	// succ:  l018F_1BB0 l018F_1BDE
l018F_1BB0:
	goto l018F_1BD2
	// succ:  l018F_1BD2
l018F_1BB4:
	ax = ax - 0x0026
	SCZO = cond(ax)
	branch Test(ULT,C) l018F_1BD2
	// succ:  l018F_1BB9 l018F_1BD2
l018F_1BB9:
	ax = ax - 0x0003
	SCZO = cond(ax)
	branch Test(ULE,CZ) l018F_1BDE
	// succ:  l018F_1BBE l018F_1BDE
l018F_1BBE:
	ax = ax - 0x0018
	SCZO = cond(ax)
	branch Test(ULT,C) l018F_1BD2
	// succ:  l018F_1BC3 l018F_1BD2
l018F_1BC3:
	ax = ax - 0x0003
	SCZO = cond(ax)
	branch Test(ULE,CZ) l018F_1BDE
	// succ:  l018F_1BC8 l018F_1BDE
l018F_1BC8:
	ax = ax - 0x0019
	SCZO = cond(ax)
	branch Test(ULT,C) l018F_1BD2
	// succ:  l018F_1BCD l018F_1BD2
l018F_1BCD:
	ax = ax - 0x0003
	SCZO = cond(ax)
	branch Test(ULE,CZ) l018F_1BDE
	// succ:  l018F_1BD2 l018F_1BDE
l018F_1BD2:
	al = Mem0[ds:di:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_228A (retsize: 4;)
	sp = sp + 0x0002
	al = Mem0[ds:di:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_228A (retsize: 4;)
	sp = sp + 0x0002
	goto l018F_1C40
	// succ:  l018F_1C40
l018F_1BDE:
	si = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2C0C (retsize: 2;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_1BD2
	// succ:  l018F_1BF1 l018F_1BD2
l018F_1BF1:
	cl = 0x06
	bl = Mem0[ds:si + 0x0016:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:si + 0x0017:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0CE2:byte] & 0xFF)
	C = false
	branch Test(NE,Z) l018F_1C14
	// succ:  l018F_1C0E l018F_1C14
l018F_1C0E:
	ax = 0x0001
	goto l018F_1C40
	// succ:  l018F_1C40
l018F_1C14:
	dx = Mem0[ss:bp + 0x0006:word16]
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l018F_1C0E
	// succ:  l018F_1C1B l018F_1C0E
l018F_1C1B:
	dx = dx - 0x0001
	SZO = cond(dx)
	branch Test(NE,Z) l018F_1BD2
	// succ:  l018F_1C1E l018F_1BD2
l018F_1C1E:
	goto l018F_1C0E
	// succ:  l018F_1C0E
l018F_1C20:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x0006
	// succ:  l018F_1C28
l018F_1C28:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2C0C (retsize: 2;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_1BD2
	// succ:  l018F_1C32 l018F_1BD2
l018F_1C32:
	goto l018F_1C0E
	// succ:  l018F_1C0E
l018F_1C34:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x0040
	goto l018F_1C28
	// succ:  l018F_1C28
l018F_1C3E:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l018F_1C40
l018F_1C40:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_1B1A_exit
fn018F_1B1A_exit:


// fn018F_1C4C
// Return size: 4
void fn018F_1C4C()
fn018F_1C4C_entry:
	goto l018F_1C4C
	// succ:  l018F_1C4C
l0177_4C52:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[0x018F:bx + 0x0670:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_1C4C_exit
l018F_1C4C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	goto l0177_4C52
	// succ:  l0177_4C52
fn018F_1C4C_exit:


// fn018F_1C7A
// Return size: 4
void fn018F_1C7A()
fn018F_1C7A_entry:
	// succ:  l018F_1C7A
l018F_1C7A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax - 0x0024)
	branch Test(ULE,CZ) l018F_1C92
	// succ:  l018F_1C8F l018F_1C92
l018F_1C8F:
	goto l018F_1D3A
	// succ:  l018F_1D3A
l018F_1C92:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v10 = ax
	ax = bx
	bx = v10
	switch (ax) { l018F_1CE4 l018F_1CEC l018F_1CF4 l018F_1CFC l018F_1D04 l018F_1D0C l018F_1D0C l018F_1D0C l018F_1D14 l018F_1D14 l018F_1D1E l018F_1D1E l018F_1D1E l018F_1D0C l018F_1D14 l018F_1D22 l018F_1D2C l018F_1D14 l018F_1D14 l018F_1D14 l018F_1CE4 l018F_1CE4 l018F_1CE4 l018F_1CEC l018F_1CF4 l018F_1CFC l018F_1D04 l018F_1D0C l018F_1CE4 l018F_1CE4 l018F_1CE4 l018F_1CE4 l018F_1CE4 l018F_1D1E l018F_1CE4 l018F_1D14 l018F_1D1E }
	// succ:  l018F_1CE4 l018F_1CEC l018F_1CF4 l018F_1CFC l018F_1D04 l018F_1D0C l018F_1D0C l018F_1D0C l018F_1D14 l018F_1D14 l018F_1D1E l018F_1D1E l018F_1D1E l018F_1D0C l018F_1D14 l018F_1D22 l018F_1D2C l018F_1D14 l018F_1D14 l018F_1D14 l018F_1CE4 l018F_1CE4 l018F_1CE4 l018F_1CEC l018F_1CF4 l018F_1CFC l018F_1D04 l018F_1D0C l018F_1CE4 l018F_1CE4 l018F_1CE4 l018F_1CE4 l018F_1CE4 l018F_1D1E l018F_1CE4 l018F_1D14 l018F_1D1E
l018F_1CE4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0010
	// succ:  l018F_1CE7_thunk_fn0177_4D32
l018F_1CE7_thunk_fn0177_4D32:
	call fn0177_4D32 (retsize: 0;)
	return
	// succ:  fn018F_1C7A_exit
l018F_1CEC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	// succ:  l018F_1CEC_thunk_fn0177_4CEF
l018F_1CEC_thunk_fn0177_4CEF:
	call fn0177_4CEF (retsize: 0;)
	return
	// succ:  fn018F_1C7A_exit
l018F_1CF4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0002
	// succ:  l018F_1CF7_thunk_fn0177_4D32
l018F_1CF7_thunk_fn0177_4D32:
	call fn0177_4D32 (retsize: 0;)
	return
	// succ:  fn018F_1C7A_exit
l018F_1CFC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	// succ:  l018F_1CFC_thunk_fn0177_4CFE
l018F_1CFC_thunk_fn0177_4CFE:
	call fn0177_4CFE (retsize: 0;)
	return
	// succ:  fn018F_1C7A_exit
l018F_1D04:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0004
	// succ:  l018F_1D07_thunk_fn0177_4D32
l018F_1D07_thunk_fn0177_4D32:
	call fn0177_4D32 (retsize: 0;)
	return
	// succ:  fn018F_1C7A_exit
l018F_1D0C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0020
	// succ:  l018F_1D0F_thunk_fn0177_4D32
l018F_1D0F_thunk_fn0177_4D32:
	call fn0177_4D32 (retsize: 0;)
	return
	// succ:  fn018F_1C7A_exit
l018F_1D14:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x0001
l018F_1D1E:
	ax = ax - ax
	SCZO = cond(ax)
	goto l018F_1D3A
	// succ:  l018F_1D3A
l018F_1D22:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0100
	dx_ax = (int32) ax
	// succ:  l018F_1D28_thunk_fn0177_4D32
l018F_1D28_thunk_fn0177_4D32:
	call fn0177_4D32 (retsize: 0;)
	return
	// succ:  fn018F_1C7A_exit
l018F_1D2C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0080
	// succ:  l018F_1D2F_thunk_fn0177_4D32
l018F_1D2F_thunk_fn0177_4D32:
	call fn0177_4D32 (retsize: 0;)
	return
	// succ:  fn018F_1C7A_exit
l018F_1D3A:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_1C7A_exit
fn018F_1C7A_exit:


// fn0177_4CEF
// Return size: 0
void fn0177_4CEF()
fn0177_4CEF_entry:
	// succ:  l0177_4CEF
l0177_4CEF:
	sp = fp
	ax = 0x0001
	goto l0177_4CF2_thunk_fn0177_4D32
	// succ:  l0177_4CF2_thunk_fn0177_4D32
l0177_4CEF:
	ax = 0x0001
	// succ:  l0177_4CEF_thunk_fn0177_4D32
l0177_4CEF_thunk_fn0177_4D32:
	call fn0177_4D32 (retsize: 0;)
	return
	// succ:  fn0177_4CEF_exit
l0177_4CF2_thunk_fn0177_4D32:
	call fn0177_4D32 (retsize: 0;)
	return
	// succ:  fn0177_4CEF_exit
fn0177_4CEF_exit:


// fn0177_4CFE
// Return size: 0
void fn0177_4CFE()
fn0177_4CFE_entry:
	// succ:  l0177_4CFE
l0177_4CFE:
	sp = fp
	v7 = Mem0[ds:bx + 0x0008 + si:byte] | bh
	Mem0[ds:bx + 0x0008 + si:byte] = v7
	SZO = cond(Mem0[ds:bx + 0x0008 + si:byte])
	C = false
	goto l0177_4D02_thunk_fn0177_4D32
	// succ:  l0177_4D02_thunk_fn0177_4D32
l0177_4CFE:
	ax = 0x0008
	goto l018F_1CFF_thunk_fn0177_4D32
	// succ:  l018F_1CFF_thunk_fn0177_4D32
l0177_4D02_thunk_fn0177_4D32:
	call fn0177_4D32 (retsize: 0;)
	return
	// succ:  fn0177_4CFE_exit
l018F_1CFF_thunk_fn0177_4D32:
	call fn0177_4D32 (retsize: 0;)
	return
	// succ:  fn0177_4CFE_exit
fn0177_4CFE_exit:


// fn0177_4D1C
// Return size: 0
void fn0177_4D1C()
fn0177_4D1C_entry:
	// succ:  l0177_4D1C
l0177_4D1C:
	sp = fp
	goto l0177_4D1C_thunk_fn0177_4D34
	// succ:  l0177_4D1C_thunk_fn0177_4D34
l0177_4D1C:
	goto l018F_1D19_thunk_fn0177_4D32
	// succ:  l018F_1D19_thunk_fn0177_4D32
l0177_4D1C_thunk_fn0177_4D34:
	call fn0177_4D34 (retsize: 0;)
	return
l0177_4D1D:
	goto fn0177_4D1C_exit
	// succ:  fn0177_4D1C_exit
l018F_1D19_thunk_fn0177_4D32:
	call fn0177_4D32 (retsize: 0;)
	return
	// succ:  fn0177_4D1C_exit
fn0177_4D1C_exit:


// fn0177_4D32
// Return size: 0
void fn0177_4D32()
fn0177_4D32_entry:
	// succ:  l018F_1D32
l018F_1D32:
	dx = dx - dx
	SCZO = cond(dx)
	// succ:  l018F_1D32_thunk_fn0177_4D34
l018F_1D32_thunk_fn0177_4D34:
	call fn0177_4D34 (retsize: 0;)
	return
	// succ:  fn0177_4D32_exit
fn0177_4D32_exit:


// fn0177_4D34
// Return size: 0
void fn0177_4D34()
fn0177_4D34_entry:
	// succ:  l018F_1D34
l018F_1D34:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2C0C (retsize: 2;)
	sp = sp + 0x0006
fn0177_4D34_exit:


// fn018F_1D44
// Return size: 4
void fn018F_1D44()
fn018F_1D44_entry:
	// succ:  l018F_1D44
l018F_1D44:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(ax - 0x0024)
	branch Test(ULE,CZ) l018F_1D5D
	// succ:  l018F_1D5A l018F_1D5D
l018F_1D5A:
	goto l018F_1E56
	// succ:  l018F_1E56
l018F_1D5D:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v11 = ax
	ax = bx
	bx = v11
	switch (ax) { l018F_1DB0 l018F_1DD0 l018F_1E04 l018F_1E1C l018F_1E34 l018F_1E4A l018F_1E4A l018F_1E4A l018F_1E54 l018F_1E54 l018F_1E54 l018F_1E54 l018F_1E54 l018F_1E4A l018F_1E54 l018F_1E54 l018F_1E54 l018F_1E54 l018F_1E54 l018F_1E54 l018F_1DB0 l018F_1DB0 l018F_1DB0 l018F_1DD0 l018F_1E04 l018F_1E1C l018F_1E34 l018F_1E4A l018F_1DB0 l018F_1DB0 l018F_1DB0 l018F_1DB0 l018F_1DB0 l018F_1E54 l018F_1DB0 l018F_1E54 l018F_1E54 }
	// succ:  l018F_1DB0 l018F_1DD0 l018F_1E04 l018F_1E1C l018F_1E34 l018F_1E4A l018F_1E4A l018F_1E4A l018F_1E54 l018F_1E54 l018F_1E54 l018F_1E54 l018F_1E54 l018F_1E4A l018F_1E54 l018F_1E54 l018F_1E54 l018F_1E54 l018F_1E54 l018F_1E54 l018F_1DB0 l018F_1DB0 l018F_1DB0 l018F_1DD0 l018F_1E04 l018F_1E1C l018F_1E34 l018F_1E4A l018F_1DB0 l018F_1DB0 l018F_1DB0 l018F_1DB0 l018F_1DB0 l018F_1E54 l018F_1DB0 l018F_1E54 l018F_1E54
l018F_1DB0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = 0x4000
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2C0C (retsize: 2;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_1DC4
	// succ:  l018F_1DC1 l018F_1DC4
l018F_1DC1:
	goto l018F_1E54
	// succ:  l018F_1E54
l018F_1DC4:
	bx = Mem0[ss:bp + 0x0006:word16]
	v18 = Mem0[ds:bx:word16] >>u 0x0001
	Mem0[ds:bx:word16] = v18
	SCZO = cond(v18)
	ax = 0x0001
	goto l018F_1E56
	// succ:  l018F_1E56
l018F_1DD0:
	si = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0400
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2C0C (retsize: 2;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_1DC4
	// succ:  l018F_1DE2 l018F_1DC4
l018F_1DE2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0002
	// succ:  l018F_1DE6
l018F_1DE6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2C48 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_1E54
	// succ:  l018F_1DEF l018F_1E54
l018F_1DEF:
	bx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ds:bx:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	cx = 0x0003
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	Mem0[ds:bx:word16] = ax
	goto l018F_1E54
	// succ:  l018F_1E54
l018F_1E04:
	si = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0800
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2C0C (retsize: 2;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_1DC4
	// succ:  l018F_1E16 l018F_1DC4
l018F_1E16:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0004
	goto l018F_1DE6
	// succ:  l018F_1DE6
l018F_1E1C:
	si = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x2000
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2C0C (retsize: 2;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_1DC4
	// succ:  l018F_1E2E l018F_1DC4
l018F_1E2E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x1000
	goto l018F_1DE6
	// succ:  l018F_1DE6
l018F_1E34:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = 0x1000
	dx_ax = (int32) ax
	// succ:  l018F_1E3B
l018F_1E3B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2C0C (retsize: 2;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_1E48
	// succ:  l018F_1E45 l018F_1E48
l018F_1E45:
	goto l018F_1DC4
	// succ:  l018F_1DC4
l018F_1E48:
	goto l018F_1E54
	// succ:  l018F_1E54
l018F_1E4A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = 0x8000
	dx = dx - dx
	SCZO = cond(dx)
	goto l018F_1E3B
	// succ:  l018F_1E3B
l018F_1E54:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l018F_1E56
l018F_1E56:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_1D44_exit
fn018F_1D44_exit:


// fn018F_1E62
// Return size: 4
void fn018F_1E62()
fn018F_1E62_entry:
	// succ:  l018F_1E62
l018F_1E62:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x010C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	si = di + 0x0022
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	Mem0[ds:0x0330:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0001)
	branch Test(NE,Z) l018F_1E8F
	// succ:  l018F_1E88_thunk_fn0177_4E8A l018F_1E88_thunk_fn0177_4E8A
l018F_1E88_thunk_fn0177_4E8A:
	call fn0177_4E8A (retsize: 0;)
	return
	// succ:  fn018F_1E62_exit
l018F_1E88_thunk_fn0177_4E8A:
	call fn0177_4E8A (retsize: 0;)
	return
	// succ:  fn018F_1E62_exit
fn018F_1E62_exit:


// fn0177_4E8A
// Return size: 0
void fn0177_4E8A()
fn0177_4E8A_entry:
	// succ:  l018F_1E8A
l018F_1E8A:
	call fn00AF_0AD6 (retsize: 4;)
	// succ:  l018F_1E8F
l018F_1E8F:
	dx = dx - dx
	SCZO = cond(dx)
	SCZO = cond(Mem0[ds:di + 0x0012:byte] - 0x00)
	branch Test(EQ,Z) l018F_1EAA
	// succ:  l018F_1E97 l018F_1EAA
l018F_1E97:
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x01)
	C = false
	branch Test(NE,Z) l018F_1EAA
	// succ:  l018F_1E9D l018F_1EAA
l018F_1E9D:
	si = si + 0x0004
	SCZO = cond(si)
	al = Mem0[ds:di + 0x0012:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx + 0x0001
	SZO = cond(dx)
	SCZO = cond(ax - dx)
	branch Test(UGT,CZ) l018F_1E97
	// succ:  l018F_1EAA l018F_1E97
l018F_1EAA:
	Mem0[ss:bp - 0x000A:word16] = si
	di = di - di
	SCZO = cond(di)
	// succ:  l018F_1EAD_thunk_fn0177_4EAE
l018F_1EAD_thunk_fn0177_4EAE:
	call fn0177_4EAE (retsize: 0;)
	return
	// succ:  fn0177_4E8A_exit
fn0177_4E8A_exit:


// fn0177_4EAE
// Return size: 0
void fn0177_4EAE()
fn0177_4EAE_entry:
	// succ:  l0177_4EAE
l0177_4EAE:
	sp = fp
	v6 = Mem0[ds:bx - 0x0582 + di:word16] - 0x0001
	Mem0[ds:bx - 0x0582 + di:word16] = v6
	SZO = cond(v6)
	dx = si
	bx = si
	al = Mem0[ds:bx + 0x0003:byte]
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0177_4EC0_thunk_fn0177_4F00
	goto l0177_4EC0_thunk_fn0177_4EC2
	// succ:  l0177_4EC0_thunk_fn0177_4EC2 l0177_4EC0_thunk_fn0177_4F00
l0177_4EAE:
	Mem0[ss:bp - 0x0006:word16] = di
	dx = si
	bx = si
	al = Mem0[ds:bx + 0x0003:byte]
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l018F_1F00
	// succ:  l0177_4EBF_thunk_fn0177_4EC2 l0177_4EBF_thunk_fn0177_4F00
l0177_4EBF_thunk_fn0177_4EC2:
	call fn0177_4EC2 (retsize: 0;)
	return
	// succ:  fn0177_4EAE_exit
l0177_4EBF_thunk_fn0177_4F00:
	call fn0177_4F00 (retsize: 0;)
	return
	// succ:  fn0177_4EAE_exit
l0177_4EC0_thunk_fn0177_4EC2:
	call fn0177_4EC2 (retsize: 0;)
	return
	// succ:  fn0177_4EAE_exit l0177_4EC0_thunk_fn0177_4EC2
l0177_4EC0_thunk_fn0177_4EC2:
	call fn0177_4EC2 (retsize: 0;)
	return
	// succ:  fn0177_4EAE_exit
l0177_4EC0_thunk_fn0177_4F00:
	call fn0177_4F00 (retsize: 0;)
	return
	// succ:  fn0177_4EAE_exit
fn0177_4EAE_exit:


// fn0177_4EC2
// Return size: 0
void fn0177_4EC2()
fn0177_4EC2_entry:
	// succ:  l018F_1EC2
l018F_1EC2:
	Mem0[ss:bp - 0x0008:word16] = si
	Mem0[ss:bp - 0x0004:word16] = di
	di = Mem0[ss:bp + 0x0006:word16]
	si = Mem0[ss:bp - 0x0004:word16]
	// succ:  l018F_1ECE
l018F_1ECE:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l018F_1ED8
	// succ:  l018F_1ED2 l018F_1ED8
l018F_1ED2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn01BF_1CC2 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l018F_1ED8
l018F_1ED8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	call fn018F_21B4 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_1EF3
	// succ:  l018F_1EE4 l018F_1EF3
l018F_1EE4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	ax = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_224C (retsize: 2;)
	sp = sp + 0x0006
	v11 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v11
	SZO = cond(v11)
	// succ:  l018F_1EF3
l018F_1EF3:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x04)
	branch Test(NE,Z) l018F_1F40
	// succ:  l018F_1EFA l018F_1F40
l018F_1EFA:
	si = Mem0[ss:bp - 0x0008:word16]
	// succ:  l018F_1EFA_thunk_fn0177_4F00
l018F_1EFA_thunk_fn0177_4F00:
	call fn0177_4F00 (retsize: 0;)
	return
	// succ:  fn0177_4EC2_exit
l018F_1F40:
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - si)
	branch Test(UGT,CZ) l018F_1ECE
	// succ:  l018F_1F46 l018F_1ECE
l018F_1F46:
	goto l018F_1EFA
	// succ:  l018F_1EFA
fn0177_4EC2_exit:


// fn0177_4F00
// Return size: 0
void fn0177_4F00()
fn0177_4F00_entry:
	// succ:  l018F_1F00
l018F_1F00:
	di = Mem0[ss:bp + 0x0006:word16]
	// succ:  l018F_1F03
l018F_1F03:
	SCZO = cond(si - 0x0001)
	branch Test(UGT,CZ) l018F_1F48
	// succ:  l018F_1F08 l018F_1F48
l018F_1F08:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l018F_1F48
	// succ:  l018F_1F0E l018F_1F48
l018F_1F0E:
	si = si - 0x0001
	SZO = cond(si)
	branch Test(NE,Z) l018F_1F55
	// succ:  l018F_1F11 l018F_1F55
l018F_1F11:
	ax = bp - 0x010C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x001B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:di + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_30A4 (retsize: 2;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	goto l018F_1F55
	// succ:  l018F_1F55
l018F_1F48:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00CF_0F08 (retsize: 4;)
	sp = sp + 0x0008
	// succ:  l018F_1F55
l018F_1F55:
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l018F_1F66
	// succ:  l018F_1F5B l018F_1F66
l018F_1F5B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l018F_1F66
l018F_1F66:
	ax = 0x0032
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1140 (retsize: 4;)
	sp = sp + 0x0004
	dx = dx - dx
	SCZO = cond(dx)
	v16 = Mem0[ds:di + 0x000E:word16] + ax
	Mem0[ds:di + 0x000E:word16] = v16
	SCZO = cond(v16)
	v18 = Mem0[ds:di + 0x0010:word16] + dx + C
	Mem0[ds:di + 0x0010:word16] = v18
	SCZO = cond(v18)
	al = Mem0[ds:di + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:di + 0x0017:byte]
	// succ:  l018F_1F7E_thunk_fn0177_4F80
l018F_1F7E_thunk_fn0177_4F80:
	call fn0177_4F80 (retsize: 0;)
	return
	// succ:  fn0177_4F00_exit
fn0177_4F00_exit:


// fn0177_4F80
// Return size: 0
void fn0177_4F80()
fn0177_4F80_entry:
	// succ:  l0177_4F80
l0177_4F80:
	sp = fp
	ss = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2BAE (retsize: 2;)
	sp = sp + 0x0008
	si = ax
	al = Mem0[ds:di + 0x0015:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l018F_1FC7_in_fn0177_4F80
	goto l0177_4F97_thunk_fn0177_4F99
	// succ:  l0177_4F97_thunk_fn0177_4F99 l018F_1FC7_in_fn0177_4F80
l0177_4F80:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2BAE (retsize: 2;)
	sp = sp + 0x0008
	si = ax
	al = Mem0[ds:di + 0x0015:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l018F_1FC7
	// succ:  l0177_4F96_thunk_fn0177_4F99 l0177_4F96_thunk_fn0177_4F99
l0177_4F96_thunk_fn0177_4F99:
	call fn0177_4F99 (retsize: 0;)
	return
	// succ:  fn0177_4F80_exit
l0177_4F96_thunk_fn0177_4F99:
	call fn0177_4F99 (retsize: 0;)
	return
	// succ:  fn0177_4F80_exit
l0177_4F97_thunk_fn0177_4F99:
	call fn0177_4F99 (retsize: 0;)
	return
	// succ:  fn0177_4F80_exit l0177_4F97_thunk_fn0177_4F99
l0177_4F97_thunk_fn0177_4F99:
	call fn0177_4F99 (retsize: 0;)
	return
	// succ:  fn0177_4F80_exit
l018F_1FC7_in_fn0177_4F80:
	v21 = Mem0[ds:0x4D28:byte] - 0x0A
	Mem0[ds:0x4D28:byte] = v21
	SCZO = cond(v21)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_4F80_exit
fn0177_4F80_exit:


// fn0177_4F99
// Return size: 0
void fn0177_4F99()
fn0177_4F99_entry:
	// succ:  l018F_1F99
l018F_1F99:
	ax = si
	Mem0[ds:di + 0x0015:byte] = al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	al = Mem0[ds:di + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:di + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1628 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_1FC7
	// succ:  l018F_1FB5 l018F_1FC7
l018F_1FB5:
	al = Mem0[ds:di + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:di + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l018F_1FC7
l018F_1FC7:
	v14 = Mem0[ds:0x4D28:byte] - 0x0A
	Mem0[ds:0x4D28:byte] = v14
	SCZO = cond(v14)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_4F99_exit
fn0177_4F99_exit:


// fn018F_1FD8
// Return size: 4
void fn018F_1FD8()
fn018F_1FD8_entry:
	// succ:  l018F_1FD8
l018F_1FD8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ds:si + 0x0014:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	Mem0[ds:0x0330:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0001)
	branch Test(NE,Z) l018F_2031
	goto l018F_1FFE
	// succ:  l018F_1FFE l018F_1FFC_thunk_fn0177_5001
l018F_1FFC_thunk_fn0177_5001:
	call fn0177_5001 (retsize: 0;)
	return
	// succ:  fn018F_1FD8_exit
l018F_1FFE:
	call fn00AF_0AD6 (retsize: 4;)
fn018F_1FD8_exit:


// fn0177_5000
// Return size: 0
void fn0177_5000()
fn0177_5000_entry:
	// succ:  l0177_5000
l0177_5000:
	sp = fp
	ch = ch | Mem0[ds:bx + 0xEB00:byte]
	SZO = cond(ch)
	C = false
	goto l0177_5000_thunk_fn0177_5004
	// succ:  l0177_5000_thunk_fn0177_5004
l0177_5000:
l0177_5000_thunk_fn0177_5004:
	call fn0177_5004 (retsize: 0;)
	return
	// succ:  fn0177_5000_exit
fn0177_5000_exit:


// fn0177_5001
// Return size: 0
void fn0177_5001()
fn0177_5001_entry:
	// succ:  l0177_5001
l0177_5001:
	sp = fp
	SCZO = cond(ax - Mem0[di:word16])
	di = di + 0x0002
	bl = bl + ch
	SCZO = cond(bl)
	goto l0177_5002_thunk_fn0177_5004
	// succ:  l0177_5002_thunk_fn0177_5004
l0177_5001:
	goto l018F_2031
	// succ:  l018F_2031
l0177_5002_thunk_fn0177_5004:
	call fn0177_5004 (retsize: 0;)
	return
	// succ:  fn0177_5001_exit
l018F_2031:
	ax = di
	di = di - 0x0001
	SZO = cond(di)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_2006
	goto l018F_2038
	// succ:  l018F_2038 l018F_2036_thunk_fn0177_5006
l018F_2036_thunk_fn0177_5006:
	call fn0177_5006 (retsize: 0;)
	return
	// succ:  fn0177_5001_exit
l018F_2038:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_5001_exit
fn0177_5001_exit:


// fn0177_5004
// Return size: 0
void fn0177_5004()
fn0177_5004_entry:
	// succ:  l0177_5004
l0177_5004:
	sp = fp
	al = al - 0x90
	SCZO = cond(al)
	goto l0177_5004_thunk_fn0177_5006
	// succ:  l0177_5004_thunk_fn0177_5006
l0177_5004:
	al = al - 0x90
	SCZO = cond(al)
	goto l0177_5004_thunk_fn0177_5006
	// succ:  l0177_5004_thunk_fn0177_5006
l0177_5004_thunk_fn0177_5006:
	call fn0177_5006 (retsize: 0;)
	return
	// succ:  fn0177_5004_exit
l0177_5004_thunk_fn0177_5006:
	call fn0177_5006 (retsize: 0;)
	return
	// succ:  fn0177_5004_exit
fn0177_5004_exit:


// fn0177_5006
// Return size: 0
void fn0177_5006()
fn0177_5006_entry:
	// succ:  l018F_2006
l018F_2006:
	v4 = Mem0[ds:si + 0x0013:byte] + 0x01
	Mem0[ds:si + 0x0013:byte] = v4
	SZO = cond(v4)
	al = Mem0[ds:si + 0x0012:byte]
	SCZO = cond(Mem0[ds:si + 0x0013:byte] - al)
	branch Test(NE,Z) l018F_2015
	// succ:  l018F_2011 l018F_2015
l018F_2011:
	Mem0[ds:si + 0x0013:byte] = 0x00
	// succ:  l018F_2015
l018F_2015:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	al = Mem0[ds:si + 0x0013:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + si
	SCZO = cond(ax)
	ax = ax + 0x0022
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SCZO = cond(di - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2044 (retsize: 2;)
	sp = sp + 0x0006
fn0177_5006_exit:


// fn018F_2044
// Return size: 4
void fn018F_2044()
fn018F_2044_entry:
	// succ:  l018F_2044
l018F_2044:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	al = Mem0[ds:si + 0x0001:byte]
	al = al >>u 0x01
	SCZO = cond(al)
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2764 (retsize: 2;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ds:0x0330:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x0098:word16] - 0x0001)
	branch Test(NE,Z) l018F_207C
	// succ:  l018F_2077 l018F_207C
l018F_2077:
	call fn00AF_0AD6 (retsize: 4;)
	// succ:  l018F_207C
l018F_207C:
	bx = Mem0[ss:bp + 0x000A:word16]
	al = 0x12
	ax = Mem0[ds:bx + 0x0001:byte] *u al
	SCZO = cond(ax)
	bx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x018F:bx + 0x00C5:word16]
	call fn0017_1E2E (retsize: 4;)
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = ax
	al = Mem0[ds:si + 0x0003:byte]
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l018F_20D4
	// succ:  l018F_20A5 l018F_20D4
l018F_20A5:
	di = Mem0[ss:bp + 0x000A:word16]
	// succ:  l018F_20A5_thunk_fn0177_50C0
l018F_20A5_thunk_fn0177_50C0:
	call fn0177_50C0 (retsize: 4;)
	return
	// succ:  fn018F_2044_exit
l018F_20D4:
	di = Mem0[ss:bp + 0x000A:word16]
	// succ:  l018F_20D4_thunk_fn0177_50C0
l018F_20D4_thunk_fn0177_50C0:
	call fn0177_50C0 (retsize: 4;)
	return
	// succ:  fn018F_2044_exit
fn018F_2044_exit:


// fn0177_50C0
// Return size: 4
void fn0177_50C0()
fn0177_50C0_entry:
	// succ:  l0177_50C0
l0177_50C0:
	sp = fp
	v6 = Mem0[ds:bx:byte] | cl
	Mem0[ds:bx:byte] = v6
	SZO = cond(Mem0[ds:bx:byte])
	C = false
	SCZO = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	return
	// succ:  fn0177_50C0_exit
l0177_50C0:
	goto l018F_20C4
	// succ:  l018F_20C4
l018F_20A8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn018F_21B4 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_20DA
	// succ:  l018F_20B2 l018F_20DA
l018F_20B2:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l018F_20C4
	// succ:  l018F_20B8 l018F_20C4
l018F_20B8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0F08 (retsize: 4;)
	sp = sp + 0x0008
l018F_20C4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_224C (retsize: 2;)
	sp = sp + 0x0006
	v15 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v15
	SZO = cond(v15)
	goto l018F_20E7
	// succ:  l018F_20E7
l018F_20DA:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l018F_20E7
	// succ:  l018F_20E0 l018F_20E7
l018F_20E0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00CF_1120 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l018F_20E7
l018F_20E7:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x04)
	branch Test(EQ,Z) l018F_20F9
	// succ:  l018F_20EE l018F_20F9
l018F_20EE:
	ax = Mem0[ss:bp - 0x0008:word16]
	v17 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v17
	SZO = cond(v17)
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - ax)
	branch Test(LT,SO) l018F_20A8
	// succ:  l018F_20F9 l018F_20A8
l018F_20F9:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l018F_212B
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l018F_212B
	// succ:  l018F_20FF l018F_212B
l018F_20FF:
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0001)
	branch Test(GT,SZO) l018F_211C
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0001)
	branch Test(GT,SZO) l018F_211C
	// succ:  l018F_2105 l018F_211C
l018F_2105:
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0000)
	branch Test(NE,Z) l018F_211C
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0000)
	branch Test(NE,Z) l018F_211C
	// succ:  l018F_210B l018F_211C
l018F_210B:
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0001)
	branch Test(NE,Z) l018F_212B
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x0001)
	branch Test(NE,Z) l018F_212B
	// succ:  l018F_2111 l018F_212B
l018F_2111:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn00CF_1120 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn00CF_1120 (retsize: 4;)
	sp = sp + 0x0004
	goto l018F_212B
	// succ:  l018F_212B
l018F_211C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn00CF_0F08 (retsize: 4;)
	sp = sp + 0x0008
	// succ:  l018F_212B
l018F_212B:
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l018F_213C
	// succ:  l018F_2131 l018F_213C
l018F_2131:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l018F_213C
l018F_213C:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l018F_2159
	// succ:  l018F_2142 l018F_2159
l018F_2142:
	ax = 0x0032
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1140 (retsize: 4;)
	sp = sp + 0x0004
	dx = dx - dx
	SCZO = cond(dx)
	v20 = Mem0[ds:di + 0x000E:word16] + ax
	Mem0[ds:di + 0x000E:word16] = v20
	SCZO = cond(v20)
	v21 = Mem0[ds:di + 0x0010:word16] + dx + C
	Mem0[ds:di + 0x0010:word16] = v21
	SCZO = cond(v21)
	v22 = Mem0[ds:0x4D28:byte] - 0x0A
	Mem0[ds:0x4D28:byte] = v22
	SCZO = cond(v22)
	// succ:  l018F_2159
l018F_2159:
	al = Mem0[ds:di + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:di + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2BAE (retsize: 2;)
	sp = sp + 0x0008
	si = ax
	al = Mem0[ds:di + 0x0015:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l018F_21A8
	// succ:  l018F_217A l018F_21A8
l018F_217A:
	ax = si
	Mem0[ds:di + 0x0015:byte] = al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	al = Mem0[ds:di + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:di + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1628 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_21A8
	// succ:  l018F_2196 l018F_21A8
l018F_2196:
	al = Mem0[ds:di + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:di + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l018F_21A8
l018F_21A8:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_50C0_exit
fn0177_50C0_exit:


// fn018F_21B4
// Return size: 4
void fn018F_21B4()
fn018F_21B4_entry:
	// succ:  l018F_21B4
l018F_21B4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x0006:word16]
	SZO = cond(Mem0[ds:bx + 0x0002:byte] & 0xF0)
	C = false
	branch Test(EQ,Z) l018F_21D0
	// succ:  l018F_21CB l018F_21D0
l018F_21CB:
	ax = 0x0001
	goto l018F_2241
	// succ:  l018F_2241
l018F_21D0:
	si = Mem0[ss:bp + 0x0008:word16]
	ax = 0x03E8
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D28:byte]
	ax = (int16) al
	cx = ax
	al = 0x12
	ax = Mem0[ds:si + 0x0001:byte] *u al
	SCZO = cond(ax)
	bx = ax
	ax = Mem0[0x018F:bx + 0x00BD:word16]
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax - cx
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x4D0E:word16]
	SCZO = cond(ax)
	ax = ax + 0x0109
	SCZO = cond(ax)
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	cx = ax
	ax = Mem0[ds:0x4C60:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	bx = dx
	dx_ax = Mem0[ds:0x00A4:word16] *u ax
	SCZO = cond(dx_ax)
	cx = cx + ax
	SCZO = cond(cx)
	bx = bx + 0x00 + C
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0006:word16] = cx
	ax = 0x018F
	es = ax
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(GE,SO) l018F_2231
	// succ:  l018F_222C l018F_2231
l018F_222C:
	Mem0[ss:bp - 0x0006:word16] = 0x0001
	// succ:  l018F_2231
l018F_2231:
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - Mem0[ss:bp - 0x0006:word16])
	branch Test(ULT,C) l018F_21CB
	// succ:  l018F_223F l018F_21CB
l018F_223F:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l018F_2241
l018F_2241:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_21B4_exit
fn018F_21B4_exit:


// fn018F_224C
// Return size: 4
void fn018F_224C()
fn018F_224C_entry:
	// succ:  l018F_224C
l018F_224C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	si = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:di:word16] = 0x0000
	al = Mem0[ds:si + 0x0001:byte]
	al = al >>u 0x01
	SCZO = cond(al)
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2710 (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_227C
	// succ:  l018F_2275 l018F_227C
l018F_2275:
	Mem0[ds:di:word16] = 0x0159
	// succ:  l018F_2275_thunk_fn0177_5608
l018F_2275_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_227C:
	SZO = cond(Mem0[ds:si:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l018F_2284
	// succ:  l018F_2281 l018F_2284
l018F_2281:
	goto l018F_2338
	// succ:  l018F_2338
l018F_2284:
	al = Mem0[ds:si + 0x0001:byte]
	al = al >>u 0x01
	SCZO = cond(al)
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2764 (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_2297
	// succ:  l018F_2294 l018F_2297
l018F_2294:
	goto l018F_2338
	// succ:  l018F_2338
l018F_2297:
	cl = 0x04
	al = Mem0[ds:si + 0x0003:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax >>u cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	dl = Mem0[ds:si:byte]
	dx = dx & 0x00FE
	SZO = cond(dx)
	C = false
	ax = dx
	dx = dx >>u 0x0001
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	Mem0[ss:bp - 0x0004:word16] = dx
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_22BE
	// succ:  l018F_22B9 l018F_22BE
l018F_22B9:
	si = dx
	// succ:  l018F_22B9_thunk_fn0177_52C3
l018F_22B9_thunk_fn0177_52C3:
	call fn0177_52C3 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_22BE:
	si = dx
	di = Mem0[ss:bp - 0x0006:word16]
	// succ:  l018F_22C0_thunk_fn0177_52C3
l018F_22C0_thunk_fn0177_52C3:
	call fn0177_52C3 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2338:
	al = Mem0[ds:si + 0x0001:byte]
	al = al >>u 0x01
	SCZO = cond(al)
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = ax - 0x0005
	SCZO = cond(ax)
	SCZO = cond(ax - 0x001E)
	branch Test(ULE,CZ) l018F_234D
	// succ:  l018F_234A l018F_234D
l018F_234A:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  l018F_267D fn018F_224C_exit
l018F_234D:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v16 = ax
	ax = bx
	bx = v16
	switch (ax) { l018F_2394 l018F_2394 l018F_2394 l018F_23C2 l018F_244C l018F_267D l018F_267D l018F_267D l018F_267D l018F_24E4 l018F_267D l018F_267D l018F_267D l018F_267D l018F_267D l018F_267D l018F_267D l018F_267D l018F_2570 l018F_2570 l018F_267D l018F_2570 l018F_25C0 l018F_267D l018F_267D l018F_267D l018F_267D l018F_267D l018F_25D4 l018F_267D l018F_25E4 }
	// succ:  l018F_2394 l018F_2394 l018F_2394 l018F_23C2 l018F_244C l018F_2350_thunk_fn0177_5608 l018F_2350_thunk_fn0177_5608 l018F_2350_thunk_fn0177_5608 l018F_2350_thunk_fn0177_5608 l018F_24E4 l018F_2350_thunk_fn0177_5608 l018F_2350_thunk_fn0177_5608 l018F_2350_thunk_fn0177_5608 l018F_2350_thunk_fn0177_5608 l018F_2350_thunk_fn0177_5608 l018F_2350_thunk_fn0177_5608 l018F_2350_thunk_fn0177_5608 l018F_2350_thunk_fn0177_5608 l018F_2570 l018F_2570 l018F_2350_thunk_fn0177_5608 l018F_2570 l018F_25C0 l018F_2350_thunk_fn0177_5608 l018F_2350_thunk_fn0177_5608 l018F_2350_thunk_fn0177_5608 l018F_2350_thunk_fn0177_5608 l018F_2350_thunk_fn0177_5608 l018F_25D4 l018F_2350_thunk_fn0177_5608 l018F_25E4
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2350_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2394:
	ax = 0x0504
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cl = 0x04
	al = Mem0[ds:si + 0x0003:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax >>u cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x000A:word16]
	ax = ax - 0x0004
	SCZO = cond(ax)
	// succ:  l018F_23AC
l018F_23AC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_03E0 (retsize: 4;)
	sp = sp + 0x000C
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l018F_23B9_thunk_fn0177_5608
l018F_23B9_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_23C2:
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D0C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D0A:word16]
	cl = 0x04
	al = Mem0[ds:si + 0x0003:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax >>u cl
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A70 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	bl = Mem0[ds:si + 0x0001:byte]
	bx = bx & 0x00FE
	SZO = cond(bx)
	C = false
	di = Mem0[0x018F:bx + 0x0073:word16]
	ax = 0x018F
	es = ax
	SCZO = cond(di - 0xFFFF)
	branch Test(EQ,Z) l018F_243D
	// succ:  l018F_2405 l018F_243D
l018F_2405:
	di = di << 0x0001
	SCZO = cond(di)
	si = Mem0[ds:di + 0x4918:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l018F_243D
	// succ:  l018F_240F l018F_243D
l018F_240F:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(LE,SZO) l018F_2428
	// succ:  l018F_2413 l018F_2428
l018F_2413:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0159
	ax = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B7A (retsize: 4;)
	sp = sp + 0x0004
	goto l018F_243D
	// succ:  l018F_243D
l018F_2428:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0316
	ax = si
	al = -al
	SCZO = cond(al)
	C = al == 0x00
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B5C (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l018F_243D
l018F_243D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00F7_14F8 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l018F_2443_thunk_fn0177_5608
l018F_2443_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_244C:
	Mem0[ss:bp - 0x0008:word16] = 0x0003
	dl = Mem0[ds:si:byte]
	dx = dx & 0x00FE
	SZO = cond(dx)
	C = false
	ax = dx
	dx = dx >>u 0x0001
	SCZO = cond(dx)
	di = di - di
	SCZO = cond(di)
	Mem0[ss:bp - 0x0004:word16] = dx
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_2468
	// succ:  l018F_2464 l018F_2468
l018F_2464:
	si = dx
	goto l018F_2484
	// succ:  l018F_2484
l018F_2468:
	si = dx
	// succ:  l018F_246A
l018F_246A:
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	si = si + ax
	SCZO = cond(si)
	bx = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[ds:bx:byte]
	ax = ax & 0x00FE
	SZO = cond(ax)
	C = false
	al = al >>u 0x01
	SCZO = cond(al)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(ax - di)
	branch Test(UGT,CZ) l018F_246A
	// succ:  l018F_2484 l018F_246A
l018F_2484:
	bx = Mem0[ss:bp + 0x0008:word16]
	bl = Mem0[ds:bx + 0x0001:byte]
	bx = bx & 0x00FE
	SZO = cond(bx)
	C = false
	ax = Mem0[0x018F:bx + 0x0073:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l018F_24C5
	bx = Mem0[ss:bp + 0x0008:word16]
	bl = Mem0[ds:bx + 0x0001:byte]
	bx = bx & 0x00FE
	SZO = cond(bx)
	C = false
	ax = Mem0[0x018F:bx + 0x0073:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l018F_24C5
	// succ:  l018F_2499 l018F_24C5
l018F_2499:
	bx = Mem0[ss:bp - 0x0008:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	di = Mem0[ds:bx + 0x4918:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l018F_24C5
	bx = Mem0[ss:bp - 0x0008:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	di = Mem0[ds:bx + 0x4918:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l018F_24C5
	// succ:  l018F_24A6 l018F_24C5
l018F_24A6:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LE,SZO) l018F_24B8
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LE,SZO) l018F_24B8
	// succ:  l018F_24AA l018F_24B8
l018F_24AA:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0159
	cx = di
	si = si >> cl
	SCZO = cond(si)
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0159
	cx = di
	si = si >> cl
	SCZO = cond(si)
	goto l018F_24C5
	// succ:  l018F_24C5
l018F_24B8:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0316
	cx = di
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	si = si << cl
	SCZO = cond(si)
	// succ:  l018F_24C5
l018F_24C5:
	cl = 0x04
	bx = Mem0[ss:bp + 0x0008:word16]
	ax = Mem0[ds:bx + 0x0002:word16]
	dx = ax
	al = ah
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax >>u cl
	SCZO = cond(ax)
	ax = ax + 0x0004
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	si = -si
	SCZO = cond(si)
	C = si == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	dx = dx & 0x000F
	SZO = cond(dx)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	// succ:  l018F_24DF_thunk_fn0177_5608
l018F_24DF_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_24E4:
	cl = 0x04
	al = Mem0[ds:si + 0x0003:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax >>u cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	dl = Mem0[ds:si:byte]
	dx = dx & 0x00FE
	SZO = cond(dx)
	C = false
	ax = dx
	dx = dx >>u 0x0001
	SCZO = cond(dx)
	di = di - di
	SCZO = cond(di)
	Mem0[ss:bp - 0x0004:word16] = dx
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_2508
	// succ:  l018F_2503 l018F_2508
l018F_2503:
	si = dx
	goto l018F_2523
	// succ:  l018F_2523
l018F_2508:
	si = dx
	// succ:  l018F_250A
l018F_250A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	si = si + ax
	SCZO = cond(si)
	bx = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[ds:bx:byte]
	ax = ax & 0x00FE
	SZO = cond(ax)
	C = false
	al = al >>u 0x01
	SCZO = cond(al)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(ax - di)
	branch Test(UGT,CZ) l018F_250A
	// succ:  l018F_2523 l018F_250A
l018F_2523:
	bx = Mem0[ss:bp + 0x0008:word16]
	bl = Mem0[ds:bx + 0x0001:byte]
	bx = bx & 0x00FE
	SZO = cond(bx)
	C = false
	ax = Mem0[0x018F:bx + 0x0073:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l018F_2563
	// succ:  l018F_2538 l018F_2563
l018F_2538:
	bx = Mem0[ss:bp - 0x0008:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	di = Mem0[ds:bx + 0x4918:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l018F_2563
	// succ:  l018F_2545 l018F_2563
l018F_2545:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LE,SZO) l018F_2556
	// succ:  l018F_2549 l018F_2556
l018F_2549:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0159
	cx = di
	si = si >> cl
	SCZO = cond(si)
	goto l018F_2563
	// succ:  l018F_2563
l018F_2556:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0316
	cx = di
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	si = si << cl
	SCZO = cond(si)
	// succ:  l018F_2563
l018F_2563:
	ax = 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	si = -si
	SCZO = cond(si)
	C = si == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l018F_256A_thunk_fn0177_5608
l018F_256A_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_2570:
	bx = Mem0[ss:bp + 0x000A:word16]
	di = Mem0[ds:bx + 0x0002:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	bl = Mem0[ds:bx + 0x0001:byte]
	bx = bx & 0x00FE
	SZO = cond(bx)
	C = false
	ax = Mem0[0x018F:bx + 0x0073:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	cx = 0x018F
	es = cx
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l018F_25BB
	// succ:  l018F_2590 l018F_25BB
l018F_2590:
	bx = Mem0[ss:bp - 0x0008:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	si = Mem0[ds:bx + 0x4918:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l018F_25BB
	// succ:  l018F_259D l018F_25BB
l018F_259D:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(LE,SZO) l018F_25AE
	// succ:  l018F_25A1 l018F_25AE
l018F_25A1:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0159
	cx = si
	di = di >> cl
	SCZO = cond(di)
	goto l018F_25BB
	// succ:  l018F_25BB
l018F_25AE:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0316
	cx = si
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	di = di << cl
	SCZO = cond(di)
	// succ:  l018F_25BB
l018F_25BB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	// succ:  l018F_25BB_thunk_fn0177_52C3
l018F_25BB_thunk_fn0177_52C3:
	call fn0177_52C3 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_25C0:
	ax = 0x0506
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0002:word16]
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	goto l018F_23AC
	// succ:  l018F_23AC
l018F_25D4:
	Mem0[ds:0x032C:word16] = 0x0039
	Mem0[ds:0x032E:word16] = 0x0258
	// succ:  l018F_25DA_thunk_fn0177_5608
l018F_25DA_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
l018F_25E4:
	cl = 0x04
	al = Mem0[ds:si + 0x0003:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax >>u cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	dl = Mem0[ds:si:byte]
	dx = dx & 0x00FE
	SZO = cond(dx)
	C = false
	// succ:  l018F_25F2_thunk_fn0177_55F6
l018F_25F2_thunk_fn0177_55F6:
	call fn0177_55F6 (retsize: 0;)
	return
	// succ:  fn018F_224C_exit
fn018F_224C_exit:


// fn0177_52C3
// Return size: 0
void fn0177_52C3()
fn0177_52C3_entry:
	// succ:  l018F_22C3
l018F_22C3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	si = si + ax
	SCZO = cond(si)
	bx = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[ds:bx:byte]
	// succ:  l018F_22D0_thunk_fn0177_52D2
l018F_22D0_thunk_fn0177_52D2:
	call fn0177_52D2 (retsize: 0;)
	return
	// succ:  fn0177_52C3_exit
fn0177_52C3_exit:


// fn0177_52D2
// Return size: 0
void fn0177_52D2()
fn0177_52D2_entry:
	// succ:  l0177_52D2
l0177_52D2:
	sp = fp
	ax = ax & 0x00FE
	SZO = cond(ax)
	C = false
	al = al >>u 0x01
	SCZO = cond(al)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(ax - di)
	branch Test(UGT,CZ) l0177_52DA_thunk_fn0177_52C3
	goto l0177_52DA_thunk_fn0177_52DC
	// succ:  l0177_52DA_thunk_fn0177_52DC l0177_52DA_thunk_fn0177_52C3
l0177_52D2:
	ax = ax & 0x00FE
	SZO = cond(ax)
	C = false
	al = al >>u 0x01
	SCZO = cond(al)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(ax - di)
	branch Test(UGT,CZ) l018F_22C3
	goto l0177_52DA_thunk_fn0177_52DC
	// succ:  l0177_52DA_thunk_fn0177_52DC l0177_52DA_thunk_fn0177_52C3
l0177_52DA_thunk_fn0177_52C3:
	call fn0177_52C3 (retsize: 0;)
	return
	// succ:  fn0177_52D2_exit
l0177_52DA_thunk_fn0177_52C3:
	call fn0177_52C3 (retsize: 0;)
	return
	// succ:  fn0177_52D2_exit
l0177_52DA_thunk_fn0177_52DC:
	call fn0177_52DC (retsize: 0;)
	return
	// succ:  fn0177_52D2_exit l0177_52DA_thunk_fn0177_52DC
l0177_52DA_thunk_fn0177_52DC:
	call fn0177_52DC (retsize: 0;)
	return
	// succ:  fn0177_52D2_exit
l0177_52DA_thunk_fn0177_52DC:
	call fn0177_52DC (retsize: 0;)
	return
	// succ:  fn0177_52D2_exit
fn0177_52D2_exit:


// fn0177_52DC
// Return size: 0
void fn0177_52DC()
fn0177_52DC_entry:
	call fn0177_52C3 (retsize: 0;)
	return
	// succ:  l018F_22DC fn0177_52DC_exit
l018F_22DC:
	bx = Mem0[ss:bp + 0x0008:word16]
	bl = Mem0[ds:bx + 0x0001:byte]
	bx = bx & 0x00FE
	SZO = cond(bx)
	C = false
	ax = Mem0[0x018F:bx + 0x0073:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l018F_231D
	// succ:  l018F_22F1 l018F_231D
l018F_22F1:
	bx = Mem0[ss:bp - 0x0008:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	di = Mem0[ds:bx + 0x4918:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l018F_231D
	// succ:  l018F_22FE l018F_231D
l018F_22FE:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LE,SZO) l018F_2310
	// succ:  l018F_2302 l018F_2310
l018F_2302:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0159
	cx = di
	si = si >> cl
	SCZO = cond(si)
	goto l018F_231D
	// succ:  l018F_231D
l018F_2310:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0316
	cx = di
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	si = si << cl
	SCZO = cond(si)
	// succ:  l018F_231D
l018F_231D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	// succ:  l018F_231E
l018F_231E:
	bx = Mem0[ss:bp + 0x000A:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_30A4 (retsize: 2;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_268A (retsize: 2;)
	sp = sp + 0x0004
	// succ:  l018F_2330_thunk_fn0177_5608
l018F_2330_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn0177_52DC_exit
fn0177_52DC_exit:


// fn0177_55F6
// Return size: 0
void fn0177_55F6()
fn0177_55F6_entry:
	// succ:  l0177_55F6
l0177_55F6:
	sp = fp
	ax = dx
	dx = dx >>u 0x0001
	SCZO = cond(dx)
	di = di - di
	SCZO = cond(di)
	Mem0[ss:bp - 0x0004:word16] = dx
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_5601_thunk_fn0177_5608
	goto l0177_5601_thunk_fn0177_5603
	// succ:  l0177_5601_thunk_fn0177_5603 l0177_5601_thunk_fn0177_5608
l0177_55F6:
	ax = dx
	dx = dx >>u 0x0001
	SCZO = cond(dx)
	di = di - di
	SCZO = cond(di)
	Mem0[ss:bp - 0x0004:word16] = dx
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_2608
	goto l0177_5601_thunk_fn0177_5603
	// succ:  l0177_5601_thunk_fn0177_5603 l0177_5601_thunk_fn0177_5608
l0177_5601_thunk_fn0177_5603:
	call fn0177_5603 (retsize: 0;)
	return
	// succ:  fn0177_55F6_exit l0177_5601_thunk_fn0177_5603
l0177_5601_thunk_fn0177_5603:
	call fn0177_5603 (retsize: 0;)
	return
	// succ:  fn0177_55F6_exit
l0177_5601_thunk_fn0177_5603:
	call fn0177_5603 (retsize: 0;)
	return
	// succ:  fn0177_55F6_exit
l0177_5601_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn0177_55F6_exit
l0177_5601_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn0177_55F6_exit
fn0177_55F6_exit:


// fn0177_5603
// Return size: 0
void fn0177_5603()
fn0177_5603_entry:
	// succ:  l018F_2603
l018F_2603:
	si = dx
	// succ:  l018F_2603_thunk_fn0177_5608
l018F_2603_thunk_fn0177_5608:
	call fn0177_5608 (retsize: 0;)
	return
	// succ:  fn0177_5603_exit
fn0177_5603_exit:


// fn0177_5608
// Return size: 0
void fn0177_5608()
fn0177_5608_entry:
	// succ:  l018F_2608
l018F_2608:
	si = dx
	// succ:  l018F_260A
l018F_260A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	si = si + ax
	SCZO = cond(si)
	bx = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[ds:bx:byte]
	ax = ax & 0x00FE
	SZO = cond(ax)
	C = false
	al = al >>u 0x01
	SCZO = cond(al)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(ax - di)
	branch Test(UGT,CZ) l018F_260A
	// succ:  l018F_2623 l018F_260A
l018F_2623:
	bx = Mem0[ss:bp + 0x0008:word16]
	bl = Mem0[ds:bx + 0x0001:byte]
	bx = bx & 0x00FE
	SZO = cond(bx)
	C = false
	ax = Mem0[0x018F:bx + 0x0073:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l018F_2663
	bx = Mem0[ss:bp + 0x0008:word16]
	bl = Mem0[ds:bx + 0x0001:byte]
	bx = bx & 0x00FE
	SZO = cond(bx)
	C = false
	ax = Mem0[0x018F:bx + 0x0073:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l018F_2663
	// succ:  l018F_2638 l018F_2663
l018F_2638:
	bx = Mem0[ss:bp - 0x0008:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	di = Mem0[ds:bx + 0x4918:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l018F_2663
	bx = Mem0[ss:bp - 0x0008:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	di = Mem0[ds:bx + 0x4918:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l018F_2663
	// succ:  l018F_2645 l018F_2663
l018F_2645:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LE,SZO) l018F_2656
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(LE,SZO) l018F_2656
	// succ:  l018F_2649 l018F_2656
l018F_2649:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0159
	cx = di
	si = si >> cl
	SCZO = cond(si)
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0159
	cx = di
	si = si >> cl
	SCZO = cond(si)
	goto l018F_2663
	// succ:  l018F_2663
l018F_2656:
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = 0x0316
	cx = di
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	si = si << cl
	SCZO = cond(si)
	// succ:  l018F_2663
l018F_2663:
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	si = -si
	SCZO = cond(si)
	C = si == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[ds:bx + 0x0002:byte]
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	// succ:  l018F_2673
l018F_2673:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l018F_2674
l018F_2674:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_118E (retsize: 4;)
	sp = sp + 0x0008
	// succ:  l018F_267D
l018F_267D:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_5608_exit
fn0177_5608_exit:


// fn018F_268A
// Return size: 4
void fn018F_268A()
fn018F_268A_entry:
	// succ:  l018F_268A
l018F_268A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = si - si
	SCZO = cond(si)
	ax = Mem0[ss:bp + 0x0008:word16]
	v10 = Mem0[ds:0x4CFC:word16] - ax
	Mem0[ds:0x4CFC:word16] = v10
	SCZO = cond(v10)
	SCZO = cond(Mem0[ds:0x4CFC:word16] - si)
	branch Test(GT,SZO) l018F_26C9
	// succ:  l018F_26A7 l018F_26C9
l018F_26A7:
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1E96 (retsize: 4;)
	sp = sp + 0x0002
	ax = 0x4D8E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	si = 0x0001
	// succ:  l018F_26C9
l018F_26C9:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	ax = si
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_268A_exit
fn018F_268A_exit:


// fn018F_2710
// Return size: 4
void fn018F_2710()
fn018F_2710_entry:
	// succ:  l018F_2710
l018F_2710:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	si = Mem0[0x018F:bx + 0x0073:word16]
	SCZO = cond(si - 0xFFFF)
	branch Test(EQ,Z) l018F_2756
	// succ:  l018F_2730 l018F_2756
l018F_2730:
	ax = di
	ax = ax - 0x0005
	SCZO = cond(ax)
	branch Test(ULT,C) l018F_2756
	// succ:  l018F_2737 l018F_2756
l018F_2737:
	ax = ax - 0x0002
	SCZO = cond(ax)
	branch Test(ULE,CZ) l018F_2746
	// succ:  l018F_273C l018F_2746
l018F_273C:
	ax = ax - 0x0008
	SCZO = cond(ax)
	branch Test(ULT,C) l018F_2756
	// succ:  l018F_2741 l018F_2756
l018F_2741:
	ax = ax - 0x0003
	SCZO = cond(ax)
	branch Test(UGT,CZ) l018F_2756
	// succ:  l018F_2746 l018F_2756
l018F_2746:
	bx = si
	bx = bx << 0x0001
	SCZO = cond(bx)
	SCZO = cond(Mem0[ds:bx + 0x4918:word16] - 0x0000)
	branch Test(LE,SZO) l018F_2756
	// succ:  l018F_2751 l018F_2756
l018F_2751:
	ax = 0x0001
	goto l018F_2758
	// succ:  l018F_2758
l018F_2756:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l018F_2758
l018F_2758:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_2710_exit
fn018F_2710_exit:


// fn018F_2764
// Return size: 4
void fn018F_2764()
fn018F_2764_entry:
	// succ:  l018F_2764
l018F_2764:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax - 0x0024)
	branch Test(UGT,CZ) l018F_27CC
	goto l018F_2779
	// succ:  l018F_2779 l018F_2777_thunk_fn0177_57CC
l018F_2777_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_2779:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v10 = ax
	ax = bx
	bx = v10
	switch (ax) { l018F_27CC l018F_27CC l018F_27CC l018F_27CC l018F_27CC l018F_27D2 l018F_27D2 l018F_27D2 l018F_27D2 l018F_27D2 l018F_27D2 l018F_27D2 l018F_27D2 l018F_27CC l018F_27D2 l018F_27D2 l018F_27D2 l018F_27D2 l018F_27D2 l018F_27D2 l018F_27CC l018F_27CC l018F_27CC l018F_27CC l018F_27CC l018F_27CC l018F_27CC l018F_27CC l018F_27CC l018F_27CC l018F_27CC l018F_27CC l018F_27CC l018F_27D2 l018F_27CC l018F_27D2 l018F_27CC }
	// succ:  l018F_277C_thunk_fn0177_57CC l018F_277C_thunk_fn0177_57CC l018F_277C_thunk_fn0177_57CC l018F_277C_thunk_fn0177_57CC l018F_277C_thunk_fn0177_57CC l018F_27D2 l018F_27D2 l018F_27D2 l018F_27D2 l018F_27D2 l018F_27D2 l018F_27D2 l018F_27D2 l018F_277C_thunk_fn0177_57CC l018F_27D2 l018F_27D2 l018F_27D2 l018F_27D2 l018F_27D2 l018F_27D2 l018F_277C_thunk_fn0177_57CC l018F_277C_thunk_fn0177_57CC l018F_277C_thunk_fn0177_57CC l018F_277C_thunk_fn0177_57CC l018F_277C_thunk_fn0177_57CC l018F_277C_thunk_fn0177_57CC l018F_277C_thunk_fn0177_57CC l018F_277C_thunk_fn0177_57CC l018F_277C_thunk_fn0177_57CC l018F_277C_thunk_fn0177_57CC l018F_277C_thunk_fn0177_57CC l018F_277C_thunk_fn0177_57CC l018F_277C_thunk_fn0177_57CC l018F_27D2 l018F_277C_thunk_fn0177_57CC l018F_27D2 l018F_277C_thunk_fn0177_57CC
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_277C_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
l018F_27D2:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l018F_27D2_thunk_fn0177_57CC
l018F_27D2_thunk_fn0177_57CC:
	call fn0177_57CC (retsize: 0;)
	return
	// succ:  fn018F_2764_exit
fn018F_2764_exit:


// fn0177_57CC
// Return size: 0
void fn0177_57CC()
fn0177_57CC_entry:
	// succ:  l018F_27CC
l018F_27CC:
	ax = 0x0001
	// succ:  l018F_27D4
l018F_27D4:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_57CC_exit
fn0177_57CC_exit:


// fn018F_27DE
// Return size: 4
void fn018F_27DE()
fn018F_27DE_entry:
	// succ:  l018F_27DE
l018F_27DE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0090
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0010:word16] = 0x0032
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	ax = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax - 0x000B)
	// succ:  l018F_27FB_thunk_fn0177_57FE
l018F_27FB_thunk_fn0177_57FE:
	call fn0177_57FE (retsize: 0;)
	return
	// succ:  fn018F_27DE_exit
fn018F_27DE_exit:


// fn0177_57FE
// Return size: 0
void fn0177_57FE()
fn0177_57FE_entry:
	// succ:  l0177_57FE
l0177_57FE:
	sp = fp
	branch Test(ULE,CZ) l0177_57FE_thunk_fn0177_5803
	goto l0177_57FE_thunk_fn0177_5800
	// succ:  l0177_57FE_thunk_fn0177_5800 l0177_57FE_thunk_fn0177_5803
l0177_57FE:
	branch Test(ULE,CZ) l018F_2803
	goto l0177_57FE_thunk_fn0177_5800
	// succ:  l0177_57FE_thunk_fn0177_5800 l0177_57FE_thunk_fn0177_5803
l0177_57FE_thunk_fn0177_5800:
	call fn0177_5800 (retsize: 0;)
	return
	// succ:  fn0177_57FE_exit l0177_57FE_thunk_fn0177_5800
l0177_57FE_thunk_fn0177_5800:
	call fn0177_5800 (retsize: 0;)
	return
	// succ:  fn0177_57FE_exit
l0177_57FE_thunk_fn0177_5800:
	call fn0177_5800 (retsize: 0;)
	return
	// succ:  fn0177_57FE_exit
l0177_57FE_thunk_fn0177_5803:
	call fn0177_5803 (retsize: 0;)
	return
	// succ:  fn0177_57FE_exit
l0177_57FE_thunk_fn0177_5803:
	call fn0177_5803 (retsize: 0;)
	return
	// succ:  fn0177_57FE_exit
fn0177_57FE_exit:


// fn0177_5800
// Return size: 0
void fn0177_5800()
fn0177_5800_entry:
	// succ:  l018F_2800
l018F_2800:
	call fn0177_5803 (retsize: 0;)
	return
	// succ:  l018F_2A41 fn0177_5800_exit
l018F_2A41:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn00F7_1140 (retsize: 4;)
	sp = sp + 0x0004
	dx = dx - dx
	SCZO = cond(dx)
	bx = Mem0[ss:bp + 0x0008:word16]
	v10 = Mem0[ds:bx + 0x000E:word16] + ax
	Mem0[ds:bx + 0x000E:word16] = v10
	SCZO = cond(v10)
	v12 = Mem0[ds:bx + 0x0010:word16] + dx + C
	Mem0[ds:bx + 0x0010:word16] = v12
	SCZO = cond(v12)
	ax = Mem0[ss:bp - 0x0006:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_5800_exit
fn0177_5800_exit:


// fn0177_5803
// Return size: 0
void fn0177_5803()
fn0177_5803_entry:
	// succ:  l018F_2803
l018F_2803:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v4 = ax
	ax = bx
	bx = v4
	switch (ax) { l018F_2824 l018F_2A41 l018F_286E l018F_289C l018F_28DA l018F_291A l018F_295A l018F_299A l018F_29BE l018F_29EA l018F_2A20 l018F_2A26 }
	// succ:  l018F_2824 l018F_2806_thunk_fn0177_5800 l018F_286E l018F_289C l018F_28DA l018F_291A l018F_295A l018F_299A l018F_29BE l018F_29EA l018F_2A20 l018F_2A26
l018F_2806_thunk_fn0177_5800:
	call fn0177_5800 (retsize: 0;)
	return
	// succ:  fn0177_5803_exit
l018F_2824:
	si = Mem0[ss:bp + 0x0008:word16]
	ax = bp - 0x0090
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x002B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x01FE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01D7_1602 (retsize: 4;)
	sp = sp + 0x000A
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x01FE
	// succ:  l018F_2860
l018F_2860:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_268A (retsize: 2;)
	sp = sp + 0x0004
	v14 = Mem0[ds:0x4D28:byte] - 0x0A
	Mem0[ds:0x4D28:byte] = v14
	SCZO = cond(v14)
	// succ:  l018F_2865_thunk_fn0177_5800
l018F_2865_thunk_fn0177_5800:
	call fn0177_5800 (retsize: 0;)
	return
	// succ:  fn0177_5803_exit
l018F_286E:
	si = Mem0[ss:bp + 0x0008:word16]
	ax = Mem0[ds:si + 0x0004:word16]
	SCZO = cond(Mem0[ds:si + 0x0002:word16] - ax)
	branch Test(LT,SO) l018F_287C
	// succ:  l018F_2879 l018F_287C
l018F_2879:
	call fn0177_5800 (retsize: 0;)
	return
	// succ:  l018F_2A41 fn0177_5803_exit
l018F_287C:
	cx = 0x0005
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0008)
	branch Test(GE,SO) l018F_288A
	// succ:  l018F_2887 l018F_288A
l018F_2887:
	ax = 0x0008
	// succ:  l018F_288A
l018F_288A:
	cx = Mem0[ds:si + 0x0004:word16]
	cx = cx - Mem0[ds:si + 0x0002:word16]
	SCZO = cond(cx)
	SCZO = cond(cx - ax)
	branch Test(LE,SZO) l018F_2896
	// succ:  l018F_2894 l018F_2896
l018F_2894:
	cx = ax
	// succ:  l018F_2896
l018F_2896:
	v23 = Mem0[ds:si + 0x0002:word16] + cx
	Mem0[ds:si + 0x0002:word16] = v23
	SCZO = cond(v23)
	// succ:  l018F_2896_thunk_fn0177_5800
l018F_2896_thunk_fn0177_5800:
	call fn0177_5800 (retsize: 0;)
	return
	// succ:  fn0177_5803_exit
l018F_289C:
	si = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	cl = Mem0[ds:si + 0x0017:byte]
	ch = ch - ch
	SCZO = cond(ch)
	Mem0[ss:bp - 0x0004:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn01D7_122C (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	// succ:  l018F_28C4
l018F_28C4:
	sp = sp - 0x0002
	call fn018F_18FE (retsize: 2;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn01BF_1418 (retsize: 4;)
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0010:word16] = 0x0000
	// succ:  l018F_28D2_thunk_fn0177_5800
l018F_28D2_thunk_fn0177_5800:
	call fn0177_5800 (retsize: 0;)
	return
	// succ:  fn0177_5803_exit
l018F_28DA:
	si = Mem0[ss:bp + 0x0008:word16]
	ax = bp - 0x0090
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x002B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x020A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01D7_1602 (retsize: 4;)
	sp = sp + 0x000A
	ax = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x020A
	goto l018F_2860
	// succ:  l018F_2860
l018F_291A:
	si = Mem0[ss:bp + 0x0008:word16]
	ax = bp - 0x0090
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x002B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x020B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01D7_1602 (retsize: 4;)
	sp = sp + 0x000A
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x020B
	goto l018F_2860
	// succ:  l018F_2860
l018F_295A:
	si = Mem0[ss:bp + 0x0008:word16]
	ax = bp - 0x0090
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x002B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x020C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01D7_1602 (retsize: 4;)
	sp = sp + 0x000A
	ax = 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x020C
	goto l018F_2860
	// succ:  l018F_2860
l018F_299A:
	si = Mem0[ss:bp + 0x0008:word16]
	ax = Mem0[ds:si + 0x0004:word16]
	SCZO = cond(Mem0[ds:si + 0x0002:word16] - ax)
	branch Test(LT,SO) l018F_29A8
	// succ:  l018F_29A5 l018F_29A8
l018F_29A5:
	call fn0177_5800 (retsize: 0;)
	return
	// succ:  l018F_2A41 fn0177_5803_exit
l018F_29A8:
	ax = ax << 0x0001
	SCZO = cond(ax)
	cx = 0x0005
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0010)
	branch Test(LT,SO) l018F_29B8
	// succ:  l018F_29B5 l018F_29B8
l018F_29B5:
	goto l018F_288A
	// succ:  l018F_288A
l018F_29B8:
	ax = 0x0010
	goto l018F_288A
	// succ:  l018F_288A
l018F_29BE:
	si = Mem0[ss:bp + 0x0008:word16]
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	cl = Mem0[ds:si + 0x0017:byte]
	ch = ch - ch
	SCZO = cond(ch)
	Mem0[ss:bp - 0x0004:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn01D7_2006 (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	goto l018F_28C4
	// succ:  l018F_28C4
l018F_29EA:
	ax = 0x0040
	// succ:  l018F_29EA_thunk_fn0177_59EC
l018F_29EA_thunk_fn0177_59EC:
	call fn0177_59EC (retsize: 0;)
	return
	// succ:  fn0177_5803_exit
l018F_2A20:
	ax = 0x007C
	goto l018F_2A29
	// succ:  l018F_2A29
l018F_2A26:
	ax = 0x007D
	// succ:  l018F_2A29
l018F_2A29:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_070A (retsize: 4;)
	sp = sp + 0x000C
	Mem0[ss:bp - 0x0006:word16] = 0x0001
	// succ:  l018F_2A3C_thunk_fn0177_5800
l018F_2A3C_thunk_fn0177_5800:
	call fn0177_5800 (retsize: 0;)
	return
	// succ:  fn0177_5803_exit
fn0177_5803_exit:


// fn0177_59EC
// Return size: 0
void fn0177_59EC()
fn0177_59EC_entry:
	// succ:  l0177_59EC
l0177_59EC:
	sp = fp
	v7 = Mem0[ds:bx - 0x0047 + si:byte] + dl
	Mem0[ds:bx - 0x0047 + si:byte] = v7
	SCZO = cond(v7)
	al = al ^ Mem0[ds:bx + si:byte]
	SZO = cond(al)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0167_070A (retsize: 4;)
	sp = sp + 0x000C
	ax = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0040
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFCE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	goto l018F_2A41_in_fn0177_59EC
	// succ:  l018F_2A41_in_fn0177_59EC
l0177_59EC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0032
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0167_070A (retsize: 4;)
	sp = sp + 0x000C
	ax = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0040
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFCE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	// succ:  l0177_5A17_thunk_fn0177_5800
l0177_5A17_thunk_fn0177_5800:
	call fn0177_5800 (retsize: 0;)
	return
	// succ:  fn0177_59EC_exit
l018F_2A41_in_fn0177_59EC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn00F7_1140 (retsize: 4;)
	sp = sp + 0x0004
	dx = dx - dx
	SCZO = cond(dx)
	bx = Mem0[ss:bp + 0x0008:word16]
	v15 = Mem0[ds:bx + 0x000E:word16] + ax
	Mem0[ds:bx + 0x000E:word16] = v15
	SCZO = cond(v15)
	v17 = Mem0[ds:bx + 0x0010:word16] + dx + C
	Mem0[ds:bx + 0x0010:word16] = v17
	SCZO = cond(v17)
	ax = Mem0[ss:bp - 0x0006:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_59EC_exit
fn0177_59EC_exit:


// fn018F_2A66
// Return size: 4
void fn018F_2A66()
fn018F_2A66_entry:
	// succ:  l018F_2A66
l018F_2A66:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4154:word16] - 0x0000)
	branch Test(NE,Z) l018F_2A7F
	// succ:  l018F_2A7C l018F_2A7F
l018F_2A7C:
	goto l018F_2B09
	// succ:  l018F_2B09
l018F_2A7F:
	bx = Mem0[ds:0x4154:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	si = 0x0004
	si = si + ax
	SCZO = cond(si)
	bx = ax
	di = Mem0[ds:bx:word16]
	cx = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + cx
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	di = di + 0x0004
	SCZO = cond(di)
	goto l018F_2AAD
	// succ:  l018F_2AAD
l018F_2AA2:
	ax = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(Mem0[ds:si + 0x0004:word16] - ax)
	branch Test(EQ,Z) l018F_2AB1
	// succ:  l018F_2AAA l018F_2AB1
l018F_2AAA:
	si = si + 0x000A
	SCZO = cond(si)
	// succ:  l018F_2AAD
l018F_2AAD:
	SCZO = cond(di - si)
	branch Test(NE,Z) l018F_2AA2
	// succ:  l018F_2AB1 l018F_2AA2
l018F_2AB1:
	SCZO = cond(di - si)
	branch Test(EQ,Z) l018F_2B09
	// succ:  l018F_2AB5 l018F_2B09
l018F_2AB5:
	SCZO = cond(Mem0[ds:si + 0x0002:word16] - 0x0090)
	branch Test(EQ,Z) l018F_2AAD
	// succ:  l018F_2ABC l018F_2AAD
l018F_2ABC:
	bx = Mem0[ss:bp - 0x0004:word16]
	v14 = Mem0[ds:bx:word16] - 0x0001
	Mem0[ds:bx:word16] = v14
	SZO = cond(v14)
	branch Test(EQ,Z) l018F_2AFA
	// succ:  l018F_2AC3 l018F_2AFA
l018F_2AC3:
	ax = si
	ax = ax - di
	SCZO = cond(ax)
	SCZO = cond(ax - 0xFFF6)
	branch Test(EQ,Z) l018F_2AAD
	// succ:  l018F_2ACC l018F_2AAD
l018F_2ACC:
	ax = Mem0[ds:si:word16]
	v15 = Mem0[ds:si + 0x000A:word16] + ax
	Mem0[ds:si + 0x000A:word16] = v15
	SCZO = cond(v15)
	ax = di
	ax = ax - si
	SCZO = cond(ax)
	cx = 0x000A
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax - cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_0932 (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	di = di - 0x000A
	SCZO = cond(di)
	goto l018F_2AAD
	// succ:  l018F_2AAD
l018F_2AFA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4154:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:0x4154:word16] = 0x0000
	// succ:  l018F_2B09
l018F_2B09:
	SCZO = cond(Mem0[ds:0x4DE0:word16] - 0x0000)
	branch Test(EQ,Z) l018F_2B2E
	// succ:  l018F_2B10 l018F_2B2E
l018F_2B10:
	ax = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(Mem0[ds:0x4DE4:word16] - ax)
	branch Test(NE,Z) l018F_2B2E
	// succ:  l018F_2B19 l018F_2B2E
l018F_2B19:
	ax = 0x4DE0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4154
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DE2:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_01A4 (retsize: 4;)
	sp = sp + 0x0008
	// succ:  l018F_2B2E
l018F_2B2E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_2A66_exit
fn018F_2A66_exit:


// fn018F_2B3A
// Return size: 4
void fn018F_2B3A()
fn018F_2B3A_entry:
	// succ:  l018F_2B3A
l018F_2B3A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4DE0:word16] - 0x0000)
	branch Test(EQ,Z) l018F_2B59
	// succ:  l018F_2B50 l018F_2B59
l018F_2B50:
	ax = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(Mem0[ds:0x4DE4:word16] - ax)
	branch Test(EQ,Z) l018F_2B9B
	// succ:  l018F_2B59 l018F_2B9B
l018F_2B59:
	SCZO = cond(Mem0[ds:0x4154:word16] - 0x0000)
	branch Test(EQ,Z) l018F_2BA0
	// succ:  l018F_2B60 l018F_2BA0
l018F_2B60:
	si = Mem0[ds:0x4154:word16]
	ax = Mem0[ds:si:word16]
	cx = ax
	ax = ax + 0x0004
	SCZO = cond(ax)
	bx = ax
	dx = cx
	si = dx
	di = Mem0[ds:si:word16]
	si = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + si
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	dx = dx + di
	SCZO = cond(dx)
	dx = dx + 0x0004
	SCZO = cond(dx)
	cx = dx
	SCZO = cond(dx - ax)
	branch Test(EQ,Z) l018F_2B97
	// succ:  l018F_2B88 l018F_2B97
l018F_2B88:
	dx = Mem0[ss:bp + 0x0006:word16]
	// succ:  l018F_2B8B
l018F_2B8B:
	SCZO = cond(Mem0[ds:bx + 0x0004:word16] - dx)
	branch Test(EQ,Z) l018F_2B97
	// succ:  l018F_2B90 l018F_2B97
l018F_2B90:
	bx = bx + 0x000A
	SCZO = cond(bx)
	SCZO = cond(bx - cx)
	branch Test(NE,Z) l018F_2B8B
	// succ:  l018F_2B97 l018F_2B8B
l018F_2B97:
	SCZO = cond(cx - bx)
	branch Test(EQ,Z) l018F_2BA0
	// succ:  l018F_2B9B l018F_2BA0
l018F_2B9B:
	ax = 0x0001
	goto l018F_2BA2
	// succ:  l018F_2BA2
l018F_2BA0:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l018F_2BA2
l018F_2BA2:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_2B3A_exit
fn018F_2B3A_exit:


// fn018F_2BAE
// Return size: 4
void fn018F_2BAE()
fn018F_2BAE_entry:
	// succ:  l018F_2BAE
l018F_2BAE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx - Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(bx)
	bx = bx + 0x0003
	SCZO = cond(bx)
	di = Mem0[ss:bp + 0x0008:word16]
	di = di - Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(di)
	di = di + 0x0003
	SCZO = cond(di)
	SCZO = cond(di - 0x0006)
	branch Test(LE,SZO) l018F_2BD8
	// succ:  l018F_2BD3 l018F_2BD8
l018F_2BD3:
	di = 0x0006
	goto l018F_2BDE
	// succ:  l018F_2BDE
l018F_2BD8:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(GE,SO) l018F_2BDE
	// succ:  l018F_2BDC l018F_2BDE
l018F_2BDC:
	di = di - di
	SCZO = cond(di)
	// succ:  l018F_2BDE
l018F_2BDE:
	SCZO = cond(bx - 0x0006)
	branch Test(LE,SZO) l018F_2BE8
	// succ:  l018F_2BE3 l018F_2BE8
l018F_2BE3:
	bx = 0x0006
	goto l018F_2BEE
	// succ:  l018F_2BEE
l018F_2BE8:
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(GE,SO) l018F_2BEE
	// succ:  l018F_2BEC l018F_2BEE
l018F_2BEC:
	bx = bx - bx
	SCZO = cond(bx)
	// succ:  l018F_2BEE
l018F_2BEE:
	ax = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	di = di + bx
	SCZO = cond(di)
	al = Mem0[0x018F:di + 0x0627:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_2BAE_exit
fn018F_2BAE_exit:


// fn018F_2C0C
// Return size: 4
void fn018F_2C0C()
fn018F_2C0C_entry:
	// succ:  l018F_2C0C
l018F_2C0C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x000A:word16]
	al = 0x12
	ax = Mem0[ds:bx + 0x0001:byte] *u al
	SCZO = cond(ax)
	bx = ax
	ax = Mem0[0x018F:bx + 0x00C7:word16]
	dx = Mem0[0x018F:bx + 0x00C9:word16]
	ax = ax & Mem0[ss:bp + 0x0006:word16]
	SZO = cond(ax)
	C = false
	dx = dx & Mem0[ss:bp + 0x0008:word16]
	SZO = cond(dx)
	C = false
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l018F_2C3C
	// succ:  l018F_2C37 l018F_2C3C
l018F_2C37:
	ax = 0x0001
	goto l018F_2C3E
	// succ:  l018F_2C3E
l018F_2C3C:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l018F_2C3E
l018F_2C3E:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_2C0C_exit
fn018F_2C0C_exit:


// fn018F_2C48
// Return size: 4
void fn018F_2C48()
fn018F_2C48_entry:
	// succ:  l018F_2C48
l018F_2C48:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0008:word16]
	al = 0x12
	ax = Mem0[ds:bx + 0x0001:byte] *u al
	SCZO = cond(ax)
	bx = ax
	ax = Mem0[0x018F:bx + 0x00CB:word16]
	ax = ax & Mem0[ss:bp + 0x0006:word16]
	SZO = cond(ax)
	C = false
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_2C48_exit
fn018F_2C48_exit:


// fn018F_2C98
// Return size: 4
void fn018F_2C98()
fn018F_2C98_entry:
	// succ:  l018F_2C98
l018F_2C98:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0006:word16]
	al = 0x12
	ax = Mem0[ds:bx + 0x0001:byte] *u al
	SCZO = cond(ax)
	bx = ax
	al = Mem0[0x018F:bx + 0x00C2:byte]
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_2C98_exit
fn018F_2C98_exit:


// fn018F_2CBE
// Return size: 4
void fn018F_2CBE()
fn018F_2CBE_entry:
	// succ:  l018F_2CBE
l018F_2CBE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0006:word16]
	al = 0x12
	ax = Mem0[ds:bx + 0x0001:byte] *u al
	SCZO = cond(ax)
	bx = ax
	ax = Mem0[0x018F:bx + 0x00BF:word16]
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_2CBE_exit
fn018F_2CBE_exit:


// fn018F_2D0A
// Return size: 4
void fn018F_2D0A()
fn018F_2D0A_entry:
	// succ:  l018F_2D0A
l018F_2D0A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ds:0x4C60:word16]
	dx_ax = Mem0[ds:0x00AC:word16] *u ax
	SCZO = cond(dx_ax)
	cx = 0x0064
	cx = cx - ax
	SCZO = cond(cx)
	bx = Mem0[ss:bp + 0x0006:word16]
	al = 0x12
	ax = Mem0[ds:bx + 0x0001:byte] *u al
	SCZO = cond(ax)
	bx = ax
	ax = Mem0[0x018F:bx + 0x00C3:word16]
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	cx = 0x0064
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % cx
	ax = dx_ax /u cx
	SCZO = cond(ax)
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_2D0A_exit
fn018F_2D0A_exit:


// fn018F_2D46
// Return size: 4
void fn018F_2D46()
fn018F_2D46_entry:
	// succ:  l018F_2D46
l018F_2D46:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x8000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_2C0C (retsize: 2;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_2D8A
	// succ:  l018F_2D67 l018F_2D8A
l018F_2D67:
	SZO = cond(Mem0[ds:si + 0x000A:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l018F_2D8A
	// succ:  l018F_2D6D l018F_2D8A
l018F_2D6D:
	SCZO = cond(Mem0[ds:si + 0x0015:byte] - 0xFF)
	branch Test(EQ,Z) l018F_2D7C
	// succ:  l018F_2D73 l018F_2D7C
l018F_2D73:
	SCZO = cond(Mem0[ds:si + 0x0015:byte] - 0x04)
	branch Test(ULT,C) l018F_2D8C
	// succ:  l018F_2D79 l018F_2D8C
l018F_2D79:
	goto l018F_2D84
	// succ:  l018F_2D84
l018F_2D7C:
	al = Mem0[ds:0x4D1D:byte]
	SCZO = cond(Mem0[ds:si + 0x0017:byte] - al)
	branch Test(ULT,C) l018F_2D8A
	// succ:  l018F_2D84 l018F_2D8A
l018F_2D84:
	ax = 0x0001
	goto l018F_2D8C
	// succ:  l018F_2D8C
l018F_2D8A:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l018F_2D8C
l018F_2D8C:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_2D46_exit
fn018F_2D46_exit:


// fn018F_2D98
// Return size: 4
void fn018F_2D98()
fn018F_2D98_entry:
	// succ:  l018F_2D98
l018F_2D98:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0010
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = di - di
	SCZO = cond(di)
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_2DB9
	// succ:  l018F_2DB6 l018F_2DB9
l018F_2DB6:
	goto l018F_2EA8
	// succ:  l018F_2EA8
l018F_2DB9:
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	si = Mem0[ds:bx + 0x0071:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l018F_2DC9
	// succ:  l018F_2DC6 l018F_2DC9
l018F_2DC6:
	call fn0177_5E92 (retsize: 0;)
	return
	// succ:  l018F_2FA2 fn018F_2D98_exit
l018F_2DC9:
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	cx = ax
	al = Mem0[ds:0x4CEF:byte]
	ax = (int16) al
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	ax = ax + Mem0[ds:0x4D04:word16]
	SCZO = cond(ax)
	ax = ax + 0x001E
	SCZO = cond(ax)
	SCZO = cond(ax - cx)
	branch Test(ULT,C) l018F_2DEA
	// succ:  l018F_2DE7 l018F_2DEA
l018F_2DE7:
	call fn0177_5E8F (retsize: 0;)
	return
	// succ:  l018F_2F9A fn018F_2D98_exit
l018F_2DEA:
	Mem0[ss:bp - 0x0010:word16] = 0x0000
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = Mem0[ds:bx + 0x0008:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x002B:word16]
	Mem0[ss:bp - 0x000E:word16] = ax
	di = 0x0001
	Mem0[ss:bp - 0x000C:word16] = 0x0005
	Mem0[ss:bp - 0x0006:word16] = si
	// succ:  l018F_2E05_thunk_fn0177_5E8B
l018F_2E05_thunk_fn0177_5E8B:
	call fn0177_5E8B (retsize: 0;)
	return
	// succ:  fn018F_2D98_exit
l018F_2EA8:
	Mem0[ss:bp - 0x000E:word16] = di
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x003F:word16]
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_2EBE
	// succ:  l018F_2EBB l018F_2EBE
l018F_2EBB:
	call fn0177_5E8F (retsize: 0;)
	return
	// succ:  l018F_2F9A fn018F_2D98_exit
l018F_2EBE:
	bx = ax
	si = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:si:byte] - 0x0F)
	branch Test(EQ,Z) l018F_2ECA
	// succ:  l018F_2EC7 l018F_2ECA
l018F_2EC7:
	goto l018F_2F64
	// succ:  l018F_2F64
l018F_2ECA:
	ax = Mem0[ds:si + 0x0024:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + si
	SCZO = cond(ax)
	ax = ax + 0x0028
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	cx = si + 0x0028
	Mem0[ss:bp - 0x0004:word16] = cx
	SCZO = cond(ax - cx)
	branch Test(ULE,CZ) l018F_2F0A
	// succ:  l018F_2EEC l018F_2F0A
l018F_2EEC:
	Mem0[ss:bp - 0x0010:word16] = si
	bx = cx
	di = Mem0[ss:bp - 0x0006:word16]
	cx = Mem0[ss:bp - 0x000A:word16]
	// succ:  l018F_2EF7
l018F_2EF7:
	SCZO = cond(Mem0[ds:bx + 0x0003:word16] - 0x0000)
	branch Test(EQ,Z) l018F_2EFE
	// succ:  l018F_2EFD l018F_2EFE
l018F_2EFD:
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l018F_2EFE
l018F_2EFE:
	bx = bx + 0x0005
	SCZO = cond(bx)
	SCZO = cond(bx - cx)
	branch Test(ULT,C) l018F_2EF7
	// succ:  l018F_2F05 l018F_2EF7
l018F_2F05:
	si = Mem0[ss:bp - 0x0010:word16]
	goto l018F_2F0D
	// succ:  l018F_2F0D
l018F_2F0A:
	di = Mem0[ss:bp - 0x0006:word16]
	// succ:  l018F_2F0D
l018F_2F0D:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l018F_2F46
	// succ:  l018F_2F11 l018F_2F46
l018F_2F11:
	Mem0[ss:bp - 0x0008:word16] = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	di = ax
	ax = si + 0x0028
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(ax - Mem0[ss:bp - 0x000A:word16])
	branch Test(UGE,C) l018F_2F46
	// succ:  l018F_2F29 l018F_2F46
l018F_2F29:
	Mem0[ss:bp - 0x0010:word16] = si
	si = ax
	dx = Mem0[ss:bp - 0x0008:word16]
	cx = Mem0[ss:bp - 0x000A:word16]
	// succ:  l018F_2F34
l018F_2F34:
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - 0x0000)
	branch Test(EQ,Z) l018F_2F3F
	// succ:  l018F_2F3A l018F_2F3F
l018F_2F3A:
	dx = dx + 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - di)
	branch Test(EQ,Z) l018F_2F4C
	// succ:  l018F_2F3F l018F_2F4C
l018F_2F3F:
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - cx)
	branch Test(ULT,C) l018F_2F34
	// succ:  l018F_2F46 l018F_2F34
l018F_2F46:
	di = Mem0[ss:bp - 0x000E:word16]
	goto l018F_2F76
	// succ:  l018F_2F76
l018F_2F4C:
	di = Mem0[ds:si + 0x0003:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = si
	ax = ax - Mem0[ss:bp - 0x0010:word16]
	SCZO = cond(ax)
	ax = ax - 0x0028
	SCZO = cond(ax)
	cx = 0x0005
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	goto l018F_2F70
	// succ:  l018F_2F70
l018F_2F64:
	si = ax
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	ax = 0x0004
	// succ:  l018F_2F70
l018F_2F70:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_06D4 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l018F_2F76
l018F_2F76:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l018F_2F9A
	goto l018F_2F7A
	// succ:  l018F_2F7A l018F_2F78_thunk_fn0177_5E8F
l018F_2F78_thunk_fn0177_5E8F:
	call fn0177_5E8F (retsize: 0;)
	return
	// succ:  fn018F_2D98_exit
l018F_2F7A:
	ax = 0x02D3
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	call fn0087_04C4 (retsize: 4;)
	// succ:  l018F_2F87_thunk_fn0177_5F8A
l018F_2F87_thunk_fn0177_5F8A:
	call fn0177_5F8A (retsize: 0;)
	return
	// succ:  fn018F_2D98_exit
fn018F_2D98_exit:


// fn0177_5E8B
// Return size: 0
void fn0177_5E8B()
fn0177_5E8B_entry:
	// succ:  l0177_5E8B
l0177_5E8B:
	sp = fp
	v6 = Mem0[ss:bp + 0xF07E + di:word16] + 0x0001
	Mem0[ss:bp + 0xF07E + di:word16] = v6
	SZO = cond(v6)
	goto l0177_5E8B_thunk_fn0177_5E8F
	// succ:  l0177_5E8B_thunk_fn0177_5E8F
l0177_5E8B:
	goto l018F_2E08
	// succ:  l018F_2E08
l0177_5E8B_thunk_fn0177_5E8F:
	call fn0177_5E8F (retsize: 0;)
	return
	// succ:  fn0177_5E8B_exit
l018F_2E08:
	bx = Mem0[ss:bp - 0x000C:word16]
	bx = bx + Mem0[ds:si:word16]
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x0026:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx + 0x0012:word16]
	dx = Mem0[ds:bx + 0x0014:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l018F_2E7E
	// succ:  l018F_2E22 l018F_2E7E
l018F_2E22:
	Mem0[ss:bp - 0x0010:word16] = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x000A
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn004F_0BB8 (retsize: 4;)
	sp = sp + 0x0008
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l018F_2E43
	// succ:  l018F_2E3E l018F_2E43
l018F_2E3E:
	SCZO = cond(ax - 0x00C8)
	branch Test(ULE,CZ) l018F_2E48
	// succ:  l018F_2E43 l018F_2E48
l018F_2E43:
	dx = dx - dx
	SCZO = cond(dx)
	ax = 0x00C8
	// succ:  l018F_2E48
l018F_2E48:
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l018F_2E56
	// succ:  l018F_2E4C l018F_2E56
l018F_2E4C:
	branch Test(ULT,C) l018F_2E53
	// succ:  l018F_2E4E l018F_2E53
l018F_2E4E:
	SCZO = cond(ax - 0x0001)
	branch Test(UGE,C) l018F_2E56
	// succ:  l018F_2E53 l018F_2E56
l018F_2E53:
	ax = 0x0001
	// succ:  l018F_2E56
l018F_2E56:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_18C4 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	call fn0137_179A (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_2E76
	// succ:  l018F_2E6D l018F_2E76
l018F_2E6D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0137_179A (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l018F_2E76
l018F_2E76:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn0137_0066 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l018F_2E7E
l018F_2E7E:
	di = di + 0x0001
	SZO = cond(di)
	v18 = Mem0[ss:bp - 0x000C:word16] + 0x0005
	Mem0[ss:bp - 0x000C:word16] = v18
	SCZO = cond(v18)
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0014)
	branch Test(GT,SZO) l018F_2E8C
	// succ:  l018F_2E89 l018F_2E8C
l018F_2E89:
l018F_2E8C:
	SCZO = cond(Mem0[ss:bp - 0x0010:word16] - 0x0000)
	// succ:  l018F_2E8C_thunk_fn0177_5E8F
l018F_2E8C_thunk_fn0177_5E8F:
	call fn0177_5E8F (retsize: 0;)
	return
	// succ:  fn0177_5E8B_exit
fn0177_5E8B_exit:


// fn0177_5E8F
// Return size: 0
void fn0177_5E8F()
fn0177_5E8F_entry:
	// succ:  l0177_5E8F
l0177_5E8F:
	sp = fp
	v6 = Mem0[ds:di + 0x0003:byte] + dh
	Mem0[ds:di + 0x0003:byte] = v6
	SCZO = cond(v6)
	goto l0177_5E8F_thunk_fn0177_5E92
	// succ:  l0177_5E8F_thunk_fn0177_5E92
l0177_5E8F:
	branch Test(NE,Z) l018F_2E95
	goto l0177_5E8F_thunk_fn0177_5E92
	// succ:  l0177_5E8F_thunk_fn0177_5E92 l018F_2E95
l0177_5E8F_thunk_fn0177_5E92:
	call fn0177_5E92 (retsize: 0;)
	return
	// succ:  fn0177_5E8F_exit
l0177_5E8F_thunk_fn0177_5E92:
	call fn0177_5E92 (retsize: 0;)
	return
	// succ:  fn0177_5E8F_exit
l018F_2E95:
	ax = 0x02D2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	di = 0x0001
	// succ:  l018F_2EA2_thunk_fn0177_5F9A
l018F_2EA2_thunk_fn0177_5F9A:
	call fn0177_5F9A (retsize: 0;)
	return
	// succ:  fn0177_5E8F_exit
fn0177_5E8F_exit:


// fn0177_5E92
// Return size: 0
void fn0177_5E92()
fn0177_5E92_entry:
	// succ:  l018F_2E92
l018F_2E92:
	// succ:  l018F_2FA2
l018F_2FA2:
	ax = 0x02D4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l018F_2FB1
l018F_2FB1:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_5E92_exit
fn0177_5E92_exit:


// fn0177_5F8A
// Return size: 0
void fn0177_5F8A()
fn0177_5F8A_entry:
	// succ:  l0177_5F8A
l0177_5F8A:
	sp = fp
	v3 = Mem0[ds:bx + si:word16]
	Mem0[ds:bx + si:word16] = ax
	ax = v3
	bx = Mem0[ds:di:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l0177_5F92_thunk_fn0177_5F9A
	goto l0177_5F92_thunk_fn0177_5F94
	// succ:  l0177_5F92_thunk_fn0177_5F94 l0177_5F92_thunk_fn0177_5F9A
l0177_5F8A:
	bx = Mem0[ds:di:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l018F_2F9A
	// succ:  l0177_5F90_thunk_fn0177_5F94 l018F_2F92_thunk_fn0177_5E8F
l0177_5F90_thunk_fn0177_5F94:
	call fn0177_5F94 (retsize: 0;)
	return
	// succ:  fn0177_5F8A_exit
l0177_5F92_thunk_fn0177_5F94:
	call fn0177_5F94 (retsize: 0;)
	return
	// succ:  fn0177_5F8A_exit l0177_5F92_thunk_fn0177_5F94
l0177_5F92_thunk_fn0177_5F94:
	call fn0177_5F94 (retsize: 0;)
	return
	// succ:  fn0177_5F8A_exit
l0177_5F92_thunk_fn0177_5F9A:
	call fn0177_5F9A (retsize: 0;)
	return
	// succ:  fn0177_5F8A_exit
l018F_2F92_thunk_fn0177_5E8F:
	call fn0177_5E8F (retsize: 0;)
	return
	// succ:  fn0177_5F8A_exit
fn0177_5F8A_exit:


// fn0177_5F94
// Return size: 0
void fn0177_5F94()
fn0177_5F94_entry:
	// succ:  l018F_2F94
l018F_2F94:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0087_09DC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l018F_2F95_thunk_fn0177_5E8F
l018F_2F95_thunk_fn0177_5E8F:
	call fn0177_5E8F (retsize: 0;)
	return
	// succ:  fn0177_5F94_exit
fn0177_5F94_exit:


// fn0177_5F9A
// Return size: 0
void fn0177_5F9A()
fn0177_5F9A_entry:
	// succ:  l018F_2F9A
l018F_2F9A:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l018F_2FA2
	goto l018F_2F9E
	// succ:  l018F_2F9E l018F_2F9C_thunk_fn0177_5E92
l018F_2F9C_thunk_fn0177_5E92:
	call fn0177_5E92 (retsize: 0;)
	return
	// succ:  fn0177_5F9A_exit
l018F_2F9E:
	ax = di
	// succ:  l018F_2F9E_thunk_fn0177_5E92
l018F_2F9E_thunk_fn0177_5E92:
	call fn0177_5E92 (retsize: 0;)
	return
	// succ:  fn0177_5F9A_exit
fn0177_5F9A_exit:


// fn018F_2FBE
// Return size: 4
void fn018F_2FBE()
fn018F_2FBE_entry:
	// succ:  l018F_2FBE
l018F_2FBE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	dx = Mem0[ss:bp + 0x0006:word16]
	bx = dx
	al = Mem0[ds:bx + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0008:word16] = ax
	al = Mem0[ds:bx + 0x0017:byte]
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	SCZO = cond(Mem0[ds:bx:byte] - 0x10)
	branch Test(EQ,Z) l018F_2FF0
	// succ:  l018F_2FEA l018F_2FF0
l018F_2FEA:
	SZO = cond(Mem0[ds:bx + 0x001B:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l018F_2FF8
	// succ:  l018F_2FF0 l018F_2FF8
l018F_2FF0:
	al = 0xFF
	Mem0[ss:bp - 0x0003:byte] = al
	goto l018F_300E
	// succ:  l018F_300E
l018F_2FF8:
	SZO = cond(Mem0[ds:bx + 0x001B:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l018F_3006
	// succ:  l018F_2FFE l018F_3006
l018F_2FFE:
	Mem0[ss:bp - 0x000C:word16] = 0x0001
	goto l018F_3011
	// succ:  l018F_3011
l018F_3006:
	al = Mem0[ds:bx:byte]
	Mem0[ss:bp - 0x0003:byte] = al
	al = Mem0[ds:bx + 0x0001:byte]
	// succ:  l018F_300E
l018F_300E:
	Mem0[ss:bp - 0x0004:byte] = al
	// succ:  l018F_3011
l018F_3011:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EBA:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	ax = Mem0[ds:si:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	cx = si
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0004
	SCZO = cond(si)
	Mem0[ss:bp - 0x0006:word16] = si
	di = 0x0004
	di = di + cx
	SCZO = cond(di)
	SCZO = cond(si - di)
	branch Test(ULE,CZ) l018F_308E
	// succ:  l018F_3033 l018F_308E
l018F_3033:
	bx = Mem0[ds:di:word16]
	si = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l018F_3043
	// succ:  l018F_303D l018F_3043
l018F_303D:
	SZO = cond(Mem0[ds:si + 0x001B:byte] & 0x02)
	C = false
	branch Test(NE,Z) l018F_3077
	// succ:  l018F_3043 l018F_3077
l018F_3043:
	SCZO = cond(Mem0[ss:bp - 0x0003:byte] - 0xFF)
	branch Test(EQ,Z) l018F_3050
	// succ:  l018F_3049 l018F_3050
l018F_3049:
	al = Mem0[ds:si:byte]
	SCZO = cond(Mem0[ss:bp - 0x0003:byte] - al)
	branch Test(NE,Z) l018F_3087
	// succ:  l018F_3050 l018F_3087
l018F_3050:
	SCZO = cond(Mem0[ss:bp - 0x0004:byte] - 0xFF)
	branch Test(EQ,Z) l018F_305E
	// succ:  l018F_3056 l018F_305E
l018F_3056:
	al = Mem0[ss:bp - 0x0004:byte]
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - al)
	branch Test(NE,Z) l018F_3087
	// succ:  l018F_305E l018F_3087
l018F_305E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_3087
	// succ:  l018F_3077 l018F_3087
l018F_3077:
	v19 = Mem0[ds:si + 0x000A:byte] | 0x05
	Mem0[ds:si + 0x000A:byte] = v19
	SZO = cond(Mem0[ds:si + 0x000A:byte])
	C = false
	al = Mem0[ds:0x4D1C:byte]
	Mem0[ds:si + 0x0018:byte] = al
	al = Mem0[ds:0x4D1D:byte]
	Mem0[ds:si + 0x0019:byte] = al
	// succ:  l018F_3087
l018F_3087:
	di = di + 0x0001
	SZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - Mem0[ss:bp - 0x0006:word16])
	branch Test(ULT,C) l018F_3033
	// succ:  l018F_308E l018F_3033
l018F_308E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EBA:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EBA:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_2FBE_exit fn018F_2FBE_exit
fn018F_2FBE_exit:


// fn018F_30A4
// Return size: 4
void fn018F_30A4()
fn018F_30A4_entry:
	// succ:  l018F_30A4
l018F_30A4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x018F
	es = ax
	// succ:  l018F_30B5_thunk_fn0177_60B7
l018F_30B5_thunk_fn0177_60B7:
	call fn0177_60B7 (retsize: 0;)
	return
	// succ:  fn018F_30A4_exit
fn018F_30A4_exit:


// fn0177_60B7
// Return size: 0
void fn0177_60B7()
fn0177_60B7_entry:
	// succ:  l0177_60B7
l0177_60B7:
	sp = fp
	di = Mem0[ss:bp + 0x0008:word16]
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[0x0177:bx + 0x070A:word16]
	Mem0[ss:bp - 0x0004:word16] = bx
	bh = bh & 0x3F
	SZO = cond(bh)
	C = false
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l018F_30D8_in_fn0177_60B7
	goto l0177_60CD_thunk_fn0177_60CF
	// succ:  l0177_60CD_thunk_fn0177_60CF l018F_30D8_in_fn0177_60B7
l0177_60B7:
	di = Mem0[ss:bp + 0x0008:word16]
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[0x018F:bx + 0x070A:word16]
	Mem0[ss:bp - 0x0004:word16] = bx
	bh = bh & 0x3F
	SZO = cond(bh)
	C = false
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l018F_30D8
	goto l0177_60CD_thunk_fn0177_60CF
	// succ:  l0177_60CD_thunk_fn0177_60CF l0177_60CD_thunk_fn0177_60CF
l0177_60CD_thunk_fn0177_60CF:
	call fn0177_60CF (retsize: 0;)
	return
	// succ:  fn0177_60B7_exit l0177_60CD_thunk_fn0177_60CF
l0177_60CD_thunk_fn0177_60CF:
	call fn0177_60CF (retsize: 0;)
	return
	// succ:  fn0177_60B7_exit
l0177_60CD_thunk_fn0177_60CF:
	call fn0177_60CF (retsize: 0;)
	return
	// succ:  fn0177_60B7_exit
l0177_60CD_thunk_fn0177_60CF:
	call fn0177_60CF (retsize: 0;)
	return
	// succ:  fn0177_60B7_exit
l018F_30D8_in_fn0177_60B7:
	ax = bx
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_60B7_exit
fn0177_60B7_exit:


// fn0177_60CF
// Return size: 0
void fn0177_60CF()
fn0177_60CF_entry:
	// succ:  l018F_30CF
l018F_30CF:
	ax = Mem0[ss:bp - 0x0004:word16]
	SZO = cond(ah & 0x40)
	C = false
	branch Test(EQ,Z) l018F_30D8
	// succ:  l018F_30D7 l018F_30D8
l018F_30D7:
	bx = bx + 0x0001
	SZO = cond(bx)
	// succ:  l018F_30D8
l018F_30D8:
	ax = bx
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_60CF_exit
fn0177_60CF_exit:


// fn018F_30E6
// Return size: 4
void fn018F_30E6()
fn018F_30E6_entry:
	// succ:  l018F_30E6
l018F_30E6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[0x018F:bx + 0x0073:word16]
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_30E6_exit
fn018F_30E6_exit:


// fn018F_3108
// Return size: 4
void fn018F_3108()
fn018F_3108_entry:
	// succ:  l018F_3108
l018F_3108:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	v10 = Mem0[ds:si + 0x000A:byte] | 0x85
	Mem0[ds:si + 0x000A:byte] = v10
	SZO = cond(Mem0[ds:si + 0x000A:byte])
	C = false
	v12 = Mem0[ds:si + 0x000A:byte] & 0xF7
	Mem0[ds:si + 0x000A:byte] = v12
	SZO = cond(Mem0[ds:si + 0x000A:byte])
	C = false
	ax = Mem0[ds:si + 0x001A:word16]
	cx = ax
	al = ah
	cl = cl - 0x0A
	SCZO = cond(cl)
	ch = al
	Mem0[ds:si + 0x001A:word16] = cx
	al = Mem0[ds:0x4D1C:byte]
	Mem0[ds:si + 0x0018:byte] = al
	al = Mem0[ds:0x4D1D:byte]
	Mem0[ds:si + 0x0019:byte] = al
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn018F_3108_exit
fn018F_3108_exit:


// fn018F_3148
// Return size: 4
void fn018F_3148()
fn018F_3148_entry:
	// succ:  l018F_3148
l018F_3148:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x010C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_3168
	// succ:  l018F_3165 l018F_3168
l018F_3165:
	goto l018F_3258
	// succ:  l018F_3258
l018F_3168:
	si = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l018F_317A
	// succ:  l018F_3176 l018F_317A
l018F_3176:
	al = 0x80
	goto l018F_3190
	// succ:  l018F_3190
l018F_317A:
	SCZO = cond(si - 0x0005)
	branch Test(GE,SO) l018F_3184
	// succ:  l018F_317F l018F_3184
l018F_317F:
	al = 0x10
	goto l018F_3190
	// succ:  l018F_3190
l018F_3184:
	SCZO = cond(si - 0x000D)
	branch Test(GE,SO) l018F_318E
	// succ:  l018F_3189 l018F_318E
l018F_3189:
	al = 0x20
	goto l018F_3190
	// succ:  l018F_3190
l018F_318E:
	al = 0x40
	// succ:  l018F_3190
l018F_3190:
	Mem0[ss:bp - 0x0003:byte] = al
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	di = Mem0[ds:bx + 0x0035:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l018F_31B0
	// succ:  l018F_31A0 l018F_31B0
l018F_31A0:
	bx = Mem0[ds:di:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn015F_0E44 (retsize: 4;)
	sp = sp + 0x0002
	goto l018F_31B2
	// succ:  l018F_31B2
l018F_31B0:
	al = 0x02
	// succ:  l018F_31B2
l018F_31B2:
	v17 = Mem0[ss:bp - 0x0003:byte] | al
	Mem0[ss:bp - 0x0003:byte] = v17
	SZO = cond(Mem0[ss:bp - 0x0003:byte])
	C = false
	bx = Mem0[ss:bp + 0x000A:word16]
	al = 0x12
	ax = Mem0[ds:bx + 0x0001:byte] *u al
	SCZO = cond(ax)
	bx = ax
	ax = Mem0[0x018F:bx + 0x00CD:word16]
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = 0x3341
	Mem0[ss:bp - 0x000A:word16] = 0x0028
	si = Mem0[ss:bp - 0x0006:word16]
	di = Mem0[ss:bp - 0x0008:word16]
	cx = Mem0[ss:bp - 0x000A:word16]
	ax = 0x018F
	es = ax
	// succ:  l018F_31DF
l018F_31DF:
	al = Mem0[0x018F:si + 0x0002:byte]
	al = al & Mem0[ss:bp - 0x0003:byte]
	SZO = cond(al)
	C = false
	SCZO = cond(al - Mem0[ss:bp - 0x0003:byte])
	branch Test(NE,Z) l018F_31F9
	// succ:  l018F_31EB l018F_31F9
l018F_31EB:
	ax = Mem0[0x018F:si + 0x0003:word16]
	dx = ax
	ax = ax & Mem0[ss:bp - 0x000C:word16]
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - dx)
	branch Test(NE,Z) l018F_31F9
	// succ:  l018F_31F8 l018F_31F9
l018F_31F8:
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l018F_31F9
l018F_31F9:
	si = si + 0x0005
	SCZO = cond(si)
	cx = cx - 0x0001
	branch cx != 0x0000 l018F_31DF
	// succ:  l018F_31FE l018F_31DF
l018F_31FE:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l018F_3258
	// succ:  l018F_3202 l018F_3258
l018F_3202:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	di = ax
	si = si - si
	SCZO = cond(si)
	Mem0[ss:bp - 0x0006:word16] = 0x3341
	Mem0[ss:bp - 0x000A:word16] = si
	si = Mem0[ss:bp - 0x0006:word16]
	cx = Mem0[ss:bp - 0x000A:word16]
	ax = 0x018F
	es = ax
	// succ:  l018F_321F
l018F_321F:
	al = Mem0[0x018F:si + 0x0002:byte]
	al = al & Mem0[ss:bp - 0x0003:byte]
	SZO = cond(al)
	C = false
	SCZO = cond(al - Mem0[ss:bp - 0x0003:byte])
	branch Test(NE,Z) l018F_323F
	// succ:  l018F_322B l018F_323F
l018F_322B:
	ax = Mem0[0x018F:si + 0x0003:word16]
	dx = ax
	ax = ax & Mem0[ss:bp - 0x000C:word16]
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - dx)
	branch Test(NE,Z) l018F_323F
	// succ:  l018F_3238 l018F_323F
l018F_3238:
	ax = di
	di = di - 0x0001
	SZO = cond(di)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_324E
	// succ:  l018F_323F l018F_324E
l018F_323F:
	si = si + 0x0005
	SCZO = cond(si)
	cx = cx + 0x0001
	SZO = cond(cx)
	SCZO = cond(cx - 0x0028)
	branch Test(ULT,C) l018F_321F
	// succ:  l018F_3248 l018F_321F
l018F_3248:
	si = Mem0[ss:bp - 0x0008:word16]
	goto l018F_325B
	// succ:  l018F_325B
l018F_324E:
	Mem0[ss:bp - 0x0006:word16] = si
	di = si
	si = Mem0[0x018F:di:word16]
	goto l018F_325B
	// succ:  l018F_325B
l018F_3258:
	si = 0x001E
	// succ:  l018F_325B
l018F_325B:
	ax = bp - 0x010C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x000A:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_30A4 (retsize: 2;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
fn018F_3148_exit:


// fn0177_63E8
// Return size: 4
void fn0177_63E8()
fn0177_63E8_entry:
	// succ:  l0177_63E8
l0177_63E8:
	sp = fp
	Mem0[ds:bx + si:byte] = cl
	bl = bl & cl
	SZO = cond(bl)
	C = false
	v11 = Mem0[ds:bx + si:byte] + ch
	Mem0[ds:bx + si:byte] = v11
	SCZO = cond(v11)
	v14 = Mem0[ds:bx + 0x00CD + si:byte] + al
	Mem0[ds:bx + 0x00CD + si:byte] = v14
	SCZO = cond(v14)
	SCZO = cond(al - Mem0[ds:bx + di:byte])
	dh = dh + cl
	SCZO = cond(dh)
	v20 = Mem0[ss:bp + si:byte] + bh
	Mem0[ss:bp + si:byte] = v20
	SCZO = cond(v20)
	v22 = Mem0[ds:bx + si:word16] + ax
	Mem0[ds:bx + si:word16] = v22
	SCZO = cond(v22)
	v23 = (Mem0[ds:bx + si:byte] & 0x01 << 0x08 - 0x01) != 0x00
	Mem0[ds:bx + si:byte] = __rol(Mem0[ds:bx + si:byte], 0x01)
	C = v23
	Mem0[ds:bx + si:byte] = al
	al = 0xD1
	ah = ah + cl
	SCZO = cond(ah)
	v25 = Mem0[ds:bx + 0x00D2 + si:byte] + al
	Mem0[ds:bx + 0x00D2 + si:byte] = v25
	SCZO = cond(v25)
	v26 = Mem0[ds:bx + si:byte] + 0x00
	Mem0[ds:bx + si:byte] = v26
	SCZO = cond(v26)
	goto l0177_6409_thunk_fn018F_340A
	// succ:  l0177_6409_thunk_fn018F_340A
l0177_63E8:
	goto fn0177_63E8_exit
	// succ:  fn0177_63E8_exit
l0177_6409_thunk_fn018F_340A:
	call fn018F_340A (retsize: 4;)
	return
	// succ:  fn0177_63E8_exit
fn0177_63E8_exit:


// fn018F_340A
// Return size: 4
void fn018F_340A()
fn018F_340A_entry:
	// succ:  l018F_340A
l018F_340A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x010A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l018F_342A
	// succ:  l018F_3427 l018F_342A
l018F_3427:
	goto l018F_34EC
	// succ:  l018F_34EC
l018F_342A:
	di = di - di
	SCZO = cond(di)
	bx = Mem0[ss:bp + 0x0006:word16]
	al = 0x12
	ax = Mem0[ds:bx + 0x0001:byte] *u al
	SCZO = cond(ax)
	bx = ax
	ax = Mem0[0x018F:bx + 0x00CD:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	bx = Mem0[ds:0x4DEA:word16]
	bx = Mem0[ds:bx:word16]
	si = Mem0[ds:bx + 0x0035:word16]
	SCZO = cond(si - di)
	branch Test(EQ,Z) l018F_345A
	// succ:  l018F_344B l018F_345A
l018F_344B:
	bx = Mem0[ds:si:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn015F_0E44 (retsize: 4;)
	sp = sp + 0x0002
	goto l018F_345C
	// succ:  l018F_345C
l018F_345A:
	al = 0x02
	// succ:  l018F_345C
l018F_345C:
	Mem0[ss:bp - 0x0005:byte] = al
	Mem0[ss:bp - 0x0004:word16] = 0x3292
	Mem0[ss:bp - 0x0008:word16] = 0x0023
	si = Mem0[ss:bp - 0x0004:word16]
	cx = Mem0[ss:bp - 0x0008:word16]
	ax = 0x018F
	es = ax
	// succ:  l018F_3474
l018F_3474:
	al = Mem0[0x018F:si + 0x0002:byte]
	al = al & Mem0[ss:bp - 0x0005:byte]
	SZO = cond(al)
	C = false
	SCZO = cond(al - Mem0[ss:bp - 0x0005:byte])
	branch Test(NE,Z) l018F_348E
	// succ:  l018F_3480 l018F_348E
l018F_3480:
	ax = Mem0[0x018F:si + 0x0003:word16]
	dx = ax
	ax = ax & Mem0[ss:bp - 0x000A:word16]
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - dx)
	branch Test(NE,Z) l018F_348E
	// succ:  l018F_348D l018F_348E
l018F_348D:
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l018F_348E
l018F_348E:
	si = si + 0x0005
	SCZO = cond(si)
	cx = cx - 0x0001
	branch cx != 0x0000 l018F_3474
	// succ:  l018F_3493 l018F_3474
l018F_3493:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l018F_34EC
	// succ:  l018F_3497 l018F_34EC
l018F_3497:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	di = ax
	si = si - si
	SCZO = cond(si)
	Mem0[ss:bp - 0x0004:word16] = 0x3292
	Mem0[ss:bp - 0x0008:word16] = si
	si = Mem0[ss:bp - 0x0004:word16]
	cx = Mem0[ss:bp - 0x0008:word16]
	ax = 0x018F
	es = ax
	// succ:  l018F_34B2_thunk_fn0177_64D4
l018F_34B2_thunk_fn0177_64D4:
	call fn0177_64D4 (retsize: 0;)
	return
	// succ:  fn018F_340A_exit
l018F_34EC:
	si = 0x001F
	// succ:  l018F_34EC_thunk_fn0177_64D4
l018F_34EC_thunk_fn0177_64D4:
	call fn0177_64D4 (retsize: 0;)
	return
	// succ:  fn018F_340A_exit
fn018F_340A_exit:


// fn0177_64B8
// Return size: 0
void fn0177_64B8()
fn0177_64B8_entry:
	// succ:  l0177_64B8
l0177_64B8:
	sp = fp
	al = al & Mem0[ss:bp - 0x0005:byte]
	SZO = cond(al)
	C = false
	SCZO = cond(al - Mem0[ss:bp - 0x0005:byte])
	branch Test(NE,Z) l0177_64BE_thunk_fn0177_64D4
	goto l0177_64BE_thunk_fn0177_64C0
	// succ:  l0177_64BE_thunk_fn0177_64C0 l0177_64BE_thunk_fn0177_64D4
l0177_64B8:
	al = al & Mem0[ss:bp - 0x0005:byte]
	SZO = cond(al)
	C = false
	SCZO = cond(al - Mem0[ss:bp - 0x0005:byte])
	branch Test(NE,Z) l018F_34D4
	goto l0177_64BE_thunk_fn0177_64C0
	// succ:  l0177_64BE_thunk_fn0177_64C0 l0177_64BE_thunk_fn0177_64D4
l0177_64BE_thunk_fn0177_64C0:
	call fn0177_64C0 (retsize: 0;)
	return
	// succ:  fn0177_64B8_exit l0177_64BE_thunk_fn0177_64C0
l0177_64BE_thunk_fn0177_64C0:
	call fn0177_64C0 (retsize: 0;)
	return
	// succ:  fn0177_64B8_exit
l0177_64BE_thunk_fn0177_64C0:
	call fn0177_64C0 (retsize: 0;)
	return
	// succ:  fn0177_64B8_exit
l0177_64BE_thunk_fn0177_64D4:
	call fn0177_64D4 (retsize: 0;)
	return
	// succ:  fn0177_64B8_exit
l0177_64BE_thunk_fn0177_64D4:
	call fn0177_64D4 (retsize: 0;)
	return
	// succ:  fn0177_64B8_exit
fn0177_64B8_exit:


// fn0177_64C0
// Return size: 0
void fn0177_64C0()
fn0177_64C0_entry:
	call fn0177_64D4 (retsize: 0;)
	return
	// succ:  l018F_34C0 fn0177_64C0_exit
l018F_34C0:
	ax = Mem0[0x018F:si + 0x0003:word16]
	dx = ax
	ax = ax & Mem0[ss:bp - 0x000A:word16]
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - dx)
	branch Test(NE,Z) l018F_34D4
	goto l018F_34CD
	// succ:  l018F_34CD l018F_34CB_thunk_fn0177_64D4
l018F_34CB_thunk_fn0177_64D4:
	call fn0177_64D4 (retsize: 0;)
	return
	// succ:  fn0177_64C0_exit
l018F_34CD:
	ax = di
	di = di - 0x0001
	SZO = cond(di)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l018F_34E2
	// succ:  l018F_34D2_thunk_fn0177_64D4 l018F_34E2
l018F_34D2_thunk_fn0177_64D4:
	call fn0177_64D4 (retsize: 0;)
	return
	// succ:  fn0177_64C0_exit
l018F_34E2:
	Mem0[ss:bp - 0x0004:word16] = si
	di = si
	si = Mem0[0x018F:di:word16]
	// succ:  l018F_34EF
l018F_34EF:
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn018F_30A4 (retsize: 2;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
fn0177_64C0_exit:


// fn0177_64D4
// Return size: 0
void fn0177_64D4()
fn0177_64D4_entry:
	goto l018F_34D4
	// succ:  l018F_34D4
l018F_34B4:
	al = Mem0[0x018F:si + 0x0002:byte]
	// succ:  l018F_34B4_thunk_fn0177_64B8
l018F_34B4_thunk_fn0177_64B8:
	call fn0177_64B8 (retsize: 0;)
	return
	// succ:  fn0177_64D4_exit
l018F_34D4:
	si = si + 0x0005
	SCZO = cond(si)
	cx = cx + 0x0001
	SZO = cond(cx)
	SCZO = cond(cx - 0x0023)
	branch Test(ULT,C) l018F_34B4
	// succ:  l018F_34DD l018F_34B4
l018F_34DD:
	si = Mem0[ss:bp - 0x0006:word16]
	// succ:  l018F_34DD_thunk_fn0177_64C0
l018F_34DD_thunk_fn0177_64C0:
	call fn0177_64C0 (retsize: 0;)
	return
	// succ:  fn0177_64D4_exit
fn0177_64D4_exit:


// fn0177_6780
// Return size: 4
void fn0177_6780()
fn0177_6780_entry:
	// succ:  l0177_6780
l0177_6780:
	sp = fp
	v7 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v7
	SCZO = cond(v7)
	v9 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v9
	SCZO = cond(v9)
	v10 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v10
	SCZO = cond(v10)
	v11 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v11
	SCZO = cond(v11)
	v12 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v12
	SCZO = cond(v12)
	v13 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v13
	SCZO = cond(v13)
	v14 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v14
	SCZO = cond(v14)
	v15 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v15
	SCZO = cond(v15)
	v16 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v16
	SCZO = cond(v16)
	v17 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v17
	SCZO = cond(v17)
	v18 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v18
	SCZO = cond(v18)
	v19 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v19
	SCZO = cond(v19)
	v20 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v20
	SCZO = cond(v20)
	v21 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v21
	SCZO = cond(v21)
	v22 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v22
	SCZO = cond(v22)
	v23 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v23
	SCZO = cond(v23)
	v24 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v24
	SCZO = cond(v24)
	v25 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v25
	SCZO = cond(v25)
	v26 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v26
	SCZO = cond(v26)
	v27 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v27
	SCZO = cond(v27)
	v28 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v28
	SCZO = cond(v28)
	v29 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v29
	SCZO = cond(v29)
	v30 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v30
	SCZO = cond(v30)
	v31 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v31
	SCZO = cond(v31)
	v32 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v32
	SCZO = cond(v32)
	v33 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v33
	SCZO = cond(v33)
	v34 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v34
	SCZO = cond(v34)
	v35 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v35
	SCZO = cond(v35)
	v36 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v36
	SCZO = cond(v36)
	v37 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v37
	SCZO = cond(v37)
	v38 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v38
	SCZO = cond(v38)
	v39 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v39
	SCZO = cond(v39)
	v40 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v40
	SCZO = cond(v40)
	v41 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v41
	SCZO = cond(v41)
	v42 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v42
	SCZO = cond(v42)
	v43 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v43
	SCZO = cond(v43)
	v44 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v44
	SCZO = cond(v44)
	v45 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v45
	SCZO = cond(v45)
	v46 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v46
	SCZO = cond(v46)
	v47 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v47
	SCZO = cond(v47)
	v48 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v48
	SCZO = cond(v48)
	v49 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v49
	SCZO = cond(v49)
	v50 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v50
	SCZO = cond(v50)
	v51 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v51
	SCZO = cond(v51)
	v52 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v52
	SCZO = cond(v52)
	v53 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v53
	SCZO = cond(v53)
	v54 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v54
	SCZO = cond(v54)
	v55 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v55
	SCZO = cond(v55)
	v56 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v56
	SCZO = cond(v56)
	v57 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v57
	SCZO = cond(v57)
	v58 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v58
	SCZO = cond(v58)
	v59 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v59
	SCZO = cond(v59)
	v60 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v60
	SCZO = cond(v60)
	v61 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v61
	SCZO = cond(v61)
	v62 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v62
	SCZO = cond(v62)
	v63 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v63
	SCZO = cond(v63)
	v64 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v64
	SCZO = cond(v64)
	v65 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v65
	SCZO = cond(v65)
	v66 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v66
	SCZO = cond(v66)
	v67 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v67
	SCZO = cond(v67)
	v68 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v68
	SCZO = cond(v68)
	v69 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v69
	SCZO = cond(v69)
	v70 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v70
	SCZO = cond(v70)
	v71 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v71
	SCZO = cond(v71)
	v72 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v72
	SCZO = cond(v72)
	v73 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v73
	SCZO = cond(v73)
	v74 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v74
	SCZO = cond(v74)
	v75 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v75
	SCZO = cond(v75)
	v76 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v76
	SCZO = cond(v76)
	v77 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v77
	SCZO = cond(v77)
	v78 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v78
	SCZO = cond(v78)
	v79 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v79
	SCZO = cond(v79)
	v80 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v80
	SCZO = cond(v80)
	v81 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v81
	SCZO = cond(v81)
	v82 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v82
	SCZO = cond(v82)
	v83 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v83
	SCZO = cond(v83)
	v84 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v84
	SCZO = cond(v84)
	v85 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v85
	SCZO = cond(v85)
	v86 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v86
	SCZO = cond(v86)
	v87 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v87
	SCZO = cond(v87)
	v88 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v88
	SCZO = cond(v88)
	v89 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v89
	SCZO = cond(v89)
	v90 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v90
	SCZO = cond(v90)
	v91 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v91
	SCZO = cond(v91)
	v92 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v92
	SCZO = cond(v92)
	v93 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v93
	SCZO = cond(v93)
	v94 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v94
	SCZO = cond(v94)
	v95 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v95
	SCZO = cond(v95)
	v96 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v96
	SCZO = cond(v96)
	v97 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v97
	SCZO = cond(v97)
	v98 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v98
	SCZO = cond(v98)
	v99 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v99
	SCZO = cond(v99)
	v100 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v100
	SCZO = cond(v100)
	v101 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v101
	SCZO = cond(v101)
	v102 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v102
	SCZO = cond(v102)
	v103 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v103
	SCZO = cond(v103)
	v104 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v104
	SCZO = cond(v104)
	v105 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v105
	SCZO = cond(v105)
	v106 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v106
	SCZO = cond(v106)
	v107 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v107
	SCZO = cond(v107)
	v108 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v108
	SCZO = cond(v108)
	v109 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v109
	SCZO = cond(v109)
	v110 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v110
	SCZO = cond(v110)
	v111 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v111
	SCZO = cond(v111)
	v112 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v112
	SCZO = cond(v112)
	v113 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v113
	SCZO = cond(v113)
	v114 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v114
	SCZO = cond(v114)
	v115 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v115
	SCZO = cond(v115)
	v116 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v116
	SCZO = cond(v116)
	v117 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v117
	SCZO = cond(v117)
	v118 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v118
	SCZO = cond(v118)
	v119 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v119
	SCZO = cond(v119)
	v120 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v120
	SCZO = cond(v120)
	v121 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v121
	SCZO = cond(v121)
	v122 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v122
	SCZO = cond(v122)
	v123 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v123
	SCZO = cond(v123)
	v124 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v124
	SCZO = cond(v124)
	v125 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v125
	SCZO = cond(v125)
	v126 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v126
	SCZO = cond(v126)
	v127 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v127
	SCZO = cond(v127)
	v128 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v128
	SCZO = cond(v128)
	v129 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v129
	SCZO = cond(v129)
	v130 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v130
	SCZO = cond(v130)
	v131 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v131
	SCZO = cond(v131)
	v132 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v132
	SCZO = cond(v132)
	v133 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v133
	SCZO = cond(v133)
	v134 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v134
	SCZO = cond(v134)
	v135 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v135
	SCZO = cond(v135)
	v136 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v136
	SCZO = cond(v136)
	v137 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v137
	SCZO = cond(v137)
	v138 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v138
	SCZO = cond(v138)
	v139 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v139
	SCZO = cond(v139)
	v140 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v140
	SCZO = cond(v140)
	v141 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v141
	SCZO = cond(v141)
	v142 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v142
	SCZO = cond(v142)
	v143 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v143
	SCZO = cond(v143)
	v144 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v144
	SCZO = cond(v144)
	v145 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v145
	SCZO = cond(v145)
	v146 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v146
	SCZO = cond(v146)
	v147 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v147
	SCZO = cond(v147)
	v148 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v148
	SCZO = cond(v148)
	v149 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v149
	SCZO = cond(v149)
	v150 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v150
	SCZO = cond(v150)
	v151 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v151
	SCZO = cond(v151)
	v152 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v152
	SCZO = cond(v152)
	v153 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v153
	SCZO = cond(v153)
	v154 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v154
	SCZO = cond(v154)
	v155 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v155
	SCZO = cond(v155)
	v156 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v156
	SCZO = cond(v156)
	v157 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v157
	SCZO = cond(v157)
	v158 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v158
	SCZO = cond(v158)
	v159 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v159
	SCZO = cond(v159)
	v160 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v160
	SCZO = cond(v160)
	v161 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v161
	SCZO = cond(v161)
	v162 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v162
	SCZO = cond(v162)
	v163 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v163
	SCZO = cond(v163)
	v164 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v164
	SCZO = cond(v164)
	v165 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v165
	SCZO = cond(v165)
	v166 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v166
	SCZO = cond(v166)
	v167 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v167
	SCZO = cond(v167)
	v168 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v168
	SCZO = cond(v168)
	v169 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v169
	SCZO = cond(v169)
	v170 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v170
	SCZO = cond(v170)
	v171 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v171
	SCZO = cond(v171)
	v172 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v172
	SCZO = cond(v172)
	v173 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v173
	SCZO = cond(v173)
	v174 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v174
	SCZO = cond(v174)
	v175 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v175
	SCZO = cond(v175)
	v176 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v176
	SCZO = cond(v176)
	v177 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v177
	SCZO = cond(v177)
	v178 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v178
	SCZO = cond(v178)
	v179 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v179
	SCZO = cond(v179)
	v180 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v180
	SCZO = cond(v180)
	v181 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v181
	SCZO = cond(v181)
	v182 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v182
	SCZO = cond(v182)
	v183 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v183
	SCZO = cond(v183)
	v184 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v184
	SCZO = cond(v184)
	v185 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v185
	SCZO = cond(v185)
	v186 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v186
	SCZO = cond(v186)
	v187 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v187
	SCZO = cond(v187)
	v188 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v188
	SCZO = cond(v188)
	goto l0177_68E8_thunk_fn0177_68E9
	// succ:  l0177_68E8_thunk_fn0177_68E9
l0177_6780:
	goto fn0177_6780_exit
	// succ:  fn0177_6780_exit
l0177_68E8_thunk_fn0177_68E9:
	call fn0177_68E9 (retsize: 0;)
	return
	// succ:  fn0177_6780_exit
fn0177_6780_exit:


// fn0177_68E9
// Return size: 0
void fn0177_68E9()
fn0177_68E9_entry:
	// succ:  l0177_68E9
l0177_68E9:
	sp = fp
	v7 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v7
	SCZO = cond(v7)
	v9 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v9
	SCZO = cond(v9)
	v10 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v10
	SCZO = cond(v10)
	v11 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v11
	SCZO = cond(v11)
	v12 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v12
	SCZO = cond(v12)
	v13 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v13
	SCZO = cond(v13)
	v14 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v14
	SCZO = cond(v14)
	v15 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v15
	SCZO = cond(v15)
	v16 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v16
	SCZO = cond(v16)
	v17 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v17
	SCZO = cond(v17)
	v18 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v18
	SCZO = cond(v18)
	v19 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v19
	SCZO = cond(v19)
	v20 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v20
	SCZO = cond(v20)
	v21 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v21
	SCZO = cond(v21)
	v22 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v22
	SCZO = cond(v22)
	v23 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v23
	SCZO = cond(v23)
	v24 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v24
	SCZO = cond(v24)
	v25 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v25
	SCZO = cond(v25)
	v26 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v26
	SCZO = cond(v26)
	v27 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v27
	SCZO = cond(v27)
	v28 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v28
	SCZO = cond(v28)
	v29 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v29
	SCZO = cond(v29)
	v30 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v30
	SCZO = cond(v30)
	v31 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v31
	SCZO = cond(v31)
	v32 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v32
	SCZO = cond(v32)
	v33 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v33
	SCZO = cond(v33)
	v34 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v34
	SCZO = cond(v34)
	v35 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v35
	SCZO = cond(v35)
	v36 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v36
	SCZO = cond(v36)
	v37 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v37
	SCZO = cond(v37)
	v38 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v38
	SCZO = cond(v38)
	v39 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v39
	SCZO = cond(v39)
	v40 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v40
	SCZO = cond(v40)
	v41 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v41
	SCZO = cond(v41)
	v42 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v42
	SCZO = cond(v42)
	v43 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v43
	SCZO = cond(v43)
	v44 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v44
	SCZO = cond(v44)
	v45 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v45
	SCZO = cond(v45)
	v46 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v46
	SCZO = cond(v46)
	v47 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v47
	SCZO = cond(v47)
	v48 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v48
	SCZO = cond(v48)
	v49 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v49
	SCZO = cond(v49)
	v50 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v50
	SCZO = cond(v50)
	v51 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v51
	SCZO = cond(v51)
	v52 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v52
	SCZO = cond(v52)
	v53 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v53
	SCZO = cond(v53)
	v54 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v54
	SCZO = cond(v54)
	v55 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v55
	SCZO = cond(v55)
	v56 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v56
	SCZO = cond(v56)
	v57 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v57
	SCZO = cond(v57)
	v58 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v58
	SCZO = cond(v58)
	v59 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v59
	SCZO = cond(v59)
	v60 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v60
	SCZO = cond(v60)
	v61 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v61
	SCZO = cond(v61)
	v62 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v62
	SCZO = cond(v62)
	v63 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v63
	SCZO = cond(v63)
	v64 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v64
	SCZO = cond(v64)
	v65 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v65
	SCZO = cond(v65)
	v66 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v66
	SCZO = cond(v66)
	v67 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v67
	SCZO = cond(v67)
	v68 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v68
	SCZO = cond(v68)
	v69 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v69
	SCZO = cond(v69)
	v70 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v70
	SCZO = cond(v70)
	v71 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v71
	SCZO = cond(v71)
	v72 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v72
	SCZO = cond(v72)
	v73 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v73
	SCZO = cond(v73)
	v74 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v74
	SCZO = cond(v74)
	v75 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v75
	SCZO = cond(v75)
	v76 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v76
	SCZO = cond(v76)
	v77 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v77
	SCZO = cond(v77)
	v78 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v78
	SCZO = cond(v78)
	v79 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v79
	SCZO = cond(v79)
	v80 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v80
	SCZO = cond(v80)
	v81 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v81
	SCZO = cond(v81)
	v82 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v82
	SCZO = cond(v82)
	v83 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v83
	SCZO = cond(v83)
	v84 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v84
	SCZO = cond(v84)
	v85 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v85
	SCZO = cond(v85)
	v86 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v86
	SCZO = cond(v86)
	v87 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v87
	SCZO = cond(v87)
	v88 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v88
	SCZO = cond(v88)
	v89 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v89
	SCZO = cond(v89)
	v90 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v90
	SCZO = cond(v90)
	v91 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v91
	SCZO = cond(v91)
	v92 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v92
	SCZO = cond(v92)
	v93 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v93
	SCZO = cond(v93)
	v94 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v94
	SCZO = cond(v94)
	v95 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v95
	SCZO = cond(v95)
	v96 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v96
	SCZO = cond(v96)
	v97 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v97
	SCZO = cond(v97)
	v98 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v98
	SCZO = cond(v98)
	v99 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v99
	SCZO = cond(v99)
	v100 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v100
	SCZO = cond(v100)
	v101 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v101
	SCZO = cond(v101)
	v102 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v102
	SCZO = cond(v102)
	v103 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v103
	SCZO = cond(v103)
	v104 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v104
	SCZO = cond(v104)
	v105 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v105
	SCZO = cond(v105)
	v106 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v106
	SCZO = cond(v106)
	v107 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v107
	SCZO = cond(v107)
	v108 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v108
	SCZO = cond(v108)
	v109 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v109
	SCZO = cond(v109)
	v110 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v110
	SCZO = cond(v110)
	v111 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v111
	SCZO = cond(v111)
	v112 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v112
	SCZO = cond(v112)
	v113 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v113
	SCZO = cond(v113)
	v114 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v114
	SCZO = cond(v114)
	v115 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v115
	SCZO = cond(v115)
	v116 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v116
	SCZO = cond(v116)
	v117 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v117
	SCZO = cond(v117)
	v118 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v118
	SCZO = cond(v118)
	v119 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v119
	SCZO = cond(v119)
	v120 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v120
	SCZO = cond(v120)
	v121 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v121
	SCZO = cond(v121)
	v122 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v122
	SCZO = cond(v122)
	v123 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v123
	SCZO = cond(v123)
	v124 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v124
	SCZO = cond(v124)
	v125 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v125
	SCZO = cond(v125)
	v126 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v126
	SCZO = cond(v126)
	v127 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v127
	SCZO = cond(v127)
	v128 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v128
	SCZO = cond(v128)
	v129 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v129
	SCZO = cond(v129)
	v130 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v130
	SCZO = cond(v130)
	v131 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v131
	SCZO = cond(v131)
	v132 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v132
	SCZO = cond(v132)
	v133 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v133
	SCZO = cond(v133)
	v134 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v134
	SCZO = cond(v134)
	v135 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v135
	SCZO = cond(v135)
	v136 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v136
	SCZO = cond(v136)
	v137 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v137
	SCZO = cond(v137)
	v138 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v138
	SCZO = cond(v138)
	v139 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v139
	SCZO = cond(v139)
	v140 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v140
	SCZO = cond(v140)
	v141 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v141
	SCZO = cond(v141)
	v142 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v142
	SCZO = cond(v142)
	v143 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v143
	SCZO = cond(v143)
	v144 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v144
	SCZO = cond(v144)
	v145 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v145
	SCZO = cond(v145)
	v146 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v146
	SCZO = cond(v146)
	v147 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v147
	SCZO = cond(v147)
	v148 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v148
	SCZO = cond(v148)
	v149 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v149
	SCZO = cond(v149)
	v150 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v150
	SCZO = cond(v150)
	v151 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v151
	SCZO = cond(v151)
	v152 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v152
	SCZO = cond(v152)
	v153 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v153
	SCZO = cond(v153)
	v154 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v154
	SCZO = cond(v154)
	v155 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v155
	SCZO = cond(v155)
	v156 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v156
	SCZO = cond(v156)
	v157 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v157
	SCZO = cond(v157)
	v158 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v158
	SCZO = cond(v158)
	v159 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v159
	SCZO = cond(v159)
	v160 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v160
	SCZO = cond(v160)
	v161 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v161
	SCZO = cond(v161)
	v162 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v162
	SCZO = cond(v162)
	v163 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v163
	SCZO = cond(v163)
	v164 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v164
	SCZO = cond(v164)
	v165 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v165
	SCZO = cond(v165)
	v166 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v166
	SCZO = cond(v166)
	v167 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v167
	SCZO = cond(v167)
	v168 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v168
	SCZO = cond(v168)
	v169 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v169
	SCZO = cond(v169)
	v170 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v170
	SCZO = cond(v170)
	v171 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v171
	SCZO = cond(v171)
	v172 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v172
	SCZO = cond(v172)
	v173 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v173
	SCZO = cond(v173)
	v174 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v174
	SCZO = cond(v174)
	v175 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v175
	SCZO = cond(v175)
	v176 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v176
	SCZO = cond(v176)
	v177 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v177
	SCZO = cond(v177)
	v178 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v178
	SCZO = cond(v178)
	v179 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v179
	SCZO = cond(v179)
	v180 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v180
	SCZO = cond(v180)
	v181 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v181
	SCZO = cond(v181)
	v182 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v182
	SCZO = cond(v182)
	v183 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v183
	SCZO = cond(v183)
	v184 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v184
	SCZO = cond(v184)
	v185 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v185
	SCZO = cond(v185)
	v186 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v186
	SCZO = cond(v186)
	v187 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v187
	SCZO = cond(v187)
	v188 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v188
	SCZO = cond(v188)
	v189 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v189
	SCZO = cond(v189)
	v190 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v190
	SCZO = cond(v190)
	v191 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v191
	SCZO = cond(v191)
	v192 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v192
	SCZO = cond(v192)
	v193 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v193
	SCZO = cond(v193)
	v194 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v194
	SCZO = cond(v194)
	v195 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v195
	SCZO = cond(v195)
	v196 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v196
	SCZO = cond(v196)
	v197 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v197
	SCZO = cond(v197)
	v198 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v198
	SCZO = cond(v198)
	v199 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v199
	SCZO = cond(v199)
	v200 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v200
	SCZO = cond(v200)
	v201 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v201
	SCZO = cond(v201)
	v202 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v202
	SCZO = cond(v202)
	v203 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v203
	SCZO = cond(v203)
	v204 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v204
	SCZO = cond(v204)
	v205 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v205
	SCZO = cond(v205)
	v206 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v206
	SCZO = cond(v206)
	v207 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v207
	SCZO = cond(v207)
	v208 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v208
	SCZO = cond(v208)
	v209 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v209
	SCZO = cond(v209)
	v210 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v210
	SCZO = cond(v210)
	v211 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v211
	SCZO = cond(v211)
	v212 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v212
	SCZO = cond(v212)
	v213 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v213
	SCZO = cond(v213)
	v214 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v214
	SCZO = cond(v214)
	v215 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v215
	SCZO = cond(v215)
	v216 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v216
	SCZO = cond(v216)
	v217 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v217
	SCZO = cond(v217)
	v218 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v218
	SCZO = cond(v218)
	v219 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v219
	SCZO = cond(v219)
	v220 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v220
	SCZO = cond(v220)
	v221 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v221
	SCZO = cond(v221)
	v222 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v222
	SCZO = cond(v222)
	v223 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v223
	SCZO = cond(v223)
	v224 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v224
	SCZO = cond(v224)
	v225 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v225
	SCZO = cond(v225)
	v226 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v226
	SCZO = cond(v226)
	v227 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v227
	SCZO = cond(v227)
	v228 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v228
	SCZO = cond(v228)
	v229 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v229
	SCZO = cond(v229)
	v230 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v230
	SCZO = cond(v230)
	v231 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v231
	SCZO = cond(v231)
	v232 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v232
	SCZO = cond(v232)
	v233 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v233
	SCZO = cond(v233)
	v234 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v234
	SCZO = cond(v234)
	v235 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v235
	SCZO = cond(v235)
	v236 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v236
	SCZO = cond(v236)
	v237 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v237
	SCZO = cond(v237)
	v238 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v238
	SCZO = cond(v238)
	v239 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v239
	SCZO = cond(v239)
	v240 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v240
	SCZO = cond(v240)
	v241 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v241
	SCZO = cond(v241)
	v242 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v242
	SCZO = cond(v242)
	v243 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v243
	SCZO = cond(v243)
	v244 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v244
	SCZO = cond(v244)
	v245 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v245
	SCZO = cond(v245)
	v246 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v246
	SCZO = cond(v246)
	v247 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v247
	SCZO = cond(v247)
	v248 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v248
	SCZO = cond(v248)
	v249 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v249
	SCZO = cond(v249)
	v250 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v250
	SCZO = cond(v250)
	v251 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v251
	SCZO = cond(v251)
	v252 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v252
	SCZO = cond(v252)
	v253 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v253
	SCZO = cond(v253)
	v254 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v254
	SCZO = cond(v254)
	v255 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v255
	SCZO = cond(v255)
	v256 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v256
	SCZO = cond(v256)
	v257 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v257
	SCZO = cond(v257)
	v258 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v258
	SCZO = cond(v258)
	v259 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v259
	SCZO = cond(v259)
	v260 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v260
	SCZO = cond(v260)
	v261 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v261
	SCZO = cond(v261)
	v262 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v262
	SCZO = cond(v262)
	v263 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v263
	SCZO = cond(v263)
	v264 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v264
	SCZO = cond(v264)
	v265 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v265
	SCZO = cond(v265)
	v266 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v266
	SCZO = cond(v266)
	v267 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v267
	SCZO = cond(v267)
	v268 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v268
	SCZO = cond(v268)
	v269 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v269
	SCZO = cond(v269)
	v270 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v270
	SCZO = cond(v270)
	v271 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v271
	SCZO = cond(v271)
	v272 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v272
	SCZO = cond(v272)
	v273 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v273
	SCZO = cond(v273)
	v274 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v274
	SCZO = cond(v274)
	v275 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v275
	SCZO = cond(v275)
	v276 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v276
	SCZO = cond(v276)
	v277 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v277
	SCZO = cond(v277)
	v278 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v278
	SCZO = cond(v278)
	goto l0177_6B05_thunk_fn0177_6B06
	// succ:  l0177_6B05_thunk_fn0177_6B06
l0177_68E9:
	v917 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v917
	SCZO = cond(v917)
	v918 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v918
	SCZO = cond(v918)
	v919 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v919
	SCZO = cond(v919)
	v920 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v920
	SCZO = cond(v920)
	v921 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v921
	SCZO = cond(v921)
	v922 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v922
	SCZO = cond(v922)
	v923 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v923
	SCZO = cond(v923)
	v924 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v924
	SCZO = cond(v924)
	v925 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v925
	SCZO = cond(v925)
	v926 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v926
	SCZO = cond(v926)
	v927 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v927
	SCZO = cond(v927)
	v928 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v928
	SCZO = cond(v928)
	v929 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v929
	SCZO = cond(v929)
	v930 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v930
	SCZO = cond(v930)
	v931 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v931
	SCZO = cond(v931)
	v932 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v932
	SCZO = cond(v932)
	v933 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v933
	SCZO = cond(v933)
	v934 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v934
	SCZO = cond(v934)
	v935 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v935
	SCZO = cond(v935)
	v936 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v936
	SCZO = cond(v936)
	v937 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v937
	SCZO = cond(v937)
	v938 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v938
	SCZO = cond(v938)
	v939 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v939
	SCZO = cond(v939)
	v940 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v940
	SCZO = cond(v940)
	v941 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v941
	SCZO = cond(v941)
	v942 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v942
	SCZO = cond(v942)
	v943 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v943
	SCZO = cond(v943)
	v944 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v944
	SCZO = cond(v944)
	v945 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v945
	SCZO = cond(v945)
	v946 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v946
	SCZO = cond(v946)
	v947 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v947
	SCZO = cond(v947)
	v948 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v948
	SCZO = cond(v948)
	v949 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v949
	SCZO = cond(v949)
	v950 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v950
	SCZO = cond(v950)
	v951 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v951
	SCZO = cond(v951)
	v952 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v952
	SCZO = cond(v952)
	v953 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v953
	SCZO = cond(v953)
	v954 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v954
	SCZO = cond(v954)
	v955 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v955
	SCZO = cond(v955)
	v956 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v956
	SCZO = cond(v956)
	v957 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v957
	SCZO = cond(v957)
	v958 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v958
	SCZO = cond(v958)
	v959 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v959
	SCZO = cond(v959)
	v960 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v960
	SCZO = cond(v960)
	v961 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v961
	SCZO = cond(v961)
	v962 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v962
	SCZO = cond(v962)
	v963 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v963
	SCZO = cond(v963)
	v964 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v964
	SCZO = cond(v964)
	v965 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v965
	SCZO = cond(v965)
	v966 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v966
	SCZO = cond(v966)
	v967 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v967
	SCZO = cond(v967)
	v968 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v968
	SCZO = cond(v968)
	v969 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v969
	SCZO = cond(v969)
	v970 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v970
	SCZO = cond(v970)
	v971 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v971
	SCZO = cond(v971)
	v972 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v972
	SCZO = cond(v972)
	v973 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v973
	SCZO = cond(v973)
	v974 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v974
	SCZO = cond(v974)
	v975 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v975
	SCZO = cond(v975)
	v976 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v976
	SCZO = cond(v976)
	v977 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v977
	SCZO = cond(v977)
	v978 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v978
	SCZO = cond(v978)
	v979 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v979
	SCZO = cond(v979)
	v980 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v980
	SCZO = cond(v980)
	v981 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v981
	SCZO = cond(v981)
	v982 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v982
	SCZO = cond(v982)
	v983 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v983
	SCZO = cond(v983)
	v984 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v984
	SCZO = cond(v984)
	v985 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v985
	SCZO = cond(v985)
	v986 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v986
	SCZO = cond(v986)
	v987 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v987
	SCZO = cond(v987)
	v988 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v988
	SCZO = cond(v988)
	v989 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v989
	SCZO = cond(v989)
	v990 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v990
	SCZO = cond(v990)
	v991 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v991
	SCZO = cond(v991)
	v992 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v992
	SCZO = cond(v992)
	v993 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v993
	SCZO = cond(v993)
	v994 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v994
	SCZO = cond(v994)
	v995 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v995
	SCZO = cond(v995)
	v996 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v996
	SCZO = cond(v996)
	v997 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v997
	SCZO = cond(v997)
	v998 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v998
	SCZO = cond(v998)
	v999 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v999
	SCZO = cond(v999)
	v1000 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1000
	SCZO = cond(v1000)
	v1001 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1001
	SCZO = cond(v1001)
	v1002 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1002
	SCZO = cond(v1002)
	v1003 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1003
	SCZO = cond(v1003)
	v1004 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1004
	SCZO = cond(v1004)
	v1005 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1005
	SCZO = cond(v1005)
	v1006 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1006
	SCZO = cond(v1006)
	v1007 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1007
	SCZO = cond(v1007)
	v1008 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1008
	SCZO = cond(v1008)
	v1009 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1009
	SCZO = cond(v1009)
	v1010 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1010
	SCZO = cond(v1010)
	v1011 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1011
	SCZO = cond(v1011)
	v1012 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1012
	SCZO = cond(v1012)
	v1013 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1013
	SCZO = cond(v1013)
	v1014 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1014
	SCZO = cond(v1014)
	v1015 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1015
	SCZO = cond(v1015)
	v1016 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1016
	SCZO = cond(v1016)
	v1017 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1017
	SCZO = cond(v1017)
	v1018 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1018
	SCZO = cond(v1018)
	v1019 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1019
	SCZO = cond(v1019)
	v1020 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1020
	SCZO = cond(v1020)
	v1021 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1021
	SCZO = cond(v1021)
	v1022 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1022
	SCZO = cond(v1022)
	v1023 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1023
	SCZO = cond(v1023)
	v1024 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1024
	SCZO = cond(v1024)
	v1025 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1025
	SCZO = cond(v1025)
	v1026 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1026
	SCZO = cond(v1026)
	v1027 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1027
	SCZO = cond(v1027)
	v1028 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1028
	SCZO = cond(v1028)
	v1029 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1029
	SCZO = cond(v1029)
	v1030 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1030
	SCZO = cond(v1030)
	v1031 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1031
	SCZO = cond(v1031)
	v1032 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1032
	SCZO = cond(v1032)
	v1033 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1033
	SCZO = cond(v1033)
	v1034 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1034
	SCZO = cond(v1034)
	v1035 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1035
	SCZO = cond(v1035)
	v1036 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1036
	SCZO = cond(v1036)
	v1037 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1037
	SCZO = cond(v1037)
	v1038 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1038
	SCZO = cond(v1038)
	v1039 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1039
	SCZO = cond(v1039)
	v1040 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1040
	SCZO = cond(v1040)
	v1041 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1041
	SCZO = cond(v1041)
	v1042 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1042
	SCZO = cond(v1042)
	v1043 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1043
	SCZO = cond(v1043)
	v1044 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1044
	SCZO = cond(v1044)
	v1045 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1045
	SCZO = cond(v1045)
	v1046 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1046
	SCZO = cond(v1046)
	v1047 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1047
	SCZO = cond(v1047)
	v1048 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1048
	SCZO = cond(v1048)
	v1049 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1049
	SCZO = cond(v1049)
	v1050 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1050
	SCZO = cond(v1050)
	v1051 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1051
	SCZO = cond(v1051)
	v1052 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1052
	SCZO = cond(v1052)
	v1053 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1053
	SCZO = cond(v1053)
	v1054 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1054
	SCZO = cond(v1054)
	v1055 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1055
	SCZO = cond(v1055)
	v1056 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1056
	SCZO = cond(v1056)
	v1057 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1057
	SCZO = cond(v1057)
	v1058 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1058
	SCZO = cond(v1058)
	v1059 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1059
	SCZO = cond(v1059)
	v1060 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1060
	SCZO = cond(v1060)
	v1061 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1061
	SCZO = cond(v1061)
	v1062 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1062
	SCZO = cond(v1062)
	v1063 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1063
	SCZO = cond(v1063)
	v1064 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1064
	SCZO = cond(v1064)
	v1065 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1065
	SCZO = cond(v1065)
	v1066 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1066
	SCZO = cond(v1066)
	v1067 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1067
	SCZO = cond(v1067)
	v1068 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1068
	SCZO = cond(v1068)
	v1069 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1069
	SCZO = cond(v1069)
	v1070 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1070
	SCZO = cond(v1070)
	v1071 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1071
	SCZO = cond(v1071)
	v1072 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1072
	SCZO = cond(v1072)
	v1073 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1073
	SCZO = cond(v1073)
	v1074 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1074
	SCZO = cond(v1074)
	v1075 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1075
	SCZO = cond(v1075)
	v1076 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1076
	SCZO = cond(v1076)
	v1077 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1077
	SCZO = cond(v1077)
	v1078 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1078
	SCZO = cond(v1078)
	v1079 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1079
	SCZO = cond(v1079)
	v1080 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1080
	SCZO = cond(v1080)
	v1081 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1081
	SCZO = cond(v1081)
	v1082 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1082
	SCZO = cond(v1082)
	v1083 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1083
	SCZO = cond(v1083)
	v1084 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1084
	SCZO = cond(v1084)
	v1085 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1085
	SCZO = cond(v1085)
	v1086 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1086
	SCZO = cond(v1086)
	v1087 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1087
	SCZO = cond(v1087)
	v1088 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1088
	SCZO = cond(v1088)
	v1089 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1089
	SCZO = cond(v1089)
	v1090 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1090
	SCZO = cond(v1090)
	v1091 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1091
	SCZO = cond(v1091)
	v1092 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1092
	SCZO = cond(v1092)
	v1093 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1093
	SCZO = cond(v1093)
	v1094 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1094
	SCZO = cond(v1094)
	v1095 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1095
	SCZO = cond(v1095)
	v1096 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1096
	SCZO = cond(v1096)
	v1097 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1097
	SCZO = cond(v1097)
	v1098 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1098
	SCZO = cond(v1098)
	v1099 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1099
	SCZO = cond(v1099)
	v1100 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1100
	SCZO = cond(v1100)
	v1101 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1101
	SCZO = cond(v1101)
	v1102 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1102
	SCZO = cond(v1102)
	v1103 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1103
	SCZO = cond(v1103)
	v1104 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1104
	SCZO = cond(v1104)
	v1105 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1105
	SCZO = cond(v1105)
	v1106 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1106
	SCZO = cond(v1106)
	v1107 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1107
	SCZO = cond(v1107)
	v1108 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1108
	SCZO = cond(v1108)
	v1109 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1109
	SCZO = cond(v1109)
	v1110 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1110
	SCZO = cond(v1110)
	v1111 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1111
	SCZO = cond(v1111)
	v1112 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1112
	SCZO = cond(v1112)
	v1113 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1113
	SCZO = cond(v1113)
	v1114 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1114
	SCZO = cond(v1114)
	v1115 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1115
	SCZO = cond(v1115)
	v1116 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1116
	SCZO = cond(v1116)
	v1117 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1117
	SCZO = cond(v1117)
	v1118 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1118
	SCZO = cond(v1118)
	v1119 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1119
	SCZO = cond(v1119)
	v1120 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1120
	SCZO = cond(v1120)
	v1121 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1121
	SCZO = cond(v1121)
	v1122 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1122
	SCZO = cond(v1122)
	v1123 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1123
	SCZO = cond(v1123)
	v1124 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1124
	SCZO = cond(v1124)
	v1125 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1125
	SCZO = cond(v1125)
	v1126 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1126
	SCZO = cond(v1126)
	v1127 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1127
	SCZO = cond(v1127)
	v1128 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1128
	SCZO = cond(v1128)
	v1129 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1129
	SCZO = cond(v1129)
	v1130 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1130
	SCZO = cond(v1130)
	v1131 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1131
	SCZO = cond(v1131)
	v1132 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1132
	SCZO = cond(v1132)
	v1133 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1133
	SCZO = cond(v1133)
	v1134 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1134
	SCZO = cond(v1134)
	v1135 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1135
	SCZO = cond(v1135)
	v1136 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1136
	SCZO = cond(v1136)
	v1137 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1137
	SCZO = cond(v1137)
	v1138 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1138
	SCZO = cond(v1138)
	v1139 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1139
	SCZO = cond(v1139)
	v1140 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1140
	SCZO = cond(v1140)
	v1141 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1141
	SCZO = cond(v1141)
	v1142 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1142
	SCZO = cond(v1142)
	v1143 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1143
	SCZO = cond(v1143)
	v1144 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1144
	SCZO = cond(v1144)
	v1145 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1145
	SCZO = cond(v1145)
	v1146 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1146
	SCZO = cond(v1146)
	v1147 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1147
	SCZO = cond(v1147)
	v1148 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1148
	SCZO = cond(v1148)
	v1149 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1149
	SCZO = cond(v1149)
	v1150 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1150
	SCZO = cond(v1150)
	v1151 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1151
	SCZO = cond(v1151)
	v1152 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1152
	SCZO = cond(v1152)
	v1153 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1153
	SCZO = cond(v1153)
	v1154 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1154
	SCZO = cond(v1154)
	v1155 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1155
	SCZO = cond(v1155)
	v1156 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1156
	SCZO = cond(v1156)
	v1157 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1157
	SCZO = cond(v1157)
	v1158 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1158
	SCZO = cond(v1158)
	v1159 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1159
	SCZO = cond(v1159)
	v1160 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1160
	SCZO = cond(v1160)
	v1161 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1161
	SCZO = cond(v1161)
	v1162 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1162
	SCZO = cond(v1162)
	v1163 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1163
	SCZO = cond(v1163)
	v1164 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1164
	SCZO = cond(v1164)
	v1165 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1165
	SCZO = cond(v1165)
	v1166 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1166
	SCZO = cond(v1166)
	v1167 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1167
	SCZO = cond(v1167)
	v1168 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1168
	SCZO = cond(v1168)
	v1169 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1169
	SCZO = cond(v1169)
	v1170 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1170
	SCZO = cond(v1170)
	v1171 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1171
	SCZO = cond(v1171)
	v1172 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1172
	SCZO = cond(v1172)
	v1173 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1173
	SCZO = cond(v1173)
	v1174 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1174
	SCZO = cond(v1174)
	v1175 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1175
	SCZO = cond(v1175)
	v1176 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1176
	SCZO = cond(v1176)
	v1177 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1177
	SCZO = cond(v1177)
	v1178 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1178
	SCZO = cond(v1178)
	v1179 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1179
	SCZO = cond(v1179)
	v1180 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1180
	SCZO = cond(v1180)
	v1181 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1181
	SCZO = cond(v1181)
	v1182 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1182
	SCZO = cond(v1182)
	v1183 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1183
	SCZO = cond(v1183)
	v1184 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1184
	SCZO = cond(v1184)
	v1185 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1185
	SCZO = cond(v1185)
	v1186 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1186
	SCZO = cond(v1186)
	v1187 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1187
	SCZO = cond(v1187)
	v1188 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1188
	SCZO = cond(v1188)
	v1189 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1189
	SCZO = cond(v1189)
	v1190 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1190
	SCZO = cond(v1190)
	v1191 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1191
	SCZO = cond(v1191)
	v1192 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1192
	SCZO = cond(v1192)
	v1193 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1193
	SCZO = cond(v1193)
	v1194 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1194
	SCZO = cond(v1194)
	v1195 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1195
	SCZO = cond(v1195)
	v1196 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1196
	SCZO = cond(v1196)
	v1197 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1197
	SCZO = cond(v1197)
	v1198 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1198
	SCZO = cond(v1198)
	v1199 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1199
	SCZO = cond(v1199)
	v1200 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1200
	SCZO = cond(v1200)
	v1201 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1201
	SCZO = cond(v1201)
	v1202 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1202
	SCZO = cond(v1202)
	v1203 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1203
	SCZO = cond(v1203)
	v1204 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1204
	SCZO = cond(v1204)
	v1205 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1205
	SCZO = cond(v1205)
	v1206 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1206
	SCZO = cond(v1206)
	v1207 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1207
	SCZO = cond(v1207)
	v1208 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1208
	SCZO = cond(v1208)
	v1209 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1209
	SCZO = cond(v1209)
	v1210 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1210
	SCZO = cond(v1210)
	v1211 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1211
	SCZO = cond(v1211)
	v1212 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1212
	SCZO = cond(v1212)
	v1213 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1213
	SCZO = cond(v1213)
	v1214 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1214
	SCZO = cond(v1214)
	v1215 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1215
	SCZO = cond(v1215)
	v1216 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1216
	SCZO = cond(v1216)
	v1217 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1217
	SCZO = cond(v1217)
	v1218 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1218
	SCZO = cond(v1218)
	v1219 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1219
	SCZO = cond(v1219)
	v1220 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1220
	SCZO = cond(v1220)
	v1221 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1221
	SCZO = cond(v1221)
	v1222 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1222
	SCZO = cond(v1222)
	v1223 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1223
	SCZO = cond(v1223)
	v1224 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1224
	SCZO = cond(v1224)
	v1225 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1225
	SCZO = cond(v1225)
	v1226 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1226
	SCZO = cond(v1226)
	v1227 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1227
	SCZO = cond(v1227)
	v1228 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1228
	SCZO = cond(v1228)
	v1229 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1229
	SCZO = cond(v1229)
	v1230 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1230
	SCZO = cond(v1230)
	v1231 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1231
	SCZO = cond(v1231)
	v1232 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1232
	SCZO = cond(v1232)
	v1233 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1233
	SCZO = cond(v1233)
	v1234 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1234
	SCZO = cond(v1234)
	v1235 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1235
	SCZO = cond(v1235)
	v1236 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1236
	SCZO = cond(v1236)
	v1237 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1237
	SCZO = cond(v1237)
	v1238 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1238
	SCZO = cond(v1238)
	v1239 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1239
	SCZO = cond(v1239)
	v1240 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1240
	SCZO = cond(v1240)
	v1241 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1241
	SCZO = cond(v1241)
	v1242 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1242
	SCZO = cond(v1242)
	v1243 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1243
	SCZO = cond(v1243)
	v1244 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1244
	SCZO = cond(v1244)
	v1245 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1245
	SCZO = cond(v1245)
	v1246 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1246
	SCZO = cond(v1246)
	v1247 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1247
	SCZO = cond(v1247)
	v1248 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1248
	SCZO = cond(v1248)
	v1249 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1249
	SCZO = cond(v1249)
	v1250 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1250
	SCZO = cond(v1250)
	v1251 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1251
	SCZO = cond(v1251)
	v1252 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1252
	SCZO = cond(v1252)
	v1253 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1253
	SCZO = cond(v1253)
	v1254 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1254
	SCZO = cond(v1254)
	v1255 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1255
	SCZO = cond(v1255)
	v1256 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1256
	SCZO = cond(v1256)
	v1257 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1257
	SCZO = cond(v1257)
	v1258 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1258
	SCZO = cond(v1258)
	v1259 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1259
	SCZO = cond(v1259)
	v1260 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1260
	SCZO = cond(v1260)
	v1261 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1261
	SCZO = cond(v1261)
	v1262 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1262
	SCZO = cond(v1262)
	v1263 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1263
	SCZO = cond(v1263)
	v1264 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1264
	SCZO = cond(v1264)
	v1265 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1265
	SCZO = cond(v1265)
	v1266 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1266
	SCZO = cond(v1266)
	v1267 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1267
	SCZO = cond(v1267)
	v1268 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1268
	SCZO = cond(v1268)
	v1269 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1269
	SCZO = cond(v1269)
	v1270 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1270
	SCZO = cond(v1270)
	v1271 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1271
	SCZO = cond(v1271)
	v1272 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1272
	SCZO = cond(v1272)
	v1273 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1273
	SCZO = cond(v1273)
	v1274 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1274
	SCZO = cond(v1274)
	v1275 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1275
	SCZO = cond(v1275)
	v1276 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1276
	SCZO = cond(v1276)
	v1277 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1277
	SCZO = cond(v1277)
	v1278 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1278
	SCZO = cond(v1278)
	v1279 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1279
	SCZO = cond(v1279)
	v1280 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1280
	SCZO = cond(v1280)
	v1281 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1281
	SCZO = cond(v1281)
	v1282 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1282
	SCZO = cond(v1282)
	v1283 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1283
	SCZO = cond(v1283)
	v1284 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1284
	SCZO = cond(v1284)
	v1285 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1285
	SCZO = cond(v1285)
	v1286 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1286
	SCZO = cond(v1286)
	v1287 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1287
	SCZO = cond(v1287)
	v1288 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1288
	SCZO = cond(v1288)
	v1289 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1289
	SCZO = cond(v1289)
	v1290 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1290
	SCZO = cond(v1290)
	v1291 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1291
	SCZO = cond(v1291)
	v1292 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1292
	SCZO = cond(v1292)
	v1293 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1293
	SCZO = cond(v1293)
	v1294 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1294
	SCZO = cond(v1294)
	v1295 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1295
	SCZO = cond(v1295)
	v1296 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1296
	SCZO = cond(v1296)
	v1297 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1297
	SCZO = cond(v1297)
	v1298 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1298
	SCZO = cond(v1298)
	v1299 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1299
	SCZO = cond(v1299)
	v1300 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1300
	SCZO = cond(v1300)
	v1301 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1301
	SCZO = cond(v1301)
	v1302 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1302
	SCZO = cond(v1302)
	v1303 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1303
	SCZO = cond(v1303)
	v1304 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1304
	SCZO = cond(v1304)
	v1305 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1305
	SCZO = cond(v1305)
	v1306 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1306
	SCZO = cond(v1306)
	v1307 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1307
	SCZO = cond(v1307)
	v1308 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1308
	SCZO = cond(v1308)
	v1309 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1309
	SCZO = cond(v1309)
	v1310 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1310
	SCZO = cond(v1310)
	v1311 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1311
	SCZO = cond(v1311)
	v1312 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1312
	SCZO = cond(v1312)
	v1313 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1313
	SCZO = cond(v1313)
	v1314 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1314
	SCZO = cond(v1314)
	v1315 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1315
	SCZO = cond(v1315)
	v1316 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1316
	SCZO = cond(v1316)
	v1317 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1317
	SCZO = cond(v1317)
	v1318 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1318
	SCZO = cond(v1318)
	v1319 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1319
	SCZO = cond(v1319)
	v1320 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1320
	SCZO = cond(v1320)
	v1321 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1321
	SCZO = cond(v1321)
	v1322 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1322
	SCZO = cond(v1322)
	v1323 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1323
	SCZO = cond(v1323)
	v1324 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1324
	SCZO = cond(v1324)
	v1325 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1325
	SCZO = cond(v1325)
	v1326 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1326
	SCZO = cond(v1326)
	v1327 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1327
	SCZO = cond(v1327)
	v1328 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1328
	SCZO = cond(v1328)
	v1329 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1329
	SCZO = cond(v1329)
	v1330 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1330
	SCZO = cond(v1330)
	v1331 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1331
	SCZO = cond(v1331)
	v1332 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1332
	SCZO = cond(v1332)
	v1333 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1333
	SCZO = cond(v1333)
	v1334 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1334
	SCZO = cond(v1334)
	v1335 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1335
	SCZO = cond(v1335)
	v1336 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1336
	SCZO = cond(v1336)
	v1337 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1337
	SCZO = cond(v1337)
	v1338 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1338
	SCZO = cond(v1338)
	v1339 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1339
	SCZO = cond(v1339)
	v1340 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1340
	SCZO = cond(v1340)
	v1341 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1341
	SCZO = cond(v1341)
	v1342 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1342
	SCZO = cond(v1342)
	v1343 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1343
	SCZO = cond(v1343)
	v1344 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1344
	SCZO = cond(v1344)
	v1345 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1345
	SCZO = cond(v1345)
	v1346 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1346
	SCZO = cond(v1346)
	v1347 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1347
	SCZO = cond(v1347)
	v1348 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1348
	SCZO = cond(v1348)
	v1349 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1349
	SCZO = cond(v1349)
	v1350 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1350
	SCZO = cond(v1350)
	v1351 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1351
	SCZO = cond(v1351)
	v1352 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1352
	SCZO = cond(v1352)
	v1353 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1353
	SCZO = cond(v1353)
	v1354 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1354
	SCZO = cond(v1354)
	v1355 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1355
	SCZO = cond(v1355)
	v1356 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1356
	SCZO = cond(v1356)
	v1357 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1357
	SCZO = cond(v1357)
	v1358 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1358
	SCZO = cond(v1358)
	v1359 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1359
	SCZO = cond(v1359)
	v1360 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1360
	SCZO = cond(v1360)
	v1361 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1361
	SCZO = cond(v1361)
	v1362 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1362
	SCZO = cond(v1362)
	v1363 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1363
	SCZO = cond(v1363)
	v1364 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1364
	SCZO = cond(v1364)
	v1365 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1365
	SCZO = cond(v1365)
	v1366 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1366
	SCZO = cond(v1366)
	v1367 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1367
	SCZO = cond(v1367)
	v1368 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1368
	SCZO = cond(v1368)
	v1369 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1369
	SCZO = cond(v1369)
	v1370 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1370
	SCZO = cond(v1370)
	v1371 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1371
	SCZO = cond(v1371)
	v1372 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1372
	SCZO = cond(v1372)
	v1373 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1373
	SCZO = cond(v1373)
	v1374 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1374
	SCZO = cond(v1374)
	v1375 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1375
	SCZO = cond(v1375)
	v1376 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1376
	SCZO = cond(v1376)
	v1377 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1377
	SCZO = cond(v1377)
	v1378 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1378
	SCZO = cond(v1378)
	v1379 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1379
	SCZO = cond(v1379)
	v1380 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1380
	SCZO = cond(v1380)
	v1381 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1381
	SCZO = cond(v1381)
	v1382 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1382
	SCZO = cond(v1382)
	v1383 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1383
	SCZO = cond(v1383)
	v1384 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1384
	SCZO = cond(v1384)
	v1385 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1385
	SCZO = cond(v1385)
	v1386 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1386
	SCZO = cond(v1386)
	v1387 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1387
	SCZO = cond(v1387)
	v1388 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1388
	SCZO = cond(v1388)
	v1389 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1389
	SCZO = cond(v1389)
	v1390 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1390
	SCZO = cond(v1390)
	v1391 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1391
	SCZO = cond(v1391)
	v1392 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1392
	SCZO = cond(v1392)
	v1393 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1393
	SCZO = cond(v1393)
	v1394 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1394
	SCZO = cond(v1394)
	v1395 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1395
	SCZO = cond(v1395)
	v1396 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1396
	SCZO = cond(v1396)
	v1397 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1397
	SCZO = cond(v1397)
	v1398 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1398
	SCZO = cond(v1398)
	v1399 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1399
	SCZO = cond(v1399)
	v1400 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1400
	SCZO = cond(v1400)
	v1401 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1401
	SCZO = cond(v1401)
	v1402 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1402
	SCZO = cond(v1402)
	v1403 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1403
	SCZO = cond(v1403)
	v1404 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1404
	SCZO = cond(v1404)
	v1405 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1405
	SCZO = cond(v1405)
	v1406 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1406
	SCZO = cond(v1406)
	v1407 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1407
	SCZO = cond(v1407)
	v1408 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1408
	SCZO = cond(v1408)
	v1409 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1409
	SCZO = cond(v1409)
	v1410 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1410
	SCZO = cond(v1410)
	v1411 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1411
	SCZO = cond(v1411)
	v1412 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1412
	SCZO = cond(v1412)
	v1413 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1413
	SCZO = cond(v1413)
	v1414 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1414
	SCZO = cond(v1414)
	v1415 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1415
	SCZO = cond(v1415)
	v1416 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1416
	SCZO = cond(v1416)
	v1417 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1417
	SCZO = cond(v1417)
	v1418 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1418
	SCZO = cond(v1418)
	v1419 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1419
	SCZO = cond(v1419)
	v1420 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1420
	SCZO = cond(v1420)
	v1421 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1421
	SCZO = cond(v1421)
	v1422 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1422
	SCZO = cond(v1422)
	v1423 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1423
	SCZO = cond(v1423)
	v1424 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1424
	SCZO = cond(v1424)
	v1425 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1425
	SCZO = cond(v1425)
	v1426 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1426
	SCZO = cond(v1426)
	v1427 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1427
	SCZO = cond(v1427)
	v1428 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1428
	SCZO = cond(v1428)
	v1429 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1429
	SCZO = cond(v1429)
	v1430 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1430
	SCZO = cond(v1430)
	v1431 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1431
	SCZO = cond(v1431)
	v1432 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1432
	SCZO = cond(v1432)
	v1433 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1433
	SCZO = cond(v1433)
	v1434 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1434
	SCZO = cond(v1434)
	v1435 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1435
	SCZO = cond(v1435)
	v1436 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1436
	SCZO = cond(v1436)
	v1437 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1437
	SCZO = cond(v1437)
	v1438 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1438
	SCZO = cond(v1438)
	v1439 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1439
	SCZO = cond(v1439)
	v1440 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1440
	SCZO = cond(v1440)
	v1441 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1441
	SCZO = cond(v1441)
	v1442 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1442
	SCZO = cond(v1442)
	v1443 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1443
	SCZO = cond(v1443)
	v1444 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1444
	SCZO = cond(v1444)
	v1445 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1445
	SCZO = cond(v1445)
	v1446 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1446
	SCZO = cond(v1446)
	v1447 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1447
	SCZO = cond(v1447)
	v1448 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1448
	SCZO = cond(v1448)
	v1449 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1449
	SCZO = cond(v1449)
	v1450 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1450
	SCZO = cond(v1450)
	v1451 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1451
	SCZO = cond(v1451)
	v1452 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1452
	SCZO = cond(v1452)
	v1453 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1453
	SCZO = cond(v1453)
	v1454 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1454
	SCZO = cond(v1454)
	v1455 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1455
	SCZO = cond(v1455)
	v1456 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1456
	SCZO = cond(v1456)
	v1457 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1457
	SCZO = cond(v1457)
	v1458 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1458
	SCZO = cond(v1458)
	v1459 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1459
	SCZO = cond(v1459)
	v1460 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1460
	SCZO = cond(v1460)
	v1461 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1461
	SCZO = cond(v1461)
	v1462 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1462
	SCZO = cond(v1462)
	v1463 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1463
	SCZO = cond(v1463)
	v1464 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1464
	SCZO = cond(v1464)
	v1465 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1465
	SCZO = cond(v1465)
	v1466 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1466
	SCZO = cond(v1466)
	v1467 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1467
	SCZO = cond(v1467)
	v1468 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1468
	SCZO = cond(v1468)
	v1469 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1469
	SCZO = cond(v1469)
	v1470 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1470
	SCZO = cond(v1470)
	v1471 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1471
	SCZO = cond(v1471)
	v1472 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1472
	SCZO = cond(v1472)
	v1473 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1473
	SCZO = cond(v1473)
	v1474 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1474
	SCZO = cond(v1474)
	v1475 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1475
	SCZO = cond(v1475)
	v1476 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1476
	SCZO = cond(v1476)
	v1477 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1477
	SCZO = cond(v1477)
	v1478 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1478
	SCZO = cond(v1478)
	v1479 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1479
	SCZO = cond(v1479)
	v1480 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1480
	SCZO = cond(v1480)
	v1481 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1481
	SCZO = cond(v1481)
	v1482 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1482
	SCZO = cond(v1482)
	v1483 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1483
	SCZO = cond(v1483)
	v1484 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1484
	SCZO = cond(v1484)
	v1485 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1485
	SCZO = cond(v1485)
	v1486 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1486
	SCZO = cond(v1486)
	v1487 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1487
	SCZO = cond(v1487)
	v1488 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1488
	SCZO = cond(v1488)
	v1489 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1489
	SCZO = cond(v1489)
	v1490 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1490
	SCZO = cond(v1490)
	v1491 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1491
	SCZO = cond(v1491)
	v1492 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1492
	SCZO = cond(v1492)
	v1493 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1493
	SCZO = cond(v1493)
	v1494 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1494
	SCZO = cond(v1494)
	v1495 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1495
	SCZO = cond(v1495)
	v1496 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1496
	SCZO = cond(v1496)
	v1497 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1497
	SCZO = cond(v1497)
	v1498 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1498
	SCZO = cond(v1498)
	v1499 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1499
	SCZO = cond(v1499)
	v1500 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1500
	SCZO = cond(v1500)
	v1501 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1501
	SCZO = cond(v1501)
	v1502 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1502
	SCZO = cond(v1502)
	v1503 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1503
	SCZO = cond(v1503)
	v1504 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1504
	SCZO = cond(v1504)
	v1505 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1505
	SCZO = cond(v1505)
	v1506 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1506
	SCZO = cond(v1506)
	v1507 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1507
	SCZO = cond(v1507)
	v1508 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1508
	SCZO = cond(v1508)
	v1509 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1509
	SCZO = cond(v1509)
	v1510 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1510
	SCZO = cond(v1510)
	v1511 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1511
	SCZO = cond(v1511)
	v1512 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1512
	SCZO = cond(v1512)
	v1513 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1513
	SCZO = cond(v1513)
	v1514 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1514
	SCZO = cond(v1514)
	v1515 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1515
	SCZO = cond(v1515)
	v1516 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1516
	SCZO = cond(v1516)
	v1517 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1517
	SCZO = cond(v1517)
	v1518 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1518
	SCZO = cond(v1518)
	v1519 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1519
	SCZO = cond(v1519)
	v1520 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1520
	SCZO = cond(v1520)
	v1521 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1521
	SCZO = cond(v1521)
	v1522 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1522
	SCZO = cond(v1522)
	v1523 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1523
	SCZO = cond(v1523)
	v1524 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1524
	SCZO = cond(v1524)
	v1525 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1525
	SCZO = cond(v1525)
	v1526 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1526
	SCZO = cond(v1526)
	v1527 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1527
	SCZO = cond(v1527)
	v1528 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1528
	SCZO = cond(v1528)
	v1529 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1529
	SCZO = cond(v1529)
	v1530 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1530
	SCZO = cond(v1530)
	v1531 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1531
	SCZO = cond(v1531)
	v1532 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1532
	SCZO = cond(v1532)
	v1533 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1533
	SCZO = cond(v1533)
	v1534 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1534
	SCZO = cond(v1534)
	v1535 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1535
	SCZO = cond(v1535)
	v1536 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1536
	SCZO = cond(v1536)
	v1537 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1537
	SCZO = cond(v1537)
	v1538 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1538
	SCZO = cond(v1538)
	v1539 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1539
	SCZO = cond(v1539)
	v1540 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1540
	SCZO = cond(v1540)
	v1541 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1541
	SCZO = cond(v1541)
	v1542 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1542
	SCZO = cond(v1542)
	v1543 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1543
	SCZO = cond(v1543)
	v1544 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1544
	SCZO = cond(v1544)
	v1545 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1545
	SCZO = cond(v1545)
	v1546 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1546
	SCZO = cond(v1546)
	v1547 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1547
	SCZO = cond(v1547)
	v1548 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1548
	SCZO = cond(v1548)
	v1549 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1549
	SCZO = cond(v1549)
	v1550 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1550
	SCZO = cond(v1550)
	v1551 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1551
	SCZO = cond(v1551)
	v1552 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1552
	SCZO = cond(v1552)
	v1553 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1553
	SCZO = cond(v1553)
	v1554 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1554
	SCZO = cond(v1554)
	v1555 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1555
	SCZO = cond(v1555)
	v1556 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1556
	SCZO = cond(v1556)
	v1557 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1557
	SCZO = cond(v1557)
	v1558 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1558
	SCZO = cond(v1558)
	v1559 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1559
	SCZO = cond(v1559)
	v1560 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1560
	SCZO = cond(v1560)
	v1561 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1561
	SCZO = cond(v1561)
	v1562 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1562
	SCZO = cond(v1562)
	v1563 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1563
	SCZO = cond(v1563)
	v1564 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1564
	SCZO = cond(v1564)
	v1565 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1565
	SCZO = cond(v1565)
	v1566 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1566
	SCZO = cond(v1566)
	v1567 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1567
	SCZO = cond(v1567)
	v1568 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1568
	SCZO = cond(v1568)
	v1569 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1569
	SCZO = cond(v1569)
	v1570 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1570
	SCZO = cond(v1570)
	v1571 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1571
	SCZO = cond(v1571)
	v1572 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1572
	SCZO = cond(v1572)
	v1573 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1573
	SCZO = cond(v1573)
	v1574 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1574
	SCZO = cond(v1574)
	v1575 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1575
	SCZO = cond(v1575)
	v1576 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1576
	SCZO = cond(v1576)
	v1577 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1577
	SCZO = cond(v1577)
	v1578 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1578
	SCZO = cond(v1578)
	v1579 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1579
	SCZO = cond(v1579)
	v1580 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1580
	SCZO = cond(v1580)
	v1581 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1581
	SCZO = cond(v1581)
	v1582 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1582
	SCZO = cond(v1582)
	v1583 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1583
	SCZO = cond(v1583)
	v1584 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1584
	SCZO = cond(v1584)
	v1585 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1585
	SCZO = cond(v1585)
	v1586 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1586
	SCZO = cond(v1586)
	v1587 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1587
	SCZO = cond(v1587)
	v1588 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1588
	SCZO = cond(v1588)
	v1589 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1589
	SCZO = cond(v1589)
	v1590 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1590
	SCZO = cond(v1590)
	v1591 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1591
	SCZO = cond(v1591)
	v1592 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1592
	SCZO = cond(v1592)
	v1593 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1593
	SCZO = cond(v1593)
	v1594 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1594
	SCZO = cond(v1594)
	v1595 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1595
	SCZO = cond(v1595)
	v1596 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1596
	SCZO = cond(v1596)
	v1597 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1597
	SCZO = cond(v1597)
	v1598 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1598
	SCZO = cond(v1598)
	v1599 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1599
	SCZO = cond(v1599)
	v1600 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1600
	SCZO = cond(v1600)
	v1601 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1601
	SCZO = cond(v1601)
	v1602 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1602
	SCZO = cond(v1602)
	v1603 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1603
	SCZO = cond(v1603)
	v1604 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1604
	SCZO = cond(v1604)
	v1605 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1605
	SCZO = cond(v1605)
	v1606 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1606
	SCZO = cond(v1606)
	v1607 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1607
	SCZO = cond(v1607)
	v1608 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1608
	SCZO = cond(v1608)
	v1609 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1609
	SCZO = cond(v1609)
	v1610 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1610
	SCZO = cond(v1610)
	v1611 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1611
	SCZO = cond(v1611)
	v1612 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1612
	SCZO = cond(v1612)
	v1613 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1613
	SCZO = cond(v1613)
	v1614 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1614
	SCZO = cond(v1614)
	v1615 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1615
	SCZO = cond(v1615)
	v1616 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1616
	SCZO = cond(v1616)
	v1617 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1617
	SCZO = cond(v1617)
	v1618 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1618
	SCZO = cond(v1618)
	v1619 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1619
	SCZO = cond(v1619)
	v1620 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1620
	SCZO = cond(v1620)
	v1621 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1621
	SCZO = cond(v1621)
	v1622 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1622
	SCZO = cond(v1622)
	v1623 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1623
	SCZO = cond(v1623)
	v1624 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1624
	SCZO = cond(v1624)
	v1625 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1625
	SCZO = cond(v1625)
	v1626 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1626
	SCZO = cond(v1626)
	v1627 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1627
	SCZO = cond(v1627)
	v1628 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1628
	SCZO = cond(v1628)
	v1629 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1629
	SCZO = cond(v1629)
	v1630 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1630
	SCZO = cond(v1630)
	v1631 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1631
	SCZO = cond(v1631)
	v1632 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1632
	SCZO = cond(v1632)
	v1633 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1633
	SCZO = cond(v1633)
	v1634 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1634
	SCZO = cond(v1634)
	v1635 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1635
	SCZO = cond(v1635)
	v1636 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1636
	SCZO = cond(v1636)
	v1637 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1637
	SCZO = cond(v1637)
	v1638 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1638
	SCZO = cond(v1638)
	v1639 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1639
	SCZO = cond(v1639)
	v1640 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1640
	SCZO = cond(v1640)
	v1641 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1641
	SCZO = cond(v1641)
	v1642 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1642
	SCZO = cond(v1642)
	v1643 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1643
	SCZO = cond(v1643)
	v1644 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1644
	SCZO = cond(v1644)
	v1645 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1645
	SCZO = cond(v1645)
	v1646 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1646
	SCZO = cond(v1646)
	v1647 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1647
	SCZO = cond(v1647)
	v1648 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1648
	SCZO = cond(v1648)
	v1649 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1649
	SCZO = cond(v1649)
	v1650 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1650
	SCZO = cond(v1650)
	v1651 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1651
	SCZO = cond(v1651)
	v1652 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1652
	SCZO = cond(v1652)
	v1653 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1653
	SCZO = cond(v1653)
	v1654 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1654
	SCZO = cond(v1654)
	v1655 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1655
	SCZO = cond(v1655)
	v1656 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1656
	SCZO = cond(v1656)
	v1657 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1657
	SCZO = cond(v1657)
	v1658 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1658
	SCZO = cond(v1658)
	v1659 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1659
	SCZO = cond(v1659)
	v1660 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1660
	SCZO = cond(v1660)
	v1661 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1661
	SCZO = cond(v1661)
	v1662 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1662
	SCZO = cond(v1662)
	v1663 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1663
	SCZO = cond(v1663)
	v1664 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1664
	SCZO = cond(v1664)
	v1665 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1665
	SCZO = cond(v1665)
	v1666 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1666
	SCZO = cond(v1666)
	v1667 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1667
	SCZO = cond(v1667)
	v1668 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1668
	SCZO = cond(v1668)
	v1669 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1669
	SCZO = cond(v1669)
	v1670 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1670
	SCZO = cond(v1670)
	v1671 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1671
	SCZO = cond(v1671)
	v1672 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1672
	SCZO = cond(v1672)
	v1673 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1673
	SCZO = cond(v1673)
	v1674 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1674
	SCZO = cond(v1674)
	v1675 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1675
	SCZO = cond(v1675)
	v1676 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1676
	SCZO = cond(v1676)
	v1677 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1677
	SCZO = cond(v1677)
	v1678 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1678
	SCZO = cond(v1678)
	v1679 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1679
	SCZO = cond(v1679)
	v1680 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1680
	SCZO = cond(v1680)
	v1681 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1681
	SCZO = cond(v1681)
	v1682 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1682
	SCZO = cond(v1682)
	v1683 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1683
	SCZO = cond(v1683)
	v1684 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1684
	SCZO = cond(v1684)
	v1685 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1685
	SCZO = cond(v1685)
	v1686 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1686
	SCZO = cond(v1686)
	v1687 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1687
	SCZO = cond(v1687)
	v1688 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1688
	SCZO = cond(v1688)
	v1689 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1689
	SCZO = cond(v1689)
	v1690 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1690
	SCZO = cond(v1690)
	v1691 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1691
	SCZO = cond(v1691)
	v1692 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1692
	SCZO = cond(v1692)
	v1693 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1693
	SCZO = cond(v1693)
	v1694 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1694
	SCZO = cond(v1694)
	v1695 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1695
	SCZO = cond(v1695)
	v1696 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1696
	SCZO = cond(v1696)
	v1697 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1697
	SCZO = cond(v1697)
	v1698 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1698
	SCZO = cond(v1698)
	v1699 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1699
	SCZO = cond(v1699)
	v1700 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1700
	SCZO = cond(v1700)
	v1701 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1701
	SCZO = cond(v1701)
	v1702 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1702
	SCZO = cond(v1702)
	v1703 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1703
	SCZO = cond(v1703)
	v1704 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1704
	SCZO = cond(v1704)
	v1705 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1705
	SCZO = cond(v1705)
	v1706 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1706
	SCZO = cond(v1706)
	v1707 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1707
	SCZO = cond(v1707)
	v1708 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1708
	SCZO = cond(v1708)
	v1709 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1709
	SCZO = cond(v1709)
	v1710 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1710
	SCZO = cond(v1710)
	v1711 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1711
	SCZO = cond(v1711)
	v1712 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1712
	SCZO = cond(v1712)
	v1713 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1713
	SCZO = cond(v1713)
	v1714 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1714
	SCZO = cond(v1714)
	v1715 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1715
	SCZO = cond(v1715)
	v1716 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1716
	SCZO = cond(v1716)
	v1717 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1717
	SCZO = cond(v1717)
	v1718 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1718
	SCZO = cond(v1718)
	v1719 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1719
	SCZO = cond(v1719)
	v1720 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1720
	SCZO = cond(v1720)
	v1721 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1721
	SCZO = cond(v1721)
	v1722 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1722
	SCZO = cond(v1722)
	v1723 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1723
	SCZO = cond(v1723)
	v1724 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1724
	SCZO = cond(v1724)
	v1725 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1725
	SCZO = cond(v1725)
	v1726 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1726
	SCZO = cond(v1726)
	v1727 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1727
	SCZO = cond(v1727)
	v1728 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1728
	SCZO = cond(v1728)
	v1729 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1729
	SCZO = cond(v1729)
	v1730 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1730
	SCZO = cond(v1730)
	v1731 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1731
	SCZO = cond(v1731)
	v1732 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1732
	SCZO = cond(v1732)
	v1733 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1733
	SCZO = cond(v1733)
	v1734 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1734
	SCZO = cond(v1734)
	v1735 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1735
	SCZO = cond(v1735)
	v1736 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1736
	SCZO = cond(v1736)
	v1737 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1737
	SCZO = cond(v1737)
	v1738 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1738
	SCZO = cond(v1738)
	v1739 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1739
	SCZO = cond(v1739)
	v1740 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1740
	SCZO = cond(v1740)
	v1741 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1741
	SCZO = cond(v1741)
	v1742 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1742
	SCZO = cond(v1742)
	v1743 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1743
	SCZO = cond(v1743)
	v1744 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1744
	SCZO = cond(v1744)
	v1745 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1745
	SCZO = cond(v1745)
	v1746 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1746
	SCZO = cond(v1746)
	v1747 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1747
	SCZO = cond(v1747)
	v1748 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1748
	SCZO = cond(v1748)
	v1749 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1749
	SCZO = cond(v1749)
	v1750 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1750
	SCZO = cond(v1750)
	v1751 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1751
	SCZO = cond(v1751)
	v1752 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1752
	SCZO = cond(v1752)
	v1753 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1753
	SCZO = cond(v1753)
	v1754 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1754
	SCZO = cond(v1754)
	v1755 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1755
	SCZO = cond(v1755)
	v1756 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1756
	SCZO = cond(v1756)
	v1757 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1757
	SCZO = cond(v1757)
	v1758 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1758
	SCZO = cond(v1758)
	v1759 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1759
	SCZO = cond(v1759)
	v1760 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1760
	SCZO = cond(v1760)
	v1761 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1761
	SCZO = cond(v1761)
	v1762 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1762
	SCZO = cond(v1762)
	v1763 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1763
	SCZO = cond(v1763)
	v1764 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1764
	SCZO = cond(v1764)
	v1765 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1765
	SCZO = cond(v1765)
	v1766 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1766
	SCZO = cond(v1766)
	v1767 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1767
	SCZO = cond(v1767)
	v1768 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1768
	SCZO = cond(v1768)
	v1769 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1769
	SCZO = cond(v1769)
	v1770 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1770
	SCZO = cond(v1770)
	v1771 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1771
	SCZO = cond(v1771)
	v1772 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1772
	SCZO = cond(v1772)
	v1773 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1773
	SCZO = cond(v1773)
	v1774 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1774
	SCZO = cond(v1774)
	v1775 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1775
	SCZO = cond(v1775)
	v1776 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1776
	SCZO = cond(v1776)
	v1777 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1777
	SCZO = cond(v1777)
	v1778 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1778
	SCZO = cond(v1778)
	v1779 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1779
	SCZO = cond(v1779)
	v1780 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1780
	SCZO = cond(v1780)
	v1781 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1781
	SCZO = cond(v1781)
	v1782 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1782
	SCZO = cond(v1782)
	v1783 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1783
	SCZO = cond(v1783)
	v1784 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1784
	SCZO = cond(v1784)
	v1785 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1785
	SCZO = cond(v1785)
	v1786 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1786
	SCZO = cond(v1786)
	v1787 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1787
	SCZO = cond(v1787)
	v1788 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1788
	SCZO = cond(v1788)
	v1789 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1789
	SCZO = cond(v1789)
	v1790 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1790
	SCZO = cond(v1790)
	v1791 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1791
	SCZO = cond(v1791)
	v1792 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1792
	SCZO = cond(v1792)
	v1793 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1793
	SCZO = cond(v1793)
	v1794 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1794
	SCZO = cond(v1794)
	v1795 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1795
	SCZO = cond(v1795)
	v1796 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1796
	SCZO = cond(v1796)
	v1797 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1797
	SCZO = cond(v1797)
	v1798 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1798
	SCZO = cond(v1798)
	v1799 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1799
	SCZO = cond(v1799)
	v1800 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1800
	SCZO = cond(v1800)
	v1801 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1801
	SCZO = cond(v1801)
	v1802 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1802
	SCZO = cond(v1802)
	v1803 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1803
	SCZO = cond(v1803)
	v1804 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1804
	SCZO = cond(v1804)
	v1805 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1805
	SCZO = cond(v1805)
	v1806 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1806
	SCZO = cond(v1806)
	v1807 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1807
	SCZO = cond(v1807)
	v1808 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1808
	SCZO = cond(v1808)
	v1809 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1809
	SCZO = cond(v1809)
	v1810 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1810
	SCZO = cond(v1810)
	v1811 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1811
	SCZO = cond(v1811)
	v1812 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1812
	SCZO = cond(v1812)
	v1813 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1813
	SCZO = cond(v1813)
	v1814 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1814
	SCZO = cond(v1814)
	v1815 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1815
	SCZO = cond(v1815)
	v1816 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1816
	SCZO = cond(v1816)
	v1817 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1817
	SCZO = cond(v1817)
	v1818 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1818
	SCZO = cond(v1818)
	v1819 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1819
	SCZO = cond(v1819)
	v1820 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1820
	SCZO = cond(v1820)
	v1821 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1821
	SCZO = cond(v1821)
	v1822 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1822
	SCZO = cond(v1822)
	v1823 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1823
	SCZO = cond(v1823)
	goto l0177_6FFE_thunk_fn01AF_0000
	// succ:  l0177_6FFE_thunk_fn01AF_0000
l0177_6B05_thunk_fn0177_6B06:
	call fn0177_6B06 (retsize: 4;)
	return
	// succ:  fn0177_68E9_exit
l0177_6FFE_thunk_fn01AF_0000:
	call fn01AF_0000 (retsize: 4;)
	return
	// succ:  fn0177_68E9_exit
fn0177_68E9_exit:


// fn0177_6B06
// Return size: 4
void fn0177_6B06()
fn0177_6B06_entry:
	// succ:  l0177_6B06
l0177_6B06:
	sp = fp
	v7 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v7
	SCZO = cond(v7)
	v9 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v9
	SCZO = cond(v9)
	v10 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v10
	SCZO = cond(v10)
	v11 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v11
	SCZO = cond(v11)
	v12 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v12
	SCZO = cond(v12)
	v13 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v13
	SCZO = cond(v13)
	v14 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v14
	SCZO = cond(v14)
	v15 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v15
	SCZO = cond(v15)
	v16 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v16
	SCZO = cond(v16)
	v17 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v17
	SCZO = cond(v17)
	v18 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v18
	SCZO = cond(v18)
	v19 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v19
	SCZO = cond(v19)
	v20 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v20
	SCZO = cond(v20)
	v21 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v21
	SCZO = cond(v21)
	v22 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v22
	SCZO = cond(v22)
	v23 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v23
	SCZO = cond(v23)
	v24 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v24
	SCZO = cond(v24)
	v25 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v25
	SCZO = cond(v25)
	v26 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v26
	SCZO = cond(v26)
	v27 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v27
	SCZO = cond(v27)
	v28 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v28
	SCZO = cond(v28)
	v29 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v29
	SCZO = cond(v29)
	v30 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v30
	SCZO = cond(v30)
	v31 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v31
	SCZO = cond(v31)
	v32 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v32
	SCZO = cond(v32)
	v33 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v33
	SCZO = cond(v33)
	v34 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v34
	SCZO = cond(v34)
	v35 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v35
	SCZO = cond(v35)
	v36 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v36
	SCZO = cond(v36)
	v37 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v37
	SCZO = cond(v37)
	v38 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v38
	SCZO = cond(v38)
	v39 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v39
	SCZO = cond(v39)
	v40 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v40
	SCZO = cond(v40)
	v41 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v41
	SCZO = cond(v41)
	v42 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v42
	SCZO = cond(v42)
	v43 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v43
	SCZO = cond(v43)
	v44 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v44
	SCZO = cond(v44)
	v45 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v45
	SCZO = cond(v45)
	v46 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v46
	SCZO = cond(v46)
	v47 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v47
	SCZO = cond(v47)
	v48 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v48
	SCZO = cond(v48)
	v49 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v49
	SCZO = cond(v49)
	v50 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v50
	SCZO = cond(v50)
	v51 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v51
	SCZO = cond(v51)
	v52 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v52
	SCZO = cond(v52)
	v53 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v53
	SCZO = cond(v53)
	v54 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v54
	SCZO = cond(v54)
	v55 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v55
	SCZO = cond(v55)
	v56 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v56
	SCZO = cond(v56)
	v57 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v57
	SCZO = cond(v57)
	v58 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v58
	SCZO = cond(v58)
	v59 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v59
	SCZO = cond(v59)
	v60 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v60
	SCZO = cond(v60)
	v61 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v61
	SCZO = cond(v61)
	v62 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v62
	SCZO = cond(v62)
	v63 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v63
	SCZO = cond(v63)
	v64 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v64
	SCZO = cond(v64)
	v65 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v65
	SCZO = cond(v65)
	v66 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v66
	SCZO = cond(v66)
	v67 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v67
	SCZO = cond(v67)
	v68 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v68
	SCZO = cond(v68)
	v69 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v69
	SCZO = cond(v69)
	v70 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v70
	SCZO = cond(v70)
	v71 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v71
	SCZO = cond(v71)
	v72 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v72
	SCZO = cond(v72)
	v73 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v73
	SCZO = cond(v73)
	v74 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v74
	SCZO = cond(v74)
	v75 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v75
	SCZO = cond(v75)
	v76 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v76
	SCZO = cond(v76)
	v77 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v77
	SCZO = cond(v77)
	v78 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v78
	SCZO = cond(v78)
	v79 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v79
	SCZO = cond(v79)
	v80 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v80
	SCZO = cond(v80)
	v81 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v81
	SCZO = cond(v81)
	v82 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v82
	SCZO = cond(v82)
	v83 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v83
	SCZO = cond(v83)
	v84 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v84
	SCZO = cond(v84)
	v85 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v85
	SCZO = cond(v85)
	v86 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v86
	SCZO = cond(v86)
	v87 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v87
	SCZO = cond(v87)
	v88 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v88
	SCZO = cond(v88)
	v89 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v89
	SCZO = cond(v89)
	v90 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v90
	SCZO = cond(v90)
	v91 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v91
	SCZO = cond(v91)
	v92 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v92
	SCZO = cond(v92)
	v93 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v93
	SCZO = cond(v93)
	v94 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v94
	SCZO = cond(v94)
	v95 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v95
	SCZO = cond(v95)
	v96 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v96
	SCZO = cond(v96)
	v97 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v97
	SCZO = cond(v97)
	v98 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v98
	SCZO = cond(v98)
	v99 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v99
	SCZO = cond(v99)
	v100 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v100
	SCZO = cond(v100)
	v101 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v101
	SCZO = cond(v101)
	v102 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v102
	SCZO = cond(v102)
	v103 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v103
	SCZO = cond(v103)
	v104 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v104
	SCZO = cond(v104)
	v105 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v105
	SCZO = cond(v105)
	v106 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v106
	SCZO = cond(v106)
	v107 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v107
	SCZO = cond(v107)
	v108 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v108
	SCZO = cond(v108)
	v109 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v109
	SCZO = cond(v109)
	v110 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v110
	SCZO = cond(v110)
	v111 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v111
	SCZO = cond(v111)
	v112 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v112
	SCZO = cond(v112)
	v113 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v113
	SCZO = cond(v113)
	v114 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v114
	SCZO = cond(v114)
	v115 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v115
	SCZO = cond(v115)
	v116 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v116
	SCZO = cond(v116)
	v117 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v117
	SCZO = cond(v117)
	v118 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v118
	SCZO = cond(v118)
	v119 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v119
	SCZO = cond(v119)
	v120 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v120
	SCZO = cond(v120)
	v121 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v121
	SCZO = cond(v121)
	v122 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v122
	SCZO = cond(v122)
	v123 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v123
	SCZO = cond(v123)
	v124 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v124
	SCZO = cond(v124)
	v125 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v125
	SCZO = cond(v125)
	v126 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v126
	SCZO = cond(v126)
	v127 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v127
	SCZO = cond(v127)
	v128 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v128
	SCZO = cond(v128)
	v129 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v129
	SCZO = cond(v129)
	v130 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v130
	SCZO = cond(v130)
	v131 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v131
	SCZO = cond(v131)
	v132 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v132
	SCZO = cond(v132)
	v133 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v133
	SCZO = cond(v133)
	v134 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v134
	SCZO = cond(v134)
	v135 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v135
	SCZO = cond(v135)
	v136 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v136
	SCZO = cond(v136)
	v137 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v137
	SCZO = cond(v137)
	v138 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v138
	SCZO = cond(v138)
	v139 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v139
	SCZO = cond(v139)
	v140 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v140
	SCZO = cond(v140)
	v141 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v141
	SCZO = cond(v141)
	v142 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v142
	SCZO = cond(v142)
	v143 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v143
	SCZO = cond(v143)
	v144 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v144
	SCZO = cond(v144)
	v145 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v145
	SCZO = cond(v145)
	v146 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v146
	SCZO = cond(v146)
	v147 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v147
	SCZO = cond(v147)
	v148 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v148
	SCZO = cond(v148)
	v149 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v149
	SCZO = cond(v149)
	v150 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v150
	SCZO = cond(v150)
	v151 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v151
	SCZO = cond(v151)
	v152 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v152
	SCZO = cond(v152)
	v153 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v153
	SCZO = cond(v153)
	v154 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v154
	SCZO = cond(v154)
	v155 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v155
	SCZO = cond(v155)
	v156 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v156
	SCZO = cond(v156)
	v157 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v157
	SCZO = cond(v157)
	v158 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v158
	SCZO = cond(v158)
	v159 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v159
	SCZO = cond(v159)
	v160 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v160
	SCZO = cond(v160)
	v161 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v161
	SCZO = cond(v161)
	v162 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v162
	SCZO = cond(v162)
	v163 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v163
	SCZO = cond(v163)
	v164 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v164
	SCZO = cond(v164)
	v165 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v165
	SCZO = cond(v165)
	v166 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v166
	SCZO = cond(v166)
	v167 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v167
	SCZO = cond(v167)
	v168 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v168
	SCZO = cond(v168)
	v169 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v169
	SCZO = cond(v169)
	v170 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v170
	SCZO = cond(v170)
	v171 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v171
	SCZO = cond(v171)
	v172 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v172
	SCZO = cond(v172)
	v173 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v173
	SCZO = cond(v173)
	v174 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v174
	SCZO = cond(v174)
	v175 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v175
	SCZO = cond(v175)
	v176 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v176
	SCZO = cond(v176)
	v177 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v177
	SCZO = cond(v177)
	v178 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v178
	SCZO = cond(v178)
	v179 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v179
	SCZO = cond(v179)
	v180 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v180
	SCZO = cond(v180)
	v181 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v181
	SCZO = cond(v181)
	v182 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v182
	SCZO = cond(v182)
	v183 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v183
	SCZO = cond(v183)
	v184 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v184
	SCZO = cond(v184)
	v185 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v185
	SCZO = cond(v185)
	v186 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v186
	SCZO = cond(v186)
	v187 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v187
	SCZO = cond(v187)
	v188 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v188
	SCZO = cond(v188)
	v189 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v189
	SCZO = cond(v189)
	v190 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v190
	SCZO = cond(v190)
	v191 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v191
	SCZO = cond(v191)
	v192 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v192
	SCZO = cond(v192)
	v193 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v193
	SCZO = cond(v193)
	v194 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v194
	SCZO = cond(v194)
	v195 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v195
	SCZO = cond(v195)
	v196 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v196
	SCZO = cond(v196)
	v197 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v197
	SCZO = cond(v197)
	v198 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v198
	SCZO = cond(v198)
	v199 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v199
	SCZO = cond(v199)
	v200 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v200
	SCZO = cond(v200)
	v201 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v201
	SCZO = cond(v201)
	v202 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v202
	SCZO = cond(v202)
	v203 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v203
	SCZO = cond(v203)
	v204 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v204
	SCZO = cond(v204)
	v205 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v205
	SCZO = cond(v205)
	v206 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v206
	SCZO = cond(v206)
	v207 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v207
	SCZO = cond(v207)
	v208 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v208
	SCZO = cond(v208)
	v209 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v209
	SCZO = cond(v209)
	v210 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v210
	SCZO = cond(v210)
	v211 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v211
	SCZO = cond(v211)
	v212 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v212
	SCZO = cond(v212)
	v213 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v213
	SCZO = cond(v213)
	v214 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v214
	SCZO = cond(v214)
	v215 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v215
	SCZO = cond(v215)
	v216 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v216
	SCZO = cond(v216)
	v217 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v217
	SCZO = cond(v217)
	v218 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v218
	SCZO = cond(v218)
	v219 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v219
	SCZO = cond(v219)
	v220 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v220
	SCZO = cond(v220)
	v221 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v221
	SCZO = cond(v221)
	v222 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v222
	SCZO = cond(v222)
	v223 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v223
	SCZO = cond(v223)
	v224 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v224
	SCZO = cond(v224)
	v225 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v225
	SCZO = cond(v225)
	v226 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v226
	SCZO = cond(v226)
	v227 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v227
	SCZO = cond(v227)
	v228 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v228
	SCZO = cond(v228)
	v229 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v229
	SCZO = cond(v229)
	v230 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v230
	SCZO = cond(v230)
	v231 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v231
	SCZO = cond(v231)
	v232 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v232
	SCZO = cond(v232)
	v233 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v233
	SCZO = cond(v233)
	v234 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v234
	SCZO = cond(v234)
	v235 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v235
	SCZO = cond(v235)
	v236 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v236
	SCZO = cond(v236)
	v237 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v237
	SCZO = cond(v237)
	v238 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v238
	SCZO = cond(v238)
	v239 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v239
	SCZO = cond(v239)
	v240 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v240
	SCZO = cond(v240)
	v241 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v241
	SCZO = cond(v241)
	v242 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v242
	SCZO = cond(v242)
	v243 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v243
	SCZO = cond(v243)
	v244 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v244
	SCZO = cond(v244)
	v245 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v245
	SCZO = cond(v245)
	v246 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v246
	SCZO = cond(v246)
	v247 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v247
	SCZO = cond(v247)
	v248 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v248
	SCZO = cond(v248)
	v249 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v249
	SCZO = cond(v249)
	v250 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v250
	SCZO = cond(v250)
	v251 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v251
	SCZO = cond(v251)
	v252 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v252
	SCZO = cond(v252)
	v253 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v253
	SCZO = cond(v253)
	v254 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v254
	SCZO = cond(v254)
	v255 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v255
	SCZO = cond(v255)
	v256 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v256
	SCZO = cond(v256)
	v257 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v257
	SCZO = cond(v257)
	v258 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v258
	SCZO = cond(v258)
	v259 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v259
	SCZO = cond(v259)
	v260 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v260
	SCZO = cond(v260)
	v261 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v261
	SCZO = cond(v261)
	v262 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v262
	SCZO = cond(v262)
	v263 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v263
	SCZO = cond(v263)
	v264 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v264
	SCZO = cond(v264)
	v265 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v265
	SCZO = cond(v265)
	v266 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v266
	SCZO = cond(v266)
	v267 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v267
	SCZO = cond(v267)
	v268 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v268
	SCZO = cond(v268)
	v269 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v269
	SCZO = cond(v269)
	v270 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v270
	SCZO = cond(v270)
	v271 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v271
	SCZO = cond(v271)
	v272 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v272
	SCZO = cond(v272)
	v273 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v273
	SCZO = cond(v273)
	v274 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v274
	SCZO = cond(v274)
	v275 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v275
	SCZO = cond(v275)
	v276 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v276
	SCZO = cond(v276)
	v277 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v277
	SCZO = cond(v277)
	v278 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v278
	SCZO = cond(v278)
	v279 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v279
	SCZO = cond(v279)
	v280 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v280
	SCZO = cond(v280)
	v281 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v281
	SCZO = cond(v281)
	v282 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v282
	SCZO = cond(v282)
	v283 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v283
	SCZO = cond(v283)
	v284 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v284
	SCZO = cond(v284)
	v285 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v285
	SCZO = cond(v285)
	v286 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v286
	SCZO = cond(v286)
	v287 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v287
	SCZO = cond(v287)
	v288 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v288
	SCZO = cond(v288)
	v289 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v289
	SCZO = cond(v289)
	v290 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v290
	SCZO = cond(v290)
	v291 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v291
	SCZO = cond(v291)
	v292 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v292
	SCZO = cond(v292)
	v293 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v293
	SCZO = cond(v293)
	v294 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v294
	SCZO = cond(v294)
	v295 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v295
	SCZO = cond(v295)
	v296 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v296
	SCZO = cond(v296)
	v297 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v297
	SCZO = cond(v297)
	v298 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v298
	SCZO = cond(v298)
	v299 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v299
	SCZO = cond(v299)
	v300 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v300
	SCZO = cond(v300)
	v301 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v301
	SCZO = cond(v301)
	v302 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v302
	SCZO = cond(v302)
	v303 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v303
	SCZO = cond(v303)
	v304 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v304
	SCZO = cond(v304)
	v305 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v305
	SCZO = cond(v305)
	v306 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v306
	SCZO = cond(v306)
	v307 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v307
	SCZO = cond(v307)
	v308 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v308
	SCZO = cond(v308)
	v309 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v309
	SCZO = cond(v309)
	v310 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v310
	SCZO = cond(v310)
	v311 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v311
	SCZO = cond(v311)
	v312 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v312
	SCZO = cond(v312)
	v313 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v313
	SCZO = cond(v313)
	v314 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v314
	SCZO = cond(v314)
	v315 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v315
	SCZO = cond(v315)
	v316 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v316
	SCZO = cond(v316)
	v317 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v317
	SCZO = cond(v317)
	v318 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v318
	SCZO = cond(v318)
	v319 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v319
	SCZO = cond(v319)
	v320 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v320
	SCZO = cond(v320)
	v321 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v321
	SCZO = cond(v321)
	v322 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v322
	SCZO = cond(v322)
	v323 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v323
	SCZO = cond(v323)
	v324 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v324
	SCZO = cond(v324)
	v325 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v325
	SCZO = cond(v325)
	v326 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v326
	SCZO = cond(v326)
	v327 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v327
	SCZO = cond(v327)
	v328 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v328
	SCZO = cond(v328)
	v329 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v329
	SCZO = cond(v329)
	v330 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v330
	SCZO = cond(v330)
	v331 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v331
	SCZO = cond(v331)
	v332 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v332
	SCZO = cond(v332)
	v333 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v333
	SCZO = cond(v333)
	v334 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v334
	SCZO = cond(v334)
	v335 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v335
	SCZO = cond(v335)
	v336 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v336
	SCZO = cond(v336)
	v337 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v337
	SCZO = cond(v337)
	v338 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v338
	SCZO = cond(v338)
	v339 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v339
	SCZO = cond(v339)
	v340 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v340
	SCZO = cond(v340)
	v341 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v341
	SCZO = cond(v341)
	v342 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v342
	SCZO = cond(v342)
	v343 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v343
	SCZO = cond(v343)
	v344 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v344
	SCZO = cond(v344)
	v345 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v345
	SCZO = cond(v345)
	v346 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v346
	SCZO = cond(v346)
	v347 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v347
	SCZO = cond(v347)
	v348 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v348
	SCZO = cond(v348)
	v349 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v349
	SCZO = cond(v349)
	v350 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v350
	SCZO = cond(v350)
	v351 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v351
	SCZO = cond(v351)
	v352 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v352
	SCZO = cond(v352)
	v353 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v353
	SCZO = cond(v353)
	v354 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v354
	SCZO = cond(v354)
	v355 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v355
	SCZO = cond(v355)
	v356 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v356
	SCZO = cond(v356)
	v357 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v357
	SCZO = cond(v357)
	v358 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v358
	SCZO = cond(v358)
	v359 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v359
	SCZO = cond(v359)
	v360 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v360
	SCZO = cond(v360)
	v361 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v361
	SCZO = cond(v361)
	v362 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v362
	SCZO = cond(v362)
	v363 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v363
	SCZO = cond(v363)
	v364 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v364
	SCZO = cond(v364)
	v365 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v365
	SCZO = cond(v365)
	v366 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v366
	SCZO = cond(v366)
	v367 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v367
	SCZO = cond(v367)
	v368 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v368
	SCZO = cond(v368)
	v369 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v369
	SCZO = cond(v369)
	v370 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v370
	SCZO = cond(v370)
	v371 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v371
	SCZO = cond(v371)
	v372 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v372
	SCZO = cond(v372)
	v373 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v373
	SCZO = cond(v373)
	v374 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v374
	SCZO = cond(v374)
	v375 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v375
	SCZO = cond(v375)
	v376 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v376
	SCZO = cond(v376)
	v377 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v377
	SCZO = cond(v377)
	v378 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v378
	SCZO = cond(v378)
	v379 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v379
	SCZO = cond(v379)
	v380 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v380
	SCZO = cond(v380)
	v381 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v381
	SCZO = cond(v381)
	v382 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v382
	SCZO = cond(v382)
	v383 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v383
	SCZO = cond(v383)
	v384 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v384
	SCZO = cond(v384)
	v385 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v385
	SCZO = cond(v385)
	v386 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v386
	SCZO = cond(v386)
	v387 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v387
	SCZO = cond(v387)
	v388 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v388
	SCZO = cond(v388)
	v389 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v389
	SCZO = cond(v389)
	v390 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v390
	SCZO = cond(v390)
	v391 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v391
	SCZO = cond(v391)
	v392 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v392
	SCZO = cond(v392)
	v393 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v393
	SCZO = cond(v393)
	v394 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v394
	SCZO = cond(v394)
	v395 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v395
	SCZO = cond(v395)
	v396 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v396
	SCZO = cond(v396)
	v397 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v397
	SCZO = cond(v397)
	v398 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v398
	SCZO = cond(v398)
	v399 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v399
	SCZO = cond(v399)
	v400 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v400
	SCZO = cond(v400)
	v401 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v401
	SCZO = cond(v401)
	v402 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v402
	SCZO = cond(v402)
	v403 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v403
	SCZO = cond(v403)
	v404 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v404
	SCZO = cond(v404)
	v405 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v405
	SCZO = cond(v405)
	v406 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v406
	SCZO = cond(v406)
	v407 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v407
	SCZO = cond(v407)
	v408 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v408
	SCZO = cond(v408)
	v409 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v409
	SCZO = cond(v409)
	v410 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v410
	SCZO = cond(v410)
	v411 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v411
	SCZO = cond(v411)
	v412 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v412
	SCZO = cond(v412)
	v413 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v413
	SCZO = cond(v413)
	v414 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v414
	SCZO = cond(v414)
	v415 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v415
	SCZO = cond(v415)
	v416 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v416
	SCZO = cond(v416)
	v417 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v417
	SCZO = cond(v417)
	v418 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v418
	SCZO = cond(v418)
	v419 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v419
	SCZO = cond(v419)
	v420 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v420
	SCZO = cond(v420)
	v421 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v421
	SCZO = cond(v421)
	v422 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v422
	SCZO = cond(v422)
	v423 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v423
	SCZO = cond(v423)
	v424 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v424
	SCZO = cond(v424)
	v425 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v425
	SCZO = cond(v425)
	v426 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v426
	SCZO = cond(v426)
	v427 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v427
	SCZO = cond(v427)
	v428 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v428
	SCZO = cond(v428)
	v429 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v429
	SCZO = cond(v429)
	v430 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v430
	SCZO = cond(v430)
	v431 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v431
	SCZO = cond(v431)
	v432 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v432
	SCZO = cond(v432)
	v433 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v433
	SCZO = cond(v433)
	v434 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v434
	SCZO = cond(v434)
	v435 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v435
	SCZO = cond(v435)
	v436 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v436
	SCZO = cond(v436)
	v437 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v437
	SCZO = cond(v437)
	v438 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v438
	SCZO = cond(v438)
	v439 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v439
	SCZO = cond(v439)
	v440 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v440
	SCZO = cond(v440)
	v441 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v441
	SCZO = cond(v441)
	v442 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v442
	SCZO = cond(v442)
	v443 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v443
	SCZO = cond(v443)
	v444 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v444
	SCZO = cond(v444)
	v445 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v445
	SCZO = cond(v445)
	v446 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v446
	SCZO = cond(v446)
	v447 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v447
	SCZO = cond(v447)
	v448 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v448
	SCZO = cond(v448)
	v449 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v449
	SCZO = cond(v449)
	v450 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v450
	SCZO = cond(v450)
	v451 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v451
	SCZO = cond(v451)
	v452 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v452
	SCZO = cond(v452)
	v453 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v453
	SCZO = cond(v453)
	v454 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v454
	SCZO = cond(v454)
	v455 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v455
	SCZO = cond(v455)
	v456 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v456
	SCZO = cond(v456)
	v457 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v457
	SCZO = cond(v457)
	v458 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v458
	SCZO = cond(v458)
	v459 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v459
	SCZO = cond(v459)
	v460 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v460
	SCZO = cond(v460)
	v461 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v461
	SCZO = cond(v461)
	v462 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v462
	SCZO = cond(v462)
	v463 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v463
	SCZO = cond(v463)
	v464 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v464
	SCZO = cond(v464)
	v465 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v465
	SCZO = cond(v465)
	v466 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v466
	SCZO = cond(v466)
	v467 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v467
	SCZO = cond(v467)
	v468 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v468
	SCZO = cond(v468)
	v469 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v469
	SCZO = cond(v469)
	v470 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v470
	SCZO = cond(v470)
	v471 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v471
	SCZO = cond(v471)
	v472 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v472
	SCZO = cond(v472)
	v473 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v473
	SCZO = cond(v473)
	v474 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v474
	SCZO = cond(v474)
	v475 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v475
	SCZO = cond(v475)
	v476 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v476
	SCZO = cond(v476)
	v477 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v477
	SCZO = cond(v477)
	v478 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v478
	SCZO = cond(v478)
	v479 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v479
	SCZO = cond(v479)
	v480 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v480
	SCZO = cond(v480)
	v481 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v481
	SCZO = cond(v481)
	v482 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v482
	SCZO = cond(v482)
	v483 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v483
	SCZO = cond(v483)
	v484 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v484
	SCZO = cond(v484)
	v485 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v485
	SCZO = cond(v485)
	v486 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v486
	SCZO = cond(v486)
	v487 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v487
	SCZO = cond(v487)
	v488 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v488
	SCZO = cond(v488)
	v489 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v489
	SCZO = cond(v489)
	v490 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v490
	SCZO = cond(v490)
	v491 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v491
	SCZO = cond(v491)
	v492 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v492
	SCZO = cond(v492)
	v493 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v493
	SCZO = cond(v493)
	v494 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v494
	SCZO = cond(v494)
	v495 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v495
	SCZO = cond(v495)
	v496 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v496
	SCZO = cond(v496)
	v497 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v497
	SCZO = cond(v497)
	v498 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v498
	SCZO = cond(v498)
	v499 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v499
	SCZO = cond(v499)
	v500 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v500
	SCZO = cond(v500)
	v501 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v501
	SCZO = cond(v501)
	v502 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v502
	SCZO = cond(v502)
	v503 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v503
	SCZO = cond(v503)
	v504 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v504
	SCZO = cond(v504)
	v505 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v505
	SCZO = cond(v505)
	v506 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v506
	SCZO = cond(v506)
	v507 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v507
	SCZO = cond(v507)
	v508 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v508
	SCZO = cond(v508)
	v509 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v509
	SCZO = cond(v509)
	v510 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v510
	SCZO = cond(v510)
	v511 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v511
	SCZO = cond(v511)
	v512 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v512
	SCZO = cond(v512)
	v513 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v513
	SCZO = cond(v513)
	v514 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v514
	SCZO = cond(v514)
	v515 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v515
	SCZO = cond(v515)
	v516 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v516
	SCZO = cond(v516)
	v517 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v517
	SCZO = cond(v517)
	v518 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v518
	SCZO = cond(v518)
	v519 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v519
	SCZO = cond(v519)
	v520 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v520
	SCZO = cond(v520)
	v521 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v521
	SCZO = cond(v521)
	v522 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v522
	SCZO = cond(v522)
	v523 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v523
	SCZO = cond(v523)
	v524 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v524
	SCZO = cond(v524)
	v525 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v525
	SCZO = cond(v525)
	v526 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v526
	SCZO = cond(v526)
	v527 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v527
	SCZO = cond(v527)
	v528 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v528
	SCZO = cond(v528)
	v529 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v529
	SCZO = cond(v529)
	v530 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v530
	SCZO = cond(v530)
	v531 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v531
	SCZO = cond(v531)
	v532 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v532
	SCZO = cond(v532)
	v533 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v533
	SCZO = cond(v533)
	v534 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v534
	SCZO = cond(v534)
	v535 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v535
	SCZO = cond(v535)
	v536 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v536
	SCZO = cond(v536)
	v537 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v537
	SCZO = cond(v537)
	v538 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v538
	SCZO = cond(v538)
	v539 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v539
	SCZO = cond(v539)
	v540 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v540
	SCZO = cond(v540)
	v541 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v541
	SCZO = cond(v541)
	v542 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v542
	SCZO = cond(v542)
	v543 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v543
	SCZO = cond(v543)
	v544 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v544
	SCZO = cond(v544)
	v545 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v545
	SCZO = cond(v545)
	v546 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v546
	SCZO = cond(v546)
	v547 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v547
	SCZO = cond(v547)
	v548 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v548
	SCZO = cond(v548)
	v549 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v549
	SCZO = cond(v549)
	v550 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v550
	SCZO = cond(v550)
	v551 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v551
	SCZO = cond(v551)
	v552 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v552
	SCZO = cond(v552)
	v553 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v553
	SCZO = cond(v553)
	v554 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v554
	SCZO = cond(v554)
	v555 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v555
	SCZO = cond(v555)
	v556 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v556
	SCZO = cond(v556)
	v557 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v557
	SCZO = cond(v557)
	v558 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v558
	SCZO = cond(v558)
	v559 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v559
	SCZO = cond(v559)
	v560 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v560
	SCZO = cond(v560)
	v561 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v561
	SCZO = cond(v561)
	v562 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v562
	SCZO = cond(v562)
	v563 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v563
	SCZO = cond(v563)
	v564 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v564
	SCZO = cond(v564)
	v565 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v565
	SCZO = cond(v565)
	v566 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v566
	SCZO = cond(v566)
	v567 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v567
	SCZO = cond(v567)
	v568 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v568
	SCZO = cond(v568)
	v569 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v569
	SCZO = cond(v569)
	v570 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v570
	SCZO = cond(v570)
	v571 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v571
	SCZO = cond(v571)
	v572 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v572
	SCZO = cond(v572)
	v573 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v573
	SCZO = cond(v573)
	v574 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v574
	SCZO = cond(v574)
	v575 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v575
	SCZO = cond(v575)
	v576 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v576
	SCZO = cond(v576)
	v577 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v577
	SCZO = cond(v577)
	v578 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v578
	SCZO = cond(v578)
	v579 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v579
	SCZO = cond(v579)
	v580 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v580
	SCZO = cond(v580)
	v581 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v581
	SCZO = cond(v581)
	v582 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v582
	SCZO = cond(v582)
	v583 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v583
	SCZO = cond(v583)
	v584 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v584
	SCZO = cond(v584)
	v585 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v585
	SCZO = cond(v585)
	v586 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v586
	SCZO = cond(v586)
	v587 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v587
	SCZO = cond(v587)
	v588 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v588
	SCZO = cond(v588)
	v589 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v589
	SCZO = cond(v589)
	v590 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v590
	SCZO = cond(v590)
	v591 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v591
	SCZO = cond(v591)
	v592 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v592
	SCZO = cond(v592)
	v593 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v593
	SCZO = cond(v593)
	v594 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v594
	SCZO = cond(v594)
	v595 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v595
	SCZO = cond(v595)
	v596 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v596
	SCZO = cond(v596)
	v597 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v597
	SCZO = cond(v597)
	v598 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v598
	SCZO = cond(v598)
	v599 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v599
	SCZO = cond(v599)
	v600 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v600
	SCZO = cond(v600)
	v601 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v601
	SCZO = cond(v601)
	v602 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v602
	SCZO = cond(v602)
	v603 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v603
	SCZO = cond(v603)
	v604 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v604
	SCZO = cond(v604)
	v605 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v605
	SCZO = cond(v605)
	v606 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v606
	SCZO = cond(v606)
	v607 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v607
	SCZO = cond(v607)
	v608 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v608
	SCZO = cond(v608)
	v609 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v609
	SCZO = cond(v609)
	v610 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v610
	SCZO = cond(v610)
	v611 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v611
	SCZO = cond(v611)
	v612 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v612
	SCZO = cond(v612)
	v613 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v613
	SCZO = cond(v613)
	v614 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v614
	SCZO = cond(v614)
	v615 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v615
	SCZO = cond(v615)
	v616 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v616
	SCZO = cond(v616)
	v617 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v617
	SCZO = cond(v617)
	v618 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v618
	SCZO = cond(v618)
	v619 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v619
	SCZO = cond(v619)
	v620 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v620
	SCZO = cond(v620)
	v621 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v621
	SCZO = cond(v621)
	v622 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v622
	SCZO = cond(v622)
	v623 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v623
	SCZO = cond(v623)
	v624 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v624
	SCZO = cond(v624)
	v625 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v625
	SCZO = cond(v625)
	v626 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v626
	SCZO = cond(v626)
	v627 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v627
	SCZO = cond(v627)
	v628 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v628
	SCZO = cond(v628)
	v629 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v629
	SCZO = cond(v629)
	v630 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v630
	SCZO = cond(v630)
	v631 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v631
	SCZO = cond(v631)
	v632 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v632
	SCZO = cond(v632)
	v633 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v633
	SCZO = cond(v633)
	v634 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v634
	SCZO = cond(v634)
	v635 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v635
	SCZO = cond(v635)
	v636 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v636
	SCZO = cond(v636)
	v637 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v637
	SCZO = cond(v637)
	v638 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v638
	SCZO = cond(v638)
	v639 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v639
	SCZO = cond(v639)
	v640 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v640
	SCZO = cond(v640)
	v641 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v641
	SCZO = cond(v641)
	v642 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v642
	SCZO = cond(v642)
	v643 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v643
	SCZO = cond(v643)
	v644 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v644
	SCZO = cond(v644)
	goto l0177_6FFE_thunk_fn01AF_0000
	// succ:  l0177_6FFE_thunk_fn01AF_0000
l0177_6B06:
	v645 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v645
	SCZO = cond(v645)
	v646 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v646
	SCZO = cond(v646)
	v647 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v647
	SCZO = cond(v647)
	v648 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v648
	SCZO = cond(v648)
	v649 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v649
	SCZO = cond(v649)
	v650 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v650
	SCZO = cond(v650)
	v651 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v651
	SCZO = cond(v651)
	v652 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v652
	SCZO = cond(v652)
	v653 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v653
	SCZO = cond(v653)
	v654 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v654
	SCZO = cond(v654)
	v655 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v655
	SCZO = cond(v655)
	v656 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v656
	SCZO = cond(v656)
	v657 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v657
	SCZO = cond(v657)
	v658 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v658
	SCZO = cond(v658)
	v659 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v659
	SCZO = cond(v659)
	v660 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v660
	SCZO = cond(v660)
	v661 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v661
	SCZO = cond(v661)
	v662 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v662
	SCZO = cond(v662)
	v663 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v663
	SCZO = cond(v663)
	v664 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v664
	SCZO = cond(v664)
	v665 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v665
	SCZO = cond(v665)
	v666 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v666
	SCZO = cond(v666)
	v667 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v667
	SCZO = cond(v667)
	v668 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v668
	SCZO = cond(v668)
	v669 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v669
	SCZO = cond(v669)
	v670 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v670
	SCZO = cond(v670)
	v671 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v671
	SCZO = cond(v671)
	v672 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v672
	SCZO = cond(v672)
	v673 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v673
	SCZO = cond(v673)
	v674 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v674
	SCZO = cond(v674)
	v675 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v675
	SCZO = cond(v675)
	v676 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v676
	SCZO = cond(v676)
	v677 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v677
	SCZO = cond(v677)
	v678 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v678
	SCZO = cond(v678)
	v679 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v679
	SCZO = cond(v679)
	v680 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v680
	SCZO = cond(v680)
	v681 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v681
	SCZO = cond(v681)
	v682 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v682
	SCZO = cond(v682)
	v683 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v683
	SCZO = cond(v683)
	v684 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v684
	SCZO = cond(v684)
	v685 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v685
	SCZO = cond(v685)
	v686 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v686
	SCZO = cond(v686)
	v687 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v687
	SCZO = cond(v687)
	v688 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v688
	SCZO = cond(v688)
	v689 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v689
	SCZO = cond(v689)
	v690 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v690
	SCZO = cond(v690)
	v691 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v691
	SCZO = cond(v691)
	v692 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v692
	SCZO = cond(v692)
	v693 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v693
	SCZO = cond(v693)
	v694 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v694
	SCZO = cond(v694)
	v695 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v695
	SCZO = cond(v695)
	v696 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v696
	SCZO = cond(v696)
	v697 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v697
	SCZO = cond(v697)
	v698 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v698
	SCZO = cond(v698)
	v699 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v699
	SCZO = cond(v699)
	v700 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v700
	SCZO = cond(v700)
	v701 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v701
	SCZO = cond(v701)
	v702 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v702
	SCZO = cond(v702)
	v703 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v703
	SCZO = cond(v703)
	v704 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v704
	SCZO = cond(v704)
	v705 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v705
	SCZO = cond(v705)
	v706 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v706
	SCZO = cond(v706)
	v707 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v707
	SCZO = cond(v707)
	v708 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v708
	SCZO = cond(v708)
	v709 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v709
	SCZO = cond(v709)
	v710 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v710
	SCZO = cond(v710)
	v711 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v711
	SCZO = cond(v711)
	v712 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v712
	SCZO = cond(v712)
	v713 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v713
	SCZO = cond(v713)
	v714 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v714
	SCZO = cond(v714)
	v715 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v715
	SCZO = cond(v715)
	v716 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v716
	SCZO = cond(v716)
	v717 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v717
	SCZO = cond(v717)
	v718 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v718
	SCZO = cond(v718)
	v719 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v719
	SCZO = cond(v719)
	v720 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v720
	SCZO = cond(v720)
	v721 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v721
	SCZO = cond(v721)
	v722 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v722
	SCZO = cond(v722)
	v723 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v723
	SCZO = cond(v723)
	v724 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v724
	SCZO = cond(v724)
	v725 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v725
	SCZO = cond(v725)
	v726 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v726
	SCZO = cond(v726)
	v727 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v727
	SCZO = cond(v727)
	v728 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v728
	SCZO = cond(v728)
	v729 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v729
	SCZO = cond(v729)
	v730 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v730
	SCZO = cond(v730)
	v731 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v731
	SCZO = cond(v731)
	v732 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v732
	SCZO = cond(v732)
	v733 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v733
	SCZO = cond(v733)
	v734 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v734
	SCZO = cond(v734)
	v735 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v735
	SCZO = cond(v735)
	v736 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v736
	SCZO = cond(v736)
	v737 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v737
	SCZO = cond(v737)
	v738 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v738
	SCZO = cond(v738)
	v739 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v739
	SCZO = cond(v739)
	v740 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v740
	SCZO = cond(v740)
	v741 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v741
	SCZO = cond(v741)
	v742 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v742
	SCZO = cond(v742)
	v743 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v743
	SCZO = cond(v743)
	v744 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v744
	SCZO = cond(v744)
	v745 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v745
	SCZO = cond(v745)
	v746 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v746
	SCZO = cond(v746)
	v747 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v747
	SCZO = cond(v747)
	v748 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v748
	SCZO = cond(v748)
	v749 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v749
	SCZO = cond(v749)
	v750 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v750
	SCZO = cond(v750)
	v751 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v751
	SCZO = cond(v751)
	v752 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v752
	SCZO = cond(v752)
	v753 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v753
	SCZO = cond(v753)
	v754 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v754
	SCZO = cond(v754)
	v755 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v755
	SCZO = cond(v755)
	v756 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v756
	SCZO = cond(v756)
	v757 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v757
	SCZO = cond(v757)
	v758 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v758
	SCZO = cond(v758)
	v759 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v759
	SCZO = cond(v759)
	v760 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v760
	SCZO = cond(v760)
	v761 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v761
	SCZO = cond(v761)
	v762 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v762
	SCZO = cond(v762)
	v763 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v763
	SCZO = cond(v763)
	v764 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v764
	SCZO = cond(v764)
	v765 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v765
	SCZO = cond(v765)
	v766 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v766
	SCZO = cond(v766)
	v767 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v767
	SCZO = cond(v767)
	v768 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v768
	SCZO = cond(v768)
	v769 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v769
	SCZO = cond(v769)
	v770 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v770
	SCZO = cond(v770)
	v771 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v771
	SCZO = cond(v771)
	v772 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v772
	SCZO = cond(v772)
	v773 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v773
	SCZO = cond(v773)
	v774 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v774
	SCZO = cond(v774)
	v775 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v775
	SCZO = cond(v775)
	v776 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v776
	SCZO = cond(v776)
	v777 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v777
	SCZO = cond(v777)
	v778 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v778
	SCZO = cond(v778)
	v779 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v779
	SCZO = cond(v779)
	v780 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v780
	SCZO = cond(v780)
	v781 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v781
	SCZO = cond(v781)
	v782 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v782
	SCZO = cond(v782)
	v783 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v783
	SCZO = cond(v783)
	v784 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v784
	SCZO = cond(v784)
	v785 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v785
	SCZO = cond(v785)
	v786 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v786
	SCZO = cond(v786)
	v787 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v787
	SCZO = cond(v787)
	v788 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v788
	SCZO = cond(v788)
	v789 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v789
	SCZO = cond(v789)
	v790 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v790
	SCZO = cond(v790)
	v791 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v791
	SCZO = cond(v791)
	v792 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v792
	SCZO = cond(v792)
	v793 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v793
	SCZO = cond(v793)
	v794 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v794
	SCZO = cond(v794)
	v795 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v795
	SCZO = cond(v795)
	v796 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v796
	SCZO = cond(v796)
	v797 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v797
	SCZO = cond(v797)
	v798 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v798
	SCZO = cond(v798)
	v799 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v799
	SCZO = cond(v799)
	v800 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v800
	SCZO = cond(v800)
	v801 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v801
	SCZO = cond(v801)
	v802 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v802
	SCZO = cond(v802)
	v803 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v803
	SCZO = cond(v803)
	v804 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v804
	SCZO = cond(v804)
	v805 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v805
	SCZO = cond(v805)
	v806 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v806
	SCZO = cond(v806)
	v807 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v807
	SCZO = cond(v807)
	v808 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v808
	SCZO = cond(v808)
	v809 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v809
	SCZO = cond(v809)
	v810 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v810
	SCZO = cond(v810)
	v811 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v811
	SCZO = cond(v811)
	v812 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v812
	SCZO = cond(v812)
	v813 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v813
	SCZO = cond(v813)
	v814 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v814
	SCZO = cond(v814)
	v815 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v815
	SCZO = cond(v815)
	v816 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v816
	SCZO = cond(v816)
	v817 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v817
	SCZO = cond(v817)
	v818 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v818
	SCZO = cond(v818)
	v819 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v819
	SCZO = cond(v819)
	v820 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v820
	SCZO = cond(v820)
	v821 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v821
	SCZO = cond(v821)
	v822 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v822
	SCZO = cond(v822)
	v823 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v823
	SCZO = cond(v823)
	v824 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v824
	SCZO = cond(v824)
	v825 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v825
	SCZO = cond(v825)
	v826 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v826
	SCZO = cond(v826)
	v827 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v827
	SCZO = cond(v827)
	v828 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v828
	SCZO = cond(v828)
	v829 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v829
	SCZO = cond(v829)
	v830 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v830
	SCZO = cond(v830)
	v831 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v831
	SCZO = cond(v831)
	v832 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v832
	SCZO = cond(v832)
	v833 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v833
	SCZO = cond(v833)
	v834 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v834
	SCZO = cond(v834)
	v835 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v835
	SCZO = cond(v835)
	v836 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v836
	SCZO = cond(v836)
	v837 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v837
	SCZO = cond(v837)
	v838 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v838
	SCZO = cond(v838)
	v839 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v839
	SCZO = cond(v839)
	v840 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v840
	SCZO = cond(v840)
	v841 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v841
	SCZO = cond(v841)
	v842 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v842
	SCZO = cond(v842)
	v843 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v843
	SCZO = cond(v843)
	v844 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v844
	SCZO = cond(v844)
	v845 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v845
	SCZO = cond(v845)
	v846 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v846
	SCZO = cond(v846)
	v847 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v847
	SCZO = cond(v847)
	v848 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v848
	SCZO = cond(v848)
	v849 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v849
	SCZO = cond(v849)
	v850 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v850
	SCZO = cond(v850)
	v851 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v851
	SCZO = cond(v851)
	v852 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v852
	SCZO = cond(v852)
	v853 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v853
	SCZO = cond(v853)
	v854 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v854
	SCZO = cond(v854)
	v855 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v855
	SCZO = cond(v855)
	v856 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v856
	SCZO = cond(v856)
	v857 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v857
	SCZO = cond(v857)
	v858 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v858
	SCZO = cond(v858)
	v859 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v859
	SCZO = cond(v859)
	v860 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v860
	SCZO = cond(v860)
	v861 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v861
	SCZO = cond(v861)
	v862 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v862
	SCZO = cond(v862)
	v863 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v863
	SCZO = cond(v863)
	v864 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v864
	SCZO = cond(v864)
	v865 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v865
	SCZO = cond(v865)
	v866 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v866
	SCZO = cond(v866)
	v867 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v867
	SCZO = cond(v867)
	v868 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v868
	SCZO = cond(v868)
	v869 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v869
	SCZO = cond(v869)
	v870 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v870
	SCZO = cond(v870)
	v871 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v871
	SCZO = cond(v871)
	v872 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v872
	SCZO = cond(v872)
	v873 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v873
	SCZO = cond(v873)
	v874 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v874
	SCZO = cond(v874)
	v875 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v875
	SCZO = cond(v875)
	v876 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v876
	SCZO = cond(v876)
	v877 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v877
	SCZO = cond(v877)
	v878 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v878
	SCZO = cond(v878)
	v879 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v879
	SCZO = cond(v879)
	v880 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v880
	SCZO = cond(v880)
	v881 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v881
	SCZO = cond(v881)
	v882 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v882
	SCZO = cond(v882)
	v883 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v883
	SCZO = cond(v883)
	v884 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v884
	SCZO = cond(v884)
	v885 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v885
	SCZO = cond(v885)
	v886 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v886
	SCZO = cond(v886)
	v887 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v887
	SCZO = cond(v887)
	v888 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v888
	SCZO = cond(v888)
	v889 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v889
	SCZO = cond(v889)
	v890 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v890
	SCZO = cond(v890)
	v891 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v891
	SCZO = cond(v891)
	v892 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v892
	SCZO = cond(v892)
	v893 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v893
	SCZO = cond(v893)
	v894 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v894
	SCZO = cond(v894)
	v895 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v895
	SCZO = cond(v895)
	v896 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v896
	SCZO = cond(v896)
	v897 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v897
	SCZO = cond(v897)
	v898 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v898
	SCZO = cond(v898)
	v899 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v899
	SCZO = cond(v899)
	v900 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v900
	SCZO = cond(v900)
	v901 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v901
	SCZO = cond(v901)
	v902 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v902
	SCZO = cond(v902)
	v903 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v903
	SCZO = cond(v903)
	v904 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v904
	SCZO = cond(v904)
	v905 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v905
	SCZO = cond(v905)
	v906 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v906
	SCZO = cond(v906)
	v907 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v907
	SCZO = cond(v907)
	v908 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v908
	SCZO = cond(v908)
	v909 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v909
	SCZO = cond(v909)
	v910 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v910
	SCZO = cond(v910)
	v911 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v911
	SCZO = cond(v911)
	v912 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v912
	SCZO = cond(v912)
	v913 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v913
	SCZO = cond(v913)
	v914 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v914
	SCZO = cond(v914)
	v915 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v915
	SCZO = cond(v915)
	v916 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v916
	SCZO = cond(v916)
	v917 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v917
	SCZO = cond(v917)
	v918 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v918
	SCZO = cond(v918)
	v919 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v919
	SCZO = cond(v919)
	v920 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v920
	SCZO = cond(v920)
	v921 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v921
	SCZO = cond(v921)
	v922 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v922
	SCZO = cond(v922)
	v923 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v923
	SCZO = cond(v923)
	v924 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v924
	SCZO = cond(v924)
	v925 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v925
	SCZO = cond(v925)
	v926 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v926
	SCZO = cond(v926)
	v927 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v927
	SCZO = cond(v927)
	v928 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v928
	SCZO = cond(v928)
	v929 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v929
	SCZO = cond(v929)
	v930 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v930
	SCZO = cond(v930)
	v931 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v931
	SCZO = cond(v931)
	v932 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v932
	SCZO = cond(v932)
	v933 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v933
	SCZO = cond(v933)
	v934 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v934
	SCZO = cond(v934)
	v935 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v935
	SCZO = cond(v935)
	v936 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v936
	SCZO = cond(v936)
	v937 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v937
	SCZO = cond(v937)
	v938 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v938
	SCZO = cond(v938)
	v939 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v939
	SCZO = cond(v939)
	v940 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v940
	SCZO = cond(v940)
	v941 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v941
	SCZO = cond(v941)
	v942 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v942
	SCZO = cond(v942)
	v943 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v943
	SCZO = cond(v943)
	v944 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v944
	SCZO = cond(v944)
	v945 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v945
	SCZO = cond(v945)
	v946 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v946
	SCZO = cond(v946)
	v947 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v947
	SCZO = cond(v947)
	v948 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v948
	SCZO = cond(v948)
	v949 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v949
	SCZO = cond(v949)
	v950 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v950
	SCZO = cond(v950)
	v951 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v951
	SCZO = cond(v951)
	v952 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v952
	SCZO = cond(v952)
	v953 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v953
	SCZO = cond(v953)
	v954 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v954
	SCZO = cond(v954)
	v955 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v955
	SCZO = cond(v955)
	v956 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v956
	SCZO = cond(v956)
	v957 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v957
	SCZO = cond(v957)
	v958 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v958
	SCZO = cond(v958)
	v959 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v959
	SCZO = cond(v959)
	v960 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v960
	SCZO = cond(v960)
	v961 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v961
	SCZO = cond(v961)
	v962 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v962
	SCZO = cond(v962)
	v963 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v963
	SCZO = cond(v963)
	v964 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v964
	SCZO = cond(v964)
	v965 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v965
	SCZO = cond(v965)
	v966 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v966
	SCZO = cond(v966)
	v967 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v967
	SCZO = cond(v967)
	v968 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v968
	SCZO = cond(v968)
	v969 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v969
	SCZO = cond(v969)
	v970 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v970
	SCZO = cond(v970)
	v971 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v971
	SCZO = cond(v971)
	v972 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v972
	SCZO = cond(v972)
	v973 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v973
	SCZO = cond(v973)
	v974 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v974
	SCZO = cond(v974)
	v975 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v975
	SCZO = cond(v975)
	v976 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v976
	SCZO = cond(v976)
	v977 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v977
	SCZO = cond(v977)
	v978 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v978
	SCZO = cond(v978)
	v979 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v979
	SCZO = cond(v979)
	v980 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v980
	SCZO = cond(v980)
	v981 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v981
	SCZO = cond(v981)
	v982 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v982
	SCZO = cond(v982)
	v983 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v983
	SCZO = cond(v983)
	v984 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v984
	SCZO = cond(v984)
	v985 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v985
	SCZO = cond(v985)
	v986 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v986
	SCZO = cond(v986)
	v987 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v987
	SCZO = cond(v987)
	v988 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v988
	SCZO = cond(v988)
	v989 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v989
	SCZO = cond(v989)
	v990 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v990
	SCZO = cond(v990)
	v991 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v991
	SCZO = cond(v991)
	v992 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v992
	SCZO = cond(v992)
	v993 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v993
	SCZO = cond(v993)
	v994 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v994
	SCZO = cond(v994)
	v995 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v995
	SCZO = cond(v995)
	v996 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v996
	SCZO = cond(v996)
	v997 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v997
	SCZO = cond(v997)
	v998 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v998
	SCZO = cond(v998)
	v999 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v999
	SCZO = cond(v999)
	v1000 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1000
	SCZO = cond(v1000)
	v1001 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1001
	SCZO = cond(v1001)
	v1002 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1002
	SCZO = cond(v1002)
	v1003 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1003
	SCZO = cond(v1003)
	v1004 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1004
	SCZO = cond(v1004)
	v1005 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1005
	SCZO = cond(v1005)
	v1006 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1006
	SCZO = cond(v1006)
	v1007 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1007
	SCZO = cond(v1007)
	v1008 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1008
	SCZO = cond(v1008)
	v1009 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1009
	SCZO = cond(v1009)
	v1010 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1010
	SCZO = cond(v1010)
	v1011 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1011
	SCZO = cond(v1011)
	v1012 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1012
	SCZO = cond(v1012)
	v1013 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1013
	SCZO = cond(v1013)
	v1014 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1014
	SCZO = cond(v1014)
	v1015 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1015
	SCZO = cond(v1015)
	v1016 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1016
	SCZO = cond(v1016)
	v1017 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1017
	SCZO = cond(v1017)
	v1018 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1018
	SCZO = cond(v1018)
	v1019 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1019
	SCZO = cond(v1019)
	v1020 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1020
	SCZO = cond(v1020)
	v1021 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1021
	SCZO = cond(v1021)
	v1022 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1022
	SCZO = cond(v1022)
	v1023 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1023
	SCZO = cond(v1023)
	v1024 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1024
	SCZO = cond(v1024)
	v1025 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1025
	SCZO = cond(v1025)
	v1026 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1026
	SCZO = cond(v1026)
	v1027 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1027
	SCZO = cond(v1027)
	v1028 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1028
	SCZO = cond(v1028)
	v1029 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1029
	SCZO = cond(v1029)
	v1030 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1030
	SCZO = cond(v1030)
	v1031 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1031
	SCZO = cond(v1031)
	v1032 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1032
	SCZO = cond(v1032)
	v1033 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1033
	SCZO = cond(v1033)
	v1034 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1034
	SCZO = cond(v1034)
	v1035 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1035
	SCZO = cond(v1035)
	v1036 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1036
	SCZO = cond(v1036)
	v1037 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1037
	SCZO = cond(v1037)
	v1038 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1038
	SCZO = cond(v1038)
	v1039 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1039
	SCZO = cond(v1039)
	v1040 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1040
	SCZO = cond(v1040)
	v1041 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1041
	SCZO = cond(v1041)
	v1042 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1042
	SCZO = cond(v1042)
	v1043 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1043
	SCZO = cond(v1043)
	v1044 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1044
	SCZO = cond(v1044)
	v1045 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1045
	SCZO = cond(v1045)
	v1046 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1046
	SCZO = cond(v1046)
	v1047 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1047
	SCZO = cond(v1047)
	v1048 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1048
	SCZO = cond(v1048)
	v1049 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1049
	SCZO = cond(v1049)
	v1050 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1050
	SCZO = cond(v1050)
	v1051 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1051
	SCZO = cond(v1051)
	v1052 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1052
	SCZO = cond(v1052)
	v1053 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1053
	SCZO = cond(v1053)
	v1054 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1054
	SCZO = cond(v1054)
	v1055 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1055
	SCZO = cond(v1055)
	v1056 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1056
	SCZO = cond(v1056)
	v1057 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1057
	SCZO = cond(v1057)
	v1058 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1058
	SCZO = cond(v1058)
	v1059 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1059
	SCZO = cond(v1059)
	v1060 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1060
	SCZO = cond(v1060)
	v1061 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1061
	SCZO = cond(v1061)
	v1062 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1062
	SCZO = cond(v1062)
	v1063 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1063
	SCZO = cond(v1063)
	v1064 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1064
	SCZO = cond(v1064)
	v1065 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1065
	SCZO = cond(v1065)
	v1066 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1066
	SCZO = cond(v1066)
	v1067 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1067
	SCZO = cond(v1067)
	v1068 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1068
	SCZO = cond(v1068)
	v1069 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1069
	SCZO = cond(v1069)
	v1070 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1070
	SCZO = cond(v1070)
	v1071 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1071
	SCZO = cond(v1071)
	v1072 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1072
	SCZO = cond(v1072)
	v1073 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1073
	SCZO = cond(v1073)
	v1074 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1074
	SCZO = cond(v1074)
	v1075 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1075
	SCZO = cond(v1075)
	v1076 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1076
	SCZO = cond(v1076)
	v1077 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1077
	SCZO = cond(v1077)
	v1078 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1078
	SCZO = cond(v1078)
	v1079 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1079
	SCZO = cond(v1079)
	v1080 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1080
	SCZO = cond(v1080)
	v1081 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1081
	SCZO = cond(v1081)
	v1082 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1082
	SCZO = cond(v1082)
	v1083 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1083
	SCZO = cond(v1083)
	v1084 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1084
	SCZO = cond(v1084)
	v1085 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1085
	SCZO = cond(v1085)
	v1086 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1086
	SCZO = cond(v1086)
	v1087 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1087
	SCZO = cond(v1087)
	v1088 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1088
	SCZO = cond(v1088)
	v1089 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1089
	SCZO = cond(v1089)
	v1090 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1090
	SCZO = cond(v1090)
	v1091 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1091
	SCZO = cond(v1091)
	v1092 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1092
	SCZO = cond(v1092)
	v1093 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1093
	SCZO = cond(v1093)
	v1094 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1094
	SCZO = cond(v1094)
	v1095 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1095
	SCZO = cond(v1095)
	v1096 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1096
	SCZO = cond(v1096)
	v1097 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1097
	SCZO = cond(v1097)
	v1098 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1098
	SCZO = cond(v1098)
	v1099 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1099
	SCZO = cond(v1099)
	v1100 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1100
	SCZO = cond(v1100)
	v1101 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1101
	SCZO = cond(v1101)
	v1102 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1102
	SCZO = cond(v1102)
	v1103 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1103
	SCZO = cond(v1103)
	v1104 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1104
	SCZO = cond(v1104)
	v1105 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1105
	SCZO = cond(v1105)
	v1106 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1106
	SCZO = cond(v1106)
	v1107 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1107
	SCZO = cond(v1107)
	v1108 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1108
	SCZO = cond(v1108)
	v1109 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1109
	SCZO = cond(v1109)
	v1110 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1110
	SCZO = cond(v1110)
	v1111 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1111
	SCZO = cond(v1111)
	v1112 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1112
	SCZO = cond(v1112)
	v1113 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1113
	SCZO = cond(v1113)
	v1114 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1114
	SCZO = cond(v1114)
	v1115 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1115
	SCZO = cond(v1115)
	v1116 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1116
	SCZO = cond(v1116)
	v1117 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1117
	SCZO = cond(v1117)
	v1118 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1118
	SCZO = cond(v1118)
	v1119 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1119
	SCZO = cond(v1119)
	v1120 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1120
	SCZO = cond(v1120)
	v1121 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1121
	SCZO = cond(v1121)
	v1122 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1122
	SCZO = cond(v1122)
	v1123 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1123
	SCZO = cond(v1123)
	v1124 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1124
	SCZO = cond(v1124)
	v1125 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1125
	SCZO = cond(v1125)
	v1126 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1126
	SCZO = cond(v1126)
	v1127 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1127
	SCZO = cond(v1127)
	v1128 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1128
	SCZO = cond(v1128)
	v1129 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1129
	SCZO = cond(v1129)
	v1130 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1130
	SCZO = cond(v1130)
	v1131 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1131
	SCZO = cond(v1131)
	v1132 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1132
	SCZO = cond(v1132)
	v1133 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1133
	SCZO = cond(v1133)
	v1134 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1134
	SCZO = cond(v1134)
	v1135 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1135
	SCZO = cond(v1135)
	v1136 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1136
	SCZO = cond(v1136)
	v1137 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1137
	SCZO = cond(v1137)
	v1138 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1138
	SCZO = cond(v1138)
	v1139 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1139
	SCZO = cond(v1139)
	v1140 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1140
	SCZO = cond(v1140)
	v1141 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1141
	SCZO = cond(v1141)
	v1142 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1142
	SCZO = cond(v1142)
	v1143 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1143
	SCZO = cond(v1143)
	v1144 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1144
	SCZO = cond(v1144)
	v1145 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1145
	SCZO = cond(v1145)
	v1146 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1146
	SCZO = cond(v1146)
	v1147 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1147
	SCZO = cond(v1147)
	v1148 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1148
	SCZO = cond(v1148)
	v1149 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1149
	SCZO = cond(v1149)
	v1150 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1150
	SCZO = cond(v1150)
	v1151 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1151
	SCZO = cond(v1151)
	v1152 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1152
	SCZO = cond(v1152)
	v1153 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1153
	SCZO = cond(v1153)
	v1154 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1154
	SCZO = cond(v1154)
	v1155 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1155
	SCZO = cond(v1155)
	v1156 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1156
	SCZO = cond(v1156)
	v1157 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1157
	SCZO = cond(v1157)
	v1158 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1158
	SCZO = cond(v1158)
	v1159 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1159
	SCZO = cond(v1159)
	v1160 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1160
	SCZO = cond(v1160)
	v1161 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1161
	SCZO = cond(v1161)
	v1162 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1162
	SCZO = cond(v1162)
	v1163 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1163
	SCZO = cond(v1163)
	v1164 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1164
	SCZO = cond(v1164)
	v1165 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1165
	SCZO = cond(v1165)
	v1166 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1166
	SCZO = cond(v1166)
	v1167 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1167
	SCZO = cond(v1167)
	v1168 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1168
	SCZO = cond(v1168)
	v1169 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1169
	SCZO = cond(v1169)
	v1170 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1170
	SCZO = cond(v1170)
	v1171 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1171
	SCZO = cond(v1171)
	v1172 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1172
	SCZO = cond(v1172)
	v1173 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1173
	SCZO = cond(v1173)
	v1174 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1174
	SCZO = cond(v1174)
	v1175 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1175
	SCZO = cond(v1175)
	v1176 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1176
	SCZO = cond(v1176)
	v1177 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1177
	SCZO = cond(v1177)
	v1178 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1178
	SCZO = cond(v1178)
	v1179 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1179
	SCZO = cond(v1179)
	v1180 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1180
	SCZO = cond(v1180)
	v1181 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1181
	SCZO = cond(v1181)
	v1182 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1182
	SCZO = cond(v1182)
	v1183 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1183
	SCZO = cond(v1183)
	v1184 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1184
	SCZO = cond(v1184)
	v1185 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1185
	SCZO = cond(v1185)
	v1186 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1186
	SCZO = cond(v1186)
	v1187 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1187
	SCZO = cond(v1187)
	v1188 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1188
	SCZO = cond(v1188)
	v1189 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1189
	SCZO = cond(v1189)
	v1190 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1190
	SCZO = cond(v1190)
	v1191 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1191
	SCZO = cond(v1191)
	v1192 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1192
	SCZO = cond(v1192)
	v1193 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1193
	SCZO = cond(v1193)
	v1194 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1194
	SCZO = cond(v1194)
	v1195 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1195
	SCZO = cond(v1195)
	v1196 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1196
	SCZO = cond(v1196)
	v1197 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1197
	SCZO = cond(v1197)
	v1198 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1198
	SCZO = cond(v1198)
	v1199 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1199
	SCZO = cond(v1199)
	v1200 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1200
	SCZO = cond(v1200)
	v1201 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1201
	SCZO = cond(v1201)
	v1202 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1202
	SCZO = cond(v1202)
	v1203 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1203
	SCZO = cond(v1203)
	v1204 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1204
	SCZO = cond(v1204)
	v1205 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1205
	SCZO = cond(v1205)
	v1206 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1206
	SCZO = cond(v1206)
	v1207 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1207
	SCZO = cond(v1207)
	v1208 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1208
	SCZO = cond(v1208)
	v1209 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1209
	SCZO = cond(v1209)
	v1210 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1210
	SCZO = cond(v1210)
	v1211 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1211
	SCZO = cond(v1211)
	v1212 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1212
	SCZO = cond(v1212)
	v1213 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1213
	SCZO = cond(v1213)
	v1214 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1214
	SCZO = cond(v1214)
	v1215 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1215
	SCZO = cond(v1215)
	v1216 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1216
	SCZO = cond(v1216)
	v1217 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1217
	SCZO = cond(v1217)
	v1218 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1218
	SCZO = cond(v1218)
	v1219 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1219
	SCZO = cond(v1219)
	v1220 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1220
	SCZO = cond(v1220)
	v1221 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1221
	SCZO = cond(v1221)
	v1222 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1222
	SCZO = cond(v1222)
	v1223 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1223
	SCZO = cond(v1223)
	v1224 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1224
	SCZO = cond(v1224)
	v1225 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1225
	SCZO = cond(v1225)
	v1226 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1226
	SCZO = cond(v1226)
	v1227 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1227
	SCZO = cond(v1227)
	v1228 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1228
	SCZO = cond(v1228)
	v1229 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1229
	SCZO = cond(v1229)
	v1230 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1230
	SCZO = cond(v1230)
	v1231 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1231
	SCZO = cond(v1231)
	v1232 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1232
	SCZO = cond(v1232)
	v1233 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1233
	SCZO = cond(v1233)
	v1234 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1234
	SCZO = cond(v1234)
	v1235 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1235
	SCZO = cond(v1235)
	v1236 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1236
	SCZO = cond(v1236)
	v1237 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1237
	SCZO = cond(v1237)
	v1238 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1238
	SCZO = cond(v1238)
	v1239 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1239
	SCZO = cond(v1239)
	v1240 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1240
	SCZO = cond(v1240)
	v1241 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1241
	SCZO = cond(v1241)
	v1242 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1242
	SCZO = cond(v1242)
	v1243 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1243
	SCZO = cond(v1243)
	v1244 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1244
	SCZO = cond(v1244)
	v1245 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1245
	SCZO = cond(v1245)
	v1246 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1246
	SCZO = cond(v1246)
	v1247 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1247
	SCZO = cond(v1247)
	v1248 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1248
	SCZO = cond(v1248)
	v1249 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1249
	SCZO = cond(v1249)
	v1250 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1250
	SCZO = cond(v1250)
	v1251 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1251
	SCZO = cond(v1251)
	v1252 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1252
	SCZO = cond(v1252)
	v1253 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1253
	SCZO = cond(v1253)
	v1254 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1254
	SCZO = cond(v1254)
	v1255 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1255
	SCZO = cond(v1255)
	v1256 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1256
	SCZO = cond(v1256)
	v1257 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1257
	SCZO = cond(v1257)
	v1258 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1258
	SCZO = cond(v1258)
	v1259 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1259
	SCZO = cond(v1259)
	v1260 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1260
	SCZO = cond(v1260)
	v1261 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1261
	SCZO = cond(v1261)
	v1262 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1262
	SCZO = cond(v1262)
	v1263 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1263
	SCZO = cond(v1263)
	v1264 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1264
	SCZO = cond(v1264)
	v1265 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1265
	SCZO = cond(v1265)
	v1266 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1266
	SCZO = cond(v1266)
	v1267 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1267
	SCZO = cond(v1267)
	v1268 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1268
	SCZO = cond(v1268)
	v1269 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1269
	SCZO = cond(v1269)
	v1270 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1270
	SCZO = cond(v1270)
	v1271 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1271
	SCZO = cond(v1271)
	v1272 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1272
	SCZO = cond(v1272)
	v1273 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1273
	SCZO = cond(v1273)
	v1274 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1274
	SCZO = cond(v1274)
	v1275 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1275
	SCZO = cond(v1275)
	v1276 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1276
	SCZO = cond(v1276)
	v1277 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1277
	SCZO = cond(v1277)
	v1278 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1278
	SCZO = cond(v1278)
	v1279 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1279
	SCZO = cond(v1279)
	v1280 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v1280
	SCZO = cond(v1280)
	v1282 = Mem0[ds:0x9058:byte] + bl
	Mem0[ds:0x9058:byte] = v1282
	SCZO = cond(v1282)
	goto l0177_6FFF_thunk_fn0177_7003
	// succ:  l0177_6FFF_thunk_fn0177_7003
l0177_6FFE_thunk_fn01AF_0000:
	call fn01AF_0000 (retsize: 4;)
	return
	// succ:  fn0177_6B06_exit
l0177_6FFF_thunk_fn0177_7003:
	call fn0177_7003 (retsize: 0;)
	return
	// succ:  fn0177_6B06_exit
fn0177_6B06_exit:


// fn01AF_0000
// Return size: 4
void fn01AF_0000()
fn01AF_0000_entry:
	// succ:  l01AF_0000
l01AF_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l01AF_0001_thunk_fn0177_7003
l01AF_0001_thunk_fn0177_7003:
	call fn0177_7003 (retsize: 0;)
	return
	// succ:  fn01AF_0000_exit
fn01AF_0000_exit:


// fn0177_7003
// Return size: 0
void fn0177_7003()
fn0177_7003_entry:
	// succ:  l0177_7003
l0177_7003:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	si = Mem0[0x0177:bx + 0x0A96:word16]
	al = Mem0[0x0177:si + 0x0012:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + 0x0022
	SCZO = cond(ax)
	di = ax
	cx = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01AF_004E_in_fn0177_7003
	goto l0177_7034_thunk_fn0177_7036
	// succ:  l0177_7034_thunk_fn0177_7036 l01AF_004E_in_fn0177_7003
l0177_7003:
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	si = Mem0[0x01AF:bx + 0x0A96:word16]
	al = Mem0[0x01AF:si + 0x0012:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + 0x0022
	SCZO = cond(ax)
	di = ax
	cx = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01AF_004E
	goto l0177_7034_thunk_fn0177_7036
	// succ:  l0177_7034_thunk_fn0177_7036 l0177_7034_thunk_fn0177_7036
l0177_7034_thunk_fn0177_7036:
	call fn0177_7036 (retsize: 0;)
	return
	// succ:  fn0177_7003_exit l0177_7034_thunk_fn0177_7036
l0177_7034_thunk_fn0177_7036:
	call fn0177_7036 (retsize: 0;)
	return
	// succ:  fn0177_7003_exit
l0177_7034_thunk_fn0177_7036:
	call fn0177_7036 (retsize: 0;)
	return
	// succ:  fn0177_7003_exit
l0177_7034_thunk_fn0177_7036:
	call fn0177_7036 (retsize: 0;)
	return
	// succ:  fn0177_7003_exit
l01AF_004E_in_fn0177_7003:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_7003_exit
fn0177_7003_exit:


// fn0177_7036
// Return size: 0
void fn0177_7036()
fn0177_7036_entry:
	// succ:  l01AF_0036
l01AF_0036:
	Mem0[ss:bp - 0x0006:word16] = di
	di = ax
	cx = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di:word16]
	call fn004F_0C82 (retsize: 4;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = di
	// succ:  l01AF_004E
l01AF_004E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_7036_exit
fn0177_7036_exit:


// fn01AF_0DEE
// Return size: 4
void fn01AF_0DEE()
fn01AF_0DEE_entry:
	// succ:  l01AF_0DEE
l01AF_0DEE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	bx = ax
	ax = 0x0014
	dx_ax = Mem0[ss:bp + 0x0006:word16] *s ax
	SCZO = cond(dx_ax)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[0x01AF:bx + 0x0720:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01AF_0DEE_exit
fn01AF_0DEE_exit:


// fn01AF_0E20
// Return size: 4
void fn01AF_0E20()
fn01AF_0E20_entry:
	// succ:  l01AF_0E20
l01AF_0E20:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0010
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x0000)
	branch Test(NE,Z) l01AF_0E3A
	// succ:  l01AF_0E35 l01AF_0E3A
l01AF_0E35:
	Mem0[ss:bp + 0x000A:word16] = 0x0001
	// succ:  l01AF_0E3A
l01AF_0E3A:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0xFFFF)
	branch Test(EQ,Z) l01AF_0E43
	// succ:  l01AF_0E40 l01AF_0E43
l01AF_0E40:
	goto l01AF_0ECA
	// succ:  l01AF_0ECA
l01AF_0E43:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	call fn01AF_0DEE (retsize: 2;)
	sp = sp + 0x0002
	si = ax
	si = si - 0x0001
	SZO = cond(si)
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0003:byte] = al
	si = si << 0x0001
	SCZO = cond(si)
	ax = Mem0[0x01AF:si + 0x05DC:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	bx = ax
	al = Mem0[ss:bp - 0x0003:byte]
	SCZO = cond(Mem0[0x01AF:bx:byte] - al)
	branch Test(UGE,C) l01AF_0ED0
	// succ:  l01AF_0E6D l01AF_0ED0
l01AF_0E6D:
	si = bx
	ax = 0x01AF
	es = ax
	// succ:  l01AF_0E74
l01AF_0E74:
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	al = Mem0[ss:bp - 0x0003:byte]
	SCZO = cond(Mem0[0x01AF:si:byte] - al)
	branch Test(ULT,C) l01AF_0E74
	// succ:  l01AF_0E7C_thunk_fn0177_7ED3 l01AF_0E74
l01AF_0E7C_thunk_fn0177_7ED3:
	call fn0177_7ED3 (retsize: 0;)
	return
	// succ:  fn01AF_0E20_exit
l01AF_0ECA:
	di = Mem0[ss:bp + 0x0006:word16]
	// succ:  l01AF_0ECA_thunk_fn0177_7E89
l01AF_0ECA_thunk_fn0177_7E89:
	call fn0177_7E89 (retsize: 0;)
	return
	// succ:  fn01AF_0E20_exit
l01AF_0ED0:
	si = bx
fn01AF_0E20_exit:


// fn0177_7E89
// Return size: 0
void fn0177_7E89()
fn0177_7E89_entry:
	// succ:  l0177_7E89
l0177_7E89:
	sp = fp
	ax = ax + 0x8905
	SCZO = cond(ax)
	si = si + 0x0001
	SZO = cond(si)
	v11 = Mem0[ss:bp - 0x0001 + di:byte] | al
	Mem0[ss:bp - 0x0001 + di:byte] = v11
	SZO = cond(Mem0[ss:bp - 0x0001 + di:byte])
	C = false
	goto l0177_7E8D_thunk_fn0177_7E91
	// succ:  l0177_7E8D_thunk_fn0177_7E91
l0177_7E89:
	Mem0[ss:bp + 0x0008:word16] = ax
	goto l01AF_0E8E
	// succ:  l01AF_0E8E
l0177_7E8D_thunk_fn0177_7E91:
	call fn0177_7E91 (retsize: 0;)
	return
	// succ:  fn0177_7E89_exit
l01AF_0E8E:
	SCZO = cond(di - 0xFFFF)
	// succ:  l01AF_0E8E_thunk_fn0177_7E91
l01AF_0E8E_thunk_fn0177_7E91:
	call fn0177_7E91 (retsize: 0;)
	return
	// succ:  fn0177_7E89_exit
fn0177_7E89_exit:


// fn0177_7E91
// Return size: 0
void fn0177_7E91()
fn0177_7E91_entry:
	// succ:  l0177_7E91
l0177_7E91:
	sp = fp
	branch Test(NE,Z) l0177_7E91_thunk_fn0177_7EBA
	goto l0177_7E91_thunk_fn0177_7E93
	// succ:  l0177_7E91_thunk_fn0177_7E93 l0177_7E91_thunk_fn0177_7EBA
l0177_7E91:
	branch Test(NE,Z) l01AF_0EBA
	goto l0177_7E91_thunk_fn0177_7E93
	// succ:  l0177_7E91_thunk_fn0177_7E93 l0177_7E91_thunk_fn0177_7EBA
l0177_7E91_thunk_fn0177_7E93:
	call fn0177_7E93 (retsize: 0;)
	return
	// succ:  fn0177_7E91_exit l0177_7E91_thunk_fn0177_7E93
l0177_7E91_thunk_fn0177_7E93:
	call fn0177_7E93 (retsize: 0;)
	return
	// succ:  fn0177_7E91_exit
l0177_7E91_thunk_fn0177_7E93:
	call fn0177_7E93 (retsize: 0;)
	return
	// succ:  fn0177_7E91_exit
l0177_7E91_thunk_fn0177_7EBA:
	call fn0177_7EBA (retsize: 0;)
	return
	// succ:  fn0177_7E91_exit
l0177_7E91_thunk_fn0177_7EBA:
	call fn0177_7EBA (retsize: 0;)
	return
	// succ:  fn0177_7E91_exit
fn0177_7E91_exit:


// fn0177_7E93
// Return size: 0
void fn0177_7E93()
fn0177_7E93_entry:
	// succ:  l01AF_0E93
l01AF_0E93:
	si = Mem0[ss:bp + 0x0008:word16]
	// succ:  l01AF_0E96
l01AF_0E96:
	bx = si
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x01AF:bx + 0x0276:word16]
	di = bx
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	di = Mem0[0x01AF:di + 0x099C:word16]
	di = di + ax
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01AF_0E96
	// succ:  l01AF_0EB8_thunk_fn0177_7EBA l01AF_0E96
l01AF_0EB8_thunk_fn0177_7EBA:
	call fn0177_7EBA (retsize: 0;)
	return
	// succ:  fn0177_7E93_exit
fn0177_7E93_exit:


// fn0177_7EBA
// Return size: 0
void fn0177_7EBA()
fn0177_7EBA_entry:
	// succ:  l01AF_0EBA
l01AF_0EBA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn01AF_0000 (retsize: 2;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0010:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01AF_0ED4
	goto l01AF_0EC6
	// succ:  l01AF_0EC6 l01AF_0EC4_thunk_fn0177_7ED4
l01AF_0EC4_thunk_fn0177_7ED4:
	call fn0177_7ED4 (retsize: 0;)
	return
	// succ:  fn0177_7EBA_exit
l01AF_0EC6:
	call fn0177_801C (retsize: 0;)
	return
	// succ:  l01AF_114B fn0177_7EBA_exit
fn0177_7EBA_exit:


// fn0177_7ED3
// Return size: 0
void fn0177_7ED3()
fn0177_7ED3_entry:
	// succ:  l0177_7ED3
l0177_7ED3:
	sp = fp
	Mem0[di:byte] = al
	di = di + 0x0001
	goto l0177_7ED3_thunk_fn0177_7ED4
	// succ:  l0177_7ED3_thunk_fn0177_7ED4
l0177_7ED3:
	goto l01AF_0E7E
	// succ:  l01AF_0E7E
l0177_7ED3_thunk_fn0177_7ED4:
	call fn0177_7ED4 (retsize: 0;)
	return
	// succ:  fn0177_7ED3_exit
l01AF_0E7E:
	al = Mem0[0x01AF:si + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn01AF_1390 (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l01AF_0E87_thunk_fn0177_7E89
l01AF_0E87_thunk_fn0177_7E89:
	call fn0177_7E89 (retsize: 0;)
	return
	// succ:  fn0177_7ED3_exit
fn0177_7ED3_exit:


// fn0177_7ED4
// Return size: 0
void fn0177_7ED4()
fn0177_7ED4_entry:
	// succ:  l01AF_0ED4
l01AF_0ED4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	ax = Mem0[ss:bp - 0x0010:word16]
	Mem0[ds:di + 0x001C:word16] = ax
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	Mem0[ds:di + 0x000E:word16] = ax
	Mem0[ds:di + 0x0010:word16] = dx
	ax = Mem0[ds:di + 0x0002:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ds:di + 0x0004:word16]
	si = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01AF_0F1D
	// succ:  l01AF_0EFE l01AF_0F1D
l01AF_0EFE:
	Mem0[ss:bp - 0x000A:word16] = di
	dx = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	di = Mem0[ss:bp - 0x0006:word16]
	// succ:  l01AF_0F09
l01AF_0F09:
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	di = di + ax
	SCZO = cond(di)
	si = si - 0x0001
	SZO = cond(si)
	branch Test(NE,Z) l01AF_0F09
	// succ:  l01AF_0F17 l01AF_0F09
l01AF_0F17:
	Mem0[ss:bp - 0x0006:word16] = di
	di = Mem0[ss:bp - 0x000A:word16]
	// succ:  l01AF_0F1D
l01AF_0F1D:
	ax = Mem0[ss:bp - 0x0006:word16]
	Mem0[ds:di + 0x0004:word16] = ax
	Mem0[ds:di + 0x0002:word16] = ax
	SCZO = cond(Mem0[ds:di + 0x0008:word16] - 0x0000)
	branch Test(NE,Z) l01AF_0F2F
	// succ:  l01AF_0F2C l01AF_0F2F
l01AF_0F2C:
	goto l01AF_1126
	// succ:  l01AF_1126
l01AF_0F2F:
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01AF_0F45
	// succ:  l01AF_0F3C l01AF_0F45
l01AF_0F3C:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0010)
	branch Test(EQ,Z) l01AF_0F45
	// succ:  l01AF_0F42 l01AF_0F45
l01AF_0F42:
	goto l01AF_1126
	// succ:  l01AF_1126
l01AF_0F45:
	si = Mem0[ds:di + 0x0008:word16]
	call fn0137_00A8 (retsize: 4;)
	Mem0[ds:di + 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01AF_0F57
	// succ:  l01AF_0F54 l01AF_0F57
l01AF_0F54:
	call fn0177_801C (retsize: 0;)
	return
	// succ:  l01AF_1130 fn0177_7ED4_exit
l01AF_0F57:
	ax = si
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x000A)
	branch Test(ULE,CZ) l01AF_0F62
	// succ:  l01AF_0F5F l01AF_0F62
l01AF_0F5F:
	call fn0177_801C (retsize: 0;)
	return
	// succ:  l01AF_1130 fn0177_7ED4_exit
l01AF_0F62:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v15 = ax
	ax = bx
	bx = v15
	switch (ax) { l01AF_0F80 l01AF_0F80 l01AF_0F80 l01AF_0F80 l01AF_0F80 l01AF_0FD2 l01AF_0FD2 l01AF_0FD2 l01AF_0FD2 l01AF_0FDA l01AF_1026 }
	// succ:  l01AF_0F80 l01AF_0F80 l01AF_0F80 l01AF_0F80 l01AF_0F80 l01AF_0FD2 l01AF_0FD2 l01AF_0FD2 l01AF_0FD2 l01AF_0FDA l01AF_1026
l01AF_0F80:
	Mem0[ss:bp - 0x000A:word16] = di
	dx = dx - dx
	SCZO = cond(dx)
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(GT,SZO) l01AF_0F8C
	// succ:  l01AF_0F89 l01AF_0F8C
l01AF_0F89:
	call fn0177_801C (retsize: 0;)
	return
	// succ:  l01AF_1130 fn0177_7ED4_exit
l01AF_0F8C:
	Mem0[ss:bp - 0x0008:word16] = si
	Mem0[ss:bp - 0x0006:word16] = dx
	di = dx
	// succ:  l01AF_0F94
l01AF_0F94:
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x3D88:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_07C2 (retsize: 4;)
	sp = sp + 0x0008
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01AF_0FC8
	// succ:  l01AF_0FB1 l01AF_0FC8
l01AF_0FB1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0008:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01AF_101C
	goto l01AF_0FC8
	// succ:  l01AF_0FC8 l01AF_0FC6_thunk_fn0177_801C
l01AF_0FC6_thunk_fn0177_801C:
	call fn0177_801C (retsize: 0;)
	return
	// succ:  fn0177_7ED4_exit
l01AF_0FC8:
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - di)
	branch Test(GT,SZO) l01AF_0F94
	// succ:  l01AF_0FCE l01AF_0F94
l01AF_0FCE:
	call fn0177_801C (retsize: 0;)
	return
	// succ:  l01AF_1130 fn0177_7ED4_exit
l01AF_0FD2:
	Mem0[ss:bp - 0x000A:word16] = di
	di = si - 0x0005
	goto l01AF_0FDF
	// succ:  l01AF_0FDF
l01AF_0FDA:
	Mem0[ss:bp - 0x000A:word16] = di
	di = di - di
	SCZO = cond(di)
	// succ:  l01AF_0FDF
l01AF_0FDF:
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x3D88:word16]
	ax = 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_07C2 (retsize: 4;)
	sp = sp + 0x0008
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l01AF_1002
	// succ:  l01AF_0FFF l01AF_1002
l01AF_0FFF:
	call fn0177_801C (retsize: 0;)
	return
	// succ:  l01AF_1130
l01AF_1002:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	// succ:  l01AF_1002_thunk_fn0177_8003
l01AF_1002_thunk_fn0177_8003:
	call fn0177_8003 (retsize: 0;)
	return
	// succ:  fn0177_7ED4_exit
l01AF_1026:
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01AF_1067
	// succ:  l01AF_1033 l01AF_1067
l01AF_1033:
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x3D88:word16]
	ax = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_07C2 (retsize: 4;)
	sp = sp + 0x0008
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01AF_1067
	// succ:  l01AF_1053 l01AF_1067
l01AF_1053:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0008:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01AF_101C
	goto l01AF_1067
	// succ:  l01AF_1067 l01AF_1065_thunk_fn0177_801C
l01AF_1065_thunk_fn0177_801C:
	call fn0177_801C (retsize: 0;)
	return
	// succ:  fn0177_7ED4_exit
l01AF_1067:
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01AF_10B0
	// succ:  l01AF_1074 l01AF_10B0
l01AF_1074:
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x3D88:word16]
	ax = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_07C2 (retsize: 4;)
	sp = sp + 0x0008
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01AF_10B0
	// succ:  l01AF_1098 l01AF_10B0
l01AF_1098:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0008:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01AF_10B2
	// succ:  l01AF_10AC l01AF_10B2
l01AF_10AC:
	call fn0177_801C (retsize: 0;)
	return
	// succ:  l01AF_10AC_thunk_fn0177_801C fn0177_7ED4_exit
l01AF_10AC_thunk_fn0177_801C:
	call fn0177_801C (retsize: 0;)
	return
	// succ:  fn0177_7ED4_exit
l01AF_10B0:
	si = si - si
	SCZO = cond(si)
	// succ:  l01AF_10B2
l01AF_10B2:
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	Mem0[ss:bp - 0x000A:word16] = di
	Mem0[ss:bp - 0x0004:word16] = si
	// succ:  l01AF_10BA_thunk_fn0177_8116
l01AF_10BA_thunk_fn0177_8116:
	call fn0177_8116 (retsize: 0;)
	return
	// succ:  fn0177_7ED4_exit
l01AF_1126:
	Mem0[ss:bp - 0x000A:word16] = di
	si = di
	Mem0[ds:si + 0x0008:word16] = 0x0000
	// succ:  l01AF_112B_thunk_fn0177_801C
l01AF_112B_thunk_fn0177_801C:
	call fn0177_801C (retsize: 0;)
	return
	// succ:  fn0177_7ED4_exit
fn0177_7ED4_exit:


// fn0177_8000
// Return size: 0
void fn0177_8000()
fn0177_8000_entry:
	// succ:  l0177_8000
l0177_8000:
	sp = fp
	v5 = Mem0[0x0177:bp - 0x0075:word16] + dx
	Mem0[0x0177:bp - 0x0075:word16] = v5
	SCZO = cond(v5)
	goto l0177_8000_thunk_fn0177_8004
	// succ:  l0177_8000_thunk_fn0177_8004
l0177_8000:
	// succ:  l01AF_1130 fn0177_8000_exit
l0177_8000_thunk_fn0177_8004:
	call fn0177_8004 (retsize: 0;)
	return
	// succ:  fn0177_8000_exit
l01AF_1130:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_07A4 (retsize: 4;)
	sp = sp + 0x000A
	ax = Mem0[ss:bp - 0x0010:word16]
	// succ:  l01AF_114B
l01AF_114B:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_8000_exit
fn0177_8000_exit:


// fn0177_8003
// Return size: 0
void fn0177_8003()
fn0177_8003_entry:
	// succ:  l0177_8003
l0177_8003:
	sp = fp
	bx = Mem0[ss:bp - 0x000A:word16]
	goto l0177_8003_thunk_fn0177_8006
	// succ:  l0177_8003_thunk_fn0177_8006
l0177_8003:
	bx = Mem0[ss:bp - 0x000A:word16]
	// succ:  l0177_8003_thunk_fn0177_8004
l0177_8003_thunk_fn0177_8004:
	call fn0177_8004 (retsize: 0;)
	return
	// succ:  fn0177_8003_exit
l0177_8003_thunk_fn0177_8006:
	call fn0177_8006 (retsize: 0;)
	return
	// succ:  fn0177_8003_exit
fn0177_8003_exit:


// fn0177_8004
// Return size: 0
void fn0177_8004()
fn0177_8004_entry:
	// succ:  l0177_8004
l0177_8004:
	sp = fp
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	dx = dx_ax % bh
	ax = dx_ax / bh
	SCZO = cond(ax)
	goto l0177_8005_thunk_fn0177_8006
	// succ:  l0177_8005_thunk_fn0177_8006
l0177_8004:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0008:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01AF_101C
	goto l0177_8015_thunk_fn0177_8019
	// succ:  l0177_8015_thunk_fn0177_8019 l0177_8015_thunk_fn0177_801C
l0177_8005_thunk_fn0177_8006:
	call fn0177_8006 (retsize: 0;)
	return
	// succ:  fn0177_8004_exit
l0177_8015_thunk_fn0177_8019:
	call fn0177_8019 (retsize: 0;)
	return
	// succ:  fn0177_8004_exit
l0177_8015_thunk_fn0177_801C:
	call fn0177_801C (retsize: 0;)
	return
	// succ:  fn0177_8004_exit
fn0177_8004_exit:


// fn0177_8006
// Return size: 0
void fn0177_8006()
fn0177_8006_entry:
	// succ:  l0177_8006
l0177_8006:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0008:word16]
	goto l0177_8006_thunk_fn0177_8009
	// succ:  l0177_8006_thunk_fn0177_8009
l0177_8006:
	branch Test(UGT,CZ) l0177_8011
	goto l0177_8006_thunk_fn0177_8009
	// succ:  l0177_8006_thunk_fn0177_8009 l0177_8011
l0177_8006_thunk_fn0177_8009:
	call fn0177_8009 (retsize: 0;)
	return
	// succ:  fn0177_8006_exit
l0177_8006_thunk_fn0177_8009:
	call fn0177_8009 (retsize: 0;)
	return
	// succ:  fn0177_8006_exit
l0177_8011:
	__bound(ax, Mem0[ds:bx + di:word16])
	C = __aaa(al, ah, &al, &ah)
	v14 = Mem0[ss:bp + di:word16] + cx
	Mem0[ss:bp + di:word16] = v14
	SCZO = cond(v14)
	// succ:  l0177_8016
l0177_8016:
	v17 = Mem0[ds:si + 0x0003:byte] << 0xE9
	Mem0[ds:si + 0x0003:byte] = v17
	SCZO = cond(v17)
	// succ:  l0177_8016_thunk_fn0177_801A
l0177_8016_thunk_fn0177_801A:
	call fn0177_801A (retsize: 0;)
	return
	// succ:  fn0177_8006_exit
fn0177_8006_exit:


// fn0177_8009
// Return size: 0
void fn0177_8009()
fn0177_8009_entry:
	// succ:  l0177_8009
l0177_8009:
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	// succ:  l0177_8015
l0177_8015:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	// succ:  l0177_8017
l0177_8017:
	branch Test(EQ,Z) l0177_8017_thunk_fn0177_801C
	// succ:  l0177_8017_thunk_fn0177_8019 l0177_8017_thunk_fn0177_801C
l0177_8017_thunk_fn0177_8019:
	call fn0177_8019 (retsize: 0;)
	return
	// succ:  fn0177_8009_exit l0177_8017_thunk_fn0177_8019
l0177_8017_thunk_fn0177_8019:
	call fn0177_8019 (retsize: 0;)
	return
	// succ:  fn0177_8009_exit
l0177_8017_thunk_fn0177_801C:
	call fn0177_801C (retsize: 0;)
	return
	// succ:  fn0177_8009_exit
fn0177_8009_exit:


// fn0177_8019
// Return size: 0
void fn0177_8019()
fn0177_8019_entry:
	// succ:  l01AF_1019
l01AF_1019:
fn0177_8019_exit:


// fn0177_801A
// Return size: 0
void fn0177_801A()
fn0177_801A_entry:
	// succ:  l0177_801A
l0177_801A:
	sp = fp
	al = al + 0x01 + C
	SCZO = cond(al)
	goto l0177_801A_thunk_fn0177_801C
	// succ:  l0177_801A_thunk_fn0177_801C
l0177_801A:
	call fn0177_801C (retsize: 0;)
	return
	// succ:  l01AF_1130 fn0177_801A_exit
l0177_801A_thunk_fn0177_801C:
	call fn0177_801C (retsize: 0;)
	return
	// succ:  fn0177_801A_exit
fn0177_801A_exit:


// fn0177_801C
// Return size: 0
void fn0177_801C()
fn0177_801C_entry:
	// succ:  l01AF_101C
l01AF_101C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	// succ:  l01AF_101D
l01AF_101D:
	call fn0137_0066 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l01AF_101D_thunk_fn0177_801A
l01AF_101D_thunk_fn0177_801A:
	call fn0177_801A (retsize: 0;)
	return
	// succ:  fn0177_801C_exit
fn0177_801C_exit:


// fn0177_80E9
// Return size: 0
void fn0177_80E9()
fn0177_80E9_entry:
	// succ:  l0177_80E9
l0177_80E9:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	goto l0177_80EE_thunk_fn0177_80F0
	// succ:  l0177_80EE_thunk_fn0177_80F0
l0177_80E9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	goto l0177_80F6_thunk_fn0177_80F8
	// succ:  l0177_80F6_thunk_fn0177_80F8
l0177_80EE_thunk_fn0177_80F0:
	call fn0177_80F0 (retsize: 0;)
	return
	// succ:  fn0177_80E9_exit
l0177_80F6_thunk_fn0177_80F8:
	call fn0177_80F8 (retsize: 0;)
	return
	// succ:  fn0177_80E9_exit
fn0177_80E9_exit:


// fn0177_80F0
// Return size: 0
void fn0177_80F0()
fn0177_80F0_entry:
	// succ:  l0177_80F0
l0177_80F0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	goto l0177_80F6_thunk_fn0177_80F8
	// succ:  l0177_80F6_thunk_fn0177_80F8
l0177_80F0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	goto l0177_80F6_thunk_fn0177_80F8
	// succ:  l0177_80F6_thunk_fn0177_80F8
l0177_80F6_thunk_fn0177_80F8:
	call fn0177_80F8 (retsize: 0;)
	return
	// succ:  fn0177_80F0_exit
l0177_80F6_thunk_fn0177_80F8:
	call fn0177_80F8 (retsize: 0;)
	return
	// succ:  fn0177_80F0_exit
fn0177_80F0_exit:


// fn0177_80F8
// Return size: 0
void fn0177_80F8()
fn0177_80F8_entry:
	// succ:  l0177_80F8
l0177_80F8:
	sp = fp
	branch Test(NE,Z) l0177_80F8_thunk_fn0177_8116
	goto l0177_80F8_thunk_fn0177_80FA
	// succ:  l0177_80F8_thunk_fn0177_80FA l0177_80F8_thunk_fn0177_8116
l0177_80F8:
	branch Test(NE,Z) l01AF_1116
	goto l0177_80F8_thunk_fn0177_80FA
	// succ:  l0177_80F8_thunk_fn0177_80FA l0177_80F8_thunk_fn0177_8116
l0177_80F8_thunk_fn0177_80FA:
	call fn0177_80FA (retsize: 0;)
	return
	// succ:  fn0177_80F8_exit l0177_80F8_thunk_fn0177_80FA
l0177_80F8_thunk_fn0177_80FA:
	call fn0177_80FA (retsize: 0;)
	return
	// succ:  fn0177_80F8_exit
l0177_80F8_thunk_fn0177_80FA:
	call fn0177_80FA (retsize: 0;)
	return
	// succ:  fn0177_80F8_exit
l0177_80F8_thunk_fn0177_8116:
	call fn0177_8116 (retsize: 0;)
	return
	// succ:  fn0177_80F8_exit
l0177_80F8_thunk_fn0177_8116:
	call fn0177_8116 (retsize: 0;)
	return
	// succ:  fn0177_80F8_exit
fn0177_80F8_exit:


// fn0177_80FA
// Return size: 0
void fn0177_80FA()
fn0177_80FA_entry:
	call fn0177_8116 (retsize: 0;)
	return
	// succ:  l01AF_10FA fn0177_80FA_exit
l01AF_10FA:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01AF_1116
	goto l01AF_10FE
	// succ:  l01AF_10FE l01AF_10FC_thunk_fn0177_8116
l01AF_10FC_thunk_fn0177_8116:
	call fn0177_8116 (retsize: 0;)
	return
	// succ:  fn0177_80FA_exit
l01AF_10FE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	bx = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0008:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_0162 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01AF_1122
	// succ:  l01AF_1114_thunk_fn0177_8116 l01AF_1122
l01AF_1114_thunk_fn0177_8116:
	call fn0177_8116 (retsize: 0;)
	return
	// succ:  fn0177_80FA_exit
l01AF_1122:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	// succ:  l01AF_1122_thunk_fn0177_801C
l01AF_1122_thunk_fn0177_801C:
	call fn0177_801C (retsize: 0;)
	return
	// succ:  fn0177_80FA_exit
fn0177_80FA_exit:


// fn0177_8116
// Return size: 0
void fn0177_8116()
fn0177_8116_entry:
	goto l01AF_1116
	// succ:  l01AF_1116
l01AF_10BD:
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x3D88:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_07C2 (retsize: 4;)
	sp = sp + 0x0008
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01AF_1116
	// succ:  l01AF_10DA l01AF_1116
l01AF_10DA:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01AF_10E2
	// succ:  l01AF_10DE l01AF_10E2
l01AF_10DE:
	cx = si
	goto l01AF_10E8
	// succ:  l01AF_10E8
l01AF_10E2:
	bx = Mem0[ss:bp - 0x000A:word16]
	cx = Mem0[ds:bx + 0x0008:word16]
	// succ:  l01AF_10E8
l01AF_10E8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	// succ:  l01AF_10E8_thunk_fn0177_80E9
l01AF_10E8_thunk_fn0177_80E9:
	call fn0177_80E9 (retsize: 0;)
	return
	// succ:  fn0177_8116_exit
l01AF_1116:
	v4 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v4
	SZO = cond(v4)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0002)
	branch Test(LT,SO) l01AF_10BD
	// succ:  l01AF_111F l01AF_10BD
l01AF_111F:
	call fn0177_801C (retsize: 0;)
	return
	// succ:  l01AF_1130 fn0177_8116_exit
fn0177_8116_exit:


// fn01AF_1158
// Return size: 4
void fn01AF_1158()
fn01AF_1158_entry:
	// succ:  l01AF_1158
l01AF_1158:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01AF_1190 (retsize: 2;)
	sp = sp + 0x0008
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01AF_1158_exit
fn01AF_1158_exit:


// fn01AF_1190
// Return size: 4
void fn01AF_1190()
fn01AF_1190_entry:
	// succ:  l01AF_1190
l01AF_1190:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0106
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	si = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_062A (retsize: 4;)
	sp = sp + 0x000A
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01AF_11FE
	// succ:  l01AF_11BF l01AF_11FE
l01AF_11BF:
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0724 (retsize: 4;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01AF_11FE
	// succ:  l01AF_11D4 l01AF_11FE
l01AF_11D4:
	ax = 0x01EA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0106
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = bp - 0x0106
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0030
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	ax = ax - ax
	SCZO = cond(ax)
	goto l01AF_121C
	// succ:  l01AF_121C
l01AF_11FE:
	ax = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:di:word16] = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	Mem0[ds:si:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01AF_12A6 (retsize: 2;)
	sp = sp + 0x000A
l01AF_121C:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01AF_1190_exit
fn01AF_1190_exit:


// fn01AF_1228
// Return size: 4
void fn01AF_1228()
fn01AF_1228_entry:
	// succ:  l01AF_1228
l01AF_1228:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4EBA:word16] - 0x0000)
	branch Test(NE,Z) l01AF_125E
	// succ:  l01AF_123D l01AF_125E
l01AF_123D:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x4EBA:word16] = ax
	bx = ax
	si = Mem0[ds:bx:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x0002:word16] = 0x0001
	Mem0[ds:si:word16] = 0x0000
	goto l01AF_1264
	// succ:  l01AF_1264
l01AF_125E:
	bx = Mem0[ds:0x4EBA:word16]
	si = Mem0[ds:bx:word16]
	// succ:  l01AF_1264
l01AF_1264:
	ax = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:si + 0x0002:word16] - ax)
	branch Test(NE,Z) l01AF_128F
	// succ:  l01AF_126B l01AF_128F
l01AF_126B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EBA:word16]
	ax = ax + 0x0004
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalReAlloc(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	Mem0[ds:0x4EBA:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01AF_129B
	// succ:  l01AF_1285 l01AF_129B
l01AF_1285:
	bx = ax
	si = Mem0[ds:bx:word16]
	bx = Mem0[ds:bx:word16]
	v13 = Mem0[ds:bx + 0x0002:word16] + 0x0002
	Mem0[ds:bx + 0x0002:word16] = v13
	SCZO = cond(v13)
	// succ:  l01AF_128F
l01AF_128F:
	ax = Mem0[ss:bp + 0x0006:word16]
	bx = Mem0[ds:si:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	Mem0[ds:bx + 0x0004 + si:word16] = ax
	v14 = Mem0[ds:si:word16] + 0x0001
	Mem0[ds:si:word16] = v14
	SZO = cond(v14)
	// succ:  l01AF_129B
l01AF_129B:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01AF_1228_exit
fn01AF_1228_exit:


// fn01AF_12A6
// Return size: 4
void fn01AF_12A6()
fn01AF_12A6_entry:
	goto l01AF_12A6
	// succ:  l01AF_12A6
l0177_832F:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01AF_12A6_exit
l01AF_12A6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x3D88:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	call fn01AF_0E20 (retsize: 2;)
	sp = sp + 0x0006
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01AF_132C
	// succ:  l01AF_12D2 l01AF_132C
l01AF_12D2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x01)
	C = false
	branch Test(NE,Z) l01AF_12FE
	// succ:  l01AF_12E0 l01AF_12FE
l01AF_12E0:
	SZO = cond(Mem0[ss:bp + 0x0006:byte] & 0x02)
	C = false
	branch Test(EQ,Z) l01AF_12EC
	// succ:  l01AF_12E6 l01AF_12EC
l01AF_12E6:
	v16 = Mem0[ds:si + 0x000A:byte] & 0xFE
	Mem0[ds:si + 0x000A:byte] = v16
	SZO = cond(Mem0[ds:si + 0x000A:byte])
	C = false
	goto l01AF_1302
	// succ:  l01AF_1302
l01AF_12EC:
	SCZO = cond(Mem0[ds:si:byte] - 0x05)
	branch Test(EQ,Z) l01AF_12FE
	// succ:  l01AF_12F1 l01AF_12FE
l01AF_12F1:
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01AF_12E6
	// succ:  l01AF_12FE l01AF_12E6
l01AF_12FE:
	v17 = Mem0[ds:si + 0x000A:byte] | 0x01
	Mem0[ds:si + 0x000A:byte] = v17
	SZO = cond(Mem0[ds:si + 0x000A:byte])
	C = false
	// succ:  l01AF_1302
l01AF_1302:
	Mem0[ds:si + 0x0016:byte] = 0xFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	call fn018F_18FE (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn01AF_1228 (retsize: 2;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l01AF_132C
l01AF_132C:
	ax = di
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	goto l0177_832F
	// succ:  l0177_832F
fn01AF_12A6_exit:


// fn01AF_133A
// Return size: 4
void fn01AF_133A()
fn01AF_133A_entry:
	// succ:  l01AF_133A
l01AF_133A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	// succ:  l01AF_1347
l01AF_1347:
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_04F4 (retsize: 4;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01AF_1387
	// succ:  l01AF_135C l01AF_1387
l01AF_135C:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01AF_1347
	// succ:  l01AF_1375 l01AF_1347
l01AF_1375:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01AF_12A6 (retsize: 2;)
	sp = sp + 0x000A
l01AF_1387:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01AF_133A_exit
fn01AF_133A_exit:


// fn01AF_1390
// Return size: 4
void fn01AF_1390()
fn01AF_1390_entry:
	// succ:  l01AF_1390
l01AF_1390:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l01AF_13AA
	// succ:  l01AF_13A6 l01AF_13AA
l01AF_13A6:
	ax = di
	goto l01AF_13C4
	// succ:  l01AF_13C4
l01AF_13AA:
	cx = 0x0010
	bx = 0x09BC
	ax = 0x01AF
	es = ax
	// succ:  l01AF_13B5
l01AF_13B5:
	SCZO = cond(Mem0[0x01AF:bx:word16] - di)
	branch Test(ULE,CZ) l01AF_13C2
	// succ:  l01AF_13BA l01AF_13C2
l01AF_13BA:
	bx = bx - 0x0001
	SZO = cond(bx)
	bx = bx - 0x0001
	SZO = cond(bx)
	cx = cx - 0x0001
	SZO = cond(cx)
	branch Test(NS,S) l01AF_13B5
	// succ:  l01AF_13BF l01AF_13B5
l01AF_13BF:
	goto l01AF_13C4
	// succ:  l01AF_13C4
l01AF_13C2:
	ax = cx
	// succ:  l01AF_13C4
l01AF_13C4:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01AF_1390_exit
fn01AF_1390_exit:


// fn01BF_0000
// Return size: 0
void fn01BF_0000()
fn01BF_0000_entry:
	// succ:  l0177_9000
l0177_9000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	// succ:  l0177_9001
l0177_9001:
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l0177_9003
l0177_9003:
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	// succ:  l0177_9007
l0177_9007:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	// succ:  l0177_900D
l0177_900D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	// succ:  l0177_900E
l0177_900E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	// succ:  l0177_9013
l0177_9013:
	sp = sp - 0x0002
	call fn0177_93AA (retsize: 2;)
	sp = sp + 0x0004
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_0000_exit
fn01BF_0000_exit:


// fn0177_93AA
// Return size: 4
void fn0177_93AA()
fn0177_93AA_entry:
	// succ:  l0177_93AA
l0177_93AA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0048
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	SCZO = cond(Mem0[ds:bx + 0x3D86:word16] - 0x0002)
	branch Test(NE,Z) l0177_93CE
	// succ:  l0177_93C9 l0177_93CE
l0177_93C9:
	ax = Mem0[ds:0x3D00:word16]
	goto l0177_93D1
	// succ:  l0177_93D1
l0177_93CE:
	ax = Mem0[ds:0x3CE2:word16]
	// succ:  l0177_93D1
l0177_93D1:
	Mem0[ss:bp - 0x001C:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0177_941E
	// succ:  l0177_93DA l0177_941E
l0177_93DA:
	SCZO = cond(Mem0[ds:0x05B2:word16] - 0x0000)
	branch Test(EQ,Z) l0177_941E
	// succ:  l0177_93E1 l0177_941E
l0177_93E1:
	ax = Mem0[ds:0x412C:word16]
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % Mem0[ds:0x0482:word16]
	ax = dx_ax /u Mem0[ds:0x0482:word16]
	SCZO = cond(ax)
	Mem0[ds:0x414E:word16] = ax
	SCZO = cond(ax - 0x0008)
	branch Test(ULT,C) l0177_93FA
	// succ:  l0177_93F2 l0177_93FA
l0177_93F2:
	v16 = Mem0[ds:0x414E:word16] - 0x0008
	Mem0[ds:0x414E:word16] = v16
	SCZO = cond(v16)
	goto l0177_9400
	// succ:  l0177_9400
l0177_93FA:
	Mem0[ds:0x414E:word16] = 0x0000
	// succ:  l0177_9400
l0177_9400:
	ax = Mem0[ds:0x412E:word16]
	dx = dx - dx
	SCZO = cond(dx)
	dx = dx_ax % Mem0[ds:0x0480:word16]
	ax = dx_ax /u Mem0[ds:0x0480:word16]
	SCZO = cond(ax)
	Mem0[ds:0x4150:word16] = ax
	SCZO = cond(ax - 0x0008)
	branch Test(ULT,C) l0177_9418
	// succ:  l0177_9411 l0177_9418
l0177_9411:
	v17 = Mem0[ds:0x4150:word16] - 0x0008
	Mem0[ds:0x4150:word16] = v17
	SCZO = cond(v17)
	goto l0177_941E
	// succ:  l0177_941E
l0177_9418:
	Mem0[ds:0x4150:word16] = 0x0000
	// succ:  l0177_941E
l0177_941E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = bp - 0x0048
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BeginPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x000E:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_9435
	// succ:  l0177_9432 l0177_9435
l0177_9432:
	goto l0177_94EA
	// succ:  l0177_94EA
l0177_9435:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l0177_943E
	// succ:  l0177_943B l0177_943E
l0177_943B:
	goto l0177_94F0
	// succ:  l0177_94F0
l0177_943E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetMapMode(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	cl = 0x05
	ax = Mem0[ds:0x0482:word16]
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x0480:word16]
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetWindowExt(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4128:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x412A:word16]
	SetViewportExt(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetStretchBltMode(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = bp - 0x0028
	si = bp - 0x0044
	ax = ss
	es = ax
	v26 = Mem0[si:word16]
	Mem0[di:word16] = v26
	si = si + 0x0002
	di = di + 0x0002
	v27 = Mem0[si:word16]
	Mem0[di:word16] = v27
	si = si + 0x0002
	di = di + 0x0002
	v28 = Mem0[si:word16]
	Mem0[di:word16] = v28
	si = si + 0x0002
	di = di + 0x0002
	v29 = Mem0[si:word16]
	Mem0[di:word16] = v29
	si = si + 0x0002
	di = di + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = bp - 0x0028
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	DPtoLP(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = Mem0[ss:bp - 0x0026:word16]
	dx_ax = (word32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0005
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0020:word16] = ax
	ax = Mem0[ss:bp - 0x0022:word16]
	ax = ax + 0x001F
	SCZO = cond(ax)
	dx_ax = (word32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x001A:word16] = ax
	ax = Mem0[ss:bp - 0x0028:word16]
	dx_ax = (word32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax + Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x001E:word16] = ax
	ax = Mem0[ss:bp - 0x0024:word16]
	ax = ax + 0x001F
	SCZO = cond(ax)
	dx_ax = (word32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	goto l0177_954A
	// succ:  l0177_954A
l0177_94EA:
	si = Mem0[ss:bp + 0x0006:word16]
	goto l0177_96D1
	// succ:  l0177_96D1
l0177_94F0:
	ax = Mem0[ss:bp - 0x0042:word16]
	dx_ax = (word32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0005
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax + Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0020:word16] = ax
	ax = Mem0[ss:bp - 0x003E:word16]
	ax = ax + 0x001F
	SCZO = cond(ax)
	dx_ax = (word32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax + Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x001A:word16] = ax
	ax = Mem0[ss:bp - 0x0044:word16]
	dx_ax = (word32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax + Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x001E:word16] = ax
	ax = Mem0[ss:bp - 0x0040:word16]
	ax = ax + 0x001F
	SCZO = cond(ax)
	dx_ax = (word32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax + Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	// succ:  l0177_954A
l0177_954A:
	Mem0[ss:bp - 0x0016:word16] = ax
	ax = ax - Mem0[ds:0x0482:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + Mem0[ds:0x0482:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	call fn01BF_137E (retsize: 2;)
	sp = sp + 0x0002
	bx = Mem0[ds:0x0096:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	SCZO = cond(Mem0[0x0177:bx + 0x00B1:word16] - 0x0000)
	branch Test(EQ,Z) l0177_957F
	// succ:  l0177_9571 l0177_957F
l0177_9571:
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x4104
	cx = 0x0020
	di = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l0177_957D
l0177_957D:
	branch cx == 0x0000 l0177_957F
	// succ:  l0177_957D_1 l0177_957F
l0177_957D_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l0177_957D
	// succ:  l0177_957D
l0177_957F:
	dx = Mem0[ss:bp - 0x0020:word16]
	SCZO = cond(dx - Mem0[ss:bp - 0x001A:word16])
	branch Test(ULT,C) l0177_958A
	// succ:  l0177_9587 l0177_958A
l0177_9587:
	goto l0177_9691
	// succ:  l0177_9691
l0177_958A:
	cl = 0x06
	ax = dx
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0012:word16] = ax
	Mem0[ss:bp - 0x0014:word16] = dx
	// succ:  l0177_9596
l0177_9596:
	cl = 0x05
	ax = Mem0[ss:bp - 0x0014:word16]
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0018:word16] = ax
	ax = Mem0[ds:0x0480:word16]
	SCZO = cond(Mem0[ss:bp - 0x0014:word16] - ax)
	branch Test(ULT,C) l0177_95C0
	// succ:  l0177_95AC l0177_95C0
l0177_95AC:
	di = Mem0[ss:bp - 0x001E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	ax = Mem0[ss:bp - 0x0018:word16]
	ax = ax + 0x0020
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	goto l0177_9675
	// succ:  l0177_9675
l0177_95C0:
	di = Mem0[ss:bp - 0x001E:word16]
	Mem0[ss:bp - 0x0008:word16] = di
	SCZO = cond(di - Mem0[ss:bp - 0x000A:word16])
	branch Test(ULT,C) l0177_95CE
	// succ:  l0177_95CB l0177_95CE
l0177_95CB:
	goto l0177_965D
	// succ:  l0177_965D
l0177_95CE:
	cx = di
	ax = di
	ax = ax + Mem0[ss:bp - 0x0012:word16]
	SCZO = cond(ax)
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = ax
	dx = Mem0[ss:bp - 0x000A:word16]
	Mem0[ss:bp - 0x0010:word16] = cx
	// succ:  l0177_95E9
l0177_95E9:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x02)
	C = false
	branch Test(NE,Z) l0177_95F7
	// succ:  l0177_95EF l0177_95F7
l0177_95EF:
	bx = bx + 0x0003
	SCZO = cond(bx)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - dx)
	branch Test(ULT,C) l0177_95E9
	// succ:  l0177_95F7 l0177_95E9
l0177_95F7:
	SCZO = cond(cx - di)
	branch Test(UGE,C) l0177_9612
	// succ:  l0177_95FB l0177_9612
l0177_95FB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	ax = Mem0[ss:bp - 0x0018:word16]
	ax = ax + 0x0020
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CE2:word16]
	sp = sp - 0x0002
	call fn0177_981A (retsize: 2;)
	sp = sp + 0x000C
l0177_9612:
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - di)
	branch Test(ULE,CZ) l0177_965D
	// succ:  l0177_9617 l0177_965D
l0177_9617:
	cx = di
	ax = Mem0[ss:bp - 0x0012:word16]
	ax = ax + di
	SCZO = cond(ax)
	dx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = ax
	Mem0[ss:bp - 0x0006:word16] = cx
	Mem0[ss:bp - 0x000C:word16] = di
	dx = Mem0[ss:bp - 0x000A:word16]
	// succ:  l0177_9635
l0177_9635:
	bx = bx + 0x0003
	SCZO = cond(bx)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - dx)
	branch Test(UGE,C) l0177_9643
	// succ:  l0177_963D l0177_9643
l0177_963D:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x02)
	C = false
	branch Test(NE,Z) l0177_9635
	// succ:  l0177_9643 l0177_9635
l0177_9643:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn0177_9720 (retsize: 2;)
	sp = sp + 0x000A
	Mem0[ss:bp - 0x0008:word16] = di
	SCZO = cond(di - Mem0[ss:bp - 0x000A:word16])
	branch Test(UGE,C) l0177_965D
	// succ:  l0177_965A l0177_965D
l0177_965A:
	goto l0177_95CE
	// succ:  l0177_95CE
l0177_965D:
	ax = Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(Mem0[ss:bp - 0x0016:word16] - ax)
	branch Test(ULE,CZ) l0177_967F
	// succ:  l0177_9665 l0177_967F
l0177_9665:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	ax = Mem0[ss:bp - 0x0018:word16]
	ax = ax + 0x0020
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	// succ:  l0177_9675
l0177_9675:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0016:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	sp = sp - 0x0002
	call fn0177_981A (retsize: 2;)
	sp = sp + 0x000C
	// succ:  l0177_967F
l0177_967F:
	v23 = Mem0[ss:bp - 0x0012:word16] + 0x0040
	Mem0[ss:bp - 0x0012:word16] = v23
	SCZO = cond(v23)
	ax = Mem0[ss:bp - 0x001A:word16]
	v24 = Mem0[ss:bp - 0x0014:word16] + 0x0001
	Mem0[ss:bp - 0x0014:word16] = v24
	SZO = cond(v24)
	SCZO = cond(Mem0[ss:bp - 0x0014:word16] - ax)
	branch Test(UGE,C) l0177_9691
	// succ:  l0177_968E l0177_9691
l0177_968E:
	goto l0177_9596
	// succ:  l0177_9596
l0177_9691:
	si = Mem0[ss:bp + 0x0006:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l0177_96C4
	// succ:  l0177_9698 l0177_96C4
l0177_9698:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0177_A106 (retsize: 2;)
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - Mem0[ss:bp - 0x0020:word16])
	branch Test(ULT,C) l0177_96C4
	// succ:  l0177_96AA l0177_96C4
l0177_96AA:
	SCZO = cond(ax - Mem0[ss:bp - 0x001A:word16])
	branch Test(UGE,C) l0177_96C4
	// succ:  l0177_96AF l0177_96C4
l0177_96AF:
	al = Mem0[ds:0x4D1D:byte]
	SCZO = cond(ax - Mem0[ss:bp - 0x001E:word16])
	branch Test(ULT,C) l0177_96C4
	// succ:  l0177_96B7 l0177_96C4
l0177_96B7:
	SCZO = cond(ax - Mem0[ss:bp - 0x000A:word16])
	branch Test(UGE,C) l0177_96C4
	// succ:  l0177_96BC l0177_96C4
l0177_96BC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0177_A620 (retsize: 2;)
	sp = sp + 0x0004
l0177_96C4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = bp - 0x0048
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	EndPaint(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	// succ:  l0177_96D1
l0177_96D1:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0177_9714
	// succ:  l0177_96D5 l0177_9714
l0177_96D5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0177_9714
	// succ:  l0177_96E3 l0177_9714
l0177_96E3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0177_A106 (retsize: 2;)
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - Mem0[ss:bp - 0x0020:word16])
	branch Test(ULT,C) l0177_970B
	// succ:  l0177_96F3 l0177_970B
l0177_96F3:
	SCZO = cond(ax - Mem0[ss:bp - 0x001A:word16])
	branch Test(UGE,C) l0177_970B
	// succ:  l0177_96F8 l0177_970B
l0177_96F8:
	al = Mem0[ds:0x4D1D:byte]
	SCZO = cond(ax - Mem0[ss:bp - 0x001E:word16])
	branch Test(ULT,C) l0177_970B
	// succ:  l0177_9700 l0177_970B
l0177_9700:
	SCZO = cond(ax - Mem0[ss:bp - 0x000A:word16])
	branch Test(UGE,C) l0177_970B
	// succ:  l0177_9705 l0177_970B
l0177_9705:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn0177_A620 (retsize: 2;)
	sp = sp + 0x0004
l0177_970B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0177_9714
l0177_9714:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_93AA_exit
fn0177_93AA_exit:


// fn0177_9720
// Return size: 4
void fn0177_9720()
fn0177_9720_entry:
	// succ:  l0177_9720
l0177_9720:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0012
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0001)
	C = !C
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax & 0x0004
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x000E:word16] = ax
	cl = 0x05
	si = Mem0[ss:bp + 0x000C:word16]
	si = si - Mem0[ds:0x4BE8:word16]
	SCZO = cond(si)
	si = si << cl
	SCZO = cond(si)
	ax = si + 0x0020
	Mem0[ss:bp - 0x0010:word16] = ax
	cl = 0x06
	ax = Mem0[ss:bp + 0x000C:word16]
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + bx
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	SCZO = cond(bx - Mem0[ss:bp + 0x0008:word16])
	branch Test(LT,SO) l0177_976D
	// succ:  l0177_976A l0177_976D
l0177_976A:
	goto l0177_980D
	// succ:  l0177_980D
l0177_976D:
	Mem0[ss:bp - 0x0012:word16] = si
	di = bx
	// succ:  l0177_9772
l0177_9772:
	si = Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - di)
	branch Test(LE,SZO) l0177_9799
	// succ:  l0177_977A l0177_9799
l0177_977A:
	SCZO = cond(Mem0[ds:si:byte] - 0x10)
	branch Test(UGE,C) l0177_9785
	// succ:  l0177_977F l0177_9785
l0177_977F:
	SCZO = cond(Mem0[ds:si + 0x0002:byte] - 0x00)
	branch Test(EQ,Z) l0177_9799
	// succ:  l0177_9785 l0177_9799
l0177_9785:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	call fn0177_9868 (retsize: 2;)
	si = si + 0x0003
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - di)
	branch Test(GT,SZO) l0177_977A
	// succ:  l0177_9799 l0177_977A
l0177_9799:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - di)
	branch Test(LE,SZO) l0177_980D
	// succ:  l0177_979E l0177_980D
l0177_979E:
	dl = Mem0[ds:si:byte]
	dh = dh - dh
	SCZO = cond(dh)
	Mem0[ss:bp - 0x000C:word16] = di
	cx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x0006:word16] = dx
	// succ:  l0177_97AB
l0177_97AB:
	si = si + 0x0003
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - cx)
	branch Test(GE,SO) l0177_97C0
	// succ:  l0177_97B3 l0177_97C0
l0177_97B3:
	al = Mem0[ds:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - dx)
	branch Test(NE,Z) l0177_97C0
	// succ:  l0177_97BB l0177_97C0
l0177_97BB:
	SCZO = cond(Mem0[ds:si + 0x0002:byte] - ah)
	branch Test(EQ,Z) l0177_97AB
	// succ:  l0177_97C0 l0177_97AB
l0177_97C0:
	Mem0[ss:bp - 0x000A:word16] = si
	Mem0[ss:bp - 0x0008:word16] = di
	SCZO = cond(di - Mem0[ss:bp - 0x000C:word16])
	branch Test(EQ,Z) l0177_9805
	// succ:  l0177_97CB l0177_9805
l0177_97CB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	bx = Mem0[ss:bp - 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	al = Mem0[0x0177:bx + 0x010D:byte]
	ax = ax & 0x007F
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	si = bx
	sp = sp - 0x0002
	call fn01BF_13DE (retsize: 2;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	bl = Mem0[0x0177:si + 0x010D:byte]
	bx = bx & 0x007F
	SZO = cond(bx)
	C = false
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x3CFE:word16]
	sp = sp - 0x0002
	call fn0177_981A (retsize: 2;)
	sp = sp + 0x000C
l0177_9805:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - di)
	branch Test(LE,SZO) l0177_980D
	// succ:  l0177_980A l0177_980D
l0177_980A:
	goto l0177_9772
	// succ:  l0177_9772
l0177_980D:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_9720_exit
fn0177_9720_exit:


// fn0177_981A
// Return size: 4
void fn0177_981A()
fn0177_981A_entry:
	// succ:  l0177_981A
l0177_981A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cl = 0x05
	ax = Mem0[ss:bp + 0x000A:word16]
	dx = Mem0[ds:0x3D84:word16]
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	dx = dx - Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(dx)
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0x0000
	dx = dx << cl
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_981A_exit
fn0177_981A_exit:


// fn0177_9868
// Return size: 0
void fn0177_9868()
fn0177_9868_entry:
	// succ:  l0177_9868
l0177_9868:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = si
	ax = ax - 0x0CE2
	SCZO = cond(ax)
	cx = 0x0003
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	cx = 0x0040
	bx = ax
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	cl = 0x05
	dx = dx - Mem0[ds:0x3D84:word16]
	SCZO = cond(dx)
	dx = dx << cl
	SCZO = cond(dx)
	// succ:  l0177_9899_thunk_fn0177_989B
l0177_9899_thunk_fn0177_989B:
	call fn0177_989B (retsize: 0;)
	return
	// succ:  fn0177_9868_exit
fn0177_9868_exit:


// fn0177_989B
// Return size: 0
void fn0177_989B()
fn0177_989B_entry:
	goto l0177_989B
	// succ:  l0177_989B
l0177_989A_thunk_fn0177_98EE:
	call fn0177_98EE (retsize: 0;)
	return
	// succ:  fn0177_989B_exit
l0177_989B:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	goto l0177_989C_in_fn0177_989B
	// succ:  l0177_989C_in_fn0177_989B
l0177_989B:
	// succ:  l0177_989C l0177_989A_thunk_fn0177_98EE
l0177_989C:
	ax = bx
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0006
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	cl = 0x05
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01BF_08C4 (retsize: 2;)
	sp = sp + 0x000A
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_989B_exit
l0177_989C_in_fn0177_989B:
	ax = bx
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0006
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	cl = 0x05
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01BF_08C4 (retsize: 2;)
	sp = sp + 0x000A
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_989B_exit
fn0177_989B_exit:


// fn01BF_08C4
// Return size: 4
void fn01BF_08C4()
fn01BF_08C4_entry:
	// succ:  l01BF_08C4
l01BF_08C4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0024
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0010:word16] = ax
	Mem0[ss:bp - 0x001A:word16] = ax
	Mem0[ss:bp - 0x0018:word16] = ax
	al = Mem0[ss:bp + 0x000A:byte]
	ax = ax & 0x0004
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x000E:word16] = ax
	ax = Mem0[ss:bp + 0x000E:word16]
	ax = ax - 0x0CE2
	SCZO = cond(ax)
	cx = 0x0003
	// succ:  l01BF_08ED_thunk_fn0177_98EE
l01BF_08ED_thunk_fn0177_98EE:
	call fn0177_98EE (retsize: 0;)
	return
	// succ:  fn01BF_08C4_exit
fn01BF_08C4_exit:


// fn0177_98EE
// Return size: 0
void fn0177_98EE()
fn0177_98EE_entry:
	// succ:  l0177_98EE
l0177_98EE:
	sp = fp
	ax = ax + Mem0[ds:bx + si:word16]
	SCZO = cond(ax)
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	bx = ax
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0006
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0014:word16] = ax
	ax = bx
	cx = 0x0040
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0012:word16] = dx
	bx = Mem0[ss:bp + 0x000E:word16]
	al = Mem0[ds:bx + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_991E_thunk_fn0177_9923
	goto l0177_991E_thunk_fn0177_9920
	// succ:  l0177_991E_thunk_fn0177_9920 l0177_991E_thunk_fn0177_9923
l0177_98EE:
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	bx = ax
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = 0x0006
	ax = ax >> cl
	SCZO = cond(ax)
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0014:word16] = ax
	ax = bx
	cx = 0x0040
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0012:word16] = dx
	bx = Mem0[ss:bp + 0x000E:word16]
	al = Mem0[ds:bx + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01BF_0923
	// succ:  l0177_991C_thunk_fn0177_9920 l0177_991C_thunk_fn0177_9923
l0177_991C_thunk_fn0177_9920:
	call fn0177_9920 (retsize: 0;)
	return
	// succ:  fn0177_98EE_exit
l0177_991C_thunk_fn0177_9923:
	call fn0177_9923 (retsize: 0;)
	return
	// succ:  fn0177_98EE_exit
l0177_991E_thunk_fn0177_9920:
	call fn0177_9920 (retsize: 0;)
	return
	// succ:  fn0177_98EE_exit l0177_991E_thunk_fn0177_9920
l0177_991E_thunk_fn0177_9920:
	call fn0177_9920 (retsize: 0;)
	return
	// succ:  fn0177_98EE_exit
l0177_991E_thunk_fn0177_9923:
	call fn0177_9923 (retsize: 0;)
	return
	// succ:  fn0177_98EE_exit
fn0177_98EE_exit:


// fn0177_9920
// Return size: 0
void fn0177_9920()
fn0177_9920_entry:
	// succ:  l01BF_0920
l01BF_0920:
	call fn0177_9923 (retsize: 0;)
	return
	// succ:  l01BF_0A62 fn0177_9920_exit
l01BF_0A62:
	di = Mem0[ss:bp + 0x000E:word16]
	bl = Mem0[ds:di:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bl = Mem0[0x01BF:bx + 0x010D:byte]
	bx = bx & 0x007F
	SZO = cond(bx)
	C = false
	Mem0[ss:bp - 0x0024:word16] = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	si = Mem0[ds:bx + 0x3CFE:word16]
	si = si | si
	SZO = cond(si)
	C = false
	// succ:  l01BF_0A7E_thunk_fn0177_9A80
l01BF_0A7E_thunk_fn0177_9A80:
	call fn0177_9A80 (retsize: 0;)
	return
	// succ:  fn0177_9920_exit
fn0177_9920_exit:


// fn0177_9923
// Return size: 0
void fn0177_9923()
fn0177_9923_entry:
	// succ:  l01BF_0923
l01BF_0923:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x4960:word16]
	Mem0[ss:bp - 0x0010:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = ax
	Mem0[ss:bp - 0x001A:word16] = bx
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l01BF_0941
	// succ:  l01BF_093E l01BF_0941
l01BF_093E:
	call fn0177_9920 (retsize: 0;)
	return
	// succ:  l01BF_0A62 fn0177_9923_exit
l01BF_0941:
	SZO = cond(Mem0[ss:bp + 0x000A:byte] & 0x06)
	C = false
	branch Test(EQ,Z) l01BF_094A
	// succ:  l01BF_0947 l01BF_094A
l01BF_0947:
	call fn0177_9920 (retsize: 0;)
	return
	// succ:  l01BF_0A62 fn0177_9923_exit
l01BF_094A:
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	call fn00F7_1628 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01BF_0967
	// succ:  l01BF_0964 l01BF_0967
l01BF_0964:
	call fn0177_9920 (retsize: 0;)
	return
	// succ:  l01BF_0A62 fn0177_9923_exit
l01BF_0967:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn018F_2D46 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01BF_0976
	// succ:  l01BF_0973 l01BF_0976
l01BF_0973:
	call fn0177_9920 (retsize: 0;)
	return
	// succ:  l01BF_0A62 fn0177_9923_exit
l01BF_0976:
	di = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1E92 (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l01BF_0988
	// succ:  l01BF_0985 l01BF_0988
l01BF_0985:
	call fn0177_9E29 (retsize: 0;)
	return
	// succ:  l01BF_0E31 fn0177_9923_exit
l01BF_0988:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1E92 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01BF_099E
	// succ:  l01BF_0995 l01BF_099E
l01BF_0995:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l01BF_0996_thunk_fn0177_9E29
l01BF_0996_thunk_fn0177_9E29:
	call fn0177_9E29 (retsize: 0;)
	return
	// succ:  fn0177_9923_exit
l01BF_099E:
	SZO = cond(Mem0[ss:bp + 0x000A:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l01BF_09C8
	// succ:  l01BF_09A4 l01BF_09C8
l01BF_09A4:
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CE2:word16]
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	goto l01BF_09DA
	// succ:  l01BF_09DA
l01BF_09C8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp + 0x000A:word16]
	al = al | 0x02
	SZO = cond(al)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01BF_08C4 (retsize: 2;)
	sp = sp + 0x000A
l01BF_09DA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	dx = 0x001F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	dx = 0xFFE0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	StretchBlt(Mem0[ss:sp + 22:word16], Mem0[ss:sp + 20:word16], Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0018
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(NE,Z) l01BF_0A08
l01BF_0E31:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_9923_exit
fn0177_9923_exit:


// fn0177_9A00
// Return size: 0
void fn0177_9A00()
fn0177_9A00_entry:
	// succ:  l0177_9A00
l0177_9A00:
	sp = fp
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	goto l0177_9A00_thunk_fn0177_9A01
	// succ:  l0177_9A00_thunk_fn0177_9A01
l0177_9A00:
	call fn0177_9A01 (retsize: 0;)
	return
	// succ:  l0177_9A00_thunk_fn0177_9A01 l0177_9A00_thunk_fn0177_9A01 fn0177_9A00_exit
l0177_9A00_thunk_fn0177_9A01:
	call fn0177_9A01 (retsize: 0;)
	return
	// succ:  fn0177_9A00_exit
l0177_9A00_thunk_fn0177_9A01:
	call fn0177_9A01 (retsize: 0;)
	return
	// succ:  fn0177_9A00_exit
l0177_9A00_thunk_fn0177_9A01:
	call fn0177_9A01 (retsize: 0;)
	return
	// succ:  fn0177_9A00_exit
fn0177_9A00_exit:


// fn0177_9A01
// Return size: 0
void fn0177_9A01()
fn0177_9A01_entry:
	// succ:  l01BF_0A01
l01BF_0A01:
	bx = Mem0[ss:bp - 0x0006:word16]
	v6 = Mem0[ds:bx + 0x000B:byte] | 0x01
	Mem0[ds:bx + 0x000B:byte] = v6
	SZO = cond(Mem0[ds:bx + 0x000B:byte])
	C = false
	// succ:  l01BF_0A08
l01BF_0A08:
	bx = Mem0[ss:bp - 0x0006:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_1C4C (retsize: 4;)
	sp = sp + 0x0002
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01BF_0A29
	// succ:  l01BF_0A1C l01BF_0A29
l01BF_0A1C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	DrawIcon(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l01BF_0A29
l01BF_0A29:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	cx = 0x001F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0xFFE0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	dx = 0x00CC
	// succ:  l01BF_0A46_thunk_fn0177_9A49
l01BF_0A46_thunk_fn0177_9A49:
	call fn0177_9A49 (retsize: 0;)
	return
	// succ:  fn0177_9A01_exit
fn0177_9A01_exit:


// fn0177_9A49
// Return size: 0
void fn0177_9A49()
fn0177_9A49_entry:
	// succ:  l0177_9A49
l0177_9A49:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	StretchBlt(Mem0[ss:sp + 22:word16], Mem0[ss:sp + 20:word16], Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0018
	goto l0177_9A4B_thunk_fn0177_9A50
	// succ:  l0177_9A4B_thunk_fn0177_9A50
l0177_9A49:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	StretchBlt(Mem0[ss:sp + 22:word16], Mem0[ss:sp + 20:word16], Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0018
	goto l0177_9A4B_thunk_fn0177_9A50
	// succ:  l0177_9A4B_thunk_fn0177_9A50
l0177_9A4B_thunk_fn0177_9A50:
	call fn0177_9A50 (retsize: 0;)
	return
	// succ:  fn0177_9A49_exit
l0177_9A4B_thunk_fn0177_9A50:
	call fn0177_9A50 (retsize: 0;)
	return
	// succ:  fn0177_9A49_exit
fn0177_9A49_exit:


// fn0177_9A50
// Return size: 0
void fn0177_9A50()
fn0177_9A50_entry:
	// succ:  l0177_9A50
l0177_9A50:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	goto l0177_9A5E_thunk_fn0177_9E29
	// succ:  l0177_9A5E_thunk_fn0177_9E29
l0177_9A50:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l0177_9A59_thunk_fn0177_9E29
l0177_9A59_thunk_fn0177_9E29:
	call fn0177_9E29 (retsize: 0;)
	return
	// succ:  fn0177_9A50_exit
l0177_9A5E_thunk_fn0177_9E29:
	call fn0177_9E29 (retsize: 0;)
	return
	// succ:  fn0177_9A50_exit
fn0177_9A50_exit:


// fn0177_9A80
// Return size: 0
void fn0177_9A80()
fn0177_9A80_entry:
	// succ:  l0177_9A80
l0177_9A80:
	sp = fp
	branch Test(EQ,Z) l0177_9A80_thunk_fn0177_9ABF
	goto l0177_9A80_thunk_fn0177_9A82
	// succ:  l0177_9A80_thunk_fn0177_9A82 l0177_9A80_thunk_fn0177_9ABF
l0177_9A80:
	branch Test(EQ,Z) l01BF_0ABF
	goto l0177_9A80_thunk_fn0177_9A82
	// succ:  l0177_9A80_thunk_fn0177_9A82 l0177_9A80_thunk_fn0177_9ABF
l0177_9A80_thunk_fn0177_9A82:
	call fn0177_9A82 (retsize: 0;)
	return
	// succ:  fn0177_9A80_exit l0177_9A80_thunk_fn0177_9A82
l0177_9A80_thunk_fn0177_9A82:
	call fn0177_9A82 (retsize: 0;)
	return
	// succ:  fn0177_9A80_exit
l0177_9A80_thunk_fn0177_9A82:
	call fn0177_9A82 (retsize: 0;)
	return
	// succ:  fn0177_9A80_exit
l0177_9A80_thunk_fn0177_9ABF:
	call fn0177_9ABF (retsize: 0;)
	return
	// succ:  fn0177_9A80_exit
l0177_9A80_thunk_fn0177_9ABF:
	call fn0177_9ABF (retsize: 0;)
	return
	// succ:  fn0177_9A80_exit
fn0177_9A80_exit:


// fn0177_9A82
// Return size: 0
void fn0177_9A82()
fn0177_9A82_entry:
	// succ:  l01BF_0A82
l01BF_0A82:
	SCZO = cond(Mem0[ds:0x05B4:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_0A93
	// succ:  l01BF_0A89 l01BF_0A93
l01BF_0A89:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0024:word16]
	sp = sp - 0x0002
	call fn01BF_13DE (retsize: 2;)
	sp = sp + 0x0004
l01BF_0A93:
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax + 0x0020
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax + 0x0020
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x0022
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l01BF_0ABA_thunk_fn0177_9ABF
l01BF_0ABA_thunk_fn0177_9ABF:
	call fn0177_9ABF (retsize: 0;)
	return
	// succ:  fn0177_9A82_exit
fn0177_9A82_exit:


// fn0177_9ABF
// Return size: 0
void fn0177_9ABF()
fn0177_9ABF_entry:
	// succ:  l01BF_0ABF
l01BF_0ABF:
	ax = 0x01BF
	es = ax
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_0AFC
	goto l01BF_0ACA
	// succ:  l01BF_0ACA l01BF_0AC8_thunk_fn0177_9AFC
l01BF_0AC8_thunk_fn0177_9AFC:
	call fn0177_9AFC (retsize: 0;)
	return
	// succ:  fn0177_9ABF_exit
l01BF_0ACA:
	SCZO = cond(Mem0[ds:0x05B2:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_0AFC
	goto l01BF_0AD1
	// succ:  l01BF_0AD1 l01BF_0ACF_thunk_fn0177_9AFC
l01BF_0ACF_thunk_fn0177_9AFC:
	call fn0177_9AFC (retsize: 0;)
	return
	// succ:  fn0177_9ABF_exit
l01BF_0AD1:
	bl = Mem0[ds:di:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	al = Mem0[0x01BF:bx + 0x0110:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l01BF_0AEB
	// succ:  l01BF_0AE5 l01BF_0AEB
l01BF_0AE5:
	SZO = cond(Mem0[ds:di + 0x0001:byte] & 0x10)
	C = false
	branch Test(NE,Z) l01BF_0B60
	goto l01BF_0AEB
	// succ:  l01BF_0AEB l01BF_0AE9_thunk_fn0177_9B60
l01BF_0AE9_thunk_fn0177_9B60:
	call fn0177_9B60 (retsize: 0;)
	return
	// succ:  fn0177_9ABF_exit
l01BF_0AEB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	// succ:  l01BF_0AEE_thunk_fn0177_9AF0
l01BF_0AEE_thunk_fn0177_9AF0:
	call fn0177_9AF0 (retsize: 0;)
	return
	// succ:  fn0177_9ABF_exit
fn0177_9ABF_exit:


// fn0177_9AF0
// Return size: 0
void fn0177_9AF0()
fn0177_9AF0_entry:
	// succ:  l0177_9AF0
l0177_9AF0:
	sp = fp
	bh = bh | bh
	SZO = cond(bh)
	C = false
	branch Test(ULE,CZ) l0177_9AFA
	goto l0177_9AF4
	// succ:  l0177_9AF4 l0177_9AFA
l0177_9AF0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn01BF_22B4 (retsize: 2;)
	sp = sp + 0x0008
	goto l0177_9AF4_thunk_fn0177_9B60
	// succ:  l0177_9AF4_thunk_fn0177_9B60
l0177_9AF4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn01BF_22B4 (retsize: 2;)
	sp = sp + 0x0008
	goto l0177_9AF9_thunk_fn0177_9B60
	// succ:  l0177_9AF9_thunk_fn0177_9B60
l0177_9AF4_thunk_fn0177_9B60:
	call fn0177_9B60 (retsize: 0;)
	return
	// succ:  fn0177_9AF0_exit
l0177_9AF9_thunk_fn0177_9B60:
	call fn0177_9B60 (retsize: 0;)
	return
	// succ:  fn0177_9AF0_exit
l0177_9AFA:
	// succ:  l0177_9AFA_thunk_fn0177_9AFC
l0177_9AFA_thunk_fn0177_9AFC:
	call fn0177_9AFC (retsize: 0;)
	return
	// succ:  fn0177_9AF0_exit
fn0177_9AF0_exit:


// fn0177_9AFC
// Return size: 0
void fn0177_9AFC()
fn0177_9AFC_entry:
	// succ:  l01BF_0AFC
l01BF_0AFC:
	bl = Mem0[ds:di:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	al = Mem0[0x01BF:bx + 0x010F:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	SCZO = cond(ax - 0x0021)
	branch Test(EQ,Z) l01BF_0B52
	// succ:  l01BF_0B12 l01BF_0B52
l01BF_0B12:
	SCZO = cond(si - 0x0023)
	branch Test(EQ,Z) l01BF_0B52
	// succ:  l01BF_0B17 l01BF_0B52
l01BF_0B17:
	SCZO = cond(si - 0x0025)
	branch Test(EQ,Z) l01BF_0B52
	// succ:  l01BF_0B1C l01BF_0B52
l01BF_0B1C:
	SCZO = cond(si - 0x0027)
	branch Test(EQ,Z) l01BF_0B52
	// succ:  l01BF_0B21 l01BF_0B52
l01BF_0B21:
	SCZO = cond(si - 0x0030)
	branch Test(EQ,Z) l01BF_0B52
	// succ:  l01BF_0B26 l01BF_0B52
l01BF_0B26:
	SCZO = cond(si - 0x0032)
	branch Test(EQ,Z) l01BF_0B52
	// succ:  l01BF_0B2B l01BF_0B52
l01BF_0B2B:
	SCZO = cond(si - 0x0034)
	branch Test(EQ,Z) l01BF_0B52
	// succ:  l01BF_0B30 l01BF_0B52
l01BF_0B30:
	SCZO = cond(si - 0x0036)
	branch Test(EQ,Z) l01BF_0B52
	// succ:  l01BF_0B35 l01BF_0B52
l01BF_0B35:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn01BF_1282 (retsize: 2;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0018:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01BF_0B60
	goto l01BF_0B41
	// succ:  l01BF_0B41 l01BF_0B3F_thunk_fn0177_9B60
l01BF_0B3F_thunk_fn0177_9B60:
	call fn0177_9B60 (retsize: 0;)
	return
	// succ:  fn0177_9AFC_exit
l01BF_0B41:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	DrawIcon(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l01BF_0B4B_thunk_fn0177_9B60
l01BF_0B4B_thunk_fn0177_9B60:
	call fn0177_9B60 (retsize: 0;)
	return
	// succ:  fn0177_9AFC_exit
l01BF_0B52:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn01BF_23A6 (retsize: 2;)
	sp = sp + 0x0008
fn0177_9AFC_exit:


// fn0177_9B60
// Return size: 0
void fn0177_9B60()
fn0177_9B60_entry:
	// succ:  l01BF_0B60
l01BF_0B60:
	bl = Mem0[ds:di:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	al = Mem0[0x01BF:bx + 0x010E:byte]
	ax = ax & 0x003F
	SZO = cond(ax)
	C = false
	si = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01BF_0B79
	// succ:  l01BF_0B76 l01BF_0B79
l01BF_0B76:
	goto l01BF_0D30
	// succ:  l01BF_0D30
l01BF_0B79:
	SCZO = cond(Mem0[ds:di:byte] - 0x67)
	branch Test(UGE,C) l01BF_0B81
	// succ:  l01BF_0B7E l01BF_0B81
l01BF_0B7E:
	goto l01BF_0CFA
	// succ:  l01BF_0CFA
l01BF_0B81:
	SCZO = cond(Mem0[ds:di:byte] - 0x76)
	branch Test(ULE,CZ) l01BF_0B89
	// succ:  l01BF_0B86 l01BF_0B89
l01BF_0B86:
	goto l01BF_0CFA
	// succ:  l01BF_0CFA
l01BF_0B89:
	bl = Mem0[ds:di:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx - 0x0067
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0016:word16] = bx
	al = Mem0[ds:bx + 0x409E:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0030
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	SCZO = cond(Mem0[ds:bx + 0x4104:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_0BAB
	// succ:  l01BF_0BA8 l01BF_0BAB
l01BF_0BA8:
	goto l01BF_0D30
	// succ:  l01BF_0D30
l01BF_0BAB:
	bx = Mem0[ds:0x0096:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[0x01BF:bx + 0x00B1:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	si = Mem0[ss:bp - 0x0014:word16]
	ax = Mem0[ss:bp - 0x0012:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	cl = 0x06
	bx = si
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0C22:byte]
	al = al ^ Mem0[ds:di:byte]
	SZO = cond(al)
	C = false
	SZO = cond(al & 0xFF)
	C = false
	branch Test(NE,Z) l01BF_0C01
	// succ:  l01BF_0BDA l01BF_0C01
l01BF_0BDA:
	ax = si
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0C22
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = ax
	cx = Mem0[ss:bp + 0x000E:word16]
	// succ:  l01BF_0BF2
l01BF_0BF2:
	si = si - 0x0001
	SZO = cond(si)
	bx = bx - 0x00C0
	SCZO = cond(bx)
	al = Mem0[ds:bx:byte]
	di = cx
	al = al ^ Mem0[ds:di:byte]
	SZO = cond(al)
	C = false
	SZO = cond(al & 0xFF)
	C = false
	branch Test(EQ,Z) l01BF_0BF2
	// succ:  l01BF_0C01 l01BF_0BF2
l01BF_0C01:
	Mem0[ss:bp - 0x0008:word16] = si
	cl = 0x06
	bx = si
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CDF:byte]
	bx = Mem0[ss:bp + 0x000E:word16]
	al = al ^ Mem0[ds:bx:byte]
	SZO = cond(al)
	C = false
	SZO = cond(al & 0xFF)
	C = false
	branch Test(NE,Z) l01BF_0C4C
	// succ:  l01BF_0C20 l01BF_0C4C
l01BF_0C20:
	ax = si
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CDF
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = Mem0[ss:bp - 0x0006:word16]
	di = ax
	cx = Mem0[ss:bp + 0x000E:word16]
	// succ:  l01BF_0C3B
l01BF_0C3B:
	bx = bx - 0x0001
	SZO = cond(bx)
	di = di - 0x0003
	SCZO = cond(di)
	al = Mem0[ds:di:byte]
	si = cx
	al = al ^ Mem0[ds:si:byte]
	SZO = cond(al)
	C = false
	SZO = cond(al & 0xFF)
	C = false
	branch Test(EQ,Z) l01BF_0C3B
	// succ:  l01BF_0C49 l01BF_0C3B
l01BF_0C49:
	Mem0[ss:bp - 0x0006:word16] = bx
	// succ:  l01BF_0C4C
l01BF_0C4C:
	cl = 0x05
	di = Mem0[ss:bp - 0x0006:word16]
	di = di - Mem0[ds:0x3D84:word16]
	SCZO = cond(di)
	di = di << cl
	SCZO = cond(di)
	si = Mem0[ss:bp - 0x0008:word16]
	si = si - Mem0[ds:0x4BE8:word16]
	SCZO = cond(si)
	si = si << cl
	SCZO = cond(si)
	ax = Mem0[ss:bp - 0x0016:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	v23 = Mem0[ss:bp - 0x000A:word16] + ax
	Mem0[ss:bp - 0x000A:word16] = v23
	SCZO = cond(v23)
	bx = Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(Mem0[0x01BF:bx + 0x0002:byte] - 0x00)
	branch Test(NE,Z) l01BF_0C8A
	// succ:  l01BF_0C76 l01BF_0C8A
l01BF_0C76:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp - 0x000C:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4DEE:word16]
	sp = sp - 0x0002
	call fn01BF_0E3E (retsize: 2;)
	sp = sp + 0x0008
	goto l01BF_0CED
	// succ:  l01BF_0CED
l01BF_0C8A:
	cx = bx
	ax = 0x01BF
	es = ax
	SCZO = cond(Mem0[0x01BF:bx + 0x0002:byte] - 0x02)
	branch Test(NE,Z) l01BF_0CAC
	// succ:  l01BF_0C98 l01BF_0CAC
l01BF_0C98:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp - 0x000C:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4DEE:word16]
	sp = sp - 0x0002
	call fn01BF_0F46 (retsize: 2;)
	sp = sp + 0x0008
	goto l01BF_0CED
	// succ:  l01BF_0CED
l01BF_0CAC:
	SCZO = cond(Mem0[0x01BF:bx + 0x0002:byte] - 0x01)
	branch Test(NE,Z) l01BF_0CC8
	// succ:  l01BF_0CB3 l01BF_0CC8
l01BF_0CB3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp - 0x000C:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4DEE:word16]
	sp = sp - 0x0002
	call fn01BF_0EBC (retsize: 2;)
	sp = sp + 0x0008
	goto l01BF_0CED
	// succ:  l01BF_0CED
l01BF_0CC8:
	SCZO = cond(Mem0[0x01BF:bx + 0x0002:byte] - 0x02)
	branch Test(NE,Z) l01BF_0CD4
	// succ:  l01BF_0CCF l01BF_0CD4
l01BF_0CCF:
	ax = 0x0001
	goto l01BF_0CD6
	// succ:  l01BF_0CD6
l01BF_0CD4:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01BF_0CD6
l01BF_0CD6:
	ax = ax | 0x0001
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01BF_0CED
	// succ:  l01BF_0CDB l01BF_0CED
l01BF_0CDB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp - 0x000C:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x4DEE:word16]
	sp = sp - 0x0002
	call fn01BF_0FD0 (retsize: 2;)
	sp = sp + 0x0008
l01BF_0CED:
	bx = Mem0[ss:bp - 0x0016:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	Mem0[ds:bx + 0x4104:word16] = 0x0001
	goto l01BF_0D30
	// succ:  l01BF_0D30
l01BF_0CFA:
	Mem0[ss:bp - 0x000C:word16] = si
	dx = si
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_0D0C
	// succ:  l01BF_0D05 l01BF_0D0C
l01BF_0D05:
	SCZO = cond(Mem0[ds:0x05B2:word16] - 0x0000)
	branch Test(NE,Z) l01BF_0D30
	// succ:  l01BF_0D0C l01BF_0D30
l01BF_0D0C:
	bx = dx
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x4C70:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01BF_0D30
	// succ:  l01BF_0D1B l01BF_0D30
l01BF_0D1B:
	SCZO = cond(Mem0[ds:0x4130:word16] - 0x0002)
	branch Test(ULE,CZ) l01BF_0D30
	// succ:  l01BF_0D22 l01BF_0D30
l01BF_0D22:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01BF_0E3E (retsize: 2;)
	sp = sp + 0x0008
l01BF_0D30:
	SCZO = cond(Mem0[ss:bp - 0x001A:word16] - 0x0000)
	branch Test(NE,Z) l01BF_0D39
	// succ:  l01BF_0D36 l01BF_0D39
l01BF_0D36:
	goto l01BF_0E23
	// succ:  l01BF_0E23
l01BF_0D39:
	bx = Mem0[ss:bp - 0x001A:word16]
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_0DAA
	// succ:  l01BF_0D42 l01BF_0DAA
l01BF_0D42:
	SZO = cond(Mem0[ss:bp + 0x000A:byte] & 0x01)
	C = false
	branch Test(NE,Z) l01BF_0DAA
	// succ:  l01BF_0D48 l01BF_0DAA
l01BF_0D48:
	bx = Mem0[ds:bx + 0x0002:word16]
	si = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_0D74
	// succ:  l01BF_0D53 l01BF_0D74
l01BF_0D53:
	SCZO = cond(Mem0[ds:0x05B2:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_0D74
	// succ:  l01BF_0D5A l01BF_0D74
l01BF_0D5A:
	SCZO = cond(Mem0[ds:si + 0x0024:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_0DAA
	// succ:  l01BF_0D60 l01BF_0DAA
l01BF_0D60:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x0009
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01BF_22B4 (retsize: 2;)
	sp = sp + 0x0008
	goto l01BF_0DAA
	// succ:  l01BF_0DAA
l01BF_0D74:
	SCZO = cond(Mem0[ds:si + 0x0024:word16] - 0x0001)
	branch Test(ULE,CZ) l01BF_0D80
	// succ:  l01BF_0D7A l01BF_0D80
l01BF_0D7A:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l01BF_0D8B
	// succ:  l01BF_0D8B
l01BF_0D80:
	SCZO = cond(Mem0[ds:si + 0x0024:word16] - 0x0001)
	branch Test(NE,Z) l01BF_0D93
	// succ:  l01BF_0D86 l01BF_0D93
l01BF_0D86:
	bx = Mem0[ds:si + 0x002B:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	// succ:  l01BF_0D8B
l01BF_0D8B:
	call fn0137_0CAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0018:word16] = ax
	// succ:  l01BF_0D93
l01BF_0D93:
	SCZO = cond(Mem0[ss:bp - 0x0018:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_0DAA
	// succ:  l01BF_0D99 l01BF_0DAA
l01BF_0D99:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	DrawIcon(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l01BF_0DAA
l01BF_0DAA:
	bx = Mem0[ss:bp - 0x001A:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_0E23
	// succ:  l01BF_0DB2 l01BF_0E23
l01BF_0DB2:
	SZO = cond(Mem0[ss:bp + 0x000A:byte] & 0x02)
	C = false
	branch Test(NE,Z) l01BF_0E23
	// succ:  l01BF_0DB8 l01BF_0E23
l01BF_0DB8:
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	call fn00F7_1628 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01BF_0E23
	// succ:  l01BF_0DD2 l01BF_0E23
l01BF_0DD2:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(NE,Z) l01BF_0DDF
	// succ:  l01BF_0DD8 l01BF_0DDF
l01BF_0DD8:
	bx = Mem0[ss:bp - 0x0004:word16]
	v17 = Mem0[ds:bx + 0x000B:byte] | 0x01
	Mem0[ds:bx + 0x000B:byte] = v17
	SZO = cond(Mem0[ds:bx + 0x000B:byte])
	C = false
	// succ:  l01BF_0DDF
l01BF_0DDF:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_0E00
	// succ:  l01BF_0DE5 l01BF_0E00
l01BF_0DE5:
	SCZO = cond(Mem0[ds:0x05B2:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_0E00
	// succ:  l01BF_0DEC l01BF_0E00
l01BF_0DEC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01BF_22B4 (retsize: 2;)
	sp = sp + 0x0008
	goto l01BF_0E23
	// succ:  l01BF_0E23
l01BF_0E00:
	bx = Mem0[ss:bp - 0x0004:word16]
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_1C4C (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01BF_0E23
	// succ:  l01BF_0E14 l01BF_0E23
l01BF_0E14:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DrawIcon(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l01BF_0E23
l01BF_0E23:
	SCZO = cond(Mem0[ss:bp - 0x0010:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_0E31
	// succ:  l01BF_0E27_thunk_fn0177_9E29 l01BF_0E27_thunk_fn0177_9E29
l01BF_0E27_thunk_fn0177_9E29:
	call fn0177_9E29 (retsize: 0;)
	return
	// succ:  fn0177_9B60_exit
l01BF_0E27_thunk_fn0177_9E29:
	call fn0177_9E29 (retsize: 0;)
	return
	// succ:  fn0177_9B60_exit
fn0177_9B60_exit:


// fn0177_9E29
// Return size: 0
void fn0177_9E29()
fn0177_9E29_entry:
	// succ:  l01BF_0E29
l01BF_0E29:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01BF_0E2C_thunk_fn0177_9923
l01BF_0E2C_thunk_fn0177_9923:
	call fn0177_9923 (retsize: 0;)
	return
	// succ:  fn0177_9E29_exit
fn0177_9E29_exit:


// fn01BF_0E3E
// Return size: 4
void fn01BF_0E3E()
fn01BF_0E3E_entry:
	// succ:  l01BF_0E3E
l01BF_0E3E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0012
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01BF_0EAF
	// succ:  l01BF_0E54 l01BF_0EAF
l01BF_0E54:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	call fn00F7_1E92 (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01BF_0EAF
	// succ:  l01BF_0E62 l01BF_0EAF
l01BF_0E62:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01BF_0EA9
	// succ:  l01BF_0E70 l01BF_0EA9
l01BF_0E70:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetObject(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BitBlt(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l01BF_0EA9
l01BF_0EA9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l01BF_0EAF
l01BF_0EAF:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_0E3E_exit
fn01BF_0E3E_exit:


// fn01BF_0EBC
// Return size: 4
void fn01BF_0EBC()
fn01BF_0EBC_entry:
	// succ:  l01BF_0EBC
l01BF_0EBC:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0012
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01BF_0F3A
	// succ:  l01BF_0ED2 l01BF_0F3A
l01BF_0ED2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	call fn00F7_1E92 (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01BF_0F3A
	// succ:  l01BF_0EE0 l01BF_0F3A
l01BF_0EE0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01BF_0F34
	// succ:  l01BF_0EEE l01BF_0F34
l01BF_0EEE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetObject(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp - 0x0010:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0010:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0020
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	StretchBlt(Mem0[ss:sp + 22:word16], Mem0[ss:sp + 20:word16], Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l01BF_0F34
l01BF_0F34:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l01BF_0F3A
l01BF_0F3A:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_0EBC_exit
fn01BF_0EBC_exit:


// fn01BF_0F46
// Return size: 4
void fn01BF_0F46()
fn01BF_0F46_entry:
	// succ:  l01BF_0F46
l01BF_0F46:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0012
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01BF_0FC4
	// succ:  l01BF_0F5C l01BF_0FC4
l01BF_0F5C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	call fn00F7_1E92 (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01BF_0FC4
	// succ:  l01BF_0F6A l01BF_0FC4
l01BF_0F6A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01BF_0FBE
	// succ:  l01BF_0F78 l01BF_0FBE
l01BF_0F78:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetObject(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x000E:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = Mem0[ss:bp - 0x000E:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	StretchBlt(Mem0[ss:sp + 22:word16], Mem0[ss:sp + 20:word16], Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l01BF_0FBE
l01BF_0FBE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l01BF_0FC4
l01BF_0FC4:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_0F46_exit
fn01BF_0F46_exit:


// fn01BF_0FD0
// Return size: 4
void fn01BF_0FD0()
fn01BF_0FD0_entry:
	// succ:  l01BF_0FD0
l01BF_0FD0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0012
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01BF_1053
	goto l01BF_0FE6
	// succ:  l01BF_0FE6 l01BF_0FE4_thunk_fn0177_A04D
l01BF_0FE4_thunk_fn0177_A04D:
	call fn0177_A04D (retsize: 0;)
	return
	// succ:  fn01BF_0FD0_exit
l01BF_0FE6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	call fn00F7_1E92 (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01BF_1053
	goto l01BF_0FF4
	// succ:  l01BF_0FF4 l01BF_0FF2_thunk_fn0177_A04D
l01BF_0FF2_thunk_fn0177_A04D:
	call fn0177_A04D (retsize: 0;)
	return
	// succ:  fn01BF_0FD0_exit
l01BF_0FF4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	// succ:  l01BF_0FFE_thunk_fn0177_A000
l01BF_0FFE_thunk_fn0177_A000:
	call fn0177_A000 (retsize: 0;)
	return
	// succ:  fn01BF_0FD0_exit
fn01BF_0FD0_exit:


// fn0177_A000
// Return size: 0
void fn0177_A000()
fn0177_A000_entry:
	// succ:  l0177_A000
l0177_A000:
	sp = fp
	branch Test(EQ,Z) l0177_A000_thunk_fn0177_A04D
	goto l0177_A000_thunk_fn0177_A002
	// succ:  l0177_A000_thunk_fn0177_A002 l0177_A000_thunk_fn0177_A04D
l0177_A000:
	branch Test(EQ,Z) l01BF_104D
	goto l0177_A000_thunk_fn0177_A002
	// succ:  l0177_A000_thunk_fn0177_A002 l0177_A000_thunk_fn0177_A04D
l0177_A000_thunk_fn0177_A002:
	call fn0177_A002 (retsize: 0;)
	return
	// succ:  fn0177_A000_exit l0177_A000_thunk_fn0177_A002
l0177_A000_thunk_fn0177_A002:
	call fn0177_A002 (retsize: 0;)
	return
	// succ:  fn0177_A000_exit
l0177_A000_thunk_fn0177_A002:
	call fn0177_A002 (retsize: 0;)
	return
	// succ:  fn0177_A000_exit
l0177_A000_thunk_fn0177_A04D:
	call fn0177_A04D (retsize: 0;)
	return
	// succ:  fn0177_A000_exit
l0177_A000_thunk_fn0177_A04D:
	call fn0177_A04D (retsize: 0;)
	return
	// succ:  fn0177_A000_exit
fn0177_A000_exit:


// fn0177_A002
// Return size: 0
void fn0177_A002()
fn0177_A002_entry:
	// succ:  l01BF_1002
l01BF_1002:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetObject(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp - 0x0010:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x000E:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0010:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x000E:word16]
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	StretchBlt(Mem0[ss:sp + 22:word16], Mem0[ss:sp + 20:word16], Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l01BF_1048_thunk_fn0177_A04D
l01BF_1048_thunk_fn0177_A04D:
	call fn0177_A04D (retsize: 0;)
	return
	// succ:  fn0177_A002_exit
fn0177_A002_exit:


// fn0177_A04D
// Return size: 0
void fn0177_A04D()
fn0177_A04D_entry:
	// succ:  l01BF_104D
l01BF_104D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
fn0177_A04D_exit:


// fn0177_A050
// Return size: 0
void fn0177_A050()
fn0177_A050_entry:
	// succ:  l0177_A050
l0177_A050:
	sp = fp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	SZO = cond(Mem0[ds:bx + si:word16] & 0x5F5E)
	C = false
	goto l0177_A055_in_fn0177_A050
	// succ:  l0177_A055_in_fn0177_A050
l0177_A050:
	goto l01BF_1053
	// succ:  l01BF_1053
l0177_A055:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_A050_exit
l0177_A055_in_fn0177_A050:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_A050_exit
l01BF_1053:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	goto l0177_A055
	// succ:  l0177_A055
fn0177_A050_exit:


// fn0177_A106
// Return size: 0
void fn0177_A106()
fn0177_A106_entry:
	// succ:  l0177_A106
l0177_A106:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l0177_A108_thunk_fn0177_A109
l0177_A108_thunk_fn0177_A109:
	call fn0177_A109 (retsize: 0;)
	return
	// succ:  fn0177_A106_exit
fn0177_A106_exit:


// fn0177_A109
// Return size: 0
void fn0177_A109()
fn0177_A109_entry:
	// succ:  l0177_A109
l0177_A109:
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	// succ:  l0177_A113_thunk_fn0177_A114
l0177_A113_thunk_fn0177_A114:
	call fn0177_A114 (retsize: 0;)
	return
	// succ:  fn0177_A109_exit
fn0177_A109_exit:


// fn0177_A114
// Return size: 0
void fn0177_A114()
fn0177_A114_entry:
	// succ:  l0177_A114
l0177_A114:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4EBA:word16] - 0x0000)
	branch Test(NE,Z) l0177_A11F
	// succ:  l0177_A11C l0177_A11F
l0177_A11C:
	goto l0177_A1EC
	// succ:  l0177_A1EC
l0177_A11F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EBA:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	cx = ax
	ax = ax + 0x0004
	SCZO = cond(ax)
	di = ax
	bx = cx
	dx = Mem0[ds:bx:word16]
	dx = dx << 0x0001
	SCZO = cond(dx)
	cx = cx + dx
	SCZO = cond(cx)
	cx = cx + 0x0004
	SCZO = cond(cx)
	Mem0[ss:bp - 0x0006:word16] = cx
	SCZO = cond(cx - ax)
	branch Test(UGT,CZ) l0177_A144
	// succ:  l0177_A141 l0177_A144
l0177_A141:
	goto l0177_A1E3
	// succ:  l0177_A1E3
l0177_A144:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	cl = 0x06
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = ax
	ax = ax << cl
	SCZO = cond(ax)
	cl = Mem0[ds:si + 0x0017:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	bx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + bx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn00F7_1628 (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_A1A4
	// succ:  l0177_A17A l0177_A1A4
l0177_A17A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	bx = Mem0[ss:bp - 0x0004:word16]
	ah = Mem0[ds:bx + 0x0001:byte]
	ax = ax & 0x0200
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0001)
	C = !C
	cx = cx - cx - C
	SCZO = cond(cx)
	cx = cx & 0x0004
	SZO = cond(cx)
	C = false
	ax = ax | cx
	SZO = cond(ax)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_9868 (retsize: 2;)
	goto l0177_A1D2
	// succ:  l0177_A1D2
l0177_A1A4:
	SZO = cond(Mem0[ds:si + 0x000B:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l0177_A1D2
	// succ:  l0177_A1AA l0177_A1D2
l0177_A1AA:
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1268 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_A1CE
	// succ:  l0177_A1BD l0177_A1CE
l0177_A1BD:
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01BF_1326 (retsize: 2;)
	sp = sp + 0x0006
l0177_A1CE:
	v21 = Mem0[ds:si + 0x000B:byte] & 0xFE
	Mem0[ds:si + 0x000B:byte] = v21
	SZO = cond(Mem0[ds:si + 0x000B:byte])
	C = false
	// succ:  l0177_A1D2
l0177_A1D2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = di + 0x0001
	SZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - Mem0[ss:bp - 0x0006:word16])
	branch Test(UGE,C) l0177_A1E3
	// succ:  l0177_A1E0 l0177_A1E3
l0177_A1E0:
	goto l0177_A144
	// succ:  l0177_A144
l0177_A1E3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EBA:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l0177_A1EC
l0177_A1EC:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_A114_exit
fn0177_A114_exit:


// fn01BF_11F8
// Return size: 4
void fn01BF_11F8()
fn01BF_11F8_entry:
	// succ:  l01BF_11F8
l01BF_11F8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cl = 0x05
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = ax
	ax = ax - Mem0[ds:0x4D20:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = ax
	ax = ax - Mem0[ds:0x4D20:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4D20:word16]
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x0482:word16]
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	ax = ax & dx
	SZO = cond(ax)
	C = false
	ax = ax + Mem0[ds:0x0482:word16]
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = bx + Mem0[ds:0x4D20:word16]
	SCZO = cond(bx)
	bx = bx - Mem0[ds:0x0480:word16]
	SCZO = cond(bx)
	ax = ax - ax - C
	SCZO = cond(ax)
	bx = bx & ax
	SZO = cond(bx)
	C = false
	bx = bx + Mem0[ds:0x0480:word16]
	SCZO = cond(bx)
	bx = bx - Mem0[ds:0x4BE8:word16]
	SCZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx << cl
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_11F8_exit
fn01BF_11F8_exit:


// fn01BF_1282
// Return size: 4
void fn01BF_1282()
fn01BF_1282_entry:
	// succ:  l01BF_1282
l01BF_1282:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x01BF
	es = ax
	si = Mem0[ss:bp + 0x0006:word16]
	bl = Mem0[ds:si:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	al = Mem0[0x01BF:bx + 0x010F:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01BF_12B0
	// succ:  l01BF_12AA_thunk_fn0177_A2BB l01BF_12B0
l01BF_12AA_thunk_fn0177_A2BB:
	call fn0177_A2BB (retsize: 0;)
	return
	// succ:  fn01BF_1282_exit
l01BF_12B0:
	SCZO = cond(ax - 0x000B)
	branch Test(NE,Z) l01BF_12BE
	// succ:  l01BF_12B5 l01BF_12BE
l01BF_12B5:
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x10)
	C = false
	// succ:  l01BF_12B5_thunk_fn0177_A2B8
l01BF_12B5_thunk_fn0177_A2B8:
	call fn0177_A2B8 (retsize: 0;)
	return
	// succ:  fn01BF_1282_exit
l01BF_12BE:
	di = Mem0[ss:bp - 0x0004:word16]
	// succ:  l01BF_12BE_thunk_fn0177_A2B8
l01BF_12BE_thunk_fn0177_A2B8:
	call fn0177_A2B8 (retsize: 0;)
	return
	// succ:  fn01BF_1282_exit
fn01BF_1282_exit:


// fn0177_A2B8
// Return size: 0
void fn0177_A2B8()
fn0177_A2B8_entry:
	// succ:  l0177_A2B8
l0177_A2B8:
	sp = fp
	v7 = Mem0[ds:si + 0x0009:byte] + dh + C
	Mem0[ds:si + 0x0009:byte] = v7
	SCZO = cond(v7)
	goto l0177_A2B8_thunk_fn0177_A2BB
	// succ:  l0177_A2B8_thunk_fn0177_A2BB
l0177_A2B8:
	branch Test(EQ,Z) l01BF_12C4
	goto l0177_A2B8_thunk_fn0177_A2BB
	// succ:  l0177_A2B8_thunk_fn0177_A2BB l01BF_12C4
l0177_A2B8_thunk_fn0177_A2BB:
	call fn0177_A2BB (retsize: 0;)
	return
	// succ:  fn0177_A2B8_exit
l0177_A2B8_thunk_fn0177_A2BB:
	call fn0177_A2BB (retsize: 0;)
	return
	// succ:  fn0177_A2B8_exit
l01BF_12C4:
	bl = Mem0[ds:si + 0x0002:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	di = Mem0[ds:bx + 0x0004:word16]
	di = di & 0x007F
	SZO = cond(di)
	C = false
	// succ:  l01BF_12D7
l01BF_12D7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn01BF_12EA (retsize: 2;)
	sp = sp + 0x0004
fn0177_A2B8_exit:


// fn0177_A2BB
// Return size: 0
void fn0177_A2BB()
fn0177_A2BB_entry:
	goto l01BF_12BB
	// succ:  l01BF_12BB
l01BF_12AC:
	ax = ax - ax
	SCZO = cond(ax)
	goto l01BF_12DD
	// succ:  l01BF_12DD
l01BF_12BB:
	goto l01BF_12AC
	// succ:  l01BF_12AC
l01BF_12DD:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_A2BB_exit
fn0177_A2BB_exit:


// fn01BF_12EA
// Return size: 4
void fn01BF_12EA()
fn01BF_12EA_entry:
	// succ:  l01BF_12EA
l01BF_12EA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(bx - 0x000B)
	branch Test(NE,Z) l01BF_1308
	// succ:  l01BF_12FF l01BF_1308
l01BF_12FF:
	bx = Mem0[ss:bp + 0x0006:word16]
	cl = Mem0[ds:bx + 0x05F2:byte]
	goto l01BF_130C
	// succ:  l01BF_130C
l01BF_1308:
	cl = Mem0[ds:bx + 0x05B6:byte]
	// succ:  l01BF_130C
l01BF_130C:
	ch = ch - ch
	SCZO = cond(ch)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_12EA_exit
fn01BF_12EA_exit:


// fn01BF_1326
// Return size: 4
void fn01BF_1326()
fn01BF_1326_entry:
	// succ:  l01BF_1326
l01BF_1326:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x000A:word16]
	si = Mem0[ss:bp + 0x0008:word16]
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cl = 0x05
	si = si - Mem0[ds:0x3D84:word16]
	SCZO = cond(si)
	ax = si
	si = si << cl
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = di - Mem0[ds:0x4BE8:word16]
	SCZO = cond(di)
	dx = di
	di = di << cl
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax + 0x0001
	SZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	dx = dx + 0x0001
	SZO = cond(dx)
	dx = dx << cl
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_1326_exit
fn01BF_1326_exit:


// fn01BF_137E
// Return size: 4
void fn01BF_137E()
fn01BF_137E_entry:
	// succ:  l01BF_137E
l01BF_137E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = 0x3D00
	// succ:  l01BF_138F
l01BF_138F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	UnrealizeObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x3D26)
	branch Test(ULT,C) l01BF_138F
	// succ:  l01BF_139E l01BF_138F
l01BF_139E:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp - 0x0006:word16]
	cx = 0x0008
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = Mem0[ss:bp - 0x0004:word16]
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SetBrushOrg(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	Mem0[ds:0x05B4:word16] = 0x0000
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_137E_exit
fn01BF_137E_exit:


// fn01BF_13DE
// Return size: 4
void fn01BF_13DE()
fn01BF_13DE_entry:
	// succ:  l01BF_13DE
l01BF_13DE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(LT,SO) l01BF_140D
	// succ:  l01BF_13F2 l01BF_140D
l01BF_13F2:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(LE,SZO) l01BF_1406
	// succ:  l01BF_13F5 l01BF_1406
l01BF_13F5:
	ax = ax - 0x0003
	SCZO = cond(ax)
	branch Test(LT,SO) l01BF_140D
	// succ:  l01BF_13FA l01BF_140D
l01BF_13FA:
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(LE,SZO) l01BF_1406
	// succ:  l01BF_13FE l01BF_1406
l01BF_13FE:
	ax = ax - 0x0004
	SCZO = cond(ax)
	branch Test(LT,SO) l01BF_140D
	// succ:  l01BF_1403 l01BF_140D
l01BF_1403:
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(GT,SZO) l01BF_140D
	// succ:  l01BF_1406 l01BF_140D
l01BF_1406:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	call fn01BF_137E (retsize: 2;)
	sp = sp + 0x0002
l01BF_140D:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_13DE_exit
fn01BF_13DE_exit:


// fn01BF_1418
// Return size: 4
void fn01BF_1418()
fn01BF_1418_entry:
	// succ:  l01BF_1418
l01BF_1418:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000A:word16]
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	cl = Mem0[ds:si + 0x0017:byte]
	ch = ch - ch
	SCZO = cond(ch)
	Mem0[ss:bp - 0x0004:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1628 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0006:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - di)
	branch Test(NE,Z) l01BF_1465
	// succ:  l01BF_144C l01BF_1465
l01BF_144C:
	ax = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - ax)
	branch Test(NE,Z) l01BF_1465
	// succ:  l01BF_1454 l01BF_1465
l01BF_1454:
	ah = Mem0[ds:si + 0x000B:byte]
	ax = ax & 0x0100
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - Mem0[ss:bp - 0x0006:word16])
	branch Test(EQ,Z) l01BF_14C1
	// succ:  l01BF_1465 l01BF_14C1
l01BF_1465:
	SZO = cond(Mem0[ds:si + 0x000B:byte] & 0x01)
	C = false
	branch Test(EQ,Z) l01BF_14A3
	// succ:  l01BF_146B l01BF_14A3
l01BF_146B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn00F7_1268 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01BF_14A3
	// succ:  l01BF_147A l01BF_14A3
l01BF_147A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	cl = 0x06
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	ah = Mem0[ds:bx + 0x0CE3:byte]
	ax = ax & 0x0200
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01BF_1326 (retsize: 2;)
	sp = sp + 0x0006
l01BF_14A3:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_14C1
	// succ:  l01BF_14A9 l01BF_14C1
l01BF_14A9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn00F7_1268 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01BF_14C1
	// succ:  l01BF_14B6 l01BF_14C1
l01BF_14B6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01BF_1326 (retsize: 2;)
	sp = sp + 0x0006
l01BF_14C1:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_1418_exit
fn01BF_1418_exit:


// fn01BF_14CE
// Return size: 4
void fn01BF_14CE()
fn01BF_14CE_entry:
	// succ:  l01BF_14CE
l01BF_14CE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0014
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	cx = Mem0[ss:bp + 0x000A:word16]
	Mem0[ss:bp - 0x0012:word16] = cx
	bx = Mem0[ss:bp + 0x0006:word16]
	ax = Mem0[ss:bp + 0x000C:word16]
	Mem0[ss:bp - 0x0010:word16] = ax
	SCZO = cond(ax - di)
	branch Test(NE,Z) l01BF_14FA
	// succ:  l01BF_14F3 l01BF_14FA
l01BF_14F3:
	SCZO = cond(cx - bx)
	branch Test(NE,Z) l01BF_14FA
	// succ:  l01BF_14F7 l01BF_14FA
l01BF_14F7:
	goto l01BF_15D6
	// succ:  l01BF_15D6
l01BF_14FA:
	SCZO = cond(cx - bx)
	branch Test(ULE,CZ) l01BF_1511
	// succ:  l01BF_14FE l01BF_1511
l01BF_14FE:
	Mem0[ss:bp - 0x0010:word16] = di
	di = ax
	ax = Mem0[ss:bp - 0x0010:word16]
	Mem0[ss:bp + 0x000C:word16] = ax
	Mem0[ss:bp - 0x0012:word16] = bx
	bx = cx
	cx = Mem0[ss:bp - 0x0012:word16]
	// succ:  l01BF_1511
l01BF_1511:
	ax = di
	ax = ax - Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0014:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l01BF_1522
	// succ:  l01BF_151D l01BF_1522
l01BF_151D:
	ax = 0x0001
	goto l01BF_1525
	// succ:  l01BF_1525
l01BF_1522:
	ax = 0xFFFF
	// succ:  l01BF_1525
l01BF_1525:
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ss:bp - 0x0014:word16]
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000E:word16] = ax
	ax = bx
	ax = ax - cx
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	SCZO = cond(ax - Mem0[ss:bp - 0x000E:word16])
	branch Test(LE,SZO) l01BF_1592
	// succ:  l01BF_1544 l01BF_1592
l01BF_1544:
	dx = Mem0[ss:bp - 0x000E:word16]
	dx = dx << 0x0001
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0008:word16] = dx
	dx = dx - ax
	SCZO = cond(dx)
	ax = dx
	ax = ax - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	v18 = Mem0[ss:bp - 0x0012:word16] + 0x0001
	Mem0[ss:bp - 0x0012:word16] = v18
	SZO = cond(v18)
	SCZO = cond(Mem0[ss:bp - 0x0012:word16] - bx)
	branch Test(UGE,C) l01BF_15D6
	// succ:  l01BF_155E l01BF_15D6
l01BF_155E:
	Mem0[ss:bp + 0x0006:word16] = bx
	si = dx
	di = Mem0[ss:bp - 0x0012:word16]
	// succ:  l01BF_1566
l01BF_1566:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(GE,SO) l01BF_1570
	// succ:  l01BF_156A l01BF_1570
l01BF_156A:
	si = si + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(si)
	goto l01BF_1579
	// succ:  l01BF_1579
l01BF_1570:
	si = si + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(si)
	ax = Mem0[ss:bp - 0x0006:word16]
	v21 = Mem0[ss:bp - 0x0010:word16] + ax
	Mem0[ss:bp - 0x0010:word16] = v21
	SCZO = cond(v21)
	// succ:  l01BF_1579
l01BF_1579:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn01BF_15E6 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01BF_158E
	// succ:  l01BF_1585 l01BF_158E
l01BF_1585:
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - Mem0[ss:bp + 0x0006:word16])
	branch Test(ULT,C) l01BF_1566
	// succ:  l01BF_158B l01BF_1566
l01BF_158B:
	goto l01BF_15D6
	// succ:  l01BF_15D6
l01BF_158E:
	ax = ax - ax
	SCZO = cond(ax)
	goto l01BF_15D9
	// succ:  l01BF_15D9
l01BF_1592:
	Mem0[ss:bp + 0x0008:word16] = di
	dx = Mem0[ss:bp - 0x000E:word16]
	si = ax
	si = si << 0x0001
	SCZO = cond(si)
	Mem0[ss:bp - 0x0008:word16] = si
	si = si - dx
	SCZO = cond(si)
	ax = si
	ax = ax - dx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	di = Mem0[ss:bp - 0x0010:word16]
	di = di + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(di)
	SCZO = cond(di - Mem0[ss:bp + 0x0008:word16])
	branch Test(EQ,Z) l01BF_15D6
	// succ:  l01BF_15B3 l01BF_15D6
l01BF_15B3:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(GE,SO) l01BF_15BC
	// succ:  l01BF_15B7 l01BF_15BC
l01BF_15B7:
	si = si + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(si)
	goto l01BF_15C2
	// succ:  l01BF_15C2
l01BF_15BC:
	si = si + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(si)
	v20 = Mem0[ss:bp - 0x0012:word16] + 0x0001
	Mem0[ss:bp - 0x0012:word16] = v20
	SZO = cond(v20)
	// succ:  l01BF_15C2
l01BF_15C2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	call fn01BF_15E6 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01BF_158E
	// succ:  l01BF_15CE l01BF_158E
l01BF_15CE:
	di = di + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(di)
	SCZO = cond(di - Mem0[ss:bp + 0x0008:word16])
	branch Test(NE,Z) l01BF_15B3
	// succ:  l01BF_15D6 l01BF_15B3
l01BF_15D6:
	ax = 0x0001
	ax = 0x0001
	// succ:  l01BF_15D9
l01BF_15D9:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_14CE_exit fn01BF_14CE_exit
fn01BF_14CE_exit:


// fn01BF_15E6
// Return size: 4
void fn01BF_15E6()
fn01BF_15E6_entry:
	// succ:  l01BF_15E6
l01BF_15E6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	cl = 0x06
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE2:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01BF_2260 (retsize: 2;)
	sp = sp + 0x0002
	SCZO = cond(ax - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_15E6_exit
fn01BF_15E6_exit:


// fn0177_A620
// Return size: 4
void fn0177_A620()
fn0177_A620_entry:
	// succ:  l0177_A620
l0177_A620:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SZO = cond(Mem0[ds:0x4D1A:byte] & 0x01)
	C = false
	branch Test(NE,Z) l0177_A67D
	// succ:  l0177_A635 l0177_A67D
l0177_A635:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1268 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_A67D
	// succ:  l0177_A648 l0177_A67D
l0177_A648:
	si = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cl = 0x05
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D24:word16]
	DrawIcon(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0177_A67D
	// succ:  l0177_A675 l0177_A67D
l0177_A675:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn0177_A688 (retsize: 2;)
	sp = sp + 0x0004
l0177_A67D:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_A620_exit
fn0177_A620_exit:


// fn0177_A688
// Return size: 4
void fn0177_A688()
fn0177_A688_entry:
	// succ:  l0177_A688
l0177_A688:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0010
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0008:word16]
	di = Mem0[ds:0x4D20:word16]
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0177_A6AA
	// succ:  l0177_A6A4 l0177_A6AA
l0177_A6A4:
	al = Mem0[ds:0x4D1E:byte]
	goto l0177_A6AD
	// succ:  l0177_A6AD
l0177_A6AA:
	al = Mem0[ds:0x4D1C:byte]
	// succ:  l0177_A6AD
l0177_A6AD:
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0008:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l0177_A6BE
	// succ:  l0177_A6B8 l0177_A6BE
l0177_A6B8:
	al = Mem0[ds:0x4D1F:byte]
	goto l0177_A6C1
	// succ:  l0177_A6C1
l0177_A6BE:
	al = Mem0[ds:0x4D1D:byte]
	// succ:  l0177_A6C1
l0177_A6C1:
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x000E:word16] = ax
	ax = ax - di
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	cl = 0x05
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = Mem0[ss:bp - 0x0008:word16]
	ax = ax - di
	SCZO = cond(ax)
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ss:bp - 0x000E:word16]
	ax = ax - Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	dx = di
	ax = ax + dx
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	ax = ax - Mem0[ds:0x0482:word16]
	SCZO = cond(ax)
	bx = bx - bx - C
	SCZO = cond(bx)
	ax = ax & bx
	SZO = cond(ax)
	C = false
	ax = ax + Mem0[ds:0x0482:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	dx = dx - Mem0[ds:0x4BE8:word16]
	SCZO = cond(dx)
	dx = dx + Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(dx)
	dx = dx + 0x0001
	SZO = cond(dx)
	dx = dx - Mem0[ds:0x0480:word16]
	SCZO = cond(dx)
	ax = ax - ax - C
	SCZO = cond(ax)
	dx = dx & ax
	SZO = cond(dx)
	C = false
	dx = dx + Mem0[ds:0x0480:word16]
	SCZO = cond(dx)
	dx = dx << cl
	SCZO = cond(dx)
	dx = dx - 0x0001
	SZO = cond(dx)
	Mem0[ss:bp - 0x000C:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetROP2(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	LineTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	LineTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	LineTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	LineTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x000D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetROP2(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_A688_exit
fn0177_A688_exit:


// fn01BF_1776
// Return size: 4
void fn01BF_1776()
fn01BF_1776_entry:
	// succ:  l01BF_1776
l01BF_1776:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0062
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x000C:word16] = bx
	Mem0[ss:bp - 0x000A:word16] = si
	Mem0[ss:bp - 0x000E:word16] = 0x0000
	Mem0[ss:bp - 0x0008:word16] = 0x0001
	cl = 0x06
	bx = bx << cl
	SCZO = cond(bx)
	si = si + bx
	SCZO = cond(si)
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0CE2
	SCZO = cond(si)
	Mem0[ss:bp - 0x0006:word16] = si
	bx = si
	di = Mem0[ss:bp - 0x000A:word16]
	goto l01BF_17B7
	// succ:  l01BF_17B7
l01BF_17B6:
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l01BF_17B7
l01BF_17B7:
	bx = bx + 0x0003
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x08)
	C = false
	branch Test(NE,Z) l01BF_17B6
	// succ:  l01BF_17C0 l01BF_17B6
l01BF_17C0:
	Mem0[ss:bp - 0x000A:word16] = di
	ax = 0x01BF
	es = ax
	// succ:  l01BF_17C6_thunk_fn0177_A8F6
l01BF_17C6_thunk_fn0177_A8F6:
	call fn0177_A8F6 (retsize: 0;)
	return
	// succ:  fn01BF_1776_exit
fn01BF_1776_exit:


// fn0177_A8EB
// Return size: 0
void fn0177_A8EB()
fn0177_A8EB_entry:
	// succ:  l0177_A8EB
l0177_A8EB:
	sp = fp
	di = di + 0x0001
	SZO = cond(di)
	v9 = Mem0[ds:bx + si:word16] + cx
	Mem0[ds:bx + si:word16] = v9
	SCZO = cond(v9)
	branch Test(NE,Z) l0177_A8EE_thunk_fn0177_A8F6
	goto l0177_A8EE_thunk_fn0177_A8F0
	// succ:  l0177_A8EE_thunk_fn0177_A8F0 l0177_A8EE_thunk_fn0177_A8F6
l0177_A8EB:
	branch Test(NE,Z) l01BF_18F6
	// succ:  l0177_A8EB_thunk_fn0177_A8F0 l0177_A8EB_thunk_fn0177_A8F6
l0177_A8EB_thunk_fn0177_A8F0:
	call fn0177_A8F0 (retsize: 0;)
	return
	// succ:  fn0177_A8EB_exit
l0177_A8EB_thunk_fn0177_A8F6:
	call fn0177_A8F6 (retsize: 0;)
	return
	// succ:  fn0177_A8EB_exit
l0177_A8EE_thunk_fn0177_A8F0:
	call fn0177_A8F0 (retsize: 0;)
	return
	// succ:  fn0177_A8EB_exit l0177_A8EE_thunk_fn0177_A8F0
l0177_A8EE_thunk_fn0177_A8F0:
	call fn0177_A8F0 (retsize: 0;)
	return
	// succ:  fn0177_A8EB_exit
l0177_A8EE_thunk_fn0177_A8F6:
	call fn0177_A8F6 (retsize: 0;)
	return
	// succ:  fn0177_A8EB_exit
fn0177_A8EB_exit:


// fn0177_A8F0
// Return size: 0
void fn0177_A8F0()
fn0177_A8F0_entry:
	call fn0177_A8F6 (retsize: 0;)
	return
	// succ:  l01BF_18F0 fn0177_A8F0_exit
l01BF_17C8:
	di = Mem0[ss:bp - 0x000C:word16]
	cl = 0x06
	bx = di
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0060:word16] = bx
	bx = bx + 0x0CE2
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x08)
	C = false
	branch Test(NE,Z) l01BF_17EA
	// succ:  l01BF_17E7 l01BF_17EA
l01BF_17E7:
	goto l01BF_187E
	// succ:  l01BF_187E
l01BF_17EA:
	di = Mem0[ss:bp - 0x0008:word16]
	// succ:  l01BF_17ED
l01BF_17ED:
	v18 = Mem0[ds:bx + 0x0001:byte] & 0xF7
	Mem0[ds:bx + 0x0001:byte] = v18
	SZO = cond(Mem0[ds:bx + 0x0001:byte])
	C = false
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0062:word16] = ax
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l01BF_1804
	// succ:  l01BF_17FB l01BF_1804
l01BF_17FB:
	ax = Mem0[ds:bx:word16]
	al = al & 0x02
	SZO = cond(al)
	C = false
	al = al | 0x02
	SZO = cond(al)
	C = false
	goto l01BF_1828
	// succ:  l01BF_1828
l01BF_1804:
	SCZO = cond(Mem0[ss:bp - 0x0062:word16] - 0x000A)
	branch Test(NE,Z) l01BF_1812
	// succ:  l01BF_180A l01BF_1812
l01BF_180A:
	ax = Mem0[ds:bx:word16]
	al = al & 0x0B
	SZO = cond(al)
	C = false
	al = al | 0x0B
	SZO = cond(al)
	C = false
	goto l01BF_1828
	// succ:  l01BF_1828
l01BF_1812:
	si = Mem0[ss:bp - 0x0062:word16]
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	SZO = cond(Mem0[0x01BF:si + 0x010D:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l01BF_182A
	// succ:  l01BF_1821 l01BF_182A
l01BF_1821:
	al = Mem0[ds:bx:byte]
	al = al + 0x1B
	SCZO = cond(al)
	ah = Mem0[ds:bx + 0x0001:byte]
	// succ:  l01BF_1828
l01BF_1828:
	Mem0[ds:bx:word16] = ax
	// succ:  l01BF_182A
l01BF_182A:
	v21 = Mem0[ds:bx + 0x0001:byte] | 0x02
	Mem0[ds:bx + 0x0001:byte] = v21
	SZO = cond(Mem0[ds:bx + 0x0001:byte])
	C = false
	si = Mem0[ds:bx:word16]
	si = si & 0x00FF
	SZO = cond(si)
	C = false
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	SZO = cond(Mem0[0x01BF:si + 0x010E:byte] & 0x3F)
	C = false
	branch Test(NE,Z) l01BF_1872
	// succ:  l01BF_1840 l01BF_1872
l01BF_1840:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01BF_185E
	// succ:  l01BF_1844 l01BF_185E
l01BF_1844:
	v22 = Mem0[ds:bx + 0x0004:byte] | 0x02
	Mem0[ds:bx + 0x0004:byte] = v22
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	v23 = Mem0[ds:bx - 0x00BF:byte] | 0x02
	Mem0[ds:bx - 0x00BF:byte] = v23
	SZO = cond(Mem0[ds:bx - 0x00BF:byte])
	C = false
	v24 = Mem0[ds:bx - 0x00BC:byte] | 0x02
	Mem0[ds:bx - 0x00BC:byte] = v24
	SZO = cond(Mem0[ds:bx - 0x00BC:byte])
	C = false
	v25 = Mem0[ds:bx + 0x00C1:byte] | 0x02
	Mem0[ds:bx + 0x00C1:byte] = v25
	SZO = cond(Mem0[ds:bx + 0x00C1:byte])
	C = false
	v26 = Mem0[ds:bx + 0x00C4:byte] | 0x02
	Mem0[ds:bx + 0x00C4:byte] = v26
	SZO = cond(Mem0[ds:bx + 0x00C4:byte])
	C = false
	di = di - di
	SCZO = cond(di)
	// succ:  l01BF_185E
l01BF_185E:
	bx = bx - 0x0003
	SCZO = cond(bx)
	v27 = Mem0[ds:bx + 0x0001:byte] | 0x02
	Mem0[ds:bx + 0x0001:byte] = v27
	SZO = cond(Mem0[ds:bx + 0x0001:byte])
	C = false
	v28 = Mem0[ds:bx - 0x00BF:byte] | 0x02
	Mem0[ds:bx - 0x00BF:byte] = v28
	SZO = cond(Mem0[ds:bx - 0x00BF:byte])
	C = false
	v29 = Mem0[ds:bx + 0x00C1:byte] | 0x02
	Mem0[ds:bx + 0x00C1:byte] = v29
	SZO = cond(Mem0[ds:bx + 0x00C1:byte])
	C = false
	goto l01BF_1875
	// succ:  l01BF_1875
l01BF_1872:
	bx = bx - 0x0003
	SCZO = cond(bx)
	// succ:  l01BF_1875
l01BF_1875:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l01BF_187E
	// succ:  l01BF_187B l01BF_187E
l01BF_187B:
	goto l01BF_17ED
	// succ:  l01BF_17ED
l01BF_187E:
	ax = bx
	ax = ax - 0x0CE2
	SCZO = cond(ax)
	cx = 0x0003
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	cx = 0x0040
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = dx
	ax = Mem0[ss:bp - 0x000A:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = Mem0[ss:bp - 0x0060:word16]
	bx = bx + 0x0C22
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x08)
	C = false
	branch Test(NE,Z) l01BF_18AA
	// succ:  l01BF_18A5 l01BF_18AA
l01BF_18A5:
	dx = ax
	goto l01BF_18B7
	// succ:  l01BF_18B7
l01BF_18AA:
	dx = Mem0[ss:bp - 0x0004:word16]
	// succ:  l01BF_18AD
l01BF_18AD:
	dx = dx + 0x0001
	SZO = cond(dx)
	bx = bx + 0x0003
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x08)
	C = false
	branch Test(NE,Z) l01BF_18AD
	// succ:  l01BF_18B7 l01BF_18AD
l01BF_18B7:
	cx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(cx - dx)
	branch Test(GE,SO) l01BF_18CC
	// succ:  l01BF_18BE l01BF_18CC
l01BF_18BE:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x08)
	C = false
	branch Test(NE,Z) l01BF_18CC
	// succ:  l01BF_18C4 l01BF_18CC
l01BF_18C4:
	bx = bx - 0x0003
	SCZO = cond(bx)
	dx = dx - 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - cx)
	branch Test(GT,SZO) l01BF_18BE
	// succ:  l01BF_18CC l01BF_18BE
l01BF_18CC:
	SCZO = cond(cx - dx)
	branch Test(GE,SO) l01BF_1928
	// succ:  l01BF_18D0 l01BF_1928
l01BF_18D0:
	Mem0[ss:bp - 0x0004:word16] = dx
	di = Mem0[ss:bp - 0x000E:word16]
	// succ:  l01BF_18D6
l01BF_18D6:
	si = di
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	ax = Mem0[ss:bp - 0x000C:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x005E + si:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	Mem0[ss:bp - 0x005C + si:word16] = ax
	di = di + 0x0001
	SZO = cond(di)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x08)
	C = false
	// succ:  l01BF_18EA_thunk_fn0177_A8EB
l01BF_18EA_thunk_fn0177_A8EB:
	call fn0177_A8EB (retsize: 0;)
	return
	// succ:  fn0177_A8F0_exit
l01BF_18F0:
	dx = Mem0[ss:bp - 0x0004:word16]
	// succ:  l01BF_1906
l01BF_1906:
	cx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(cx - dx)
	branch Test(GE,SO) l01BF_191E
	cx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(cx - dx)
	branch Test(GE,SO) l01BF_191E
	// succ:  l01BF_190D l01BF_191E
l01BF_190D:
	Mem0[ss:bp - 0x000E:word16] = di
	Mem0[ss:bp - 0x000E:word16] = di
	// succ:  l01BF_1910
l01BF_1910:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x08)
	C = false
	branch Test(NE,Z) l01BF_191E
	// succ:  l01BF_1916 l01BF_191E
l01BF_1916:
	bx = bx - 0x0003
	SCZO = cond(bx)
	dx = dx - 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - cx)
	branch Test(GT,SZO) l01BF_1910
	// succ:  l01BF_191E l01BF_1910
l01BF_191E:
	Mem0[ss:bp - 0x0004:word16] = dx
	SCZO = cond(cx - dx)
	branch Test(LT,SO) l01BF_18D6
	// succ:  l01BF_1925 l01BF_18D6
l01BF_1925:
	Mem0[ss:bp - 0x000E:word16] = di
	// succ:  l01BF_1928
l01BF_1928:
	ax = Mem0[ss:bp - 0x000A:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = Mem0[ss:bp - 0x0060:word16]
	bx = bx + 0x0DA2
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l01BF_1982
	// succ:  l01BF_193B l01BF_1982
l01BF_193B:
	dx = ax
	// succ:  l01BF_193D
l01BF_193D:
	dx = dx + 0x0001
	SZO = cond(dx)
	bx = bx + 0x0003
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x08)
	C = false
	branch Test(NE,Z) l01BF_193D
	// succ:  l01BF_1947 l01BF_193D
l01BF_1947:
	cx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(cx - dx)
	branch Test(GE,SO) l01BF_1988
	// succ:  l01BF_194E l01BF_1988
l01BF_194E:
	di = Mem0[ss:bp - 0x000E:word16]
	// succ:  l01BF_1951
l01BF_1951:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x08)
	C = false
	branch Test(NE,Z) l01BF_195F
	// succ:  l01BF_1957 l01BF_195F
l01BF_1957:
	bx = bx - 0x0003
	SCZO = cond(bx)
	dx = dx - 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - cx)
	branch Test(GT,SZO) l01BF_1951
	// succ:  l01BF_195F l01BF_1951
l01BF_195F:
	SCZO = cond(cx - dx)
	branch Test(GE,SO) l01BF_19BA
	// succ:  l01BF_1963 l01BF_19BA
l01BF_1963:
	Mem0[ss:bp - 0x0006:word16] = bx
	// succ:  l01BF_1966
l01BF_1966:
	ax = Mem0[ss:bp - 0x000C:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	si = di
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	Mem0[ss:bp - 0x005E + si:word16] = ax
	Mem0[ss:bp - 0x005C + si:word16] = dx
	di = di + 0x0001
	SZO = cond(di)
	bx = Mem0[ss:bp - 0x0006:word16]
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x08)
	C = false
	branch Test(NE,Z) l01BF_198E
	// succ:  l01BF_1980 l01BF_198E
l01BF_1980:
	goto l01BF_199B
	// succ:  l01BF_199B
l01BF_1982:
	dx = Mem0[ss:bp - 0x0004:word16]
	goto l01BF_1947
	// succ:  l01BF_1947
l01BF_1988:
	di = Mem0[ss:bp - 0x000E:word16]
	goto l01BF_195F
	// succ:  l01BF_195F
l01BF_198E:
	Mem0[ss:bp - 0x000E:word16] = di
	// succ:  l01BF_1991
l01BF_1991:
	dx = dx - 0x0001
	SZO = cond(dx)
	bx = bx - 0x0003
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x08)
	C = false
	branch Test(NE,Z) l01BF_1991
	// succ:  l01BF_199B l01BF_1991
l01BF_199B:
	cx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(cx - dx)
	branch Test(GE,SO) l01BF_19B3
	cx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(cx - dx)
	branch Test(GE,SO) l01BF_19B3
	// succ:  l01BF_19A2 l01BF_19B3
l01BF_19A2:
	Mem0[ss:bp - 0x000E:word16] = di
	Mem0[ss:bp - 0x000E:word16] = di
	// succ:  l01BF_19A5
l01BF_19A5:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x08)
	C = false
	branch Test(NE,Z) l01BF_19B3
	// succ:  l01BF_19AB l01BF_19B3
l01BF_19AB:
	bx = bx - 0x0003
	SCZO = cond(bx)
	dx = dx - 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - cx)
	branch Test(GT,SZO) l01BF_19A5
	// succ:  l01BF_19B3 l01BF_19A5
l01BF_19B3:
	Mem0[ss:bp - 0x0006:word16] = bx
	SCZO = cond(cx - dx)
	branch Test(LT,SO) l01BF_1966
	// succ:  l01BF_19BA l01BF_1966
l01BF_19BA:
	ax = di
	di = di - 0x0001
	SZO = cond(di)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01BF_19DE
	// succ:  l01BF_19C1 l01BF_19DE
l01BF_19C1:
	si = di
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	dx = Mem0[ss:bp - 0x005E + si:word16]
	ax = Mem0[ss:bp - 0x005C + si:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = 0x0001
	Mem0[ss:bp - 0x000E:word16] = di
	Mem0[ss:bp - 0x000C:word16] = dx
	goto l01BF_17C8
	// succ:  l01BF_17C8
l01BF_19DE:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_A8F0_exit
fn0177_A8F0_exit:


// fn0177_A8F6
// Return size: 0
void fn0177_A8F6()
fn0177_A8F6_entry:
	// succ:  l01BF_18F6
l01BF_18F6:
	dx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ss:bp - 0x000E:word16] = di
	// succ:  l01BF_18FC
l01BF_18FC:
	dx = dx - 0x0001
	SZO = cond(dx)
	bx = bx - 0x0003
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x08)
	C = false
	branch Test(NE,Z) l01BF_18FC
	// succ:  l01BF_1904_thunk_fn0177_A8F0 l01BF_18FC
l01BF_1904_thunk_fn0177_A8F0:
	call fn0177_A8F0 (retsize: 0;)
	return
	// succ:  fn0177_A8F6_exit
fn0177_A8F6_exit:


// fn01BF_19EA
// Return size: 4
void fn01BF_19EA()
fn01BF_19EA_entry:
	// succ:  l01BF_19EA
l01BF_19EA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0062
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x000C:word16] = bx
	Mem0[ss:bp - 0x000A:word16] = si
	Mem0[ss:bp - 0x000E:word16] = 0x0000
	cl = 0x06
	bx = bx << cl
	SCZO = cond(bx)
	si = si + bx
	SCZO = cond(si)
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0CE2
	SCZO = cond(si)
	Mem0[ss:bp - 0x0006:word16] = si
	bx = si
	di = Mem0[ss:bp - 0x000A:word16]
	goto l01BF_1A2B
	// succ:  l01BF_1A2B
l01BF_1A24:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x04)
	C = false
	branch Test(NE,Z) l01BF_1A34
	// succ:  l01BF_1A2A l01BF_1A34
l01BF_1A2A:
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l01BF_1A2B
l01BF_1A2B:
	bx = bx + 0x0003
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(NE,Z) l01BF_1A24
	// succ:  l01BF_1A34 l01BF_1A24
l01BF_1A34:
	Mem0[ss:bp - 0x000A:word16] = di
	ax = 0x01BF
	es = ax
	// succ:  l01BF_1A3C
l01BF_1A3C:
	di = Mem0[ss:bp - 0x000C:word16]
	cl = 0x06
	bx = di
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ss:bp - 0x0060:word16] = bx
	bx = bx + 0x0CE2
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l01BF_1AAB
	// succ:  l01BF_1A5B l01BF_1AAB
l01BF_1A5B:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x04)
	C = false
	branch Test(NE,Z) l01BF_1AAB
	// succ:  l01BF_1A61 l01BF_1AAB
l01BF_1A61:
	v16 = Mem0[ds:bx + 0x0001:byte] | 0x04
	Mem0[ds:bx + 0x0001:byte] = v16
	SZO = cond(Mem0[ds:bx + 0x0001:byte])
	C = false
	al = Mem0[ds:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0062:word16] = ax
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l01BF_1A78
	// succ:  l01BF_1A6F l01BF_1A78
l01BF_1A6F:
	ax = Mem0[ds:bx:word16]
	al = al & 0x02
	SZO = cond(al)
	C = false
	al = al | 0x02
	SZO = cond(al)
	C = false
	goto l01BF_1A9C
	// succ:  l01BF_1A9C
l01BF_1A78:
	SCZO = cond(Mem0[ss:bp - 0x0062:word16] - 0x000A)
	branch Test(NE,Z) l01BF_1A86
	// succ:  l01BF_1A7E l01BF_1A86
l01BF_1A7E:
	ax = Mem0[ds:bx:word16]
	al = al & 0x0B
	SZO = cond(al)
	C = false
	al = al | 0x0B
	SZO = cond(al)
	C = false
	goto l01BF_1A9C
	// succ:  l01BF_1A9C
l01BF_1A86:
	si = Mem0[ss:bp - 0x0062:word16]
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	SZO = cond(Mem0[0x01BF:si + 0x010D:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l01BF_1A9E
	// succ:  l01BF_1A95 l01BF_1A9E
l01BF_1A95:
	al = Mem0[ds:bx:byte]
	al = al + 0x1B
	SCZO = cond(al)
	ah = Mem0[ds:bx + 0x0001:byte]
	// succ:  l01BF_1A9C
l01BF_1A9C:
	Mem0[ds:bx:word16] = ax
	// succ:  l01BF_1A9E
l01BF_1A9E:
	v19 = Mem0[ds:bx + 0x0001:byte] | 0x08
	Mem0[ds:bx + 0x0001:byte] = v19
	SZO = cond(Mem0[ds:bx + 0x0001:byte])
	C = false
	bx = bx - 0x0003
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(NE,Z) l01BF_1A5B
	// succ:  l01BF_1AAB l01BF_1A5B
l01BF_1AAB:
	ax = bx
	ax = ax - 0x0CE2
	SCZO = cond(ax)
	cx = 0x0003
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	cx = 0x0040
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = dx
	ax = Mem0[ss:bp - 0x000A:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = Mem0[ss:bp - 0x0060:word16]
	bx = bx + 0x0C22
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(NE,Z) l01BF_1ADC
	// succ:  l01BF_1AD2 l01BF_1ADC
l01BF_1AD2:
	dx = ax
	cx = Mem0[ss:bp - 0x0008:word16]
	di = Mem0[ss:bp - 0x000E:word16]
	goto l01BF_1AF5
	// succ:  l01BF_1AF5
l01BF_1ADC:
	dx = Mem0[ss:bp - 0x0004:word16]
	cx = Mem0[ss:bp - 0x0008:word16]
	di = Mem0[ss:bp - 0x000E:word16]
	// succ:  l01BF_1AE5
l01BF_1AE5:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x04)
	C = false
	branch Test(NE,Z) l01BF_1AF5
	// succ:  l01BF_1AEB l01BF_1AF5
l01BF_1AEB:
	dx = dx + 0x0001
	SZO = cond(dx)
	bx = bx + 0x0003
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(NE,Z) l01BF_1AE5
	// succ:  l01BF_1AF5 l01BF_1AE5
l01BF_1AF5:
	SCZO = cond(dx - cx)
	branch Test(LE,SZO) l01BF_1B0D
	SCZO = cond(dx - cx)
	branch Test(LE,SZO) l01BF_1B0D
	// succ:  l01BF_1AF9 l01BF_1B0D
l01BF_1AF9:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l01BF_1B05
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l01BF_1B05
	// succ:  l01BF_1AFF l01BF_1B05
l01BF_1AFF:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l01BF_1B0D
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l01BF_1B0D
	// succ:  l01BF_1B05 l01BF_1B0D
l01BF_1B05:
	bx = bx - 0x0003
	SCZO = cond(bx)
	dx = dx - 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - cx)
	branch Test(GT,SZO) l01BF_1AF9
	bx = bx - 0x0003
	SCZO = cond(bx)
	dx = dx - 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - cx)
	branch Test(GT,SZO) l01BF_1AF9
	// succ:  l01BF_1B0D l01BF_1AF9
l01BF_1B0D:
	SCZO = cond(dx - cx)
	branch Test(LE,SZO) l01BF_1B74
	SCZO = cond(dx - cx)
	branch Test(LE,SZO) l01BF_1B74
	// succ:  l01BF_1B11 l01BF_1B74
l01BF_1B11:
	Mem0[ss:bp - 0x0004:word16] = dx
	Mem0[ss:bp - 0x0004:word16] = dx
	// succ:  l01BF_1B14
l01BF_1B14:
	si = di
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	ax = Mem0[ss:bp - 0x000C:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x005E + si:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	Mem0[ss:bp - 0x005C + si:word16] = ax
	di = di + 0x0001
	SZO = cond(di)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(NE,Z) l01BF_1B36
	si = di
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	ax = Mem0[ss:bp - 0x000C:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x005E + si:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	Mem0[ss:bp - 0x005C + si:word16] = ax
	di = di + 0x0001
	SZO = cond(di)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(NE,Z) l01BF_1B36
	// succ:  l01BF_1B2E l01BF_1B36
l01BF_1B2E:
	dx = Mem0[ss:bp - 0x0004:word16]
	cx = Mem0[ss:bp - 0x0008:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	cx = Mem0[ss:bp - 0x0008:word16]
	goto l01BF_1B4F
	// succ:  l01BF_1B4F
l01BF_1B36:
	dx = Mem0[ss:bp - 0x0004:word16]
	cx = Mem0[ss:bp - 0x0008:word16]
	Mem0[ss:bp - 0x000E:word16] = di
	// succ:  l01BF_1B3F
l01BF_1B3F:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x04)
	C = false
	branch Test(NE,Z) l01BF_1B4F
	// succ:  l01BF_1B45 l01BF_1B4F
l01BF_1B45:
	dx = dx - 0x0001
	SZO = cond(dx)
	bx = bx - 0x0003
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(NE,Z) l01BF_1B3F
	// succ:  l01BF_1B4F l01BF_1B3F
l01BF_1B4F:
	SCZO = cond(dx - cx)
	branch Test(LE,SZO) l01BF_1B6A
	SCZO = cond(dx - cx)
	branch Test(LE,SZO) l01BF_1B6A
	// succ:  l01BF_1B53 l01BF_1B6A
l01BF_1B53:
	Mem0[ss:bp - 0x000E:word16] = di
	Mem0[ss:bp - 0x000E:word16] = di
	// succ:  l01BF_1B56
l01BF_1B56:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l01BF_1B62
	// succ:  l01BF_1B5C l01BF_1B62
l01BF_1B5C:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l01BF_1B6A
	// succ:  l01BF_1B62 l01BF_1B6A
l01BF_1B62:
	bx = bx - 0x0003
	SCZO = cond(bx)
	dx = dx - 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - cx)
	branch Test(GT,SZO) l01BF_1B56
	// succ:  l01BF_1B6A l01BF_1B56
l01BF_1B6A:
	Mem0[ss:bp - 0x0004:word16] = dx
	SCZO = cond(dx - cx)
	branch Test(GT,SZO) l01BF_1B14
	// succ:  l01BF_1B71 l01BF_1B14
l01BF_1B71:
	Mem0[ss:bp - 0x000E:word16] = di
	// succ:  l01BF_1B74
l01BF_1B74:
	ax = Mem0[ss:bp - 0x000A:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = Mem0[ss:bp - 0x0060:word16]
	bx = bx + 0x0DA2
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(NE,Z) l01BF_1B92
	// succ:  l01BF_1B87 l01BF_1B92
l01BF_1B87:
	dx = ax
	cx = Mem0[ss:bp - 0x0008:word16]
	di = Mem0[ss:bp - 0x000E:word16]
	goto l01BF_1BAB
	// succ:  l01BF_1BAB
l01BF_1B92:
	dx = Mem0[ss:bp - 0x0004:word16]
	cx = Mem0[ss:bp - 0x0008:word16]
	di = Mem0[ss:bp - 0x000E:word16]
	// succ:  l01BF_1B9B
l01BF_1B9B:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x04)
	C = false
	branch Test(NE,Z) l01BF_1BAB
	// succ:  l01BF_1BA1 l01BF_1BAB
l01BF_1BA1:
	dx = dx + 0x0001
	SZO = cond(dx)
	bx = bx + 0x0003
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(NE,Z) l01BF_1B9B
	// succ:  l01BF_1BAB l01BF_1B9B
l01BF_1BAB:
	SCZO = cond(dx - cx)
	branch Test(LE,SZO) l01BF_1BC3
	SCZO = cond(dx - cx)
	branch Test(LE,SZO) l01BF_1BC3
	// succ:  l01BF_1BAF l01BF_1BC3
l01BF_1BAF:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l01BF_1BBB
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l01BF_1BBB
	// succ:  l01BF_1BB5 l01BF_1BBB
l01BF_1BB5:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l01BF_1BC3
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l01BF_1BC3
	// succ:  l01BF_1BBB l01BF_1BC3
l01BF_1BBB:
	bx = bx - 0x0003
	SCZO = cond(bx)
	dx = dx - 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - cx)
	branch Test(GT,SZO) l01BF_1BAF
	bx = bx - 0x0003
	SCZO = cond(bx)
	dx = dx - 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - cx)
	branch Test(GT,SZO) l01BF_1BAF
	// succ:  l01BF_1BC3 l01BF_1BAF
l01BF_1BC3:
	SCZO = cond(dx - cx)
	branch Test(LE,SZO) l01BF_1C22
	SCZO = cond(dx - cx)
	branch Test(LE,SZO) l01BF_1C22
	// succ:  l01BF_1BC7 l01BF_1C22
l01BF_1BC7:
	Mem0[ss:bp - 0x0006:word16] = bx
	Mem0[ss:bp - 0x0006:word16] = bx
	// succ:  l01BF_1BCA
l01BF_1BCA:
	ax = Mem0[ss:bp - 0x000C:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	si = di
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	Mem0[ss:bp - 0x005E + si:word16] = ax
	Mem0[ss:bp - 0x005C + si:word16] = dx
	di = di + 0x0001
	SZO = cond(di)
	bx = Mem0[ss:bp - 0x0006:word16]
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(NE,Z) l01BF_1BEA
	ax = Mem0[ss:bp - 0x000C:word16]
	ax = ax + 0x0001
	SZO = cond(ax)
	si = di
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	Mem0[ss:bp - 0x005E + si:word16] = ax
	Mem0[ss:bp - 0x005C + si:word16] = dx
	di = di + 0x0001
	SZO = cond(di)
	bx = Mem0[ss:bp - 0x0006:word16]
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(NE,Z) l01BF_1BEA
	// succ:  l01BF_1BE4 l01BF_1BEA
l01BF_1BE4:
	cx = Mem0[ss:bp - 0x0008:word16]
	cx = Mem0[ss:bp - 0x0008:word16]
	goto l01BF_1C00
	// succ:  l01BF_1C00
l01BF_1BEA:
	cx = Mem0[ss:bp - 0x0008:word16]
	Mem0[ss:bp - 0x000E:word16] = di
	// succ:  l01BF_1BF0
l01BF_1BF0:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x04)
	C = false
	branch Test(NE,Z) l01BF_1C00
	// succ:  l01BF_1BF6 l01BF_1C00
l01BF_1BF6:
	dx = dx - 0x0001
	SZO = cond(dx)
	bx = bx - 0x0003
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(NE,Z) l01BF_1BF0
	// succ:  l01BF_1C00 l01BF_1BF0
l01BF_1C00:
	SCZO = cond(dx - cx)
	branch Test(LE,SZO) l01BF_1C1B
	SCZO = cond(dx - cx)
	branch Test(LE,SZO) l01BF_1C1B
	// succ:  l01BF_1C04 l01BF_1C1B
l01BF_1C04:
	Mem0[ss:bp - 0x000E:word16] = di
	Mem0[ss:bp - 0x000E:word16] = di
	// succ:  l01BF_1C07
l01BF_1C07:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l01BF_1C13
	// succ:  l01BF_1C0D l01BF_1C13
l01BF_1C0D:
	SZO = cond(Mem0[ds:bx + 0x0001:byte] & 0x04)
	C = false
	branch Test(EQ,Z) l01BF_1C1B
	// succ:  l01BF_1C13 l01BF_1C1B
l01BF_1C13:
	bx = bx - 0x0003
	SCZO = cond(bx)
	dx = dx - 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - cx)
	branch Test(GT,SZO) l01BF_1C07
	// succ:  l01BF_1C1B l01BF_1C07
l01BF_1C1B:
	Mem0[ss:bp - 0x0006:word16] = bx
	SCZO = cond(dx - cx)
	branch Test(GT,SZO) l01BF_1BCA
	// succ:  l01BF_1C22 l01BF_1BCA
l01BF_1C22:
	ax = di
	di = di - 0x0001
	SZO = cond(di)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01BF_1C42
	// succ:  l01BF_1C29 l01BF_1C42
l01BF_1C29:
	si = di
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	dx = Mem0[ss:bp - 0x005E + si:word16]
	ax = Mem0[ss:bp - 0x005C + si:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x000E:word16] = di
	Mem0[ss:bp - 0x000C:word16] = dx
	goto l01BF_1A3C
	// succ:  l01BF_1A3C
l01BF_1C42:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_19EA_exit
fn01BF_19EA_exit:


// fn01BF_1C4E
// Return size: 4
void fn01BF_1C4E()
fn01BF_1C4E_entry:
	// succ:  l01BF_1C4E
l01BF_1C4E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetROP2(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = ax
	SCZO = cond(Mem0[ds:0x009C:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_1C90
	// succ:  l01BF_1C73 l01BF_1C90
l01BF_1C73:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0002:word16]
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4128:word16]
	bx = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0002:word16]
	goto l01BF_1CA9
	// succ:  l01BF_1CA9
l01BF_1C90:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x413A:word16]
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x412A:word16]
	// succ:  l01BF_1CA9
l01BF_1CA9:
	LineTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	SetROP2(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_1C4E_exit
fn01BF_1C4E_exit:


// fn01BF_1CC2
// Return size: 4
void fn01BF_1CC2()
fn01BF_1CC2_entry:
	// succ:  l01BF_1CC2
l01BF_1CC2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x00B6:word16] - 0x0000)
	branch Test(NE,Z) l01BF_1CDB
	// succ:  l01BF_1CD8 l01BF_1CDB
l01BF_1CD8:
	goto l01BF_1DF6
	// succ:  l01BF_1DF6
l01BF_1CDB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01BF_1CF7
	// succ:  l01BF_1CF4 l01BF_1CF7
l01BF_1CF4:
	goto l01BF_1DF6
	// succ:  l01BF_1DF6
l01BF_1CF7:
	si = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ds:si + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	SCZO = cond(ax - 0x004A)
	branch Test(NE,Z) l01BF_1D07
	// succ:  l01BF_1D04 l01BF_1D07
l01BF_1D04:
	goto l01BF_1DB6
	// succ:  l01BF_1DB6
l01BF_1D07:
	branch Test(UGT,CZ) l01BF_1D11
	// succ:  l01BF_1D09 l01BF_1D11
l01BF_1D09:
	al = al - 0x01
	SZO = cond(al)
	branch Test(EQ,Z) l01BF_1D16
	// succ:  l01BF_1D0D l01BF_1D16
l01BF_1D0D:
	al = al - 0x36
	SCZO = cond(al)
	branch Test(EQ,Z) l01BF_1D66
	// succ:  l01BF_1D11 l01BF_1D66
l01BF_1D11:
	cx = cx - cx
	SCZO = cond(cx)
	goto l01BF_1DB9
	// succ:  l01BF_1DB9
l01BF_1D16:
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	cl = Mem0[ds:si + 0x0017:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax - cx
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dl = Mem0[ds:si + 0x0016:byte]
	dh = dh - dh
	SCZO = cond(dh)
	ax = ax - dx
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	SCZO = cond(ax - cx)
	branch Test(LE,SZO) l01BF_1D52
	// succ:  l01BF_1D3E l01BF_1D52
l01BF_1D3E:
	al = Mem0[ds:0x4D1C:byte]
	SCZO = cond(Mem0[ds:si + 0x0016:byte] - al)
	branch Test(UGE,C) l01BF_1D4C
	// succ:  l01BF_1D46 l01BF_1D4C
l01BF_1D46:
	cx = 0x00F5
	goto l01BF_1DB9
	// succ:  l01BF_1DB9
l01BF_1D4C:
	cx = 0x00F4
	goto l01BF_1DB9
	// succ:  l01BF_1DB9
l01BF_1D52:
	al = Mem0[ds:0x4D1D:byte]
	SCZO = cond(Mem0[ds:si + 0x0017:byte] - al)
	branch Test(UGE,C) l01BF_1D60
	// succ:  l01BF_1D5A l01BF_1D60
l01BF_1D5A:
	cx = 0x00F3
	goto l01BF_1DB9
	// succ:  l01BF_1DB9
l01BF_1D60:
	cx = 0x00F2
	goto l01BF_1DB9
	// succ:  l01BF_1DB9
l01BF_1D66:
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	cl = Mem0[ds:si + 0x0017:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax - cx
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dl = Mem0[ds:si + 0x0016:byte]
	dh = dh - dh
	SCZO = cond(dh)
	ax = ax - dx
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	SCZO = cond(ax - cx)
	branch Test(LE,SZO) l01BF_1DA2
	// succ:  l01BF_1D8E l01BF_1DA2
l01BF_1D8E:
	al = Mem0[ds:0x4D1C:byte]
	SCZO = cond(Mem0[ds:si + 0x0016:byte] - al)
	branch Test(UGE,C) l01BF_1D9C
	// succ:  l01BF_1D96 l01BF_1D9C
l01BF_1D96:
	cx = 0x00E0
	goto l01BF_1DB9
	// succ:  l01BF_1DB9
l01BF_1D9C:
	cx = 0x00DF
	goto l01BF_1DB9
	// succ:  l01BF_1DB9
l01BF_1DA2:
	al = Mem0[ds:0x4D1D:byte]
	SCZO = cond(Mem0[ds:si + 0x0017:byte] - al)
	branch Test(UGE,C) l01BF_1DB0
	// succ:  l01BF_1DAA l01BF_1DB0
l01BF_1DAA:
	cx = 0x00DE
	goto l01BF_1DB9
	// succ:  l01BF_1DB9
l01BF_1DB0:
	cx = 0x00DD
	goto l01BF_1DB9
	// succ:  l01BF_1DB9
l01BF_1DB6:
	cx = 0x00DC
	// succ:  l01BF_1DB9
l01BF_1DB9:
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(EQ,Z) l01BF_1DEA
	// succ:  l01BF_1DBD l01BF_1DEA
l01BF_1DBD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01BF_1DEA
	// succ:  l01BF_1DD0 l01BF_1DEA
l01BF_1DD0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01BF_1E02 (retsize: 2;)
	sp = sp + 0x000C
l01BF_1DEA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l01BF_1DF6
l01BF_1DF6:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_1CC2_exit
fn01BF_1CC2_exit:


// fn01BF_1E02
// Return size: 4
void fn01BF_1E02()
fn01BF_1E02_entry:
	// succ:  l01BF_1E02
l01BF_1E02:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0024
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0018:word16] = 0x0000
	ax = 0x0001
	Mem0[ss:bp - 0x0014:word16] = ax
	Mem0[ss:bp - 0x001C:word16] = ax
	SCZO = cond(Mem0[ds:0x00B6:word16] - 0x0000)
	branch Test(NE,Z) l01BF_1E29
	// succ:  l01BF_1E26 l01BF_1E29
l01BF_1E26:
	call fn0177_AE52 (retsize: 0;)
	return
	// succ:  l01BF_20E5 fn01BF_1E02_exit
l01BF_1E29:
	di = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	call fn00F7_1E92 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0024:word16] = ax
	// succ:  l01BF_1E34_thunk_fn0177_AE36
l01BF_1E34_thunk_fn0177_AE36:
	call fn0177_AE36 (retsize: 0;)
	return
	// succ:  fn01BF_1E02_exit
fn01BF_1E02_exit:


// fn0177_AE36
// Return size: 0
void fn0177_AE36()
fn0177_AE36_entry:
	// succ:  l0177_AE36
l0177_AE36:
	sp = fp
	rArg0 = rArg7 / rArg0
	branch Test(ULE,CZ) l0177_AE38_thunk_fn0177_AE4A
	goto l0177_AE3A
	// succ:  l0177_AE3A l0177_AE38_thunk_fn0177_AE4A
l0177_AE36:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	call fn00F7_1E92 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0022:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - di)
	branch Test(NE,Z) l01BF_1E52
	goto l0177_AE44_thunk_fn0177_AE47
	// succ:  l0177_AE44_thunk_fn0177_AE47 l0177_AE44_thunk_fn0177_AE52
l0177_AE38_thunk_fn0177_AE4A:
	call fn0177_AE4A (retsize: 0;)
	return
	// succ:  fn0177_AE36_exit
l0177_AE3A:
	call fn00F7_1E92 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0022:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - di)
	branch Test(NE,Z) l0177_AE45_thunk_fn0177_AE52
	goto l0177_AE45_thunk_fn0177_AE47
	// succ:  l0177_AE45_thunk_fn0177_AE47 l0177_AE45_thunk_fn0177_AE52
l0177_AE44_thunk_fn0177_AE47:
	call fn0177_AE47 (retsize: 0;)
	return
	// succ:  fn0177_AE36_exit
l0177_AE44_thunk_fn0177_AE52:
	call fn0177_AE52 (retsize: 0;)
	return
	// succ:  fn0177_AE36_exit
l0177_AE45_thunk_fn0177_AE47:
	call fn0177_AE47 (retsize: 0;)
	return
	// succ:  fn0177_AE36_exit l0177_AE45_thunk_fn0177_AE47
l0177_AE45_thunk_fn0177_AE47:
	call fn0177_AE47 (retsize: 0;)
	return
	// succ:  fn0177_AE36_exit
l0177_AE45_thunk_fn0177_AE52:
	call fn0177_AE52 (retsize: 0;)
	return
	// succ:  fn0177_AE36_exit
fn0177_AE36_exit:


// fn0177_AE47
// Return size: 0
void fn0177_AE47()
fn0177_AE47_entry:
	// succ:  l01BF_1E47
l01BF_1E47:
	ax = Mem0[ss:bp + 0x000A:word16]
	// succ:  l01BF_1E47_thunk_fn0177_AE4A
l01BF_1E47_thunk_fn0177_AE4A:
	call fn0177_AE4A (retsize: 0;)
	return
	// succ:  fn0177_AE47_exit
fn0177_AE47_exit:


// fn0177_AE4A
// Return size: 0
void fn0177_AE4A()
fn0177_AE4A_entry:
	// succ:  l0177_AE4A
l0177_AE4A:
	sp = fp
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - ax)
	branch Test(NE,Z) l0177_AE4D_thunk_fn0177_AE52
	goto l0177_AE4D_thunk_fn0177_AE4F
	// succ:  l0177_AE4D_thunk_fn0177_AE4F l0177_AE4D_thunk_fn0177_AE52
l0177_AE4A:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - ax)
	branch Test(NE,Z) l01BF_1E52
	goto l0177_AE4D_thunk_fn0177_AE4F
	// succ:  l0177_AE4D_thunk_fn0177_AE4F l0177_AE4D_thunk_fn0177_AE52
l0177_AE4D_thunk_fn0177_AE4F:
	call fn0177_AE4F (retsize: 0;)
	return
	// succ:  fn0177_AE4A_exit l0177_AE4D_thunk_fn0177_AE4F
l0177_AE4D_thunk_fn0177_AE4F:
	call fn0177_AE4F (retsize: 0;)
	return
	// succ:  fn0177_AE4A_exit
l0177_AE4D_thunk_fn0177_AE4F:
	call fn0177_AE4F (retsize: 0;)
	return
	// succ:  fn0177_AE4A_exit
l0177_AE4D_thunk_fn0177_AE52:
	call fn0177_AE52 (retsize: 0;)
	return
	// succ:  fn0177_AE4A_exit
l0177_AE4D_thunk_fn0177_AE52:
	call fn0177_AE52 (retsize: 0;)
	return
	// succ:  fn0177_AE4A_exit
fn0177_AE4A_exit:


// fn0177_AE4F
// Return size: 0
void fn0177_AE4F()
fn0177_AE4F_entry:
	// succ:  l01BF_1E4F
l01BF_1E4F:
	call fn0177_AE52 (retsize: 0;)
	return
	// succ:  l01BF_20E5 fn0177_AE4F_exit
l01BF_20E5:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_AE4F_exit
fn0177_AE4F_exit:


// fn0177_AE52
// Return size: 0
void fn0177_AE52()
fn0177_AE52_entry:
	// succ:  l01BF_1E52
l01BF_1E52:
	Mem0[ss:bp - 0x0006:word16] = di
	bx = Mem0[ss:bp + 0x000A:word16]
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax - di
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	cx = Mem0[ss:bp + 0x0006:word16]
	cx = cx - bx
	SCZO = cond(cx)
	Mem0[ss:bp - 0x000E:word16] = cx
	cl = 0x05
	dx = bx
	dx = dx - Mem0[ds:0x3D84:word16]
	SCZO = cond(dx)
	dx = dx << cl
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0012:word16] = dx
	Mem0[ss:bp - 0x0020:word16] = dx
	dx = di
	dx = dx - Mem0[ds:0x4BE8:word16]
	SCZO = cond(dx)
	dx = dx << cl
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0004:word16] = dx
	Mem0[ss:bp - 0x0010:word16] = dx
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	cx = ax
	ax = Mem0[ss:bp - 0x000E:word16]
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	SCZO = cond(ax - cx)
	branch Test(GT,SZO) l01BF_1E9C
	// succ:  l01BF_1E99 l01BF_1E9C
l01BF_1E99:
	goto l01BF_1FAC
	// succ:  l01BF_1FAC
l01BF_1E9C:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0000)
	branch Test(LE,SZO) l01BF_1EAA
	// succ:  l01BF_1EA2 l01BF_1EAA
l01BF_1EA2:
	dx = 0x0001
	di = 0x0020
	goto l01BF_1EB0
	// succ:  l01BF_1EB0
l01BF_1EAA:
	dx = 0xFFFF
	di = 0xFFE0
	// succ:  l01BF_1EB0
l01BF_1EB0:
	cl = 0x05
	ax = Mem0[ss:bp - 0x000C:word16]
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	v23 = Mem0[ss:bp - 0x0012:word16] + di
	Mem0[ss:bp - 0x0012:word16] = v23
	SCZO = cond(v23)
	Mem0[ss:bp - 0x0016:word16] = di
	bx = bx + dx
	SCZO = cond(bx)
	SCZO = cond(bx - Mem0[ss:bp + 0x0006:word16])
	branch Test(EQ,Z) l01BF_1F3E
	// succ:  l01BF_1EC7 l01BF_1F3E
l01BF_1EC7:
	Mem0[ss:bp - 0x001A:word16] = dx
	Mem0[ss:bp - 0x001E:word16] = bx
	si = Mem0[ss:bp - 0x0012:word16]
	di = Mem0[ss:bp - 0x0004:word16]
	// succ:  l01BF_1ED3
l01BF_1ED3:
	Mem0[ss:bp - 0x0006:word16] = di
	ax = Mem0[ss:bp - 0x000E:word16]
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0008:word16]
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x001E:word16]
	dx = dx - dx
	SCZO = cond(dx)
	ax = ax - Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A70 (retsize: 4;)
	sp = sp + 0x0008
	di = ax
	di = di + Mem0[ss:bp - 0x0010:word16]
	SCZO = cond(di)
	bx = Mem0[ss:bp - 0x0018:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = bp - 0x0024
	bx = bx + ax
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	BitBlt(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	DrawIcon(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	SCZO = cond(Mem0[ss:bp - 0x001C:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_1F46
	// succ:  l01BF_1F36 l01BF_1F46
l01BF_1F36:
	Mem0[ss:bp - 0x001C:word16] = 0x0000
	goto l01BF_1F74
	// succ:  l01BF_1F74
l01BF_1F3E:
	si = Mem0[ss:bp - 0x0012:word16]
	di = Mem0[ss:bp - 0x0004:word16]
	goto l01BF_1F99
	// succ:  l01BF_1F99
l01BF_1F46:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	ax = si
	ax = ax - Mem0[ss:bp - 0x0016:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp - 0x0014:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = bp - 0x0024
	bx = bx + ax
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BitBlt(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0014
	// succ:  l01BF_1F74
l01BF_1F74:
	v24 = Mem0[ss:bp - 0x0018:byte] ^ 0x01
	Mem0[ss:bp - 0x0018:byte] = v24
	SZO = cond(Mem0[ss:bp - 0x0018:byte])
	C = false
	v25 = Mem0[ss:bp - 0x0014:byte] ^ 0x01
	Mem0[ss:bp - 0x0014:byte] = v25
	SZO = cond(Mem0[ss:bp - 0x0014:byte])
	C = false
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01D7_1CB4 (retsize: 4;)
	sp = sp + 0x0002
	si = si + Mem0[ss:bp - 0x0016:word16]
	SCZO = cond(si)
	ax = Mem0[ss:bp + 0x0006:word16]
	cx = Mem0[ss:bp - 0x001A:word16]
	v26 = Mem0[ss:bp - 0x001E:word16] + cx
	Mem0[ss:bp - 0x001E:word16] = v26
	SCZO = cond(v26)
	SCZO = cond(Mem0[ss:bp - 0x001E:word16] - ax)
	branch Test(EQ,Z) l01BF_1F99
	// succ:  l01BF_1F96 l01BF_1F99
l01BF_1F96:
	goto l01BF_1ED3
	// succ:  l01BF_1ED3
l01BF_1F99:
	SCZO = cond(Mem0[ss:bp - 0x001C:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_1FA2
	// succ:  l01BF_1F9F l01BF_1FA2
l01BF_1F9F:
	goto l01BF_20D5
	// succ:  l01BF_20D5
l01BF_1FA2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	si = si - Mem0[ss:bp - 0x0016:word16]
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	goto l01BF_20B6
	// succ:  l01BF_20B6
l01BF_1FAC:
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x0000)
	branch Test(LE,SZO) l01BF_1FBA
	// succ:  l01BF_1FB2 l01BF_1FBA
l01BF_1FB2:
	dx = 0x0001
	bx = 0x0020
	goto l01BF_1FC0
	// succ:  l01BF_1FC0
l01BF_1FBA:
	dx = 0xFFFF
	bx = 0xFFE0
	// succ:  l01BF_1FC0
l01BF_1FC0:
	cl = 0x05
	ax = Mem0[ss:bp - 0x000E:word16]
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	v15 = Mem0[ss:bp - 0x0004:word16] + bx
	Mem0[ss:bp - 0x0004:word16] = v15
	SCZO = cond(v15)
	Mem0[ss:bp - 0x0016:word16] = bx
	ax = Mem0[ss:bp + 0x0008:word16]
	v16 = Mem0[ss:bp - 0x0006:word16] + dx
	Mem0[ss:bp - 0x0006:word16] = v16
	SCZO = cond(v16)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(EQ,Z) l01BF_204E
	// succ:  l01BF_1FDB l01BF_204E
l01BF_1FDB:
	Mem0[ss:bp - 0x001A:word16] = dx
	di = Mem0[ss:bp - 0x0004:word16]
	si = Mem0[ss:bp - 0x0012:word16]
	// succ:  l01BF_1FE4
l01BF_1FE4:
	Mem0[ss:bp - 0x0008:word16] = si
	ax = Mem0[ss:bp - 0x000C:word16]
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x000A:word16]
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = dx - dx
	SCZO = cond(dx)
	ax = ax - Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(ax)
	dx = dx - dx - C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A70 (retsize: 4;)
	sp = sp + 0x0008
	si = ax
	si = si + Mem0[ss:bp - 0x0020:word16]
	SCZO = cond(si)
	bx = Mem0[ss:bp - 0x0018:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = bp - 0x0024
	bx = bx + ax
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	BitBlt(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	DrawIcon(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	SCZO = cond(Mem0[ss:bp - 0x001C:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_2056
	// succ:  l01BF_2047 l01BF_2056
l01BF_2047:
	Mem0[ss:bp - 0x001C:word16] = 0x0000
	goto l01BF_2084
	// succ:  l01BF_2084
l01BF_204E:
	si = Mem0[ss:bp - 0x0012:word16]
	di = Mem0[ss:bp - 0x0004:word16]
	goto l01BF_20A9
	// succ:  l01BF_20A9
l01BF_2056:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = di
	ax = ax - Mem0[ss:bp - 0x0016:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp - 0x0014:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	ax = bp - 0x0024
	bx = bx + ax
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BitBlt(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0014
	// succ:  l01BF_2084
l01BF_2084:
	v20 = Mem0[ss:bp - 0x0018:byte] ^ 0x01
	Mem0[ss:bp - 0x0018:byte] = v20
	SZO = cond(Mem0[ss:bp - 0x0018:byte])
	C = false
	v21 = Mem0[ss:bp - 0x0014:byte] ^ 0x01
	Mem0[ss:bp - 0x0014:byte] = v21
	SZO = cond(Mem0[ss:bp - 0x0014:byte])
	C = false
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01D7_1CB4 (retsize: 4;)
	sp = sp + 0x0002
	di = di + Mem0[ss:bp - 0x0016:word16]
	SCZO = cond(di)
	ax = Mem0[ss:bp + 0x0008:word16]
	cx = Mem0[ss:bp - 0x001A:word16]
	v22 = Mem0[ss:bp - 0x0006:word16] + cx
	Mem0[ss:bp - 0x0006:word16] = v22
	SCZO = cond(v22)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(EQ,Z) l01BF_20A9
	// succ:  l01BF_20A6 l01BF_20A9
l01BF_20A6:
	goto l01BF_1FE4
	// succ:  l01BF_1FE4
l01BF_20A9:
	SCZO = cond(Mem0[ss:bp - 0x001C:word16] - 0x0000)
	branch Test(NE,Z) l01BF_20D5
	// succ:  l01BF_20AF l01BF_20D5
l01BF_20AF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = di - Mem0[ss:bp - 0x0016:word16]
	SCZO = cond(di)
	// succ:  l01BF_20B6
l01BF_20B6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	si = Mem0[ss:bp - 0x0014:word16]
	si = si << 0x0001
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0024 + si:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BitBlt(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0014
	// succ:  l01BF_20D5
l01BF_20D5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0024:word16]
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0022:word16]
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l01BF_20E0_thunk_fn0177_AE4F
l01BF_20E0_thunk_fn0177_AE4F:
	call fn0177_AE4F (retsize: 0;)
	return
	// succ:  fn0177_AE52_exit
fn0177_AE52_exit:


// fn01BF_20F2
// Return size: 4
void fn01BF_20F2()
fn01BF_20F2_entry:
	// succ:  l01BF_20F2
l01BF_20F2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = 0x4DEE
	di = Mem0[ss:bp - 0x0004:word16]
	// succ:  l01BF_2107
l01BF_2107:
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_2117
	// succ:  l01BF_210C l01BF_2117
l01BF_210C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:si:word16] = 0x0000
	// succ:  l01BF_2117
l01BF_2117:
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x4E1E)
	branch Test(ULT,C) l01BF_2107
	// succ:  l01BF_211F l01BF_2107
l01BF_211F:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_20F2_exit
fn01BF_20F2_exit:


// fn01BF_212A
// Return size: 4
void fn01BF_212A()
fn01BF_212A_entry:
	// succ:  l01BF_212A
l01BF_212A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x01BF
	es = ax
	bx = Mem0[ds:0x0096:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	si = Mem0[0x01BF:bx + 0x00B1:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01BF_219E
	// succ:  l01BF_214D l01BF_219E
l01BF_214D:
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	// succ:  l01BF_2152
l01BF_2152:
	al = Mem0[0x01BF:si:byte]
	bx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:bx + 0x409E:byte] = al
	SCZO = cond(Mem0[0x01BF:si:word16] - 0x0000)
	branch Test(EQ,Z) l01BF_218A
	// succ:  l01BF_2162 l01BF_218A
l01BF_2162:
	di = Mem0[0x01BF:si:word16]
	di = di - 0x0030
	SCZO = cond(di)
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	SCZO = cond(Mem0[ds:bx + 0x4DEE:word16] - 0x0000)
	branch Test(NE,Z) l01BF_218A
	// succ:  l01BF_2173 l01BF_218A
l01BF_2173:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	di = di << 0x0001
	SCZO = cond(di)
	ax = Mem0[ds:di + 0x060A:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ds:di + 0x4DEE:word16] = ax
	// succ:  l01BF_218A
l01BF_218A:
	si = si + 0x0003
	SCZO = cond(si)
	v17 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v17
	SZO = cond(v17)
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - 0x0010)
	branch Test(GE,SO) l01BF_219E
	// succ:  l01BF_2196 l01BF_219E
l01BF_2196:
	ax = 0x01BF
	es = ax
	goto l01BF_2152
	// succ:  l01BF_2152
l01BF_219E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_212A_exit
fn01BF_212A_exit:


// fn01BF_21A8
// Return size: 4
void fn01BF_21A8()
fn01BF_21A8_entry:
	// succ:  l01BF_21A8
l01BF_21A8:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	al = Mem0[0x01BF:bx + 0x010D:byte]
	ax = ax & 0x007F
	SZO = cond(ax)
	C = false
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_21A8_exit
fn01BF_21A8_exit:


// fn01BF_21CE
// Return size: 4
void fn01BF_21CE()
fn01BF_21CE_entry:
	// succ:  l01BF_21CE
l01BF_21CE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x01BF
	es = ax
	bx = Mem0[ss:bp + 0x0006:word16]
	si = bx
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	ah = Mem0[0x01BF:si + 0x010E:byte]
	ax = ax & 0x3F00
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(ax - 0x3000)
	branch Test(NE,Z) l01BF_2200
	// succ:  l01BF_21FA l01BF_2200
l01BF_21FA:
	al = Mem0[ds:bx + 0x4037:byte]
	goto l01BF_2202
	// succ:  l01BF_2202
l01BF_2200:
	al = ah
	// succ:  l01BF_2202
l01BF_2202:
	ah = ah - ah
	SCZO = cond(ah)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_21CE_exit
fn01BF_21CE_exit:


// fn01BF_2210
// Return size: 4
void fn01BF_2210()
fn01BF_2210_entry:
	// succ:  l01BF_2210
l01BF_2210:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	al = Mem0[0x01BF:bx + 0x010F:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_2210_exit
fn01BF_2210_exit:


// fn01BF_2236
// Return size: 4
void fn01BF_2236()
fn01BF_2236_entry:
	// succ:  l01BF_2236
l01BF_2236:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	al = Mem0[0x01BF:bx + 0x010D:byte]
	ax = ax & 0x0080
	SZO = cond(ax)
	C = false
	cl = 0x07
	ax = ax >>u cl
	SCZO = cond(ax)
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_2236_exit
fn01BF_2236_exit:


// fn01BF_2260
// Return size: 4
void fn01BF_2260()
fn01BF_2260_entry:
	// succ:  l01BF_2260
l01BF_2260:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	al = Mem0[0x01BF:bx + 0x010E:byte]
	ax = ax & 0x0040
	SZO = cond(ax)
	C = false
	cl = 0x06
	ax = ax >>u cl
	SCZO = cond(ax)
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_2260_exit
fn01BF_2260_exit:


// fn01BF_228A
// Return size: 4
void fn01BF_228A()
fn01BF_228A_entry:
	// succ:  l01BF_228A
l01BF_228A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 0x0006:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	al = Mem0[0x01BF:bx + 0x010E:byte]
	ah = ah - ah
	SCZO = cond(ah)
	cl = 0x07
	ax = ax >>u cl
	SCZO = cond(ax)
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01BF_228A_exit
fn01BF_228A_exit:


// fn01BF_22B4
// Return size: 4
void fn01BF_22B4()
fn01BF_22B4_entry:
	// succ:  l01BF_22B4
l01BF_22B4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	dx = Mem0[ss:bp + 0x0006:word16]
	bx = dx
	bx = bx << 0x0001
	SCZO = cond(bx)
	di = Mem0[ds:bx + 0x4E28:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l01BF_22D5
	// succ:  l01BF_22D2 l01BF_22D5
l01BF_22D2:
	call fn0177_B38F (retsize: 0;)
	return
	// succ:  l01BF_239A fn01BF_22B4_exit
l01BF_22D5:
	SCZO = cond(dx - 0x000D)
	branch Test(NE,Z) l01BF_22DD
	// succ:  l01BF_22DA l01BF_22DD
l01BF_22DA:
	goto l01BF_236E
	// succ:  l01BF_236E
l01BF_22DD:
	SCZO = cond(dx - 0x000E)
	branch Test(NE,Z) l01BF_22E5
	// succ:  l01BF_22E2 l01BF_22E5
l01BF_22E2:
	goto l01BF_236E
	// succ:  l01BF_236E
l01BF_22E5:
	si = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x000E
	// succ:  l01BF_22E8_thunk_fn0177_B2E9
l01BF_22E8_thunk_fn0177_B2E9:
	call fn0177_B2E9 (retsize: 0;)
	return
	// succ:  fn01BF_22B4_exit
l01BF_236E:
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax + 0x0020
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax + 0x0020
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	// succ:  l01BF_238C_thunk_fn0177_B38F
l01BF_238C_thunk_fn0177_B38F:
	call fn0177_B38F (retsize: 0;)
	return
	// succ:  fn01BF_22B4_exit
fn01BF_22B4_exit:


// fn0177_B2E9
// Return size: 0
void fn0177_B2E9()
fn0177_B2E9_entry:
	// succ:  l0177_B2E9
l0177_B2E9:
	sp = fp
	si = si + 0x0001
	SZO = cond(si)
	branch cx == 0x0000 l0177_B2EC
	goto l0177_B2EA_1
	// succ:  l0177_B2EA_1 l0177_B2EC
l0177_B2E9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	DPtoLP(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax + Mem0[ds:0x414E:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax + Mem0[ds:0x4150:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	OffsetRect(Mem0[ss:sp + 4:segptr32], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	UnrealizeObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x000E:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ss:bp - 0x000C:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LPtoDP(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D7A:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp - 0x0006:word16]
	cx = 0x0008
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = Mem0[ss:bp - 0x0004:word16]
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SetBrushOrg(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	goto l0177_B368_thunk_fn0177_B38F
	// succ:  l0177_B368_thunk_fn0177_B38F
l0177_B2EA_1:
	// succ:  l0177_B2EC
l0177_B2EC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	DPtoLP(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax + Mem0[ds:0x414E:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax + Mem0[ds:0x4150:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	OffsetRect(Mem0[ss:sp + 4:segptr32], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	UnrealizeObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x000E:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ss:bp - 0x000C:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LPtoDP(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D7A:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp - 0x0006:word16]
	cx = 0x0008
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = Mem0[ss:bp - 0x0004:word16]
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SetBrushOrg(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	goto l0177_B36B_thunk_fn0177_B38F
	// succ:  l0177_B36B_thunk_fn0177_B38F
l0177_B368_thunk_fn0177_B38F:
	call fn0177_B38F (retsize: 0;)
	return
	// succ:  fn0177_B2E9_exit
l0177_B36B_thunk_fn0177_B38F:
	call fn0177_B38F (retsize: 0;)
	return
	// succ:  fn0177_B2E9_exit
fn0177_B2E9_exit:


// fn0177_B38F
// Return size: 0
void fn0177_B38F()
fn0177_B38F_entry:
	// succ:  l01BF_238F
l01BF_238F:
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l01BF_239A
l01BF_239A:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_B38F_exit
fn0177_B38F_exit:


// fn01BF_23A6
// Return size: 4
void fn01BF_23A6()
fn01BF_23A6_entry:
	// succ:  l01BF_23A6
l01BF_23A6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0032
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x0006:word16]
	bl = Mem0[ds:bx:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	al = Mem0[0x01BF:bx + 0x010F:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0021
	SCZO = cond(ax)
	SCZO = cond(ax - 0x0015)
	branch Test(ULE,CZ) l01BF_23D2
	// succ:  l01BF_23CF l01BF_23D2
l01BF_23CF:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  l01BF_2A1B fn01BF_23A6_exit
l01BF_23D2:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v17 = ax
	ax = bx
	bx = v17
	switch (ax) { l01BF_2406 l01BF_2A1B l01BF_252C l01BF_2A1B l01BF_264C l01BF_2A1B l01BF_276E l01BF_2A1B l01BF_2A1B l01BF_2A1B l01BF_2A1B l01BF_2A1B l01BF_2A1B l01BF_2A1B l01BF_2A1B l01BF_2890 l01BF_2A1B l01BF_294C l01BF_2A1B l01BF_2890 l01BF_2A1B l01BF_294C }
	// succ:  l01BF_2406 l01BF_23D5_thunk_fn0177_B524 l01BF_252C l01BF_23D5_thunk_fn0177_B524 l01BF_264C l01BF_23D5_thunk_fn0177_B524 l01BF_276E l01BF_23D5_thunk_fn0177_B524 l01BF_23D5_thunk_fn0177_B524 l01BF_23D5_thunk_fn0177_B524 l01BF_23D5_thunk_fn0177_B524 l01BF_23D5_thunk_fn0177_B524 l01BF_23D5_thunk_fn0177_B524 l01BF_23D5_thunk_fn0177_B524 l01BF_23D5_thunk_fn0177_B524 l01BF_2890 l01BF_23D5_thunk_fn0177_B524 l01BF_294C l01BF_23D5_thunk_fn0177_B524 l01BF_2890 l01BF_23D5_thunk_fn0177_B524 l01BF_294C
l01BF_23D5_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_23D5_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_23D5_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_23D5_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_23D5_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_23D5_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_23D5_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_23D5_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_23D5_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_23D5_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_23D5_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_23D5_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_23D5_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_23D5_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_2406:
	di = Mem0[ss:bp + 0x0008:word16]
	si = Mem0[ss:bp + 0x000A:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	dx = di + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	cx = cx + 0x0020
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = di + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	Mem0[ss:bp - 0x0010:word16] = cx
	Mem0[ss:bp - 0x0012:word16] = dx
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x41DE:word16]
	UnrealizeObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x000E:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ss:bp - 0x000C:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LPtoDP(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = Mem0[ss:bp - 0x0006:word16]
	cx = 0x0008
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = Mem0[ss:bp - 0x0004:word16]
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SetBrushOrg(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x41DE:word16]
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = di + 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	Mem0[ss:bp - 0x0014:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	LineTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = di + 0x001B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = di + 0x001F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	// succ:  l01BF_2523_thunk_fn0177_B524
l01BF_2523_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_252C:
	di = Mem0[ss:bp + 0x000A:word16]
	si = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x0016:word16] = ax
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax + 0x0020
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = ax
	LineTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = Mem0[ss:bp - 0x0016:word16]
	cx = cx + 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	cx = Mem0[ss:bp - 0x0016:word16]
	cx = cx + 0x0005
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x0018:word16] = cx
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LineTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0016:word16]
	ax = ax + 0x0006
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = Mem0[ss:bp - 0x0016:word16]
	ax = ax + 0x0016
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x001A:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = Mem0[ss:bp - 0x0016:word16]
	ax = ax + 0x001E
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAA:word16]
	UnrealizeObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x000E:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ss:bp - 0x000C:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LPtoDP(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp - 0x0006:word16]
	cx = 0x0008
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = Mem0[ss:bp - 0x0004:word16]
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SetBrushOrg(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAA:word16]
	// succ:  l01BF_2644_thunk_fn0177_BA16
l01BF_2644_thunk_fn0177_BA16:
	call fn0177_BA16 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_264C:
	di = Mem0[ss:bp + 0x000A:word16]
	si = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	Mem0[ss:bp - 0x001C:word16] = ax
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp - 0x001C:word16]
	ax = ax + 0x0020
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	di = ax
	LineTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	cx = Mem0[ss:bp + 0x0008:word16]
	cx = cx + 0x0001
	SZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cx = Mem0[ss:bp + 0x0008:word16]
	cx = cx + 0x0005
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	Mem0[ss:bp - 0x001E:word16] = cx
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001E:word16]
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001E:word16]
	LineTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax + 0x0006
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax + 0x0016
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	Mem0[ss:bp - 0x0020:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	// succ:  l01BF_26E5_thunk_fn0177_B6E9
l01BF_26E5_thunk_fn0177_B6E9:
	call fn0177_B6E9 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_276E:
	di = Mem0[ss:bp + 0x0008:word16]
	si = Mem0[ss:bp + 0x000A:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = si + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	dx = si + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	cx = cx + 0x0020
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	Mem0[ss:bp - 0x0022:word16] = cx
	Mem0[ss:bp - 0x0024:word16] = dx
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CF8:word16]
	UnrealizeObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x000E:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ss:bp - 0x000C:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LPtoDP(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = Mem0[ss:bp - 0x0006:word16]
	cx = 0x0008
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = Mem0[ss:bp - 0x0004:word16]
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SetBrushOrg(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3CF8:word16]
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0024:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = si + 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0022:word16]
	Mem0[ss:bp - 0x0026:word16] = ax
	// succ:  l01BF_2801_thunk_fn0177_B802
l01BF_2801_thunk_fn0177_B802:
	call fn0177_B802 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
l01BF_2890:
	di = Mem0[ss:bp + 0x0008:word16]
	si = Mem0[ss:bp + 0x000A:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cx = cx + 0x0020
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = di + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	Mem0[ss:bp - 0x0028:word16] = cx
	Mem0[ss:bp - 0x002A:word16] = dx
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D08:word16]
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x002A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0028:word16]
	ax = di + 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	Mem0[ss:bp - 0x002C:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EA0:word16]
	UnrealizeObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x000E:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ss:bp - 0x000C:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LPtoDP(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = Mem0[ss:bp - 0x0006:word16]
	cx = 0x0008
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = Mem0[ss:bp - 0x0004:word16]
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SetBrushOrg(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EA0:word16]
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x002C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0028:word16]
	ax = di + 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l01BF_2A05
	// succ:  l01BF_2A05
l01BF_294C:
	di = Mem0[ss:bp + 0x0008:word16]
	si = Mem0[ss:bp + 0x000A:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	dx = si + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	cx = cx + 0x0020
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	Mem0[ss:bp - 0x002E:word16] = cx
	Mem0[ss:bp - 0x0030:word16] = dx
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D08:word16]
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0030:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = si + 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x002E:word16]
	Mem0[ss:bp - 0x0032:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EA2:word16]
	UnrealizeObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x000E:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ss:bp - 0x000C:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LPtoDP(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = Mem0[ss:bp - 0x0006:word16]
	cx = 0x0008
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = Mem0[ss:bp - 0x0004:word16]
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SetBrushOrg(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EA2:word16]
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0032:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = si + 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x002E:word16]
	// succ:  l01BF_2A05
l01BF_2A05:
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D08:word16]
	// succ:  l01BF_2A12_thunk_fn0177_BA16
l01BF_2A12_thunk_fn0177_BA16:
	call fn0177_BA16 (retsize: 0;)
	return
	// succ:  fn01BF_23A6_exit
fn01BF_23A6_exit:


// fn0177_B524
// Return size: 0
void fn0177_B524()
fn0177_B524_entry:
	// succ:  l01BF_2524
l01BF_2524:
	LineTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	// succ:  l01BF_2A1B
l01BF_2A1B:
	Mem0[ds:0x05B4:word16] = 0x0001
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_B524_exit
fn0177_B524_exit:


// fn0177_B6E9
// Return size: 0
void fn0177_B6E9()
fn0177_B6E9_entry:
	// succ:  l0177_B6E9
l0177_B6E9:
	sp = fp
	dl = dl + Mem0[ss:bp - 0x0073:byte]
	SCZO = cond(dl)
	si = si + 0x0001
	SZO = cond(si)
	branch cx == 0x0000 l0177_B6EF
	goto l0177_B6ED_1
	// succ:  l0177_B6ED_1 l0177_B6EF
l0177_B6E9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0020:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax + 0x001E
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x495C:word16]
	UnrealizeObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x000E:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ss:bp - 0x000C:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LPtoDP(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp - 0x0006:word16]
	cx = 0x0008
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = Mem0[ss:bp - 0x0004:word16]
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SetBrushOrg(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x495C:word16]
	goto l0177_B765_thunk_fn0177_BA16
	// succ:  l0177_B765_thunk_fn0177_BA16
l0177_B6ED_1:
	// succ:  l0177_B6EF
l0177_B6EF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0020:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax + 0x001E
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x495C:word16]
	UnrealizeObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x000E:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ss:bp - 0x000C:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LPtoDP(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ClientToScreen(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp - 0x0006:word16]
	cx = 0x0008
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = Mem0[ss:bp - 0x0004:word16]
	dx_ax = (int32) ax
	dx = dx_ax % cx
	ax = dx_ax / cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SetBrushOrg(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x495C:word16]
	goto l0177_B76A_thunk_fn0177_BA16
	// succ:  l0177_B76A_thunk_fn0177_BA16
l0177_B765_thunk_fn0177_BA16:
	call fn0177_BA16 (retsize: 0;)
	return
	// succ:  fn0177_B6E9_exit
l0177_B76A_thunk_fn0177_BA16:
	call fn0177_BA16 (retsize: 0;)
	return
	// succ:  fn0177_B6E9_exit
fn0177_B6E9_exit:


// fn0177_B802
// Return size: 0
void fn0177_B802()
fn0177_B802_entry:
	// succ:  l0177_B802
l0177_B802:
	sp = fp
	si = si + 0x0001
	SZO = cond(si)
	FPUF = cond(rArg0 - (real64) Mem0[ss:(bp + 0x0330) + si:word32])
	goto l0177_B803_thunk_fn0177_B805
	// succ:  l0177_B803_thunk_fn0177_B805
l0177_B802:
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0022:word16]
	LineTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x001B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = si + 0x001F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0022:word16]
	si = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0022:word16]
	goto l0177_B887_thunk_fn0177_B524
	// succ:  l0177_B887_thunk_fn0177_B524
l0177_B803_thunk_fn0177_B805:
	call fn0177_B805 (retsize: 0;)
	return
	// succ:  fn0177_B802_exit
l0177_B887_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn0177_B802_exit
fn0177_B802_exit:


// fn0177_B805
// Return size: 0
void fn0177_B805()
fn0177_B805_entry:
	// succ:  l0177_B805
l0177_B805:
	sp = fp
	v7 = Mem0[ss:bp + di:byte] ^ al
	Mem0[ss:bp + di:byte] = v7
	SZO = cond(Mem0[ss:bp + di:byte])
	C = false
	goto l0177_B805_thunk_fn0177_B806
	// succ:  l0177_B805_thunk_fn0177_B806
l0177_B805:
	branch Test(UGT,CZ) l0177_B80B
	goto l0177_B805_thunk_fn0177_B809
	// succ:  l0177_B805_thunk_fn0177_B809 l0177_B805_thunk_fn0177_B80B
l0177_B805_thunk_fn0177_B806:
	call fn0177_B806 (retsize: 0;)
	return
	// succ:  fn0177_B805_exit
l0177_B805_thunk_fn0177_B809:
	call fn0177_B809 (retsize: 0;)
	return
	// succ:  fn0177_B805_exit
l0177_B805_thunk_fn0177_B80B:
	call fn0177_B80B (retsize: 0;)
	return
	// succ:  fn0177_B805_exit
fn0177_B805_exit:


// fn0177_B806
// Return size: 0
void fn0177_B806()
fn0177_B806_entry:
	// succ:  l0177_B806
l0177_B806:
	sp = fp
	si = si + Mem0[ds:bx + 0x0002:word16]
	SCZO = cond(si)
	goto l0177_B806_thunk_fn0177_B809
	// succ:  l0177_B806_thunk_fn0177_B809
l0177_B806:
	branch Test(UGT,CZ) l0177_B807_thunk_fn0177_B80B
	goto l0177_B807_thunk_fn0177_B809
	// succ:  l0177_B807_thunk_fn0177_B809 l0177_B807_thunk_fn0177_B80B
l0177_B806_thunk_fn0177_B809:
	call fn0177_B809 (retsize: 0;)
	return
	// succ:  fn0177_B806_exit
l0177_B807_thunk_fn0177_B809:
	call fn0177_B809 (retsize: 0;)
	return
	// succ:  fn0177_B806_exit l0177_B807_thunk_fn0177_B809
l0177_B807_thunk_fn0177_B809:
	call fn0177_B809 (retsize: 0;)
	return
	// succ:  fn0177_B806_exit
l0177_B807_thunk_fn0177_B80B:
	call fn0177_B80B (retsize: 0;)
	return
	// succ:  fn0177_B806_exit
fn0177_B806_exit:


// fn0177_B809
// Return size: 0
void fn0177_B809()
fn0177_B809_entry:
	// succ:  l0177_B809
l0177_B809:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	// succ:  l0177_B80C
l0177_B80C:
	ax = bp - 0x000E
	// succ:  l0177_B80F
l0177_B80F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	// succ:  l0177_B80F_thunk_fn0177_B80B
l0177_B80F_thunk_fn0177_B80B:
	call fn0177_B80B (retsize: 0;)
	return
	// succ:  fn0177_B809_exit
fn0177_B809_exit:


// fn0177_B80B
// Return size: 0
void fn0177_B80B()
fn0177_B80B_entry:
	// succ:  l0177_B80B
l0177_B80B:
	al = al | 0x8D
	SZO = cond(al)
	C = false
	// succ:  l0177_B80D
l0177_B80D:
	si = si + 0x0001
	SZO = cond(si)
	branch cx == 0x0000 l0177_B810
	// succ:  l0177_B80E_1 l0177_B810
l0177_B80E_1:
	// succ:  l0177_B810
l0177_B810:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0026:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0022:word16]
	LineTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x001B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = si + 0x001F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0022:word16]
	si = ax
	// succ:  l0177_B84B_thunk_fn0177_B84D
l0177_B84B_thunk_fn0177_B84D:
	call fn0177_B84D (retsize: 0;)
	return
	// succ:  fn0177_B80B_exit
fn0177_B80B_exit:


// fn0177_B84D
// Return size: 0
void fn0177_B84D()
fn0177_B84D_entry:
	// succ:  l0177_B84D
l0177_B84D:
	sp = fp
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	goto l0177_B87F_thunk_fn0177_B880
	// succ:  l0177_B87F_thunk_fn0177_B880
l0177_B84D:
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	goto l0177_B87F_thunk_fn0177_B880
	// succ:  l0177_B87F_thunk_fn0177_B880
l0177_B87F_thunk_fn0177_B880:
	call fn0177_B880 (retsize: 0;)
	return
	// succ:  fn0177_B84D_exit
l0177_B87F_thunk_fn0177_B880:
	call fn0177_B880 (retsize: 0;)
	return
	// succ:  fn0177_B84D_exit
fn0177_B84D_exit:


// fn0177_B880
// Return size: 0
void fn0177_B880()
fn0177_B880_entry:
	// succ:  l0177_B880
l0177_B880:
	sp = fp
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0022:word16]
	goto l0177_B88C_thunk_fn0177_B524
	// succ:  l0177_B88C_thunk_fn0177_B524
l0177_B880:
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0022:word16]
	goto l0177_B88C_thunk_fn0177_B524
	// succ:  l0177_B88C_thunk_fn0177_B524
l0177_B88C_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn0177_B880_exit
l0177_B88C_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn0177_B880_exit
fn0177_B880_exit:


// fn0177_BA16
// Return size: 0
void fn0177_BA16()
fn0177_BA16_entry:
	// succ:  l01BF_2A16
l01BF_2A16:
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l01BF_2A16_thunk_fn0177_B524
l01BF_2A16_thunk_fn0177_B524:
	call fn0177_B524 (retsize: 0;)
	return
	// succ:  fn0177_BA16_exit
fn0177_BA16_exit:


// fn01D7_0000
// Return size: 4
void fn01D7_0000()
fn01D7_0000_entry:
	// succ:  l01D7_0000
l01D7_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	// succ:  l01D7_0001_thunk_fn0177_C003
l01D7_0001_thunk_fn0177_C003:
	call fn0177_C003 (retsize: 0;)
	return
	// succ:  fn01D7_0000_exit
fn01D7_0000_exit:


// fn0177_C003
// Return size: 0
void fn0177_C003()
fn0177_C003_entry:
	// succ:  l0177_C003
l0177_C003:
	sp = fp
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0056
	SCZO = cond(sp)
	goto l0177_C00A_thunk_fn0177_C00D
	// succ:  l0177_C00A_thunk_fn0177_C00D
l0177_C003:
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0056
	SCZO = cond(sp)
	// succ:  l0177_C00A_thunk_fn0177_C00B
l0177_C00A_thunk_fn0177_C00B:
	call fn0177_C00B (retsize: 0;)
	return
	// succ:  fn0177_C003_exit
l0177_C00A_thunk_fn0177_C00D:
	call fn0177_C00D (retsize: 0;)
	return
	// succ:  fn0177_C003_exit
fn0177_C003_exit:


// fn0177_C00B
// Return size: 0
void fn0177_C00B()
fn0177_C00B_entry:
	// succ:  l0177_C00B
l0177_C00B:
	sp = fp
	al = __inb(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	goto l0177_C00C_thunk_fn0177_C00D
	// succ:  l0177_C00C_thunk_fn0177_C00D
l0177_C00B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l01D7_0038
	goto l0177_C013_thunk_fn0177_C017
	// succ:  l0177_C013_thunk_fn0177_C017 l0177_C013_thunk_fn0177_C038
l0177_C00C_thunk_fn0177_C00D:
	call fn0177_C00D (retsize: 0;)
	return
	// succ:  fn0177_C00B_exit
l0177_C013_thunk_fn0177_C017:
	call fn0177_C017 (retsize: 0;)
	return
	// succ:  fn0177_C00B_exit
l0177_C013_thunk_fn0177_C038:
	call fn0177_C038 (retsize: 0;)
	return
	// succ:  fn0177_C00B_exit
fn0177_C00B_exit:


// fn0177_C00D
// Return size: 0
void fn0177_C00D()
fn0177_C00D_entry:
	// succ:  l0177_C00D
l0177_C00D:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l0177_C015_thunk_fn0177_C038
	goto l0177_C015_thunk_fn0177_C017
	// succ:  l0177_C015_thunk_fn0177_C017 l0177_C015_thunk_fn0177_C038
l0177_C00D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l0177_C015_thunk_fn0177_C038
	goto l0177_C015_thunk_fn0177_C017
	// succ:  l0177_C015_thunk_fn0177_C017 l0177_C015_thunk_fn0177_C038
l0177_C015_thunk_fn0177_C017:
	call fn0177_C017 (retsize: 0;)
	return
	// succ:  fn0177_C00D_exit l0177_C015_thunk_fn0177_C017
l0177_C015_thunk_fn0177_C017:
	call fn0177_C017 (retsize: 0;)
	return
	// succ:  fn0177_C00D_exit
l0177_C015_thunk_fn0177_C017:
	call fn0177_C017 (retsize: 0;)
	return
	// succ:  fn0177_C00D_exit l0177_C015_thunk_fn0177_C017
l0177_C015_thunk_fn0177_C017:
	call fn0177_C017 (retsize: 0;)
	return
	// succ:  fn0177_C00D_exit
l0177_C015_thunk_fn0177_C038:
	call fn0177_C038 (retsize: 0;)
	return
	// succ:  fn0177_C00D_exit
l0177_C015_thunk_fn0177_C038:
	call fn0177_C038 (retsize: 0;)
	return
	// succ:  fn0177_C00D_exit
fn0177_C00D_exit:


// fn0177_C017
// Return size: 0
void fn0177_C017()
fn0177_C017_entry:
	// succ:  l01D7_0017
l01D7_0017:
	bx = 0x063A
	dx = dx - dx
	SCZO = cond(dx)
	// succ:  l01D7_001C
l01D7_001C:
	SCZO = cond(Mem0[ds:bx + 0x0004:byte] - 0xFF)
	branch Test(EQ,Z) l01D7_002E
	// succ:  l01D7_0022 l01D7_002E
l01D7_0022:
	bx = bx + 0x000C
	SCZO = cond(bx)
	dx = dx + 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - 0x0020)
	branch Test(LT,SO) l01D7_001C
	// succ:  l01D7_0029_thunk_fn0177_C02B l01D7_001C
l01D7_0029_thunk_fn0177_C02B:
	call fn0177_C02B (retsize: 0;)
	return
	// succ:  fn0177_C017_exit
l01D7_002E:
	di = dx
	// succ:  l01D7_002E_thunk_fn0177_C02B
l01D7_002E_thunk_fn0177_C02B:
	call fn0177_C02B (retsize: 0;)
	return
	// succ:  fn0177_C017_exit
fn0177_C017_exit:


// fn0177_C02B
// Return size: 0
void fn0177_C02B()
fn0177_C02B_entry:
	// succ:  l01D7_002B
l01D7_002B:
	// succ:  l01D7_0030
l01D7_0030:
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l01D7_0038
	goto l01D7_0035
	// succ:  l01D7_0035 l01D7_0033_thunk_fn0177_C038
l01D7_0033_thunk_fn0177_C038:
	call fn0177_C038 (retsize: 0;)
	return
	// succ:  fn0177_C02B_exit
l01D7_0035:
	call fn0177_C038 (retsize: 0;)
	return
	// succ:  l01D7_00D8 fn0177_C02B_exit
l01D7_00D8:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_C02B_exit
fn0177_C02B_exit:


// fn0177_C038
// Return size: 0
void fn0177_C038()
fn0177_C038_entry:
	// succ:  l01D7_0038
l01D7_0038:
	si = di
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + 0x063A
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:si + 0x0004:byte] - 0xFF)
	branch Test(EQ,Z) l01D7_005E
	// succ:  l01D7_004E l01D7_005E
l01D7_004E:
	ax = 0x0209
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l01D7_0056_thunk_fn0177_C017
l01D7_0056_thunk_fn0177_C017:
	call fn0177_C017 (retsize: 0;)
	return
	// succ:  fn0177_C038_exit
l01D7_005E:
	Mem0[ss:bp + 0x0006:word16] = di
	al = Mem0[ds:si + 0x0003:byte]
	ax = (int16) al
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	cx = ax
	al = Mem0[ds:0x4D04:byte]
	bl = 0x04
	ax = (int16) al
	dx = dx_ax % bl
	ax = dx_ax / bl
	SCZO = cond(ax)
	cl = cl - al
	SCZO = cond(cl)
	Mem0[ds:si + 0x0004:byte] = cl
	SCZO = cond(cl - 0x01)
	branch Test(GE,SO) l01D7_0088
	// succ:  l01D7_0084 l01D7_0088
l01D7_0084:
	Mem0[ds:si + 0x0004:byte] = 0x01
	// succ:  l01D7_0088
l01D7_0088:
	Mem0[ss:bp - 0x0006:word16] = si
	di = di - di
	SCZO = cond(di)
	dx = 0x081C
	Mem0[ss:bp - 0x0004:word16] = dx
	si = dx
	// succ:  l01D7_0095
l01D7_0095:
	SCZO = cond(Mem0[ds:si:word16] - 0xFFFF)
	branch Test(EQ,Z) l01D7_00A6
	// succ:  l01D7_009A l01D7_00A6
l01D7_009A:
	di = di + 0x0001
	SZO = cond(di)
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x0830)
	branch Test(ULT,C) l01D7_0095
	// succ:  l01D7_00A3 l01D7_0095
l01D7_00A3:
	goto l01D7_00B3
	// succ:  l01D7_00B3
l01D7_00A6:
	ax = Mem0[ss:bp + 0x0006:word16]
	di = di << 0x0001
	SCZO = cond(di)
	Mem0[ds:di + 0x081C:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1E5C (retsize: 2;)
l01D7_00B3:
	ax = bp - 0x0056
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x002A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	bx = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x0056
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l01D7_00D3_thunk_fn0177_C017
l01D7_00D3_thunk_fn0177_C017:
	call fn0177_C017 (retsize: 0;)
	return
	// succ:  fn0177_C038_exit
fn0177_C038_exit:


// fn01D7_00E4
// Return size: 4
void fn01D7_00E4()
fn01D7_00E4_entry:
	// succ:  l01D7_00E4
l01D7_00E4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ss:bp + 0x0006:word16]
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	si = Mem0[ds:bx + 0x0640:word16]
	al = Mem0[ds:bx + 0x063E:byte]
	ax = (int16) al
	di = ax
	SCZO = cond(di - Mem0[ds:0x4D00:word16])
	branch Test(LE,SZO) l01D7_012E
	// succ:  l01D7_0111 l01D7_012E
l01D7_0111:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x03F5
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x03F4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1D72 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(ax - 0x0007)
	branch Test(NE,Z) l01D7_012E
	// succ:  l01D7_012B l01D7_012E
l01D7_012B:
	call fn0177_C16A (retsize: 0;)
	return
	// succ:  l01D7_01D4 fn01D7_00E4_exit
l01D7_012E:
	v14 = Mem0[ds:0x4D00:word16] - di
	Mem0[ds:0x4D00:word16] = v14
	SCZO = cond(v14)
	branch Test(NS,S) l01D7_016A
	goto l01D7_0134
	// succ:  l01D7_0134 l01D7_0132_thunk_fn0177_C16A
l01D7_0132_thunk_fn0177_C16A:
	call fn0177_C16A (retsize: 0;)
	return
	// succ:  fn01D7_00E4_exit
l01D7_0134:
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l01D7_0138_thunk_fn0177_C13B
l01D7_0138_thunk_fn0177_C13B:
	call fn0177_C13B (retsize: 0;)
	return
	// succ:  fn01D7_00E4_exit
fn01D7_00E4_exit:


// fn0177_C13B
// Return size: 0
void fn0177_C13B()
fn0177_C13B_entry:
	// succ:  l0177_C13B
l0177_C13B:
	sp = fp
	SZO = cond(Mem0[ds:bx + si:word16] & 0xC88B)
	C = false
	ax = 0xFFEC
	dx_ax = Mem0[ds:0x4D00:word16] *s ax
	SCZO = cond(dx_ax)
	SCZO = cond(cx - ax)
	branch Test(GE,SO) l0177_C148_thunk_fn0177_C16A
	goto l0177_C148_thunk_fn0177_C14A
	// succ:  l0177_C148_thunk_fn0177_C14A l0177_C148_thunk_fn0177_C16A
l0177_C13B:
	cx = ax
	ax = 0xFFEC
	dx_ax = Mem0[ds:0x4D00:word16] *s ax
	SCZO = cond(dx_ax)
	SCZO = cond(cx - ax)
	branch Test(GE,SO) l01D7_016A
	// succ:  l0177_C146_thunk_fn0177_C14A l0177_C146_thunk_fn0177_C16A
l0177_C146_thunk_fn0177_C14A:
	call fn0177_C14A (retsize: 0;)
	return
	// succ:  fn0177_C13B_exit
l0177_C146_thunk_fn0177_C16A:
	call fn0177_C16A (retsize: 0;)
	return
	// succ:  fn0177_C13B_exit
l0177_C148_thunk_fn0177_C14A:
	call fn0177_C14A (retsize: 0;)
	return
	// succ:  fn0177_C13B_exit l0177_C148_thunk_fn0177_C14A
l0177_C148_thunk_fn0177_C14A:
	call fn0177_C14A (retsize: 0;)
	return
	// succ:  fn0177_C13B_exit
l0177_C148_thunk_fn0177_C16A:
	call fn0177_C16A (retsize: 0;)
	return
	// succ:  fn0177_C13B_exit
fn0177_C13B_exit:


// fn0177_C14A
// Return size: 0
void fn0177_C14A()
fn0177_C14A_entry:
	// succ:  l01D7_014A
l01D7_014A:
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax + 0x0005
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	dx_ax = (word32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_070A (retsize: 4;)
	sp = sp + 0x000C
	// succ:  l01D7_0165_thunk_fn0177_C16A
l01D7_0165_thunk_fn0177_C16A:
	call fn0177_C16A (retsize: 0;)
	return
	// succ:  fn0177_C14A_exit
fn0177_C14A_exit:


// fn0177_C16A
// Return size: 0
void fn0177_C16A()
fn0177_C16A_entry:
	// succ:  l01D7_016A
l01D7_016A:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_057E (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(si - 0x0064)
	branch Test(LE,SZO) l01D7_01A2
	// succ:  l01D7_0178 l01D7_01A2
l01D7_0178:
	ax = si
	dx_ax = (word32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_10B8 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0BB0 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01D7_01A0
	// succ:  l01D7_0190 l01D7_01A0
l01D7_0190:
	ax = 0x027F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	goto l01D7_01D4
	// succ:  l01D7_01D4
l01D7_01A0:
	si = si - si
	SCZO = cond(si)
	// succ:  l01D7_01A2
l01D7_01A2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_01E0 (retsize: 2;)
	sp = sp + 0x0004
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l01D7_01CC
	// succ:  l01D7_01B3 l01D7_01CC
l01D7_01B3:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01D7_01CC
	// succ:  l01D7_01B7 l01D7_01CC
l01D7_01B7:
	ax = si
	dx_ax = (word32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_10B8 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0BB0 (retsize: 4;)
	sp = sp + 0x0004
	goto l01D7_01D4
	// succ:  l01D7_01D4
l01D7_01CC:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01D7_01D4
	// succ:  l01D7_01D0 l01D7_01D4
l01D7_01D0:
	Mem0[ds:0x032E:word16] = si
	// succ:  l01D7_01D4
l01D7_01D4:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_C16A_exit
fn0177_C16A_exit:


// fn01D7_01E0
// Return size: 4
void fn01D7_01E0()
fn01D7_01E0_entry:
	// succ:  l01D7_01E0
l01D7_01E0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	// succ:  l01D7_01E7_thunk_fn0177_C1E8
l01D7_01E7_thunk_fn0177_C1E8:
	call fn0177_C1E8 (retsize: 0;)
	return
	// succ:  fn01D7_01E0_exit
fn01D7_01E0_exit:


// fn0177_C1E8
// Return size: 0
void fn0177_C1E8()
fn0177_C1E8_entry:
	// succ:  l0177_C1E8
l0177_C1E8:
	sp = fp
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0008:word16]
	ax = si
	SCZO = cond(ax - 0x0023)
	branch Test(ULE,CZ) l0177_C1F6_thunk_fn0177_C1FB
	goto l01D7_01F8_in_fn0177_C1E8
	// succ:  l01D7_01F8_in_fn0177_C1E8 l0177_C1F6_thunk_fn0177_C1FB
l0177_C1E8:
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0008:word16]
	ax = si
	SCZO = cond(ax - 0x0023)
	branch Test(ULE,CZ) l01D7_01FB
	goto l01D7_01F8
	// succ:  l01D7_01F8 l0177_C1F6_thunk_fn0177_C1FB
l0177_C1F6_thunk_fn0177_C1FB:
	call fn0177_C1FB (retsize: 0;)
	return
	// succ:  fn0177_C1E8_exit
l0177_C1F6_thunk_fn0177_C1FB:
	call fn0177_C1FB (retsize: 0;)
	return
	// succ:  fn0177_C1E8_exit
l01D7_01F8:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  l01D7_01F8_thunk_fn0177_C312 fn0177_C1E8_exit
l01D7_01F8_in_fn0177_C1E8:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  l01D7_0312_in_fn0177_C1E8 l01D7_01F8_in_fn0177_C1E8
l01D7_01F8_in_fn0177_C1E8:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  l01D7_0312_in_fn0177_C1E8
l01D7_01F8_thunk_fn0177_C312:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  fn0177_C1E8_exit
l01D7_0312_in_fn0177_C1E8:
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0644:word16]
	call fn0017_1E2E (retsize: 4;)
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	goto l01D7_0327_in_fn0177_C1E8
	// succ:  l01D7_0327_in_fn0177_C1E8
l01D7_0312_in_fn0177_C1E8:
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0644:word16]
	call fn0017_1E2E (retsize: 4;)
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	goto l01D7_0327_in_fn0177_C1E8
	// succ:  l01D7_0327_in_fn0177_C1E8
l01D7_0327_in_fn0177_C1E8:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_C1E8_exit
l01D7_0327_in_fn0177_C1E8:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_C1E8_exit
fn0177_C1E8_exit:


// fn0177_C1FB
// Return size: 0
void fn0177_C1FB()
fn0177_C1FB_entry:
	// succ:  l01D7_01FB
l01D7_01FB:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v4 = ax
	ax = bx
	bx = v4
	switch (ax) { l01D7_024C l01D7_026A l01D7_0272 l01D7_0272 l01D7_028E l01D7_0294 l01D7_0272 l01D7_0272 l01D7_029E l01D7_02A8 l01D7_02AE l01D7_02B4 l01D7_02BE l01D7_0272 l01D7_02CC l01D7_0272 l01D7_0272 l01D7_02DA l01D7_02E0 l01D7_02E0 l01D7_02E0 l01D7_02E0 l01D7_02E0 l01D7_0272 l01D7_0272 l01D7_02E8 l01D7_02EE l01D7_02F4 l01D7_0272 l01D7_0272 l01D7_0302 l01D7_0272 l01D7_030E l01D7_0272 l01D7_0272 l01D7_0272 }
	// succ:  l01D7_024C l01D7_026A l01D7_0272 l01D7_0272 l01D7_028E l01D7_0294 l01D7_0272 l01D7_0272 l01D7_029E l01D7_02A8 l01D7_02AE l01D7_02B4 l01D7_02BE l01D7_0272 l01D7_02CC l01D7_0272 l01D7_0272 l01D7_02DA l01D7_02E0 l01D7_02E0 l01D7_02E0 l01D7_02E0 l01D7_02E0 l01D7_0272 l01D7_0272 l01D7_02E8 l01D7_02EE l01D7_02F4 l01D7_0272 l01D7_0272 l01D7_0302 l01D7_0272 l01D7_030E l01D7_0272 l01D7_0272 l01D7_0272
l01D7_024C:
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0008
	// succ:  l01D7_0257
l01D7_0257:
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01D7_025D
l01D7_025D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_070A (retsize: 4;)
	sp = sp + 0x000C
	// succ:  l01D7_0262_thunk_fn0177_C312
l01D7_0262_thunk_fn0177_C312:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  fn0177_C1FB_exit
l01D7_026A:
	sp = sp - 0x0002
	call fn01D7_0F68 (retsize: 2;)
	// succ:  l01D7_026A_thunk_fn0177_C312
l01D7_026A_thunk_fn0177_C312:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  fn0177_C1FB_exit
l01D7_0272:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(EQ,Z) l01D7_0282
	// succ:  l01D7_0279 l01D7_0282
l01D7_0279:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1E96 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l01D7_0282
l01D7_0282:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn01D7_07B4 (retsize: 2;)
	sp = sp + 0x0002
	ax = 0x0001
	// succ:  l01D7_0287_thunk_fn0177_C312
l01D7_0287_thunk_fn0177_C312:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  fn0177_C1FB_exit
l01D7_028E:
	sp = sp - 0x0002
	call fn01D7_11BC (retsize: 2;)
	// succ:  l01D7_028E_thunk_fn0177_C312
l01D7_028E_thunk_fn0177_C312:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  fn0177_C1FB_exit
l01D7_0294:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn01D7_0E90 (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l01D7_0297_thunk_fn0177_C312
l01D7_0297_thunk_fn0177_C312:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  fn0177_C1FB_exit
l01D7_029E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn01D7_1112 (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l01D7_02A1_thunk_fn0177_C312
l01D7_02A1_thunk_fn0177_C312:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  fn0177_C1FB_exit
l01D7_02A8:
	sp = sp - 0x0002
	call fn01D7_1036 (retsize: 2;)
	// succ:  l01D7_02A8_thunk_fn0177_C312
l01D7_02A8_thunk_fn0177_C312:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  fn0177_C1FB_exit
l01D7_02AE:
	sp = sp - 0x0002
	call fn01D7_1308 (retsize: 2;)
	// succ:  l01D7_02AE_thunk_fn0177_C312
l01D7_02AE_thunk_fn0177_C312:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  fn0177_C1FB_exit
l01D7_02B4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn01D7_116A (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l01D7_02B7_thunk_fn0177_C312
l01D7_02B7_thunk_fn0177_C312:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  fn0177_C1FB_exit
l01D7_02BE:
	ax = 0x0078
	// succ:  l01D7_02C1
l01D7_02C1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	goto l01D7_025D
	// succ:  l01D7_025D
l01D7_02CC:
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0028
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0010
	goto l01D7_0257
	// succ:  l01D7_0257
l01D7_02DA:
	sp = sp - 0x0002
	call fn01D7_136C (retsize: 2;)
	// succ:  l01D7_02DA_thunk_fn0177_C312
l01D7_02DA_thunk_fn0177_C312:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  fn0177_C1FB_exit
l01D7_02E0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn01D7_13A4 (retsize: 2;)
	sp = sp + 0x0002
	// succ:  l01D7_02E1_thunk_fn0177_C312
l01D7_02E1_thunk_fn0177_C312:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  fn0177_C1FB_exit
l01D7_02E8:
	sp = sp - 0x0002
	call fn01D7_1F96 (retsize: 2;)
l01D7_02EE:
	ax = 0x007E
	goto l01D7_02C1
	// succ:  l01D7_02C1
l01D7_02F4:
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0018
	goto l01D7_0257
	// succ:  l01D7_0257
l01D7_0302:
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	goto l01D7_0257
	// succ:  l01D7_0257
l01D7_030E:
	sp = sp - 0x0002
	call fn01D7_368C (retsize: 2;)
fn0177_C1FB_exit:


// fn0177_C2E9
// Return size: 0
void fn0177_C2E9()
fn0177_C2E9_entry:
	// succ:  l0177_C2E9
l0177_C2E9:
	sp = fp
	call fn01D7_1F96 (retsize: 2;)
	goto l0177_C2EC_thunk_fn0177_C312
	// succ:  l0177_C2EC_thunk_fn0177_C312
l0177_C2E9:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  l0177_C2E9_thunk_fn0177_C312 fn0177_C2E9_exit
l0177_C2E9_thunk_fn0177_C312:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  fn0177_C2E9_exit
l0177_C2EC_thunk_fn0177_C312:
	call fn0177_C312 (retsize: 0;)
	return
	// succ:  fn0177_C2E9_exit
fn0177_C2E9_exit:


// fn0177_C312
// Return size: 0
void fn0177_C312()
fn0177_C312_entry:
	// succ:  l01D7_0312
l01D7_0312:
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0644:word16]
	call fn0017_1E2E (retsize: 4;)
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01D7_0327
l01D7_0327:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_C312_exit
fn0177_C312_exit:


// fn01D7_0332
// Return size: 4
void fn01D7_0332()
fn01D7_0332_entry:
	// succ:  l01D7_0332
l01D7_0332:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ds:0x032E:word16]
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0066 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01D7_035E
	// succ:  l01D7_0355 l01D7_035E
l01D7_0355:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBeep(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l01D7_0491
	// succ:  l01D7_0491
l01D7_035E:
	ReleaseCapture()
	Mem0[ds:0x0098:word16] = 0x0000
	bx = Mem0[ds:0x0830:word16]
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0644:word16]
	call fn0017_1E2E (retsize: 4;)
	sp = sp + 0x0002
	ax = Mem0[ds:0x0830:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax - 0x0001
	SZO = cond(ax)
	SCZO = cond(ax - 0x0021)
	branch Test(ULE,CZ) l01D7_038D
	// succ:  l01D7_038A l01D7_038D
l01D7_038A:
	goto l01D7_046E
	// succ:  l01D7_046E
l01D7_038D:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v16 = ax
	ax = bx
	bx = v16
	switch (ax) { l01D7_03DA l01D7_03E8 l01D7_046E l01D7_046E l01D7_03F8 l01D7_0404 l01D7_046E l01D7_046E l01D7_046E l01D7_046E l01D7_046E l01D7_040A l01D7_046E l01D7_0410 l01D7_0416 l01D7_046E l01D7_046E l01D7_046E l01D7_046E l01D7_046E l01D7_046E l01D7_041C l01D7_0428 l01D7_046E l01D7_046E l01D7_046E l01D7_0434 l01D7_043A l01D7_046E l01D7_0440 l01D7_046E l01D7_044C l01D7_0458 l01D7_0464 }
	// succ:  l01D7_03DA l01D7_03E8 l01D7_046E l01D7_046E l01D7_03F8 l01D7_0404 l01D7_046E l01D7_046E l01D7_046E l01D7_046E l01D7_046E l01D7_040A l01D7_046E l01D7_0410 l01D7_0416 l01D7_046E l01D7_046E l01D7_046E l01D7_046E l01D7_046E l01D7_046E l01D7_041C l01D7_0428 l01D7_046E l01D7_046E l01D7_046E l01D7_0434 l01D7_043A l01D7_046E l01D7_0440 l01D7_046E l01D7_044C l01D7_0458 l01D7_0464
l01D7_03DA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	call fn01D7_0CAA (retsize: 2;)
	sp = sp + 0x0004
	goto l01D7_046E
	// succ:  l01D7_046E
l01D7_03E8:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01D7_03EA
l01D7_03EA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	call fn01D7_0808 (retsize: 2;)
	sp = sp + 0x0006
	goto l01D7_046E
	// succ:  l01D7_046E
l01D7_03F8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	call fn01D7_0E20 (retsize: 2;)
	sp = sp + 0x0004
	goto l01D7_046E
	// succ:  l01D7_046E
l01D7_0404:
	ax = 0x0001
	goto l01D7_03EA
	// succ:  l01D7_03EA
l01D7_040A:
	ax = 0x0004
	goto l01D7_03EA
	// succ:  l01D7_03EA
l01D7_0410:
	ax = 0x0003
	goto l01D7_03EA
	// succ:  l01D7_03EA
l01D7_0416:
	ax = 0x0002
	goto l01D7_03EA
	// succ:  l01D7_03EA
l01D7_041C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	call fn01D7_2FFE (retsize: 2;)
	sp = sp + 0x0004
	goto l01D7_046E
	// succ:  l01D7_046E
l01D7_0428:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	call fn01D7_313E (retsize: 2;)
	sp = sp + 0x0004
	goto l01D7_046E
	// succ:  l01D7_046E
l01D7_0434:
	ax = 0x0006
	goto l01D7_03EA
	// succ:  l01D7_03EA
l01D7_043A:
	ax = 0x0005
	goto l01D7_03EA
	// succ:  l01D7_03EA
l01D7_0440:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	call fn01D7_3266 (retsize: 2;)
	sp = sp + 0x0004
	goto l01D7_046E
	// succ:  l01D7_046E
l01D7_044C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	call fn01D7_33D2 (retsize: 2;)
	sp = sp + 0x0004
	goto l01D7_046E
	// succ:  l01D7_046E
l01D7_0458:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	call fn01D7_359C (retsize: 2;)
	sp = sp + 0x0004
	goto l01D7_046E
	// succ:  l01D7_046E
l01D7_0464:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	call fn01D7_34FA (retsize: 2;)
	sp = sp + 0x0004
l01D7_046E:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01D7_0485
	// succ:  l01D7_0472 l01D7_0485
l01D7_0472:
	ax = si
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_10B8 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0BB0 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l01D7_0485
l01D7_0485:
	Mem0[ds:0x032A:word16] = 0x0000
	Mem0[ds:0x0830:word16] = 0xFFFF
	// succ:  l01D7_0491
l01D7_0491:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_0332_exit
fn01D7_0332_exit:


// fn01D7_049A
// Return size: 4
void fn01D7_049A()
fn01D7_049A_entry:
	// succ:  l01D7_049A
l01D7_049A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0106
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0439
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0439
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0405
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	di = 0x063A
	Mem0[ss:bp - 0x0006:word16] = 0x0020
	Mem0[ss:bp - 0x0004:word16] = di
	si = di
	// succ:  l01D7_04E2
l01D7_04E2:
	al = Mem0[ss:bp + 0x0006:byte]
	SCZO = cond(Mem0[ds:si + 0x0005:byte] - al)
	branch Test(NE,Z) l01D7_053A
	// succ:  l01D7_04EA l01D7_053A
l01D7_04EA:
	SCZO = cond(Mem0[ds:si + 0x0004:byte] - 0xFF)
	branch Test(EQ,Z) l01D7_053A
	// succ:  l01D7_04F0 l01D7_053A
l01D7_04F0:
	SCZO = cond(Mem0[ds:si + 0x0004:byte] - 0xFE)
	branch Test(EQ,Z) l01D7_053A
	// succ:  l01D7_04F6 l01D7_053A
l01D7_04F6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	ax = bp - 0x0106
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	di = ax
	di = di - 0x0001
	SZO = cond(di)
	Mem0[ss:bp - 0x0106 + di:byte] = 0x09
	di = di + 0x0001
	SZO = cond(di)
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0106 + di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0004:byte]
	ax = (int16) al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_03FE (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0439
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0106
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	// succ:  l01D7_053A
l01D7_053A:
	si = si + 0x000C
	SCZO = cond(si)
	v15 = Mem0[ss:bp - 0x0006:word16] - 0x0001
	Mem0[ss:bp - 0x0006:word16] = v15
	SZO = cond(v15)
	branch Test(NE,Z) l01D7_04E2
	// succ:  l01D7_0542 l01D7_04E2
l01D7_0542:
	si = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0439
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0439
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_049A_exit
fn01D7_049A_exit:


// fn01D7_0580
// Return size: 4
void fn01D7_0580()
fn01D7_0580_entry:
	// succ:  l01D7_0580
l01D7_0580:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0104
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0373
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0004:word16] = ax
	si = si - si
	SCZO = cond(si)
	di = 0x081C
	// succ:  l01D7_05A6
l01D7_05A6:
	SCZO = cond(Mem0[ds:di:word16] - 0xFFFF)
	branch Test(NE,Z) l01D7_05B0
	// succ:  l01D7_05AB l01D7_05B0
l01D7_05AB:
	cx = 0x0372
	goto l01D7_05C0
	// succ:  l01D7_05C0
l01D7_05B0:
	bx = Mem0[ds:di:word16]
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	cx = Mem0[ds:bx + 0x063A:word16]
	// succ:  l01D7_05C0
l01D7_05C0:
	ax = Mem0[ss:bp - 0x0004:word16]
	dx = bp - 0x0105
	ax = ax + dx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x006D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x0439
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	si = si + 0x0001
	SZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - 0x0830)
	branch Test(ULT,C) l01D7_05A6
	// succ:  l01D7_05FC l01D7_05A6
l01D7_05FC:
	ax = 0x0372
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x043A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	si = 0x063A
	di = 0x0020
	// succ:  l01D7_0629
l01D7_0629:
	SCZO = cond(Mem0[ds:si + 0x0004:byte] - 0xFF)
	branch Test(EQ,Z) l01D7_065A
	// succ:  l01D7_062F l01D7_065A
l01D7_062F:
	SCZO = cond(Mem0[ds:si + 0x0004:byte] - 0xFE)
	branch Test(EQ,Z) l01D7_065A
	// succ:  l01D7_0635 l01D7_065A
l01D7_0635:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x043A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	// succ:  l01D7_065A
l01D7_065A:
	si = si + 0x000C
	SCZO = cond(si)
	di = di - 0x0001
	SZO = cond(di)
	branch Test(NE,Z) l01D7_0629
	// succ:  l01D7_0660 l01D7_0629
l01D7_0660:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_0580_exit
fn01D7_0580_exit:


// fn01D7_066C
// Return size: 0
void fn01D7_066C()
fn01D7_066C_entry:
	goto l01D7_066C
	// succ:  l01D7_066C
l0177_C6E9_in_fn01D7_066C:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_066C_exit
l0177_C6E9_in_fn01D7_066C:
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_066C_exit
l01D7_066C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0104
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x4D04:word16]
	ax = ax >> 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0003:byte] = al
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l01D7_068C
	// succ:  l01D7_0688 l01D7_068C
l01D7_0688:
	Mem0[ss:bp - 0x0003:byte] = 0x01
	// succ:  l01D7_068C
l01D7_068C:
	si = 0x063A
	di = di - di
	SCZO = cond(di)
	// succ:  l01D7_0691
l01D7_0691:
	al = Mem0[ss:bp - 0x0003:byte]
	SCZO = cond(Mem0[ds:si + 0x0002:byte] - al)
	branch Test(UGT,CZ) l01D7_06CD
	// succ:  l01D7_0699 l01D7_06CD
l01D7_0699:
	SCZO = cond(Mem0[ds:si + 0x0004:byte] - 0xFF)
	branch Test(NE,Z) l01D7_06C4
	// succ:  l01D7_069F l01D7_06C4
l01D7_069F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x00AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0401
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0104
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	// succ:  l01D7_06C4
l01D7_06C4:
	si = si + 0x000C
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - 0x0020)
	branch Test(LT,SO) l01D7_0691
	// succ:  l01D7_06CD l01D7_0691
l01D7_06CD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x00AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0407
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x00AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0407
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SendDlgItemMessage(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000C
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l0177_C6E9_in_fn01D7_066C l0177_C6E9_in_fn01D7_066C
fn01D7_066C_exit:


// fn01D7_0724
// Return size: 4
void fn01D7_0724()
fn01D7_0724_entry:
	// succ:  l01D7_0724
l01D7_0724:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cx = 0xFFFF
	bx = 0x063A
	dx = dx - dx
	SCZO = cond(dx)
	di = Mem0[ss:bp + 0x0006:word16]
	// succ:  l01D7_073D
l01D7_073D:
	SCZO = cond(Mem0[ds:bx + 0x0004:byte] - 0xFF)
	branch Test(EQ,Z) l01D7_074E
	// succ:  l01D7_0743 l01D7_074E
l01D7_0743:
	SCZO = cond(Mem0[ds:bx + 0x0004:byte] - 0xFE)
	branch Test(EQ,Z) l01D7_074E
	// succ:  l01D7_0749 l01D7_074E
l01D7_0749:
	cx = cx + 0x0001
	SZO = cond(cx)
	SCZO = cond(cx - di)
	branch Test(EQ,Z) l01D7_075A
	// succ:  l01D7_074E l01D7_075A
l01D7_074E:
	bx = bx + 0x000C
	SCZO = cond(bx)
	dx = dx + 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - 0x0020)
	branch Test(LT,SO) l01D7_073D
	// succ:  l01D7_0757 l01D7_073D
l01D7_0757:
	goto l01D7_075C
	// succ:  l01D7_075C
l01D7_075A:
	ax = dx
	// succ:  l01D7_075C
l01D7_075C:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_0724_exit
fn01D7_0724_exit:


// fn01D7_0768
// Return size: 0
void fn01D7_0768()
fn01D7_0768_entry:
	// succ:  l01D7_0768
l01D7_0768:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	dx = 0xFFFF
	bx = 0x063A
	cx = cx - cx
	SCZO = cond(cx)
	di = Mem0[ss:bp + 0x0008:word16]
	// succ:  l01D7_077E_thunk_fn01D7_0781
l01D7_077E_thunk_fn01D7_0781:
	call fn01D7_0781 (retsize: 0;)
	return
	// succ:  fn01D7_0768_exit
fn01D7_0768_exit:


// fn01D7_0781
// Return size: 0
void fn01D7_0781()
fn01D7_0781_entry:
	// succ:  l0177_C781
l0177_C781:
	di = di + 0x0001
	SZO = cond(di)
	ax = ax + 0x1275
	SCZO = cond(ax)
	SCZO = cond(Mem0[ds:bx + 0x0004:byte] - 0xFF)
	branch Test(EQ,Z) l0177_C79A
	// succ:  l0177_C78E l0177_C79A
l0177_C78E:
	SCZO = cond(Mem0[ds:bx + 0x0004:byte] - 0xFE)
	branch Test(EQ,Z) l0177_C79A
	// succ:  l0177_C794 l0177_C79A
l0177_C794:
	dx = dx + 0x0001
	SZO = cond(dx)
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - dx)
	branch Test(EQ,Z) l0177_C7A6
	// succ:  l0177_C79A l0177_C7A6
l0177_C79A:
	bx = bx + 0x000C
	SCZO = cond(bx)
	cx = cx + 0x0001
	SZO = cond(cx)
	SCZO = cond(cx - 0x0020)
	branch Test(LT,SO) l0177_C781
	// succ:  l0177_C7A3 l0177_C781
l0177_C7A3:
	goto l0177_C7A8
	// succ:  l0177_C7A8
l0177_C7A6:
	ax = cx
	// succ:  l0177_C7A8
l0177_C7A8:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_0781_exit
fn01D7_0781_exit:


// fn01D7_07B4
// Return size: 4
void fn01D7_07B4()
fn01D7_07B4_entry:
	goto l01D7_07B4
	// succ:  l01D7_07B4
l0177_C7FF:
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_07B4_exit
l01D7_07B4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x0206
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	ax = Mem0[ds:0x3D74:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x032A:word16] = 0x0029
	ax = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:0x0830:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	SetCapture(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x0098:word16] = 0x0006
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0252 (retsize: 4;)
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	goto l0177_C7FF
	// succ:  l0177_C7FF
fn01D7_07B4_exit:


// fn01D7_0808
// Return size: 4
void fn01D7_0808()
fn01D7_0808_entry:
	// succ:  l01D7_0808
l01D7_0808:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0116
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = bp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	call fn01D7_13FE (retsize: 2;)
	sp = sp + 0x0006
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	call fn01D7_1602 (retsize: 2;)
	sp = sp + 0x000A
	ax = Mem0[ss:bp + 0x000A:word16]
	SCZO = cond(ax - 0x0006)
	branch Test(UGT,CZ) l01D7_086A
	// succ:  l01D7_0853 l01D7_086A
l01D7_0853:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v16 = ax
	ax = bx
	bx = v16
	switch (ax) { l01D7_0870 l01D7_0884 l01D7_0898 l01D7_08AC l01D7_08BC l01D7_08CC l01D7_08DC }
	// succ:  l01D7_0870 l01D7_0884 l01D7_0898 l01D7_08AC l01D7_08BC l01D7_08CC l01D7_08DC
l01D7_086A:
	di = Mem0[ss:bp - 0x000E:word16]
	goto l01D7_08EE
	// succ:  l01D7_08EE
l01D7_0870:
	Mem0[ss:bp - 0x000A:word16] = 0x0006
	Mem0[ss:bp - 0x0010:word16] = 0x0000
	di = 0x01FE
	Mem0[ss:bp - 0x000C:word16] = 0x0013
	goto l01D7_08EE
	// succ:  l01D7_08EE
l01D7_0884:
	Mem0[ss:bp - 0x000A:word16] = 0x0008
	Mem0[ss:bp - 0x0010:word16] = 0x0000
	di = 0x020A
	// succ:  l01D7_0891
l01D7_0891:
	Mem0[ss:bp - 0x000C:word16] = 0x0002
	goto l01D7_08EE
	// succ:  l01D7_08EE
l01D7_0898:
	Mem0[ss:bp - 0x000A:word16] = 0x000A
	Mem0[ss:bp - 0x0010:word16] = 0x0000
	di = 0x020B
	// succ:  l01D7_08A5
l01D7_08A5:
	Mem0[ss:bp - 0x000C:word16] = 0x0004
	goto l01D7_08EE
	// succ:  l01D7_08EE
l01D7_08AC:
	Mem0[ss:bp - 0x000A:word16] = 0x000C
	Mem0[ss:bp - 0x0010:word16] = 0x0000
	di = 0x020C
	goto l01D7_08E9
	// succ:  l01D7_08E9
l01D7_08BC:
	Mem0[ss:bp - 0x000A:word16] = 0x0010
	Mem0[ss:bp - 0x0010:word16] = 0x0008
	di = 0x020D
	goto l01D7_0891
	// succ:  l01D7_0891
l01D7_08CC:
	Mem0[ss:bp - 0x000A:word16] = 0x0012
	Mem0[ss:bp - 0x0010:word16] = 0x0009
	di = 0x020E
	goto l01D7_08A5
	// succ:  l01D7_08A5
l01D7_08DC:
	Mem0[ss:bp - 0x000A:word16] = 0x0014
	Mem0[ss:bp - 0x0010:word16] = 0x000A
	di = 0x020F
	// succ:  l01D7_08E9
l01D7_08E9:
	Mem0[ss:bp - 0x000C:word16] = 0x0001
	// succ:  l01D7_08EE
l01D7_08EE:
	cl = 0x06
	si = Mem0[ss:bp + 0x0008:word16]
	si = si << cl
	SCZO = cond(si)
	si = si + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(si)
	// succ:  l01D7_08F5_thunk_fn0177_C8F6
l01D7_08F5_thunk_fn0177_C8F6:
	call fn0177_C8F6 (retsize: 0;)
	return
	// succ:  fn01D7_0808_exit
fn01D7_0808_exit:


// fn0177_C8F6
// Return size: 0
void fn0177_C8F6()
fn0177_C8F6_entry:
	// succ:  l0177_C8F6
l0177_C8F6:
	sp = fp
	branch Test(ULE,CZ) l0177_C8FE
	goto l0177_C8F8
	// succ:  l0177_C8F8 l0177_C8FE
l0177_C8F6:
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0CE2
	SCZO = cond(si)
	al = Mem0[ds:si + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01D7_0911
	goto l0177_C90A_thunk_fn0177_C90E
	// succ:  l0177_C90A_thunk_fn0177_C90E l0177_C90A_thunk_fn0177_C911
l0177_C8F8:
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	// succ:  l0177_C8FE
l0177_C8FE:
	si = si + 0x0CE2
	SCZO = cond(si)
	al = Mem0[ds:si + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_C90C_thunk_fn0177_C911
	goto l0177_C90C_thunk_fn0177_C90E
	// succ:  l0177_C90C_thunk_fn0177_C90E l0177_C90C_thunk_fn0177_C911
l0177_C90A_thunk_fn0177_C90E:
	call fn0177_C90E (retsize: 0;)
	return
	// succ:  fn0177_C8F6_exit
l0177_C90A_thunk_fn0177_C911:
	call fn0177_C911 (retsize: 0;)
	return
	// succ:  fn0177_C8F6_exit
l0177_C90C_thunk_fn0177_C90E:
	call fn0177_C90E (retsize: 0;)
	return
	// succ:  fn0177_C8F6_exit l0177_C90C_thunk_fn0177_C90E
l0177_C90C_thunk_fn0177_C90E:
	call fn0177_C90E (retsize: 0;)
	return
	// succ:  fn0177_C8F6_exit
l0177_C90C_thunk_fn0177_C911:
	call fn0177_C911 (retsize: 0;)
	return
	// succ:  fn0177_C8F6_exit
fn0177_C8F6_exit:


// fn0177_C90E
// Return size: 0
void fn0177_C90E()
fn0177_C90E_entry:
	// succ:  l01D7_090E
l01D7_090E:
	call fn0177_C911 (retsize: 0;)
	return
	// succ:  l01D7_0A56 fn0177_C90E_exit
l01D7_0A56:
	SCZO = cond(Mem0[ds:si:byte] - 0x10)
	branch Test(NE,Z) l01D7_0AB0
	// succ:  l01D7_0A5B l01D7_0AB0
l01D7_0A5B:
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - 0x0000)
	branch Test(NE,Z) l01D7_0A6C
	// succ:  l01D7_0A61 l01D7_0A6C
l01D7_0A61:
	ax = bp - 0x0114
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0070
	goto l01D7_0AC8
	// succ:  l01D7_0AC8
l01D7_0A6C:
	ax = bp - 0x0114
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x006F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	ah = Mem0[ds:si + 0x0001:byte]
	ax = ax & 0x0400
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	al = al & 0xE5
	SZO = cond(al)
	C = false
	ax = ax + 0x0045
	SCZO = cond(ax)
	ah = Mem0[ds:si + 0x0001:byte]
	Mem0[ds:si:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	goto l01D7_0ADE
	// succ:  l01D7_0ADE
l01D7_0AB0:
	SCZO = cond(Mem0[ds:si:byte] - 0x00)
	branch Test(NE,Z) l01D7_0AC0
	// succ:  l01D7_0AB5 l01D7_0AC0
l01D7_0AB5:
	ax = bp - 0x0114
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0025
	goto l01D7_0AC8
	// succ:  l01D7_0AC8
l01D7_0AC0:
	ax = bp - 0x0114
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0026
	// succ:  l01D7_0AC8
l01D7_0AC8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l01D7_0ADE
l01D7_0ADE:
	Mem0[ss:bp - 0x000E:word16] = di
	SCZO = cond(Mem0[ss:bp - 0x0010:word16] - 0x0000)
	branch Test(NE,Z) l01D7_0AEA
	// succ:  l01D7_0AE7 l01D7_0AEA
l01D7_0AE7:
	goto l01D7_0C9D
	// succ:  l01D7_0C9D
l01D7_0AEA:
	Mem0[ss:bp - 0x000A:word16] = 0x0001
	// succ:  l01D7_0AEF
l01D7_0AEF:
	ax = bp - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn00F7_11AE (retsize: 4;)
	sp = sp + 0x000A
	cl = 0x06
	bx = Mem0[ss:bp - 0x0012:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp - 0x0014:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l01D7_0B24
	// succ:  l01D7_0B21 l01D7_0B24
l01D7_0B21:
	goto l01D7_0BED
	// succ:  l01D7_0BED
l01D7_0B24:
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	si = Mem0[ds:bx + 0x4960:word16]
	bx = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l01D7_0B36
	// succ:  l01D7_0B33 l01D7_0B36
l01D7_0B33:
	goto l01D7_0BED
	// succ:  l01D7_0BED
l01D7_0B36:
	ax = bp - 0x0114
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0024
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	bx = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = ax
	al = Mem0[ds:bx + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	Mem0[ss:bp - 0x0116:word16] = bx
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	bx = Mem0[ss:bp - 0x0116:word16]
	al = Mem0[ds:bx + 0x000A:byte]
	ax = ax & 0x0080
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	call fn018F_3108 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_0BA5
	// succ:  l01D7_0B93 l01D7_0BA5
l01D7_0B93:
	bx = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_07A4 (retsize: 4;)
	sp = sp + 0x000A
	// succ:  l01D7_0BA5
l01D7_0BA5:
	bx = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00BF_149E (retsize: 4;)
	sp = sp + 0x000A
	bx = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l01D7_0BED
	// succ:  l01D7_0BC8 l01D7_0BED
l01D7_0BC8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	call fn0177_1A2A (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_0BED
	// succ:  l01D7_0BD2 l01D7_0BED
l01D7_0BD2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn0177_0196 (retsize: 4;)
	sp = sp + 0x0002
	cl = 0x06
	bx = Mem0[ss:bp - 0x0012:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp - 0x0014:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	Mem0[ds:bx + 0x0CE4:byte] = 0x00
	// succ:  l01D7_0BED
l01D7_0BED:
	v18 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v18
	SZO = cond(v18)
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0008)
	branch Test(GT,SZO) l01D7_0BF9
	// succ:  l01D7_0BF6 l01D7_0BF9
l01D7_0BF6:
	goto l01D7_0AEF
	// succ:  l01D7_0AEF
l01D7_0BF9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn00F7_02D2 (retsize: 4;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01D7_0C0B
	// succ:  l01D7_0C08 l01D7_0C0B
l01D7_0C08:
	goto l01D7_0C9D
	// succ:  l01D7_0C9D
l01D7_0C0B:
	si = Mem0[ss:bp - 0x000C:word16]
	ax = bp - 0x0114
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x002B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn018F_2710 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_0C46
	// succ:  l01D7_0C38 l01D7_0C46
l01D7_0C38:
	ax = 0x0159
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	goto l01D7_0C9D
	// succ:  l01D7_0C9D
l01D7_0C46:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn018F_30E6 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax + 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01D7_0C78
	// succ:  l01D7_0C52 l01D7_0C78
l01D7_0C52:
	bx = Mem0[ss:bp - 0x0004:word16]
	bx = bx << 0x0001
	SCZO = cond(bx)
	si = Mem0[ds:bx + 0x4918:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01D7_0C78
	// succ:  l01D7_0C5F l01D7_0C78
l01D7_0C5F:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(LE,SZO) l01D7_0C7E
	// succ:  l01D7_0C63 l01D7_0C7E
l01D7_0C63:
	di = Mem0[ss:bp - 0x0010:word16]
	ax = 0x0159
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	cx = si
	di = di >> cl
	SCZO = cond(di)
	goto l01D7_0C93
	// succ:  l01D7_0C93
l01D7_0C78:
	di = Mem0[ss:bp - 0x0010:word16]
	goto l01D7_0C93
	// succ:  l01D7_0C93
l01D7_0C7E:
	di = Mem0[ss:bp - 0x0010:word16]
	ax = 0x0316
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	cx = si
	cl = -cl
	SCZO = cond(cl)
	C = cl == 0x00
	di = di << cl
	SCZO = cond(di)
	// succ:  l01D7_0C93
l01D7_0C93:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0210
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_268A (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l01D7_0C9D
l01D7_0C9D:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_C90E_exit
fn0177_C90E_exit:


// fn0177_C911
// Return size: 0
void fn0177_C911()
fn0177_C911_entry:
	// succ:  l01D7_0911
l01D7_0911:
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = Mem0[ds:bx + 0x4960:word16]
	Mem0[ss:bp - 0x0004:word16] = bx
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l01D7_0926
	// succ:  l01D7_0923 l01D7_0926
l01D7_0923:
	call fn0177_C90E (retsize: 0;)
	return
	// succ:  l01D7_0A56 fn0177_C911_exit
l01D7_0926:
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn00F7_1178 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0006:word16] = ax
	bx = Mem0[ss:bp - 0x0004:word16]
	bx = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0005)
	branch Test(GT,SZO) l01D7_0953
	// succ:  l01D7_0950 l01D7_0953
l01D7_0950:
	goto l01D7_09D4
	// succ:  l01D7_09D4
l01D7_0953:
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	cx = Mem0[ss:bp - 0x0006:word16]
	cx = cx - 0x0005
	SCZO = cond(cx)
	dx = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + dx
	SCZO = cond(cx)
	SCZO = cond(cx - ax)
	branch Test(LE,SZO) l01D7_09D4
	// succ:  l01D7_096E l01D7_09D4
l01D7_096E:
	SCZO = cond(Mem0[ss:bp - 0x0010:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_0998
	// succ:  l01D7_0974 l01D7_0998
l01D7_0974:
	ax = Mem0[ss:bp - 0x0010:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = bp - 0x0114
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00D6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	// succ:  l01D7_0992_thunk_fn0177_C9FD
l01D7_0992_thunk_fn0177_C9FD:
	call fn0177_C9FD (retsize: 0;)
	return
	// succ:  fn0177_C911_exit
l01D7_0998:
	ax = bp - 0x0114
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00D7
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	al = Mem0[ds:si + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	bx = Mem0[ss:bp - 0x0004:word16]
	bx = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01D7_09CB_thunk_fn0177_C90E
l01D7_09CB_thunk_fn0177_C90E:
	call fn0177_C90E (retsize: 0;)
	return
	// succ:  fn0177_C911_exit
l01D7_09D4:
	al = Mem0[ds:si + 0x000A:byte]
	ax = ax & 0x0080
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = bp - 0x0114
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0024
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	al = Mem0[ds:si + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01D7_09F4_thunk_fn0177_C9F6
l01D7_09F4_thunk_fn0177_C9F6:
	call fn0177_C9F6 (retsize: 0;)
	return
	// succ:  fn0177_C911_exit
fn0177_C911_exit:


// fn0177_C9F6
// Return size: 0
void fn0177_C9F6()
fn0177_C9F6_entry:
	// succ:  l0177_C9F6
l0177_C9F6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0177_C9FC_thunk_fn0177_C9FD
	// succ:  l0177_C9FC_thunk_fn0177_C9FD
l0177_C9F6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0177_C9FC_thunk_fn0177_C9FD
	// succ:  l0177_C9FC_thunk_fn0177_C9FD
l0177_C9FC_thunk_fn0177_C9FD:
	call fn0177_C9FD (retsize: 0;)
	return
	// succ:  fn0177_C9F6_exit
l0177_C9FC_thunk_fn0177_C9FD:
	call fn0177_C9FD (retsize: 0;)
	return
	// succ:  fn0177_C9F6_exit
fn0177_C9F6_exit:


// fn0177_C9FD
// Return size: 0
void fn0177_C9FD()
fn0177_C9FD_entry:
	// succ:  l01D7_09FD
l01D7_09FD:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn018F_3108 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_0A31
	// succ:  l01D7_0A1C l01D7_0A31
l01D7_0A1C:
	bx = Mem0[ss:bp - 0x0004:word16]
	bx = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_07A4 (retsize: 4;)
	sp = sp + 0x000A
	// succ:  l01D7_0A31
l01D7_0A31:
	bx = Mem0[ss:bp - 0x0004:word16]
	si = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00BF_149E (retsize: 4;)
	sp = sp + 0x000A
	// succ:  l01D7_0A4D_thunk_fn0177_C90E
l01D7_0A4D_thunk_fn0177_C90E:
	call fn0177_C90E (retsize: 0;)
	return
	// succ:  fn0177_C9FD_exit
fn0177_C9FD_exit:


// fn01D7_0CAA
// Return size: 4
void fn01D7_0CAA()
fn01D7_0CAA_entry:
	// succ:  l01D7_0CAA
l01D7_0CAA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0014
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = bp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	call fn01D7_13FE (retsize: 2;)
	sp = sp + 0x0006
	cl = 0x06
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0CE3:byte] & 0x20)
	C = false
	branch Test(EQ,Z) l01D7_0D38
	// succ:  l01D7_0CEB l01D7_0D38
l01D7_0CEB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn01BF_19EA (retsize: 4;)
	sp = sp + 0x0004
	cl = 0x06
	bl = Mem0[ds:0x4D1C:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx << cl
	SCZO = cond(bx)
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	bx = bx + ax
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	SZO = cond(Mem0[ds:bx + 0x0CE3:byte] & 0x08)
	C = false
	branch Test(NE,Z) l01D7_0D17
	// succ:  l01D7_0D14 l01D7_0D17
l01D7_0D14:
	goto l01D7_0E06
	// succ:  l01D7_0E06
l01D7_0D17:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1776 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	goto l01D7_0E06
	// succ:  l01D7_0E06
l01D7_0D38:
	di = Mem0[ss:bp + 0x0008:word16]
	di = di + 0x0001
	SZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	di = di - Mem0[ds:0x0480:word16]
	SCZO = cond(di)
	ax = ax - ax - C
	SCZO = cond(ax)
	di = di & ax
	SZO = cond(di)
	C = false
	di = di + Mem0[ds:0x0480:word16]
	SCZO = cond(di)
	dx = Mem0[ss:bp + 0x0006:word16]
	dx = dx + 0x0001
	SZO = cond(dx)
	dx = dx + 0x0001
	SZO = cond(dx)
	dx = dx - Mem0[ds:0x0482:word16]
	SCZO = cond(dx)
	ax = ax - ax - C
	SCZO = cond(ax)
	dx = dx & ax
	SZO = cond(dx)
	C = false
	dx = dx + Mem0[ds:0x0482:word16]
	SCZO = cond(dx)
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(NE,Z) l01D7_0D68
	// succ:  l01D7_0D60 l01D7_0D68
l01D7_0D60:
	Mem0[ss:bp - 0x000C:word16] = 0x0000
	goto l01D7_0D6F
	// succ:  l01D7_0D6F
l01D7_0D68:
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	// succ:  l01D7_0D6F
l01D7_0D6F:
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(NE,Z) l01D7_0D7A
	// succ:  l01D7_0D75 l01D7_0D7A
l01D7_0D75:
	bx = bx - bx
	SCZO = cond(bx)
	goto l01D7_0D7E
	// succ:  l01D7_0D7E
l01D7_0D7A:
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = bx - 0x0001
	SZO = cond(bx)
	// succ:  l01D7_0D7E
l01D7_0D7E:
	SCZO = cond(di - bx)
	branch Test(GT,SZO) l01D7_0D85
	// succ:  l01D7_0D82 l01D7_0D85
l01D7_0D82:
	goto l01D7_0E06
	// succ:  l01D7_0E06
l01D7_0D85:
	cl = 0x06
	ax = bx
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = di
	ax = ax - bx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000E:word16] = ax
	Mem0[ss:bp - 0x0010:word16] = dx
	// succ:  l01D7_0D98
l01D7_0D98:
	di = Mem0[ss:bp - 0x0010:word16]
	bx = Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(bx - di)
	branch Test(GE,SO) l01D7_0DFD
	// succ:  l01D7_0DA2 l01D7_0DFD
l01D7_0DA2:
	ax = Mem0[ss:bp - 0x000A:word16]
	ax = ax + bx
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = di
	ax = ax - bx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	di = Mem0[ss:bp - 0x0004:word16]
	// succ:  l01D7_0DBD
l01D7_0DBD:
	si = di
	SCZO = cond(Mem0[ds:si:byte] - 0x01)
	branch Test(NE,Z) l01D7_0DCC
	// succ:  l01D7_0DC4 l01D7_0DCC
l01D7_0DC4:
	ax = Mem0[ds:si:word16]
	al = al & 0x02
	SZO = cond(al)
	C = false
	al = al | 0x02
	SZO = cond(al)
	C = false
	goto l01D7_0DEF
	// succ:  l01D7_0DEF
l01D7_0DCC:
	SCZO = cond(Mem0[ds:si:byte] - 0x0A)
	branch Test(NE,Z) l01D7_0DDA
	// succ:  l01D7_0DD1 l01D7_0DDA
l01D7_0DD1:
	ax = Mem0[ds:si:word16]
	al = al & 0x0B
	SZO = cond(al)
	C = false
	al = al | 0x0B
	SZO = cond(al)
	C = false
	goto l01D7_0DEF
	// succ:  l01D7_0DEF
l01D7_0DDA:
	al = Mem0[ds:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2236 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_0DF1
	// succ:  l01D7_0DE8 l01D7_0DF1
l01D7_0DE8:
	al = Mem0[ds:si:byte]
	al = al + 0x1B
	SCZO = cond(al)
	ah = Mem0[ds:si + 0x0001:byte]
	// succ:  l01D7_0DEF
l01D7_0DEF:
	Mem0[ds:si:word16] = ax
	// succ:  l01D7_0DF1
l01D7_0DF1:
	v24 = Mem0[ds:si + 0x0001:byte] | 0x06
	Mem0[ds:si + 0x0001:byte] = v24
	SZO = cond(Mem0[ds:si + 0x0001:byte])
	C = false
	di = di + 0x0003
	SCZO = cond(di)
	v25 = Mem0[ss:bp - 0x0006:word16] - 0x0001
	Mem0[ss:bp - 0x0006:word16] = v25
	SZO = cond(v25)
	branch Test(NE,Z) l01D7_0DBD
	// succ:  l01D7_0DFD l01D7_0DBD
l01D7_0DFD:
	v22 = Mem0[ss:bp - 0x000A:word16] + 0x0040
	Mem0[ss:bp - 0x000A:word16] = v22
	SCZO = cond(v22)
	v23 = Mem0[ss:bp - 0x000E:word16] - 0x0001
	Mem0[ss:bp - 0x000E:word16] = v23
	SZO = cond(v23)
	branch Test(NE,Z) l01D7_0D98
	v26 = Mem0[ss:bp - 0x000A:word16] + 0x0040
	Mem0[ss:bp - 0x000A:word16] = v26
	SCZO = cond(v26)
	v27 = Mem0[ss:bp - 0x000E:word16] - 0x0001
	Mem0[ss:bp - 0x000E:word16] = v27
	SZO = cond(v27)
	branch Test(NE,Z) l01D7_0D98
	// succ:  l01D7_0E06 l01D7_0D98
l01D7_0E06:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_0CAA_exit fn01D7_0CAA_exit fn01D7_0CAA_exit
fn01D7_0CAA_exit:


// fn01D7_0E20
// Return size: 4
void fn01D7_0E20()
fn01D7_0E20_entry:
	goto l01D7_0E20
	// succ:  l01D7_0E20
l0177_CE8B:
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_0E20_exit
l01D7_0E20:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	si = Mem0[ss:bp + 0x0006:word16]
	ax = di - 0x0005
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l01D7_0E3E
	// succ:  l01D7_0E3C l01D7_0E3E
l01D7_0E3C:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01D7_0E3E
l01D7_0E3E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si - 0x0005
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l01D7_0E48
	// succ:  l01D7_0E46 l01D7_0E48
l01D7_0E46:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01D7_0E48
l01D7_0E48:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = di + 0x0005
	SCZO = cond(ax - Mem0[ds:0x0480:word16])
	branch Test(LE,SZO) l01D7_0E55
	// succ:  l01D7_0E52 l01D7_0E55
l01D7_0E52:
	ax = Mem0[ds:0x0480:word16]
	// succ:  l01D7_0E55
l01D7_0E55:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x0005
	SCZO = cond(ax - Mem0[ds:0x0482:word16])
	branch Test(LE,SZO) l01D7_0E62
	// succ:  l01D7_0E5F l01D7_0E62
l01D7_0E5F:
	ax = Mem0[ds:0x0482:word16]
	// succ:  l01D7_0E62
l01D7_0E62:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_2F12 (retsize: 2;)
	sp = sp + 0x000A
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = 0x039C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	goto l0177_CE8B
	// succ:  l0177_CE8B
fn01D7_0E20_exit:


// fn01D7_0E90
// Return size: 4
void fn01D7_0E90()
fn01D7_0E90_entry:
	// succ:  l01D7_0E90
l01D7_0E90:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = cx - cx
	SCZO = cond(cx)
	SCZO = cond(Mem0[ds:0x4E1E:word16] - cx)
	branch Test(EQ,Z) l01D7_0EB8
	// succ:  l01D7_0EA7 l01D7_0EB8
l01D7_0EA7:
	SCZO = cond(Mem0[ds:0x4E20:word16] - 0x0003)
	branch Test(NE,Z) l01D7_0EB8
	// succ:  l01D7_0EAE l01D7_0EB8
l01D7_0EAE:
	SCZO = cond(Mem0[ds:0x4E22:word16] - 0xFFFA)
	branch Test(NE,Z) l01D7_0EB8
	// succ:  l01D7_0EB5 l01D7_0EB8
l01D7_0EB5:
	cx = 0x0001
	// succ:  l01D7_0EB8
l01D7_0EB8:
	SCZO = cond(Mem0[ds:0x4CE6:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_0EFD
	goto l01D7_0EBF
	// succ:  l01D7_0EBF l01D7_0EBD_thunk_fn0177_CEE9
l01D7_0EBD_thunk_fn0177_CEE9:
	call fn0177_CEE9 (retsize: 0;)
	return
	// succ:  fn01D7_0E90_exit
l01D7_0EBF:
	si = Mem0[ds:0x4CE6:word16]
	ax = Mem0[ds:si:word16]
	dx = ax
	ax = ax + 0x0004
	SCZO = cond(ax)
	bx = ax
	si = dx
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ds:si:word16]
	si = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + si
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	dx = dx + ax
	SCZO = cond(dx)
	dx = dx + 0x0004
	SCZO = cond(dx)
	di = dx
	SCZO = cond(dx - Mem0[ss:bp - 0x0006:word16])
	branch Test(ULE,CZ) l01D7_0EFD
	// succ:  l01D7_0EE7_thunk_fn0177_CEE9 l01D7_0EE7_thunk_fn0177_CEE9
l01D7_0EE7_thunk_fn0177_CEE9:
	call fn0177_CEE9 (retsize: 0;)
	return
	// succ:  fn01D7_0E90_exit
l01D7_0EE7_thunk_fn0177_CEE9:
	call fn0177_CEE9 (retsize: 0;)
	return
	// succ:  fn01D7_0E90_exit
fn01D7_0E90_exit:


// fn0177_CEE9
// Return size: 0
void fn0177_CEE9()
fn0177_CEE9_entry:
	// succ:  l01D7_0EE9
l01D7_0EE9:
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0003)
	branch Test(NE,Z) l01D7_0EF6
	// succ:  l01D7_0EEF l01D7_0EF6
l01D7_0EEF:
	SCZO = cond(Mem0[ds:bx + 0x0004:word16] - 0xFFFA)
	branch Test(NE,Z) l01D7_0EF6
	// succ:  l01D7_0EF5 l01D7_0EF6
l01D7_0EF5:
	cx = cx + 0x0001
	SZO = cond(cx)
	// succ:  l01D7_0EF6
l01D7_0EF6:
	bx = bx + 0x000A
	SCZO = cond(bx)
	SCZO = cond(bx - di)
	branch Test(ULT,C) l01D7_0EE9
	// succ:  l01D7_0EFD l01D7_0EE9
l01D7_0EFD:
	SCZO = cond(cx - 0x0005)
	branch Test(GE,SO) l01D7_0F4E
	SCZO = cond(cx - 0x0005)
	branch Test(GE,SO) l01D7_0F4E
	// succ:  l01D7_0F00_thunk_fn0177_CF02 l01D7_0F4E
l01D7_0F00_thunk_fn0177_CF02:
	call fn0177_CF02 (retsize: 0;)
	return
	// succ:  fn0177_CEE9_exit
l01D7_0F4E:
	ax = 0x013C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l01D7_0F56_thunk_fn0177_CF02
l01D7_0F56_thunk_fn0177_CF02:
	call fn0177_CF02 (retsize: 0;)
	return
	// succ:  fn0177_CEE9_exit
fn0177_CEE9_exit:


// fn0177_CF02
// Return size: 0
void fn0177_CF02()
fn0177_CF02_entry:
	call fn0177_CEE9 (retsize: 0;)
	return
	// succ:  l01D7_0F02 fn0177_CF02_exit
l01D7_0F02:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_228A (retsize: 2;)
	sp = sp + 0x0004
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_118E (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_0F34
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_228A (retsize: 2;)
	sp = sp + 0x0004
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_118E (retsize: 4;)
	sp = sp + 0x0008
	ax = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_0F34
	// succ:  l01D7_0F2F l01D7_0F34
l01D7_0F2F:
	ax = Mem0[ds:0x4D04:word16]
	ax = Mem0[ds:0x4D04:word16]
	goto l01D7_0F36
	// succ:  l01D7_0F36
l01D7_0F34:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01D7_0F36
l01D7_0F36:
	ax = ax + 0x000A
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	// succ:  l01D7_0F5B
l01D7_0F5B:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_CF02_exit
fn0177_CF02_exit:


// fn01D7_0F68
// Return size: 4
void fn01D7_0F68()
fn01D7_0F68_entry:
	// succ:  l01D7_0F68
l01D7_0F68:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cl = 0x05
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + 0x0010
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + 0x0010
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_2096 (retsize: 2;)
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x0480:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_1012
	// succ:  l01D7_0FAB l01D7_1012
l01D7_0FAB:
	dx = 0x0CE2
	// succ:  l01D7_0FAE
l01D7_0FAE:
	si = dx
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x0482:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_1003
	// succ:  l01D7_0FBC l01D7_1003
l01D7_0FBC:
	Mem0[ss:bp - 0x0008:word16] = dx
	// succ:  l01D7_0FBF
l01D7_0FBF:
	al = Mem0[ds:si + 0x0002:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01D7_0FF2
	// succ:  l01D7_0FCA l01D7_0FF2
l01D7_0FCA:
	bx = di
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + 0x4960
	SCZO = cond(bx)
	Mem0[ss:bp - 0x000A:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	bx = ax
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_0FE8
	// succ:  l01D7_0FE4 l01D7_0FE8
l01D7_0FE4:
	v18 = Mem0[ds:si + 0x0001:byte] | 0x02
	Mem0[ds:si + 0x0001:byte] = v18
	SZO = cond(Mem0[ds:si + 0x0001:byte])
	C = false
	// succ:  l01D7_0FE8
l01D7_0FE8:
	bx = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01D7_0FF2
l01D7_0FF2:
	si = si + 0x0003
	SCZO = cond(si)
	ax = Mem0[ds:0x0482:word16]
	v19 = Mem0[ss:bp - 0x0004:word16] + 0x0001
	Mem0[ss:bp - 0x0004:word16] = v19
	SZO = cond(v19)
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - ax)
	branch Test(ULT,C) l01D7_0FBF
	// succ:  l01D7_1000 l01D7_0FBF
l01D7_1000:
	dx = Mem0[ss:bp - 0x0008:word16]
	// succ:  l01D7_1003
l01D7_1003:
	dx = dx + 0x00C0
	SCZO = cond(dx)
	ax = Mem0[ds:0x0480:word16]
	v20 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v20
	SZO = cond(v20)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULT,C) l01D7_0FAE
	// succ:  l01D7_1012 l01D7_0FAE
l01D7_1012:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = 0x0379
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = 0x0379
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_0F68_exit fn01D7_0F68_exit
fn01D7_0F68_exit:


// fn01D7_1036
// Return size: 4
void fn01D7_1036()
fn01D7_1036_entry:
	goto l01D7_1036
	// succ:  l01D7_1036
l0177_D10E:
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_1036_exit fn01D7_1036_exit
l01D7_1036:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cl = 0x05
	al = Mem0[ds:0x4D1D:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + 0x0010
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + 0x0010
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_2096 (retsize: 2;)
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	SCZO = cond(Mem0[ds:0x0480:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_10EC
	// succ:  l01D7_1079 l01D7_10EC
l01D7_1079:
	dx = 0x0CE2
	// succ:  l01D7_107C
l01D7_107C:
	si = dx
	di = di - di
	SCZO = cond(di)
	SCZO = cond(Mem0[ds:0x0482:word16] - di)
	branch Test(EQ,Z) l01D7_10DD
	// succ:  l01D7_1086 l01D7_10DD
l01D7_1086:
	Mem0[ss:bp - 0x0008:word16] = dx
	// succ:  l01D7_1089
l01D7_1089:
	al = Mem0[ds:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2210 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - 0x000B)
	branch Test(NE,Z) l01D7_10D0
	// succ:  l01D7_1098 l01D7_10D0
l01D7_1098:
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1178 (retsize: 4;)
	sp = sp + 0x0008
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(ax - 0x000A)
	branch Test(ULE,CZ) l01D7_10C8
	// succ:  l01D7_10B3 l01D7_10C8
l01D7_10B3:
	ax = 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	cx = Mem0[ss:bp - 0x0004:word16]
	cx = cx - 0x000A
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	SCZO = cond(ax - cx)
	branch Test(ULE,CZ) l01D7_10D0
	// succ:  l01D7_10C8 l01D7_10D0
l01D7_10C8:
	v18 = Mem0[ds:si + 0x0001:byte] | 0x02
	Mem0[ds:si + 0x0001:byte] = v18
	SZO = cond(Mem0[ds:si + 0x0001:byte])
	C = false
	v20 = Mem0[ds:si + 0x0001:byte] & 0xEF
	Mem0[ds:si + 0x0001:byte] = v20
	SZO = cond(Mem0[ds:si + 0x0001:byte])
	C = false
	// succ:  l01D7_10D0
l01D7_10D0:
	si = si + 0x0003
	SCZO = cond(si)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(Mem0[ds:0x0482:word16] - di)
	branch Test(UGT,CZ) l01D7_1089
	// succ:  l01D7_10DA l01D7_1089
l01D7_10DA:
	dx = Mem0[ss:bp - 0x0008:word16]
	// succ:  l01D7_10DD
l01D7_10DD:
	dx = dx + 0x00C0
	SCZO = cond(dx)
	ax = Mem0[ds:0x0480:word16]
	v21 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v21
	SZO = cond(v21)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULT,C) l01D7_107C
	// succ:  l01D7_10EC l01D7_107C
l01D7_10EC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = 0x037A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = 0x037A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	goto l0177_D10E
	// succ:  l0177_D10E
fn01D7_1036_exit:


// fn01D7_1112
// Return size: 4
void fn01D7_1112()
fn01D7_1112_entry:
	// succ:  l01D7_1112
l01D7_1112:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x005D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0167_070A (retsize: 4;)
	sp = sp + 0x000C
	ax = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_1148
	// succ:  l01D7_1143 l01D7_1148
l01D7_1143:
	ax = Mem0[ds:0x4D04:word16]
	goto l01D7_114A
	// succ:  l01D7_114A
l01D7_1148:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01D7_114A
l01D7_114A:
	ax = ax + 0x000F
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x005D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_1112_exit
fn01D7_1112_exit:


// fn01D7_116A
// Return size: 4
void fn01D7_116A()
fn01D7_116A_entry:
	// succ:  l01D7_116A
l01D7_116A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	ax = 0x000B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_146C (retsize: 4;)
	sp = sp + 0x0006
	ax = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_119A
	// succ:  l01D7_1195 l01D7_119A
l01D7_1195:
	ax = Mem0[ds:0x4D04:word16]
	goto l01D7_119C
	// succ:  l01D7_119C
l01D7_119A:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01D7_119C
l01D7_119C:
	ax = ax + 0x000F
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_116A_exit
fn01D7_116A_exit:


// fn01D7_11BC
// Return size: 4
void fn01D7_11BC()
fn01D7_11BC_entry:
	// succ:  l01D7_11BC
l01D7_11BC:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01D7_11CD_thunk_fn0177_D1D2
l01D7_11CD_thunk_fn0177_D1D2:
	call fn0177_D1D2 (retsize: 0;)
	return
	// succ:  fn01D7_11BC_exit
fn01D7_11BC_exit:


// fn0177_D1D2
// Return size: 0
void fn0177_D1D2()
fn0177_D1D2_entry:
	// succ:  l0177_D1D2
l0177_D1D2:
	sp = fp
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_3854 (retsize: 2;)
	sp = sp + 0x0002
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	goto l0177_D1DF_thunk_fn0177_D1E2
	// succ:  l0177_D1DF_thunk_fn0177_D1E2
l0177_D1D2:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_3854 (retsize: 2;)
	sp = sp + 0x0002
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	// succ:  l0177_D1DF_thunk_fn0177_D1E1
l0177_D1DF_thunk_fn0177_D1E1:
	call fn0177_D1E1 (retsize: 0;)
	return
	// succ:  fn0177_D1D2_exit
l0177_D1DF_thunk_fn0177_D1E2:
	call fn0177_D1E2 (retsize: 0;)
	return
	// succ:  fn0177_D1D2_exit
fn0177_D1D2_exit:


// fn0177_D1E1
// Return size: 0
void fn0177_D1E1()
fn0177_D1E1_entry:
	// succ:  l0177_D1E1
l0177_D1E1:
	sp = fp
	bp = bp - 0x0001
	SZO = cond(bp)
	goto l0177_D1E1_thunk_fn0177_D1E2
	// succ:  l0177_D1E1_thunk_fn0177_D1E2
l0177_D1E1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn01D7_122C (retsize: 2;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00BF_0780 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(Mem0[ds:0x00B6:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_1206
	goto l0177_D1FE_thunk_fn0177_D201
	// succ:  l0177_D1FE_thunk_fn0177_D201 l0177_D1FE_thunk_fn0177_D206
l0177_D1E1_thunk_fn0177_D1E2:
	call fn0177_D1E2 (retsize: 0;)
	return
	// succ:  fn0177_D1E1_exit
l0177_D1FE_thunk_fn0177_D201:
	call fn0177_D201 (retsize: 0;)
	return
	// succ:  fn0177_D1E1_exit
l0177_D1FE_thunk_fn0177_D206:
	call fn0177_D206 (retsize: 0;)
	return
	// succ:  fn0177_D1E1_exit
fn0177_D1E1_exit:


// fn0177_D1E2
// Return size: 0
void fn0177_D1E2()
fn0177_D1E2_entry:
	// succ:  l0177_D1E2
l0177_D1E2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn01D7_122C (retsize: 2;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00BF_0780 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(Mem0[ds:0x00B6:word16] - 0x0000)
	goto l0177_D1FA_thunk_fn0177_D1FF
	// succ:  l0177_D1FA_thunk_fn0177_D1FF
l0177_D1E2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn01D7_122C (retsize: 2;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00BF_0780 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(Mem0[ds:0x00B6:word16] - 0x0000)
	branch Test(EQ,Z) l0177_D1FF_thunk_fn0177_D206
	goto l0177_D1FF_thunk_fn0177_D201
	// succ:  l0177_D1FF_thunk_fn0177_D201 l0177_D1FF_thunk_fn0177_D206
l0177_D1FA_thunk_fn0177_D1FF:
	call fn0177_D1FF (retsize: 0;)
	return
	// succ:  fn0177_D1E2_exit
l0177_D1FF_thunk_fn0177_D201:
	call fn0177_D201 (retsize: 0;)
	return
	// succ:  fn0177_D1E2_exit l0177_D1FF_thunk_fn0177_D201
l0177_D1FF_thunk_fn0177_D201:
	call fn0177_D201 (retsize: 0;)
	return
	// succ:  fn0177_D1E2_exit
l0177_D1FF_thunk_fn0177_D206:
	call fn0177_D206 (retsize: 0;)
	return
	// succ:  fn0177_D1E2_exit
fn0177_D1E2_exit:


// fn0177_D1FF
// Return size: 0
void fn0177_D1FF()
fn0177_D1FF_entry:
	// succ:  l0177_D1FF
l0177_D1FF:
	sp = fp
	branch Test(EQ,Z) l0177_D1FF_thunk_fn0177_D206
	goto l0177_D1FF_thunk_fn0177_D201
	// succ:  l0177_D1FF_thunk_fn0177_D201 l0177_D1FF_thunk_fn0177_D206
l0177_D1FF:
	branch Test(EQ,Z) l0177_D1FF_thunk_fn0177_D206
	goto l0177_D1FF_thunk_fn0177_D201
	// succ:  l0177_D1FF_thunk_fn0177_D201 l0177_D1FF_thunk_fn0177_D206
l0177_D1FF_thunk_fn0177_D201:
	call fn0177_D201 (retsize: 0;)
	return
	// succ:  fn0177_D1FF_exit l0177_D1FF_thunk_fn0177_D201
l0177_D1FF_thunk_fn0177_D201:
	call fn0177_D201 (retsize: 0;)
	return
	// succ:  fn0177_D1FF_exit
l0177_D1FF_thunk_fn0177_D201:
	call fn0177_D201 (retsize: 0;)
	return
	// succ:  fn0177_D1FF_exit l0177_D1FF_thunk_fn0177_D201
l0177_D1FF_thunk_fn0177_D201:
	call fn0177_D201 (retsize: 0;)
	return
	// succ:  fn0177_D1FF_exit
l0177_D1FF_thunk_fn0177_D206:
	call fn0177_D206 (retsize: 0;)
	return
	// succ:  fn0177_D1FF_exit
l0177_D1FF_thunk_fn0177_D206:
	call fn0177_D206 (retsize: 0;)
	return
	// succ:  fn0177_D1FF_exit
fn0177_D1FF_exit:


// fn0177_D201
// Return size: 0
void fn0177_D201()
fn0177_D201_entry:
	// succ:  l01D7_1201
l01D7_1201:
	v3 = Mem0[ds:0x4D1A:byte] | 0x01
	Mem0[ds:0x4D1A:byte] = v3
	SZO = cond(Mem0[ds:0x4D1A:byte])
	C = false
	// succ:  l01D7_1201_thunk_fn0177_D206
l01D7_1201_thunk_fn0177_D206:
	call fn0177_D206 (retsize: 0;)
	return
	// succ:  fn0177_D201_exit
fn0177_D201_exit:


// fn0177_D206
// Return size: 0
void fn0177_D206()
fn0177_D206_entry:
	// succ:  l01D7_1206
l01D7_1206:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(Mem0[ds:0x00B6:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_121B
	// succ:  l01D7_1216 l01D7_121B
l01D7_1216:
	v7 = Mem0[ds:0x4D1A:byte] & 0xFE
	Mem0[ds:0x4D1A:byte] = v7
	SZO = cond(Mem0[ds:0x4D1A:byte])
	C = false
	// succ:  l01D7_121B
l01D7_121B:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_3854 (retsize: 2;)
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_D206_exit
fn0177_D206_exit:


// fn01D7_122C
// Return size: 4
void fn01D7_122C()
fn01D7_122C_entry:
	// succ:  l01D7_122C
l01D7_122C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0014
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x000C:word16]
	di = Mem0[ss:bp + 0x000A:word16]
	Mem0[ss:bp - 0x0004:word16] = 0x0000
	ax = bp - 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = di - 0x000A
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l01D7_1254
	// succ:  l01D7_1252 l01D7_1254
l01D7_1252:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01D7_1254
l01D7_1254:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si - 0x000A
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l01D7_125E
	// succ:  l01D7_125C l01D7_125E
l01D7_125C:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01D7_125E
l01D7_125E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = di + 0x000A
	ax = ax - Mem0[ds:0x0482:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + Mem0[ds:0x0482:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x000A
	ax = ax - Mem0[ds:0x0480:word16]
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ax = ax + Mem0[ds:0x0480:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	si = Mem0[ss:bp - 0x0004:word16]
	goto l01D7_12D4
	// succ:  l01D7_12D4
l01D7_128A:
	ax = bp - 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0A4A (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01D7_12B4
	// succ:  l01D7_12A3 l01D7_12B4
l01D7_12A3:
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0724 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l01D7_12B4
l01D7_12B4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	call fn00F7_1178 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(ax - 0x0005)
	branch Test(UGE,C) l01D7_12DA
	// succ:  l01D7_12C8 l01D7_12DA
l01D7_12C8:
	ax = Mem0[ss:bp - 0x000A:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = Mem0[ss:bp - 0x000C:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	// succ:  l01D7_12D4
l01D7_12D4:
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x000A)
	branch Test(LT,SO) l01D7_128A
	// succ:  l01D7_12DA l01D7_128A
l01D7_12DA:
	SCZO = cond(si - 0x000A)
	branch Test(NE,Z) l01D7_12EB
	// succ:  l01D7_12DF l01D7_12EB
l01D7_12DF:
	ax = Mem0[ss:bp - 0x0008:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	Mem0[ss:bp - 0x000C:word16] = ax
	// succ:  l01D7_12EB
l01D7_12EB:
	ax = Mem0[ss:bp - 0x000A:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = ax
	ax = Mem0[ss:bp - 0x000C:word16]
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = ax
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_122C_exit
fn01D7_122C_exit:


// fn01D7_1308
// Return size: 4
void fn01D7_1308()
fn01D7_1308_entry:
	// succ:  l01D7_1308
l01D7_1308:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0082
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x000F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0097_019C (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01D7_1362
	// succ:  l01D7_1326 l01D7_1362
l01D7_1326:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si:word16]
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_1956 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0082
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn015F_0808 (retsize: 4;)
	sp = sp + 0x0008
	ax = bp - 0x0082
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	call fn0087_04C4 (retsize: 4;)
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x02)
	branch Test(NE,Z) l01D7_1362
	// succ:  l01D7_135D l01D7_1362
l01D7_135D:
	call fn0087_08FA (retsize: 4;)
	// succ:  l01D7_1362
l01D7_1362:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_1308_exit
fn01D7_1308_exit:


// fn01D7_136C
// Return size: 4
void fn01D7_136C()
fn01D7_136C_entry:
	// succ:  l01D7_136C
l01D7_136C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0019
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0097_019C (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01D7_139A
	// succ:  l01D7_1389 l01D7_139A
l01D7_1389:
	dx = Mem0[ds:si:word16]
	bx = dx
	al = Mem0[ds:bx + 0x0009:byte]
	al = al & 0x06
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x04)
	branch Test(NE,Z) l01D7_139A
	// succ:  l01D7_1396 l01D7_139A
l01D7_1396:
	v15 = Mem0[ds:bx + 0x0009:byte] | 0x07
	Mem0[ds:bx + 0x0009:byte] = v15
	SZO = cond(Mem0[ds:bx + 0x0009:byte])
	C = false
	// succ:  l01D7_139A
l01D7_139A:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_136C_exit
fn01D7_136C_exit:


// fn01D7_13A4
// Return size: 4
void fn01D7_13A4()
fn01D7_13A4_entry:
	goto l01D7_13A4
	// succ:  l01D7_13A4
l0177_D3CE:
	call fn0167_146C (retsize: 4;)
	sp = sp + 0x0006
	ax = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x4D04:word16]
	ax = ax + 0x000A
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x0011
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
l01D7_13A4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_2470 (retsize: 2;)
	sp = sp + 0x0004
	ax = si - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l0177_D3CE
	// succ:  l0177_D3CE
fn01D7_13A4_exit:


// fn0177_D3FC
// Return size: 4
void fn0177_D3FC()
fn0177_D3FC_entry:
	// succ:  l0177_D3FC
l0177_D3FC:
	sp = fp
	al = al + Mem0[ds:bx + si:byte]
	SCZO = cond(al)
	goto l0177_D3FC_thunk_fn01D7_13FE
	// succ:  l0177_D3FC_thunk_fn01D7_13FE
l0177_D3FC:
	goto fn0177_D3FC_exit
	// succ:  fn0177_D3FC_exit
l0177_D3FC_thunk_fn01D7_13FE:
	call fn01D7_13FE (retsize: 4;)
	return
	// succ:  fn0177_D3FC_exit
fn0177_D3FC_exit:


// fn01D7_13FE
// Return size: 4
void fn01D7_13FE()
fn01D7_13FE_entry:
	// succ:  l01D7_13FE
l01D7_13FE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0020
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0010:word16] = ax
	cl = Mem0[ds:0x4D1D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	bx = Mem0[ss:bp + 0x000A:word16]
	dx = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x000E:word16] = dx
	bx = Mem0[ss:bp + 0x0008:word16]
	di = Mem0[ds:bx:word16]
	SCZO = cond(ax - dx)
	branch Test(NE,Z) l01D7_1433
	// succ:  l01D7_142C l01D7_1433
l01D7_142C:
	SCZO = cond(cx - di)
	branch Test(NE,Z) l01D7_1433
	// succ:  l01D7_1430 l01D7_1433
l01D7_1430:
	goto l01D7_15AD
	// succ:  l01D7_15AD
l01D7_1433:
	si = cx
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax - dx
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	Mem0[ss:bp - 0x001E:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l01D7_1448
	// succ:  l01D7_1443 l01D7_1448
l01D7_1443:
	ax = 0x0001
	goto l01D7_144B
	// succ:  l01D7_144B
l01D7_1448:
	ax = 0xFFFF
	// succ:  l01D7_144B
l01D7_144B:
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = di
	ax = ax - si
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0020:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l01D7_145E
	// succ:  l01D7_1459 l01D7_145E
l01D7_1459:
	ax = 0x0001
	goto l01D7_1461
	// succ:  l01D7_1461
l01D7_145E:
	ax = 0xFFFF
	// succ:  l01D7_1461
l01D7_1461:
	Mem0[ss:bp - 0x001A:word16] = ax
	ax = Mem0[ss:bp - 0x001E:word16]
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0016:word16] = ax
	ax = Mem0[ss:bp - 0x0020:word16]
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0014:word16] = ax
	SCZO = cond(ax - Mem0[ss:bp - 0x0016:word16])
	branch Test(GT,SZO) l01D7_1482
	// succ:  l01D7_147F l01D7_1482
l01D7_147F:
	goto l01D7_1514
	// succ:  l01D7_1514
l01D7_1482:
	dx = Mem0[ss:bp - 0x0016:word16]
	dx = dx << 0x0001
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0010:word16] = dx
	dx = dx - ax
	SCZO = cond(dx)
	ax = dx
	ax = ax - Mem0[ss:bp - 0x0014:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0012:word16] = ax
	si = si + Mem0[ss:bp - 0x001A:word16]
	SCZO = cond(si)
	SCZO = cond(si - di)
	branch Test(NE,Z) l01D7_149E
	// succ:  l01D7_149B l01D7_149E
l01D7_149B:
	goto l01D7_15AD
	// succ:  l01D7_15AD
l01D7_149E:
	Mem0[ss:bp - 0x001C:word16] = di
	cl = 0x06
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = Mem0[ss:bp - 0x000A:word16]
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	Mem0[ss:bp - 0x0018:word16] = si
	si = dx
	di = Mem0[ss:bp - 0x0018:word16]
	// succ:  l01D7_14BE
l01D7_14BE:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(GE,SO) l01D7_14C8
	// succ:  l01D7_14C2 l01D7_14C8
l01D7_14C2:
	si = si + Mem0[ss:bp - 0x0010:word16]
	SCZO = cond(si)
	goto l01D7_14D7
	// succ:  l01D7_14D7
l01D7_14C8:
	si = si + Mem0[ss:bp - 0x0012:word16]
	SCZO = cond(si)
	ax = Mem0[ss:bp - 0x000C:word16]
	v25 = Mem0[ss:bp - 0x0008:word16] + ax
	Mem0[ss:bp - 0x0008:word16] = v25
	SCZO = cond(v25)
	ax = Mem0[ss:bp - 0x000A:word16]
	v26 = Mem0[ss:bp - 0x0006:word16] + ax
	Mem0[ss:bp - 0x0006:word16] = v26
	SCZO = cond(v26)
	// succ:  l01D7_14D7
l01D7_14D7:
	bx = Mem0[ss:bp - 0x0008:word16]
	bx = bx + di
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE2:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2260 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_14F5
	// succ:  l01D7_14F2 l01D7_14F5
l01D7_14F2:
	goto l01D7_15A0
	// succ:  l01D7_15A0
l01D7_14F5:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - ax)
	branch Test(EQ,Z) l01D7_1509
	// succ:  l01D7_14FA l01D7_1509
l01D7_14FA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn01D7_15BA (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_1509
	// succ:  l01D7_1506 l01D7_1509
l01D7_1506:
	goto l01D7_15A0
	// succ:  l01D7_15A0
l01D7_1509:
	di = di + Mem0[ss:bp - 0x001A:word16]
	SCZO = cond(di)
	SCZO = cond(di - Mem0[ss:bp - 0x001C:word16])
	branch Test(NE,Z) l01D7_14BE
	// succ:  l01D7_1511 l01D7_14BE
l01D7_1511:
	goto l01D7_15AD
	// succ:  l01D7_15AD
l01D7_1514:
	Mem0[ss:bp - 0x0018:word16] = si
	dx = Mem0[ss:bp - 0x0016:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0010:word16] = ax
	ax = ax - dx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax - dx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0012:word16] = ax
	bx = Mem0[ss:bp - 0x000A:word16]
	ax = Mem0[ss:bp - 0x000E:word16]
	v21 = Mem0[ss:bp - 0x0006:word16] + bx
	Mem0[ss:bp - 0x0006:word16] = v21
	SCZO = cond(v21)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(EQ,Z) l01D7_15AD
	// succ:  l01D7_1537 l01D7_15AD
l01D7_1537:
	cl = 0x06
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = bx
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	si = Mem0[ss:bp - 0x0004:word16]
	di = Mem0[ss:bp - 0x0018:word16]
	// succ:  l01D7_154E
l01D7_154E:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(GE,SO) l01D7_1558
	// succ:  l01D7_1552 l01D7_1558
l01D7_1552:
	si = si + Mem0[ss:bp - 0x0010:word16]
	SCZO = cond(si)
	goto l01D7_155E
	// succ:  l01D7_155E
l01D7_1558:
	si = si + Mem0[ss:bp - 0x0012:word16]
	SCZO = cond(si)
	di = di + Mem0[ss:bp - 0x001A:word16]
	SCZO = cond(di)
	// succ:  l01D7_155E
l01D7_155E:
	bx = Mem0[ss:bp - 0x0008:word16]
	bx = bx + di
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE2:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2260 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01D7_15A0
	// succ:  l01D7_1579 l01D7_15A0
l01D7_1579:
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - ax)
	branch Test(EQ,Z) l01D7_158A
	// succ:  l01D7_157E l01D7_158A
l01D7_157E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn01D7_15BA (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01D7_15A0
	// succ:  l01D7_158A l01D7_15A0
l01D7_158A:
	ax = Mem0[ss:bp - 0x000C:word16]
	v23 = Mem0[ss:bp - 0x0008:word16] + ax
	Mem0[ss:bp - 0x0008:word16] = v23
	SCZO = cond(v23)
	ax = Mem0[ss:bp - 0x000E:word16]
	cx = Mem0[ss:bp - 0x000A:word16]
	v24 = Mem0[ss:bp - 0x0006:word16] + cx
	Mem0[ss:bp - 0x0006:word16] = v24
	SCZO = cond(v24)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(NE,Z) l01D7_154E
	// succ:  l01D7_159E l01D7_154E
l01D7_159E:
	goto l01D7_15AD
	// succ:  l01D7_15AD
l01D7_15A0:
	ax = Mem0[ss:bp - 0x0006:word16]
	bx = Mem0[ss:bp + 0x000A:word16]
	Mem0[ds:bx:word16] = ax
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = di
	// succ:  l01D7_15AD
l01D7_15AD:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_13FE_exit
fn01D7_13FE_exit:


// fn01D7_15BA
// Return size: 4
void fn01D7_15BA()
fn01D7_15BA_entry:
	// succ:  l01D7_15BA
l01D7_15BA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cl = 0x06
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bl = Mem0[ds:bx + 0x0CE4:byte]
	bh = bh - bh
	SCZO = cond(bh)
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l01D7_15F4
	// succ:  l01D7_15E2 l01D7_15F4
l01D7_15E2:
	si = bx
	si = si << 0x0001
	SCZO = cond(si)
	si = Mem0[ds:si + 0x4960:word16]
	si = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:si:word16] - 0x0001)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x0001
	SZO = cond(ax)
	goto l01D7_15F6
	// succ:  l01D7_15F6
l01D7_15F4:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01D7_15F6
l01D7_15F6:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_15BA_exit
fn01D7_15BA_exit:


// fn01D7_1602
// Return size: 4
void fn01D7_1602()
fn01D7_1602_entry:
	// succ:  l01D7_1602
l01D7_1602:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0030
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x001A:word16] = ax
	Mem0[ss:bp - 0x001C:word16] = ax
	Mem0[ss:bp - 0x0018:word16] = ax
	Mem0[ss:bp - 0x0014:word16] = ax
	Mem0[ss:bp - 0x0012:word16] = ax
	SCZO = cond(Mem0[ds:0x00B6:word16] - ax)
	branch Test(NE,Z) l01D7_162B
	// succ:  l01D7_1628 l01D7_162B
l01D7_1628:
	call fn0177_DA75 (retsize: 0;)
	return
	// succ:  l01D7_1CA7 fn01D7_1602_exit
l01D7_162B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01D7_163E
	// succ:  l01D7_163B l01D7_163E
l01D7_163B:
	call fn0177_DA75 (retsize: 0;)
	return
	// succ:  l01D7_1CA7 fn01D7_1602_exit
l01D7_163E:
	ax = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax - 0x0006)
	branch Test(UGT,CZ) l01D7_165C
	// succ:  l01D7_1646 l01D7_165C
l01D7_1646:
	ax = ax << 0x0001
	SCZO = cond(ax)
	v14 = ax
	ax = bx
	bx = v14
	switch (ax) { l01D7_1662 l01D7_168C l01D7_16B6 l01D7_16E0 l01D7_1668 l01D7_1692 l01D7_16BC }
	// succ:  l01D7_1662 l01D7_168C l01D7_16B6 l01D7_16E0 l01D7_1668 l01D7_1692 l01D7_16BC
l01D7_165C:
	cx = Mem0[ss:bp - 0x0004:word16]
	goto l01D7_16E3
	// succ:  l01D7_16E3
l01D7_1662:
	cx = 0x00EE
	goto l01D7_16E3
	// succ:  l01D7_16E3
l01D7_1668:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0011
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x001A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0012
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x001C:word16] = ax
	// succ:  l01D7_168C
l01D7_168C:
	cx = 0x00E6
	goto l01D7_16E3
	// succ:  l01D7_16E3
l01D7_1692:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0010
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x001A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x000F
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x001C:word16] = ax
	// succ:  l01D7_16B6
l01D7_16B6:
	cx = 0x00EA
	goto l01D7_16E3
	// succ:  l01D7_16E3
l01D7_16BC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x0009
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x001A:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = 0x000F
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x001C:word16] = ax
	// succ:  l01D7_16E0
l01D7_16E0:
	cx = 0x00E2
	// succ:  l01D7_16E3
l01D7_16E3:
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - Mem0[ss:bp + 0x000E:word16]
	SCZO = cond(ax)
	// succ:  l01D7_16E6_thunk_fn0177_D6E9
l01D7_16E6_thunk_fn0177_D6E9:
	call fn0177_D6E9 (retsize: 0;)
	return
	// succ:  fn01D7_1602_exit
fn01D7_1602_exit:


// fn0177_D6E9
// Return size: 0
void fn0177_D6E9()
fn0177_D6E9_entry:
	// succ:  l0177_D6E9
l0177_D6E9:
	sp = fp
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	dx = ax
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax - Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(ax)
	bx = dx
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	SCZO = cond(ax - bx)
	branch Test(GE,SO) l0177_D6FF_thunk_fn0177_D714
	goto l0177_D6FF_thunk_fn0177_D701
	// succ:  l0177_D6FF_thunk_fn0177_D701 l0177_D6FF_thunk_fn0177_D714
l0177_D6E9:
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	dx = ax
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax - Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(ax)
	bx = dx
	dx_ax = (int32) ax
	ax = ax ^ dx
	SZO = cond(ax)
	C = false
	ax = ax - dx
	SCZO = cond(ax)
	SCZO = cond(ax - bx)
	branch Test(GE,SO) l01D7_1714
	goto l0177_D6FF_thunk_fn0177_D701
	// succ:  l0177_D6FF_thunk_fn0177_D701 l0177_D6FF_thunk_fn0177_D714
l0177_D6FF_thunk_fn0177_D701:
	call fn0177_D701 (retsize: 0;)
	return
	// succ:  fn0177_D6E9_exit l0177_D6FF_thunk_fn0177_D701
l0177_D6FF_thunk_fn0177_D701:
	call fn0177_D701 (retsize: 0;)
	return
	// succ:  fn0177_D6E9_exit
l0177_D6FF_thunk_fn0177_D701:
	call fn0177_D701 (retsize: 0;)
	return
	// succ:  fn0177_D6E9_exit
l0177_D6FF_thunk_fn0177_D714:
	call fn0177_D714 (retsize: 0;)
	return
	// succ:  fn0177_D6E9_exit
l0177_D6FF_thunk_fn0177_D714:
	call fn0177_D714 (retsize: 0;)
	return
	// succ:  fn0177_D6E9_exit
fn0177_D6E9_exit:


// fn0177_D701
// Return size: 0
void fn0177_D701()
fn0177_D701_entry:
	// succ:  l01D7_1701
l01D7_1701:
	ax = Mem0[ss:bp + 0x000E:word16]
	SCZO = cond(Mem0[ss:bp + 0x000A:word16] - ax)
	branch Test(ULE,CZ) l01D7_170E
	// succ:  l01D7_1709 l01D7_170E
l01D7_1709:
	ax = 0x0003
	// succ:  l01D7_1709_thunk_fn0177_D714
l01D7_1709_thunk_fn0177_D714:
	call fn0177_D714 (retsize: 0;)
	return
	// succ:  fn0177_D701_exit
l01D7_170E:
	ax = 0x0002
	// succ:  l01D7_170E_thunk_fn0177_D714
l01D7_170E_thunk_fn0177_D714:
	call fn0177_D714 (retsize: 0;)
	return
	// succ:  fn0177_D701_exit
fn0177_D701_exit:


// fn0177_D714
// Return size: 0
void fn0177_D714()
fn0177_D714_entry:
	// succ:  l01D7_1714
l01D7_1714:
	ax = Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - ax)
	branch Test(ULE,CZ) l01D7_1722
	// succ:  l01D7_171C l01D7_1722
l01D7_171C:
	ax = 0x0001
	goto l01D7_1724
	// succ:  l01D7_1724
l01D7_1722:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01D7_1724
l01D7_1724:
	cx = cx + ax
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_174F
	// succ:  l01D7_173A l01D7_174F
l01D7_173A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn01BF_1E02 (retsize: 4;)
	sp = sp + 0x000C
	// succ:  l01D7_174F
l01D7_174F:
	SCZO = cond(Mem0[ss:bp - 0x001A:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_175B
	// succ:  l01D7_1755 l01D7_175B
l01D7_1755:
	SCZO = cond(Mem0[ss:bp - 0x001C:word16] - 0x0000)
	branch Test(NE,Z) l01D7_1764
	// succ:  l01D7_175B l01D7_1764
l01D7_175B:
	si = Mem0[ss:bp - 0x0012:word16]
	di = Mem0[ss:bp - 0x0014:word16]
	// succ:  l01D7_175E_thunk_fn0177_DA75
l01D7_175E_thunk_fn0177_DA75:
	call fn0177_DA75 (retsize: 0;)
	return
	// succ:  fn0177_D714_exit
l01D7_1764:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	call fn00F7_1E92 (retsize: 4;)
	sp = sp + 0x0002
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l01D7_1775
	// succ:  l01D7_1772 l01D7_1775
l01D7_1772:
	call fn0177_DA75 (retsize: 0;)
	return
	// succ:  l01D7_1C7F fn0177_D714_exit
l01D7_1775:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	call fn00F7_1E92 (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l01D7_1786
	// succ:  l01D7_1783 l01D7_1786
l01D7_1783:
	call fn0177_DA75 (retsize: 0;)
	return
	// succ:  l01D7_1C75 fn0177_D714_exit
l01D7_1786:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = 0x0060
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateCompatibleBitmap(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	Mem0[ss:bp - 0x0018:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01D7_179D
	// succ:  l01D7_179A l01D7_179D
l01D7_179A:
	call fn0177_DA75 (retsize: 0;)
	return
	// succ:  l01D7_1C6B fn0177_D714_exit
l01D7_179D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0016:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetStretchBltMode(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetStretchBltMode(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	cl = 0x05
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000E:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	dx = 0x0060
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	dx = Mem0[ss:bp + 0x0008:word16]
	dx = dx - Mem0[ds:0x3D84:word16]
	SCZO = cond(dx)
	dx = dx << cl
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0010:word16] = dx
	dx = dx - 0x0020
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = ax - 0x0020
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BitBlt(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0014
	ax = bp - 0x0024
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x003C
	bx = bx - bx
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	al = Mem0[ss:bp - 0x0024:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0023:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0022:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0021:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	ax = ax + 0x000E
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0060
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = Mem0[ss:bp - 0x0010:word16]
	cx = cx - 0x0020
	SCZO = cond(cx)
	Mem0[ss:bp - 0x002E:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = Mem0[ss:bp - 0x000E:word16]
	cx = cx - 0x0020
	SCZO = cond(cx)
	Mem0[ss:bp - 0x0030:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1DAA (retsize: 2;)
	sp = sp + 0x0022
	ax = bp - 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0020:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001F:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001E:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = dx
	al = Mem0[ss:bp - 0x0024:byte]
	SCZO = cond(Mem0[ss:bp - 0x0020:byte] - al)
	branch Test(UGE,C) l01D7_18FB
	// succ:  l01D7_18F1 l01D7_18FB
l01D7_18F1:
	v22 = Mem0[ss:bp - 0x000C:word16] + 0xD600
	Mem0[ss:bp - 0x000C:word16] = v22
	SCZO = cond(v22)
	v23 = Mem0[ss:bp - 0x000A:word16] + 0x0083 + C
	Mem0[ss:bp - 0x000A:word16] = v23
	SCZO = cond(v23)
	// succ:  l01D7_18FB
l01D7_18FB:
	ax = Mem0[ss:bp - 0x000C:word16]
	dx = Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - dx)
	branch Test(ULT,C) l01D7_1918
	// succ:  l01D7_1906 l01D7_1918
l01D7_1906:
	branch Test(UGT,CZ) l01D7_190D
	// succ:  l01D7_1908 l01D7_190D
l01D7_1908:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULE,CZ) l01D7_1918
	// succ:  l01D7_190D l01D7_1918
l01D7_190D:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1CB4 (retsize: 2;)
	sp = sp + 0x0002
l01D7_1918:
	v24 = Mem0[ss:bp - 0x0006:word16] + 0x000E
	Mem0[ss:bp - 0x0006:word16] = v24
	SCZO = cond(v24)
	v25 = Mem0[ss:bp - 0x0004:word16] + 0x00 + C
	Mem0[ss:bp - 0x0004:word16] = v25
	SCZO = cond(v25)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x005F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFA0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0030
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x002E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0030:word16]
	ax = 0x0060
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1DAA (retsize: 2;)
	sp = sp + 0x0022
	ax = bp - 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0020:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001F:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001E:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = dx
	al = Mem0[ss:bp - 0x0024:byte]
	SCZO = cond(Mem0[ss:bp - 0x0020:byte] - al)
	branch Test(UGE,C) l01D7_19BA
	// succ:  l01D7_19B0 l01D7_19BA
l01D7_19B0:
	v26 = Mem0[ss:bp - 0x000C:word16] + 0xD600
	Mem0[ss:bp - 0x000C:word16] = v26
	SCZO = cond(v26)
	v27 = Mem0[ss:bp - 0x000A:word16] + 0x0083 + C
	Mem0[ss:bp - 0x000A:word16] = v27
	SCZO = cond(v27)
	// succ:  l01D7_19BA
l01D7_19BA:
	ax = Mem0[ss:bp - 0x000C:word16]
	dx = Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - dx)
	branch Test(ULT,C) l01D7_19D7
	// succ:  l01D7_19C5 l01D7_19D7
l01D7_19C5:
	branch Test(UGT,CZ) l01D7_19CC
	// succ:  l01D7_19C7 l01D7_19CC
l01D7_19C7:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULE,CZ) l01D7_19D7
	// succ:  l01D7_19CC l01D7_19D7
l01D7_19CC:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1CB4 (retsize: 2;)
	sp = sp + 0x0002
l01D7_19D7:
	v28 = Mem0[ss:bp - 0x0006:word16] + 0x000E
	Mem0[ss:bp - 0x0006:word16] = v28
	SCZO = cond(v28)
	v29 = Mem0[ss:bp - 0x0004:word16] + 0x00 + C
	Mem0[ss:bp - 0x0004:word16] = v29
	SCZO = cond(v29)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0060
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0010
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	// succ:  l01D7_19F6_thunk_fn0177_D9F7
l01D7_19F6_thunk_fn0177_D9F7:
	call fn0177_D9F7 (retsize: 0;)
	return
	// succ:  fn0177_D714_exit
l01D7_1C6B:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01D7_1C75
	// succ:  l01D7_1C6F l01D7_1C75
l01D7_1C6F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l01D7_1C75
l01D7_1C75:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01D7_1C7F
	// succ:  l01D7_1C79 l01D7_1C7F
l01D7_1C79:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l01D7_1C7F
l01D7_1C7F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	SCZO = cond(Mem0[ss:bp - 0x001A:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_1C99
	// succ:  l01D7_1C91 l01D7_1C99
l01D7_1C91:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01D7_1C99
l01D7_1C99:
	SCZO = cond(Mem0[ss:bp - 0x001C:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_1CA7
	// succ:  l01D7_1C9F l01D7_1CA7
l01D7_1C9F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01D7_1CA7
l01D7_1CA7:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_D714_exit
fn0177_D714_exit:


// fn0177_D9F7
// Return size: 0
void fn0177_D9F7()
fn0177_D9F7_entry:
	// succ:  l0177_D9F7
l0177_D9F7:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0040
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x002E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0030:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1DAA (retsize: 2;)
	sp = sp + 0x0022
	ax = bp - 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0020:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001F:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001E:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = dx
	al = Mem0[ss:bp - 0x0024:byte]
	SCZO = cond(Mem0[ss:bp - 0x0020:byte] - al)
	branch Test(UGE,C) l0177_DA69_thunk_fn0177_DA75
	goto l0177_DA69_thunk_fn0177_DA6B
	// succ:  l0177_DA69_thunk_fn0177_DA6B l0177_DA69_thunk_fn0177_DA75
l0177_D9F7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0040
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x002E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0030:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1DAA (retsize: 2;)
	sp = sp + 0x0022
	ax = bp - 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0020:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001F:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001E:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = dx
	al = Mem0[ss:bp - 0x0024:byte]
	SCZO = cond(Mem0[ss:bp - 0x0020:byte] - al)
	branch Test(UGE,C) l01D7_1A75
	goto l0177_DA69_thunk_fn0177_DA6B
	// succ:  l0177_DA69_thunk_fn0177_DA6B l0177_DA69_thunk_fn0177_DA75
l0177_DA69_thunk_fn0177_DA6B:
	call fn0177_DA6B (retsize: 0;)
	return
	// succ:  fn0177_D9F7_exit l0177_DA69_thunk_fn0177_DA6B
l0177_DA69_thunk_fn0177_DA6B:
	call fn0177_DA6B (retsize: 0;)
	return
	// succ:  fn0177_D9F7_exit
l0177_DA69_thunk_fn0177_DA6B:
	call fn0177_DA6B (retsize: 0;)
	return
	// succ:  fn0177_D9F7_exit
l0177_DA69_thunk_fn0177_DA75:
	call fn0177_DA75 (retsize: 0;)
	return
	// succ:  fn0177_D9F7_exit
l0177_DA69_thunk_fn0177_DA75:
	call fn0177_DA75 (retsize: 0;)
	return
	// succ:  fn0177_D9F7_exit
fn0177_D9F7_exit:


// fn0177_DA6B
// Return size: 0
void fn0177_DA6B()
fn0177_DA6B_entry:
	// succ:  l01D7_1A6B
l01D7_1A6B:
	v4 = Mem0[ss:bp - 0x000C:word16] + 0xD600
	Mem0[ss:bp - 0x000C:word16] = v4
	SCZO = cond(v4)
	v7 = Mem0[ss:bp - 0x000A:word16] + 0x0083 + C
	Mem0[ss:bp - 0x000A:word16] = v7
	SCZO = cond(v7)
	// succ:  l01D7_1A70_thunk_fn0177_DA75
l01D7_1A70_thunk_fn0177_DA75:
	call fn0177_DA75 (retsize: 0;)
	return
	// succ:  fn0177_DA6B_exit
fn0177_DA6B_exit:


// fn0177_DA75
// Return size: 0
void fn0177_DA75()
fn0177_DA75_entry:
	// succ:  l01D7_1A75
l01D7_1A75:
	ax = Mem0[ss:bp - 0x000C:word16]
	dx = Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - dx)
	branch Test(ULT,C) l01D7_1A92
	// succ:  l01D7_1A80 l01D7_1A92
l01D7_1A80:
	branch Test(UGT,CZ) l01D7_1A87
	// succ:  l01D7_1A82 l01D7_1A87
l01D7_1A82:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULE,CZ) l01D7_1A92
	// succ:  l01D7_1A87 l01D7_1A92
l01D7_1A87:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1CB4 (retsize: 2;)
	sp = sp + 0x0002
l01D7_1A92:
	v10 = Mem0[ss:bp - 0x0006:word16] + 0x000E
	Mem0[ss:bp - 0x0006:word16] = v10
	SCZO = cond(v10)
	v11 = Mem0[ss:bp - 0x0004:word16] + 0x00 + C
	Mem0[ss:bp - 0x0004:word16] = v11
	SCZO = cond(v11)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x005F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFA0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x002E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0030:word16]
	ax = 0x0060
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1DAA (retsize: 2;)
	sp = sp + 0x0022
	ax = bp - 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0020:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001F:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001E:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = dx
	al = Mem0[ss:bp - 0x0024:byte]
	SCZO = cond(Mem0[ss:bp - 0x0020:byte] - al)
	branch Test(UGE,C) l01D7_1B34
	// succ:  l01D7_1B2A l01D7_1B34
l01D7_1B2A:
	v20 = Mem0[ss:bp - 0x000C:word16] + 0xD600
	Mem0[ss:bp - 0x000C:word16] = v20
	SCZO = cond(v20)
	v21 = Mem0[ss:bp - 0x000A:word16] + 0x0083 + C
	Mem0[ss:bp - 0x000A:word16] = v21
	SCZO = cond(v21)
	// succ:  l01D7_1B34
l01D7_1B34:
	ax = Mem0[ss:bp - 0x000C:word16]
	dx = Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - dx)
	branch Test(ULT,C) l01D7_1B51
	// succ:  l01D7_1B3F l01D7_1B51
l01D7_1B3F:
	branch Test(UGT,CZ) l01D7_1B46
	// succ:  l01D7_1B41 l01D7_1B46
l01D7_1B41:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULE,CZ) l01D7_1B51
	// succ:  l01D7_1B46 l01D7_1B51
l01D7_1B46:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1CB4 (retsize: 2;)
	sp = sp + 0x0002
l01D7_1B51:
	v22 = Mem0[ss:bp - 0x0006:word16] + 0x000E
	Mem0[ss:bp - 0x0006:word16] = v22
	SCZO = cond(v22)
	v23 = Mem0[ss:bp - 0x0004:word16] + 0x00 + C
	Mem0[ss:bp - 0x0004:word16] = v23
	SCZO = cond(v23)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0060
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x002E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0030:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn01D7_1DAA (retsize: 2;)
	sp = sp + 0x0022
	ax = bp - 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0020:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001F:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001E:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = dx
	al = Mem0[ss:bp - 0x0024:byte]
	SCZO = cond(Mem0[ss:bp - 0x0020:byte] - al)
	branch Test(UGE,C) l01D7_1BE9
	// succ:  l01D7_1BDF l01D7_1BE9
l01D7_1BDF:
	v24 = Mem0[ss:bp - 0x000C:word16] + 0xD600
	Mem0[ss:bp - 0x000C:word16] = v24
	SCZO = cond(v24)
	v25 = Mem0[ss:bp - 0x000A:word16] + 0x0083 + C
	Mem0[ss:bp - 0x000A:word16] = v25
	SCZO = cond(v25)
	// succ:  l01D7_1BE9
l01D7_1BE9:
	ax = Mem0[ss:bp - 0x000C:word16]
	dx = Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - dx)
	branch Test(ULT,C) l01D7_1C06
	// succ:  l01D7_1BF4 l01D7_1C06
l01D7_1BF4:
	branch Test(UGT,CZ) l01D7_1BFB
	// succ:  l01D7_1BF6 l01D7_1BFB
l01D7_1BF6:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULE,CZ) l01D7_1C06
	// succ:  l01D7_1BFB l01D7_1C06
l01D7_1BFB:
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1CB4 (retsize: 2;)
	sp = sp + 0x0002
l01D7_1C06:
	SCZO = cond(Mem0[ss:bp - 0x0016:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_1C15
	// succ:  l01D7_1C0C l01D7_1C15
l01D7_1C0C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0016:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l01D7_1C15
l01D7_1C15:
	SCZO = cond(Mem0[ss:bp - 0x001A:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_1C5D
	// succ:  l01D7_1C1B l01D7_1C5D
l01D7_1C1B:
	ax = bp - 0x002C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cl = 0x05
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax - Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	dx = ax
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp + 0x000A:word16]
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	bx = ax
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	dx = dx + 0x0001
	SZO = cond(dx)
	dx = dx + 0x0001
	SZO = cond(dx)
	dx = dx << cl
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	ax = bx + 0x0002
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = bp - 0x002C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l01D7_1C5D
l01D7_1C5D:
	SCZO = cond(Mem0[ss:bp - 0x0018:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_1C6B
	goto l01D7_1C63
	// succ:  l01D7_1C63 l01D7_1C61_thunk_fn0177_D714
l01D7_1C61_thunk_fn0177_D714:
	call fn0177_D714 (retsize: 0;)
	return
	// succ:  fn0177_DA75_exit
l01D7_1C63:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01D7_1C66_thunk_fn0177_D714
l01D7_1C66_thunk_fn0177_D714:
	call fn0177_D714 (retsize: 0;)
	return
	// succ:  fn0177_DA75_exit
fn0177_DA75_exit:


// fn01D7_1CB4
// Return size: 4
void fn01D7_1CB4()
fn01D7_1CB4_entry:
	// succ:  l01D7_1CB4
l01D7_1CB4:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0012
	SCZO = cond(sp)
	ax = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x000E:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x000D:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x000C:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x000B:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	ax = ax + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	// succ:  l01D7_1D21
l01D7_1D21:
	ax = bp - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0012:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0011:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0010:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x000F:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	al = Mem0[ss:bp - 0x000E:byte]
	SCZO = cond(Mem0[ss:bp - 0x0012:byte] - al)
	branch Test(UGE,C) l01D7_1D8D
	// succ:  l01D7_1D83 l01D7_1D8D
l01D7_1D83:
	v17 = Mem0[ss:bp - 0x0006:word16] + 0xD600
	Mem0[ss:bp - 0x0006:word16] = v17
	SCZO = cond(v17)
	v18 = Mem0[ss:bp - 0x0004:word16] + 0x0083 + C
	Mem0[ss:bp - 0x0004:word16] = v18
	SCZO = cond(v18)
	// succ:  l01D7_1D8D
l01D7_1D8D:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - dx)
	branch Test(UGT,CZ) l01D7_1D21
	// succ:  l01D7_1D98 l01D7_1D21
l01D7_1D98:
	branch Test(ULT,C) l01D7_1D9F
	// succ:  l01D7_1D9A l01D7_1D9F
l01D7_1D9A:
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - ax)
	branch Test(UGT,CZ) l01D7_1D21
	// succ:  l01D7_1D9F l01D7_1D21
l01D7_1D9F:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_1CB4_exit
fn01D7_1CB4_exit:


// fn01D7_1DAA
// Return size: 4
void fn01D7_1DAA()
fn01D7_1DAA_entry:
	// succ:  l01D7_1DAA
l01D7_1DAA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0024:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0020:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0022:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x001C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x001A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0016:word16]
	ax = 0x00C6
	dx = 0x0088
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	StretchBlt(Mem0[ss:sp + 22:word16], Mem0[ss:sp + 20:word16], Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x001E:word16]
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0022:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x001C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x001A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0016:word16]
	ax = 0x0086
	dx = 0x00EE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	StretchBlt(Mem0[ss:sp + 22:word16], Mem0[ss:sp + 20:word16], Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0026:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0022:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BitBlt(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0014
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01D7_1E50
	// succ:  l01D7_1E49 l01D7_1E50
l01D7_1E49:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	SelectObject(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l01D7_1E50
l01D7_1E50:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_1DAA_exit
fn01D7_1DAA_exit:


// fn01D7_1E5C
// Return size: 4
void fn01D7_1E5C()
fn01D7_1E5C_entry:
	// succ:  l01D7_1E5C
l01D7_1E5C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x010A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x02)
	branch Test(NE,Z) l01D7_1E7A
	// succ:  l01D7_1E73 l01D7_1E7A
l01D7_1E73:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EB0:word16]
	goto l01D7_1E7E
	// succ:  l01D7_1E7E
l01D7_1E7A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D26:word16]
	// succ:  l01D7_1E7E
l01D7_1E7E:
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetSubMenu(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x000A:word16] = ax
	di = 0x000A
	Mem0[ss:bp - 0x0004:word16] = 0x0009
	Mem0[ss:bp - 0x0006:word16] = 0x082E
	bx = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	// succ:  l01D7_1E9D
l01D7_1E9D:
	SCZO = cond(Mem0[ds:bx:word16] - 0xFFFF)
	branch Test(NE,Z) l01D7_1EA8
	// succ:  l01D7_1EA2 l01D7_1EA8
l01D7_1EA2:
	di = di - 0x0001
	SZO = cond(di)
	bx = bx - 0x0001
	SZO = cond(bx)
	bx = bx - 0x0001
	SZO = cond(bx)
	dx = dx - 0x0001
	SZO = cond(dx)
	branch Test(NS,S) l01D7_1E9D
	// succ:  l01D7_1EA8 l01D7_1E9D
l01D7_1EA8:
	Mem0[ss:bp - 0x0008:word16] = di
	si = si - si
	SCZO = cond(si)
	cx = di
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(GT,SZO) l01D7_1EB6
	// succ:  l01D7_1EB3 l01D7_1EB6
l01D7_1EB3:
	goto l01D7_1F43
	// succ:  l01D7_1F43
l01D7_1EB6:
	di = 0x081C
	// succ:  l01D7_1EB9
l01D7_1EB9:
	SCZO = cond(Mem0[ds:di:word16] - 0xFFFF)
	branch Test(NE,Z) l01D7_1ED2
	// succ:  l01D7_1EBE l01D7_1ED2
l01D7_1EBE:
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x006C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0372
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	goto l01D7_1EF7
	// succ:  l01D7_1EF7
l01D7_1ED2:
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0027
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = Mem0[ds:di:word16]
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x063A:word16]
	bx = bx + 0x063A
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0004:byte]
	ax = (int16) al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01D7_1EF7
l01D7_1EF7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	SCZO = cond(Mem0[ds:0x081A:word16] - si)
	branch Test(LE,SZO) l01D7_1F1E
	// succ:  l01D7_1F04 l01D7_1F1E
l01D7_1F04:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	ax = si + 0x0095
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ModifyMenu(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	goto l01D7_1F38
	// succ:  l01D7_1F38
l01D7_1F1E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	ax = 0x006A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = si + 0x0095
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x010A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InsertMenu(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	// succ:  l01D7_1F38
l01D7_1F38:
	di = di + 0x0001
	SZO = cond(di)
	di = di + 0x0001
	SZO = cond(di)
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - si)
	branch Test(LE,SZO) l01D7_1F43
	// succ:  l01D7_1F40 l01D7_1F43
l01D7_1F40:
	goto l01D7_1EB9
	// succ:  l01D7_1EB9
l01D7_1F43:
	SCZO = cond(Mem0[ds:0x081A:word16] - si)
	branch Test(LE,SZO) l01D7_1F61
	// succ:  l01D7_1F49 l01D7_1F61
l01D7_1F49:
	di = Mem0[ss:bp - 0x000A:word16]
	// succ:  l01D7_1F4C
l01D7_1F4C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = si + 0x0095
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	DeleteMenu(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(Mem0[ds:0x081A:word16] - si)
	branch Test(GT,SZO) l01D7_1F4C
	// succ:  l01D7_1F61 l01D7_1F4C
l01D7_1F61:
	ax = Mem0[ss:bp - 0x0008:word16]
	Mem0[ds:0x081A:word16] = ax
	si = 0x0006
	// succ:  l01D7_1F6A
l01D7_1F6A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EA8:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	GetDlgItem(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01D7_1F85
	// succ:  l01D7_1F7A l01D7_1F85
l01D7_1F7A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l01D7_1F85
l01D7_1F85:
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x0010)
	branch Test(LT,SO) l01D7_1F6A
	// succ:  l01D7_1F8B l01D7_1F6A
l01D7_1F8B:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_1E5C_exit
fn01D7_1E5C_exit:


// fn01D7_1F96
// Return size: 4
void fn01D7_1F96()
fn01D7_1F96_entry:
	// succ:  l01D7_1F96
l01D7_1F96:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_3854 (retsize: 2;)
	sp = sp + 0x0002
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn01D7_2006 (retsize: 2;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00BF_0780 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(Mem0[ds:0x00B6:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_1FE0
	// succ:  l01D7_1FDB l01D7_1FE0
l01D7_1FDB:
	v13 = Mem0[ds:0x4D1A:byte] | 0x01
	Mem0[ds:0x4D1A:byte] = v13
	SZO = cond(Mem0[ds:0x4D1A:byte])
	C = false
	// succ:  l01D7_1FE0
l01D7_1FE0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	UpdateWindow(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	SCZO = cond(Mem0[ds:0x00B6:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_1FF5
	// succ:  l01D7_1FF0 l01D7_1FF5
l01D7_1FF0:
	v15 = Mem0[ds:0x4D1A:byte] & 0xFE
	Mem0[ds:0x4D1A:byte] = v15
	SZO = cond(Mem0[ds:0x4D1A:byte])
	C = false
	// succ:  l01D7_1FF5
l01D7_1FF5:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_3854 (retsize: 2;)
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_1F96_exit
fn01D7_1F96_exit:


// fn01D7_2006
// Return size: 4
void fn01D7_2006()
fn01D7_2006_entry:
	// succ:  l01D7_2006
l01D7_2006:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = si - si
	SCZO = cond(si)
	di = Mem0[ss:bp + 0x000C:word16]
	// succ:  l01D7_201A
l01D7_201A:
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x000A)
	branch Test(GE,SO) l01D7_2068
	// succ:  l01D7_2020 l01D7_2068
l01D7_2020:
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0724 (retsize: 4;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_2058
	// succ:  l01D7_2035 l01D7_2058
l01D7_2035:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn00F7_1178 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(ax - 0x000A)
	branch Test(UGT,CZ) l01D7_2068
	// succ:  l01D7_2049 l01D7_2068
l01D7_2049:
	ax = Mem0[ss:bp - 0x0008:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = Mem0[ss:bp - 0x000A:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	goto l01D7_201A
	// succ:  l01D7_201A
l01D7_2058:
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0724 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l01D7_2068
l01D7_2068:
	SCZO = cond(si - 0x000A)
	branch Test(NE,Z) l01D7_2079
	// succ:  l01D7_206D l01D7_2079
l01D7_206D:
	ax = Mem0[ss:bp - 0x0004:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = Mem0[ss:bp - 0x0006:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	// succ:  l01D7_2079
l01D7_2079:
	ax = Mem0[ss:bp - 0x0008:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = ax
	ax = Mem0[ss:bp - 0x000A:word16]
	bx = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:bx:word16] = ax
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_2006_exit
fn01D7_2006_exit:


// fn01D7_2096
// Return size: 4
void fn01D7_2096()
fn01D7_2096_entry:
	// succ:  l01D7_2096
l01D7_2096:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x001C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0004:word16] = 0x0004
	cl = 0x04
	di = Mem0[ss:bp + 0x0006:word16]
	di = di >>u cl
	SCZO = cond(di)
	di = di + 0x0004
	SCZO = cond(di)
	SCZO = cond(Mem0[ds:0x00B6:word16] - 0x0000)
	branch Test(NE,Z) l01D7_20BE
	// succ:  l01D7_20BB l01D7_20BE
l01D7_20BB:
	goto l01D7_227E
	// succ:  l01D7_227E
l01D7_20BE:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(EQ,Z) l01D7_20C8
	// succ:  l01D7_20C5 l01D7_20C8
l01D7_20C5:
	goto l01D7_227E
	// succ:  l01D7_227E
l01D7_20C8:
	ax = bp - 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0018:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0017:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0016:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0015:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	ax = ax + 0x000E
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l01D7_213A
	// succ:  l01D7_2137 l01D7_213A
l01D7_2137:
	goto l01D7_227E
	// succ:  l01D7_227E
l01D7_213A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetROP2(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0014:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = 0x0010
	Mem0[ss:bp - 0x000E:word16] = 0x0000
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l01D7_2158
	// succ:  l01D7_2155 l01D7_2158
l01D7_2155:
	goto l01D7_226B
	// succ:  l01D7_226B
l01D7_2158:
	Mem0[ss:bp - 0x0012:word16] = di
	Mem0[ss:bp - 0x0010:word16] = si
	si = Mem0[ss:bp - 0x0008:word16]
	di = Mem0[ss:bp + 0x000A:word16]
	// succ:  l01D7_2164
l01D7_2164:
	ax = Mem0[ss:bp - 0x0012:word16]
	ax = ax - 0x0004
	SCZO = cond(ax)
	SCZO = cond(ax - Mem0[ss:bp - 0x000E:word16])
	branch Test(ULE,CZ) l01D7_2195
	// succ:  l01D7_216F l01D7_2195
l01D7_216F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = di
	ax = ax - si
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = Mem0[ss:bp + 0x0008:word16]
	cx = cx - si
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = di
	cx = cx + si
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = Mem0[ss:bp + 0x0008:word16]
	cx = cx + si
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	Arc(Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0012
	// succ:  l01D7_2195
l01D7_2195:
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - 0x0004)
	branch Test(ULT,C) l01D7_21C6
	// succ:  l01D7_219B l01D7_21C6
l01D7_219B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = di
	cx = si - 0x0040
	ax = ax - cx
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(cx)
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = si - 0x0040
	cx = cx + di
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = si - 0x0040
	cx = cx + Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	Arc(Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0012
	// succ:  l01D7_21C6
l01D7_21C6:
	ax = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x001C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001B:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x001A:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0019:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	al = Mem0[ss:bp - 0x0018:byte]
	SCZO = cond(Mem0[ss:bp - 0x001C:byte] - al)
	branch Test(UGE,C) l01D7_2232
	// succ:  l01D7_2228 l01D7_2232
l01D7_2228:
	v21 = Mem0[ss:bp - 0x0006:word16] + 0xD600
	Mem0[ss:bp - 0x0006:word16] = v21
	SCZO = cond(v21)
	v22 = Mem0[ss:bp - 0x0004:word16] + 0x0083 + C
	Mem0[ss:bp - 0x0004:word16] = v22
	SCZO = cond(v22)
	// succ:  l01D7_2232
l01D7_2232:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - dx)
	branch Test(ULT,C) l01D7_224F
	// succ:  l01D7_223D l01D7_224F
l01D7_223D:
	branch Test(UGT,CZ) l01D7_2244
	// succ:  l01D7_223F l01D7_2244
l01D7_223F:
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - ax)
	branch Test(ULE,CZ) l01D7_224F
	// succ:  l01D7_2244 l01D7_224F
l01D7_2244:
	ax = Mem0[ss:bp - 0x000C:word16]
	ax = ax - Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1CB4 (retsize: 2;)
	sp = sp + 0x0002
l01D7_224F:
	v24 = Mem0[ss:bp - 0x000C:word16] + 0x000E
	Mem0[ss:bp - 0x000C:word16] = v24
	SCZO = cond(v24)
	v25 = Mem0[ss:bp - 0x000A:word16] + 0x00 + C
	Mem0[ss:bp - 0x000A:word16] = v25
	SCZO = cond(v25)
	si = si + 0x0010
	SCZO = cond(si)
	ax = Mem0[ss:bp - 0x0012:word16]
	v26 = Mem0[ss:bp - 0x000E:word16] + 0x0001
	Mem0[ss:bp - 0x000E:word16] = v26
	SZO = cond(v26)
	SCZO = cond(Mem0[ss:bp - 0x000E:word16] - ax)
	branch Test(UGE,C) l01D7_2268
	// succ:  l01D7_2265 l01D7_2268
l01D7_2265:
	goto l01D7_2164
	// succ:  l01D7_2164
l01D7_2268:
	si = Mem0[ss:bp - 0x0010:word16]
	// succ:  l01D7_226B
l01D7_226B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	SetROP2(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l01D7_227E
l01D7_227E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_2096_exit
fn01D7_2096_exit:


// fn01D7_228A
// Return size: 4
void fn01D7_228A()
fn01D7_228A_entry:
	// succ:  l01D7_228A
l01D7_228A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x001C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cl = 0x05
	ax = Mem0[ss:bp + 0x0006:word16]
	ax = ax - Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000E:word16] = ax
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = 0x0064
	SCZO = cond(Mem0[ds:0x00B6:word16] - 0x0000)
	branch Test(NE,Z) l01D7_22C2
	// succ:  l01D7_22BF l01D7_22C2
l01D7_22BF:
	call fn0177_E436 (retsize: 0;)
	return
	// succ:  l01D7_2464 fn01D7_228A_exit
l01D7_22C2:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(EQ,Z) l01D7_22CC
	// succ:  l01D7_22C9 l01D7_22CC
l01D7_22C9:
	call fn0177_E436 (retsize: 0;)
	return
	// succ:  l01D7_2464 fn01D7_228A_exit
l01D7_22CC:
	ax = bp - 0x0016
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0015:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0014:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	ax = ax + 0x0001
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0013:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l01D7_233E
	// succ:  l01D7_233B l01D7_233E
l01D7_233B:
	call fn0177_E436 (retsize: 0;)
	return
	// succ:  l01D7_2464 fn01D7_228A_exit
l01D7_233E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetROP2(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0012:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ax = Mem0[ss:bp - 0x000E:word16]
	ax = ax + 0x0020
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x000C:word16]
	ax = ax + 0x0020
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateEllipticRgn(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01D7_2377
	// succ:  l01D7_236A l01D7_2377
l01D7_236A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	SelectClipRgn(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01D7_2377
l01D7_2377:
	Mem0[ss:bp - 0x0010:word16] = si
	di = Mem0[ss:bp - 0x000E:word16]
	// succ:  l01D7_237A_thunk_fn0177_E436
l01D7_237A_thunk_fn0177_E436:
	call fn0177_E436 (retsize: 0;)
	return
	// succ:  fn01D7_228A_exit
fn01D7_228A_exit:


// fn0177_E42A
// Return size: 0
void fn0177_E42A()
fn0177_E42A_entry:
	// succ:  l0177_E42A
l0177_E42A:
	sp = fp
	SZO = cond(Mem0[ss:bp - 0x07AA + di:byte] & 0x39)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	D = false
	branch Test(UGE,C) l0177_E431_thunk_fn0177_E436
	goto l0177_E431_thunk_fn0177_E433
	// succ:  l0177_E431_thunk_fn0177_E433 l0177_E431_thunk_fn0177_E436
l0177_E42A:
	dx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(Mem0[ss:bp - 0x0004:word16] - dx)
	branch Test(UGE,C) l01D7_2436
	// succ:  l0177_E430_thunk_fn0177_E433 l0177_E430_thunk_fn0177_E436
l0177_E430_thunk_fn0177_E433:
	call fn0177_E433 (retsize: 0;)
	return
	// succ:  fn0177_E42A_exit
l0177_E430_thunk_fn0177_E436:
	call fn0177_E436 (retsize: 0;)
	return
	// succ:  fn0177_E42A_exit
l0177_E431_thunk_fn0177_E433:
	call fn0177_E433 (retsize: 0;)
	return
	// succ:  fn0177_E42A_exit l0177_E431_thunk_fn0177_E433
l0177_E431_thunk_fn0177_E433:
	call fn0177_E433 (retsize: 0;)
	return
	// succ:  fn0177_E42A_exit
l0177_E431_thunk_fn0177_E436:
	call fn0177_E436 (retsize: 0;)
	return
	// succ:  fn0177_E42A_exit
fn0177_E42A_exit:


// fn0177_E433
// Return size: 0
void fn0177_E433()
fn0177_E433_entry:
	call fn0177_E436 (retsize: 0;)
	return
	// succ:  l01D7_2433 fn0177_E433_exit
l01D7_237D:
	Mem0[ss:bp - 0x0004:word16] = 0x0064
	// succ:  l01D7_2382
l01D7_2382:
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	si = si + di
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	Mem0[ss:bp - 0x001C:word16] = ax
	MoveTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	ax = si + 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	LineTo(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	v9 = Mem0[ss:bp - 0x0004:word16] - 0x0001
	Mem0[ss:bp - 0x0004:word16] = v9
	SZO = cond(v9)
	branch Test(NE,Z) l01D7_2382
	// succ:  l01D7_23BC l01D7_2382
l01D7_23BC:
	ax = bp - 0x001A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x001A:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0019:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0018:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0017:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	al = Mem0[ss:bp - 0x0016:byte]
	SCZO = cond(Mem0[ss:bp - 0x001A:byte] - al)
	branch Test(UGE,C) l01D7_2428
	// succ:  l01D7_241E l01D7_2428
l01D7_241E:
	v20 = Mem0[ss:bp - 0x0006:word16] + 0xD600
	Mem0[ss:bp - 0x0006:word16] = v20
	SCZO = cond(v20)
	v21 = Mem0[ss:bp - 0x0004:word16] + 0x0083 + C
	Mem0[ss:bp - 0x0004:word16] = v21
	SCZO = cond(v21)
	// succ:  l01D7_2428
l01D7_2428:
	ax = Mem0[ss:bp - 0x000A:word16]
	// succ:  l01D7_2428_thunk_fn0177_E42A
l01D7_2428_thunk_fn0177_E42A:
	call fn0177_E42A (retsize: 0;)
	return
	// succ:  fn0177_E433_exit
l01D7_2433:
	goto l01D7_237D
	// succ:  l01D7_237D
fn0177_E433_exit:


// fn0177_E436
// Return size: 0
void fn0177_E436()
fn0177_E436_entry:
	// succ:  l01D7_2436
l01D7_2436:
	branch Test(UGT,CZ) l01D7_2440
	// succ:  l01D7_2438 l01D7_2440
l01D7_2438:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(UGE,C) l01D7_2440
	// succ:  l01D7_243D l01D7_2440
l01D7_243D:
	call fn0177_E433 (retsize: 0;)
	return
	// succ:  l01D7_237D fn0177_E436_exit
l01D7_2440:
	si = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	SetROP2(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l01D7_2464
l01D7_2464:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_E436_exit
fn0177_E436_exit:


// fn01D7_2470
// Return size: 4
void fn01D7_2470()
fn01D7_2470_entry:
	// succ:  l01D7_2470
l01D7_2470:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0018
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cl = 0x05
	// succ:  l01D7_247F_thunk_fn0177_E480
l01D7_247F_thunk_fn0177_E480:
	call fn0177_E480 (retsize: 0;)
	return
	// succ:  fn01D7_2470_exit
fn01D7_2470_exit:


// fn0177_E480
// Return size: 0
void fn0177_E480()
fn0177_E480_entry:
	// succ:  l0177_E480
l0177_E480:
	sp = fp
	ax = ax + 0x7E8B
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	di = di - Mem0[ds:0x3D84:word16]
	SCZO = cond(di)
	goto l0177_E484_thunk_fn0177_E488
	// succ:  l0177_E484_thunk_fn0177_E488
l0177_E480:
	di = Mem0[ss:bp + 0x0006:word16]
	di = di - Mem0[ds:0x3D84:word16]
	SCZO = cond(di)
	// succ:  l0177_E483_thunk_fn0177_E486
l0177_E483_thunk_fn0177_E486:
	call fn0177_E486 (retsize: 0;)
	return
	// succ:  fn0177_E480_exit
l0177_E484_thunk_fn0177_E488:
	call fn0177_E488 (retsize: 0;)
	return
	// succ:  fn0177_E480_exit
fn0177_E480_exit:


// fn0177_E486
// Return size: 0
void fn0177_E486()
fn0177_E486_entry:
	// succ:  l0177_E486
l0177_E486:
	sp = fp
	SZO = cond(Mem0[ds:di:byte] & bh)
	C = false
	goto l0177_E486_thunk_fn0177_E488
	// succ:  l0177_E486_thunk_fn0177_E488
l0177_E486:
	di = di << cl
	SCZO = cond(di)
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000E:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = 0x0064
	SCZO = cond(Mem0[ds:0x00B6:word16] - 0x0000)
	branch Test(NE,Z) l01D7_24A5
	goto l0177_E49E_thunk_fn0177_E4A2
	// succ:  l0177_E49E_thunk_fn0177_E4A2 l0177_E49E_thunk_fn0177_E4A5
l0177_E486_thunk_fn0177_E488:
	call fn0177_E488 (retsize: 0;)
	return
	// succ:  fn0177_E486_exit
l0177_E49E_thunk_fn0177_E4A2:
	call fn0177_E4A2 (retsize: 0;)
	return
	// succ:  fn0177_E486_exit
l0177_E49E_thunk_fn0177_E4A5:
	call fn0177_E4A5 (retsize: 0;)
	return
	// succ:  fn0177_E486_exit
fn0177_E486_exit:


// fn0177_E488
// Return size: 0
void fn0177_E488()
fn0177_E488_entry:
	// succ:  l0177_E488
l0177_E488:
	sp = fp
	di = di << cl
	SCZO = cond(di)
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000E:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = 0x0064
	SCZO = cond(Mem0[ds:0x00B6:word16] - 0x0000)
	branch Test(NE,Z) l0177_E4A0_thunk_fn0177_E4A5
	goto l0177_E4A0_thunk_fn0177_E4A2
	// succ:  l0177_E4A0_thunk_fn0177_E4A2 l0177_E4A0_thunk_fn0177_E4A5
l0177_E488:
	di = di << cl
	SCZO = cond(di)
	ax = Mem0[ss:bp + 0x0008:word16]
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000E:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = 0x0064
	SCZO = cond(Mem0[ds:0x00B6:word16] - 0x0000)
	branch Test(NE,Z) l0177_E4A0_thunk_fn0177_E4A5
	goto l0177_E4A0_thunk_fn0177_E4A2
	// succ:  l0177_E4A0_thunk_fn0177_E4A2 l0177_E4A0_thunk_fn0177_E4A5
l0177_E4A0_thunk_fn0177_E4A2:
	call fn0177_E4A2 (retsize: 0;)
	return
	// succ:  fn0177_E488_exit l0177_E4A0_thunk_fn0177_E4A2
l0177_E4A0_thunk_fn0177_E4A2:
	call fn0177_E4A2 (retsize: 0;)
	return
	// succ:  fn0177_E488_exit
l0177_E4A0_thunk_fn0177_E4A2:
	call fn0177_E4A2 (retsize: 0;)
	return
	// succ:  fn0177_E488_exit l0177_E4A0_thunk_fn0177_E4A2
l0177_E4A0_thunk_fn0177_E4A2:
	call fn0177_E4A2 (retsize: 0;)
	return
	// succ:  fn0177_E488_exit
l0177_E4A0_thunk_fn0177_E4A5:
	call fn0177_E4A5 (retsize: 0;)
	return
	// succ:  fn0177_E488_exit
l0177_E4A0_thunk_fn0177_E4A5:
	call fn0177_E4A5 (retsize: 0;)
	return
	// succ:  fn0177_E488_exit
fn0177_E488_exit:


// fn0177_E4A2
// Return size: 0
void fn0177_E4A2()
fn0177_E4A2_entry:
	// succ:  l01D7_24A2
l01D7_24A2:
	call fn0177_E4A5 (retsize: 0;)
	return
	// succ:  l01D7_2635 fn0177_E4A2_exit
l01D7_2635:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_E4A2_exit
fn0177_E4A2_exit:


// fn0177_E4A5
// Return size: 0
void fn0177_E4A5()
fn0177_E4A5_entry:
	// succ:  l01D7_24A5
l01D7_24A5:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(EQ,Z) l01D7_24AF
	// succ:  l01D7_24AC l01D7_24AF
l01D7_24AC:
	call fn0177_E4A2 (retsize: 0;)
	return
	// succ:  l01D7_2635 fn0177_E4A5_exit
l01D7_24AF:
	ax = bp - 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0014:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0013:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0012:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	ax = ax + 0x0001
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0011:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01D7_2522
	// succ:  l01D7_251F l01D7_2522
l01D7_251F:
	call fn0177_E4A2 (retsize: 0;)
	return
	// succ:  l01D7_2635 fn0177_E4A5_exit
l01D7_2522:
	Mem0[ss:bp - 0x0010:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = di + 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x000E:word16]
	ax = ax + 0x0020
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	CreateEllipticRgn(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01D7_254E
	// succ:  l01D7_253F l01D7_254E
l01D7_253F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SelectClipRgn(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	DeleteObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01D7_254E
l01D7_254E:
	Mem0[ss:bp - 0x0004:word16] = 0x0064
	// succ:  l01D7_2553
l01D7_2553:
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	si = si + Mem0[ss:bp - 0x0010:word16]
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = di + Mem0[ss:bp - 0x000E:word16]
	SCZO = cond(di)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_0314 (retsize: 4;)
	sp = sp + 0x0002
	bx = ax
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx << 0x0001
	SCZO = cond(bx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x01D7:bx + 0x2643:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[0x01D7:bx + 0x2641:word16]
	SetPixel(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	v21 = Mem0[ss:bp - 0x0004:word16] - 0x0001
	Mem0[ss:bp - 0x0004:word16] = v21
	SZO = cond(v21)
	branch Test(NE,Z) l01D7_2553
	// succ:  l01D7_2597 l01D7_2553
l01D7_2597:
	ax = bp - 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0A38 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0064
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x003C
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0018:byte]
	ah = ah - ah
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0017:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0016:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0B0A (retsize: 4;)
	sp = sp + 0x0008
	cl = Mem0[ss:bp - 0x0015:byte]
	ch = ch - ch
	SCZO = cond(ch)
	ax = ax + cx
	SCZO = cond(ax)
	dx = dx + 0x00 + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0004:word16] = dx
	al = Mem0[ss:bp - 0x0014:byte]
	SCZO = cond(Mem0[ss:bp - 0x0018:byte] - al)
	branch Test(UGE,C) l01D7_2603
	// succ:  l01D7_25F9 l01D7_2603
l01D7_25F9:
	v22 = Mem0[ss:bp - 0x0006:word16] + 0xD600
	Mem0[ss:bp - 0x0006:word16] = v22
	SCZO = cond(v22)
	v23 = Mem0[ss:bp - 0x0004:word16] + 0x0083 + C
	Mem0[ss:bp - 0x0004:word16] = v23
	SCZO = cond(v23)
	// succ:  l01D7_2603
l01D7_2603:
	ax = Mem0[ss:bp - 0x0006:word16]
	dx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - dx)
	branch Test(ULE,CZ) l01D7_2611
	// succ:  l01D7_260E l01D7_2611
l01D7_260E:
	goto l01D7_254E
	// succ:  l01D7_254E
l01D7_2611:
	branch Test(ULT,C) l01D7_261B
	// succ:  l01D7_2613 l01D7_261B
l01D7_2613:
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - ax)
	branch Test(ULE,CZ) l01D7_261B
	// succ:  l01D7_2618 l01D7_261B
l01D7_2618:
	goto l01D7_254E
	// succ:  l01D7_254E
l01D7_261B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l01D7_2630_thunk_fn0177_E4A2
l01D7_2630_thunk_fn0177_E4A2:
	call fn0177_E4A2 (retsize: 0;)
	return
	// succ:  fn0177_E4A5_exit
fn0177_E4A5_exit:


// fn0177_ED9C
// Return size: 4
void fn0177_ED9C()
fn0177_ED9C_entry:
	// succ:  l0177_ED9C
l0177_ED9C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0012:word16]
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SetRect(Mem0[ss:sp + 8:segptr32], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = cx
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BitBlt(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	SelectClipRgn(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetStockObject(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	FillRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	SCZO = cond(Mem0[ss:bp + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l0177_EDFE_thunk_fn0177_EE2A
	goto l0177_EE00
	// succ:  l0177_EE00 l0177_EDFE_thunk_fn0177_EE2A
l0177_EDFE_thunk_fn0177_EE2A:
	call fn0177_EE2A (retsize: 4;)
	return
	// succ:  fn0177_ED9C_exit
l0177_EE00:
	di = Mem0[ss:bp + 0x0006:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l0177_EE10
	// succ:  l0177_EE07 l0177_EE10
l0177_EE07:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SelectClipRgn(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0177_EE10
l0177_EE10:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	// succ:  l0177_EE13_thunk_fn0177_EE14
l0177_EE13_thunk_fn0177_EE14:
	call fn0177_EE14 (retsize: 0;)
	return
	// succ:  fn0177_ED9C_exit
fn0177_ED9C_exit:


// fn0177_EE14
// Return size: 4
void fn0177_EE14()
fn0177_EE14_entry:
	// succ:  l0177_EE14
l0177_EE14:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	DrawIcon(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l0177_EE1F_thunk_fn0177_EE2A
	goto l0177_EE21
	// succ:  l0177_EE21 l0177_EE1F_thunk_fn0177_EE2A
l0177_EE1F_thunk_fn0177_EE2A:
	call fn0177_EE2A (retsize: 4;)
	return
	// succ:  fn0177_EE14_exit
l0177_EE21:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SelectClipRgn(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l0177_EE25_thunk_fn0177_EE2A
l0177_EE25_thunk_fn0177_EE2A:
	call fn0177_EE2A (retsize: 4;)
	return
	// succ:  fn0177_EE14_exit
fn0177_EE14_exit:


// fn0177_EE2A
// Return size: 4
void fn0177_EE2A()
fn0177_EE2A_entry:
	// succ:  l0177_EE2A
l0177_EE2A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000E:word16]
	goto l0177_EE2D_thunk_fn0177_EE30
	// succ:  l0177_EE2D_thunk_fn0177_EE30
l0177_EE2A:
l0177_EE2D_thunk_fn0177_EE30:
	call fn0177_EE30 (retsize: 4;)
	return
	// succ:  fn0177_EE2A_exit
fn0177_EE2A_exit:


// fn0177_EE30
// Return size: 4
void fn0177_EE30()
fn0177_EE30_entry:
	// succ:  l0177_EE30
l0177_EE30:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	goto l0177_EE39_thunk_fn0177_EE3B
	// succ:  l0177_EE39_thunk_fn0177_EE3B
l0177_EE30:
l0177_EE39_thunk_fn0177_EE3B:
	call fn0177_EE3B (retsize: 4;)
	return
	// succ:  fn0177_EE30_exit
fn0177_EE30_exit:


// fn0177_EE3B
// Return size: 4
void fn0177_EE3B()
fn0177_EE3B_entry:
	// succ:  l0177_EE3B
l0177_EE3B:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0020
	goto l0177_EE3D_thunk_fn0177_EE3E
	// succ:  l0177_EE3D_thunk_fn0177_EE3E
l0177_EE3B:
l0177_EE3D_thunk_fn0177_EE3E:
	call fn0177_EE3E (retsize: 4;)
	return
	// succ:  fn0177_EE3B_exit
fn0177_EE3B_exit:


// fn0177_EE3E
// Return size: 4
void fn0177_EE3E()
fn0177_EE3E_entry:
	// succ:  l0177_EE3E
l0177_EE3E:
	sp = fp
	v7 = Mem0[ds:bx + si:byte] & al
	Mem0[ds:bx + si:byte] = v7
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BitBlt(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0014
	goto l0177_EE45_thunk_fn0177_EE4A
	// succ:  l0177_EE45_thunk_fn0177_EE4A
l0177_EE3E:
	dx = 0x00CC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	BitBlt(Mem0[ss:sp + 18:word16], Mem0[ss:sp + 16:word16], Mem0[ss:sp + 14:word16], Mem0[ss:sp + 12:word16], Mem0[ss:sp + 10:word16], Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0014
	goto l0177_EE45_thunk_fn0177_EE4A
	// succ:  l0177_EE45_thunk_fn0177_EE4A
l0177_EE45_thunk_fn0177_EE4A:
	call fn0177_EE4A (retsize: 4;)
	return
	// succ:  fn0177_EE3E_exit
l0177_EE45_thunk_fn0177_EE4A:
	call fn0177_EE4A (retsize: 4;)
	return
	// succ:  fn0177_EE3E_exit
fn0177_EE3E_exit:


// fn0177_EE4A
// Return size: 4
void fn0177_EE4A()
fn0177_EE4A_entry:
	// succ:  l0177_EE4A
l0177_EE4A:
	sp = fp
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	goto l0177_EE4C
	// succ:  l0177_EE4C
l0177_EE4A:
l0177_EE4C:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_EE4A_exit
fn0177_EE4A_exit:


// fn01D7_2E56
// Return size: 4
void fn01D7_2E56()
fn01D7_2E56_entry:
	// succ:  l01D7_2E56
l01D7_2E56:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x008A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0001)
	branch Test(NE,Z) l01D7_2EC0
fn01D7_2E56_exit:


// fn0177_EE6A
// Return size: 0
void fn0177_EE6A()
fn0177_EE6A_entry:
	// succ:  l0177_EE6A
l0177_EE6A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	goto l0177_EE6A_thunk_fn0177_EE6B
	// succ:  l0177_EE6A_thunk_fn0177_EE6B
l0177_EE6A:
	call fn0177_EE6B (retsize: 0;)
	return
	// succ:  l0177_EE6A_thunk_fn0177_EE6B l01D7_2EC0 fn0177_EE6A_exit
l0177_EE6A_thunk_fn0177_EE6B:
	call fn0177_EE6B (retsize: 0;)
	return
	// succ:  fn0177_EE6A_exit
l0177_EE6A_thunk_fn0177_EE6B:
	call fn0177_EE6B (retsize: 0;)
	return
	// succ:  fn0177_EE6A_exit
l01D7_2EC0:
	cx = cx - cx
	SCZO = cond(cx)
	di = cx
	ax = Mem0[ds:0x0480:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = Mem0[ds:0x0482:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	// succ:  l01D7_2ECD_thunk_fn0177_EE6B
l01D7_2ECD_thunk_fn0177_EE6B:
	call fn0177_EE6B (retsize: 0;)
	return
	// succ:  fn0177_EE6A_exit
fn0177_EE6A_exit:


// fn0177_EE6B
// Return size: 0
void fn0177_EE6B()
fn0177_EE6B_entry:
	// succ:  l01D7_2E6B
l01D7_2E6B:
	al = Mem0[ds:0x0480:byte]
	al = al >>u 0x01
	SCZO = cond(al)
	SCZO = cond(al - Mem0[ds:0x4D1C:byte])
	branch Test(ULE,CZ) l01D7_2E86
	// succ:  l01D7_2E76 l01D7_2E86
l01D7_2E76:
	di = di - di
	SCZO = cond(di)
	ax = Mem0[ds:0x0480:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x000A:word16] = di
l01D7_2E86:
	ax = Mem0[ds:0x0480:word16]
	// succ:  l01D7_2E86_thunk_fn0177_EE89
l01D7_2E86_thunk_fn0177_EE89:
	call fn0177_EE89 (retsize: 0;)
	return
	// succ:  fn0177_EE6B_exit
fn0177_EE6B_exit:


// fn0177_EE84
// Return size: 0
void fn0177_EE84()
fn0177_EE84_entry:
	// succ:  l0177_EE84
l0177_EE84:
	sp = fp
	Mem0[ds:bx + 0x0480 + di:byte] = Test(OV,O)
	goto l0177_EE84_thunk_fn0177_EE89
	// succ:  l0177_EE84_thunk_fn0177_EE89
l0177_EE84:
	call fn0177_EE94 (retsize: 0;)
	return
	// succ:  l0177_EE84_thunk_fn0177_EE94 fn0177_EE84_exit
l0177_EE84_thunk_fn0177_EE89:
	call fn0177_EE89 (retsize: 0;)
	return
	// succ:  fn0177_EE84_exit
l0177_EE84_thunk_fn0177_EE94:
	call fn0177_EE94 (retsize: 4;)
	return
	// succ:  fn0177_EE84_exit
fn0177_EE84_exit:


// fn0177_EE89
// Return size: 0
void fn0177_EE89()
fn0177_EE89_entry:
	// succ:  l0177_EE89
l0177_EE89:
	sp = fp
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = Mem0[ds:0x0480:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	goto l0177_EE91_thunk_fn0177_EE94
	// succ:  l0177_EE91_thunk_fn0177_EE94
l0177_EE89:
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = Mem0[ds:0x0480:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	goto l0177_EE91_thunk_fn0177_EE94
	// succ:  l0177_EE91_thunk_fn0177_EE94
l0177_EE91_thunk_fn0177_EE94:
	call fn0177_EE94 (retsize: 0;)
	return
	// succ:  fn0177_EE89_exit
l0177_EE91_thunk_fn0177_EE94:
	call fn0177_EE94 (retsize: 0;)
	return
	// succ:  fn0177_EE89_exit
fn0177_EE89_exit:


// fn0177_EE94
// Return size: 4
void fn0177_EE94()
fn0177_EE94_entry:
	// succ:  l01D7_2E94
l01D7_2E94:
	al = Mem0[ds:0x0482:byte]
	al = al >>u 0x01
	SCZO = cond(al)
	SCZO = cond(al - Mem0[ds:0x4D1D:byte])
	branch Test(ULE,CZ) l01D7_2EB4
	// succ:  l01D7_2E9F l01D7_2EB4
l01D7_2E9F:
	dx = dx - dx
	SCZO = cond(dx)
	ax = Mem0[ds:0x0482:word16]
	ax = ax >>u 0x0001
	SCZO = cond(ax)
	// succ:  l01D7_2EA6
l01D7_2EA6:
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = dx
	cx = dx
	di = Mem0[ss:bp - 0x000A:word16]
	goto l01D7_2ED0
	// succ:  l01D7_2ED0
l01D7_2EB4:
	dx = Mem0[ds:0x0482:word16]
	dx = dx >>u 0x0001
	SCZO = cond(dx)
	ax = Mem0[ds:0x0482:word16]
	goto l01D7_2EA6
	// succ:  l01D7_2EA6
l01D7_2ED0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = 0x0007
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_2F12 (retsize: 2;)
	sp = sp + 0x000A
	ax = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0069
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0385
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x008A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l01D7_2F01_thunk_fn0177_EF02
l01D7_2F01_thunk_fn0177_EF02:
	call fn0177_EF02 (retsize: 4;)
	return
	// succ:  fn0177_EE94_exit
fn0177_EE94_exit:


// fn0177_EF02
// Return size: 4
void fn0177_EF02()
fn0177_EF02_entry:
	// succ:  l0177_EF02
l0177_EF02:
	sp = fp
	return
	// succ:  fn0177_EF02_exit
l0177_EF02:
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	// succ:  l0177_EF0E
l0177_EF0E:
	return
	// succ:  fn0177_EF02_exit
fn0177_EF02_exit:


// fn01D7_2F12
// Return size: 4
void fn01D7_2F12()
fn01D7_2F12_entry:
	// succ:  l01D7_2F12
l01D7_2F12:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x000A:word16]
	bx = Mem0[ss:bp + 0x000E:word16]
	SCZO = cond(bx - di)
	branch Test(ULT,C) l01D7_2F2E
	// succ:  l01D7_2F2B l01D7_2F2E
l01D7_2F2B:
	call fn0177_EF84 (retsize: 0;)
	return
	// succ:  l01D7_2FE3 fn01D7_2F12_exit
l01D7_2F2E:
	cl = 0x06
	ax = bx
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = di
	ax = ax - bx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x000C:word16] = ax
	// succ:  l01D7_2F47_thunk_fn0177_EF84
l01D7_2F47_thunk_fn0177_EF84:
	call fn0177_EF84 (retsize: 0;)
	return
	// succ:  fn01D7_2F12_exit
fn01D7_2F12_exit:


// fn0177_EF70
// Return size: 0
void fn0177_EF70()
fn0177_EF70_entry:
	// succ:  l0177_EF70
l0177_EF70:
	sp = fp
	cx = cx + Mem0[ss:(bp + 0x2A04) + si:word16] + C
	SCZO = cond(cx)
	goto l0177_EF70_thunk_fn0177_EF74
	// succ:  l0177_EF70_thunk_fn0177_EF74
l0177_EF70:
	call fn0177_EF84 (retsize: 0;)
	return
	// succ:  l01D7_2F71 l0177_EF70_thunk_fn0177_EF84 fn0177_EF70_exit
l0177_EF70_thunk_fn0177_EF74:
	call fn0177_EF74 (retsize: 0;)
	return
	// succ:  fn0177_EF70_exit
l0177_EF70_thunk_fn0177_EF84:
	call fn0177_EF84 (retsize: 0;)
	return
	// succ:  fn0177_EF70_exit
l01D7_2F71:
	al = Mem0[ds:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	// succ:  l01D7_2F73_thunk_fn0177_EF74
l01D7_2F73_thunk_fn0177_EF74:
	call fn0177_EF74 (retsize: 0;)
	return
	// succ:  fn0177_EF70_exit
fn0177_EF70_exit:


// fn0177_EF74
// Return size: 0
void fn0177_EF74()
fn0177_EF74_entry:
	// succ:  l0177_EF74
l0177_EF74:
	sp = fp
	al = __inb(0x50)
	call fn01BF_2210 (retsize: 4;)
	sp = sp + 0x0002
	goto l0177_EF76_thunk_fn0177_EF78
	// succ:  l0177_EF76_thunk_fn0177_EF78
l0177_EF74:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_2210 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - 0x000B)
	branch Test(NE,Z) l01D7_2F84
	goto l0177_EF7D_thunk_fn0177_EF80
	// succ:  l0177_EF7D_thunk_fn0177_EF80 l0177_EF7D_thunk_fn0177_EF84
l0177_EF76_thunk_fn0177_EF78:
	call fn0177_EF78 (retsize: 0;)
	return
	// succ:  fn0177_EF74_exit
l0177_EF7D_thunk_fn0177_EF80:
	call fn0177_EF80 (retsize: 0;)
	return
	// succ:  fn0177_EF74_exit
l0177_EF7D_thunk_fn0177_EF84:
	call fn0177_EF84 (retsize: 0;)
	return
	// succ:  fn0177_EF74_exit
fn0177_EF74_exit:


// fn0177_EF78
// Return size: 0
void fn0177_EF78()
fn0177_EF78_entry:
	// succ:  l0177_EF78
l0177_EF78:
	sp = fp
	bh = bh & Mem0[ds:bx + 0x3D01:byte]
	SZO = cond(bh)
	C = false
	ax = ax | Mem0[ds:bx + si:word16]
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l0177_EF7E_thunk_fn0177_EF84
	goto l0177_EF7E_thunk_fn0177_EF80
	// succ:  l0177_EF7E_thunk_fn0177_EF80 l0177_EF7E_thunk_fn0177_EF84
l0177_EF78:
	SCZO = cond(ax - 0x000B)
	branch Test(NE,Z) l0177_EF7E_thunk_fn0177_EF84
	goto l0177_EF7E_thunk_fn0177_EF80
	// succ:  l0177_EF7E_thunk_fn0177_EF80 l0177_EF7E_thunk_fn0177_EF84
l0177_EF7E_thunk_fn0177_EF80:
	call fn0177_EF80 (retsize: 0;)
	return
	// succ:  fn0177_EF78_exit l0177_EF7E_thunk_fn0177_EF80
l0177_EF7E_thunk_fn0177_EF80:
	call fn0177_EF80 (retsize: 0;)
	return
	// succ:  fn0177_EF78_exit
l0177_EF7E_thunk_fn0177_EF80:
	call fn0177_EF80 (retsize: 0;)
	return
	// succ:  fn0177_EF78_exit l0177_EF7E_thunk_fn0177_EF80
l0177_EF7E_thunk_fn0177_EF80:
	call fn0177_EF80 (retsize: 0;)
	return
	// succ:  fn0177_EF78_exit
l0177_EF7E_thunk_fn0177_EF84:
	call fn0177_EF84 (retsize: 0;)
	return
	// succ:  fn0177_EF78_exit
l0177_EF7E_thunk_fn0177_EF84:
	call fn0177_EF84 (retsize: 0;)
	return
	// succ:  fn0177_EF78_exit
fn0177_EF78_exit:


// fn0177_EF80
// Return size: 0
void fn0177_EF80()
fn0177_EF80_entry:
	// succ:  l01D7_2F80
l01D7_2F80:
	v4 = Mem0[ds:si + 0x0001:byte] & 0xEF
	Mem0[ds:si + 0x0001:byte] = v4
	SZO = cond(Mem0[ds:si + 0x0001:byte])
	C = false
	// succ:  l01D7_2F80_thunk_fn0177_EF84
l01D7_2F80_thunk_fn0177_EF84:
	call fn0177_EF84 (retsize: 0;)
	return
	// succ:  fn0177_EF80_exit
fn0177_EF80_exit:


// fn0177_EF84
// Return size: 0
void fn0177_EF84()
fn0177_EF84_entry:
	goto l01D7_2F84
	// succ:  l01D7_2F84
l01D7_2F4A:
	ax = Mem0[ss:bp - 0x0008:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = Mem0[ss:bp + 0x0008:word16]
	dx = Mem0[ss:bp + 0x000C:word16]
	SCZO = cond(dx - bx)
	branch Test(UGE,C) l01D7_2FD6
	// succ:  l01D7_2F5A l01D7_2FD6
l01D7_2F5A:
	ax = bx
	ax = ax - dx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	si = Mem0[ss:bp - 0x0004:word16]
	di = Mem0[ss:bp + 0x0006:word16]
	// succ:  l01D7_2F67
l01D7_2F67:
	v21 = Mem0[ds:si + 0x0001:byte] | 0x02
	Mem0[ds:si + 0x0001:byte] = v21
	SZO = cond(Mem0[ds:si + 0x0001:byte])
	C = false
	SZO = cond(di & 0x0001)
	C = false
	branch Test(EQ,Z) l01D7_2F84
l01D7_2F84:
	SZO = cond(di & 0x0002)
	C = false
	branch Test(EQ,Z) l01D7_2F97
	// succ:  l01D7_2F8A l01D7_2F97
l01D7_2F8A:
	SCZO = cond(Mem0[ds:si:byte] - 0x19)
	branch Test(NE,Z) l01D7_2F97
	// succ:  l01D7_2F8F l01D7_2F97
l01D7_2F8F:
	ax = Mem0[ds:si:word16]
	al = al & 0x10
	SZO = cond(al)
	C = false
	al = al | 0x10
	SZO = cond(al)
	C = false
	Mem0[ds:si:word16] = ax
	// succ:  l01D7_2F97
l01D7_2F97:
	SZO = cond(di & 0x0004)
	C = false
	branch Test(EQ,Z) l01D7_2FCE
	// succ:  l01D7_2F9D l01D7_2FCE
l01D7_2F9D:
	SZO = cond(Mem0[ds:si + 0x0001:byte] & 0x08)
	C = false
	branch Test(EQ,Z) l01D7_2FCE
	// succ:  l01D7_2FA3 l01D7_2FCE
l01D7_2FA3:
	SCZO = cond(Mem0[ds:si:byte] - 0x01)
	branch Test(NE,Z) l01D7_2FB2
	// succ:  l01D7_2FA8 l01D7_2FB2
l01D7_2FA8:
	ax = Mem0[ds:si:word16]
	al = al & 0x02
	SZO = cond(al)
	C = false
	al = al | 0x02
	SZO = cond(al)
	C = false
	goto l01D7_2FC8
	// succ:  l01D7_2FC8
l01D7_2FB2:
	al = Mem0[ds:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_21A8 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(ax - 0x0002)
	branch Test(NE,Z) l01D7_2FCA
	// succ:  l01D7_2FC1 l01D7_2FCA
l01D7_2FC1:
	al = Mem0[ds:si:byte]
	al = al + 0x1B
	SCZO = cond(al)
	ah = Mem0[ds:si + 0x0001:byte]
	// succ:  l01D7_2FC8
l01D7_2FC8:
	Mem0[ds:si:word16] = ax
	// succ:  l01D7_2FCA
l01D7_2FCA:
	v11 = Mem0[ds:si + 0x0001:byte] | 0x04
	Mem0[ds:si + 0x0001:byte] = v11
	SZO = cond(Mem0[ds:si + 0x0001:byte])
	C = false
	// succ:  l01D7_2FCE
l01D7_2FCE:
	si = si + 0x0003
	SCZO = cond(si)
	v14 = Mem0[ss:bp - 0x0006:word16] - 0x0001
	Mem0[ss:bp - 0x0006:word16] = v14
	SZO = cond(v14)
	branch Test(NE,Z) l01D7_2F67
	// succ:  l01D7_2FD6 l01D7_2F67
l01D7_2FD6:
	v15 = Mem0[ss:bp - 0x0008:word16] + 0x00C0
	Mem0[ss:bp - 0x0008:word16] = v15
	SCZO = cond(v15)
	v16 = Mem0[ss:bp - 0x000C:word16] - 0x0001
	Mem0[ss:bp - 0x000C:word16] = v16
	SZO = cond(v16)
	branch Test(EQ,Z) l01D7_2FE3
	v17 = Mem0[ss:bp - 0x0008:word16] + 0x00C0
	Mem0[ss:bp - 0x0008:word16] = v17
	SCZO = cond(v17)
	v18 = Mem0[ss:bp - 0x000C:word16] - 0x0001
	Mem0[ss:bp - 0x000C:word16] = v18
	SZO = cond(v18)
	branch Test(EQ,Z) l01D7_2FE3
	// succ:  l01D7_2FE0 l01D7_2FE3
l01D7_2FE0:
	goto l01D7_2F4A
	// succ:  l01D7_2F4A
l01D7_2FE3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_EF84_exit
fn0177_EF84_exit:


// fn01D7_2FFE
// Return size: 4
void fn01D7_2FFE()
fn01D7_2FFE_entry:
	// succ:  l01D7_2FFE
l01D7_2FFE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	// succ:  l01D7_3002_thunk_fn0177_F003
l01D7_3002_thunk_fn0177_F003:
	call fn0177_F003 (retsize: 0;)
	return
	// succ:  fn01D7_2FFE_exit
fn01D7_2FFE_exit:


// fn0177_F003
// Return size: 0
void fn0177_F003()
fn0177_F003_entry:
	// succ:  l0177_F003
l0177_F003:
	sp = fp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x00D2
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = bp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	call fn01D7_13FE (retsize: 2;)
	sp = sp + 0x0006
	cl = 0x06
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l0177_F044_thunk_fn0177_F049
	goto l0177_F044_thunk_fn0177_F046
	// succ:  l0177_F044_thunk_fn0177_F046 l0177_F044_thunk_fn0177_F049
l0177_F003:
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x00D2
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = bp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	call fn01D7_13FE (retsize: 2;)
	sp = sp + 0x0006
	cl = 0x06
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l01D7_3049
	goto l0177_F044_thunk_fn0177_F046
	// succ:  l0177_F044_thunk_fn0177_F046 l0177_F044_thunk_fn0177_F049
l0177_F044_thunk_fn0177_F046:
	call fn0177_F046 (retsize: 0;)
	return
	// succ:  fn0177_F003_exit l0177_F044_thunk_fn0177_F046
l0177_F044_thunk_fn0177_F046:
	call fn0177_F046 (retsize: 0;)
	return
	// succ:  fn0177_F003_exit
l0177_F044_thunk_fn0177_F046:
	call fn0177_F046 (retsize: 0;)
	return
	// succ:  fn0177_F003_exit
l0177_F044_thunk_fn0177_F049:
	call fn0177_F049 (retsize: 0;)
	return
	// succ:  fn0177_F003_exit
l0177_F044_thunk_fn0177_F049:
	call fn0177_F049 (retsize: 0;)
	return
	// succ:  fn0177_F003_exit
fn0177_F003_exit:


// fn0177_F046
// Return size: 0
void fn0177_F046()
fn0177_F046_entry:
	// succ:  l01D7_3046
l01D7_3046:
	call fn0177_F049 (retsize: 0;)
	return
	// succ:  l01D7_3131 fn0177_F046_exit
fn0177_F046_exit:


// fn0177_F049
// Return size: 0
void fn0177_F049()
fn0177_F049_entry:
	// succ:  l01D7_3049
l01D7_3049:
	si = si << 0x0001
	SCZO = cond(si)
	di = Mem0[ds:si + 0x4960:word16]
	bx = Mem0[ds:di:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l01D7_3059
	// succ:  l01D7_3056 l01D7_3059
l01D7_3056:
	call fn0177_F046 (retsize: 0;)
	return
	// succ:  l01D7_3131 fn0177_F049_exit
l01D7_3059:
	bx = Mem0[ds:bx:word16]
	si = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	// succ:  l01D7_305D_thunk_fn0177_F05E
l01D7_305D_thunk_fn0177_F05E:
	call fn0177_F05E (retsize: 0;)
	return
	// succ:  fn0177_F049_exit
fn0177_F049_exit:


// fn0177_F05E
// Return size: 0
void fn0177_F05E()
fn0177_F05E_entry:
	// succ:  l0177_F05E
l0177_F05E:
	sp = fp
	ax = 0x0200
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_2C0C (retsize: 4;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_F06B_thunk_fn0177_F0BE
	goto l0177_F06B_thunk_fn0177_F06D
	// succ:  l0177_F06B_thunk_fn0177_F06D l0177_F06B_thunk_fn0177_F0BE
l0177_F05E:
	ax = 0x0200
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_2C0C (retsize: 4;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_30BE
	goto l0177_F06B_thunk_fn0177_F06D
	// succ:  l0177_F06B_thunk_fn0177_F06D l0177_F06B_thunk_fn0177_F0BE
l0177_F06B_thunk_fn0177_F06D:
	call fn0177_F06D (retsize: 0;)
	return
	// succ:  fn0177_F05E_exit l0177_F06B_thunk_fn0177_F06D
l0177_F06B_thunk_fn0177_F06D:
	call fn0177_F06D (retsize: 0;)
	return
	// succ:  fn0177_F05E_exit
l0177_F06B_thunk_fn0177_F06D:
	call fn0177_F06D (retsize: 0;)
	return
	// succ:  fn0177_F05E_exit
l0177_F06B_thunk_fn0177_F0BE:
	call fn0177_F0BE (retsize: 0;)
	return
	// succ:  fn0177_F05E_exit
l0177_F06B_thunk_fn0177_F0BE:
	call fn0177_F0BE (retsize: 0;)
	return
	// succ:  fn0177_F05E_exit
fn0177_F05E_exit:


// fn0177_F06D
// Return size: 0
void fn0177_F06D()
fn0177_F06D_entry:
	// succ:  l01D7_306D
l01D7_306D:
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0047
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x4A)
	branch Test(EQ,Z) l01D7_30A1
	// succ:  l01D7_309E l01D7_30A1
l01D7_309E:
	call fn0177_F046 (retsize: 0;)
	return
	// succ:  l01D7_3131 fn0177_F06D_exit
l01D7_30A1:
	SCZO = cond(Mem0[ds:0x4D37:byte] - 0x00)
	branch Test(EQ,Z) l01D7_30AB
	// succ:  l01D7_30A8 l01D7_30AB
l01D7_30A8:
	call fn0177_F046 (retsize: 0;)
	return
	// succ:  l01D7_3131 fn0177_F06D_exit
l01D7_30AB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x0009
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_1AEE (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l01D7_30B7_thunk_fn0177_F046
l01D7_30B7_thunk_fn0177_F046:
	call fn0177_F046 (retsize: 0;)
	return
	// succ:  fn0177_F06D_exit
l01D7_3131:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_F06D_exit
fn0177_F06D_exit:


// fn0177_F0BE
// Return size: 0
void fn0177_F0BE()
fn0177_F0BE_entry:
	// succ:  l01D7_30BE
l01D7_30BE:
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_310C
	// succ:  l01D7_30D9 l01D7_310C
l01D7_30D9:
	ax = bp - 0x00D2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0071
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cl = Mem0[ds:si + 0x0001:byte]
	ch = ch - ch
	SCZO = cond(ch)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0386
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x00D2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l01D7_310C
l01D7_310C:
	v17 = Mem0[ds:si + 0x000A:byte] & 0xFE
	Mem0[ds:si + 0x000A:byte] = v17
	SZO = cond(Mem0[ds:si + 0x000A:byte])
	C = false
	v18 = Mem0[ds:si + 0x000B:byte] | 0x02
	Mem0[ds:si + 0x000B:byte] = v18
	SZO = cond(Mem0[ds:si + 0x000B:byte])
	C = false
	ax = 0x4DE0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4154
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x008C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ds:di:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	// succ:  l01D7_312C_thunk_fn0177_F046
l01D7_312C_thunk_fn0177_F046:
	call fn0177_F046 (retsize: 0;)
	return
	// succ:  fn0177_F0BE_exit
fn0177_F0BE_exit:


// fn01D7_313E
// Return size: 4
void fn01D7_313E()
fn01D7_313E_entry:
	// succ:  l01D7_313E
l01D7_313E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x00D2
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = bp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	call fn01D7_13FE (retsize: 2;)
	sp = sp + 0x0006
	cl = 0x06
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l01D7_3189
	// succ:  l01D7_3186 l01D7_3189
l01D7_3186:
	call fn0177_F226 (retsize: 0;)
	return
	// succ:  l01D7_3259 fn01D7_313E_exit
l01D7_3189:
	si = si << 0x0001
	SCZO = cond(si)
	di = Mem0[ds:si + 0x4960:word16]
	bx = Mem0[ds:di:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l01D7_3199
	// succ:  l01D7_3196 l01D7_3199
l01D7_3196:
	call fn0177_F226 (retsize: 0;)
	return
	// succ:  l01D7_3259 fn01D7_313E_exit
l01D7_3199:
	bx = Mem0[ds:bx:word16]
	si = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn018F_3108 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_2C0C (retsize: 4;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_31D8
	// succ:  l01D7_31B4 l01D7_31D8
l01D7_31B4:
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0047
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	// succ:  l01D7_31D1_thunk_fn0177_F226
l01D7_31D1_thunk_fn0177_F226:
	call fn0177_F226 (retsize: 0;)
	return
	// succ:  fn01D7_313E_exit
l01D7_31D8:
	al = Mem0[ds:si + 0x0007:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0100
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	SCZO = cond(ax - 0x0032)
	branch Test(LE,SZO) l01D7_3259
	goto l01D7_31E7
	// succ:  l01D7_31E7 l01D7_31E5_thunk_fn0177_F226
l01D7_31E5_thunk_fn0177_F226:
	call fn0177_F226 (retsize: 0;)
	return
	// succ:  fn01D7_313E_exit
l01D7_31E7:
	v19 = Mem0[ds:si + 0x0007:byte] + 0x32
	Mem0[ds:si + 0x0007:byte] = v19
	SCZO = cond(v19)
	// succ:  l01D7_31E7_thunk_fn0177_F1E9
l01D7_31E7_thunk_fn0177_F1E9:
	call fn0177_F1E9 (retsize: 0;)
	return
	// succ:  fn01D7_313E_exit
fn01D7_313E_exit:


// fn0177_F1E9
// Return size: 0
void fn0177_F1E9()
fn0177_F1E9_entry:
	// succ:  l0177_F1E9
l0177_F1E9:
	sp = fp
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bh = bh ^ Mem0[ds:(bx + 0x4DE0) + si:byte]
	SZO = cond(bh)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4154
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x008D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ds:di:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = 0xFFCE
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_3259_in_fn0177_F1E9
	goto l0177_F224_thunk_fn0177_F226
	// succ:  l0177_F224_thunk_fn0177_F226 l01D7_3259_in_fn0177_F1E9
l0177_F1E9:
	ax = 0x4DE0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4154
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x008D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ds:di:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = 0xFFCE
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_3259
	// succ:  l0177_F222_thunk_fn0177_F226 l0177_F222_thunk_fn0177_F226
l0177_F222_thunk_fn0177_F226:
	call fn0177_F226 (retsize: 0;)
	return
	// succ:  fn0177_F1E9_exit
l0177_F222_thunk_fn0177_F226:
	call fn0177_F226 (retsize: 0;)
	return
	// succ:  fn0177_F1E9_exit
l0177_F224_thunk_fn0177_F226:
	call fn0177_F226 (retsize: 0;)
	return
	// succ:  fn0177_F1E9_exit l0177_F224_thunk_fn0177_F226
l0177_F224_thunk_fn0177_F226:
	call fn0177_F226 (retsize: 0;)
	return
	// succ:  fn0177_F1E9_exit
l01D7_3259_in_fn0177_F1E9:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_F1E9_exit
fn0177_F1E9_exit:


// fn0177_F226
// Return size: 0
void fn0177_F226()
fn0177_F226_entry:
	// succ:  l01D7_3226
l01D7_3226:
	ax = bp - 0x00D2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0071
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cl = Mem0[ds:si + 0x0001:byte]
	ch = ch - ch
	SCZO = cond(ch)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0388
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x00D2
	// succ:  l01D7_3250
l01D7_3250:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l01D7_3259
l01D7_3259:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_F226_exit
fn0177_F226_exit:


// fn01D7_3266
// Return size: 4
void fn01D7_3266()
fn01D7_3266_entry:
	// succ:  l01D7_3266
l01D7_3266:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0058
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = bp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	call fn01D7_13FE (retsize: 2;)
	sp = sp + 0x0006
	cl = 0x06
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l01D7_32B0
	// succ:  l01D7_32AD l01D7_32B0
l01D7_32AD:
	goto l01D7_33C5
	// succ:  l01D7_33C5
l01D7_32B0:
	si = si << 0x0001
	SCZO = cond(si)
	bx = Mem0[ds:si + 0x4960:word16]
	Mem0[ss:bp - 0x0006:word16] = bx
	bx = Mem0[ds:bx:word16]
	di = Mem0[ds:bx:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l01D7_32C4
	// succ:  l01D7_32C1 l01D7_32C4
l01D7_32C1:
	goto l01D7_33C5
	// succ:  l01D7_33C5
l01D7_32C4:
	si = Mem0[ds:di:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_2C0C (retsize: 4;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_32DA
	// succ:  l01D7_32D7 l01D7_32DA
l01D7_32D7:
	goto l01D7_337C
	// succ:  l01D7_337C
l01D7_32DA:
	SCZO = cond(Mem0[ds:si:byte] - 0x10)
	branch Test(NE,Z) l01D7_32E2
	// succ:  l01D7_32DF l01D7_32E2
l01D7_32DF:
	goto l01D7_337C
	// succ:  l01D7_337C
l01D7_32E2:
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x3D88:word16]
	ax = 0xFFFF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01AF_0E20 (retsize: 4;)
	sp = sp + 0x0006
	si = ax
	ax = Mem0[ds:si:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	bx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0004:word16]
	bx = Mem0[ds:di:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0004:word16]
	MulDiv(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	bx = Mem0[ds:si:word16]
	Mem0[ds:bx + 0x0002:word16] = ax
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0000)
	branch Test(NE,Z) l01D7_3325
	// succ:  l01D7_3320 l01D7_3325
l01D7_3320:
	Mem0[ds:bx + 0x0002:word16] = 0x0001
	// succ:  l01D7_3325
l01D7_3325:
	bx = Mem0[ss:bp - 0x0006:word16]
	bx = Mem0[ds:bx:word16]
	Mem0[ds:bx:word16] = si
	al = Mem0[ss:bp + 0x0008:byte]
	bx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:bx + 0x0016:byte] = al
	al = Mem0[ss:bp + 0x0006:byte]
	Mem0[ds:bx + 0x0017:byte] = al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	call fn018F_3108 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_1326 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn01AF_1228 (retsize: 4;)
	sp = sp + 0x0002
	bx = Mem0[ds:di:word16]
	ax = Mem0[ds:bx + 0x0008:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_3368
	// succ:  l01D7_3362 l01D7_3368
l01D7_3362:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0137_00F0 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l01D7_3368
l01D7_3368:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn018F_2A66 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn018F_0000 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	goto l01D7_33C5
	// succ:  l01D7_33C5
l01D7_337C:
	ax = bp - 0x0058
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0047
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(Mem0[ds:si + 0x0001:byte] - 0x4A)
	branch Test(NE,Z) l01D7_33C5
	// succ:  l01D7_33AD l01D7_33C5
l01D7_33AD:
	SCZO = cond(Mem0[ds:0x4D37:byte] - 0x00)
	branch Test(NE,Z) l01D7_33C5
	// succ:  l01D7_33B4 l01D7_33C5
l01D7_33B4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x0009
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_1AEE (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l01D7_33C5
l01D7_33C5:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_3266_exit
fn01D7_3266_exit:


// fn01D7_33D2
// Return size: 4
void fn01D7_33D2()
fn01D7_33D2_entry:
	// succ:  l01D7_33D2
l01D7_33D2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x00D2
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = bp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	call fn01D7_13FE (retsize: 2;)
	sp = sp + 0x0006
	cl = 0x06
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l01D7_341D
	// succ:  l01D7_341A l01D7_341D
l01D7_341A:
	call fn0177_F4BA (retsize: 0;)
	return
	// succ:  l01D7_34ED fn01D7_33D2_exit
l01D7_341D:
	si = si << 0x0001
	SCZO = cond(si)
	di = Mem0[ds:si + 0x4960:word16]
	bx = Mem0[ds:di:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l01D7_342D
	// succ:  l01D7_342A l01D7_342D
l01D7_342A:
	call fn0177_F4BA (retsize: 0;)
	return
	// succ:  l01D7_34ED fn01D7_33D2_exit
l01D7_342D:
	bx = Mem0[ds:bx:word16]
	si = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn018F_3108 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_2C0C (retsize: 4;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	// succ:  l01D7_3444_thunk_fn0177_F446
l01D7_3444_thunk_fn0177_F446:
	call fn0177_F446 (retsize: 0;)
	return
	// succ:  fn01D7_33D2_exit
fn01D7_33D2_exit:


// fn0177_F446
// Return size: 0
void fn0177_F446()
fn0177_F446_entry:
	// succ:  l0177_F446
l0177_F446:
	sp = fp
	branch Test(EQ,Z) l0177_F446_thunk_fn0177_F46C
	goto l0177_F446_thunk_fn0177_F448
	// succ:  l0177_F446_thunk_fn0177_F448 l0177_F446_thunk_fn0177_F46C
l0177_F446:
	branch Test(EQ,Z) l01D7_346C
	goto l0177_F446_thunk_fn0177_F448
	// succ:  l0177_F446_thunk_fn0177_F448 l0177_F446_thunk_fn0177_F46C
l0177_F446_thunk_fn0177_F448:
	call fn0177_F448 (retsize: 0;)
	return
	// succ:  fn0177_F446_exit l0177_F446_thunk_fn0177_F448
l0177_F446_thunk_fn0177_F448:
	call fn0177_F448 (retsize: 0;)
	return
	// succ:  fn0177_F446_exit
l0177_F446_thunk_fn0177_F448:
	call fn0177_F448 (retsize: 0;)
	return
	// succ:  fn0177_F446_exit
l0177_F446_thunk_fn0177_F46C:
	call fn0177_F46C (retsize: 0;)
	return
	// succ:  fn0177_F446_exit
l0177_F446_thunk_fn0177_F46C:
	call fn0177_F46C (retsize: 0;)
	return
	// succ:  fn0177_F446_exit
fn0177_F446_exit:


// fn0177_F448
// Return size: 0
void fn0177_F448()
fn0177_F448_entry:
	// succ:  l01D7_3448
l01D7_3448:
	ax = bp - 0x0052
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0047
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	// succ:  l01D7_3465_thunk_fn0177_F4BA
l01D7_3465_thunk_fn0177_F4BA:
	call fn0177_F4BA (retsize: 0;)
	return
	// succ:  fn0177_F448_exit
fn0177_F448_exit:


// fn0177_F46C
// Return size: 0
void fn0177_F46C()
fn0177_F46C_entry:
	// succ:  l01D7_346C
l01D7_346C:
	al = Mem0[ds:si + 0x0006:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0100
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	SCZO = cond(ax - 0x0032)
	branch Test(LE,SZO) l01D7_34ED
	goto l01D7_347B
	// succ:  l01D7_347B l01D7_3479_thunk_fn0177_F4BA
l01D7_3479_thunk_fn0177_F4BA:
	call fn0177_F4BA (retsize: 0;)
	return
	// succ:  fn0177_F46C_exit
l01D7_347B:
	v10 = Mem0[ds:si + 0x0006:byte] + 0x32
	Mem0[ds:si + 0x0006:byte] = v10
	SCZO = cond(v10)
	// succ:  l01D7_347B_thunk_fn0177_F47E
l01D7_347B_thunk_fn0177_F47E:
	call fn0177_F47E (retsize: 0;)
	return
	// succ:  fn0177_F46C_exit
fn0177_F46C_exit:


// fn0177_F47E
// Return size: 0
void fn0177_F47E()
fn0177_F47E_entry:
	// succ:  l0177_F47E
l0177_F47E:
	sp = fp
	bh = bh ^ Mem0[ds:(bx + 0x4DE0) + si:byte]
	SZO = cond(bh)
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4154
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x008E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ds:di:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = 0xFFCE
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_34ED_in_fn0177_F47E
	goto l0177_F4B8_thunk_fn0177_F4BA
	// succ:  l0177_F4B8_thunk_fn0177_F4BA l01D7_34ED_in_fn0177_F47E
l0177_F47E:
	ax = 0x4DE0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x4154
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x008E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ds:di:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	ax = 0xFFCE
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0167_0000 (retsize: 4;)
	sp = sp + 0x000E
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1C:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_14CE (retsize: 4;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_34ED
	// succ:  l0177_F4B7_thunk_fn0177_F4BA l0177_F4B7_thunk_fn0177_F4BA
l0177_F4B7_thunk_fn0177_F4BA:
	call fn0177_F4BA (retsize: 0;)
	return
	// succ:  fn0177_F47E_exit
l0177_F4B7_thunk_fn0177_F4BA:
	call fn0177_F4BA (retsize: 0;)
	return
	// succ:  fn0177_F47E_exit
l0177_F4B8_thunk_fn0177_F4BA:
	call fn0177_F4BA (retsize: 0;)
	return
	// succ:  fn0177_F47E_exit l0177_F4B8_thunk_fn0177_F4BA
l0177_F4B8_thunk_fn0177_F4BA:
	call fn0177_F4BA (retsize: 0;)
	return
	// succ:  fn0177_F47E_exit
l01D7_34ED_in_fn0177_F47E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_F47E_exit
fn0177_F47E_exit:


// fn0177_F4BA
// Return size: 0
void fn0177_F4BA()
fn0177_F4BA_entry:
	// succ:  l01D7_34BA
l01D7_34BA:
	ax = bp - 0x00D2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0071
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cl = Mem0[ds:si + 0x0001:byte]
	ch = ch - ch
	SCZO = cond(ch)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0389
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x00D2
	// succ:  l01D7_34E4
l01D7_34E4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l01D7_34ED
l01D7_34ED:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_F4BA_exit
fn0177_F4BA_exit:


// fn01D7_34FA
// Return size: 4
void fn01D7_34FA()
fn01D7_34FA_entry:
	// succ:  l01D7_34FA
l01D7_34FA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = bp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	call fn01D7_13FE (retsize: 2;)
	sp = sp + 0x0006
	cl = 0x06
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01D7_358F
	// succ:  l01D7_3541 l01D7_358F
l01D7_3541:
	si = si << 0x0001
	SCZO = cond(si)
	di = Mem0[ds:si + 0x4960:word16]
	bx = Mem0[ds:di:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_358F
	// succ:  l01D7_354E l01D7_358F
l01D7_354E:
	bx = Mem0[ds:bx:word16]
	si = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn018F_3108 (retsize: 4;)
	sp = sp + 0x0002
	al = Mem0[ds:si + 0x0016:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0017:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_062A (retsize: 4;)
	sp = sp + 0x000A
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_358F
	// succ:  l01D7_3577 l01D7_358F
l01D7_3577:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	al = Mem0[ds:si:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0001:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01AF_12A6 (retsize: 4;)
	sp = sp + 0x000A
	// succ:  l01D7_358F
l01D7_358F:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_34FA_exit
fn01D7_34FA_exit:


// fn01D7_359C
// Return size: 4
void fn01D7_359C()
fn01D7_359C_entry:
	// succ:  l01D7_359C
l01D7_359C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x005A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x3D72:word16]
	Mem0[ds:0x4EAC:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = bp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	call fn01D7_13FE (retsize: 2;)
	sp = sp + 0x0006
	cl = 0x06
	bx = Mem0[ss:bp + 0x0008:word16]
	bx = bx << cl
	SCZO = cond(bx)
	bx = bx + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(bx)
	ax = bx
	bx = bx << 0x0001
	SCZO = cond(bx)
	bx = bx + ax
	SCZO = cond(bx)
	al = Mem0[ds:bx + 0x0CE4:byte]
	ah = ah - ah
	SCZO = cond(ah)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l01D7_35E6
	// succ:  l01D7_35E3 l01D7_35E6
l01D7_35E3:
	call fn0177_F67A (retsize: 0;)
	return
	// succ:  l01D7_3680 fn01D7_359C_exit
l01D7_35E6:
	si = si << 0x0001
	SCZO = cond(si)
	bx = Mem0[ds:si + 0x4960:word16]
	bx = Mem0[ds:bx:word16]
	di = Mem0[ds:bx:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l01D7_35F7
	// succ:  l01D7_35F4 l01D7_35F7
l01D7_35F4:
	call fn0177_F67A (retsize: 0;)
	return
	// succ:  l01D7_3680 fn01D7_359C_exit
l01D7_35F7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn018F_3108 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x0001
	// succ:  l01D7_3608_thunk_fn0177_F60B
l01D7_3608_thunk_fn0177_F60B:
	call fn0177_F60B (retsize: 0;)
	return
	// succ:  fn01D7_359C_exit
fn01D7_359C_exit:


// fn0177_F60B
// Return size: 0
void fn0177_F60B()
fn0177_F60B_entry:
	// succ:  l0177_F60B
l0177_F60B:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_2C0C (retsize: 4;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l0177_F614_thunk_fn0177_F644
	goto l0177_F614_thunk_fn0177_F616
	// succ:  l0177_F614_thunk_fn0177_F616 l0177_F614_thunk_fn0177_F644
l0177_F60B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_2C0C (retsize: 4;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01D7_3644
	goto l0177_F614_thunk_fn0177_F616
	// succ:  l0177_F614_thunk_fn0177_F616 l0177_F614_thunk_fn0177_F644
l0177_F614_thunk_fn0177_F616:
	call fn0177_F616 (retsize: 0;)
	return
	// succ:  fn0177_F60B_exit l0177_F614_thunk_fn0177_F616
l0177_F614_thunk_fn0177_F616:
	call fn0177_F616 (retsize: 0;)
	return
	// succ:  fn0177_F60B_exit
l0177_F614_thunk_fn0177_F616:
	call fn0177_F616 (retsize: 0;)
	return
	// succ:  fn0177_F60B_exit
l0177_F614_thunk_fn0177_F644:
	call fn0177_F644 (retsize: 0;)
	return
	// succ:  fn0177_F60B_exit
l0177_F614_thunk_fn0177_F644:
	call fn0177_F644 (retsize: 0;)
	return
	// succ:  fn0177_F60B_exit
fn0177_F60B_exit:


// fn0177_F616
// Return size: 0
void fn0177_F616()
fn0177_F616_entry:
	// succ:  l01D7_3616
l01D7_3616:
	ax = bp - 0x005A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0047
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:si + 0x0001:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn018F_30A4 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l01D7_363C_thunk_fn0177_F67A
l01D7_363C_thunk_fn0177_F67A:
	call fn0177_F67A (retsize: 0;)
	return
	// succ:  fn0177_F616_exit
fn0177_F616_exit:


// fn0177_F644
// Return size: 0
void fn0177_F644()
fn0177_F644_entry:
	// succ:  l01D7_3644
l01D7_3644:
	al = Mem0[ds:si + 0x0016:byte]
	// succ:  l01D7_3644_thunk_fn0177_F646
l01D7_3644_thunk_fn0177_F646:
	call fn0177_F646 (retsize: 0;)
	return
	// succ:  fn0177_F644_exit
fn0177_F644_exit:


// fn0177_F646
// Return size: 0
void fn0177_F646()
fn0177_F646_entry:
	// succ:  l0177_F646
l0177_F646:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	cl = Mem0[ds:si + 0x0017:byte]
	ch = ch - ch
	SCZO = cond(ch)
	Mem0[ss:bp - 0x0006:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn01D7_2006 (retsize: 2;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn018F_18FE (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn01BF_1418 (retsize: 4;)
	sp = sp + 0x0006
l0177_F646:
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	cl = Mem0[ds:si + 0x0017:byte]
	ch = ch - ch
	SCZO = cond(ch)
	Mem0[ss:bp - 0x0006:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = bp - 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn01D7_2006 (retsize: 2;)
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn018F_18FE (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn01BF_1418 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l0177_F674_thunk_fn0177_F67A
l0177_F674_thunk_fn0177_F67A:
	call fn0177_F67A (retsize: 0;)
	return
	// succ:  fn0177_F646_exit
fn0177_F646_exit:


// fn0177_F676
// Return size: 0
void fn0177_F676()
fn0177_F676_entry:
	goto l0177_F676
	// succ:  l0177_F676
l0177_F675_thunk_fn0177_F67A:
	call fn0177_F67A (retsize: 0;)
	return
	// succ:  fn0177_F676_exit
l0177_F676:
	sp = fp
	v7 = Mem0[ds:si:byte] - dl - C
	Mem0[ds:si:byte] = v7
	SCZO = cond(v7)
	di = 0x5701
	goto l0177_F678_thunk_fn0177_F67B
	// succ:  l0177_F678_thunk_fn0177_F67B
l0177_F676:
	goto l0177_F675_thunk_fn0177_F67A
	// succ:  l0177_F675_thunk_fn0177_F67A
l0177_F678_thunk_fn0177_F67B:
	call fn0177_F67B (retsize: 0;)
	return
	// succ:  fn0177_F676_exit
fn0177_F676_exit:


// fn0177_F67A
// Return size: 0
void fn0177_F67A()
fn0177_F67A_entry:
	// succ:  l01D7_367A
l01D7_367A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	// succ:  l01D7_367A_thunk_fn0177_F67B
l01D7_367A_thunk_fn0177_F67B:
	call fn0177_F67B (retsize: 0;)
	return
	// succ:  fn0177_F67A_exit
fn0177_F67A_exit:


// fn0177_F67B
// Return size: 0
void fn0177_F67B()
fn0177_F67B_entry:
	// succ:  l0177_F67B
l0177_F67B:
	sp = fp
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l01D7_3680_in_fn0177_F67B
	// succ:  l01D7_3680_in_fn0177_F67B
l0177_F67B:
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01D7_3680
l01D7_3680:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_F67B_exit
l01D7_3680_in_fn0177_F67B:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_F67B_exit
fn0177_F67B_exit:


// fn01D7_368C
// Return size: 4
void fn01D7_368C()
fn01D7_368C_entry:
	// succ:  l01D7_368C
l01D7_368C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0092
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	ax = Mem0[ds:bx + 0x3D88:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	SCZO = cond(Mem0[ds:bx + 0x3D86:word16] - 0x0002)
	branch Test(EQ,Z) l01D7_36C2
	// succ:  l01D7_36B3 l01D7_36C2
l01D7_36B3:
	ax = bp - 0x008E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0069
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0403
	// succ:  l01D7_36BC_thunk_fn0177_F70D
l01D7_36BC_thunk_fn0177_F70D:
	call fn0177_F70D (retsize: 0;)
	return
	// succ:  fn01D7_368C_exit
l01D7_36C2:
	Mem0[ss:bp - 0x0006:word16] = 0x0001
	// succ:  l01D7_36C2_thunk_fn0177_F70D
l01D7_36C2_thunk_fn0177_F70D:
	call fn0177_F70D (retsize: 0;)
	return
	// succ:  fn01D7_368C_exit
fn01D7_368C_exit:


// fn0177_F703
// Return size: 0
void fn0177_F703()
fn0177_F703_entry:
	// succ:  l0177_F703
l0177_F703:
	sp = fp
	branch Test(EQ,Z) l0177_F703_thunk_fn0177_F70D
	goto l0177_F703_thunk_fn0177_F705
	// succ:  l0177_F703_thunk_fn0177_F705 l0177_F703_thunk_fn0177_F70D
l0177_F703:
	branch Test(EQ,Z) l01D7_370D
	goto l0177_F703_thunk_fn0177_F705
	// succ:  l0177_F703_thunk_fn0177_F705 l0177_F703_thunk_fn0177_F70D
l0177_F703_thunk_fn0177_F705:
	call fn0177_F705 (retsize: 0;)
	return
	// succ:  fn0177_F703_exit l0177_F703_thunk_fn0177_F705
l0177_F703_thunk_fn0177_F705:
	call fn0177_F705 (retsize: 0;)
	return
	// succ:  fn0177_F703_exit
l0177_F703_thunk_fn0177_F705:
	call fn0177_F705 (retsize: 0;)
	return
	// succ:  fn0177_F703_exit
l0177_F703_thunk_fn0177_F70D:
	call fn0177_F70D (retsize: 0;)
	return
	// succ:  fn0177_F703_exit
l0177_F703_thunk_fn0177_F70D:
	call fn0177_F70D (retsize: 0;)
	return
	// succ:  fn0177_F703_exit
fn0177_F703_exit:


// fn0177_F705
// Return size: 0
void fn0177_F705()
fn0177_F705_entry:
	call fn0177_F70D (retsize: 0;)
	return
	// succ:  l01D7_3705 fn0177_F705_exit
l01D7_36C7:
	ax = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dl = Mem0[ds:0x4D1C:byte]
	dh = dh - dh
	SCZO = cond(dh)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	dl = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00F7_11AE (retsize: 4;)
	sp = sp + 0x000A
	cl = 0x06
	si = Mem0[ss:bp - 0x000C:word16]
	si = si << cl
	SCZO = cond(si)
	si = si + Mem0[ss:bp - 0x000E:word16]
	SCZO = cond(si)
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si + 0x0CE2
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:si + 0x0002:byte] - 0x00)
	branch Test(EQ,Z) l01D7_3700
	// succ:  l01D7_36FD l01D7_3700
l01D7_36FD:
	goto l01D7_378F
	// succ:  l01D7_378F
l01D7_3700:
	SCZO = cond(Mem0[ds:si:byte] - 0x01)
	// succ:  l01D7_3700_thunk_fn0177_F703
l01D7_3700_thunk_fn0177_F703:
	call fn0177_F703 (retsize: 0;)
	return
	// succ:  fn0177_F705_exit
l01D7_3705:
	SCZO = cond(Mem0[ds:si:byte] - 0x02)
	branch Test(EQ,Z) l01D7_370D
	goto l01D7_370A
	// succ:  l01D7_370A l01D7_3708_thunk_fn0177_F70D
l01D7_3708_thunk_fn0177_F70D:
	call fn0177_F70D (retsize: 0;)
	return
	// succ:  fn0177_F705_exit
l01D7_370A:
	// succ:  l01D7_378F
l01D7_378F:
	v8 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v8
	SZO = cond(v8)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0009)
	branch Test(GE,SO) l01D7_379B
	// succ:  l01D7_3798 l01D7_379B
l01D7_3798:
	goto l01D7_36C7
	// succ:  l01D7_36C7
l01D7_379B:
	ax = bp - 0x008E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0069
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x038A
	// succ:  l01D7_37A7
l01D7_37A7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn0107_4D72 (retsize: 4;)
	sp = sp + 0x000E
	ax = bp - 0x008E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_00CA (retsize: 4;)
	sp = sp + 0x0004
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_F705_exit
fn0177_F705_exit:


// fn0177_F70D
// Return size: 0
void fn0177_F70D()
fn0177_F70D_entry:
	// succ:  l01D7_370D
l01D7_370D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	ax = 0x050A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0147_2A26 (retsize: 4;)
	sp = sp + 0x000A
	Mem0[ss:bp - 0x0004:word16] = ax
	SCZO = cond(ax - 0x000B)
	branch Test(NE,Z) l01D7_373C
	// succ:  l01D7_3729 l01D7_373C
l01D7_3729:
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0006)
	branch Test(EQ,Z) l01D7_3737
	// succ:  l01D7_3730 l01D7_3737
l01D7_3730:
	SCZO = cond(Mem0[ds:0x0096:word16] - 0x0014)
	branch Test(NE,Z) l01D7_373C
	// succ:  l01D7_3737 l01D7_373C
l01D7_3737:
	Mem0[ss:bp - 0x0004:word16] = 0x0003
	// succ:  l01D7_373C
l01D7_373C:
	ax = bp - 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0177_0000 (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:si + 0x0002:byte] = al
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_378F
	goto l01D7_374E
	// succ:  l01D7_374E l01D7_374C_thunk_fn0177_F705
l01D7_374C_thunk_fn0177_F705:
	call fn0177_F705 (retsize: 0;)
	return
	// succ:  fn0177_F70D_exit
l01D7_374E:
	ax = Mem0[ds:si:word16]
	Mem0[ss:bp - 0x0090:word16] = ax
	Mem0[ss:bp - 0x0092:word16] = si
	SCZO = cond(al - 0x01)
	branch Test(NE,Z) l01D7_3762
	// succ:  l01D7_375C l01D7_3762
l01D7_375C:
	ax = 0x0022
	goto l01D7_3765
	// succ:  l01D7_3765
l01D7_3762:
	ax = 0x003D
	// succ:  l01D7_3765
l01D7_3765:
	ah = Mem0[ss:bp - 0x008F:byte]
	bx = si
	Mem0[ds:bx:word16] = ax
	v13 = Mem0[ds:bx + 0x0001:byte] | 0x11
	Mem0[ds:bx + 0x0001:byte] = v13
	SZO = cond(Mem0[ds:bx + 0x0001:byte])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	al = Mem0[ds:di + 0x0004:byte]
	al = al ^ Mem0[ss:bp - 0x0004:byte]
	SZO = cond(al)
	C = false
	ax = ax & 0x007F
	SZO = cond(ax)
	C = false
	v17 = Mem0[ds:di + 0x0004:word16] ^ ax
	Mem0[ds:di + 0x0004:word16] = v17
	SZO = cond(Mem0[ds:di + 0x0004:word16])
	C = false
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01D7_378A_thunk_fn0177_F705
l01D7_378A_thunk_fn0177_F705:
	call fn0177_F705 (retsize: 0;)
	return
	// succ:  fn0177_F70D_exit
fn0177_F70D_exit:


// fn01D7_37CC
// Return size: 4
void fn01D7_37CC()
fn01D7_37CC_entry:
	// succ:  l01D7_37CC
l01D7_37CC:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0010
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	Mem0[ss:bp - 0x0006:word16] = 0x0000
	// succ:  l01D7_37DE_thunk_fn0177_F80F
l01D7_37DE_thunk_fn0177_F80F:
	call fn0177_F80F (retsize: 0;)
	return
	// succ:  fn01D7_37CC_exit
fn01D7_37CC_exit:


// fn0177_F7E9
// Return size: 0
void fn0177_F7E9()
fn0177_F7E9_entry:
	// succ:  l0177_F7E9
l0177_F7E9:
	sp = fp
	si = si + 0x0001
	SZO = cond(si)
	C = false
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	bx = 0x0020
	dx = dx_ax % bx
	ax = dx_ax /u bx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	GetPixel(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l0177_F809_thunk_fn0177_F80F
	goto l0177_F809_thunk_fn0177_F80B
	// succ:  l0177_F809_thunk_fn0177_F80B l0177_F809_thunk_fn0177_F80F
l0177_F7E9:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	bx = 0x0020
	dx = dx_ax % bx
	ax = dx_ax /u bx
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	GetPixel(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	SCZO = cond(ax - 0xFFFF)
	branch Test(NE,Z) l01D7_380F
	// succ:  l0177_F807_thunk_fn0177_F80B l0177_F807_thunk_fn0177_F80F
l0177_F807_thunk_fn0177_F80B:
	call fn0177_F80B (retsize: 0;)
	return
	// succ:  fn0177_F7E9_exit
l0177_F807_thunk_fn0177_F80F:
	call fn0177_F80F (retsize: 0;)
	return
	// succ:  fn0177_F7E9_exit
l0177_F809_thunk_fn0177_F80B:
	call fn0177_F80B (retsize: 0;)
	return
	// succ:  fn0177_F7E9_exit l0177_F809_thunk_fn0177_F80B
l0177_F809_thunk_fn0177_F80B:
	call fn0177_F80B (retsize: 0;)
	return
	// succ:  fn0177_F7E9_exit
l0177_F809_thunk_fn0177_F80F:
	call fn0177_F80F (retsize: 0;)
	return
	// succ:  fn0177_F7E9_exit
fn0177_F7E9_exit:


// fn0177_F80B
// Return size: 0
void fn0177_F80B()
fn0177_F80B_entry:
	call fn0177_F80F (retsize: 0;)
	return
	// succ:  l01D7_380B fn0177_F80B_exit
l01D7_37E3:
	Mem0[ss:bp - 0x000A:word16] = 0x0000
	// succ:  l01D7_37E8
l01D7_37E8:
	ax = Mem0[ss:bp - 0x0008:word16]
	// succ:  l01D7_37E8_thunk_fn0177_F7E9
l01D7_37E8_thunk_fn0177_F7E9:
	call fn0177_F7E9 (retsize: 0;)
	return
	// succ:  fn0177_F80B_exit
l01D7_380B:
	SCZO = cond(dx - ax)
	branch Test(EQ,Z) l01D7_3827
	// succ:  l01D7_380D_thunk_fn0177_F80F l01D7_3827
l01D7_380D_thunk_fn0177_F80F:
	call fn0177_F80F (retsize: 0;)
	return
	// succ:  fn0177_F80B_exit
l01D7_3827:
	v8 = Mem0[ss:bp - 0x0008:word16] + 0x00E5
	Mem0[ss:bp - 0x0008:word16] = v8
	SCZO = cond(v8)
	v9 = Mem0[ss:bp - 0x0007:byte] & 0x03
	Mem0[ss:bp - 0x0007:byte] = v9
	SZO = cond(Mem0[ss:bp - 0x0007:byte])
	C = false
	v12 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v12
	SZO = cond(v12)
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x0040)
	branch Test(LT,SO) l01D7_37E8
	// succ:  l01D7_3839 l01D7_37E8
l01D7_3839:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_1CB4 (retsize: 2;)
	sp = sp + 0x0002
	v15 = Mem0[ss:bp - 0x0006:word16] + 0x0001
	Mem0[ss:bp - 0x0006:word16] = v15
	SZO = cond(v15)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x0010)
	branch Test(LT,SO) l01D7_37E3
	// succ:  l01D7_384A l01D7_37E3
l01D7_384A:
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_F80B_exit
fn0177_F80B_exit:


// fn0177_F80F
// Return size: 0
void fn0177_F80F()
fn0177_F80F_entry:
	// succ:  l01D7_380F
l01D7_380F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	cx = Mem0[ss:bp + 0x0008:word16]
	cx = cx + Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = Mem0[ss:bp - 0x0004:word16]
	cx = cx + Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetPixel(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x000A
	// succ:  l01D7_3822_thunk_fn0177_F80B
l01D7_3822_thunk_fn0177_F80B:
	call fn0177_F80B (retsize: 0;)
	return
	// succ:  fn0177_F80F_exit
fn0177_F80F_exit:


// fn01D7_3854
// Return size: 4
void fn01D7_3854()
fn01D7_3854_entry:
	// succ:  l01D7_3854
l01D7_3854:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	// succ:  l01D7_385C_thunk_fn0177_F85E
l01D7_385C_thunk_fn0177_F85E:
	call fn0177_F85E (retsize: 0;)
	return
	// succ:  fn01D7_3854_exit
fn01D7_3854_exit:


// fn0177_F85E
// Return size: 0
void fn0177_F85E()
fn0177_F85E_entry:
	// succ:  l0177_F85E
l0177_F85E:
	sp = fp
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = si - si
	SCZO = cond(si)
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	Mem0[ss:bp - 0x0006:word16] = ax
	SCZO = cond(Mem0[ds:0x00B6:word16] - si)
	branch Test(NE,Z) l0177_F877_thunk_fn0177_F87C
	goto l01D7_3879_in_fn0177_F85E
	// succ:  l01D7_3879_in_fn0177_F85E l0177_F877_thunk_fn0177_F87C
l0177_F85E:
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = si - si
	SCZO = cond(si)
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0004:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	Mem0[ss:bp - 0x0006:word16] = ax
	SCZO = cond(Mem0[ds:0x00B6:word16] - si)
	branch Test(NE,Z) l01D7_387C
	goto l01D7_3879
	// succ:  l01D7_3879 l0177_F877_thunk_fn0177_F87C
l0177_F877_thunk_fn0177_F87C:
	call fn0177_F87C (retsize: 0;)
	return
	// succ:  fn0177_F85E_exit
l0177_F877_thunk_fn0177_F87C:
	call fn0177_F87C (retsize: 0;)
	return
	// succ:  fn0177_F85E_exit
l01D7_3879:
	call fn0177_F895 (retsize: 0;)
	return
	// succ:  l01D7_3908 fn0177_F85E_exit
l01D7_3879_in_fn0177_F85E:
	call fn0177_F895 (retsize: 0;)
	return
	// succ:  l01D7_3908_in_fn0177_F85E l01D7_3879_in_fn0177_F85E
l01D7_3879_in_fn0177_F85E:
	call fn0177_F895 (retsize: 0;)
	return
	// succ:  l01D7_3908_in_fn0177_F85E
l01D7_3908:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_F85E_exit
l01D7_3908_in_fn0177_F85E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_F85E_exit
l01D7_3908_in_fn0177_F85E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn0177_F85E_exit
fn0177_F85E_exit:


// fn0177_F87C
// Return size: 0
void fn0177_F87C()
fn0177_F87C_entry:
	// succ:  l01D7_387C
l01D7_387C:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(EQ,Z) l01D7_3886
	// succ:  l01D7_3883 l01D7_3886
l01D7_3883:
	call fn0177_F895 (retsize: 0;)
	return
	// succ:  l01D7_3908 fn0177_F87C_exit
l01D7_3886:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	GetDC(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01D7_388A_thunk_fn0177_F88B
l01D7_388A_thunk_fn0177_F88B:
	call fn0177_F88B (retsize: 0;)
	return
	// succ:  fn0177_F87C_exit
fn0177_F87C_exit:


// fn0177_F88B
// Return size: 0
void fn0177_F88B()
fn0177_F88B_entry:
	// succ:  l0177_F88B
l0177_F88B:
	sp = fp
	ax = 0x7701
	cl = cl + Mem0[ss:(bp + 0x0BF8) + di:byte]
	SCZO = cond(cl)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x005B:word16]
	goto l0177_F892_thunk_fn0177_F895
	// succ:  l0177_F892_thunk_fn0177_F895
l0177_F88B:
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01D7_38F0
	// succ:  l0177_F88F_thunk_fn0177_F895 l0177_F88F_thunk_fn0177_F895
l0177_F88F_thunk_fn0177_F895:
	call fn0177_F895 (retsize: 0;)
	return
	// succ:  fn0177_F88B_exit
l0177_F88F_thunk_fn0177_F895:
	call fn0177_F895 (retsize: 0;)
	return
	// succ:  fn0177_F88B_exit
l0177_F892_thunk_fn0177_F895:
	call fn0177_F895 (retsize: 0;)
	return
	// succ:  fn0177_F88B_exit
fn0177_F88B_exit:


// fn0177_F895
// Return size: 0
void fn0177_F895()
fn0177_F895_entry:
	// succ:  l01D7_3895
l01D7_3895:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1E92 (retsize: 4;)
	sp = sp + 0x0002
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01D7_38F0
	// succ:  l01D7_38A1 l01D7_38F0
l01D7_38A1:
	cl = 0x06
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax + Mem0[ss:bp - 0x0006:word16]
	SCZO = cond(ax)
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax + 0x0CE2
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn01BF_08C4 (retsize: 4;)
	sp = sp + 0x000A
	SCZO = cond(Mem0[ss:bp + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l01D7_38D4
	// succ:  l01D7_38C6 l01D7_38D4
l01D7_38C6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D24:word16]
	DrawIcon(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	// succ:  l01D7_38D4
l01D7_38D4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cl = 0x05
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax - Mem0[ds:0x3D84:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax - Mem0[ds:0x4BE8:word16]
	SCZO = cond(ax)
	ax = ax << cl
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01D7_37CC (retsize: 2;)
	sp = sp + 0x0008
l01D7_38F0:
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01D7_38FE
	// succ:  l01D7_38F4 l01D7_38FE
l01D7_38F4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ReleaseDC(Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0004
	// succ:  l01D7_38FE
l01D7_38FE:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01D7_3908
	goto l01D7_3902
	// succ:  l01D7_3902 l01D7_3900_thunk_fn0177_F87C
l01D7_3900_thunk_fn0177_F87C:
	call fn0177_F87C (retsize: 0;)
	return
	// succ:  fn0177_F895_exit
l01D7_3902:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1F08 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l01D7_3903_thunk_fn0177_F87C
l01D7_3903_thunk_fn0177_F87C:
	call fn0177_F87C (retsize: 0;)
	return
	// succ:  fn0177_F895_exit
fn0177_F895_exit:


// fn01D7_3914
// Return size: 4
void fn01D7_3914()
fn01D7_3914_entry:
	// succ:  l01D7_3914
l01D7_3914:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = 0x063A
	// succ:  l01D7_3925
l01D7_3925:
	SCZO = cond(Mem0[ds:si + 0x0004:byte] - 0xFF)
	branch Test(EQ,Z) l01D7_3958
	// succ:  l01D7_392B l01D7_3958
l01D7_392B:
	SCZO = cond(Mem0[ds:si + 0x0004:byte] - 0xFE)
	branch Test(EQ,Z) l01D7_3958
	// succ:  l01D7_3931 l01D7_3958
l01D7_3931:
	al = Mem0[ds:si + 0x0003:byte]
	ax = (int16) al
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	dx_ax = (int32) ax
	ax = ax - dx
	SCZO = cond(ax)
	ax = ax >> 0x0001
	SCZO = cond(ax)
	cx = ax
	al = Mem0[ds:0x4D04:byte]
	bl = 0x04
	ax = (int16) al
	dx = dx_ax % bl
	ax = dx_ax / bl
	SCZO = cond(ax)
	cl = cl - al
	SCZO = cond(cl)
	Mem0[ds:si + 0x0004:byte] = cl
	SCZO = cond(cl - 0x01)
	branch Test(GE,SO) l01D7_3958
	// succ:  l01D7_3954 l01D7_3958
l01D7_3954:
	Mem0[ds:si + 0x0004:byte] = 0x01
	// succ:  l01D7_3958
l01D7_3958:
	si = si + 0x000C
	SCZO = cond(si)
	SCZO = cond(si - 0x07EA)
	branch Test(ULT,C) l01D7_3925
	// succ:  l01D7_3961 l01D7_3925
l01D7_3961:
	sp = sp - 0x0002
	call fn01D7_1E5C (retsize: 2;)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01D7_3914_exit
fn01D7_3914_exit:


// fn01F7_0000
// Return size: 4
void fn01F7_0000()
fn01F7_0000_entry:
	// succ:  l01F7_0000
l01F7_0000:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0140
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = 0x0001
	Mem0[ss:bp - 0x0008:word16] = 0x0000
	// succ:  l01F7_0018
l01F7_0018:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0030
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l01F7_003E
	// succ:  l01F7_002B l01F7_003E
l01F7_002B:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01F7_0038
	// succ:  l01F7_002F l01F7_0038
l01F7_002F:
	call fn00CF_05F2 (retsize: 4;)
	si = si - si
	SCZO = cond(si)
	goto l01F7_0018
	// succ:  l01F7_0018
l01F7_0038:
	ax = ax - ax
	SCZO = cond(ax)
	goto l01F7_01D5
	// succ:  l01F7_01D5
l01F7_003E:
	Mem0[ss:bp - 0x0006:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x01E5
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	lstrcpy(Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp - 0x0004:word16]
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_0060
l01F7_0060:
	branch cx == 0x0000 l01F7_0062
	// succ:  l01F7_0060_1 l01F7_0062
l01F7_0060_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_0060
	// succ:  l01F7_0062 l01F7_0060
l01F7_0062:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	cx = cx + Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(cx)
	cx = cx + 0x0001
	SZO = cond(cx)
	Mem0[ss:bp - 0x0004:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = 0x01DF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	lstrcpy(Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp - 0x0004:word16]
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_0082
l01F7_0082:
	branch cx == 0x0000 l01F7_0084
	// succ:  l01F7_0082_2 l01F7_0084
l01F7_0082_2:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_0082
	// succ:  l01F7_0084 l01F7_0082
l01F7_0084:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	bx = cx
	bx = bx + Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	Mem0[ss:bp - 0x0004:word16] = bx
	Mem0[ds:bx:byte] = 0x00
	di = 0x48C2
	si = bp - 0x00A0
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_009F
l01F7_009F:
	branch cx == 0x0000 l01F7_00A1
	// succ:  l01F7_009F_3 l01F7_00A1
l01F7_009F_3:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_009F
	// succ:  l01F7_00A1 l01F7_009F
l01F7_00A1:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v18 = si
	si = di
	di = v18
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l01F7_00A9
l01F7_00A9:
	branch cx == 0x0000 l01F7_00AB
	// succ:  l01F7_00A9_4 l01F7_00AB
l01F7_00A9_4:
	v19 = Mem0[si:word16]
	Mem0[di:word16] = v19
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l01F7_00A9
	// succ:  l01F7_00A9
l01F7_00AB:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l01F7_00AD
l01F7_00AD:
	branch cx == 0x0000 l01F7_00AF
	// succ:  l01F7_00AD_1 l01F7_00AF
l01F7_00AD_1:
	v20 = Mem0[si:byte]
	Mem0[di:byte] = v20
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l01F7_00AD
	// succ:  l01F7_00AD
l01F7_00AF:
	SCZO = cond(Mem0[ds:0x48C2:byte] - 0x00)
	branch Test(EQ,Z) l01F7_012C
	// succ:  l01F7_00B6 l01F7_012C
l01F7_00B6:
	di = 0x48C2
	si = bp - 0x00F0
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_00C2
l01F7_00C2:
	branch cx == 0x0000 l01F7_00C4
	// succ:  l01F7_00C2_1 l01F7_00C4
l01F7_00C2_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_00C2
	// succ:  l01F7_00C4 l01F7_00C2
l01F7_00C4:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v21 = si
	si = di
	di = v21
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l01F7_00CC
l01F7_00CC:
	branch cx == 0x0000 l01F7_00CE
	// succ:  l01F7_00CC_2 l01F7_00CE
l01F7_00CC_2:
	v22 = Mem0[si:word16]
	Mem0[di:word16] = v22
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l01F7_00CC
	// succ:  l01F7_00CC
l01F7_00CE:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l01F7_00D0
l01F7_00D0:
	branch cx == 0x0000 l01F7_00D2
	// succ:  l01F7_00D0_1 l01F7_00D2
l01F7_00D0_1:
	v23 = Mem0[si:byte]
	Mem0[di:byte] = v23
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l01F7_00D0
	// succ:  l01F7_00D0
l01F7_00D2:
	di = bp - 0x00F0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_00DD
l01F7_00DD:
	branch cx == 0x0000 l01F7_00DF
	// succ:  l01F7_00DD_1 l01F7_00DF
l01F7_00DD_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_00DD
	// succ:  l01F7_00DF l01F7_00DD
l01F7_00DF:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	si = cx
	dx = bp - 0x00F1 + si
	ax = bp - 0x00F0
	SCZO = cond(dx - ax)
	branch Test(ULE,CZ) l01F7_00FC
	// succ:  l01F7_00F0 l01F7_00FC
l01F7_00F0:
	bx = dx
	SCZO = cond(Mem0[ds:bx:byte] - 0x5C)
	branch Test(EQ,Z) l01F7_00FC
	// succ:  l01F7_00F7 l01F7_00FC
l01F7_00F7:
	dx = dx - 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - ax)
	branch Test(UGT,CZ) l01F7_00F0
	// succ:  l01F7_00FC l01F7_00F0
l01F7_00FC:
	bx = dx
	Mem0[ds:bx:byte] = 0x00
	ax = bp - 0x00F0
	SCZO = cond(bx - ax)
	branch Test(ULE,CZ) l01F7_0131
	// succ:  l01F7_0109 l01F7_0131
l01F7_0109:
	bx = dx
	di = bx + 0x0001
	si = bp - 0x00A0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_0119
l01F7_0119:
	branch cx == 0x0000 l01F7_011B
	// succ:  l01F7_0119_2 l01F7_011B
l01F7_0119_2:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_0119
	// succ:  l01F7_011B l01F7_0119
l01F7_011B:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v26 = si
	si = di
	di = v26
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l01F7_0123
l01F7_0123:
	branch cx == 0x0000 l01F7_0125
	// succ:  l01F7_0123_3 l01F7_0125
l01F7_0123_3:
	v27 = Mem0[si:word16]
	Mem0[di:word16] = v27
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l01F7_0123
	// succ:  l01F7_0123
l01F7_0125:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l01F7_0127
l01F7_0127:
	branch cx == 0x0000 l01F7_0129
	// succ:  l01F7_0127_1 l01F7_0129
l01F7_0127_1:
	v29 = Mem0[si:byte]
	Mem0[di:byte] = v29
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l01F7_0127
	// succ:  l01F7_0127
l01F7_0129:
	goto l01F7_0131
	// succ:  l01F7_0131
l01F7_012C:
	Mem0[ss:bp - 0x00F0:byte] = 0x00
	// succ:  l01F7_0131
l01F7_0131:
	ax = ax - ax
	SCZO = cond(ax)
	cx = 0x0048
	di = bp - 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l01F7_013B
l01F7_013B:
	branch cx == 0x0000 l01F7_013D
	// succ:  l01F7_013B_1 l01F7_013D
l01F7_013B_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l01F7_013B
	// succ:  l01F7_013B
l01F7_013D:
	Mem0[ss:bp - 0x0050:word16] = 0x0048
	Mem0[ss:bp - 0x004E:word16] = 0x0000
	ax = Mem0[ds:0x4CC0:word16]
	Mem0[ss:bp - 0x004C:word16] = ax
	bx = Mem0[ss:bp - 0x0006:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0048:word16] = ax
	Mem0[ss:bp - 0x0046:word16] = ds
	Mem0[ss:bp - 0x003C:word16] = 0x0001
	Mem0[ss:bp - 0x003A:word16] = 0x0000
	ax = bp - 0x00A0
	Mem0[ss:bp - 0x0038:word16] = ax
	Mem0[ss:bp - 0x0036:word16] = ss
	ax = bp - 0x0140
	Mem0[ss:bp - 0x0030:word16] = ax
	Mem0[ss:bp - 0x002E:word16] = ss
	ax = 0x0050
	dx_ax = (int32) ax
	Mem0[ss:bp - 0x0034:word16] = ax
	Mem0[ss:bp - 0x0032:word16] = dx
	Mem0[ss:bp - 0x002C:word16] = ax
	Mem0[ss:bp - 0x002A:word16] = dx
	ax = bp - 0x00F0
	Mem0[ss:bp - 0x0028:word16] = ax
	Mem0[ss:bp - 0x0026:word16] = ss
	Mem0[ss:bp - 0x0020:word16] = 0x0804
	Mem0[ss:bp - 0x001E:word16] = 0x0000
	Mem0[ss:bp - 0x0018:word16] = 0x01FA
	Mem0[ss:bp - 0x0016:word16] = cs
	ax = bp - 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetSaveFileName(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_01C2
	// succ:  l01F7_01B0 l01F7_01C2
l01F7_01B0:
	ax = bp - 0x00A0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01F7_01FE (retsize: 2;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_01C2
	// succ:  l01F7_01BD l01F7_01C2
l01F7_01BD:
	Mem0[ss:bp - 0x0008:word16] = 0x0001
	// succ:  l01F7_01C2
l01F7_01C2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x0008:word16]
	// succ:  l01F7_01D5
l01F7_01D5:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_0000_exit
fn01F7_0000_exit:


// fn01F7_01FE
// Return size: 4
void fn01F7_01FE()
fn01F7_01FE_entry:
	// succ:  l01F7_01FE
l01F7_01FE:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0258
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 0x0015:byte] = 0xCC
	Mem0[ss:bp - 0x001C:word16] = 0x032D
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(EQ,Z) l01F7_0221
	// succ:  l01F7_021E l01F7_0221
l01F7_021E:
	goto l01F7_0B98
	// succ:  l01F7_0B98
l01F7_0221:
	bx = Mem0[ss:bp + 0x0006:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x00)
	branch Test(NE,Z) l01F7_022C
	// succ:  l01F7_0229 l01F7_022C
l01F7_0229:
	goto l01F7_0B98
	// succ:  l01F7_0B98
l01F7_022C:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	call fn004F_097A (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_023F
	// succ:  l01F7_023C l01F7_023F
l01F7_023C:
	goto l01F7_0307
	// succ:  l01F7_0307
l01F7_023F:
	si = bp - 0x00B4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp + 0x0006:word16]
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_024D
l01F7_024D:
	branch cx == 0x0000 l01F7_024F
	// succ:  l01F7_024D_1 l01F7_024F
l01F7_024D_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_024D
	// succ:  l01F7_024F l01F7_024D
l01F7_024F:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v17 = si
	si = di
	di = v17
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l01F7_0257
l01F7_0257:
	branch cx == 0x0000 l01F7_0259
	// succ:  l01F7_0257_2 l01F7_0259
l01F7_0257_2:
	v18 = Mem0[si:word16]
	Mem0[di:word16] = v18
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l01F7_0257
	// succ:  l01F7_0257
l01F7_0259:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l01F7_025B
l01F7_025B:
	branch cx == 0x0000 l01F7_025D
	// succ:  l01F7_025B_1 l01F7_025D
l01F7_025B_1:
	v19 = Mem0[si:byte]
	Mem0[di:byte] = v19
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l01F7_025B
	// succ:  l01F7_025B
l01F7_025D:
	di = bp - 0x00B4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_0268
l01F7_0268:
	branch cx == 0x0000 l01F7_026A
	// succ:  l01F7_0268_1 l01F7_026A
l01F7_0268_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_0268
	// succ:  l01F7_026A l01F7_0268
l01F7_026A:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	si = cx
	ax = bp - 0x00B5 + si
	Mem0[ss:bp - 0x0004:word16] = ax
	cx = bp - 0x00B4
	SCZO = cond(ax - cx)
	branch Test(ULT,C) l01F7_02B2
	// succ:  l01F7_027E l01F7_02B2
l01F7_027E:
	bx = Mem0[ss:bp - 0x0004:word16]
	// succ:  l01F7_0281
l01F7_0281:
	SCZO = cond(Mem0[ds:bx:byte] - 0x2E)
	branch Test(EQ,Z) l01F7_0294
	// succ:  l01F7_0286 l01F7_0294
l01F7_0286:
	SCZO = cond(Mem0[ds:bx:byte] - 0x5C)
	branch Test(EQ,Z) l01F7_0294
	// succ:  l01F7_028B l01F7_0294
l01F7_028B:
	bx = bx - 0x0001
	SZO = cond(bx)
	ax = bp - 0x00B4
	SCZO = cond(bx - ax)
	branch Test(UGE,C) l01F7_0281
	// succ:  l01F7_0294 l01F7_0281
l01F7_0294:
	SCZO = cond(Mem0[ds:bx:byte] - 0x2E)
	branch Test(NE,Z) l01F7_02B8
	// succ:  l01F7_0299 l01F7_02B8
l01F7_0299:
	si = Mem0[ds:0x0840:word16]
	di = si
	si = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_02A8
l01F7_02A8:
	branch cx == 0x0000 l01F7_02AA
	// succ:  l01F7_02A8_2 l01F7_02AA
l01F7_02A8_2:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_02A8
	// succ:  l01F7_02AA l01F7_02A8
l01F7_02AA:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v20 = si
	si = di
	di = v20
	goto l01F7_02DB
	// succ:  l01F7_02DB
l01F7_02B2:
	bx = Mem0[ss:bp - 0x0004:word16]
	goto l01F7_0294
	// succ:  l01F7_0294
l01F7_02B8:
	bx = Mem0[ds:0x0840:word16]
	di = bx
	si = bp - 0x00B4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_02C9
l01F7_02C9:
	branch cx == 0x0000 l01F7_02CB
	// succ:  l01F7_02C9_1 l01F7_02CB
l01F7_02C9_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_02C9
	// succ:  l01F7_02CB l01F7_02C9
l01F7_02CB:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	bx = cx
	v22 = si
	si = di
	di = v22
	cx = 0xFFFF
	// succ:  l01F7_02D6
l01F7_02D6:
	branch cx == 0x0000 l01F7_02D8
	// succ:  l01F7_02D6_2 l01F7_02D8
l01F7_02D6_2:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_02D6
	// succ:  l01F7_02D8 l01F7_02D6
l01F7_02D8:
	di = di - 0x0001
	SZO = cond(di)
	cx = bx
	// succ:  l01F7_02DB
l01F7_02DB:
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l01F7_02DD
l01F7_02DD:
	branch cx == 0x0000 l01F7_02DF
	// succ:  l01F7_02DD_1 l01F7_02DF
l01F7_02DD_1:
	v21 = Mem0[si:word16]
	Mem0[di:word16] = v21
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l01F7_02DD
	// succ:  l01F7_02DD
l01F7_02DF:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l01F7_02E1
l01F7_02E1:
	branch cx == 0x0000 l01F7_02E3
	// succ:  l01F7_02E1_1 l01F7_02E3
l01F7_02E1_1:
	v23 = Mem0[si:byte]
	Mem0[di:byte] = v23
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l01F7_02E1
	// succ:  l01F7_02E1
l01F7_02E3:
	ax = bp - 0x00B4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_09DC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = bp - 0x00B4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn004F_09B0 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_0307
	// succ:  l01F7_0304 l01F7_0307
l01F7_0304:
	goto l01F7_0B74
	// succ:  l01F7_0B74
l01F7_0307:
	Mem0[ss:bp - 0x001C:word16] = 0x0213
	ax = 0x083D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn004F_01E0 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x001A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_0325
	// succ:  l01F7_0322 l01F7_0325
l01F7_0322:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_0325:
	ax = 0x1000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	call fn004F_0724 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D76:word16]
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	cx = 0x0080
	di = bp - 0x0190
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l01F7_0357
l01F7_0357:
	branch cx == 0x0000 l01F7_0359
	// succ:  l01F7_0357_1 l01F7_0359
l01F7_0357_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l01F7_0357
	// succ:  l01F7_0357
l01F7_0359:
	Mem0[ss:bp - 0x0190:word16] = 0x7776
	al = 0x01
	Mem0[ss:bp - 0x018E:byte] = al
	Mem0[ss:bp - 0x018D:byte] = al
	Mem0[ss:bp - 0x018C:byte] = 0x00
	Mem0[ss:bp - 0x018B:byte] = 0x43
	Mem0[ss:bp - 0x0188:word16] = 0x0080
	Mem0[ss:bp - 0x0186:word16] = 0x0000
	Mem0[ss:bp - 0x001C:word16] = 0x02E3
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0190
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_03A2
	// succ:  l01F7_039F l01F7_03A2
l01F7_039F:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_03A2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4CE8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_03BF
	// succ:  l01F7_03BC l01F7_03BF
l01F7_03BC:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_03BF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x40AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0050)
	branch Test(EQ,Z) l01F7_03DE
	// succ:  l01F7_03DB l01F7_03DE
l01F7_03DB:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_03DE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4918
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0020)
	branch Test(EQ,Z) l01F7_03FD
	// succ:  l01F7_03FA l01F7_03FD
l01F7_03FA:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_03FD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0090
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_041A
	// succ:  l01F7_0417 l01F7_041A
l01F7_0417:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_041A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4D70
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0004)
	branch Test(EQ,Z) l01F7_0439
	// succ:  l01F7_0436 l01F7_0439
l01F7_0436:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_0439:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0028
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x063A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0028)
	branch Test(EQ,Z) l01F7_0458
	// succ:  l01F7_0455 l01F7_0458
l01F7_0455:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_0458:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x081C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x000A)
	branch Test(EQ,Z) l01F7_0477
	// succ:  l01F7_0474 l01F7_0477
l01F7_0474:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_0477:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x418E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0050)
	branch Test(EQ,Z) l01F7_0496
	// succ:  l01F7_0493 l01F7_0496
l01F7_0493:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_0496:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4DEA:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	sp = sp - 0x0002
	call fn01F7_1724 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_04A8
	// succ:  l01F7_04A5 l01F7_04A8
l01F7_04A5:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_04A8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_04C5
	// succ:  l01F7_04C2 l01F7_04C5
l01F7_04C2:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_04C5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x3D7C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_04E2
	// succ:  l01F7_04DF l01F7_04E2
l01F7_04DF:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_04E2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x3D81
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_04FC
	// succ:  l01F7_04F9 l01F7_04FC
l01F7_04F9:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_04FC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x3D6C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_0519
	// succ:  l01F7_0516 l01F7_0519
l01F7_0516:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_0519:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	call fn004F_05A4 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0184:word16] = ax
	Mem0[ss:bp - 0x0182:word16] = dx
	ax = ax - ax
	SCZO = cond(ax)
	cx = 0x0040
	di = bp - 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l01F7_0536
l01F7_0536:
	branch cx == 0x0000 l01F7_0538
	// succ:  l01F7_0536_1 l01F7_0538
l01F7_0536_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l01F7_0536
	// succ:  l01F7_0536
l01F7_0538:
	ax = Mem0[ds:0x4EB6:word16]
	Mem0[ss:bp - 0x0064:word16] = ax
	di = bp - 0x0060
	si = 0x4C52
	v25 = Mem0[si:word16]
	Mem0[di:word16] = v25
	si = si + 0x0002
	di = di + 0x0002
	v26 = Mem0[si:word16]
	Mem0[di:word16] = v26
	si = si + 0x0002
	di = di + 0x0002
	v27 = Mem0[si:word16]
	Mem0[di:word16] = v27
	si = si + 0x0002
	di = di + 0x0002
	v28 = Mem0[si:byte]
	Mem0[di:byte] = v28
	si = si + 0x0001
	di = di + 0x0001
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	Mem0[ss:bp - 0x0059:word16] = ax
	Mem0[ss:bp - 0x0057:word16] = dx
	ax = Mem0[ds:0x0096:word16]
	Mem0[ss:bp - 0x0055:word16] = ax
	ax = Mem0[ds:0x032C:word16]
	Mem0[ss:bp - 0x0053:word16] = ax
	ax = Mem0[ds:0x032A:word16]
	Mem0[ss:bp - 0x0051:word16] = ax
	ax = Mem0[ds:0x0830:word16]
	Mem0[ss:bp - 0x004F:word16] = ax
	ax = Mem0[ds:0x00B2:word16]
	Mem0[ss:bp - 0x004D:word16] = ax
	ax = Mem0[ds:0x4C62:word16]
	dx = Mem0[ds:0x4C64:word16]
	Mem0[ss:bp - 0x004B:word16] = ax
	Mem0[ss:bp - 0x0049:word16] = dx
	ax = Mem0[ds:0x0480:word16]
	Mem0[ss:bp - 0x0047:word16] = ax
	ax = Mem0[ds:0x0482:word16]
	Mem0[ss:bp - 0x0045:word16] = ax
	ax = Mem0[ds:0x4C60:word16]
	Mem0[ss:bp - 0x0043:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0040
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0064
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_05AF
	// succ:  l01F7_05AC l01F7_05AF
l01F7_05AC:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_05AF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	call fn004F_05A4 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0180:word16] = ax
	Mem0[ss:bp - 0x017E:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_05DF
	// succ:  l01F7_05DC l01F7_05DF
l01F7_05DC:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_05DF:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_05FC
	// succ:  l01F7_05F9 l01F7_05FC
l01F7_05F9:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_05FC:
	SCZO = cond(Mem0[ds:0x4CE6:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_063A
	// succ:  l01F7_0603 l01F7_063A
l01F7_0603:
	bx = Mem0[ds:0x4CE6:word16]
	di = Mem0[ds:bx:word16]
	si = 0x000E
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0001)
	branch Test(ULE,CZ) l01F7_0622
	// succ:  l01F7_0613 l01F7_0622
l01F7_0613:
	si = Mem0[ds:di:word16]
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + 0x0004
	SCZO = cond(si)
	// succ:  l01F7_0622
l01F7_0622:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l01F7_063A
	// succ:  l01F7_0637 l01F7_063A
l01F7_0637:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_063A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0015
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0100)
	branch Test(EQ,Z) l01F7_0659
	// succ:  l01F7_0656 l01F7_0659
l01F7_0656:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_0659:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	call fn004F_05A4 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	Mem0[ss:bp - 0x017C:word16] = ax
	Mem0[ss:bp - 0x017A:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0522
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x000A)
	branch Test(EQ,Z) l01F7_068B
	// succ:  l01F7_0688 l01F7_068B
l01F7_0688:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_068B:
	Mem0[ss:bp - 0x0018:word16] = 0x0000
	si = 0x0522
	di = Mem0[ss:bp - 0x001A:word16]
	// succ:  l01F7_0696
l01F7_0696:
	SCZO = cond(Mem0[ds:si + 0x000A:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_06AB
	// succ:  l01F7_069C l01F7_06AB
l01F7_069C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn01F7_184A (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_06AB
	// succ:  l01F7_06A8 l01F7_06AB
l01F7_06A8:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_06AB:
	SCZO = cond(Mem0[ds:si + 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_06C0
	// succ:  l01F7_06B1 l01F7_06C0
l01F7_06B1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn01F7_1724 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_06C0
	// succ:  l01F7_06BD l01F7_06C0
l01F7_06BD:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_06C0:
	si = si + 0x000E
	SCZO = cond(si)
	v30 = Mem0[ss:bp - 0x0018:word16] + 0x0001
	Mem0[ss:bp - 0x0018:word16] = v30
	SZO = cond(v30)
	SCZO = cond(Mem0[ss:bp - 0x0018:word16] - 0x000A)
	branch Test(LT,SO) l01F7_0696
	// succ:  l01F7_06CC l01F7_0696
l01F7_06CC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_05A4 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0178:word16] = ax
	Mem0[ss:bp - 0x0176:word16] = dx
	ax = Mem0[ds:0x4CBC:word16]
	Mem0[ss:bp - 0x0256:word16] = ax
	cx = Mem0[ds:0x4128:word16]
	Mem0[ss:bp - 0x0254:word16] = cx
	cx = Mem0[ds:0x412A:word16]
	Mem0[ss:bp - 0x0252:word16] = cx
	cx = bp - 0x0250
	Mem0[ss:bp - 0x000C:word16] = cx
	Mem0[ss:bp - 0x0010:word16] = 0x0000
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GT,SZO) l01F7_0707
	// succ:  l01F7_0704 l01F7_0707
l01F7_0704:
	goto l01F7_0801
	// succ:  l01F7_0801
l01F7_0707:
	Mem0[ss:bp - 0x000E:word16] = 0x4B6F
	di = cx
	// succ:  l01F7_070E
l01F7_070E:
	bx = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx - 0x000F:word16]
	ax = bp - 0x0024
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetWindowRect(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x0024
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScreenToClient(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4D88:word16]
	ax = bp - 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ScreenToClient(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	ax = Mem0[ss:bp - 0x0024:word16]
	Mem0[ds:di:word16] = ax
	ax = Mem0[ss:bp - 0x0022:word16]
	Mem0[ds:di + 0x0002:word16] = ax
	ax = Mem0[ss:bp - 0x0020:word16]
	ax = ax - Mem0[ss:bp - 0x0024:word16]
	SCZO = cond(ax)
	Mem0[ds:di + 0x0004:word16] = ax
	ax = Mem0[ss:bp - 0x001E:word16]
	ax = ax - Mem0[ss:bp - 0x0022:word16]
	SCZO = cond(ax)
	Mem0[ds:di + 0x0006:word16] = ax
	Mem0[ss:bp - 0x0018:word16] = 0x0007
	Mem0[ds:di + 0x0016:word16] = 0xFFFF
	bx = Mem0[ss:bp - 0x000E:word16]
	SZO = cond(Mem0[ds:bx - 0x0004:byte] & 0x01)
	C = false
	branch Test(NE,Z) l01F7_07C3
	// succ:  l01F7_076A l01F7_07C3
l01F7_076A:
	dx = Mem0[ds:bx:word16]
	SCZO = cond(dx - Mem0[ds:0x4DEA:word16])
	branch Test(EQ,Z) l01F7_07C3
	// succ:  l01F7_0772 l01F7_07C3
l01F7_0772:
	ax = di + 0x0016
	Mem0[ss:bp - 0x000A:word16] = ax
	Mem0[ss:bp - 0x0006:word16] = dx
	Mem0[ss:bp - 0x000C:word16] = di
	di = dx
	// succ:  l01F7_0780
l01F7_0780:
	bx = Mem0[ds:di:word16]
	ax = Mem0[ds:bx + 0x000A:word16]
	Mem0[ss:bp - 0x0008:word16] = ax
	si = ax
	ax = Mem0[ds:si:word16]
	ax = ax + 0x0028
	SCZO = cond(ax)
	bx = ax
	dx = dx - dx
	SCZO = cond(dx)
	si = ax
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - di)
	branch Test(EQ,Z) l01F7_07A6
	// succ:  l01F7_079A l01F7_07A6
l01F7_079A:
	Mem0[ss:bp - 0x0006:word16] = di
	// succ:  l01F7_079D
l01F7_079D:
	dx = dx + 0x0001
	SZO = cond(dx)
	bx = bx + 0x0005
	SCZO = cond(bx)
	SCZO = cond(Mem0[ds:bx + 0x0003:word16] - di)
	branch Test(NE,Z) l01F7_079D
	// succ:  l01F7_07A6 l01F7_079D
l01F7_07A6:
	Mem0[ss:bp - 0x0004:word16] = dx
	v32 = Mem0[ss:bp - 0x0018:word16] - 0x0001
	Mem0[ss:bp - 0x0018:word16] = v32
	SZO = cond(v32)
	ax = dx
	v33 = Mem0[ss:bp - 0x000A:word16] - 0x0002
	Mem0[ss:bp - 0x000A:word16] = v33
	SCZO = cond(v33)
	bx = Mem0[ss:bp - 0x000A:word16]
	Mem0[ds:bx:word16] = ax
	di = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(di - Mem0[ds:0x4DEA:word16])
	branch Test(NE,Z) l01F7_0780
	// succ:  l01F7_07C0 l01F7_0780
l01F7_07C0:
	di = Mem0[ss:bp - 0x000C:word16]
	// succ:  l01F7_07C3
l01F7_07C3:
	SCZO = cond(Mem0[ss:bp - 0x0018:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_07E9
	// succ:  l01F7_07C9 l01F7_07E9
l01F7_07C9:
	ax = 0x0008
	ax = ax - Mem0[ss:bp - 0x0018:word16]
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0018:word16]
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + di
	SCZO = cond(ax)
	ax = ax + 0x0008
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = di + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0932 (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	// succ:  l01F7_07E9
l01F7_07E9:
	v34 = Mem0[ss:bp - 0x000E:word16] + 0x0011
	Mem0[ss:bp - 0x000E:word16] = v34
	SCZO = cond(v34)
	di = di + 0x0018
	SCZO = cond(di)
	ax = Mem0[ds:0x4CBC:word16]
	v35 = Mem0[ss:bp - 0x0010:word16] + 0x0001
	Mem0[ss:bp - 0x0010:word16] = v35
	SZO = cond(v35)
	SCZO = cond(Mem0[ss:bp - 0x0010:word16] - ax)
	branch Test(GE,SO) l01F7_07FE
	// succ:  l01F7_07FB l01F7_07FE
l01F7_07FB:
	goto l01F7_070E
	// succ:  l01F7_070E
l01F7_07FE:
	di = Mem0[ss:bp - 0x001A:word16]
	// succ:  l01F7_0801
l01F7_0801:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x00C6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0256
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_081D
	// succ:  l01F7_081A l01F7_081D
l01F7_081A:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_081D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_05A4 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0174:word16] = ax
	Mem0[ss:bp - 0x0172:word16] = dx
	sp = sp - 0x0002
	call fn01F7_1C8E (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_0841
	// succ:  l01F7_0836 l01F7_0841
l01F7_0836:
	sp = sp - 0x0002
	call fn01F7_24C2 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_0841
	// succ:  l01F7_083E l01F7_0841
l01F7_083E:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_0841:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0017
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0110
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0017)
	branch Test(EQ,Z) l01F7_085F
	// succ:  l01F7_085C l01F7_085F
l01F7_085C:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_085F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0016
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0024
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x3D86
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0016)
	branch Test(EQ,Z) l01F7_087C
	// succ:  l01F7_0879 l01F7_087C
l01F7_0879:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_087C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4E48
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0016)
	branch Test(EQ,Z) l01F7_0896
	// succ:  l01F7_0893 l01F7_0896
l01F7_0893:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_0896:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_05A4 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000E:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = dx
	Mem0[ss:bp - 0x000A:word16] = 0x3D8C
	ax = bp - 0x0110
	Mem0[ss:bp - 0x0004:word16] = ax
	di = ax
	// succ:  l01F7_08B3
l01F7_08B3:
	bx = Mem0[ss:bp - 0x000A:word16]
	si = Mem0[ds:bx:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01F7_0906
	// succ:  l01F7_08BC l01F7_0906
l01F7_08BC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	GlobalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0012:word16] = ax
	Mem0[ss:bp - 0x0010:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l01F7_0922
	// succ:  l01F7_08CC l01F7_0922
l01F7_08CC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	GlobalSize(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0014:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	sp = sp - 0x0002
	call fn01F7_18B2 (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_08E8
	// succ:  l01F7_08E5 l01F7_08E8
l01F7_08E5:
	goto l01F7_0B42
	// succ:  l01F7_0B42
l01F7_08E8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	GlobalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01F7_08EE
l01F7_08EE:
	ax = Mem0[ss:bp - 0x000E:word16]
	dx = Mem0[ss:bp - 0x000C:word16]
	Mem0[ds:di:word16] = ax
	Mem0[ds:di + 0x0002:word16] = dx
	ax = Mem0[ss:bp - 0x0014:word16]
	dx = dx - dx
	SCZO = cond(dx)
	v36 = Mem0[ss:bp - 0x000E:word16] + ax
	Mem0[ss:bp - 0x000E:word16] = v36
	SCZO = cond(v36)
	v37 = Mem0[ss:bp - 0x000C:word16] + dx + C
	Mem0[ss:bp - 0x000C:word16] = v37
	SCZO = cond(v37)
	goto l01F7_0929
	// succ:  l01F7_0929
l01F7_0906:
	cx = Mem0[ds:bx + 0x0002:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(EQ,Z) l01F7_0922
	// succ:  l01F7_090D l01F7_0922
l01F7_090D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn01F7_2B68 (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0014:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_091F
	// succ:  l01F7_091C l01F7_091F
l01F7_091C:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_091F:
	goto l01F7_08EE
	// succ:  l01F7_08EE
l01F7_0922:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:di + 0x0002:word16] = ax
	Mem0[ds:di:word16] = ax
	// succ:  l01F7_0929
l01F7_0929:
	v38 = Mem0[ss:bp - 0x000A:word16] + 0x0024
	Mem0[ss:bp - 0x000A:word16] = v38
	SCZO = cond(v38)
	di = di + 0x0004
	SCZO = cond(di)
	ax = bp - 0x00B8
	SCZO = cond(di - ax)
	branch Test(UGE,C) l01F7_093B
	// succ:  l01F7_0938 l01F7_093B
l01F7_0938:
	goto l01F7_08B3
	// succ:  l01F7_08B3
l01F7_093B:
	di = Mem0[ss:bp - 0x001A:word16]
	ax = Mem0[ss:bp - 0x000E:word16]
	dx = Mem0[ss:bp - 0x000C:word16]
	Mem0[ss:bp - 0x00B8:word16] = ax
	Mem0[ss:bp - 0x00B6:word16] = dx
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0172:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0174:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_0522 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0017
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0110
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0017)
	branch Test(EQ,Z) l01F7_097E
	// succ:  l01F7_097B l01F7_097E
l01F7_097B:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_097E:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_0522 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_05A4 (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0170:word16] = ax
	Mem0[ss:bp - 0x016E:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0504
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_09BC
	// succ:  l01F7_09B9 l01F7_09BC
l01F7_09B9:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_09BC:
	SCZO = cond(Mem0[ds:0x0504:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_09FA
	// succ:  l01F7_09C3 l01F7_09FA
l01F7_09C3:
	bx = Mem0[ds:0x0504:word16]
	cx = Mem0[ds:bx:word16]
	si = 0x000E
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0001)
	branch Test(ULE,CZ) l01F7_09E4
	// succ:  l01F7_09D3 l01F7_09E4
l01F7_09D3:
	bx = cx
	si = Mem0[ds:bx:word16]
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + 0x0004
	SCZO = cond(si)
	// succ:  l01F7_09E4
l01F7_09E4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l01F7_09FA
	// succ:  l01F7_09F7 l01F7_09FA
l01F7_09F7:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_09FA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0506
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_0A15
	// succ:  l01F7_0A12 l01F7_0A15
l01F7_0A12:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_0A15:
	SCZO = cond(Mem0[ds:0x0506:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_0A53
	// succ:  l01F7_0A1C l01F7_0A53
l01F7_0A1C:
	bx = Mem0[ds:0x0506:word16]
	cx = Mem0[ds:bx:word16]
	si = 0x000E
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0001)
	branch Test(ULE,CZ) l01F7_0A3D
	// succ:  l01F7_0A2C l01F7_0A3D
l01F7_0A2C:
	bx = cx
	si = Mem0[ds:bx:word16]
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + 0x0004
	SCZO = cond(si)
	// succ:  l01F7_0A3D
l01F7_0A3D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l01F7_0A53
	// succ:  l01F7_0A50 l01F7_0A53
l01F7_0A50:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_0A53:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_0522 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0190
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_0A7D
	// succ:  l01F7_0A7A l01F7_0A7D
l01F7_0A7A:
	goto l01F7_0B48
	// succ:  l01F7_0B48
l01F7_0A7D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_00BC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	SetFocus(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	Mem0[ss:bp - 0x0258:word16] = bx
	SCZO = cond(Mem0[ds:bx + 0x3D8C:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_0ABF
	// succ:  l01F7_0AA3 l01F7_0ABF
l01F7_0AA3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x3D8C:word16]
	GlobalFree(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	Mem0[ss:bp - 0x0258:word16] = bx
	Mem0[ds:bx + 0x3D8C:word16] = 0x0000
	// succ:  l01F7_0ABF
l01F7_0ABF:
	bx = Mem0[ss:bp - 0x0258:word16]
	SCZO = cond(Mem0[ds:bx + 0x3D8E:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_0AE1
	// succ:  l01F7_0ACA l01F7_0AE1
l01F7_0ACA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x3D8E:word16]
	sp = sp - 0x0002
	call fn01F7_2D28 (retsize: 2;)
	sp = sp + 0x0002
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	Mem0[ds:bx + 0x3D8E:word16] = 0x0000
	// succ:  l01F7_0AE1
l01F7_0AE1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D72:word16]
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = 0x48C2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp + 0x0006:word16]
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_0AFF
l01F7_0AFF:
	branch cx == 0x0000 l01F7_0B01
	// succ:  l01F7_0AFF_1 l01F7_0B01
l01F7_0AFF_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_0AFF
	// succ:  l01F7_0B01 l01F7_0AFF
l01F7_0B01:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v40 = si
	si = di
	di = v40
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l01F7_0B09
l01F7_0B09:
	branch cx == 0x0000 l01F7_0B0B
	// succ:  l01F7_0B09_2 l01F7_0B0B
l01F7_0B09_2:
	v41 = Mem0[si:word16]
	Mem0[di:word16] = v41
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l01F7_0B09
	// succ:  l01F7_0B09
l01F7_0B0B:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l01F7_0B0D
l01F7_0B0D:
	branch cx == 0x0000 l01F7_0B0F
	// succ:  l01F7_0B0D_1 l01F7_0B0F
l01F7_0B0D_1:
	v42 = Mem0[si:byte]
	Mem0[di:byte] = v42
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l01F7_0B0D
	// succ:  l01F7_0B0D
l01F7_0B0F:
	SCZO = cond(Mem0[ds:0x4C5A:word16] - ax)
	branch Test(NE,Z) l01F7_0B22
	// succ:  l01F7_0B15 l01F7_0B22
l01F7_0B15:
	ax = bp - 0x00B4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_09DC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l01F7_0B22
l01F7_0B22:
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	Mem0[ds:0x0834:word16] = ax
	Mem0[ds:0x0836:word16] = dx
	ax = 0x042E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00CF_0298 (retsize: 4;)
	sp = sp + 0x0004
	ax = 0x0001
	goto l01F7_0B9A
	// succ:  l01F7_0B9A
l01F7_0B42:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	GlobalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01F7_0B48
l01F7_0B48:
	SCZO = cond(Mem0[ss:bp - 0x001A:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_0B64
	// succ:  l01F7_0B4E l01F7_0B64
l01F7_0B4E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001A:word16]
	call fn004F_00BC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	call fn004F_09DC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l01F7_0B64
l01F7_0B64:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = bp - 0x00B4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_09B0 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	// succ:  l01F7_0B74
l01F7_0B74:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x001C:word16]
	ax = bp - 0x00B4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = bp - 0x00B4
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	// succ:  l01F7_0B98
l01F7_0B98:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01F7_0B9A
l01F7_0B9A:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_01FE_exit
fn01F7_01FE_exit:


// fn01F7_0BA6
// Return size: 4
void fn01F7_0BA6()
fn01F7_0BA6_entry:
	// succ:  l01F7_0BA6
l01F7_0BA6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x03B0
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0030
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_0BCD
	// succ:  l01F7_0BCA l01F7_0BCD
l01F7_0BCA:
	goto l01F7_16F4
	// succ:  l01F7_16F4
l01F7_0BCD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x01E5
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	lstrcpy(Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp - 0x0004:word16]
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_0BEC
l01F7_0BEC:
	branch cx == 0x0000 l01F7_0BEE
	// succ:  l01F7_0BEC_1 l01F7_0BEE
l01F7_0BEC_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_0BEC
	// succ:  l01F7_0BEE l01F7_0BEC
l01F7_0BEE:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	cx = cx + Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(cx)
	cx = cx + 0x0001
	SZO = cond(cx)
	Mem0[ss:bp - 0x0004:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = 0x01DF
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cs
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	lstrcpy(Mem0[ss:sp + 4:segptr32], Mem0[ss:sp:segptr32])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp - 0x0004:word16]
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_0C0E
l01F7_0C0E:
	branch cx == 0x0000 l01F7_0C10
	// succ:  l01F7_0C0E_2 l01F7_0C10
l01F7_0C0E_2:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_0C0E
	// succ:  l01F7_0C10 l01F7_0C0E
l01F7_0C10:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	bx = cx
	bx = bx + Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	Mem0[ss:bp - 0x0004:word16] = bx
	Mem0[ds:bx:byte] = 0x00
	di = 0x48C2
	si = bp - 0x011A
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_0C2B
l01F7_0C2B:
	branch cx == 0x0000 l01F7_0C2D
	// succ:  l01F7_0C2B_3 l01F7_0C2D
l01F7_0C2B_3:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_0C2B
	// succ:  l01F7_0C2D l01F7_0C2B
l01F7_0C2D:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v18 = si
	si = di
	di = v18
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l01F7_0C35
l01F7_0C35:
	branch cx == 0x0000 l01F7_0C37
	// succ:  l01F7_0C35_4 l01F7_0C37
l01F7_0C35_4:
	v19 = Mem0[si:word16]
	Mem0[di:word16] = v19
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l01F7_0C35
	// succ:  l01F7_0C35
l01F7_0C37:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l01F7_0C39
l01F7_0C39:
	branch cx == 0x0000 l01F7_0C3B
	// succ:  l01F7_0C39_1 l01F7_0C3B
l01F7_0C39_1:
	v20 = Mem0[si:byte]
	Mem0[di:byte] = v20
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l01F7_0C39
	// succ:  l01F7_0C39
l01F7_0C3B:
	SCZO = cond(Mem0[ds:0x48C2:byte] - 0x00)
	branch Test(EQ,Z) l01F7_0CB8
	// succ:  l01F7_0C42 l01F7_0CB8
l01F7_0C42:
	di = 0x48C2
	si = bp - 0x016A
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_0C4E
l01F7_0C4E:
	branch cx == 0x0000 l01F7_0C50
	// succ:  l01F7_0C4E_1 l01F7_0C50
l01F7_0C4E_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_0C4E
	// succ:  l01F7_0C50 l01F7_0C4E
l01F7_0C50:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v21 = si
	si = di
	di = v21
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l01F7_0C58
l01F7_0C58:
	branch cx == 0x0000 l01F7_0C5A
	// succ:  l01F7_0C58_2 l01F7_0C5A
l01F7_0C58_2:
	v22 = Mem0[si:word16]
	Mem0[di:word16] = v22
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l01F7_0C58
	// succ:  l01F7_0C58
l01F7_0C5A:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l01F7_0C5C
l01F7_0C5C:
	branch cx == 0x0000 l01F7_0C5E
	// succ:  l01F7_0C5C_1 l01F7_0C5E
l01F7_0C5C_1:
	v23 = Mem0[si:byte]
	Mem0[di:byte] = v23
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l01F7_0C5C
	// succ:  l01F7_0C5C
l01F7_0C5E:
	di = bp - 0x016A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_0C69
l01F7_0C69:
	branch cx == 0x0000 l01F7_0C6B
	// succ:  l01F7_0C69_1 l01F7_0C6B
l01F7_0C69_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_0C69
	// succ:  l01F7_0C6B l01F7_0C69
l01F7_0C6B:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	si = cx
	dx = bp - 0x016B + si
	ax = bp - 0x016A
	SCZO = cond(dx - ax)
	branch Test(ULE,CZ) l01F7_0C88
	// succ:  l01F7_0C7C l01F7_0C88
l01F7_0C7C:
	bx = dx
	SCZO = cond(Mem0[ds:bx:byte] - 0x5C)
	branch Test(EQ,Z) l01F7_0C88
	// succ:  l01F7_0C83 l01F7_0C88
l01F7_0C83:
	dx = dx - 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - ax)
	branch Test(UGT,CZ) l01F7_0C7C
	// succ:  l01F7_0C88 l01F7_0C7C
l01F7_0C88:
	bx = dx
	Mem0[ds:bx:byte] = 0x00
	ax = bp - 0x016A
	SCZO = cond(bx - ax)
	branch Test(ULE,CZ) l01F7_0CBD
	// succ:  l01F7_0C95 l01F7_0CBD
l01F7_0C95:
	bx = dx
	di = bx + 0x0001
	si = bp - 0x011A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_0CA5
l01F7_0CA5:
	branch cx == 0x0000 l01F7_0CA7
	// succ:  l01F7_0CA5_2 l01F7_0CA7
l01F7_0CA5_2:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_0CA5
	// succ:  l01F7_0CA7 l01F7_0CA5
l01F7_0CA7:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v27 = si
	si = di
	di = v27
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l01F7_0CAF
l01F7_0CAF:
	branch cx == 0x0000 l01F7_0CB1
	// succ:  l01F7_0CAF_3 l01F7_0CB1
l01F7_0CAF_3:
	v28 = Mem0[si:word16]
	Mem0[di:word16] = v28
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l01F7_0CAF
	// succ:  l01F7_0CAF
l01F7_0CB1:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l01F7_0CB3
l01F7_0CB3:
	branch cx == 0x0000 l01F7_0CB5
	// succ:  l01F7_0CB3_1 l01F7_0CB5
l01F7_0CB3_1:
	v29 = Mem0[si:byte]
	Mem0[di:byte] = v29
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l01F7_0CB3
	// succ:  l01F7_0CB3
l01F7_0CB5:
	goto l01F7_0CBD
	// succ:  l01F7_0CBD
l01F7_0CB8:
	Mem0[ss:bp - 0x016A:byte] = 0x00
	// succ:  l01F7_0CBD
l01F7_0CBD:
	si = Mem0[ss:bp - 0x0006:word16]
	ax = ax - ax
	SCZO = cond(ax)
	cx = 0x0048
	di = bp - 0x00CA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l01F7_0CCB
l01F7_0CCB:
	branch cx == 0x0000 l01F7_0CCD
	// succ:  l01F7_0CCB_1 l01F7_0CCD
l01F7_0CCB_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l01F7_0CCB
	// succ:  l01F7_0CCB
l01F7_0CCD:
	Mem0[ss:bp - 0x00CA:word16] = 0x0048
	Mem0[ss:bp - 0x00C8:word16] = 0x0000
	ax = Mem0[ds:0x4CC0:word16]
	Mem0[ss:bp - 0x00C6:word16] = ax
	ax = Mem0[ds:si:word16]
	Mem0[ss:bp - 0x00C2:word16] = ax
	Mem0[ss:bp - 0x00C0:word16] = ds
	Mem0[ss:bp - 0x00B6:word16] = 0x0001
	Mem0[ss:bp - 0x00B4:word16] = 0x0000
	ax = bp - 0x011A
	Mem0[ss:bp - 0x00B2:word16] = ax
	Mem0[ss:bp - 0x00B0:word16] = ss
	ax = bp - 0x01BA
	Mem0[ss:bp - 0x00AA:word16] = ax
	Mem0[ss:bp - 0x00A8:word16] = ss
	ax = 0x0050
	dx_ax = (int32) ax
	Mem0[ss:bp - 0x00AE:word16] = ax
	Mem0[ss:bp - 0x00AC:word16] = dx
	Mem0[ss:bp - 0x00A6:word16] = ax
	Mem0[ss:bp - 0x00A4:word16] = dx
	ax = bp - 0x016A
	Mem0[ss:bp - 0x00A2:word16] = ax
	Mem0[ss:bp - 0x00A0:word16] = ss
	Mem0[ss:bp - 0x009A:word16] = 0x1804
	Mem0[ss:bp - 0x0098:word16] = 0x0000
	Mem0[ss:bp - 0x0092:word16] = 0x01FA
	Mem0[ss:bp - 0x0090:word16] = cs
	ax = 0x0400
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x020A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	ax = bp - 0x020A
	Mem0[ss:bp - 0x009E:word16] = ax
	Mem0[ss:bp - 0x009C:word16] = ss
	ax = bp - 0x00CA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetOpenFileName(Mem0[ss:sp:segptr32])
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_0D84
	// succ:  l01F7_0D6D l01F7_0D84
l01F7_0D6D:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l01F7_0D74
	// succ:  l01F7_0D71 l01F7_0D74
l01F7_0D71:
	goto l01F7_1719
	// succ:  l01F7_1719
l01F7_0D74:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	goto l01F7_1719
	// succ:  l01F7_1719
l01F7_0D84:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01F7_0D94
	// succ:  l01F7_0D88 l01F7_0D94
l01F7_0D88:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l01F7_0D94
l01F7_0D94:
	ax = 0x0842
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x011A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01E0 (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x000E:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_0DAF
	// succ:  l01F7_0DAC l01F7_0DAF
l01F7_0DAC:
	goto l01F7_16F4
	// succ:  l01F7_16F4
l01F7_0DAF:
	SCZO = cond(Mem0[ds:0x4EB6:byte] - 0x01)
	branch Test(NE,Z) l01F7_0DC9
	// succ:  l01F7_0DB6 l01F7_0DC9
l01F7_0DB6:
	Mem0[ds:0x4D8E:byte] = 0x00
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1E96 (retsize: 4;)
	sp = sp + 0x0002
	call fn002F_35B8 (retsize: 4;)
	// succ:  l01F7_0DC9
l01F7_0DC9:
	ax = 0x1000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	call fn004F_0724 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D76:word16]
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x02E6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_0E0C
	// succ:  l01F7_0E09 l01F7_0E0C
l01F7_0E09:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_0E0C:
	SCZO = cond(Mem0[ss:bp - 0x02E6:word16] - 0x7776)
	branch Test(EQ,Z) l01F7_0E17
	// succ:  l01F7_0E14 l01F7_0E17
l01F7_0E14:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_0E17:
	SCZO = cond(Mem0[ss:bp - 0x02E4:byte] - 0x01)
	branch Test(EQ,Z) l01F7_0E21
	// succ:  l01F7_0E1E l01F7_0E21
l01F7_0E1E:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_0E21:
	SCZO = cond(Mem0[ss:bp - 0x02E3:byte] - 0x01)
	branch Test(EQ,Z) l01F7_0E32
	// succ:  l01F7_0E28 l01F7_0E32
l01F7_0E28:
	SCZO = cond(Mem0[ss:bp - 0x02E3:byte] - 0x00)
	branch Test(EQ,Z) l01F7_0E32
	// succ:  l01F7_0E2F l01F7_0E32
l01F7_0E2F:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_0E32:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x02DC:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x02DE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	call fn004F_0522 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_0E4F
	// succ:  l01F7_0E4C l01F7_0E4F
l01F7_0E4C:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_0E4F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0080
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4CE8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_0E6C
	// succ:  l01F7_0E69 l01F7_0E6C
l01F7_0E69:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_0E6C:
	SCZO = cond(Mem0[ds:0x4D23:byte] - 0x00)
	branch Test(EQ,Z) l01F7_0E92
	// succ:  l01F7_0E73 l01F7_0E92
l01F7_0E73:
	ax = 0x418E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x011A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0097_0E16 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x4D24:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_0E92
	// succ:  l01F7_0E88 l01F7_0E92
l01F7_0E88:
	Mem0[ds:0x4D23:byte] = 0x00
	Mem0[ds:0x418E:byte] = 0x00
	// succ:  l01F7_0E92
l01F7_0E92:
	SCZO = cond(Mem0[ds:0x4D23:byte] - 0x00)
	branch Test(NE,Z) l01F7_0EB3
	// succ:  l01F7_0E99 l01F7_0EB3
l01F7_0E99:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D28:word16]
	SCZO = cond(Mem0[ds:0x4D22:byte] - 0x01)
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax + 0x0144
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LoadIcon(Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x0006
	Mem0[ds:0x4D24:word16] = ax
	// succ:  l01F7_0EB3
l01F7_0EB3:
	call fn002F_350C (retsize: 4;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x40AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0050)
	branch Test(EQ,Z) l01F7_0ED7
	// succ:  l01F7_0ED4 l01F7_0ED7
l01F7_0ED4:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_0ED7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0020
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4918
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0020)
	branch Test(EQ,Z) l01F7_0EF6
	// succ:  l01F7_0EF3 l01F7_0EF6
l01F7_0EF3:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_0EF6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0090
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_0F13
	// succ:  l01F7_0F10 l01F7_0F13
l01F7_0F10:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_0F13:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4D70
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0004)
	branch Test(EQ,Z) l01F7_0F32
	// succ:  l01F7_0F2F l01F7_0F32
l01F7_0F2F:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_0F32:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0028
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x063A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0028)
	branch Test(EQ,Z) l01F7_0F51
	// succ:  l01F7_0F4E l01F7_0F51
l01F7_0F4E:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_0F51:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x081C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x000A)
	branch Test(EQ,Z) l01F7_0F70
	// succ:  l01F7_0F6D l01F7_0F70
l01F7_0F6D:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_0F70:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0050
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x418E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0050)
	branch Test(EQ,Z) l01F7_0F8F
	// succ:  l01F7_0F8C l01F7_0F8F
l01F7_0F8C:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_0F8F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01F7_191C (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ds:0x4DEA:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_0FA3
	// succ:  l01F7_0FA0 l01F7_0FA3
l01F7_0FA0:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_0FA3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_0FC0
	// succ:  l01F7_0FBD l01F7_0FC0
l01F7_0FBD:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_0FC0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x3D7C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_0FDD
	// succ:  l01F7_0FDA l01F7_0FDD
l01F7_0FDA:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_0FDD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x3D81
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_0FF7
	// succ:  l01F7_0FF4 l01F7_0FF7
l01F7_0FF4:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_0FF7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x3D6C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_1014
	// succ:  l01F7_1011 l01F7_1014
l01F7_1011:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_1014:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x02D8:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x02DA:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	call fn004F_0522 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_1031
	// succ:  l01F7_102E l01F7_1031
l01F7_102E:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_1031:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0040
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0082
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_104F
	// succ:  l01F7_104C l01F7_104F
l01F7_104C:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_104F:
	ax = Mem0[ss:bp - 0x0082:word16]
	Mem0[ds:0x4EB6:word16] = ax
	ax = 0x4C52
	di = ax
	si = bp - 0x007E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	v30 = Mem0[si:word16]
	Mem0[di:word16] = v30
	si = si + 0x0002
	di = di + 0x0002
	v31 = Mem0[si:word16]
	Mem0[di:word16] = v31
	si = si + 0x0002
	di = di + 0x0002
	v32 = Mem0[si:word16]
	Mem0[di:word16] = v32
	si = si + 0x0002
	di = di + 0x0002
	v33 = Mem0[si:byte]
	Mem0[di:byte] = v33
	si = si + 0x0001
	di = di + 0x0001
	ax = Mem0[ss:bp - 0x0077:word16]
	dx = Mem0[ss:bp - 0x0075:word16]
	Mem0[ds:0x3CFA:word16] = ax
	Mem0[ds:0x3CFC:word16] = dx
	ax = Mem0[ss:bp - 0x0073:word16]
	Mem0[ds:0x0096:word16] = ax
	ax = Mem0[ss:bp - 0x0071:word16]
	Mem0[ds:0x032C:word16] = ax
	ax = Mem0[ss:bp - 0x006F:word16]
	Mem0[ds:0x032A:word16] = ax
	ax = Mem0[ss:bp - 0x006D:word16]
	Mem0[ds:0x0830:word16] = ax
	ax = Mem0[ss:bp - 0x0065:word16]
	Mem0[ds:0x0480:word16] = ax
	ax = Mem0[ss:bp - 0x0063:word16]
	Mem0[ds:0x0482:word16] = ax
	ax = Mem0[ss:bp - 0x0061:word16]
	Mem0[ds:0x4C60:word16] = ax
	ax = Mem0[ss:bp - 0x006B:word16]
	Mem0[ds:0x00B2:word16] = ax
	ax = Mem0[ss:bp - 0x0069:word16]
	dx = Mem0[ss:bp - 0x0067:word16]
	Mem0[ds:0x4C62:word16] = ax
	Mem0[ds:0x4C64:word16] = dx
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x02D4:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x02D6:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	call fn004F_0522 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_10CB
	// succ:  l01F7_10C8 l01F7_10CB
l01F7_10C8:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_10CB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4E1E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_10E8
	// succ:  l01F7_10E5 l01F7_10E8
l01F7_10E5:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_10E8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4CE6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_1105
	// succ:  l01F7_1102 l01F7_1105
l01F7_1102:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_1105:
	SCZO = cond(Mem0[ds:0x4CE6:word16] - 0x0000)
	branch Test(NE,Z) l01F7_110F
	// succ:  l01F7_110C l01F7_110F
l01F7_110C:
	goto l01F7_1193
	// succ:  l01F7_1193
l01F7_110F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0026
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_112C
	// succ:  l01F7_1129 l01F7_112C
l01F7_1129:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_112C:
	cx = 0x000E
	ax = Mem0[ss:bp - 0x0026:word16]
	Mem0[ss:bp - 0x0024:word16] = ax
	SCZO = cond(ax - 0x0001)
	branch Test(ULE,CZ) l01F7_1147
	// succ:  l01F7_113A l01F7_1147
l01F7_113A:
	cx = ax
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + 0x0004
	SCZO = cond(cx)
	// succ:  l01F7_1147
l01F7_1147:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x4CE6:word16] = ax
	bx = ax
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	di = ax
	si = bp - 0x0026
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0x0007
	// succ:  l01F7_1165
l01F7_1165:
	branch cx == 0x0000 l01F7_1167
	// succ:  l01F7_1165_1 l01F7_1167
l01F7_1165_1:
	v34 = Mem0[si:word16]
	Mem0[di:word16] = v34
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l01F7_1165
	// succ:  l01F7_1165
l01F7_1167:
	SCZO = cond(Mem0[ss:bp - 0x0026:word16] - 0x0001)
	branch Test(ULE,CZ) l01F7_1193
	// succ:  l01F7_116D l01F7_1193
l01F7_116D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = Mem0[ss:bp - 0x0026:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x000E
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - Mem0[ss:bp - 0x0026:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - 0xFFFF)
	branch Test(EQ,Z) l01F7_1193
	// succ:  l01F7_1190 l01F7_1193
l01F7_1190:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_1193:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x02D0:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x02D2:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	call fn004F_0522 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_11B0
	// succ:  l01F7_11AD l01F7_11B0
l01F7_11AD:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_11B0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0522
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x000A)
	branch Test(EQ,Z) l01F7_11CF
	// succ:  l01F7_11CC l01F7_11CF
l01F7_11CC:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_11CF:
	Mem0[ss:bp - 0x000A:word16] = 0x0000
	si = 0x0522
	di = Mem0[ss:bp - 0x000E:word16]
	// succ:  l01F7_11DA
l01F7_11DA:
	SCZO = cond(Mem0[ds:si + 0x000A:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_11EF
	// succ:  l01F7_11E0 l01F7_11EF
l01F7_11E0:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn01F7_1BA0 (retsize: 2;)
	sp = sp + 0x0002
	Mem0[ds:si + 0x000A:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_11EF
	// succ:  l01F7_11EC l01F7_11EF
l01F7_11EC:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_11EF:
	SCZO = cond(Mem0[ds:si + 0x000C:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_1207
	// succ:  l01F7_11F5 l01F7_1207
l01F7_11F5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01F7_191C (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ds:si + 0x000C:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_1207
	// succ:  l01F7_1204 l01F7_1207
l01F7_1204:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_1207:
	si = si + 0x000E
	SCZO = cond(si)
	v35 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v35
	SZO = cond(v35)
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x000A)
	branch Test(LT,SO) l01F7_11DA
	// succ:  l01F7_1213 l01F7_11DA
l01F7_1213:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x02CC:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x02CE:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_0522 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_122E
	// succ:  l01F7_122B l01F7_122E
l01F7_122B:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_122E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x00C6
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x03AC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_124A
	// succ:  l01F7_1247 l01F7_124A
l01F7_1247:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_124A:
	ax = bp - 0x03AC
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn002F_0D4C (retsize: 4;)
	sp = sp + 0x0002
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_125B
	// succ:  l01F7_1258 l01F7_125B
l01F7_1258:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_125B:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x02C8:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x02CA:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_0522 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_1276
	// succ:  l01F7_1273 l01F7_1276
l01F7_1273:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_1276:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0017
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0266
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0017)
	branch Test(EQ,Z) l01F7_1294
	// succ:  l01F7_1291 l01F7_1294
l01F7_1291:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_1294:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0016
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0024
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x3D86
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0016)
	branch Test(EQ,Z) l01F7_12B1
	// succ:  l01F7_12AE l01F7_12B1
l01F7_12AE:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_12B1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4E48
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0016)
	branch Test(EQ,Z) l01F7_12CB
	// succ:  l01F7_12C8 l01F7_12CB
l01F7_12C8:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_12CB:
	Mem0[ss:bp - 0x000A:word16] = 0x0000
	si = 0x3D8C
	dx = bp - 0x0266
	Mem0[ss:bp - 0x000C:word16] = dx
	// succ:  l01F7_12DA
l01F7_12DA:
	di = Mem0[ss:bp - 0x000C:word16]
	ax = Mem0[ds:di:word16]
	dx = Mem0[ds:di + 0x0002:word16]
	Mem0[ss:bp - 0x03B0:word16] = ax
	Mem0[ss:bp - 0x03AE:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l01F7_12FA
	// succ:  l01F7_12EE l01F7_12FA
l01F7_12EE:
	Mem0[ds:si:word16] = 0x0000
	Mem0[ds:si + 0x0002:word16] = 0x0000
	goto l01F7_139E
	// succ:  l01F7_139E
l01F7_12FA:
	Mem0[ss:bp - 0x0010:word16] = si
	dx = Mem0[ss:bp - 0x000A:word16]
	Mem0[ss:bp - 0x0004:word16] = di
	bx = di
	Mem0[ss:bp - 0x0006:word16] = dx
	di = dx
	// succ:  l01F7_130A
l01F7_130A:
	di = di + 0x0001
	SZO = cond(di)
	bx = bx + 0x0004
	SCZO = cond(bx)
	ax = Mem0[ds:bx + 0x0002:word16]
	ax = ax | Mem0[ds:bx:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_130A
	// succ:  l01F7_1315 l01F7_130A
l01F7_1315:
	Mem0[ss:bp - 0x0006:word16] = di
	si = di
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	ax = Mem0[ss:bp - 0x0266 + si:word16]
	ax = ax - Mem0[ss:bp - 0x03B0:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	SCZO = cond(Mem0[ds:0x4C6E:word16] - 0x0000)
	branch Test(NE,Z) l01F7_138A
	// succ:  l01F7_1330 l01F7_138A
l01F7_1330:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0008:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GlobalAlloc(Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0006
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01F7_138A
	// succ:  l01F7_1346 l01F7_138A
l01F7_1346:
	si = Mem0[ss:bp - 0x0010:word16]
	Mem0[ds:si:word16] = di
	Mem0[ds:si + 0x0002:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	GlobalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0014:word16] = ax
	Mem0[ss:bp - 0x0012:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l01F7_136C
	// succ:  l01F7_1360 l01F7_136C
l01F7_1360:
	Mem0[ds:si:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	GlobalFree(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l01F7_139E
	// succ:  l01F7_139E
l01F7_136C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	call fn01F7_1C1E (retsize: 2;)
	sp = sp + 0x0008
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_1381
	// succ:  l01F7_137E l01F7_1381
l01F7_137E:
	goto l01F7_16BA
	// succ:  l01F7_16BA
l01F7_1381:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	GlobalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l01F7_139E
	// succ:  l01F7_139E
l01F7_138A:
	si = Mem0[ss:bp - 0x0010:word16]
	Mem0[ds:si:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	call fn01F7_2C26 (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ds:si + 0x0002:word16] = ax
	// succ:  l01F7_139E
l01F7_139E:
	si = si + 0x0024
	SCZO = cond(si)
	v37 = Mem0[ss:bp - 0x000A:word16] + 0x0001
	Mem0[ss:bp - 0x000A:word16] = v37
	SZO = cond(v37)
	ax = bp - 0x020E
	v38 = Mem0[ss:bp - 0x000C:word16] + 0x0004
	Mem0[ss:bp - 0x000C:word16] = v38
	SCZO = cond(v38)
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - ax)
	branch Test(UGE,C) l01F7_13B4
	// succ:  l01F7_13B1 l01F7_13B4
l01F7_13B1:
	goto l01F7_12DA
	// succ:  l01F7_12DA
l01F7_13B4:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x02C4:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x02C6:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	call fn004F_0522 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_13D1
	// succ:  l01F7_13CE l01F7_13D1
l01F7_13CE:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_13D1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0504
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_13EE
	// succ:  l01F7_13EB l01F7_13EE
l01F7_13EB:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_13EE:
	SCZO = cond(Mem0[ds:0x0504:word16] - 0x0000)
	branch Test(NE,Z) l01F7_13F8
	// succ:  l01F7_13F5 l01F7_13F8
l01F7_13F5:
	goto l01F7_147C
	// succ:  l01F7_147C
l01F7_13F8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0034
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_1415
	// succ:  l01F7_1412 l01F7_1415
l01F7_1412:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_1415:
	cx = 0x000E
	ax = Mem0[ss:bp - 0x0034:word16]
	Mem0[ss:bp - 0x0032:word16] = ax
	SCZO = cond(ax - 0x0001)
	branch Test(ULE,CZ) l01F7_1430
	// succ:  l01F7_1423 l01F7_1430
l01F7_1423:
	cx = ax
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + 0x0004
	SCZO = cond(cx)
	// succ:  l01F7_1430
l01F7_1430:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x0504:word16] = ax
	bx = ax
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	di = ax
	si = bp - 0x0034
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0x0007
	// succ:  l01F7_144E
l01F7_144E:
	branch cx == 0x0000 l01F7_1450
	// succ:  l01F7_144E_1 l01F7_1450
l01F7_144E_1:
	v44 = Mem0[si:word16]
	Mem0[di:word16] = v44
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l01F7_144E
	// succ:  l01F7_144E
l01F7_1450:
	SCZO = cond(Mem0[ss:bp - 0x0034:word16] - 0x0001)
	branch Test(ULE,CZ) l01F7_147C
	// succ:  l01F7_1456 l01F7_147C
l01F7_1456:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = Mem0[ss:bp - 0x0034:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x000E
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - Mem0[ss:bp - 0x0034:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - 0xFFFF)
	branch Test(EQ,Z) l01F7_147C
	// succ:  l01F7_1479 l01F7_147C
l01F7_1479:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_147C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0506
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_1499
	// succ:  l01F7_1496 l01F7_1499
l01F7_1496:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_1499:
	SCZO = cond(Mem0[ds:0x0506:word16] - 0x0000)
	branch Test(NE,Z) l01F7_14A3
	// succ:  l01F7_14A0 l01F7_14A3
l01F7_14A0:
	goto l01F7_1527
	// succ:  l01F7_1527
l01F7_14A3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_14C0
	// succ:  l01F7_14BD l01F7_14C0
l01F7_14BD:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_14C0:
	cx = 0x000E
	ax = Mem0[ss:bp - 0x0042:word16]
	Mem0[ss:bp - 0x0040:word16] = ax
	SCZO = cond(ax - 0x0001)
	branch Test(ULE,CZ) l01F7_14DB
	// succ:  l01F7_14CE l01F7_14DB
l01F7_14CE:
	cx = ax
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + 0x0004
	SCZO = cond(cx)
	// succ:  l01F7_14DB
l01F7_14DB:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x0506:word16] = ax
	bx = ax
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	di = ax
	si = bp - 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0x0007
	// succ:  l01F7_14F9
l01F7_14F9:
	branch cx == 0x0000 l01F7_14FB
	// succ:  l01F7_14F9_1 l01F7_14FB
l01F7_14F9_1:
	v39 = Mem0[si:word16]
	Mem0[di:word16] = v39
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l01F7_14F9
	// succ:  l01F7_14F9
l01F7_14FB:
	SCZO = cond(Mem0[ss:bp - 0x0042:word16] - 0x0001)
	branch Test(ULE,CZ) l01F7_1527
	// succ:  l01F7_1501 l01F7_1527
l01F7_1501:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	ax = Mem0[ss:bp - 0x0042:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x000E
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - Mem0[ss:bp - 0x0042:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - 0xFFFF)
	branch Test(EQ,Z) l01F7_1527
	// succ:  l01F7_1524 l01F7_1527
l01F7_1524:
	goto l01F7_16C8
	// succ:  l01F7_16C8
l01F7_1527:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	call fn004F_00BC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 0x02E3:byte] - 0x00)
	branch Test(NE,Z) l01F7_15B6
	// succ:  l01F7_1539 l01F7_15B6
l01F7_1539:
	Mem0[ss:bp - 0x0004:word16] = 0x4D2E
	ax = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x4D33
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x4D3A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn004F_0932 (retsize: 4;)
	sp = sp + 0x0006
	SCZO = cond(sp)
	ax = ax - ax
	SCZO = cond(ax)
	dx = 0x4D33
	cx = 0x0004
	di = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	// succ:  l01F7_155E
l01F7_155E:
	branch cx == 0x0000 l01F7_1560
	// succ:  l01F7_155E_1 l01F7_1560
l01F7_155E_1:
	Mem0[di:byte] = al
	di = di + 0x0001
	cx = cx - 0x0001
	goto l01F7_155E
	// succ:  l01F7_155E
l01F7_1560:
	ax = Mem0[ds:0x4E82:word16]
	ax = ax | Mem0[ds:0x4E80:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_156E
	// succ:  l01F7_1569 l01F7_156E
l01F7_1569:
	Mem0[ds:0x4D33:byte] = 0x01
	// succ:  l01F7_156E
l01F7_156E:
	ax = Mem0[ds:0x4E92:word16]
	ax = ax | Mem0[ds:0x4E90:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_157C
	// succ:  l01F7_1577 l01F7_157C
l01F7_1577:
	Mem0[ds:0x4D34:byte] = 0x01
	// succ:  l01F7_157C
l01F7_157C:
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1B00 (retsize: 4;)
	sp = sp + 0x0006
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_159B
	// succ:  l01F7_1590 l01F7_159B
l01F7_1590:
	al = 0x01
	Mem0[ds:0x4D35:byte] = al
	Mem0[ds:0x4D37:byte] = al
	Mem0[ds:0x4D38:byte] = al
	// succ:  l01F7_159B
l01F7_159B:
	SCZO = cond(Mem0[ds:0x4D30:byte] - 0x00)
	branch Test(EQ,Z) l01F7_15B0
	// succ:  l01F7_15A2 l01F7_15B0
l01F7_15A2:
	ax = 0x0014
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1B00 (retsize: 4;)
	sp = sp + 0x0006
	// succ:  l01F7_15B0
l01F7_15B0:
	Mem0[ds:0x4C60:word16] = 0x0001
	// succ:  l01F7_15B6
l01F7_15B6:
	call fn01BF_212A (retsize: 4;)
	sp = sp - 0x0002
	call fn01F7_1EFC (retsize: 2;)
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l01F7_15F9
	// succ:  l01F7_15C3 l01F7_15F9
l01F7_15C3:
	sp = sp - 0x0002
	call fn01F7_2776 (retsize: 2;)
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l01F7_15F9
	// succ:  l01F7_15CB l01F7_15F9
l01F7_15CB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0096:word16]
	call fn00DF_0694 (retsize: 4;)
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0018:word16] = ax
	Mem0[ss:bp - 0x0016:word16] = ax
	ax = bp - 0x0016
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	call fn00F7_0724 (retsize: 4;)
	sp = sp + 0x0006
	al = Mem0[ss:bp - 0x0016:byte]
	Mem0[ds:0x4D1C:byte] = al
	al = Mem0[ss:bp - 0x0018:byte]
	Mem0[ds:0x4D1D:byte] = al
	// succ:  l01F7_15F9
l01F7_15F9:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = cx - cx
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = Mem0[ds:0x0480:word16]
	dx = dx - Mem0[ds:0x4D68:word16]
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SetScrollRange(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = Mem0[ds:0x0482:word16]
	cx = cx - Mem0[ds:0x495E:word16]
	SCZO = cond(cx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollRange(Mem0[ss:sp + 8:word16], Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4BE8:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D84:word16]
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	SetScrollPos(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	al = Mem0[ds:0x4D1C:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ds:0x4D1D:byte]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00BF_0444 (retsize: 4;)
	sp = sp + 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4EAE:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	InvalidateRect(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0017_1B7C (retsize: 4;)
	sp = sp + 0x0002
	call fn0087_04C4 (retsize: 4;)
	call fn01D7_1E5C (retsize: 4;)
	di = bp - 0x011A
	si = 0x48C2
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_1695
l01F7_1695:
	branch cx == 0x0000 l01F7_1697
	// succ:  l01F7_1695_1 l01F7_1697
l01F7_1695_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_1695
	// succ:  l01F7_1697 l01F7_1695
l01F7_1697:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	v41 = si
	si = di
	di = v41
	cx = cx >>u 0x0001
	SCZO = cond(cx)
	// succ:  l01F7_169F
l01F7_169F:
	branch cx == 0x0000 l01F7_16A1
	// succ:  l01F7_169F_2 l01F7_16A1
l01F7_169F_2:
	v42 = Mem0[si:word16]
	Mem0[di:word16] = v42
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l01F7_169F
	// succ:  l01F7_169F
l01F7_16A1:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l01F7_16A3
l01F7_16A3:
	branch cx == 0x0000 l01F7_16A5
	// succ:  l01F7_16A3_1 l01F7_16A5
l01F7_16A3_1:
	v43 = Mem0[si:byte]
	Mem0[di:byte] = v43
	si = si + 0x0001
	di = di + 0x0001
	cx = cx - 0x0001
	goto l01F7_16A3
	// succ:  l01F7_16A3
l01F7_16A5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D72:word16]
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l01F7_1719
	// succ:  l01F7_1719
l01F7_16BA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	GlobalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	call fn01F7_215A (retsize: 2;)
	sp = sp - 0x0002
	call fn01F7_2CF2 (retsize: 2;)
l01F7_16C8:
	ax = 0x01DE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x011A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000E:word16]
	call fn004F_00BC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x3D72:word16]
	SetCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ShowCursor(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	goto l01F7_1702
	// succ:  l01F7_1702
l01F7_16F4:
	ax = 0x0213
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x011A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn0107_0000 (retsize: 4;)
	sp = sp + 0x0004
	// succ:  l01F7_1702
l01F7_1702:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4CC0:word16]
	ax = bp - 0x011A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x00B8
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	MessageBox(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000C
	// succ:  l01F7_1719
l01F7_1719:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_0BA6_exit
fn01F7_0BA6_exit:


// fn01F7_1724
// Return size: 4
void fn01F7_1724()
fn01F7_1724_entry:
	// succ:  l01F7_1724
l01F7_1724:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = 0x002D
	bx = Mem0[ss:bp + 0x0008:word16]
	si = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:si + 0x0024:word16] - 0x0001)
	branch Test(ULE,CZ) l01F7_174F
	// succ:  l01F7_1741 l01F7_174F
l01F7_1741:
	cx = Mem0[ds:si + 0x0024:word16]
	cx = cx + 0x0008
	SCZO = cond(cx)
	ax = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	// succ:  l01F7_174F
l01F7_174F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_1768
	// succ:  l01F7_1763 l01F7_1768
l01F7_1763:
	ax = ax - ax
	SCZO = cond(ax)
	goto l01F7_17CD
	// succ:  l01F7_17CD
l01F7_1768:
	SCZO = cond(Mem0[ds:si + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_177C
	// succ:  l01F7_176E l01F7_177C
l01F7_176E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn01F7_184A (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_1763
	// succ:  l01F7_177C l01F7_1763
l01F7_177C:
	cx = Mem0[ds:si + 0x0024:word16]
	ax = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx + si
	SCZO = cond(cx)
	cx = cx + 0x0028
	SCZO = cond(cx)
	di = si + 0x0028
	SCZO = cond(cx - di)
	branch Test(ULE,CZ) l01F7_17CA
	// succ:  l01F7_1793 l01F7_17CA
l01F7_1793:
	Mem0[ss:bp - 0x0006:word16] = cx
	si = di
	di = Mem0[ss:bp + 0x0006:word16]
	// succ:  l01F7_179B
l01F7_179B:
	cx = Mem0[ds:si + 0x0003:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(EQ,Z) l01F7_17C2
	// succ:  l01F7_17A2 l01F7_17C2
l01F7_17A2:
	bx = cx
	bx = Mem0[ds:bx:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l01F7_17B8
	// succ:  l01F7_17AC l01F7_17B8
l01F7_17AC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn01F7_1724 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_17C2
	// succ:  l01F7_17B6 l01F7_17C2
l01F7_17B6:
	goto l01F7_1763
	// succ:  l01F7_1763
l01F7_17B8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn01F7_17DA (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_1763
	// succ:  l01F7_17C2 l01F7_1763
l01F7_17C2:
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x0006:word16])
	branch Test(ULT,C) l01F7_179B
	// succ:  l01F7_17CA l01F7_179B
l01F7_17CA:
	ax = 0x0001
	// succ:  l01F7_17CD
l01F7_17CD:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_1724_exit
fn01F7_1724_exit:


// fn01F7_17DA
// Return size: 4
void fn01F7_17DA()
fn01F7_17DA_entry:
	// succ:  l01F7_17DA
l01F7_17DA:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0002
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = 0x0016
	bx = Mem0[ss:bp + 0x0008:word16]
	si = Mem0[ds:bx:word16]
	al = Mem0[ds:si + 0x000A:byte]
	al = al & 0x0F
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x01)
	branch Test(ULE,CZ) l01F7_180D
	// succ:  l01F7_17FA l01F7_180D
l01F7_17FA:
	di = Mem0[ds:si + 0x000A:word16]
	di = di & 0x000F
	SZO = cond(di)
	C = false
	ax = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + 0x000C
	SCZO = cond(di)
	// succ:  l01F7_180D
l01F7_180D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - di)
	branch Test(EQ,Z) l01F7_1826
	// succ:  l01F7_1822 l01F7_1826
l01F7_1822:
	ax = ax - ax
	SCZO = cond(ax)
	goto l01F7_183D
	// succ:  l01F7_183D
l01F7_1826:
	SCZO = cond(Mem0[ds:si + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_183A
	// succ:  l01F7_182C l01F7_183A
l01F7_182C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn01F7_184A (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_1822
	// succ:  l01F7_183A l01F7_1822
l01F7_183A:
	ax = 0x0001
	// succ:  l01F7_183D
l01F7_183D:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_17DA_exit
fn01F7_17DA_exit:


// fn01F7_184A
// Return size: 4
void fn01F7_184A()
fn01F7_184A_entry:
	// succ:  l01F7_184A
l01F7_184A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = Mem0[ss:bp + 0x0008:word16]
	bx = cx
	si = Mem0[ds:bx:word16]
	di = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_1869
l01F7_1869:
	branch cx == 0x0000 l01F7_186B
	// succ:  l01F7_1869_1 l01F7_186B
l01F7_1869_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_1869
	// succ:  l01F7_186B l01F7_1869
l01F7_186B:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	Mem0[ss:bp - 0x0003:byte] = cl
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l01F7_18A4
	// succ:  l01F7_1888 l01F7_18A4
l01F7_1888:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	al = Mem0[ss:bp - 0x0003:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = ax
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l01F7_18A6
	// succ:  l01F7_18A4 l01F7_18A6
l01F7_18A4:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01F7_18A6
l01F7_18A6:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_184A_exit
fn01F7_184A_exit:


// fn01F7_18B2
// Return size: 4
void fn01F7_18B2()
fn01F7_18B2_entry:
	// succ:  l01F7_18B2
l01F7_18B2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0102
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01F7_1910
	// succ:  l01F7_18C9 l01F7_1910
l01F7_18C9:
	si = di
	si = si - 0x0100
	SCZO = cond(si)
	ax = ax - ax - C
	SCZO = cond(ax)
	si = si & ax
	SZO = cond(si)
	C = false
	si = si + 0x0100
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0C82 (retsize: 4;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - si)
	branch Test(NE,Z) l01F7_190E
	// succ:  l01F7_1905 l01F7_190E
l01F7_1905:
	v13 = Mem0[ss:bp + 0x000A:word16] + si
	Mem0[ss:bp + 0x000A:word16] = v13
	SCZO = cond(v13)
	di = di - si
	SCZO = cond(di)
	branch Test(NE,Z) l01F7_18C9
	// succ:  l01F7_190C l01F7_18C9
l01F7_190C:
	goto l01F7_1910
	// succ:  l01F7_1910
l01F7_190E:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l01F7_1910
l01F7_1910:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_18B2_exit
fn01F7_18B2_exit:


// fn01F7_191C
// Return size: 4
void fn01F7_191C()
fn01F7_191C_entry:
	// succ:  l01F7_191C
l01F7_191C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0038
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x002D
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0038
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_194A
	// succ:  l01F7_1945 l01F7_194A
l01F7_1945:
	ax = ax - ax
	SCZO = cond(ax)
	goto l01F7_1A76
	// succ:  l01F7_1A76
l01F7_194A:
	cx = 0x002D
	ax = Mem0[ss:bp - 0x0014:word16]
	Mem0[ss:bp - 0x0012:word16] = ax
	SCZO = cond(ax - 0x0001)
	branch Test(ULE,CZ) l01F7_1965
	// succ:  l01F7_1958 l01F7_1965
l01F7_1958:
	cx = ax
	cx = cx + 0x0008
	SCZO = cond(cx)
	ax = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	// succ:  l01F7_1965
l01F7_1965:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0008:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x000A:word16] = ax
	si = bp - 0x0038
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp - 0x000A:word16]
	cx = 0x0016
	// succ:  l01F7_1986
l01F7_1986:
	branch cx == 0x0000 l01F7_1988
	// succ:  l01F7_1986_1 l01F7_1988
l01F7_1986_1:
	v15 = Mem0[si:word16]
	Mem0[di:word16] = v15
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l01F7_1986
	// succ:  l01F7_1986
l01F7_1988:
	v16 = Mem0[si:byte]
	Mem0[di:byte] = v16
	si = si + 0x0001
	di = di + 0x0001
	SCZO = cond(Mem0[ss:bp - 0x0014:word16] - 0x0001)
	branch Test(ULE,CZ) l01F7_19B5
	// succ:  l01F7_198F l01F7_19B5
l01F7_198F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = Mem0[ss:bp - 0x0014:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0005
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x000A:word16]
	ax = ax + 0x002D
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - Mem0[ss:bp - 0x0014:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - 0xFFFF)
	branch Test(EQ,Z) l01F7_19B5
	// succ:  l01F7_19B2 l01F7_19B5
l01F7_19B2:
	goto l01F7_1A5B
	// succ:  l01F7_1A5B
l01F7_19B5:
	ax = Mem0[ss:bp + 0x0006:word16]
	bx = Mem0[ss:bp - 0x000A:word16]
	Mem0[ds:bx + 0x000A:word16] = ax
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_19D8
	// succ:  l01F7_19C4 l01F7_19D8
l01F7_19C4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	call fn01F7_1BA0 (retsize: 2;)
	sp = sp + 0x0002
	bx = Mem0[ss:bp - 0x000A:word16]
	Mem0[ds:bx + 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_19D8
	// succ:  l01F7_19D5 l01F7_19D8
l01F7_19D5:
	goto l01F7_1A5B
	// succ:  l01F7_1A5B
l01F7_19D8:
	bx = Mem0[ss:bp - 0x000A:word16]
	ax = Mem0[ds:bx + 0x0024:word16]
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	bx = bx + ax
	SCZO = cond(bx)
	bx = bx + 0x0028
	SCZO = cond(bx)
	si = Mem0[ss:bp - 0x000A:word16]
	si = si + 0x0028
	SCZO = cond(si)
	SCZO = cond(bx - si)
	branch Test(ULE,CZ) l01F7_1A1A
	// succ:  l01F7_19F5 l01F7_1A1A
l01F7_19F5:
	Mem0[ss:bp - 0x0006:word16] = bx
	di = Mem0[ss:bp - 0x0008:word16]
	// succ:  l01F7_19FB
l01F7_19FB:
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_1A10
	// succ:  l01F7_1A01 l01F7_1A10
l01F7_1A01:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn01F7_1A82 (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ds:si + 0x0003:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_1A20
	// succ:  l01F7_1A10 l01F7_1A20
l01F7_1A10:
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x0006:word16])
	branch Test(ULT,C) l01F7_19FB
	// succ:  l01F7_1A18 l01F7_19FB
l01F7_1A18:
	goto l01F7_1A6E
	// succ:  l01F7_1A6E
l01F7_1A1A:
	di = Mem0[ss:bp - 0x0008:word16]
	goto l01F7_1A6E
	// succ:  l01F7_1A6E
l01F7_1A20:
	di = si
	cx = Mem0[ss:bp - 0x000A:word16]
	ax = cx
	ax = ax + 0x0028
	SCZO = cond(ax)
	si = ax
	SCZO = cond(ax - di)
	branch Test(UGE,C) l01F7_1A4B
	// succ:  l01F7_1A30 l01F7_1A4B
l01F7_1A30:
	Mem0[ss:bp - 0x0006:word16] = di
	Mem0[ss:bp - 0x0004:word16] = si
	// succ:  l01F7_1A36
l01F7_1A36:
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_1A44
	// succ:  l01F7_1A3C l01F7_1A44
l01F7_1A3C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0003:word16]
	call fn0137_0066 (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l01F7_1A44
l01F7_1A44:
	SCZO = cond(di - si)
	branch Test(UGT,CZ) l01F7_1A36
	// succ:  l01F7_1A48 l01F7_1A36
l01F7_1A48:
	cx = Mem0[ss:bp - 0x000A:word16]
	// succ:  l01F7_1A4B
l01F7_1A4B:
	bx = cx
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_1A5B
	// succ:  l01F7_1A53 l01F7_1A5B
l01F7_1A53:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx + 0x0006:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l01F7_1A5B
l01F7_1A5B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	goto l01F7_1945
	// succ:  l01F7_1945
l01F7_1A6E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = di
	// succ:  l01F7_1A76
l01F7_1A76:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_191C_exit
fn01F7_191C_exit:


// fn01F7_1A82
// Return size: 4
void fn01F7_1A82()
fn01F7_1A82_entry:
	// succ:  l01F7_1A82
l01F7_1A82:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x001E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0016
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_1AB0
	// succ:  l01F7_1AAB l01F7_1AB0
l01F7_1AAB:
	ax = ax - ax
	SCZO = cond(ax)
	goto l01F7_1B93
	// succ:  l01F7_1B93
l01F7_1AB0:
	SZO = cond(Mem0[ss:bp - 0x0013:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l01F7_1AD8
	// succ:  l01F7_1AB6 l01F7_1AD8
l01F7_1AB6:
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0xFFEA
	dx_ax = (int32) ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	call fn004F_0522 (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	call fn01F7_191C (retsize: 2;)
	sp = sp + 0x0004
	goto l01F7_1B93
	// succ:  l01F7_1B93
l01F7_1AD8:
	di = 0x0016
	cl = 0x04
	ax = Mem0[ss:bp - 0x0012:word16]
	ax = ax << cl
	SCZO = cond(ax)
	al = al ^ Mem0[ss:bp - 0x0012:byte]
	SZO = cond(al)
	C = false
	ax = ax & 0x00F0
	SZO = cond(ax)
	C = false
	v18 = Mem0[ss:bp - 0x0012:word16] ^ ax
	Mem0[ss:bp - 0x0012:word16] = v18
	SZO = cond(Mem0[ss:bp - 0x0012:word16])
	C = false
	al = Mem0[ss:bp - 0x0012:byte]
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x001E:word16] = ax
	SCZO = cond(ax - 0x0001)
	branch Test(ULE,CZ) l01F7_1B06
	// succ:  l01F7_1AF9 l01F7_1B06
l01F7_1AF9:
	di = ax
	di = di << 0x0001
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + ax
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + 0x000C
	SCZO = cond(di)
	// succ:  l01F7_1B06
l01F7_1B06:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_1AAB
	// succ:  l01F7_1B17 l01F7_1AAB
l01F7_1B17:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	si = bp - 0x001C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	di = Mem0[ss:bp - 0x0004:word16]
	cx = 0x000B
	// succ:  l01F7_1B2B
l01F7_1B2B:
	branch cx == 0x0000 l01F7_1B2D
	// succ:  l01F7_1B2B_1 l01F7_1B2D
l01F7_1B2B_1:
	v21 = Mem0[si:word16]
	Mem0[di:word16] = v21
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l01F7_1B2B
	// succ:  l01F7_1B2B
l01F7_1B2D:
	al = Mem0[ss:bp - 0x0012:byte]
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	Mem0[ss:bp - 0x001E:word16] = ax
	SCZO = cond(ax - 0x0001)
	branch Test(ULE,CZ) l01F7_1B5B
	// succ:  l01F7_1B3B l01F7_1B5B
l01F7_1B3B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x0016
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - Mem0[ss:bp - 0x001E:word16]
	SCZO = cond(ax)
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0x0000
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(NE,Z) l01F7_1B75
	// succ:  l01F7_1B5B l01F7_1B75
l01F7_1B5B:
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:bx + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_1B88
	// succ:  l01F7_1B64 l01F7_1B88
l01F7_1B64:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	call fn01F7_1BA0 (retsize: 2;)
	sp = sp + 0x0002
	bx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:bx + 0x0006:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_1B88
	// succ:  l01F7_1B75 l01F7_1B88
l01F7_1B75:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	goto l01F7_1AAB
	// succ:  l01F7_1AAB
l01F7_1B88:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x0006:word16]
	// succ:  l01F7_1B93
l01F7_1B93:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_1A82_exit
fn01F7_1A82_exit:


// fn01F7_1BA0
// Return size: 4
void fn01F7_1BA0()
fn01F7_1BA0_entry:
	// succ:  l01F7_1BA0
l01F7_1BA0:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x0003
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_1BCC
	// succ:  l01F7_1BC7 l01F7_1BCC
l01F7_1BC7:
	ax = ax - ax
	SCZO = cond(ax)
	goto l01F7_1C12
	// succ:  l01F7_1C12
l01F7_1BCC:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	al = Mem0[ss:bp - 0x0003:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	si = ax
	ax = Mem0[ds:si:word16]
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	cl = Mem0[ss:bp - 0x0003:byte]
	ch = ch - ch
	SCZO = cond(ch)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	dx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - di)
	branch Test(EQ,Z) l01F7_1C06
	// succ:  l01F7_1BFD l01F7_1C06
l01F7_1BFD:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	goto l01F7_1BC7
	// succ:  l01F7_1BC7
l01F7_1C06:
	bl = Mem0[ss:bp - 0x0003:byte]
	bh = bh - bh
	SCZO = cond(bh)
	di = Mem0[ss:bp - 0x0006:word16]
	Mem0[ds:bx + di:byte] = bh
	ax = si
	// succ:  l01F7_1C12
l01F7_1C12:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_1BA0_exit
fn01F7_1BA0_exit:


// fn01F7_1C1E
// Return size: 4
void fn01F7_1C1E()
fn01F7_1C1E_entry:
	// succ:  l01F7_1C1E
l01F7_1C1E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0102
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = Mem0[ss:bp + 0x0008:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01F7_1C7E
	// succ:  l01F7_1C35 l01F7_1C7E
l01F7_1C35:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	si = di
	si = si - 0x0100
	SCZO = cond(si)
	ax = ax - ax - C
	SCZO = cond(ax)
	si = si & ax
	SZO = cond(si)
	C = false
	si = si + 0x0100
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - si)
	branch Test(NE,Z) l01F7_1C7A
	// succ:  l01F7_1C5C l01F7_1C7A
l01F7_1C5C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	call fn004F_0C82 (retsize: 4;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v13 = Mem0[ss:bp + 0x000A:word16] + si
	Mem0[ss:bp + 0x000A:word16] = v13
	SCZO = cond(v13)
	di = di - si
	SCZO = cond(di)
	branch Test(NE,Z) l01F7_1C35
	// succ:  l01F7_1C78 l01F7_1C35
l01F7_1C78:
	goto l01F7_1C7E
	// succ:  l01F7_1C7E
l01F7_1C7A:
	ax = ax - ax
	SCZO = cond(ax)
	goto l01F7_1C81
	// succ:  l01F7_1C81
l01F7_1C7E:
	ax = 0x0001
	// succ:  l01F7_1C81
l01F7_1C81:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_1C1E_exit
fn01F7_1C1E_exit:


// fn01F7_1C8E
// Return size: 4
void fn01F7_1C8E()
fn01F7_1C8E_entry:
	// succ:  l01F7_1C8E
l01F7_1C8E:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0016
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	di = di - di
	SCZO = cond(di)
	bx = 0x4962
	dx = Mem0[ss:bp - 0x0006:word16]
	// succ:  l01F7_1CA5
l01F7_1CA5:
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_1CAB
	// succ:  l01F7_1CAA l01F7_1CAB
l01F7_1CAA:
	di = di + 0x0001
	SZO = cond(di)
	// succ:  l01F7_1CAB
l01F7_1CAB:
	bx = bx + 0x0001
	SZO = cond(bx)
	bx = bx + 0x0001
	SZO = cond(bx)
	SCZO = cond(bx - 0x4B60)
	branch Test(ULT,C) l01F7_1CA5
	// succ:  l01F7_1CB3 l01F7_1CA5
l01F7_1CB3:
	SCZO = cond(Mem0[ds:0x4EBA:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_1CC6
	// succ:  l01F7_1CBA l01F7_1CC6
l01F7_1CBA:
	bx = Mem0[ds:0x4EBA:word16]
	bx = Mem0[ds:bx:word16]
	si = Mem0[ds:bx + 0x0002:word16]
	goto l01F7_1CC8
	// succ:  l01F7_1CC8
l01F7_1CC6:
	si = si - si
	SCZO = cond(si)
	// succ:  l01F7_1CC8
l01F7_1CC8:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = di
	cx = 0x004B
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	cx = ax
	ax = si
	bx = 0xFFE3
	dx_ax = bx *u ax
	SCZO = cond(dx_ax)
	ax = ax + cx
	SCZO = cond(ax)
	ah = ah + 0x36
	SCZO = cond(ah)
	Mem0[ds:0x0CC8:word16] = ax
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GlobalAlloc(Mem0[ss:sp + 4:word16], Mem0[ss:sp:word32])
	sp = sp + 0x0006
	Mem0[ds:0x0CCA:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_1CF7
	// succ:  l01F7_1CF4 l01F7_1CF7
l01F7_1CF4:
	goto l01F7_1EF0
	// succ:  l01F7_1EF0
l01F7_1CF7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GlobalSize(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:0x0CC8:word16] = ax
	Mem0[ds:0x0CC6:word16] = 0x0000
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0CCA:word16]
	GlobalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	Mem0[ss:bp - 0x0012:word16] = dx
	ax = Mem0[ds:0x3CFA:word16]
	dx = Mem0[ds:0x3CFC:word16]
	es = Mem0[ss:bp - 0x0012:selector]
	bx = si
	si = si + 0x0004
	SCZO = cond(si)
	Mem0[es:bx:word16] = ax
	Mem0[es:bx + 0x0002:word16] = dx
	v19 = Mem0[ds:0x0CC6:word16] + 0x0004
	Mem0[ds:0x0CC6:word16] = v19
	SCZO = cond(v19)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x4DE0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01F7_2D60 (retsize: 2;)
	sp = sp + 0x000A
	si = ax
	Mem0[ss:bp - 0x0012:word16] = dx
	ax = Mem0[ds:0x4154:word16]
	es = dx
	bx = si
	si = si + 0x0001
	SZO = cond(si)
	si = si + 0x0001
	SZO = cond(si)
	Mem0[es:bx:word16] = ax
	v20 = Mem0[ds:0x0CC6:word16] + 0x0002
	Mem0[ds:0x0CC6:word16] = v20
	SCZO = cond(v20)
	SCZO = cond(Mem0[ds:0x4154:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_1D8C
	// succ:  l01F7_1D5D l01F7_1D8C
l01F7_1D5D:
	bx = Mem0[ds:0x4154:word16]
	di = Mem0[ds:bx:word16]
	cx = 0x000E
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0001)
	branch Test(ULE,CZ) l01F7_1D7C
	// succ:  l01F7_1D6D l01F7_1D7C
l01F7_1D6D:
	cx = Mem0[ds:di:word16]
	ax = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + 0x0004
	SCZO = cond(cx)
	// succ:  l01F7_1D7C
l01F7_1D7C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn01F7_2D60 (retsize: 2;)
	sp = sp + 0x000A
	si = ax
	Mem0[ss:bp - 0x0012:word16] = dx
	// succ:  l01F7_1D8C
l01F7_1D8C:
	di = di - di
	SCZO = cond(di)
	// succ:  l01F7_1D8E
l01F7_1D8E:
	al = Mem0[ds:di + 0x0CE2:byte]
	Mem0[ss:bp - 0x0007:byte] = al
	dx = di
	dx = dx + 0x0CE2
	SCZO = cond(dx)
	ax = dx
	dx = dx + 0x0003
	SCZO = cond(dx)
	cx = 0x0001
	ah = ah + 0x30
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0006:word16] = ax
	SCZO = cond(ax - dx)
	branch Test(ULE,CZ) l01F7_1DF3
	// succ:  l01F7_1DAD l01F7_1DF3
l01F7_1DAD:
	Mem0[ss:bp - 0x0010:word16] = di
	Mem0[ss:bp - 0x0004:word16] = dx
	di = dx
	// succ:  l01F7_1DB5
l01F7_1DB5:
	al = Mem0[ds:di:byte]
	SCZO = cond(Mem0[ss:bp - 0x0007:byte] - al)
	branch Test(NE,Z) l01F7_1DC6
	// succ:  l01F7_1DBC l01F7_1DC6
l01F7_1DBC:
	SCZO = cond(cx - 0x00FF)
	branch Test(EQ,Z) l01F7_1DC6
	// succ:  l01F7_1DC2 l01F7_1DC6
l01F7_1DC2:
	cx = cx + 0x0001
	SZO = cond(cx)
	goto l01F7_1DE8
	// succ:  l01F7_1DE8
l01F7_1DC6:
	es = Mem0[ss:bp - 0x0012:selector]
	bx = si
	si = si + 0x0001
	SZO = cond(si)
	Mem0[es:bx:byte] = cl
	al = Mem0[ss:bp - 0x0007:byte]
	es = Mem0[ss:bp - 0x0012:selector]
	bx = si
	si = si + 0x0001
	SZO = cond(si)
	Mem0[es:bx:byte] = al
	v26 = Mem0[ds:0x0CC6:word16] + 0x0002
	Mem0[ds:0x0CC6:word16] = v26
	SCZO = cond(v26)
	al = Mem0[ds:di:byte]
	Mem0[ss:bp - 0x0007:byte] = al
	cx = 0x0001
	// succ:  l01F7_1DE8
l01F7_1DE8:
	di = di + 0x0003
	SCZO = cond(di)
	SCZO = cond(di - Mem0[ss:bp - 0x0006:word16])
	branch Test(ULT,C) l01F7_1DB5
	// succ:  l01F7_1DF0 l01F7_1DB5
l01F7_1DF0:
	di = Mem0[ss:bp - 0x0010:word16]
	// succ:  l01F7_1DF3
l01F7_1DF3:
	es = Mem0[ss:bp - 0x0012:selector]
	bx = si
	si = si + 0x0001
	SZO = cond(si)
	Mem0[es:bx:byte] = cl
	al = Mem0[ss:bp - 0x0007:byte]
	es = Mem0[ss:bp - 0x0012:selector]
	bx = si
	si = si + 0x0001
	SZO = cond(si)
	Mem0[es:bx:byte] = al
	v24 = Mem0[ds:0x0CC6:word16] + 0x0002
	Mem0[ds:0x0CC6:word16] = v24
	SCZO = cond(v24)
	di = di + 0x0001
	SZO = cond(di)
	SCZO = cond(di - 0x0003)
	branch Test(GE,SO) l01F7_1E16
	// succ:  l01F7_1E13 l01F7_1E16
l01F7_1E13:
	goto l01F7_1D8E
	// succ:  l01F7_1D8E
l01F7_1E16:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x4960
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0200
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01F7_2D60 (retsize: 2;)
	sp = sp + 0x000A
	si = ax
	Mem0[ss:bp - 0x0012:word16] = dx
	Mem0[ss:bp - 0x000A:word16] = 0x4962
	// succ:  l01F7_1E31
l01F7_1E31:
	bx = Mem0[ss:bp - 0x000A:word16]
	cx = Mem0[ds:bx:word16]
	cx = cx | cx
	SZO = cond(cx)
	C = false
	branch Test(EQ,Z) l01F7_1EB3
	// succ:  l01F7_1E3A l01F7_1EB3
l01F7_1E3A:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0012:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	bx = cx
	di = Mem0[ds:bx:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01F7_2D60 (retsize: 2;)
	sp = sp + 0x000A
	si = ax
	Mem0[ss:bp - 0x0012:word16] = dx
	SCZO = cond(Mem0[ds:di:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_1E9F
	// succ:  l01F7_1E56 l01F7_1E9F
l01F7_1E56:
	bx = Mem0[ds:di:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = 0x0026
	bx = ax
	SCZO = cond(Mem0[ds:bx + 0x0012:byte] - 0x01)
	branch Test(ULE,CZ) l01F7_1E79
	// succ:  l01F7_1E6A l01F7_1E79
l01F7_1E6A:
	al = Mem0[ds:bx + 0x0012:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + 0x0022
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	// succ:  l01F7_1E79
l01F7_1E79:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	call fn01F7_2D60 (retsize: 2;)
	sp = sp + 0x000A
	si = ax
	Mem0[ss:bp - 0x0012:word16] = dx
	bx = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[ds:bx + 0x0008:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_1E9F
	// succ:  l01F7_1E93 l01F7_1E9F
l01F7_1E93:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn01F7_2190 (retsize: 2;)
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp - 0x0012:word16] = dx
	// succ:  l01F7_1E9F
l01F7_1E9F:
	SCZO = cond(Mem0[ds:di + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_1EB3
	// succ:  l01F7_1EA5 l01F7_1EB3
l01F7_1EA5:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn01F7_2190 (retsize: 2;)
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp - 0x0012:word16] = dx
	// succ:  l01F7_1EB3
l01F7_1EB3:
	v27 = Mem0[ss:bp - 0x000A:word16] + 0x0002
	Mem0[ss:bp - 0x000A:word16] = v27
	SCZO = cond(v27)
	SCZO = cond(Mem0[ss:bp - 0x000A:word16] - 0x4B60)
	branch Test(UGE,C) l01F7_1EC1
	// succ:  l01F7_1EBE l01F7_1EC1
l01F7_1EBE:
	goto l01F7_1E31
	// succ:  l01F7_1E31
l01F7_1EC1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0CCA:word16]
	GlobalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0CCA:word16]
	ax = Mem0[ds:0x0CC6:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GlobalReAlloc(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:word32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	cx = ax
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	Mem0[ds:bx + 0x3D8C:word16] = cx
	ax = 0x0001
	// succ:  l01F7_1EF0
l01F7_1EF0:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_1C8E_exit
fn01F7_1C8E_exit:


// fn01F7_1EFC
// Return size: 4
void fn01F7_1EFC()
fn01F7_1EFC_entry:
	// succ:  l01F7_1EFC
l01F7_1EFC:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x001C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	di = Mem0[ds:bx + 0x3D8C:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l01F7_1F22
	// succ:  l01F7_1F1C l01F7_1F22
l01F7_1F1C:
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (word32) ax
	goto l01F7_2150
	// succ:  l01F7_2150
l01F7_1F22:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	GlobalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0018:word16] = ax
	Mem0[ss:bp - 0x0016:word16] = dx
	es_bx = Mem0[ss:bp - 0x0018:segptr32]
	v18 = Mem0[ss:bp - 0x0018:word16] + 0x0004
	Mem0[ss:bp - 0x0018:word16] = v18
	SCZO = cond(v18)
	ax = Mem0[es:bx:word16]
	dx = Mem0[es:bx + 0x0002:word16]
	Mem0[ss:bp - 0x0012:word16] = ax
	Mem0[ss:bp - 0x0010:word16] = dx
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	cx = 0x4DE0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_0C82 (retsize: 4;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v20 = Mem0[ss:bp - 0x0018:word16] + 0x000A
	Mem0[ss:bp - 0x0018:word16] = v20
	SCZO = cond(v20)
	es_bx = Mem0[ss:bp - 0x0018:segptr32]
	ax = Mem0[es:bx:word16]
	Mem0[ds:0x4154:word16] = ax
	ax = bx + 0x0002
	Mem0[ss:bp - 0x0018:word16] = ax
	Mem0[ss:bp - 0x0014:word16] = di
	SCZO = cond(Mem0[ds:0x4154:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_1FC0
	// succ:  l01F7_1F74 l01F7_1FC0
l01F7_1F74:
	si = 0x000E
	bx = ax
	ax = Mem0[es:bx:word16]
	Mem0[ss:bp - 0x001A:word16] = ax
	SCZO = cond(ax - 0x0001)
	branch Test(ULE,CZ) l01F7_1F91
	// succ:  l01F7_1F84 l01F7_1F91
l01F7_1F84:
	si = ax
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + 0x0004
	SCZO = cond(si)
	// succ:  l01F7_1F91
l01F7_1F91:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x4154:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0016:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	bx = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:bx:word16]
	call fn004F_0C82 (retsize: 4;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	bx = Mem0[ds:0x4154:word16]
	bx = Mem0[ds:bx:word16]
	ax = Mem0[ds:bx:word16]
	Mem0[ds:bx + 0x0002:word16] = ax
	v22 = Mem0[ss:bp - 0x0018:word16] + si
	Mem0[ss:bp - 0x0018:word16] = v22
	SCZO = cond(v22)
	// succ:  l01F7_1FC0
l01F7_1FC0:
	dx = dx - dx
	SCZO = cond(dx)
	// succ:  l01F7_1FC2
l01F7_1FC2:
	si = dx
	si = si + 0x0CE2
	SCZO = cond(si)
	di = si + 0x3000
	Mem0[ss:bp - 0x0008:word16] = dx
	Mem0[ss:bp - 0x0006:word16] = di
	// succ:  l01F7_1FD2
l01F7_1FD2:
	SCZO = cond(di - si)
	branch Test(ULE,CZ) l01F7_2000
	// succ:  l01F7_1FD6 l01F7_2000
l01F7_1FD6:
	es_bx = Mem0[ss:bp - 0x0018:segptr32]
	v23 = Mem0[ss:bp - 0x0018:word16] + 0x0001
	Mem0[ss:bp - 0x0018:word16] = v23
	SZO = cond(v23)
	cl = Mem0[es:bx:byte]
	ch = ch - ch
	SCZO = cond(ch)
	bx = Mem0[ss:bp - 0x0018:word16]
	v26 = Mem0[ss:bp - 0x0018:word16] + 0x0001
	Mem0[ss:bp - 0x0018:word16] = v26
	SZO = cond(v26)
	al = Mem0[es:bx:byte]
	Mem0[ss:bp - 0x0003:byte] = al
	// succ:  l01F7_1FED
l01F7_1FED:
	ax = cx
	cx = cx - 0x0001
	SZO = cond(cx)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_1FD2
	// succ:  l01F7_1FF4 l01F7_1FD2
l01F7_1FF4:
	al = Mem0[ss:bp - 0x0003:byte]
	si = si + 0x0003
	SCZO = cond(si)
	Mem0[ds:si - 0x0003:byte] = al
	goto l01F7_1FED
	// succ:  l01F7_1FED
l01F7_2000:
	dx = Mem0[ss:bp - 0x0008:word16]
	dx = dx + 0x0001
	SZO = cond(dx)
	SCZO = cond(dx - 0x0003)
	branch Test(LT,SO) l01F7_1FC2
	// succ:  l01F7_2009 l01F7_1FC2
l01F7_2009:
	ax = 0x0200
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0016:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	cx = 0x4960
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_0C82 (retsize: 4;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	Mem0[ds:0x4960:word16] = 0x0000
	v29 = Mem0[ss:bp - 0x0017:byte] + 0x02
	Mem0[ss:bp - 0x0017:byte] = v29
	SCZO = cond(v29)
	Mem0[ss:bp - 0x000C:word16] = 0x4962
	// succ:  l01F7_202F
l01F7_202F:
	bx = Mem0[ss:bp - 0x000C:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l01F7_203A
	// succ:  l01F7_2037 l01F7_203A
l01F7_2037:
	goto l01F7_211A
	// succ:  l01F7_211A
l01F7_203A:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	bx = Mem0[ss:bp - 0x000C:word16]
	Mem0[ds:bx:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	si = ax
	ax = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0016:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_0C82 (retsize: 4;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v31 = Mem0[ss:bp - 0x0018:word16] + 0x0008
	Mem0[ss:bp - 0x0018:word16] = v31
	SCZO = cond(v31)
	SCZO = cond(Mem0[ds:si:word16] - 0x0000)
	branch Test(NE,Z) l01F7_2077
	// succ:  l01F7_2074 l01F7_2077
l01F7_2074:
	goto l01F7_20FE
	// succ:  l01F7_20FE
l01F7_2077:
	Mem0[ss:bp - 0x0008:word16] = 0x0026
	es_bx = Mem0[ss:bp - 0x0018:segptr32]
	al = Mem0[es:bx + 0x0012:byte]
	Mem0[ss:bp - 0x001C:byte] = al
	SCZO = cond(al - 0x01)
	branch Test(ULE,CZ) l01F7_2096
	// succ:  l01F7_208A l01F7_2096
l01F7_208A:
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + 0x0022
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0008:word16] = ax
	// succ:  l01F7_2096
l01F7_2096:
	ax = Mem0[ds:si:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	di = ax
	Mem0[ds:si:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0016:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0018:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_0C82 (retsize: 4;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0008:word16]
	v33 = Mem0[ss:bp - 0x0018:word16] + ax
	Mem0[ss:bp - 0x0018:word16] = v33
	SCZO = cond(v33)
	bx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:bx + 0x001C:word16] = di
	SCZO = cond(Mem0[ds:bx + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_20EA
	// succ:  l01F7_20D9 l01F7_20EA
l01F7_20D9:
	ax = bp - 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01F7_22E6 (retsize: 2;)
	sp = sp + 0x0004
	bx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:bx + 0x0008:word16] = ax
	// succ:  l01F7_20EA
l01F7_20EA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn01AF_1228 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	call fn01F7_2E04 (retsize: 2;)
	sp = sp + 0x0004
l01F7_20FE:
	SCZO = cond(Mem0[ds:si + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_2112
	// succ:  l01F7_2104 l01F7_2112
l01F7_2104:
	ax = bp - 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01F7_22E6 (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ds:si + 0x0002:word16] = ax
	// succ:  l01F7_2112
l01F7_2112:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01F7_211A
l01F7_211A:
	v30 = Mem0[ss:bp - 0x000C:word16] + 0x0002
	Mem0[ss:bp - 0x000C:word16] = v30
	SCZO = cond(v30)
	SCZO = cond(Mem0[ss:bp - 0x000C:word16] - 0x4B60)
	branch Test(UGE,C) l01F7_2128
	// succ:  l01F7_2125 l01F7_2128
l01F7_2125:
	goto l01F7_202F
	// succ:  l01F7_202F
l01F7_2128:
	di = Mem0[ss:bp - 0x0014:word16]
	sp = sp - 0x0002
	call fn01F7_2E8C (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	GlobalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	GlobalFree(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	Mem0[ds:bx + 0x3D8C:word16] = 0x0000
	ax = Mem0[ss:bp - 0x0012:word16]
	dx = Mem0[ss:bp - 0x0010:word16]
	// succ:  l01F7_2150
l01F7_2150:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_1EFC_exit
fn01F7_1EFC_exit:


// fn01F7_215A
// Return size: 4
void fn01F7_215A()
fn01F7_215A_entry:
	// succ:  l01F7_215A
l01F7_215A:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = 0x3D86
	// succ:  l01F7_216B
l01F7_216B:
	SCZO = cond(Mem0[ds:si + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_217E
	// succ:  l01F7_2171 l01F7_217E
l01F7_2171:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0006:word16]
	GlobalFree(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ds:si + 0x0006:word16] = 0x0000
	// succ:  l01F7_217E
l01F7_217E:
	si = si + 0x0024
	SCZO = cond(si)
	SCZO = cond(si - 0x409E)
	branch Test(ULT,C) l01F7_216B
	// succ:  l01F7_2187 l01F7_216B
l01F7_2187:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_215A_exit
fn01F7_215A_exit:


// fn01F7_2190
// Return size: 4
void fn01F7_2190()
fn01F7_2190_entry:
	// succ:  l01F7_2190
l01F7_2190:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000A
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = 0x002D
	bx = Mem0[ss:bp + 0x000A:word16]
	di = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:di + 0x0024:word16] - 0x0001)
	branch Test(ULE,CZ) l01F7_21BB
	// succ:  l01F7_21AD l01F7_21BB
l01F7_21AD:
	cx = Mem0[ds:di + 0x0024:word16]
	cx = cx + 0x0008
	SCZO = cond(cx)
	ax = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	// succ:  l01F7_21BB
l01F7_21BB:
	si = Mem0[ss:bp + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn01F7_2D60 (retsize: 2;)
	sp = sp + 0x000A
	si = ax
	Mem0[ss:bp + 0x0008:word16] = dx
	SCZO = cond(Mem0[ds:di + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_21E2
	// succ:  l01F7_21D4 l01F7_21E2
l01F7_21D4:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0006:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn01F7_2286 (retsize: 2;)
	sp = sp + 0x0006
	si = ax
	Mem0[ss:bp + 0x0008:word16] = dx
	// succ:  l01F7_21E2
l01F7_21E2:
	cx = Mem0[ds:di + 0x0024:word16]
	ax = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx + di
	SCZO = cond(cx)
	cx = cx + 0x0028
	SCZO = cond(cx)
	ax = di + 0x0028
	Mem0[ss:bp - 0x0006:word16] = ax
	SCZO = cond(cx - ax)
	branch Test(ULE,CZ) l01F7_2274
	// succ:  l01F7_21FC l01F7_2274
l01F7_21FC:
	Mem0[ss:bp - 0x0008:word16] = cx
	// succ:  l01F7_21FF
l01F7_21FF:
	bx = Mem0[ss:bp - 0x0006:word16]
	di = Mem0[ds:bx + 0x0003:word16]
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01F7_2268
	// succ:  l01F7_2209 l01F7_2268
l01F7_2209:
	bx = Mem0[ds:di:word16]
	SZO = cond(Mem0[ds:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l01F7_221E
	// succ:  l01F7_2211 l01F7_221E
l01F7_2211:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn01F7_2190 (retsize: 2;)
	goto l01F7_2263
	// succ:  l01F7_2263
l01F7_221E:
	ax = bx
	Mem0[ss:bp - 0x0004:word16] = ax
	cx = 0x0016
	al = Mem0[ds:bx + 0x000A:byte]
	al = al & 0x0F
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x01)
	branch Test(ULE,CZ) l01F7_2242
	// succ:  l01F7_222F l01F7_2242
l01F7_222F:
	cl = Mem0[ds:bx + 0x000A:byte]
	cx = cx & 0x000F
	SZO = cond(cx)
	C = false
	ax = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + 0x000C
	SCZO = cond(cx)
	// succ:  l01F7_2242
l01F7_2242:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn01F7_2D60 (retsize: 2;)
	sp = sp + 0x000A
	si = ax
	Mem0[ss:bp + 0x0008:word16] = dx
	bx = Mem0[ss:bp - 0x0004:word16]
	ax = Mem0[ds:bx + 0x0006:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_2268
	// succ:  l01F7_225C l01F7_2268
l01F7_225C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn01F7_2286 (retsize: 2;)
	sp = sp + 0x0006
l01F7_2263:
	si = ax
	Mem0[ss:bp + 0x0008:word16] = dx
	// succ:  l01F7_2268
l01F7_2268:
	ax = Mem0[ss:bp - 0x0008:word16]
	v17 = Mem0[ss:bp - 0x0006:word16] + 0x0005
	Mem0[ss:bp - 0x0006:word16] = v17
	SCZO = cond(v17)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - ax)
	branch Test(ULT,C) l01F7_21FF
	// succ:  l01F7_2274 l01F7_21FF
l01F7_2274:
	ax = si
	dx = Mem0[ss:bp + 0x0008:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	ax = si
	dx = Mem0[ss:bp + 0x0008:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_2190_exit fn01F7_2190_exit
fn01F7_2190_exit:


// fn01F7_2286
// Return size: 4
void fn01F7_2286()
fn01F7_2286_entry:
	// succ:  l01F7_2286
l01F7_2286:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0006
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = Mem0[ss:bp + 0x000A:word16]
	si = Mem0[ss:bp + 0x0006:word16]
	bx = cx
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0xFFFF
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l01F7_22AB
l01F7_22AB:
	branch cx == 0x0000 l01F7_22AD
	// succ:  l01F7_22AB_1 l01F7_22AD
l01F7_22AB_1:
	SCZO = cond(al - Mem0[di:byte])
	di = di + 0x0001
	cx = cx - 0x0001
	branch Test(NE,Z) l01F7_22AB
	// succ:  l01F7_22AD l01F7_22AB
l01F7_22AD:
	cx = ~cx
	cx = cx - 0x0001
	SZO = cond(cx)
	Mem0[ss:bp - 0x0006:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x0006
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	call fn01F7_2D60 (retsize: 2;)
	sp = sp + 0x000A
	si = ax
	Mem0[ss:bp + 0x0008:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	call fn01F7_2D60 (retsize: 2;)
	sp = sp + 0x000A
	Mem0[ss:bp + 0x0008:word16] = dx
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_2286_exit
fn01F7_2286_exit:


// fn01F7_22E6
// Return size: 4
void fn01F7_22E6()
fn01F7_22E6_entry:
	// succ:  l01F7_22E6
l01F7_22E6:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000C
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = 0x002D
	bx = Mem0[ss:bp + 0x0008:word16]
	es_bx = Mem0[ds:bx + 0x0000:segptr32]
	Mem0[ss:bp - 0x000C:word16] = bx
	Mem0[ss:bp - 0x000A:word16] = es
	SCZO = cond(Mem0[es:bx + 0x0024:word16] - 0x0001)
	branch Test(ULE,CZ) l01F7_2319
	// succ:  l01F7_230A l01F7_2319
l01F7_230A:
	si = Mem0[es:bx + 0x0024:word16]
	si = si + 0x0008
	SCZO = cond(si)
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	// succ:  l01F7_2319
l01F7_2319:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_0C82 (retsize: 4;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v15 = Mem0[ss:bp - 0x000C:word16] + si
	Mem0[ss:bp - 0x000C:word16] = v15
	SCZO = cond(v15)
	ax = Mem0[ss:bp + 0x0006:word16]
	Mem0[ds:di + 0x000A:word16] = ax
	SCZO = cond(Mem0[ds:di + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_2359
	// succ:  l01F7_234E l01F7_2359
l01F7_234E:
	ax = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01F7_2452 (retsize: 2;)
	sp = sp + 0x0002
	Mem0[ds:di + 0x0006:word16] = ax
	// succ:  l01F7_2359
l01F7_2359:
	ax = Mem0[ds:di + 0x0024:word16]
	Mem0[ds:di + 0x0026:word16] = ax
	si = di + 0x0028
	cx = Mem0[ds:di + 0x0024:word16]
	ax = cx
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx << 0x0001
	SCZO = cond(cx)
	cx = cx + ax
	SCZO = cond(cx)
	cx = cx + di
	SCZO = cond(cx)
	cx = cx + 0x0028
	SCZO = cond(cx)
	SCZO = cond(cx - si)
	branch Test(UGT,CZ) l01F7_2379
	// succ:  l01F7_2376 l01F7_2379
l01F7_2376:
	goto l01F7_242C
	// succ:  l01F7_242C
l01F7_2379:
	Mem0[ss:bp - 0x0008:word16] = cx
	// succ:  l01F7_237C
l01F7_237C:
	SCZO = cond(Mem0[ds:si + 0x0003:word16] - 0x0000)
	branch Test(NE,Z) l01F7_2385
	// succ:  l01F7_2382 l01F7_2385
l01F7_2382:
	goto l01F7_2421
	// succ:  l01F7_2421
l01F7_2385:
	es_bx = Mem0[ss:bp - 0x000C:segptr32]
	SZO = cond(Mem0[es:bx + 0x0009:byte] & 0x80)
	C = false
	branch Test(EQ,Z) l01F7_23A2
	// succ:  l01F7_238F l01F7_23A2
l01F7_238F:
	ax = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	sp = sp - 0x0002
	call fn01F7_22E6 (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ds:si + 0x0003:word16] = ax
	goto l01F7_2421
	// succ:  l01F7_2421
l01F7_23A2:
	Mem0[ss:bp - 0x0004:word16] = 0x0016
	al = Mem0[es:bx + 0x000A:byte]
	al = al & 0x0F
	SZO = cond(al)
	C = false
	SCZO = cond(al - 0x01)
	branch Test(ULE,CZ) l01F7_23C8
	// succ:  l01F7_23B1 l01F7_23C8
l01F7_23B1:
	al = Mem0[es:bx + 0x000A:byte]
	ax = ax & 0x000F
	SZO = cond(ax)
	C = false
	cx = ax
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + 0x000C
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	// succ:  l01F7_23C8
l01F7_23C8:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:si + 0x0003:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_0C82 (retsize: 4;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	cl = 0x04
	ax = Mem0[ds:di + 0x000A:word16]
	ax = ax << cl
	SCZO = cond(ax)
	al = al ^ Mem0[ds:di + 0x000A:byte]
	SZO = cond(al)
	C = false
	ax = ax & 0x00F0
	SZO = cond(ax)
	C = false
	v22 = Mem0[ds:di + 0x000A:word16] ^ ax
	Mem0[ds:di + 0x000A:word16] = v22
	SZO = cond(Mem0[ds:di + 0x000A:word16])
	C = false
	ax = Mem0[ss:bp - 0x0004:word16]
	v23 = Mem0[ss:bp - 0x000C:word16] + ax
	Mem0[ss:bp - 0x000C:word16] = v23
	SCZO = cond(v23)
	SCZO = cond(Mem0[ds:di + 0x0006:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_2419
	// succ:  l01F7_240E l01F7_2419
l01F7_240E:
	ax = bp - 0x000C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01F7_2452 (retsize: 2;)
	sp = sp + 0x0002
	Mem0[ds:di + 0x0006:word16] = ax
	// succ:  l01F7_2419
l01F7_2419:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0003:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01F7_2421
l01F7_2421:
	si = si + 0x0005
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x0008:word16])
	branch Test(UGE,C) l01F7_242C
	// succ:  l01F7_2429 l01F7_242C
l01F7_2429:
	goto l01F7_237C
	// succ:  l01F7_237C
l01F7_242C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x000C:word16]
	dx = Mem0[ss:bp - 0x000A:word16]
	bx = Mem0[ss:bp + 0x0008:word16]
	Mem0[ds:bx:word16] = ax
	Mem0[ds:bx + 0x0002:word16] = dx
	ax = Mem0[ss:bp - 0x0006:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_22E6_exit
fn01F7_22E6_exit:


// fn01F7_2452
// Return size: 4
void fn01F7_2452()
fn01F7_2452_entry:
	// succ:  l01F7_2452
l01F7_2452:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x000E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	es_bx = Mem0[ds:si + 0x0000:segptr32]
	al = Mem0[es:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	di = ax
	cx = bx + 0x0001
	Mem0[ss:bp - 0x000A:word16] = cx
	Mem0[ss:bp - 0x0008:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = es
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	ax = ax + 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	Mem0[ss:bp - 0x000C:word16] = ax
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	Mem0[ss:bp - 0x000E:word16] = ax
	call fn004F_0C82 (retsize: 4;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	bx = Mem0[ss:bp - 0x000E:word16]
	Mem0[ds:bx + di:byte] = 0x00
	di = di + Mem0[ss:bp - 0x000A:word16]
	SCZO = cond(di)
	cx = Mem0[ss:bp - 0x0008:word16]
	Mem0[ds:si:word16] = di
	Mem0[ds:si + 0x0002:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000C:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	ax = Mem0[ss:bp - 0x000C:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_2452_exit
fn01F7_2452_exit:


// fn01F7_24C2
// Return size: 4
void fn01F7_24C2()
fn01F7_24C2_entry:
	// succ:  l01F7_24C2
l01F7_24C2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0196
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	al = al - al
	SCZO = cond(al)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0845
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0196
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetTempFileName(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = bp - 0x0196
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x0096
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x1002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	OpenFile(Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	si = ax
	SCZO = cond(si - 0xFFFF)
	branch Test(NE,Z) l01F7_250C
	// succ:  l01F7_2507 l01F7_250C
l01F7_2507:
	ax = ax - ax
	SCZO = cond(ax)
	goto l01F7_276C
	// succ:  l01F7_276C
l01F7_250C:
	ax = 0x0848
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_042E (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l01F7_2522
	// succ:  l01F7_251F l01F7_2522
l01F7_251F:
	goto l01F7_2750
	// succ:  l01F7_2750
l01F7_2522:
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:bx + 0x3D8E:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x3CFA
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_254D
	// succ:  l01F7_254A l01F7_254D
l01F7_254A:
	goto l01F7_2747
	// succ:  l01F7_2747
l01F7_254D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4DE0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_2568
	// succ:  l01F7_2565 l01F7_2568
l01F7_2565:
	goto l01F7_2747
	// succ:  l01F7_2747
l01F7_2568:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4154
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_2583
	// succ:  l01F7_2580 l01F7_2583
l01F7_2580:
	goto l01F7_2747
	// succ:  l01F7_2747
l01F7_2583:
	SCZO = cond(Mem0[ds:0x4154:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_25C1
	// succ:  l01F7_258A l01F7_25C1
l01F7_258A:
	bx = Mem0[ds:0x4154:word16]
	cx = Mem0[ds:bx:word16]
	si = 0x000E
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0001)
	branch Test(ULE,CZ) l01F7_25AB
	// succ:  l01F7_259A l01F7_25AB
l01F7_259A:
	bx = cx
	si = Mem0[ds:bx:word16]
	ax = si
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + 0x0004
	SCZO = cond(si)
	// succ:  l01F7_25AB
l01F7_25AB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - si)
	branch Test(EQ,Z) l01F7_25C1
	// succ:  l01F7_25BE l01F7_25C1
l01F7_25BE:
	goto l01F7_2747
	// succ:  l01F7_2747
l01F7_25C1:
	Mem0[ss:bp - 0x000A:word16] = di
	si = si - si
	SCZO = cond(si)
	// succ:  l01F7_25C6
l01F7_25C6:
	al = Mem0[ds:si + 0x0CE2:byte]
	Mem0[ss:bp - 0x0005:byte] = al
	dx = si
	dx = dx + 0x0CE2
	SCZO = cond(dx)
	ax = dx
	dx = dx + 0x0003
	SCZO = cond(dx)
	cx = 0x0001
	ah = ah + 0x30
	SCZO = cond(ah)
	Mem0[ss:bp - 0x0008:word16] = ax
	SCZO = cond(ax - dx)
	branch Test(ULE,CZ) l01F7_2608
	// succ:  l01F7_25E5 l01F7_2608
l01F7_25E5:
	Mem0[ss:bp - 0x000C:word16] = si
	Mem0[ss:bp - 0x0004:word16] = dx
	si = dx
	di = Mem0[ss:bp - 0x000A:word16]
	// succ:  l01F7_25F0
l01F7_25F0:
	al = Mem0[ss:bp - 0x0005:byte]
	SCZO = cond(Mem0[ds:si:byte] - al)
	branch Test(EQ,Z) l01F7_25FA
	// succ:  l01F7_25F7 l01F7_25FA
l01F7_25F7:
	goto l01F7_2708
	// succ:  l01F7_2708
l01F7_25FA:
	SCZO = cond(cx - 0x00FF)
	branch Test(NE,Z) l01F7_2603
	// succ:  l01F7_2600 l01F7_2603
l01F7_2600:
	goto l01F7_2708
	// succ:  l01F7_2708
l01F7_2603:
	cx = cx + 0x0001
	SZO = cond(cx)
	goto l01F7_2733
	// succ:  l01F7_2733
l01F7_2608:
	di = Mem0[ss:bp - 0x000A:word16]
	// succ:  l01F7_260B
l01F7_260B:
	Mem0[ss:bp - 0x000E:byte] = cl
	al = Mem0[ss:bp - 0x0005:byte]
	Mem0[ss:bp - 0x000D:byte] = al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0002)
	branch Test(EQ,Z) l01F7_2631
	// succ:  l01F7_262E l01F7_2631
l01F7_262E:
	goto l01F7_2747
	// succ:  l01F7_2747
l01F7_2631:
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - 0x0003)
	branch Test(LT,SO) l01F7_25C6
	// succ:  l01F7_2637 l01F7_25C6
l01F7_2637:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4960
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0100)
	branch Test(EQ,Z) l01F7_2654
	// succ:  l01F7_2651 l01F7_2654
l01F7_2651:
	goto l01F7_2747
	// succ:  l01F7_2747
l01F7_2654:
	Mem0[ss:bp - 0x0006:word16] = 0x4962
	// succ:  l01F7_2659
l01F7_2659:
	bx = Mem0[ss:bp - 0x0006:word16]
	si = Mem0[ds:bx:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l01F7_2665
	// succ:  l01F7_2662 l01F7_2665
l01F7_2662:
	goto l01F7_26E9
	// succ:  l01F7_26E9
l01F7_2665:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	di = Mem0[ds:si:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_2681
	// succ:  l01F7_267E l01F7_2681
l01F7_267E:
	goto l01F7_2744
	// succ:  l01F7_2744
l01F7_2681:
	SCZO = cond(Mem0[ds:di:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_26D5
	// succ:  l01F7_2686 l01F7_26D5
l01F7_2686:
	bx = Mem0[ds:di:word16]
	si = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0004:word16] = 0x0026
	bx = Mem0[ds:bx:word16]
	SCZO = cond(Mem0[ds:bx + 0x0012:byte] - 0x01)
	branch Test(ULE,CZ) l01F7_26A6
	// succ:  l01F7_2697 l01F7_26A6
l01F7_2697:
	al = Mem0[ds:si + 0x0012:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax + 0x0022
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0004:word16] = ax
	// succ:  l01F7_26A6
l01F7_26A6:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - Mem0[ss:bp - 0x0004:word16])
	branch Test(EQ,Z) l01F7_26C1
	// succ:  l01F7_26BE l01F7_26C1
l01F7_26BE:
	goto l01F7_2744
	// succ:  l01F7_2744
l01F7_26C1:
	SCZO = cond(Mem0[ds:si + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_26D5
	// succ:  l01F7_26C7 l01F7_26D5
l01F7_26C7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	call fn01F7_1724 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_2744
	// succ:  l01F7_26D5 l01F7_2744
l01F7_26D5:
	SCZO = cond(Mem0[ds:di + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_26E9
	SCZO = cond(Mem0[ds:di + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_26E9
	// succ:  l01F7_26DB l01F7_26E9
l01F7_26DB:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	call fn01F7_1724 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_2744
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:di + 0x0002:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	call fn01F7_1724 (retsize: 2;)
	sp = sp + 0x0004
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_2744
	// succ:  l01F7_26E9 l01F7_2744
l01F7_26E9:
	v22 = Mem0[ss:bp - 0x0006:word16] + 0x0002
	Mem0[ss:bp - 0x0006:word16] = v22
	SCZO = cond(v22)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x4B60)
	branch Test(UGE,C) l01F7_26F7
	v23 = Mem0[ss:bp - 0x0006:word16] + 0x0002
	Mem0[ss:bp - 0x0006:word16] = v23
	SCZO = cond(v23)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x4B60)
	branch Test(UGE,C) l01F7_26F7
	v24 = Mem0[ss:bp - 0x0006:word16] + 0x0002
	Mem0[ss:bp - 0x0006:word16] = v24
	SCZO = cond(v24)
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - 0x4B60)
	branch Test(UGE,C) l01F7_26F7
	// succ:  l01F7_26F4 l01F7_26F7
l01F7_26F4:
	goto l01F7_2659
	// succ:  l01F7_2659
l01F7_26F7:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	call fn004F_00BC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0001
	goto l01F7_276C
	// succ:  l01F7_276C
l01F7_2708:
	Mem0[ss:bp - 0x000E:byte] = cl
	al = Mem0[ss:bp - 0x0005:byte]
	Mem0[ss:bp - 0x000D:byte] = al
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0002)
	branch Test(NE,Z) l01F7_2747
	// succ:  l01F7_272B l01F7_2747
l01F7_272B:
	al = Mem0[ds:si:byte]
	Mem0[ss:bp - 0x0005:byte] = al
	cx = 0x0001
	// succ:  l01F7_2733
l01F7_2733:
	si = si + 0x0003
	SCZO = cond(si)
	SCZO = cond(si - Mem0[ss:bp - 0x0008:word16])
	branch Test(UGE,C) l01F7_273E
	// succ:  l01F7_273B l01F7_273E
l01F7_273B:
	goto l01F7_25F0
	// succ:  l01F7_25F0
l01F7_273E:
	si = Mem0[ss:bp - 0x000C:word16]
	goto l01F7_260B
	// succ:  l01F7_260B
l01F7_2744:
	di = Mem0[ss:bp - 0x000A:word16]
	// succ:  l01F7_2747
l01F7_2747:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_00BC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l01F7_2750
l01F7_2750:
	ax = bp - 0x0196
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_09DC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:bx + 0x3D8E:word16] = ax
	// succ:  l01F7_276C
l01F7_276C:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_24C2_exit
fn01F7_24C2_exit:


// fn01F7_2776
// Return size: 4
void fn01F7_2776()
fn01F7_2776_entry:
	// succ:  l01F7_2776
l01F7_2776:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x01AE
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	si = Mem0[ds:bx + 0x3D8E:word16]
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l01F7_279A
	// succ:  l01F7_2797 l01F7_279A
l01F7_2797:
	goto l01F7_2B5B
	// succ:  l01F7_2B5B
l01F7_279A:
	al = al - al
	SCZO = cond(al)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x084C
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = bp - 0x01AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetTempFileName(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	ax = bp - 0x01AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x00AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	OpenFile(Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	di = ax
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l01F7_27CC
	// succ:  l01F7_27C9 l01F7_27CC
l01F7_27C9:
	goto l01F7_2B5B
	// succ:  l01F7_2B5B
l01F7_27CC:
	ax = 0x084F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_042E (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0014:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_27E3
	// succ:  l01F7_27E0 l01F7_27E3
l01F7_27E0:
	goto l01F7_2B3F
	// succ:  l01F7_2B3F
l01F7_27E3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0004
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0018
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_27FE
	// succ:  l01F7_27FB l01F7_27FE
l01F7_27FB:
	goto l01F7_2B34
	// succ:  l01F7_2B34
l01F7_27FE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4DE0
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_281B
	// succ:  l01F7_2818 l01F7_281B
l01F7_2818:
	goto l01F7_2B34
	// succ:  l01F7_2B34
l01F7_281B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4154
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_2838
	// succ:  l01F7_2835 l01F7_2838
l01F7_2835:
	goto l01F7_2B34
	// succ:  l01F7_2B34
l01F7_2838:
	SCZO = cond(Mem0[ds:0x4154:word16] - 0x0000)
	branch Test(NE,Z) l01F7_2842
	// succ:  l01F7_283F l01F7_2842
l01F7_283F:
	goto l01F7_28C3
	// succ:  l01F7_28C3
l01F7_2842:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	si = 0x000E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	cx = bp - 0x0026
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_285F
	// succ:  l01F7_285C l01F7_285F
l01F7_285C:
	goto l01F7_2B34
	// succ:  l01F7_2B34
l01F7_285F:
	ax = Mem0[ss:bp - 0x0026:word16]
	Mem0[ss:bp - 0x0024:word16] = ax
	SCZO = cond(ax - 0x0001)
	branch Test(ULE,CZ) l01F7_2877
	// succ:  l01F7_286A l01F7_2877
l01F7_286A:
	si = ax
	si = si << 0x0001
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + ax
	SCZO = cond(si)
	si = si << 0x0001
	SCZO = cond(si)
	si = si + 0x0004
	SCZO = cond(si)
	// succ:  l01F7_2877
l01F7_2877:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ds:0x4154:word16] = ax
	bx = ax
	ax = Mem0[ds:bx:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	di = ax
	si = bp - 0x0026
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	cx = 0x0007
	// succ:  l01F7_2895
l01F7_2895:
	branch cx == 0x0000 l01F7_2897
	// succ:  l01F7_2895_1 l01F7_2897
l01F7_2895_1:
	v26 = Mem0[si:word16]
	Mem0[di:word16] = v26
	si = si + 0x0002
	di = di + 0x0002
	cx = cx - 0x0001
	goto l01F7_2895
	// succ:  l01F7_2895
l01F7_2897:
	SCZO = cond(Mem0[ss:bp - 0x0026:word16] - 0x0001)
	branch Test(ULE,CZ) l01F7_28C3
	// succ:  l01F7_289D l01F7_28C3
l01F7_289D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	ax = Mem0[ss:bp - 0x0026:word16]
	ax = ax - 0x0001
	SZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x000A
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x0004:word16]
	ax = ax + 0x000E
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - Mem0[ss:bp - 0x0026:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - 0xFFFF)
	branch Test(EQ,Z) l01F7_28C3
	// succ:  l01F7_28C0 l01F7_28C3
l01F7_28C0:
	goto l01F7_2B25
	// succ:  l01F7_2B25
l01F7_28C3:
	bx = bx - bx
	SCZO = cond(bx)
	// succ:  l01F7_28C5
l01F7_28C5:
	si = bx
	si = si + 0x0CE2
	SCZO = cond(si)
	ax = si + 0x3000
	Mem0[ss:bp - 0x0006:word16] = ax
	Mem0[ss:bp - 0x0008:word16] = bx
	// succ:  l01F7_28D5
l01F7_28D5:
	SCZO = cond(Mem0[ss:bp - 0x0006:word16] - si)
	branch Test(ULE,CZ) l01F7_2916
	// succ:  l01F7_28DA l01F7_2916
l01F7_28DA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	ax = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = bp - 0x0012
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0002)
	branch Test(EQ,Z) l01F7_28F9
	// succ:  l01F7_28F6 l01F7_28F9
l01F7_28F6:
	goto l01F7_2B25
	// succ:  l01F7_2B25
l01F7_28F9:
	dl = Mem0[ss:bp - 0x0012:byte]
	dh = dh - dh
	SCZO = cond(dh)
	al = Mem0[ss:bp - 0x0011:byte]
	Mem0[ss:bp - 0x0003:byte] = al
	// succ:  l01F7_2904
l01F7_2904:
	ax = dx
	dx = dx - 0x0001
	SZO = cond(dx)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_28D5
	// succ:  l01F7_290B l01F7_28D5
l01F7_290B:
	al = Mem0[ss:bp - 0x0003:byte]
	si = si + 0x0003
	SCZO = cond(si)
	Mem0[ds:si - 0x0003:byte] = al
	goto l01F7_2904
	// succ:  l01F7_2904
l01F7_2916:
	bx = Mem0[ss:bp - 0x0008:word16]
	bx = bx + 0x0001
	SZO = cond(bx)
	SCZO = cond(bx - 0x0003)
	branch Test(LT,SO) l01F7_28C5
	// succ:  l01F7_291F l01F7_28C5
l01F7_291F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	ax = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	cx = 0x4960
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0100)
	branch Test(EQ,Z) l01F7_293E
	// succ:  l01F7_293B l01F7_293E
l01F7_293B:
	goto l01F7_2B25
	// succ:  l01F7_2B25
l01F7_293E:
	Mem0[ds:0x4960:word16] = 0x0000
	Mem0[ss:bp - 0x000E:word16] = 0x0001
	Mem0[ss:bp - 0x0008:word16] = 0x4962
	si = Mem0[ss:bp - 0x000C:word16]
	// succ:  l01F7_2951
l01F7_2951:
	bx = Mem0[ss:bp - 0x0008:word16]
	SCZO = cond(Mem0[ds:bx:word16] - 0x0000)
	branch Test(NE,Z) l01F7_295C
	// succ:  l01F7_2959 l01F7_295C
l01F7_2959:
	goto l01F7_2A96
	// succ:  l01F7_2A96
l01F7_295C:
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	Mem0[ss:bp - 0x0010:word16] = ax
	bx = Mem0[ss:bp - 0x0008:word16]
	Mem0[ds:bx:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l01F7_2978
	// succ:  l01F7_2975 l01F7_2978
l01F7_2975:
	goto l01F7_2AF8
	// succ:  l01F7_2AF8
l01F7_2978:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0008
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	ax = ax - 0x0001
	SZO = cond(ax)
	branch Test(EQ,Z) l01F7_299C
	// succ:  l01F7_2999 l01F7_299C
l01F7_2999:
	goto l01F7_2AE8
	// succ:  l01F7_2AE8
l01F7_299C:
	SCZO = cond(Mem0[ds:di:word16] - 0x0000)
	branch Test(NE,Z) l01F7_29A4
	// succ:  l01F7_29A1 l01F7_29A4
l01F7_29A1:
	goto l01F7_2A77
	// succ:  l01F7_2A77
l01F7_29A4:
	ax = Mem0[ds:di:word16]
	Mem0[ss:bp - 0x000A:word16] = ax
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0026
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn00F7_1F58 (retsize: 4;)
	sp = sp + 0x0004
	si = ax
	Mem0[ds:di:word16] = si
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l01F7_29C1
	// succ:  l01F7_29BE l01F7_29C1
l01F7_29BE:
	goto l01F7_2AE8
	// succ:  l01F7_2AE8
l01F7_29C1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	ax = 0x0026
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	cx = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = cx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - 0x0026)
	branch Test(EQ,Z) l01F7_29E6
	// succ:  l01F7_29E3 l01F7_29E6
l01F7_29E3:
	goto l01F7_2ADC
	// succ:  l01F7_2ADC
l01F7_29E6:
	bx = Mem0[ss:bp - 0x0004:word16]
	SCZO = cond(Mem0[ds:bx + 0x0012:byte] - 0x01)
	branch Test(ULE,CZ) l01F7_2A43
	// succ:  l01F7_29EF l01F7_2A43
l01F7_29EF:
	al = Mem0[ds:bx + 0x0012:byte]
	ah = ah - ah
	SCZO = cond(ah)
	ax = ax - 0x0001
	SZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	ax = ax << 0x0001
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = Mem0[ss:bp - 0x0006:word16]
	ax = ax + 0x0026
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	LocalReAlloc(Mem0[ss:sp + 4:word16], Mem0[ss:sp + 2:word16], Mem0[ss:sp:word16])
	sp = sp + 0x0006
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l01F7_2A1C
	// succ:  l01F7_2A19 l01F7_2A1C
l01F7_2A19:
	goto l01F7_2AE2
	// succ:  l01F7_2AE2
l01F7_2A1C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0006:word16]
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LocalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	Mem0[ss:bp - 0x0004:word16] = ax
	ax = ax + 0x0026
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - Mem0[ss:bp - 0x0006:word16])
	branch Test(EQ,Z) l01F7_2A43
	// succ:  l01F7_2A40 l01F7_2A43
l01F7_2A40:
	goto l01F7_2ADC
	// succ:  l01F7_2ADC
l01F7_2A43:
	bx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:bx + 0x001C:word16] = si
	SCZO = cond(Mem0[ds:bx + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_2A63
	// succ:  l01F7_2A4F l01F7_2A63
l01F7_2A4F:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01F7_191C (retsize: 2;)
	sp = sp + 0x0004
	bx = Mem0[ss:bp - 0x0004:word16]
	Mem0[ds:bx + 0x0008:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_2ADC
	// succ:  l01F7_2A63 l01F7_2ADC
l01F7_2A63:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn01AF_1228 (retsize: 4;)
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	call fn01F7_2E04 (retsize: 2;)
	sp = sp + 0x0004
l01F7_2A77:
	SCZO = cond(Mem0[ds:di + 0x0002:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_2A8E
	// succ:  l01F7_2A7D l01F7_2A8E
l01F7_2A7D:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	call fn01F7_191C (retsize: 2;)
	sp = sp + 0x0004
	Mem0[ds:di + 0x0002:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l01F7_2AE2
	// succ:  l01F7_2A8E l01F7_2AE2
l01F7_2A8E:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01F7_2A96
l01F7_2A96:
	v22 = Mem0[ss:bp - 0x000E:word16] + 0x0001
	Mem0[ss:bp - 0x000E:word16] = v22
	SZO = cond(v22)
	v23 = Mem0[ss:bp - 0x0008:word16] + 0x0002
	Mem0[ss:bp - 0x0008:word16] = v23
	SCZO = cond(v23)
	SCZO = cond(Mem0[ss:bp - 0x0008:word16] - 0x4B60)
	branch Test(UGE,C) l01F7_2AA7
	// succ:  l01F7_2AA4 l01F7_2AA7
l01F7_2AA4:
	goto l01F7_2951
	// succ:  l01F7_2951
l01F7_2AA7:
	sp = sp - 0x0002
	call fn01F7_2E8C (retsize: 2;)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	call fn004F_00BC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = bp - 0x01AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_09DC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	Mem0[ds:bx + 0x3D8E:word16] = 0x0000
	ax = Mem0[ss:bp - 0x0018:word16]
	dx = Mem0[ss:bp - 0x0016:word16]
	goto l01F7_2B5E
	// succ:  l01F7_2B5E
l01F7_2ADC:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	// succ:  l01F7_2AE2
l01F7_2AE2:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l01F7_2AE8
l01F7_2AE8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	LocalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0010:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	// succ:  l01F7_2AF8
l01F7_2AF8:
	di = Mem0[ss:bp - 0x000E:word16]
	Mem0[ss:bp - 0x000E:word16] = 0x0001
	SCZO = cond(di - 0x0001)
	branch Test(LE,SZO) l01F7_2B16
	// succ:  l01F7_2B05 l01F7_2B16
l01F7_2B05:
	si = Mem0[ss:bp - 0x000E:word16]
	Mem0[ss:bp - 0x0004:word16] = di
	// succ:  l01F7_2B0B
l01F7_2B0B:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn0177_0196 (retsize: 4;)
	sp = sp + 0x0002
	si = si + 0x0001
	SZO = cond(si)
	SCZO = cond(si - di)
	branch Test(LT,SO) l01F7_2B0B
	// succ:  l01F7_2B16 l01F7_2B0B
l01F7_2B16:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4960:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:0x4960:word16] = 0x0000
	// succ:  l01F7_2B25
l01F7_2B25:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x4154:word16]
	call fn00F7_1FAC (retsize: 4;)
	sp = sp + 0x0002
	Mem0[ds:0x4154:word16] = 0x0000
	// succ:  l01F7_2B34
l01F7_2B34:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0014:word16]
	call fn004F_00BC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	// succ:  l01F7_2B3F
l01F7_2B3F:
	ax = bp - 0x01AE
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_09DC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = 0x0024
	dx_ax = Mem0[ds:0x0096:word16] *s ax
	SCZO = cond(dx_ax)
	bx = ax
	Mem0[ds:bx + 0x3D8E:word16] = 0x0000
	// succ:  l01F7_2B5B
l01F7_2B5B:
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = (word32) ax
	// succ:  l01F7_2B5E
l01F7_2B5E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_2776_exit
fn01F7_2776_exit:


// fn01F7_2B68
// Return size: 4
void fn01F7_2B68()
fn01F7_2B68_entry:
	// succ:  l01F7_2B68
l01F7_2B68:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x028E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	al = al - al
	SCZO = cond(al)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0852
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = bp - 0x018E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetTempFileName(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	ax = bp - 0x018E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x008E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x0006:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	OpenFile(Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	di = ax
	SCZO = cond(di - 0xFFFF)
	branch Test(NE,Z) l01F7_2BB0
	// succ:  l01F7_2BAC l01F7_2BB0
l01F7_2BAC:
	ax = ax - ax
	SCZO = cond(ax)
	goto l01F7_2C19
	// succ:  l01F7_2C19
l01F7_2BB0:
	ax = 0x0855
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	call fn004F_042E (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0004:word16] = ax
	di = Mem0[ss:bp - 0x0006:word16]
	// succ:  l01F7_2BC3
l01F7_2BC3:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	ax = 0x0100
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x028E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	si = ax
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l01F7_2C0C
	// succ:  l01F7_2BE1 l01F7_2C0C
l01F7_2BE1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x028E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - si)
	branch Test(NE,Z) l01F7_2BFE
	// succ:  l01F7_2BFA l01F7_2BFE
l01F7_2BFA:
	di = di + si
	SCZO = cond(di)
	goto l01F7_2BC3
	// succ:  l01F7_2BC3
l01F7_2BFE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn004F_00BC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	goto l01F7_2BAC
	// succ:  l01F7_2BAC
l01F7_2C0C:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn004F_00BC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = di
	// succ:  l01F7_2C19
l01F7_2C19:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_2B68_exit
fn01F7_2B68_exit:


// fn01F7_2C26
// Return size: 4
void fn01F7_2C26()
fn01F7_2C26_entry:
	// succ:  l01F7_2C26
l01F7_2C26:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x028E
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	al = al - al
	SCZO = cond(al)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0858
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x018E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetTempFileName(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	Mem0[ss:bp - 0x0006:word16] = ax
	ax = bp - 0x018E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x008E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x1002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	OpenFile(Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 2:segptr32], Mem0[ss:sp:word16])
	sp = sp + 0x000A
	si = ax
	SCZO = cond(si - 0xFFFF)
	branch Test(NE,Z) l01F7_2C70
	// succ:  l01F7_2C6B l01F7_2C70
l01F7_2C6B:
	ax = ax - ax
	SCZO = cond(ax)
	goto l01F7_2CE6
	// succ:  l01F7_2CE6
l01F7_2C70:
	di = Mem0[ss:bp + 0x0006:word16]
	ax = 0x085B
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	call fn004F_042E (retsize: 4;)
	sp = sp + 0x0004
	SCZO = cond(sp)
	Mem0[ss:bp - 0x0004:word16] = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l01F7_2CD8
	// succ:  l01F7_2C87 l01F7_2CD8
l01F7_2C87:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	si = di
	si = si - 0x0100
	SCZO = cond(si)
	ax = ax - ax - C
	SCZO = cond(ax)
	si = si & ax
	SZO = cond(si)
	C = false
	si = si + 0x0100
	SCZO = cond(si)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x028E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_01FA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	SCZO = cond(ax - si)
	branch Test(NE,Z) l01F7_2CCA
	// succ:  l01F7_2CAE l01F7_2CCA
l01F7_2CAE:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	ax = 0x0001
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x028E
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_02EA (retsize: 4;)
	sp = sp + 0x0008
	SCZO = cond(sp)
	di = di - si
	SCZO = cond(di)
	branch Test(NE,Z) l01F7_2C87
	// succ:  l01F7_2CC7 l01F7_2C87
l01F7_2CC7:
	goto l01F7_2CD8
	// succ:  l01F7_2CD8
l01F7_2CCA:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn004F_00BC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	goto l01F7_2C6B
	// succ:  l01F7_2C6B
l01F7_2CD8:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp - 0x0004:word16]
	call fn004F_00BC (retsize: 4;)
	sp = sp + 0x0002
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x0006:word16]
	// succ:  l01F7_2CE6
l01F7_2CE6:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_2C26_exit
fn01F7_2C26_exit:


// fn01F7_2CF2
// Return size: 4
void fn01F7_2CF2()
fn01F7_2CF2_entry:
	// succ:  l01F7_2CF2
l01F7_2CF2:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = 0x3D86
	// succ:  l01F7_2D03
l01F7_2D03:
	SCZO = cond(Mem0[ds:si + 0x0008:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_2D15
	// succ:  l01F7_2D09 l01F7_2D15
l01F7_2D09:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:si + 0x0008:word16]
	sp = sp - 0x0002
	call fn01F7_2D28 (retsize: 2;)
	sp = sp + 0x0002
	Mem0[ds:si + 0x0008:word16] = 0x0000
	// succ:  l01F7_2D15
l01F7_2D15:
	si = si + 0x0024
	SCZO = cond(si)
	SCZO = cond(si - 0x409E)
	branch Test(ULT,C) l01F7_2D03
	// succ:  l01F7_2D1E l01F7_2D03
l01F7_2D1E:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_2CF2_exit
fn01F7_2CF2_exit:


// fn01F7_2D28
// Return size: 4
void fn01F7_2D28()
fn01F7_2D28_entry:
	// succ:  l01F7_2D28
l01F7_2D28:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0102
	SCZO = cond(sp)
	al = al - al
	SCZO = cond(al)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x085F
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0006:word16]
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ss
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	GetTempFileName(Mem0[ss:sp + 10:word16], Mem0[ss:sp + 6:segptr32], Mem0[ss:sp + 4:word16], Mem0[ss:sp:segptr32])
	sp = sp + 0x000C
	ax = bp - 0x0102
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	call fn004F_09DC (retsize: 4;)
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_2D28_exit
fn01F7_2D28_exit:


// fn01F7_2D60
// Return size: 4
void fn01F7_2D60()
fn01F7_2D60_entry:
	// succ:  l01F7_2D60
l01F7_2D60:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0008
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 0x0006:word16]
	di = Mem0[ss:bp + 0x000C:word16]
	ax = Mem0[ds:0x0CC8:word16]
	ax = ax - Mem0[ds:0x0CC6:word16]
	SCZO = cond(ax)
	SCZO = cond(ax - si)
	branch Test(UGE,C) l01F7_2DD1
	// succ:  l01F7_2D80 l01F7_2DD1
l01F7_2D80:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0CCA:word16]
	GlobalUnlock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0CCA:word16]
	ax = si
	ax = ax - 0x0400
	SCZO = cond(ax)
	cx = cx - cx - C
	SCZO = cond(cx)
	cx = ~cx
	ax = ax & cx
	SZO = cond(ax)
	C = false
	ah = ah + 0x04
	SCZO = cond(ah)
	cx = ax
	ax = ax + Mem0[ds:0x0CC8:word16]
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = dx
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	ax = 0x0042
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	di = cx
	GlobalReAlloc(Mem0[ss:sp + 6:word16], Mem0[ss:sp + 2:word32], Mem0[ss:sp:word16])
	sp = sp + 0x0008
	Mem0[ds:0x0CCA:word16] = ax
	ax = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ds:0x0CCA:word16]
	Mem0[ss:bp - 0x0004:word16] = ax
	GlobalLock(Mem0[ss:sp:word16])
	sp = sp + 0x0002
	di = ax
	Mem0[ss:bp + 0x000E:word16] = dx
	di = di + Mem0[ds:0x0CC6:word16]
	SCZO = cond(di)
	ax = Mem0[ss:bp - 0x0004:word16]
	v15 = Mem0[ds:0x0CC8:word16] + ax
	Mem0[ds:0x0CC8:word16] = v15
	SCZO = cond(v15)
	// succ:  l01F7_2DD1
l01F7_2DD1:
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x000A:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = Mem0[ss:bp + 0x0008:word16]
	ax = Mem0[ss:bp + 0x000E:word16]
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ax
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	Mem0[ss:bp - 0x0008:word16] = di
	Mem0[ss:bp - 0x0006:word16] = ax
	call fn004F_0C82 (retsize: 4;)
	sp = sp + 0x000A
	SCZO = cond(sp)
	v16 = Mem0[ds:0x0CC6:word16] + si
	Mem0[ds:0x0CC6:word16] = v16
	SCZO = cond(v16)
	ax = Mem0[ss:bp - 0x0008:word16]
	dx = Mem0[ss:bp - 0x0006:word16]
	ax = ax + si
	SCZO = cond(ax)
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_2D60_exit
fn01F7_2D60_exit:


// fn01F7_2E04
// Return size: 4
void fn01F7_2E04()
fn01F7_2E04_entry:
	// succ:  l01F7_2E04
l01F7_2E04:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4154:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_2E60
	// succ:  l01F7_2E1A l01F7_2E60
l01F7_2E1A:
	si = Mem0[ds:0x4154:word16]
	ax = Mem0[ds:si:word16]
	cx = ax
	ax = ax + 0x0004
	SCZO = cond(ax)
	bx = ax
	si = cx
	dx = Mem0[ds:si:word16]
	si = dx
	dx = dx << 0x0001
	SCZO = cond(dx)
	dx = dx << 0x0001
	SCZO = cond(dx)
	dx = dx + si
	SCZO = cond(dx)
	dx = dx << 0x0001
	SCZO = cond(dx)
	cx = cx + dx
	SCZO = cond(cx)
	cx = cx + 0x0004
	SCZO = cond(cx)
	di = cx
	SCZO = cond(cx - ax)
	branch Test(EQ,Z) l01F7_2E60
	// succ:  l01F7_2E40 l01F7_2E60
l01F7_2E40:
	dx = Mem0[ss:bp + 0x0006:word16]
	cx = Mem0[ss:bp + 0x0008:word16]
	// succ:  l01F7_2E46
l01F7_2E46:
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0090)
	branch Test(EQ,Z) l01F7_2E59
	// succ:  l01F7_2E4D l01F7_2E59
l01F7_2E4D:
	SCZO = cond(Mem0[ds:bx + 0x0004:word16] - cx)
	branch Test(NE,Z) l01F7_2E59
	// succ:  l01F7_2E52 l01F7_2E59
l01F7_2E52:
	ax = dx
	al = al | 0x01
	SZO = cond(al)
	C = false
	Mem0[ds:bx + 0x0004:word16] = ax
	// succ:  l01F7_2E59
l01F7_2E59:
	bx = bx + 0x000A
	SCZO = cond(bx)
	SCZO = cond(bx - di)
	branch Test(NE,Z) l01F7_2E46
	// succ:  l01F7_2E60 l01F7_2E46
l01F7_2E60:
	SCZO = cond(Mem0[ds:0x4DE0:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_2E80
	SCZO = cond(Mem0[ds:0x4DE0:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_2E80
	// succ:  l01F7_2E67 l01F7_2E80
l01F7_2E67:
	SCZO = cond(Mem0[ds:0x4DE2:word16] - 0x0090)
	branch Test(EQ,Z) l01F7_2E80
	SCZO = cond(Mem0[ds:0x4DE2:word16] - 0x0090)
	branch Test(EQ,Z) l01F7_2E80
	// succ:  l01F7_2E6F l01F7_2E80
l01F7_2E6F:
	ax = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ds:0x4DE4:word16] - ax)
	branch Test(NE,Z) l01F7_2E80
	ax = Mem0[ss:bp + 0x0008:word16]
	SCZO = cond(Mem0[ds:0x4DE4:word16] - ax)
	branch Test(NE,Z) l01F7_2E80
	// succ:  l01F7_2E78 l01F7_2E80
l01F7_2E78:
	ax = Mem0[ss:bp + 0x0006:word16]
	al = al | 0x01
	SZO = cond(al)
	C = false
	Mem0[ds:0x4DE4:word16] = ax
	ax = Mem0[ss:bp + 0x0006:word16]
	al = al | 0x01
	SZO = cond(al)
	C = false
	Mem0[ds:0x4DE4:word16] = ax
	// succ:  l01F7_2E80
l01F7_2E80:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_2E04_exit
fn01F7_2E04_exit:


// fn01F7_2E8C
// Return size: 4
void fn01F7_2E8C()
fn01F7_2E8C_entry:
	// succ:  l01F7_2E8C
l01F7_2E8C:
	sp = fp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp + 0x0001
	SZO = cond(bp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = ds
	ds = ax
	sp = sp - 0x0004
	SCZO = cond(sp)
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = di
	sp = sp - 0x0002
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x4154:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_2EDC
	// succ:  l01F7_2EA2 l01F7_2EDC
l01F7_2EA2:
	si = Mem0[ds:0x4154:word16]
	ax = Mem0[ds:si:word16]
	cx = ax
	ax = ax + 0x0004
	SCZO = cond(ax)
	bx = ax
	dx = cx
	si = dx
	di = Mem0[ds:si:word16]
	si = di
	di = di << 0x0001
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	di = di + si
	SCZO = cond(di)
	di = di << 0x0001
	SCZO = cond(di)
	dx = dx + di
	SCZO = cond(dx)
	dx = dx + 0x0004
	SCZO = cond(dx)
	cx = dx
	SCZO = cond(dx - ax)
	branch Test(EQ,Z) l01F7_2EDC
	// succ:  l01F7_2ECA l01F7_2EDC
l01F7_2ECA:
	SCZO = cond(Mem0[ds:bx + 0x0002:word16] - 0x0090)
	branch Test(EQ,Z) l01F7_2ED5
	// succ:  l01F7_2ED1 l01F7_2ED5
l01F7_2ED1:
	v15 = Mem0[ds:bx + 0x0004:byte] & 0xFE
	Mem0[ds:bx + 0x0004:byte] = v15
	SZO = cond(Mem0[ds:bx + 0x0004:byte])
	C = false
	// succ:  l01F7_2ED5
l01F7_2ED5:
	bx = bx + 0x000A
	SCZO = cond(bx)
	SCZO = cond(bx - cx)
	branch Test(NE,Z) l01F7_2ECA
	// succ:  l01F7_2EDC l01F7_2ECA
l01F7_2EDC:
	SCZO = cond(Mem0[ds:0x4DE0:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_2EF0
	SCZO = cond(Mem0[ds:0x4DE0:word16] - 0x0000)
	branch Test(EQ,Z) l01F7_2EF0
	// succ:  l01F7_2EE3 l01F7_2EF0
l01F7_2EE3:
	SCZO = cond(Mem0[ds:0x4DE2:word16] - 0x0090)
	branch Test(EQ,Z) l01F7_2EF0
	SCZO = cond(Mem0[ds:0x4DE2:word16] - 0x0090)
	branch Test(EQ,Z) l01F7_2EF0
	// succ:  l01F7_2EEB l01F7_2EF0
l01F7_2EEB:
	v17 = Mem0[ds:0x4DE4:byte] & 0xFE
	Mem0[ds:0x4DE4:byte] = v17
	SZO = cond(Mem0[ds:0x4DE4:byte])
	C = false
	v18 = Mem0[ds:0x4DE4:byte] & 0xFE
	Mem0[ds:0x4DE4:byte] = v18
	SZO = cond(Mem0[ds:0x4DE4:byte])
	C = false
	// succ:  l01F7_2EF0
l01F7_2EF0:
	si = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	di = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	bp = bp - 0x0001
	SZO = cond(bp)
	sp = bp
	ds = Mem0[ss:sp:selector]
	sp = sp + 0x0002
	bp = Mem0[ss:sp:word16]
	sp = sp + 0x0002
	bp = bp - 0x0001
	SZO = cond(bp)
	return
	// succ:  fn01F7_2E8C_exit
fn01F7_2E8C_exit:


